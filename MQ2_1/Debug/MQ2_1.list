
MQ2_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065fc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  08006790  08006790  00007790  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b7c  08006b7c  000081d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006b7c  08006b7c  00007b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b84  08006b84  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b84  08006b84  00007b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006b88  08006b88  00007b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006b8c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000081d4  2**0
                  CONTENTS
 10 .bss          000001c0  200001d4  200001d4  000081d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000394  20000394  000081d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006a79  00000000  00000000  00008204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000169d  00000000  00000000  0000ec7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000648  00000000  00000000  00010320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000049f  00000000  00000000  00010968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b622  00000000  00000000  00010e07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008f88  00000000  00000000  0002c429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009f4da  00000000  00000000  000353b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d488b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000027ec  00000000  00000000  000d48d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  000d70bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006774 	.word	0x08006774

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08006774 	.word	0x08006774

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bae:	f000 fabb 	bl	8001128 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb2:	f000 f841 	bl	8000c38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb6:	f000 f907 	bl	8000dc8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000bba:	f000 f895 	bl	8000ce8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  printf("MQ2 Gas Sensor Test Started\r\n");
 8000bbe:	4819      	ldr	r0, [pc, #100]	@ (8000c24 <main+0x7c>)
 8000bc0:	f003 fe66 	bl	8004890 <puts>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Start ADC conversion
    HAL_ADC_Start(&hadc1);
 8000bc4:	4818      	ldr	r0, [pc, #96]	@ (8000c28 <main+0x80>)
 8000bc6:	f000 fccb 	bl	8001560 <HAL_ADC_Start>

    // Wait for conversion to complete
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK)
 8000bca:	f04f 31ff 	mov.w	r1, #4294967295
 8000bce:	4816      	ldr	r0, [pc, #88]	@ (8000c28 <main+0x80>)
 8000bd0:	f000 fdb2 	bl	8001738 <HAL_ADC_PollForConversion>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d11b      	bne.n	8000c12 <main+0x6a>
    {
      // Get the ADC value
      uint32_t adcValue = HAL_ADC_GetValue(&hadc1);
 8000bda:	4813      	ldr	r0, [pc, #76]	@ (8000c28 <main+0x80>)
 8000bdc:	f000 fe7a 	bl	80018d4 <HAL_ADC_GetValue>
 8000be0:	6078      	str	r0, [r7, #4]

      // Convert to voltage (assuming 3.3V reference)
      float voltage = (adcValue * 3.3f) / 4095.0f;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	ee07 3a90 	vmov	s15, r3
 8000be8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bec:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8000c2c <main+0x84>
 8000bf0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000bf4:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8000c30 <main+0x88>
 8000bf8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bfc:	edc7 7a00 	vstr	s15, [r7]

      // Print results
      printf("MQ2 - ADC: %lu, Voltage: %.3f V\r\n", adcValue, voltage);
 8000c00:	6838      	ldr	r0, [r7, #0]
 8000c02:	f7ff fca1 	bl	8000548 <__aeabi_f2d>
 8000c06:	4602      	mov	r2, r0
 8000c08:	460b      	mov	r3, r1
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	4809      	ldr	r0, [pc, #36]	@ (8000c34 <main+0x8c>)
 8000c0e:	f003 fdd7 	bl	80047c0 <iprintf>
    }

    // Stop ADC
    HAL_ADC_Stop(&hadc1);
 8000c12:	4805      	ldr	r0, [pc, #20]	@ (8000c28 <main+0x80>)
 8000c14:	f000 fd5a 	bl	80016cc <HAL_ADC_Stop>

    // Wait 1 second before next reading
    HAL_Delay(1000);
 8000c18:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c1c:	f000 faea 	bl	80011f4 <HAL_Delay>
    HAL_ADC_Start(&hadc1);
 8000c20:	e7d0      	b.n	8000bc4 <main+0x1c>
 8000c22:	bf00      	nop
 8000c24:	08006790 	.word	0x08006790
 8000c28:	200001f0 	.word	0x200001f0
 8000c2c:	40533333 	.word	0x40533333
 8000c30:	457ff000 	.word	0x457ff000
 8000c34:	080067b0 	.word	0x080067b0

08000c38 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b096      	sub	sp, #88	@ 0x58
 8000c3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c3e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c42:	2228      	movs	r2, #40	@ 0x28
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f003 ff02 	bl	8004a50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	611a      	str	r2, [r3, #16]
 8000c6a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c70:	2301      	movs	r3, #1
 8000c72:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c74:	2310      	movs	r3, #16
 8000c76:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000c80:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000c84:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c86:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f001 fd8c 	bl	80027a8 <HAL_RCC_OscConfig>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000c96:	f000 f8af 	bl	8000df8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000c9a:	230f      	movs	r3, #15
 8000c9c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f002 fd85 	bl	80037c4 <HAL_RCC_ClockConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000cc0:	f000 f89a 	bl	8000df8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000cc4:	2380      	movs	r3, #128	@ 0x80
 8000cc6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000cc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ccc:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f002 ff39 	bl	8003b48 <HAL_RCCEx_PeriphCLKConfig>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000cdc:	f000 f88c 	bl	8000df8 <Error_Handler>
  }
}
 8000ce0:	bf00      	nop
 8000ce2:	3758      	adds	r7, #88	@ 0x58
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	@ 0x28
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cee:	f107 031c 	add.w	r3, r7, #28
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
 8000d08:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
   */
  hadc1.Instance = ADC1;
 8000d0a:	4b2e      	ldr	r3, [pc, #184]	@ (8000dc4 <MX_ADC1_Init+0xdc>)
 8000d0c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000d10:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d12:	4b2c      	ldr	r3, [pc, #176]	@ (8000dc4 <MX_ADC1_Init+0xdc>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d18:	4b2a      	ldr	r3, [pc, #168]	@ (8000dc4 <MX_ADC1_Init+0xdc>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d1e:	4b29      	ldr	r3, [pc, #164]	@ (8000dc4 <MX_ADC1_Init+0xdc>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d24:	4b27      	ldr	r3, [pc, #156]	@ (8000dc4 <MX_ADC1_Init+0xdc>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d2a:	4b26      	ldr	r3, [pc, #152]	@ (8000dc4 <MX_ADC1_Init+0xdc>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d32:	4b24      	ldr	r3, [pc, #144]	@ (8000dc4 <MX_ADC1_Init+0xdc>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d38:	4b22      	ldr	r3, [pc, #136]	@ (8000dc4 <MX_ADC1_Init+0xdc>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d3e:	4b21      	ldr	r3, [pc, #132]	@ (8000dc4 <MX_ADC1_Init+0xdc>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d44:	4b1f      	ldr	r3, [pc, #124]	@ (8000dc4 <MX_ADC1_Init+0xdc>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000dc4 <MX_ADC1_Init+0xdc>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d52:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc4 <MX_ADC1_Init+0xdc>)
 8000d54:	2204      	movs	r2, #4
 8000d56:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d58:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc4 <MX_ADC1_Init+0xdc>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d5e:	4b19      	ldr	r3, [pc, #100]	@ (8000dc4 <MX_ADC1_Init+0xdc>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d64:	4817      	ldr	r0, [pc, #92]	@ (8000dc4 <MX_ADC1_Init+0xdc>)
 8000d66:	f000 fa69 	bl	800123c <HAL_ADC_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000d70:	f000 f842 	bl	8000df8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
   */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d78:	f107 031c 	add.w	r3, r7, #28
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4811      	ldr	r0, [pc, #68]	@ (8000dc4 <MX_ADC1_Init+0xdc>)
 8000d80:	f001 f874 	bl	8001e6c <HAL_ADCEx_MultiModeConfigChannel>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000d8a:	f000 f835 	bl	8000df8 <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d92:	2301      	movs	r3, #1
 8000d94:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000d9a:	2306      	movs	r3, #6
 8000d9c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	4619      	mov	r1, r3
 8000daa:	4806      	ldr	r0, [pc, #24]	@ (8000dc4 <MX_ADC1_Init+0xdc>)
 8000dac:	f000 fda0 	bl	80018f0 <HAL_ADC_ConfigChannel>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000db6:	f000 f81f 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 8000dba:	bf00      	nop
 8000dbc:	3728      	adds	r7, #40	@ 0x28
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200001f0 	.word	0x200001f0

08000dc8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dce:	4b09      	ldr	r3, [pc, #36]	@ (8000df4 <MX_GPIO_Init+0x2c>)
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	4a08      	ldr	r2, [pc, #32]	@ (8000df4 <MX_GPIO_Init+0x2c>)
 8000dd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dd8:	6153      	str	r3, [r2, #20]
 8000dda:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <MX_GPIO_Init+0x2c>)
 8000ddc:	695b      	ldr	r3, [r3, #20]
 8000dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	40021000 	.word	0x40021000

08000df8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dfc:	b672      	cpsid	i
}
 8000dfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <Error_Handler+0x8>

08000e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e48 <HAL_MspInit+0x44>)
 8000e0c:	699b      	ldr	r3, [r3, #24]
 8000e0e:	4a0e      	ldr	r2, [pc, #56]	@ (8000e48 <HAL_MspInit+0x44>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6193      	str	r3, [r2, #24]
 8000e16:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <HAL_MspInit+0x44>)
 8000e18:	699b      	ldr	r3, [r3, #24]
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e22:	4b09      	ldr	r3, [pc, #36]	@ (8000e48 <HAL_MspInit+0x44>)
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	4a08      	ldr	r2, [pc, #32]	@ (8000e48 <HAL_MspInit+0x44>)
 8000e28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e2c:	61d3      	str	r3, [r2, #28]
 8000e2e:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <HAL_MspInit+0x44>)
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	40021000 	.word	0x40021000

08000e4c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	@ 0x28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e6c:	d124      	bne.n	8000eb8 <HAL_ADC_MspInit+0x6c>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000e6e:	4b14      	ldr	r3, [pc, #80]	@ (8000ec0 <HAL_ADC_MspInit+0x74>)
 8000e70:	695b      	ldr	r3, [r3, #20]
 8000e72:	4a13      	ldr	r2, [pc, #76]	@ (8000ec0 <HAL_ADC_MspInit+0x74>)
 8000e74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e78:	6153      	str	r3, [r2, #20]
 8000e7a:	4b11      	ldr	r3, [pc, #68]	@ (8000ec0 <HAL_ADC_MspInit+0x74>)
 8000e7c:	695b      	ldr	r3, [r3, #20]
 8000e7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec0 <HAL_ADC_MspInit+0x74>)
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec0 <HAL_ADC_MspInit+0x74>)
 8000e8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e90:	6153      	str	r3, [r2, #20]
 8000e92:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec0 <HAL_ADC_MspInit+0x74>)
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	4619      	mov	r1, r3
 8000eb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eb4:	f001 fb06 	bl	80024c4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000eb8:	bf00      	nop
 8000eba:	3728      	adds	r7, #40	@ 0x28
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <NMI_Handler+0x4>

08000ecc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <HardFault_Handler+0x4>

08000ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <MemManage_Handler+0x4>

08000edc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <BusFault_Handler+0x4>

08000ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <UsageFault_Handler+0x4>

08000eec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f1a:	f000 f94b 	bl	80011b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0
  return 1;
 8000f26:	2301      	movs	r3, #1
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <_kill>:

int _kill(int pid, int sig)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f3c:	f003 fdda 	bl	8004af4 <__errno>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2216      	movs	r2, #22
 8000f44:	601a      	str	r2, [r3, #0]
  return -1;
 8000f46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <_exit>:

void _exit (int status)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f5a:	f04f 31ff 	mov.w	r1, #4294967295
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff ffe7 	bl	8000f32 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f64:	bf00      	nop
 8000f66:	e7fd      	b.n	8000f64 <_exit+0x12>

08000f68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	e00a      	b.n	8000f90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f7a:	f3af 8000 	nop.w
 8000f7e:	4601      	mov	r1, r0
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	1c5a      	adds	r2, r3, #1
 8000f84:	60ba      	str	r2, [r7, #8]
 8000f86:	b2ca      	uxtb	r2, r1
 8000f88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	617b      	str	r3, [r7, #20]
 8000f90:	697a      	ldr	r2, [r7, #20]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	dbf0      	blt.n	8000f7a <_read+0x12>
  }

  return len;
 8000f98:	687b      	ldr	r3, [r7, #4]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3718      	adds	r7, #24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b086      	sub	sp, #24
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	60f8      	str	r0, [r7, #12]
 8000faa:	60b9      	str	r1, [r7, #8]
 8000fac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
 8000fb2:	e009      	b.n	8000fc8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	1c5a      	adds	r2, r3, #1
 8000fb8:	60ba      	str	r2, [r7, #8]
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	617b      	str	r3, [r7, #20]
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	dbf1      	blt.n	8000fb4 <_write+0x12>
  }
  return len;
 8000fd0:	687b      	ldr	r3, [r7, #4]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <_close>:

int _close(int file)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fe2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
 8000ffa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001002:	605a      	str	r2, [r3, #4]
  return 0;
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <_isatty>:

int _isatty(int file)
{
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800101a:	2301      	movs	r3, #1
}
 800101c:	4618      	mov	r0, r3
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800104c:	4a14      	ldr	r2, [pc, #80]	@ (80010a0 <_sbrk+0x5c>)
 800104e:	4b15      	ldr	r3, [pc, #84]	@ (80010a4 <_sbrk+0x60>)
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001058:	4b13      	ldr	r3, [pc, #76]	@ (80010a8 <_sbrk+0x64>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d102      	bne.n	8001066 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001060:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <_sbrk+0x64>)
 8001062:	4a12      	ldr	r2, [pc, #72]	@ (80010ac <_sbrk+0x68>)
 8001064:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001066:	4b10      	ldr	r3, [pc, #64]	@ (80010a8 <_sbrk+0x64>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4413      	add	r3, r2
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	429a      	cmp	r2, r3
 8001072:	d207      	bcs.n	8001084 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001074:	f003 fd3e 	bl	8004af4 <__errno>
 8001078:	4603      	mov	r3, r0
 800107a:	220c      	movs	r2, #12
 800107c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
 8001082:	e009      	b.n	8001098 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001084:	4b08      	ldr	r3, [pc, #32]	@ (80010a8 <_sbrk+0x64>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800108a:	4b07      	ldr	r3, [pc, #28]	@ (80010a8 <_sbrk+0x64>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	4a05      	ldr	r2, [pc, #20]	@ (80010a8 <_sbrk+0x64>)
 8001094:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001096:	68fb      	ldr	r3, [r7, #12]
}
 8001098:	4618      	mov	r0, r3
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20003000 	.word	0x20003000
 80010a4:	00000400 	.word	0x00000400
 80010a8:	20000240 	.word	0x20000240
 80010ac:	20000398 	.word	0x20000398

080010b0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010b4:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <SystemInit+0x20>)
 80010b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010ba:	4a05      	ldr	r2, [pc, #20]	@ (80010d0 <SystemInit+0x20>)
 80010bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800110c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80010d8:	f7ff ffea 	bl	80010b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010dc:	480c      	ldr	r0, [pc, #48]	@ (8001110 <LoopForever+0x6>)
  ldr r1, =_edata
 80010de:	490d      	ldr	r1, [pc, #52]	@ (8001114 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001118 <LoopForever+0xe>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e4:	e002      	b.n	80010ec <LoopCopyDataInit>

080010e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ea:	3304      	adds	r3, #4

080010ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f0:	d3f9      	bcc.n	80010e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f2:	4a0a      	ldr	r2, [pc, #40]	@ (800111c <LoopForever+0x12>)
  ldr r4, =_ebss
 80010f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001120 <LoopForever+0x16>)
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f8:	e001      	b.n	80010fe <LoopFillZerobss>

080010fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010fc:	3204      	adds	r2, #4

080010fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001100:	d3fb      	bcc.n	80010fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001102:	f003 fcfd 	bl	8004b00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001106:	f7ff fd4f 	bl	8000ba8 <main>

0800110a <LoopForever>:

LoopForever:
    b LoopForever
 800110a:	e7fe      	b.n	800110a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800110c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001114:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001118:	08006b8c 	.word	0x08006b8c
  ldr r2, =_sbss
 800111c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001120:	20000394 	.word	0x20000394

08001124 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001124:	e7fe      	b.n	8001124 <ADC1_2_IRQHandler>
	...

08001128 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800112c:	4b08      	ldr	r3, [pc, #32]	@ (8001150 <HAL_Init+0x28>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a07      	ldr	r2, [pc, #28]	@ (8001150 <HAL_Init+0x28>)
 8001132:	f043 0310 	orr.w	r3, r3, #16
 8001136:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001138:	2003      	movs	r0, #3
 800113a:	f001 f98f 	bl	800245c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800113e:	200f      	movs	r0, #15
 8001140:	f000 f808 	bl	8001154 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001144:	f7ff fe5e 	bl	8000e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40022000 	.word	0x40022000

08001154 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800115c:	4b12      	ldr	r3, [pc, #72]	@ (80011a8 <HAL_InitTick+0x54>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b12      	ldr	r3, [pc, #72]	@ (80011ac <HAL_InitTick+0x58>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	4619      	mov	r1, r3
 8001166:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800116a:	fbb3 f3f1 	udiv	r3, r3, r1
 800116e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001172:	4618      	mov	r0, r3
 8001174:	f001 f999 	bl	80024aa <HAL_SYSTICK_Config>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e00e      	b.n	80011a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b0f      	cmp	r3, #15
 8001186:	d80a      	bhi.n	800119e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001188:	2200      	movs	r2, #0
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	f04f 30ff 	mov.w	r0, #4294967295
 8001190:	f001 f96f 	bl	8002472 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001194:	4a06      	ldr	r2, [pc, #24]	@ (80011b0 <HAL_InitTick+0x5c>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800119a:	2300      	movs	r3, #0
 800119c:	e000      	b.n	80011a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000000 	.word	0x20000000
 80011ac:	20000008 	.word	0x20000008
 80011b0:	20000004 	.word	0x20000004

080011b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011b8:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <HAL_IncTick+0x20>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	461a      	mov	r2, r3
 80011be:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <HAL_IncTick+0x24>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4413      	add	r3, r2
 80011c4:	4a04      	ldr	r2, [pc, #16]	@ (80011d8 <HAL_IncTick+0x24>)
 80011c6:	6013      	str	r3, [r2, #0]
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	20000008 	.word	0x20000008
 80011d8:	20000244 	.word	0x20000244

080011dc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return uwTick;  
 80011e0:	4b03      	ldr	r3, [pc, #12]	@ (80011f0 <HAL_GetTick+0x14>)
 80011e2:	681b      	ldr	r3, [r3, #0]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000244 	.word	0x20000244

080011f4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011fc:	f7ff ffee 	bl	80011dc <HAL_GetTick>
 8001200:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800120c:	d005      	beq.n	800121a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800120e:	4b0a      	ldr	r3, [pc, #40]	@ (8001238 <HAL_Delay+0x44>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	461a      	mov	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4413      	add	r3, r2
 8001218:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800121a:	bf00      	nop
 800121c:	f7ff ffde 	bl	80011dc <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	429a      	cmp	r2, r3
 800122a:	d8f7      	bhi.n	800121c <HAL_Delay+0x28>
  {
  }
}
 800122c:	bf00      	nop
 800122e:	bf00      	nop
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000008 	.word	0x20000008

0800123c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b09a      	sub	sp, #104	@ 0x68
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001244:	2300      	movs	r3, #0
 8001246:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800124a:	2300      	movs	r3, #0
 800124c:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d101      	bne.n	800125c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e172      	b.n	8001542 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	691b      	ldr	r3, [r3, #16]
 8001260:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001266:	f003 0310 	and.w	r3, r3, #16
 800126a:	2b00      	cmp	r3, #0
 800126c:	d176      	bne.n	800135c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001272:	2b00      	cmp	r3, #0
 8001274:	d152      	bne.n	800131c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff fddb 	bl	8000e4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d13b      	bne.n	800131c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f000 ff0b 	bl	80020c0 <ADC_Disable>
 80012aa:	4603      	mov	r3, r0
 80012ac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b4:	f003 0310 	and.w	r3, r3, #16
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d12f      	bne.n	800131c <HAL_ADC_Init+0xe0>
 80012bc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d12b      	bne.n	800131c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80012cc:	f023 0302 	bic.w	r3, r3, #2
 80012d0:	f043 0202 	orr.w	r2, r3, #2
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	689a      	ldr	r2, [r3, #8]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80012e6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	689a      	ldr	r2, [r3, #8]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80012f6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012f8:	4b94      	ldr	r3, [pc, #592]	@ (800154c <HAL_ADC_Init+0x310>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a94      	ldr	r2, [pc, #592]	@ (8001550 <HAL_ADC_Init+0x314>)
 80012fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001302:	0c9a      	lsrs	r2, r3, #18
 8001304:	4613      	mov	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800130e:	e002      	b.n	8001316 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	3b01      	subs	r3, #1
 8001314:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1f9      	bne.n	8001310 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d007      	beq.n	800133a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001334:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001338:	d110      	bne.n	800135c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133e:	f023 0312 	bic.w	r3, r3, #18
 8001342:	f043 0210 	orr.w	r2, r3, #16
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800134e:	f043 0201 	orr.w	r2, r3, #1
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001360:	f003 0310 	and.w	r3, r3, #16
 8001364:	2b00      	cmp	r3, #0
 8001366:	f040 80df 	bne.w	8001528 <HAL_ADC_Init+0x2ec>
 800136a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800136e:	2b00      	cmp	r3, #0
 8001370:	f040 80da 	bne.w	8001528 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800137e:	2b00      	cmp	r3, #0
 8001380:	f040 80d2 	bne.w	8001528 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001388:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800138c:	f043 0202 	orr.w	r2, r3, #2
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001394:	4b6f      	ldr	r3, [pc, #444]	@ (8001554 <HAL_ADC_Init+0x318>)
 8001396:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80013a0:	d102      	bne.n	80013a8 <HAL_ADC_Init+0x16c>
 80013a2:	4b6d      	ldr	r3, [pc, #436]	@ (8001558 <HAL_ADC_Init+0x31c>)
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	e002      	b.n	80013ae <HAL_ADC_Init+0x172>
 80013a8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80013ac:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 0303 	and.w	r3, r3, #3
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d108      	bne.n	80013ce <HAL_ADC_Init+0x192>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d101      	bne.n	80013ce <HAL_ADC_Init+0x192>
 80013ca:	2301      	movs	r3, #1
 80013cc:	e000      	b.n	80013d0 <HAL_ADC_Init+0x194>
 80013ce:	2300      	movs	r3, #0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d11c      	bne.n	800140e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013d4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d010      	beq.n	80013fc <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d107      	bne.n	80013f6 <HAL_ADC_Init+0x1ba>
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d101      	bne.n	80013f6 <HAL_ADC_Init+0x1ba>
 80013f2:	2301      	movs	r3, #1
 80013f4:	e000      	b.n	80013f8 <HAL_ADC_Init+0x1bc>
 80013f6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d108      	bne.n	800140e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80013fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	431a      	orrs	r2, r3
 800140a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800140c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	7e5b      	ldrb	r3, [r3, #25]
 8001412:	035b      	lsls	r3, r3, #13
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001418:	2a01      	cmp	r2, #1
 800141a:	d002      	beq.n	8001422 <HAL_ADC_Init+0x1e6>
 800141c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001420:	e000      	b.n	8001424 <HAL_ADC_Init+0x1e8>
 8001422:	2200      	movs	r2, #0
 8001424:	431a      	orrs	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	431a      	orrs	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	4313      	orrs	r3, r2
 8001432:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001434:	4313      	orrs	r3, r2
 8001436:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d11b      	bne.n	800147a <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	7e5b      	ldrb	r3, [r3, #25]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d109      	bne.n	800145e <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800144e:	3b01      	subs	r3, #1
 8001450:	045a      	lsls	r2, r3, #17
 8001452:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001454:	4313      	orrs	r3, r2
 8001456:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800145a:	663b      	str	r3, [r7, #96]	@ 0x60
 800145c:	e00d      	b.n	800147a <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001462:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001466:	f043 0220 	orr.w	r2, r3, #32
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001472:	f043 0201 	orr.w	r2, r3, #1
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800147e:	2b01      	cmp	r3, #1
 8001480:	d007      	beq.n	8001492 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800148a:	4313      	orrs	r3, r2
 800148c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800148e:	4313      	orrs	r3, r2
 8001490:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f003 030c 	and.w	r3, r3, #12
 800149c:	2b00      	cmp	r3, #0
 800149e:	d114      	bne.n	80014ca <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	6812      	ldr	r2, [r2, #0]
 80014aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80014ae:	f023 0302 	bic.w	r3, r3, #2
 80014b2:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	7e1b      	ldrb	r3, [r3, #24]
 80014b8:	039a      	lsls	r2, r3, #14
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	4313      	orrs	r3, r2
 80014c4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80014c6:	4313      	orrs	r3, r2
 80014c8:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68da      	ldr	r2, [r3, #12]
 80014d0:	4b22      	ldr	r3, [pc, #136]	@ (800155c <HAL_ADC_Init+0x320>)
 80014d2:	4013      	ands	r3, r2
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	6812      	ldr	r2, [r2, #0]
 80014d8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80014da:	430b      	orrs	r3, r1
 80014dc:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d10c      	bne.n	8001500 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ec:	f023 010f 	bic.w	r1, r3, #15
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69db      	ldr	r3, [r3, #28]
 80014f4:	1e5a      	subs	r2, r3, #1
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80014fe:	e007      	b.n	8001510 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f022 020f 	bic.w	r2, r2, #15
 800150e:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151a:	f023 0303 	bic.w	r3, r3, #3
 800151e:	f043 0201 	orr.w	r2, r3, #1
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	641a      	str	r2, [r3, #64]	@ 0x40
 8001526:	e00a      	b.n	800153e <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152c:	f023 0312 	bic.w	r3, r3, #18
 8001530:	f043 0210 	orr.w	r2, r3, #16
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001538:	2301      	movs	r3, #1
 800153a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800153e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001542:	4618      	mov	r0, r3
 8001544:	3768      	adds	r7, #104	@ 0x68
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000000 	.word	0x20000000
 8001550:	431bde83 	.word	0x431bde83
 8001554:	50000300 	.word	0x50000300
 8001558:	50000100 	.word	0x50000100
 800155c:	fff0c007 	.word	0xfff0c007

08001560 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001568:	2300      	movs	r3, #0
 800156a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f003 0304 	and.w	r3, r3, #4
 8001576:	2b00      	cmp	r3, #0
 8001578:	f040 809c 	bne.w	80016b4 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001582:	2b01      	cmp	r3, #1
 8001584:	d101      	bne.n	800158a <HAL_ADC_Start+0x2a>
 8001586:	2302      	movs	r3, #2
 8001588:	e097      	b.n	80016ba <HAL_ADC_Start+0x15a>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2201      	movs	r2, #1
 800158e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f000 fd30 	bl	8001ff8 <ADC_Enable>
 8001598:	4603      	mov	r3, r0
 800159a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f040 8083 	bne.w	80016aa <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80015ac:	f023 0301 	bic.w	r3, r3, #1
 80015b0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80015b8:	4b42      	ldr	r3, [pc, #264]	@ (80016c4 <HAL_ADC_Start+0x164>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f003 031f 	and.w	r3, r3, #31
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d004      	beq.n	80015ce <HAL_ADC_Start+0x6e>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015cc:	d115      	bne.n	80015fa <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d027      	beq.n	8001638 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ec:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80015f0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80015f8:	e01e      	b.n	8001638 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800160e:	d004      	beq.n	800161a <HAL_ADC_Start+0xba>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a2c      	ldr	r2, [pc, #176]	@ (80016c8 <HAL_ADC_Start+0x168>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d10e      	bne.n	8001638 <HAL_ADC_Start+0xd8>
 800161a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d007      	beq.n	8001638 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001630:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001640:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001644:	d106      	bne.n	8001654 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164a:	f023 0206 	bic.w	r2, r3, #6
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	645a      	str	r2, [r3, #68]	@ 0x44
 8001652:	e002      	b.n	800165a <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	221c      	movs	r2, #28
 8001668:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800166a:	4b16      	ldr	r3, [pc, #88]	@ (80016c4 <HAL_ADC_Start+0x164>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 031f 	and.w	r3, r3, #31
 8001672:	2b00      	cmp	r3, #0
 8001674:	d010      	beq.n	8001698 <HAL_ADC_Start+0x138>
 8001676:	4b13      	ldr	r3, [pc, #76]	@ (80016c4 <HAL_ADC_Start+0x164>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 031f 	and.w	r3, r3, #31
 800167e:	2b05      	cmp	r3, #5
 8001680:	d00a      	beq.n	8001698 <HAL_ADC_Start+0x138>
 8001682:	4b10      	ldr	r3, [pc, #64]	@ (80016c4 <HAL_ADC_Start+0x164>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 031f 	and.w	r3, r3, #31
 800168a:	2b09      	cmp	r3, #9
 800168c:	d004      	beq.n	8001698 <HAL_ADC_Start+0x138>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001696:	d10f      	bne.n	80016b8 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	689a      	ldr	r2, [r3, #8]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 0204 	orr.w	r2, r2, #4
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	e006      	b.n	80016b8 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80016b2:	e001      	b.n	80016b8 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80016b4:	2302      	movs	r3, #2
 80016b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	50000300 	.word	0x50000300
 80016c8:	50000100 	.word	0x50000100

080016cc <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016d4:	2300      	movs	r3, #0
 80016d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d101      	bne.n	80016e6 <HAL_ADC_Stop+0x1a>
 80016e2:	2302      	movs	r3, #2
 80016e4:	e023      	b.n	800172e <HAL_ADC_Stop+0x62>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2201      	movs	r2, #1
 80016ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80016ee:	216c      	movs	r1, #108	@ 0x6c
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 fd4b 	bl	800218c <ADC_ConversionStop>
 80016f6:	4603      	mov	r3, r0
 80016f8:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d111      	bne.n	8001724 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 fcdd 	bl	80020c0 <ADC_Disable>
 8001706:	4603      	mov	r3, r0
 8001708:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d109      	bne.n	8001724 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001714:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001718:	f023 0301 	bic.w	r3, r3, #1
 800171c:	f043 0201 	orr.w	r2, r3, #1
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800172c:	7bfb      	ldrb	r3, [r7, #15]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001742:	2300      	movs	r3, #0
 8001744:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	2b08      	cmp	r3, #8
 800174c:	d102      	bne.n	8001754 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800174e:	2308      	movs	r3, #8
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	e02e      	b.n	80017b2 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001754:	4b5e      	ldr	r3, [pc, #376]	@ (80018d0 <HAL_ADC_PollForConversion+0x198>)
 8001756:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f003 031f 	and.w	r3, r3, #31
 8001760:	2b00      	cmp	r3, #0
 8001762:	d112      	bne.n	800178a <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	2b01      	cmp	r3, #1
 8001770:	d11d      	bne.n	80017ae <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001776:	f043 0220 	orr.w	r2, r3, #32
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e09d      	b.n	80018c6 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d00b      	beq.n	80017ae <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179a:	f043 0220 	orr.w	r2, r3, #32
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e08b      	b.n	80018c6 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80017ae:	230c      	movs	r3, #12
 80017b0:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80017b2:	4b47      	ldr	r3, [pc, #284]	@ (80018d0 <HAL_ADC_PollForConversion+0x198>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 031f 	and.w	r3, r3, #31
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d004      	beq.n	80017c8 <HAL_ADC_PollForConversion+0x90>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017c6:	d104      	bne.n	80017d2 <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	e003      	b.n	80017da <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80017d2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80017da:	f7ff fcff 	bl	80011dc <HAL_GetTick>
 80017de:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80017e0:	e021      	b.n	8001826 <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e8:	d01d      	beq.n	8001826 <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d007      	beq.n	8001800 <HAL_ADC_PollForConversion+0xc8>
 80017f0:	f7ff fcf4 	bl	80011dc <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d212      	bcs.n	8001826 <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	4013      	ands	r3, r2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10b      	bne.n	8001826 <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001812:	f043 0204 	orr.w	r2, r3, #4
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e04f      	b.n	80018c6 <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	4013      	ands	r3, r2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0d6      	beq.n	80017e2 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001838:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800184a:	2b00      	cmp	r3, #0
 800184c:	d131      	bne.n	80018b2 <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001854:	2b00      	cmp	r3, #0
 8001856:	d12c      	bne.n	80018b2 <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	2b08      	cmp	r3, #8
 8001864:	d125      	bne.n	80018b2 <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b00      	cmp	r3, #0
 8001872:	d112      	bne.n	800189a <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001878:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001884:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d112      	bne.n	80018b2 <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001890:	f043 0201 	orr.w	r2, r3, #1
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	641a      	str	r2, [r3, #64]	@ 0x40
 8001898:	e00b      	b.n	80018b2 <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189e:	f043 0220 	orr.w	r2, r3, #32
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018aa:	f043 0201 	orr.w	r2, r3, #1
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d103      	bne.n	80018c4 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	697a      	ldr	r2, [r7, #20]
 80018c2:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	50000300 	.word	0x50000300

080018d4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
	...

080018f0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b09b      	sub	sp, #108	@ 0x6c
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018fa:	2300      	movs	r3, #0
 80018fc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800190a:	2b01      	cmp	r3, #1
 800190c:	d101      	bne.n	8001912 <HAL_ADC_ConfigChannel+0x22>
 800190e:	2302      	movs	r3, #2
 8001910:	e2a1      	b.n	8001e56 <HAL_ADC_ConfigChannel+0x566>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2201      	movs	r2, #1
 8001916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	f040 8285 	bne.w	8001e34 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b04      	cmp	r3, #4
 8001930:	d81c      	bhi.n	800196c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	4613      	mov	r3, r2
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	4413      	add	r3, r2
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	461a      	mov	r2, r3
 8001946:	231f      	movs	r3, #31
 8001948:	4093      	lsls	r3, r2
 800194a:	43db      	mvns	r3, r3
 800194c:	4019      	ands	r1, r3
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	6818      	ldr	r0, [r3, #0]
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685a      	ldr	r2, [r3, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	4413      	add	r3, r2
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	fa00 f203 	lsl.w	r2, r0, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	631a      	str	r2, [r3, #48]	@ 0x30
 800196a:	e063      	b.n	8001a34 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	2b09      	cmp	r3, #9
 8001972:	d81e      	bhi.n	80019b2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	4613      	mov	r3, r2
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	4413      	add	r3, r2
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	3b1e      	subs	r3, #30
 8001988:	221f      	movs	r2, #31
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43db      	mvns	r3, r3
 8001990:	4019      	ands	r1, r3
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	6818      	ldr	r0, [r3, #0]
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	4613      	mov	r3, r2
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	4413      	add	r3, r2
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	3b1e      	subs	r3, #30
 80019a4:	fa00 f203 	lsl.w	r2, r0, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	635a      	str	r2, [r3, #52]	@ 0x34
 80019b0:	e040      	b.n	8001a34 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b0e      	cmp	r3, #14
 80019b8:	d81e      	bhi.n	80019f8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	4413      	add	r3, r2
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	3b3c      	subs	r3, #60	@ 0x3c
 80019ce:	221f      	movs	r2, #31
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	4019      	ands	r1, r3
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	6818      	ldr	r0, [r3, #0]
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	4613      	mov	r3, r2
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	4413      	add	r3, r2
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	3b3c      	subs	r3, #60	@ 0x3c
 80019ea:	fa00 f203 	lsl.w	r2, r0, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	430a      	orrs	r2, r1
 80019f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80019f6:	e01d      	b.n	8001a34 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	4613      	mov	r3, r2
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	4413      	add	r3, r2
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	3b5a      	subs	r3, #90	@ 0x5a
 8001a0c:	221f      	movs	r2, #31
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	4019      	ands	r1, r3
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	4413      	add	r3, r2
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	3b5a      	subs	r3, #90	@ 0x5a
 8001a28:	fa00 f203 	lsl.w	r2, r0, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 030c 	and.w	r3, r3, #12
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f040 80e5 	bne.w	8001c0e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b09      	cmp	r3, #9
 8001a4a:	d91c      	bls.n	8001a86 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6999      	ldr	r1, [r3, #24]
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	4613      	mov	r3, r2
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	4413      	add	r3, r2
 8001a5c:	3b1e      	subs	r3, #30
 8001a5e:	2207      	movs	r2, #7
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	4019      	ands	r1, r3
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	6898      	ldr	r0, [r3, #8]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4613      	mov	r3, r2
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	4413      	add	r3, r2
 8001a76:	3b1e      	subs	r3, #30
 8001a78:	fa00 f203 	lsl.w	r2, r0, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	619a      	str	r2, [r3, #24]
 8001a84:	e019      	b.n	8001aba <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6959      	ldr	r1, [r3, #20]
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4613      	mov	r3, r2
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	4413      	add	r3, r2
 8001a96:	2207      	movs	r2, #7
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	4019      	ands	r1, r3
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	6898      	ldr	r0, [r3, #8]
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	4413      	add	r3, r2
 8001aae:	fa00 f203 	lsl.w	r2, r0, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	695a      	ldr	r2, [r3, #20]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	08db      	lsrs	r3, r3, #3
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	2b03      	cmp	r3, #3
 8001ada:	d84f      	bhi.n	8001b7c <HAL_ADC_ConfigChannel+0x28c>
 8001adc:	a201      	add	r2, pc, #4	@ (adr r2, 8001ae4 <HAL_ADC_ConfigChannel+0x1f4>)
 8001ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae2:	bf00      	nop
 8001ae4:	08001af5 	.word	0x08001af5
 8001ae8:	08001b17 	.word	0x08001b17
 8001aec:	08001b39 	.word	0x08001b39
 8001af0:	08001b5b 	.word	0x08001b5b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001afa:	4b9c      	ldr	r3, [pc, #624]	@ (8001d6c <HAL_ADC_ConfigChannel+0x47c>)
 8001afc:	4013      	ands	r3, r2
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	6812      	ldr	r2, [r2, #0]
 8001b02:	0691      	lsls	r1, r2, #26
 8001b04:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001b06:	430a      	orrs	r2, r1
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001b12:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b14:	e07b      	b.n	8001c0e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001b1c:	4b93      	ldr	r3, [pc, #588]	@ (8001d6c <HAL_ADC_ConfigChannel+0x47c>)
 8001b1e:	4013      	ands	r3, r2
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	6812      	ldr	r2, [r2, #0]
 8001b24:	0691      	lsls	r1, r2, #26
 8001b26:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001b34:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b36:	e06a      	b.n	8001c0e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001b3e:	4b8b      	ldr	r3, [pc, #556]	@ (8001d6c <HAL_ADC_ConfigChannel+0x47c>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	6812      	ldr	r2, [r2, #0]
 8001b46:	0691      	lsls	r1, r2, #26
 8001b48:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001b56:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b58:	e059      	b.n	8001c0e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001b60:	4b82      	ldr	r3, [pc, #520]	@ (8001d6c <HAL_ADC_ConfigChannel+0x47c>)
 8001b62:	4013      	ands	r3, r2
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	0691      	lsls	r1, r2, #26
 8001b6a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001b78:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b7a:	e048      	b.n	8001c0e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b82:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	069b      	lsls	r3, r3, #26
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d107      	bne.n	8001ba0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001b9e:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ba6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	069b      	lsls	r3, r3, #26
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d107      	bne.n	8001bc4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001bc2:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001bca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	069b      	lsls	r3, r3, #26
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d107      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001be6:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	069b      	lsls	r3, r3, #26
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d107      	bne.n	8001c0c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001c0a:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001c0c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 0303 	and.w	r3, r3, #3
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d108      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x33e>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d101      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x33e>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e000      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x340>
 8001c2e:	2300      	movs	r3, #0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f040 810a 	bne.w	8001e4a <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d00f      	beq.n	8001c5e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43da      	mvns	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	400a      	ands	r2, r1
 8001c58:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001c5c:	e049      	b.n	8001cf2 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	409a      	lsls	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b09      	cmp	r3, #9
 8001c7e:	d91c      	bls.n	8001cba <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6999      	ldr	r1, [r3, #24]
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	4413      	add	r3, r2
 8001c90:	3b1b      	subs	r3, #27
 8001c92:	2207      	movs	r2, #7
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	4019      	ands	r1, r3
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	6898      	ldr	r0, [r3, #8]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	4413      	add	r3, r2
 8001caa:	3b1b      	subs	r3, #27
 8001cac:	fa00 f203 	lsl.w	r2, r0, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	619a      	str	r2, [r3, #24]
 8001cb8:	e01b      	b.n	8001cf2 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6959      	ldr	r1, [r3, #20]
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	1c5a      	adds	r2, r3, #1
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	4413      	add	r3, r2
 8001ccc:	2207      	movs	r2, #7
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	4019      	ands	r1, r3
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	6898      	ldr	r0, [r3, #8]
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	1c5a      	adds	r2, r3, #1
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	4413      	add	r3, r2
 8001ce6:	fa00 f203 	lsl.w	r2, r0, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cf2:	4b1f      	ldr	r3, [pc, #124]	@ (8001d70 <HAL_ADC_ConfigChannel+0x480>)
 8001cf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2b10      	cmp	r3, #16
 8001cfc:	d105      	bne.n	8001d0a <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001cfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d015      	beq.n	8001d36 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001d0e:	2b11      	cmp	r3, #17
 8001d10:	d105      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001d12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00b      	beq.n	8001d36 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001d22:	2b12      	cmp	r3, #18
 8001d24:	f040 8091 	bne.w	8001e4a <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001d28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f040 808a 	bne.w	8001e4a <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d3e:	d102      	bne.n	8001d46 <HAL_ADC_ConfigChannel+0x456>
 8001d40:	4b0c      	ldr	r3, [pc, #48]	@ (8001d74 <HAL_ADC_ConfigChannel+0x484>)
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	e002      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x45c>
 8001d46:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001d4a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d10e      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x488>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d107      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x488>
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e006      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x48a>
 8001d6c:	83fff000 	.word	0x83fff000
 8001d70:	50000300 	.word	0x50000300
 8001d74:	50000100 	.word	0x50000100
 8001d78:	2300      	movs	r3, #0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d150      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d7e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d010      	beq.n	8001da6 <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d107      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x4b0>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d101      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x4b0>
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e000      	b.n	8001da2 <HAL_ADC_ConfigChannel+0x4b2>
 8001da0:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d13c      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2b10      	cmp	r3, #16
 8001dac:	d11d      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x4fa>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001db6:	d118      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001db8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001dc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001dc2:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001dc4:	4b27      	ldr	r3, [pc, #156]	@ (8001e64 <HAL_ADC_ConfigChannel+0x574>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a27      	ldr	r2, [pc, #156]	@ (8001e68 <HAL_ADC_ConfigChannel+0x578>)
 8001dca:	fba2 2303 	umull	r2, r3, r2, r3
 8001dce:	0c9a      	lsrs	r2, r3, #18
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001dda:	e002      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1f9      	bne.n	8001ddc <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001de8:	e02e      	b.n	8001e48 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2b11      	cmp	r3, #17
 8001df0:	d10b      	bne.n	8001e0a <HAL_ADC_ConfigChannel+0x51a>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001dfa:	d106      	bne.n	8001e0a <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001dfc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8001e04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e06:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e08:	e01e      	b.n	8001e48 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2b12      	cmp	r3, #18
 8001e10:	d11a      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001e12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001e1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e1c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e1e:	e013      	b.n	8001e48 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e24:	f043 0220 	orr.w	r2, r3, #32
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001e32:	e00a      	b.n	8001e4a <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e38:	f043 0220 	orr.w	r2, r3, #32
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001e46:	e000      	b.n	8001e4a <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e48:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001e52:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	376c      	adds	r7, #108	@ 0x6c
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	20000000 	.word	0x20000000
 8001e68:	431bde83 	.word	0x431bde83

08001e6c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b099      	sub	sp, #100	@ 0x64
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e84:	d102      	bne.n	8001e8c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001e86:	4b5a      	ldr	r3, [pc, #360]	@ (8001ff0 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	e002      	b.n	8001e92 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001e8c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001e90:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e0a2      	b.n	8001fe2 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d101      	bne.n	8001eaa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	e09b      	b.n	8001fe2 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d17f      	bne.n	8001fc0 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d179      	bne.n	8001fc0 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ecc:	4b49      	ldr	r3, [pc, #292]	@ (8001ff4 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001ece:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d040      	beq.n	8001f5a <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001ed8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	6859      	ldr	r1, [r3, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001eea:	035b      	lsls	r3, r3, #13
 8001eec:	430b      	orrs	r3, r1
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ef2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d108      	bne.n	8001f14 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d101      	bne.n	8001f14 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001f10:	2301      	movs	r3, #1
 8001f12:	e000      	b.n	8001f16 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001f14:	2300      	movs	r3, #0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d15c      	bne.n	8001fd4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d107      	bne.n	8001f36 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d101      	bne.n	8001f36 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001f36:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d14b      	bne.n	8001fd4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001f3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001f44:	f023 030f 	bic.w	r3, r3, #15
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	6811      	ldr	r1, [r2, #0]
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	6892      	ldr	r2, [r2, #8]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	431a      	orrs	r2, r3
 8001f54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f56:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f58:	e03c      	b.n	8001fd4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001f5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f64:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d108      	bne.n	8001f86 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d101      	bne.n	8001f86 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001f82:	2301      	movs	r3, #1
 8001f84:	e000      	b.n	8001f88 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001f86:	2300      	movs	r3, #0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d123      	bne.n	8001fd4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 0303 	and.w	r3, r3, #3
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d107      	bne.n	8001fa8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e000      	b.n	8001faa <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001fa8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d112      	bne.n	8001fd4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001fae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001fb6:	f023 030f 	bic.w	r3, r3, #15
 8001fba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001fbc:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fbe:	e009      	b.n	8001fd4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc4:	f043 0220 	orr.w	r2, r3, #32
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8001fd2:	e000      	b.n	8001fd6 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fd4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001fde:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3764      	adds	r7, #100	@ 0x64
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	50000100 	.word	0x50000100
 8001ff4:	50000300 	.word	0x50000300

08001ff8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002000:	2300      	movs	r3, #0
 8002002:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	2b01      	cmp	r3, #1
 8002010:	d108      	bne.n	8002024 <ADC_Enable+0x2c>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b01      	cmp	r3, #1
 800201e:	d101      	bne.n	8002024 <ADC_Enable+0x2c>
 8002020:	2301      	movs	r3, #1
 8002022:	e000      	b.n	8002026 <ADC_Enable+0x2e>
 8002024:	2300      	movs	r3, #0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d143      	bne.n	80020b2 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	4b22      	ldr	r3, [pc, #136]	@ (80020bc <ADC_Enable+0xc4>)
 8002032:	4013      	ands	r3, r2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00d      	beq.n	8002054 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203c:	f043 0210 	orr.w	r2, r3, #16
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002048:	f043 0201 	orr.w	r2, r3, #1
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e02f      	b.n	80020b4 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689a      	ldr	r2, [r3, #8]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f042 0201 	orr.w	r2, r2, #1
 8002062:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002064:	f7ff f8ba 	bl	80011dc <HAL_GetTick>
 8002068:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800206a:	e01b      	b.n	80020a4 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800206c:	f7ff f8b6 	bl	80011dc <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d914      	bls.n	80020a4 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b01      	cmp	r3, #1
 8002086:	d00d      	beq.n	80020a4 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208c:	f043 0210 	orr.w	r2, r3, #16
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002098:	f043 0201 	orr.w	r2, r3, #1
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e007      	b.n	80020b4 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d1dc      	bne.n	800206c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	8000003f 	.word	0x8000003f

080020c0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d108      	bne.n	80020ec <ADC_Disable+0x2c>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d101      	bne.n	80020ec <ADC_Disable+0x2c>
 80020e8:	2301      	movs	r3, #1
 80020ea:	e000      	b.n	80020ee <ADC_Disable+0x2e>
 80020ec:	2300      	movs	r3, #0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d047      	beq.n	8002182 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 030d 	and.w	r3, r3, #13
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d10f      	bne.n	8002120 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689a      	ldr	r2, [r3, #8]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f042 0202 	orr.w	r2, r2, #2
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2203      	movs	r2, #3
 8002116:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002118:	f7ff f860 	bl	80011dc <HAL_GetTick>
 800211c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800211e:	e029      	b.n	8002174 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002124:	f043 0210 	orr.w	r2, r3, #16
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002130:	f043 0201 	orr.w	r2, r3, #1
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e023      	b.n	8002184 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800213c:	f7ff f84e 	bl	80011dc <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d914      	bls.n	8002174 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b01      	cmp	r3, #1
 8002156:	d10d      	bne.n	8002174 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215c:	f043 0210 	orr.w	r2, r3, #16
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002168:	f043 0201 	orr.w	r2, r3, #1
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e007      	b.n	8002184 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b01      	cmp	r3, #1
 8002180:	d0dc      	beq.n	800213c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800219e:	2300      	movs	r3, #0
 80021a0:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 030c 	and.w	r3, r3, #12
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 809b 	beq.w	80022e8 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80021c0:	d12a      	bne.n	8002218 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d126      	bne.n	8002218 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d122      	bne.n	8002218 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 80021d2:	230c      	movs	r3, #12
 80021d4:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80021d6:	e014      	b.n	8002202 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	4a46      	ldr	r2, [pc, #280]	@ (80022f4 <ADC_ConversionStop+0x168>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d90d      	bls.n	80021fc <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e4:	f043 0210 	orr.w	r2, r3, #16
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f0:	f043 0201 	orr.w	r2, r3, #1
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	645a      	str	r2, [r3, #68]	@ 0x44
          
          return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e076      	b.n	80022ea <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	3301      	adds	r3, #1
 8002200:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800220c:	2b40      	cmp	r3, #64	@ 0x40
 800220e:	d1e3      	bne.n	80021d8 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2240      	movs	r2, #64	@ 0x40
 8002216:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	2b60      	cmp	r3, #96	@ 0x60
 800221c:	d015      	beq.n	800224a <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b04      	cmp	r3, #4
 800222a:	d10e      	bne.n	800224a <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002236:	2b00      	cmp	r3, #0
 8002238:	d107      	bne.n	800224a <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f042 0210 	orr.w	r2, r2, #16
 8002248:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	2b0c      	cmp	r3, #12
 800224e:	d015      	beq.n	800227c <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	2b08      	cmp	r3, #8
 800225c:	d10e      	bne.n	800227c <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002268:	2b00      	cmp	r3, #0
 800226a:	d107      	bne.n	800227c <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0220 	orr.w	r2, r2, #32
 800227a:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	2b60      	cmp	r3, #96	@ 0x60
 8002280:	d005      	beq.n	800228e <ADC_ConversionStop+0x102>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	2b6c      	cmp	r3, #108	@ 0x6c
 8002286:	d105      	bne.n	8002294 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002288:	230c      	movs	r3, #12
 800228a:	617b      	str	r3, [r7, #20]
        break;
 800228c:	e005      	b.n	800229a <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800228e:	2308      	movs	r3, #8
 8002290:	617b      	str	r3, [r7, #20]
        break;
 8002292:	e002      	b.n	800229a <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002294:	2304      	movs	r3, #4
 8002296:	617b      	str	r3, [r7, #20]
        break;
 8002298:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800229a:	f7fe ff9f 	bl	80011dc <HAL_GetTick>
 800229e:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80022a0:	e01b      	b.n	80022da <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80022a2:	f7fe ff9b 	bl	80011dc <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b0b      	cmp	r3, #11
 80022ae:	d914      	bls.n	80022da <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	689a      	ldr	r2, [r3, #8]
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	4013      	ands	r3, r2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00d      	beq.n	80022da <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c2:	f043 0210 	orr.w	r2, r3, #16
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ce:	f043 0201 	orr.w	r2, r3, #1
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	645a      	str	r2, [r3, #68]	@ 0x44
        
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e007      	b.n	80022ea <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	4013      	ands	r3, r2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1dc      	bne.n	80022a2 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	000993ff 	.word	0x000993ff

080022f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002308:	4b0c      	ldr	r3, [pc, #48]	@ (800233c <__NVIC_SetPriorityGrouping+0x44>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002314:	4013      	ands	r3, r2
 8002316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002320:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002324:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800232a:	4a04      	ldr	r2, [pc, #16]	@ (800233c <__NVIC_SetPriorityGrouping+0x44>)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	60d3      	str	r3, [r2, #12]
}
 8002330:	bf00      	nop
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	e000ed00 	.word	0xe000ed00

08002340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002344:	4b04      	ldr	r3, [pc, #16]	@ (8002358 <__NVIC_GetPriorityGrouping+0x18>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	0a1b      	lsrs	r3, r3, #8
 800234a:	f003 0307 	and.w	r3, r3, #7
}
 800234e:	4618      	mov	r0, r3
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	6039      	str	r1, [r7, #0]
 8002366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236c:	2b00      	cmp	r3, #0
 800236e:	db0a      	blt.n	8002386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	b2da      	uxtb	r2, r3
 8002374:	490c      	ldr	r1, [pc, #48]	@ (80023a8 <__NVIC_SetPriority+0x4c>)
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	0112      	lsls	r2, r2, #4
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	440b      	add	r3, r1
 8002380:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002384:	e00a      	b.n	800239c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	b2da      	uxtb	r2, r3
 800238a:	4908      	ldr	r1, [pc, #32]	@ (80023ac <__NVIC_SetPriority+0x50>)
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	3b04      	subs	r3, #4
 8002394:	0112      	lsls	r2, r2, #4
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	440b      	add	r3, r1
 800239a:	761a      	strb	r2, [r3, #24]
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	e000e100 	.word	0xe000e100
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b089      	sub	sp, #36	@ 0x24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f1c3 0307 	rsb	r3, r3, #7
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	bf28      	it	cs
 80023ce:	2304      	movcs	r3, #4
 80023d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3304      	adds	r3, #4
 80023d6:	2b06      	cmp	r3, #6
 80023d8:	d902      	bls.n	80023e0 <NVIC_EncodePriority+0x30>
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3b03      	subs	r3, #3
 80023de:	e000      	b.n	80023e2 <NVIC_EncodePriority+0x32>
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e4:	f04f 32ff 	mov.w	r2, #4294967295
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43da      	mvns	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	401a      	ands	r2, r3
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023f8:	f04f 31ff 	mov.w	r1, #4294967295
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002402:	43d9      	mvns	r1, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002408:	4313      	orrs	r3, r2
         );
}
 800240a:	4618      	mov	r0, r3
 800240c:	3724      	adds	r7, #36	@ 0x24
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
	...

08002418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3b01      	subs	r3, #1
 8002424:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002428:	d301      	bcc.n	800242e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800242a:	2301      	movs	r3, #1
 800242c:	e00f      	b.n	800244e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800242e:	4a0a      	ldr	r2, [pc, #40]	@ (8002458 <SysTick_Config+0x40>)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3b01      	subs	r3, #1
 8002434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002436:	210f      	movs	r1, #15
 8002438:	f04f 30ff 	mov.w	r0, #4294967295
 800243c:	f7ff ff8e 	bl	800235c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002440:	4b05      	ldr	r3, [pc, #20]	@ (8002458 <SysTick_Config+0x40>)
 8002442:	2200      	movs	r2, #0
 8002444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002446:	4b04      	ldr	r3, [pc, #16]	@ (8002458 <SysTick_Config+0x40>)
 8002448:	2207      	movs	r2, #7
 800244a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	e000e010 	.word	0xe000e010

0800245c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7ff ff47 	bl	80022f8 <__NVIC_SetPriorityGrouping>
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b086      	sub	sp, #24
 8002476:	af00      	add	r7, sp, #0
 8002478:	4603      	mov	r3, r0
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	607a      	str	r2, [r7, #4]
 800247e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002484:	f7ff ff5c 	bl	8002340 <__NVIC_GetPriorityGrouping>
 8002488:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	68b9      	ldr	r1, [r7, #8]
 800248e:	6978      	ldr	r0, [r7, #20]
 8002490:	f7ff ff8e 	bl	80023b0 <NVIC_EncodePriority>
 8002494:	4602      	mov	r2, r0
 8002496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800249a:	4611      	mov	r1, r2
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff ff5d 	bl	800235c <__NVIC_SetPriority>
}
 80024a2:	bf00      	nop
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff ffb0 	bl	8002418 <SysTick_Config>
 80024b8:	4603      	mov	r3, r0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b087      	sub	sp, #28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024d2:	e14e      	b.n	8002772 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	2101      	movs	r1, #1
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	fa01 f303 	lsl.w	r3, r1, r3
 80024e0:	4013      	ands	r3, r2
 80024e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 8140 	beq.w	800276c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f003 0303 	and.w	r3, r3, #3
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d005      	beq.n	8002504 <HAL_GPIO_Init+0x40>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 0303 	and.w	r3, r3, #3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d130      	bne.n	8002566 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	2203      	movs	r2, #3
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	4013      	ands	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	68da      	ldr	r2, [r3, #12]
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	4313      	orrs	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800253a:	2201      	movs	r2, #1
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43db      	mvns	r3, r3
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	4013      	ands	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	091b      	lsrs	r3, r3, #4
 8002550:	f003 0201 	and.w	r2, r3, #1
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4313      	orrs	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	2b03      	cmp	r3, #3
 8002570:	d017      	beq.n	80025a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	2203      	movs	r2, #3
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	4013      	ands	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	4313      	orrs	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d123      	bne.n	80025f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	08da      	lsrs	r2, r3, #3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	3208      	adds	r2, #8
 80025b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	220f      	movs	r2, #15
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43db      	mvns	r3, r3
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	4013      	ands	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	691a      	ldr	r2, [r3, #16]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	08da      	lsrs	r2, r3, #3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3208      	adds	r2, #8
 80025f0:	6939      	ldr	r1, [r7, #16]
 80025f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	2203      	movs	r2, #3
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43db      	mvns	r3, r3
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	4013      	ands	r3, r2
 800260c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f003 0203 	and.w	r2, r3, #3
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	4313      	orrs	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 809a 	beq.w	800276c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002638:	4b55      	ldr	r3, [pc, #340]	@ (8002790 <HAL_GPIO_Init+0x2cc>)
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	4a54      	ldr	r2, [pc, #336]	@ (8002790 <HAL_GPIO_Init+0x2cc>)
 800263e:	f043 0301 	orr.w	r3, r3, #1
 8002642:	6193      	str	r3, [r2, #24]
 8002644:	4b52      	ldr	r3, [pc, #328]	@ (8002790 <HAL_GPIO_Init+0x2cc>)
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002650:	4a50      	ldr	r2, [pc, #320]	@ (8002794 <HAL_GPIO_Init+0x2d0>)
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	089b      	lsrs	r3, r3, #2
 8002656:	3302      	adds	r3, #2
 8002658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800265c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	220f      	movs	r2, #15
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	4013      	ands	r3, r2
 8002672:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800267a:	d013      	beq.n	80026a4 <HAL_GPIO_Init+0x1e0>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a46      	ldr	r2, [pc, #280]	@ (8002798 <HAL_GPIO_Init+0x2d4>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d00d      	beq.n	80026a0 <HAL_GPIO_Init+0x1dc>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a45      	ldr	r2, [pc, #276]	@ (800279c <HAL_GPIO_Init+0x2d8>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d007      	beq.n	800269c <HAL_GPIO_Init+0x1d8>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a44      	ldr	r2, [pc, #272]	@ (80027a0 <HAL_GPIO_Init+0x2dc>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d101      	bne.n	8002698 <HAL_GPIO_Init+0x1d4>
 8002694:	2303      	movs	r3, #3
 8002696:	e006      	b.n	80026a6 <HAL_GPIO_Init+0x1e2>
 8002698:	2305      	movs	r3, #5
 800269a:	e004      	b.n	80026a6 <HAL_GPIO_Init+0x1e2>
 800269c:	2302      	movs	r3, #2
 800269e:	e002      	b.n	80026a6 <HAL_GPIO_Init+0x1e2>
 80026a0:	2301      	movs	r3, #1
 80026a2:	e000      	b.n	80026a6 <HAL_GPIO_Init+0x1e2>
 80026a4:	2300      	movs	r3, #0
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	f002 0203 	and.w	r2, r2, #3
 80026ac:	0092      	lsls	r2, r2, #2
 80026ae:	4093      	lsls	r3, r2
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026b6:	4937      	ldr	r1, [pc, #220]	@ (8002794 <HAL_GPIO_Init+0x2d0>)
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	089b      	lsrs	r3, r3, #2
 80026bc:	3302      	adds	r3, #2
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026c4:	4b37      	ldr	r3, [pc, #220]	@ (80027a4 <HAL_GPIO_Init+0x2e0>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	43db      	mvns	r3, r3
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	4013      	ands	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d003      	beq.n	80026e8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80026e8:	4a2e      	ldr	r2, [pc, #184]	@ (80027a4 <HAL_GPIO_Init+0x2e0>)
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026ee:	4b2d      	ldr	r3, [pc, #180]	@ (80027a4 <HAL_GPIO_Init+0x2e0>)
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	43db      	mvns	r3, r3
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	4013      	ands	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	4313      	orrs	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002712:	4a24      	ldr	r2, [pc, #144]	@ (80027a4 <HAL_GPIO_Init+0x2e0>)
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002718:	4b22      	ldr	r3, [pc, #136]	@ (80027a4 <HAL_GPIO_Init+0x2e0>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	43db      	mvns	r3, r3
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	4013      	ands	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d003      	beq.n	800273c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	4313      	orrs	r3, r2
 800273a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800273c:	4a19      	ldr	r2, [pc, #100]	@ (80027a4 <HAL_GPIO_Init+0x2e0>)
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002742:	4b18      	ldr	r3, [pc, #96]	@ (80027a4 <HAL_GPIO_Init+0x2e0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	43db      	mvns	r3, r3
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	4013      	ands	r3, r2
 8002750:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4313      	orrs	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002766:	4a0f      	ldr	r2, [pc, #60]	@ (80027a4 <HAL_GPIO_Init+0x2e0>)
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	3301      	adds	r3, #1
 8002770:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	fa22 f303 	lsr.w	r3, r2, r3
 800277c:	2b00      	cmp	r3, #0
 800277e:	f47f aea9 	bne.w	80024d4 <HAL_GPIO_Init+0x10>
  }
}
 8002782:	bf00      	nop
 8002784:	bf00      	nop
 8002786:	371c      	adds	r7, #28
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	40021000 	.word	0x40021000
 8002794:	40010000 	.word	0x40010000
 8002798:	48000400 	.word	0x48000400
 800279c:	48000800 	.word	0x48000800
 80027a0:	48000c00 	.word	0x48000c00
 80027a4:	40010400 	.word	0x40010400

080027a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027b8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d102      	bne.n	80027ce <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	f000 bff4 	b.w	80037b6 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 816d 	beq.w	8002abe <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80027e4:	4bb4      	ldr	r3, [pc, #720]	@ (8002ab8 <HAL_RCC_OscConfig+0x310>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f003 030c 	and.w	r3, r3, #12
 80027ec:	2b04      	cmp	r3, #4
 80027ee:	d00c      	beq.n	800280a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027f0:	4bb1      	ldr	r3, [pc, #708]	@ (8002ab8 <HAL_RCC_OscConfig+0x310>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 030c 	and.w	r3, r3, #12
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	d157      	bne.n	80028ac <HAL_RCC_OscConfig+0x104>
 80027fc:	4bae      	ldr	r3, [pc, #696]	@ (8002ab8 <HAL_RCC_OscConfig+0x310>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002804:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002808:	d150      	bne.n	80028ac <HAL_RCC_OscConfig+0x104>
 800280a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800280e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002812:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002816:	fa93 f3a3 	rbit	r3, r3
 800281a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800281e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002822:	fab3 f383 	clz	r3, r3
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b3f      	cmp	r3, #63	@ 0x3f
 800282a:	d802      	bhi.n	8002832 <HAL_RCC_OscConfig+0x8a>
 800282c:	4ba2      	ldr	r3, [pc, #648]	@ (8002ab8 <HAL_RCC_OscConfig+0x310>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	e015      	b.n	800285e <HAL_RCC_OscConfig+0xb6>
 8002832:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002836:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800283e:	fa93 f3a3 	rbit	r3, r3
 8002842:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002846:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800284a:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800284e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002852:	fa93 f3a3 	rbit	r3, r3
 8002856:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800285a:	4b97      	ldr	r3, [pc, #604]	@ (8002ab8 <HAL_RCC_OscConfig+0x310>)
 800285c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002862:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002866:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800286a:	fa92 f2a2 	rbit	r2, r2
 800286e:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002872:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002876:	fab2 f282 	clz	r2, r2
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	f042 0220 	orr.w	r2, r2, #32
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	f002 021f 	and.w	r2, r2, #31
 8002886:	2101      	movs	r1, #1
 8002888:	fa01 f202 	lsl.w	r2, r1, r2
 800288c:	4013      	ands	r3, r2
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 8114 	beq.w	8002abc <HAL_RCC_OscConfig+0x314>
 8002894:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002898:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f040 810b 	bne.w	8002abc <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	f000 bf85 	b.w	80037b6 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028bc:	d106      	bne.n	80028cc <HAL_RCC_OscConfig+0x124>
 80028be:	4b7e      	ldr	r3, [pc, #504]	@ (8002ab8 <HAL_RCC_OscConfig+0x310>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a7d      	ldr	r2, [pc, #500]	@ (8002ab8 <HAL_RCC_OscConfig+0x310>)
 80028c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028c8:	6013      	str	r3, [r2, #0]
 80028ca:	e036      	b.n	800293a <HAL_RCC_OscConfig+0x192>
 80028cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10c      	bne.n	80028f6 <HAL_RCC_OscConfig+0x14e>
 80028dc:	4b76      	ldr	r3, [pc, #472]	@ (8002ab8 <HAL_RCC_OscConfig+0x310>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a75      	ldr	r2, [pc, #468]	@ (8002ab8 <HAL_RCC_OscConfig+0x310>)
 80028e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028e6:	6013      	str	r3, [r2, #0]
 80028e8:	4b73      	ldr	r3, [pc, #460]	@ (8002ab8 <HAL_RCC_OscConfig+0x310>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a72      	ldr	r2, [pc, #456]	@ (8002ab8 <HAL_RCC_OscConfig+0x310>)
 80028ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028f2:	6013      	str	r3, [r2, #0]
 80028f4:	e021      	b.n	800293a <HAL_RCC_OscConfig+0x192>
 80028f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002906:	d10c      	bne.n	8002922 <HAL_RCC_OscConfig+0x17a>
 8002908:	4b6b      	ldr	r3, [pc, #428]	@ (8002ab8 <HAL_RCC_OscConfig+0x310>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a6a      	ldr	r2, [pc, #424]	@ (8002ab8 <HAL_RCC_OscConfig+0x310>)
 800290e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002912:	6013      	str	r3, [r2, #0]
 8002914:	4b68      	ldr	r3, [pc, #416]	@ (8002ab8 <HAL_RCC_OscConfig+0x310>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a67      	ldr	r2, [pc, #412]	@ (8002ab8 <HAL_RCC_OscConfig+0x310>)
 800291a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800291e:	6013      	str	r3, [r2, #0]
 8002920:	e00b      	b.n	800293a <HAL_RCC_OscConfig+0x192>
 8002922:	4b65      	ldr	r3, [pc, #404]	@ (8002ab8 <HAL_RCC_OscConfig+0x310>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a64      	ldr	r2, [pc, #400]	@ (8002ab8 <HAL_RCC_OscConfig+0x310>)
 8002928:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	4b62      	ldr	r3, [pc, #392]	@ (8002ab8 <HAL_RCC_OscConfig+0x310>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a61      	ldr	r2, [pc, #388]	@ (8002ab8 <HAL_RCC_OscConfig+0x310>)
 8002934:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002938:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800293a:	4b5f      	ldr	r3, [pc, #380]	@ (8002ab8 <HAL_RCC_OscConfig+0x310>)
 800293c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293e:	f023 020f 	bic.w	r2, r3, #15
 8002942:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002946:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	495a      	ldr	r1, [pc, #360]	@ (8002ab8 <HAL_RCC_OscConfig+0x310>)
 8002950:	4313      	orrs	r3, r2
 8002952:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002954:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002958:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d054      	beq.n	8002a0e <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002964:	f7fe fc3a 	bl	80011dc <HAL_GetTick>
 8002968:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296c:	e00a      	b.n	8002984 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800296e:	f7fe fc35 	bl	80011dc <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b64      	cmp	r3, #100	@ 0x64
 800297c:	d902      	bls.n	8002984 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	f000 bf19 	b.w	80037b6 <HAL_RCC_OscConfig+0x100e>
 8002984:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002988:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002990:	fa93 f3a3 	rbit	r3, r3
 8002994:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002998:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299c:	fab3 f383 	clz	r3, r3
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b3f      	cmp	r3, #63	@ 0x3f
 80029a4:	d802      	bhi.n	80029ac <HAL_RCC_OscConfig+0x204>
 80029a6:	4b44      	ldr	r3, [pc, #272]	@ (8002ab8 <HAL_RCC_OscConfig+0x310>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	e015      	b.n	80029d8 <HAL_RCC_OscConfig+0x230>
 80029ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029b0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80029b8:	fa93 f3a3 	rbit	r3, r3
 80029bc:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80029c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029c4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80029c8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80029cc:	fa93 f3a3 	rbit	r3, r3
 80029d0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80029d4:	4b38      	ldr	r3, [pc, #224]	@ (8002ab8 <HAL_RCC_OscConfig+0x310>)
 80029d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80029dc:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80029e0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80029e4:	fa92 f2a2 	rbit	r2, r2
 80029e8:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80029ec:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80029f0:	fab2 f282 	clz	r2, r2
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	f042 0220 	orr.w	r2, r2, #32
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	f002 021f 	and.w	r2, r2, #31
 8002a00:	2101      	movs	r1, #1
 8002a02:	fa01 f202 	lsl.w	r2, r1, r2
 8002a06:	4013      	ands	r3, r2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0b0      	beq.n	800296e <HAL_RCC_OscConfig+0x1c6>
 8002a0c:	e057      	b.n	8002abe <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0e:	f7fe fbe5 	bl	80011dc <HAL_GetTick>
 8002a12:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a16:	e00a      	b.n	8002a2e <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a18:	f7fe fbe0 	bl	80011dc <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b64      	cmp	r3, #100	@ 0x64
 8002a26:	d902      	bls.n	8002a2e <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	f000 bec4 	b.w	80037b6 <HAL_RCC_OscConfig+0x100e>
 8002a2e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a32:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a36:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002a3a:	fa93 f3a3 	rbit	r3, r3
 8002a3e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002a42:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a46:	fab3 f383 	clz	r3, r3
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a4e:	d802      	bhi.n	8002a56 <HAL_RCC_OscConfig+0x2ae>
 8002a50:	4b19      	ldr	r3, [pc, #100]	@ (8002ab8 <HAL_RCC_OscConfig+0x310>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	e015      	b.n	8002a82 <HAL_RCC_OscConfig+0x2da>
 8002a56:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a5a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002a62:	fa93 f3a3 	rbit	r3, r3
 8002a66:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002a6a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a6e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002a72:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002a76:	fa93 f3a3 	rbit	r3, r3
 8002a7a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ab8 <HAL_RCC_OscConfig+0x310>)
 8002a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a82:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a86:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002a8a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002a8e:	fa92 f2a2 	rbit	r2, r2
 8002a92:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002a96:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002a9a:	fab2 f282 	clz	r2, r2
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	f042 0220 	orr.w	r2, r2, #32
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	f002 021f 	and.w	r2, r2, #31
 8002aaa:	2101      	movs	r1, #1
 8002aac:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1b0      	bne.n	8002a18 <HAL_RCC_OscConfig+0x270>
 8002ab6:	e002      	b.n	8002abe <HAL_RCC_OscConfig+0x316>
 8002ab8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002abc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002abe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 816c 	beq.w	8002dac <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002ad4:	4bcc      	ldr	r3, [pc, #816]	@ (8002e08 <HAL_RCC_OscConfig+0x660>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f003 030c 	and.w	r3, r3, #12
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00b      	beq.n	8002af8 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ae0:	4bc9      	ldr	r3, [pc, #804]	@ (8002e08 <HAL_RCC_OscConfig+0x660>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f003 030c 	and.w	r3, r3, #12
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d16d      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x420>
 8002aec:	4bc6      	ldr	r3, [pc, #792]	@ (8002e08 <HAL_RCC_OscConfig+0x660>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d167      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x420>
 8002af8:	2302      	movs	r3, #2
 8002afa:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afe:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002b02:	fa93 f3a3 	rbit	r3, r3
 8002b06:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002b0a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0e:	fab3 f383 	clz	r3, r3
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b16:	d802      	bhi.n	8002b1e <HAL_RCC_OscConfig+0x376>
 8002b18:	4bbb      	ldr	r3, [pc, #748]	@ (8002e08 <HAL_RCC_OscConfig+0x660>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	e013      	b.n	8002b46 <HAL_RCC_OscConfig+0x39e>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b24:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002b28:	fa93 f3a3 	rbit	r3, r3
 8002b2c:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002b30:	2302      	movs	r3, #2
 8002b32:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002b36:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002b3a:	fa93 f3a3 	rbit	r3, r3
 8002b3e:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002b42:	4bb1      	ldr	r3, [pc, #708]	@ (8002e08 <HAL_RCC_OscConfig+0x660>)
 8002b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b46:	2202      	movs	r2, #2
 8002b48:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002b4c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002b50:	fa92 f2a2 	rbit	r2, r2
 8002b54:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002b58:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002b5c:	fab2 f282 	clz	r2, r2
 8002b60:	b2d2      	uxtb	r2, r2
 8002b62:	f042 0220 	orr.w	r2, r2, #32
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	f002 021f 	and.w	r2, r2, #31
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b72:	4013      	ands	r3, r2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00a      	beq.n	8002b8e <HAL_RCC_OscConfig+0x3e6>
 8002b78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d002      	beq.n	8002b8e <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	f000 be14 	b.w	80037b6 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b8e:	4b9e      	ldr	r3, [pc, #632]	@ (8002e08 <HAL_RCC_OscConfig+0x660>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b9a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	21f8      	movs	r1, #248	@ 0xf8
 8002ba4:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba8:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002bac:	fa91 f1a1 	rbit	r1, r1
 8002bb0:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002bb4:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002bb8:	fab1 f181 	clz	r1, r1
 8002bbc:	b2c9      	uxtb	r1, r1
 8002bbe:	408b      	lsls	r3, r1
 8002bc0:	4991      	ldr	r1, [pc, #580]	@ (8002e08 <HAL_RCC_OscConfig+0x660>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bc6:	e0f1      	b.n	8002dac <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bcc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 8083 	beq.w	8002ce0 <HAL_RCC_OscConfig+0x538>
 8002bda:	2301      	movs	r3, #1
 8002bdc:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be0:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002be4:	fa93 f3a3 	rbit	r3, r3
 8002be8:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002bec:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bf0:	fab3 f383 	clz	r3, r3
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002bfa:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	461a      	mov	r2, r3
 8002c02:	2301      	movs	r3, #1
 8002c04:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c06:	f7fe fae9 	bl	80011dc <HAL_GetTick>
 8002c0a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c0e:	e00a      	b.n	8002c26 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c10:	f7fe fae4 	bl	80011dc <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d902      	bls.n	8002c26 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	f000 bdc8 	b.w	80037b6 <HAL_RCC_OscConfig+0x100e>
 8002c26:	2302      	movs	r3, #2
 8002c28:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002c30:	fa93 f3a3 	rbit	r3, r3
 8002c34:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002c38:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c3c:	fab3 f383 	clz	r3, r3
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b3f      	cmp	r3, #63	@ 0x3f
 8002c44:	d802      	bhi.n	8002c4c <HAL_RCC_OscConfig+0x4a4>
 8002c46:	4b70      	ldr	r3, [pc, #448]	@ (8002e08 <HAL_RCC_OscConfig+0x660>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	e013      	b.n	8002c74 <HAL_RCC_OscConfig+0x4cc>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c52:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002c56:	fa93 f3a3 	rbit	r3, r3
 8002c5a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002c5e:	2302      	movs	r3, #2
 8002c60:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002c64:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002c68:	fa93 f3a3 	rbit	r3, r3
 8002c6c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002c70:	4b65      	ldr	r3, [pc, #404]	@ (8002e08 <HAL_RCC_OscConfig+0x660>)
 8002c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c74:	2202      	movs	r2, #2
 8002c76:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002c7a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002c7e:	fa92 f2a2 	rbit	r2, r2
 8002c82:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002c86:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002c8a:	fab2 f282 	clz	r2, r2
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	f042 0220 	orr.w	r2, r2, #32
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	f002 021f 	and.w	r2, r2, #31
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0b4      	beq.n	8002c10 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca6:	4b58      	ldr	r3, [pc, #352]	@ (8002e08 <HAL_RCC_OscConfig+0x660>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cb2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	21f8      	movs	r1, #248	@ 0xf8
 8002cbc:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc0:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002cc4:	fa91 f1a1 	rbit	r1, r1
 8002cc8:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002ccc:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002cd0:	fab1 f181 	clz	r1, r1
 8002cd4:	b2c9      	uxtb	r1, r1
 8002cd6:	408b      	lsls	r3, r1
 8002cd8:	494b      	ldr	r1, [pc, #300]	@ (8002e08 <HAL_RCC_OscConfig+0x660>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	600b      	str	r3, [r1, #0]
 8002cde:	e065      	b.n	8002dac <HAL_RCC_OscConfig+0x604>
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002cea:	fa93 f3a3 	rbit	r3, r3
 8002cee:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002cf2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cf6:	fab3 f383 	clz	r3, r3
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d00:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	461a      	mov	r2, r3
 8002d08:	2300      	movs	r3, #0
 8002d0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0c:	f7fe fa66 	bl	80011dc <HAL_GetTick>
 8002d10:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d14:	e00a      	b.n	8002d2c <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d16:	f7fe fa61 	bl	80011dc <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d902      	bls.n	8002d2c <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	f000 bd45 	b.w	80037b6 <HAL_RCC_OscConfig+0x100e>
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d32:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002d36:	fa93 f3a3 	rbit	r3, r3
 8002d3a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002d3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d42:	fab3 f383 	clz	r3, r3
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b3f      	cmp	r3, #63	@ 0x3f
 8002d4a:	d802      	bhi.n	8002d52 <HAL_RCC_OscConfig+0x5aa>
 8002d4c:	4b2e      	ldr	r3, [pc, #184]	@ (8002e08 <HAL_RCC_OscConfig+0x660>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	e013      	b.n	8002d7a <HAL_RCC_OscConfig+0x5d2>
 8002d52:	2302      	movs	r3, #2
 8002d54:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d58:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002d5c:	fa93 f3a3 	rbit	r3, r3
 8002d60:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002d64:	2302      	movs	r3, #2
 8002d66:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002d6a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002d6e:	fa93 f3a3 	rbit	r3, r3
 8002d72:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002d76:	4b24      	ldr	r3, [pc, #144]	@ (8002e08 <HAL_RCC_OscConfig+0x660>)
 8002d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002d80:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002d84:	fa92 f2a2 	rbit	r2, r2
 8002d88:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002d8c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002d90:	fab2 f282 	clz	r2, r2
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	f042 0220 	orr.w	r2, r2, #32
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	f002 021f 	and.w	r2, r2, #31
 8002da0:	2101      	movs	r1, #1
 8002da2:	fa01 f202 	lsl.w	r2, r1, r2
 8002da6:	4013      	ands	r3, r2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1b4      	bne.n	8002d16 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002db0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0308 	and.w	r3, r3, #8
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 8115 	beq.w	8002fec <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d07e      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x728>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002ddc:	fa93 f3a3 	rbit	r3, r3
 8002de0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002de4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002de8:	fab3 f383 	clz	r3, r3
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	461a      	mov	r2, r3
 8002df0:	4b06      	ldr	r3, [pc, #24]	@ (8002e0c <HAL_RCC_OscConfig+0x664>)
 8002df2:	4413      	add	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	461a      	mov	r2, r3
 8002df8:	2301      	movs	r3, #1
 8002dfa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dfc:	f7fe f9ee 	bl	80011dc <HAL_GetTick>
 8002e00:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e04:	e00f      	b.n	8002e26 <HAL_RCC_OscConfig+0x67e>
 8002e06:	bf00      	nop
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e10:	f7fe f9e4 	bl	80011dc <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d902      	bls.n	8002e26 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	f000 bcc8 	b.w	80037b6 <HAL_RCC_OscConfig+0x100e>
 8002e26:	2302      	movs	r3, #2
 8002e28:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002e30:	fa93 f3a3 	rbit	r3, r3
 8002e34:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002e38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e3c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002e40:	2202      	movs	r2, #2
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e48:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	fa93 f2a3 	rbit	r2, r3
 8002e52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002e64:	2202      	movs	r2, #2
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	fa93 f2a3 	rbit	r2, r3
 8002e76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e7a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002e7e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e80:	4bb0      	ldr	r3, [pc, #704]	@ (8003144 <HAL_RCC_OscConfig+0x99c>)
 8002e82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e88:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002e8c:	2102      	movs	r1, #2
 8002e8e:	6019      	str	r1, [r3, #0]
 8002e90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e94:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	fa93 f1a3 	rbit	r1, r3
 8002e9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ea2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002ea6:	6019      	str	r1, [r3, #0]
  return result;
 8002ea8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eac:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	fab3 f383 	clz	r3, r3
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	f003 031f 	and.w	r3, r3, #31
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec8:	4013      	ands	r3, r2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0a0      	beq.n	8002e10 <HAL_RCC_OscConfig+0x668>
 8002ece:	e08d      	b.n	8002fec <HAL_RCC_OscConfig+0x844>
 8002ed0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ed4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002ed8:	2201      	movs	r2, #1
 8002eda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002edc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	fa93 f2a3 	rbit	r2, r3
 8002eea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eee:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002ef2:	601a      	str	r2, [r3, #0]
  return result;
 8002ef4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002efc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002efe:	fab3 f383 	clz	r3, r3
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	461a      	mov	r2, r3
 8002f06:	4b90      	ldr	r3, [pc, #576]	@ (8003148 <HAL_RCC_OscConfig+0x9a0>)
 8002f08:	4413      	add	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	2300      	movs	r3, #0
 8002f10:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f12:	f7fe f963 	bl	80011dc <HAL_GetTick>
 8002f16:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f1a:	e00a      	b.n	8002f32 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f1c:	f7fe f95e 	bl	80011dc <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d902      	bls.n	8002f32 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	f000 bc42 	b.w	80037b6 <HAL_RCC_OscConfig+0x100e>
 8002f32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f36:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f42:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	fa93 f2a3 	rbit	r2, r3
 8002f4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f50:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f5a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002f5e:	2202      	movs	r2, #2
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f66:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	fa93 f2a3 	rbit	r2, r3
 8002f70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f74:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f7e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002f82:	2202      	movs	r2, #2
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f8a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	fa93 f2a3 	rbit	r2, r3
 8002f94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f98:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002f9c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f9e:	4b69      	ldr	r3, [pc, #420]	@ (8003144 <HAL_RCC_OscConfig+0x99c>)
 8002fa0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fa6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002faa:	2102      	movs	r1, #2
 8002fac:	6019      	str	r1, [r3, #0]
 8002fae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fb2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	fa93 f1a3 	rbit	r1, r3
 8002fbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fc0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002fc4:	6019      	str	r1, [r3, #0]
  return result;
 8002fc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fca:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	fab3 f383 	clz	r3, r3
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	f003 031f 	and.w	r3, r3, #31
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d197      	bne.n	8002f1c <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 819e 	beq.w	800333e <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003002:	2300      	movs	r3, #0
 8003004:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003008:	4b4e      	ldr	r3, [pc, #312]	@ (8003144 <HAL_RCC_OscConfig+0x99c>)
 800300a:	69db      	ldr	r3, [r3, #28]
 800300c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d116      	bne.n	8003042 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003014:	4b4b      	ldr	r3, [pc, #300]	@ (8003144 <HAL_RCC_OscConfig+0x99c>)
 8003016:	69db      	ldr	r3, [r3, #28]
 8003018:	4a4a      	ldr	r2, [pc, #296]	@ (8003144 <HAL_RCC_OscConfig+0x99c>)
 800301a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800301e:	61d3      	str	r3, [r2, #28]
 8003020:	4b48      	ldr	r3, [pc, #288]	@ (8003144 <HAL_RCC_OscConfig+0x99c>)
 8003022:	69db      	ldr	r3, [r3, #28]
 8003024:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003028:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800302c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003036:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800303a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800303c:	2301      	movs	r3, #1
 800303e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003042:	4b42      	ldr	r3, [pc, #264]	@ (800314c <HAL_RCC_OscConfig+0x9a4>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800304a:	2b00      	cmp	r3, #0
 800304c:	d11a      	bne.n	8003084 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800304e:	4b3f      	ldr	r3, [pc, #252]	@ (800314c <HAL_RCC_OscConfig+0x9a4>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a3e      	ldr	r2, [pc, #248]	@ (800314c <HAL_RCC_OscConfig+0x9a4>)
 8003054:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003058:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800305a:	f7fe f8bf 	bl	80011dc <HAL_GetTick>
 800305e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003062:	e009      	b.n	8003078 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003064:	f7fe f8ba 	bl	80011dc <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b64      	cmp	r3, #100	@ 0x64
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e39e      	b.n	80037b6 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003078:	4b34      	ldr	r3, [pc, #208]	@ (800314c <HAL_RCC_OscConfig+0x9a4>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003080:	2b00      	cmp	r3, #0
 8003082:	d0ef      	beq.n	8003064 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003084:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003088:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d106      	bne.n	80030a2 <HAL_RCC_OscConfig+0x8fa>
 8003094:	4b2b      	ldr	r3, [pc, #172]	@ (8003144 <HAL_RCC_OscConfig+0x99c>)
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	4a2a      	ldr	r2, [pc, #168]	@ (8003144 <HAL_RCC_OscConfig+0x99c>)
 800309a:	f043 0301 	orr.w	r3, r3, #1
 800309e:	6213      	str	r3, [r2, #32]
 80030a0:	e035      	b.n	800310e <HAL_RCC_OscConfig+0x966>
 80030a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10c      	bne.n	80030cc <HAL_RCC_OscConfig+0x924>
 80030b2:	4b24      	ldr	r3, [pc, #144]	@ (8003144 <HAL_RCC_OscConfig+0x99c>)
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	4a23      	ldr	r2, [pc, #140]	@ (8003144 <HAL_RCC_OscConfig+0x99c>)
 80030b8:	f023 0301 	bic.w	r3, r3, #1
 80030bc:	6213      	str	r3, [r2, #32]
 80030be:	4b21      	ldr	r3, [pc, #132]	@ (8003144 <HAL_RCC_OscConfig+0x99c>)
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	4a20      	ldr	r2, [pc, #128]	@ (8003144 <HAL_RCC_OscConfig+0x99c>)
 80030c4:	f023 0304 	bic.w	r3, r3, #4
 80030c8:	6213      	str	r3, [r2, #32]
 80030ca:	e020      	b.n	800310e <HAL_RCC_OscConfig+0x966>
 80030cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	2b05      	cmp	r3, #5
 80030da:	d10c      	bne.n	80030f6 <HAL_RCC_OscConfig+0x94e>
 80030dc:	4b19      	ldr	r3, [pc, #100]	@ (8003144 <HAL_RCC_OscConfig+0x99c>)
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	4a18      	ldr	r2, [pc, #96]	@ (8003144 <HAL_RCC_OscConfig+0x99c>)
 80030e2:	f043 0304 	orr.w	r3, r3, #4
 80030e6:	6213      	str	r3, [r2, #32]
 80030e8:	4b16      	ldr	r3, [pc, #88]	@ (8003144 <HAL_RCC_OscConfig+0x99c>)
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	4a15      	ldr	r2, [pc, #84]	@ (8003144 <HAL_RCC_OscConfig+0x99c>)
 80030ee:	f043 0301 	orr.w	r3, r3, #1
 80030f2:	6213      	str	r3, [r2, #32]
 80030f4:	e00b      	b.n	800310e <HAL_RCC_OscConfig+0x966>
 80030f6:	4b13      	ldr	r3, [pc, #76]	@ (8003144 <HAL_RCC_OscConfig+0x99c>)
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	4a12      	ldr	r2, [pc, #72]	@ (8003144 <HAL_RCC_OscConfig+0x99c>)
 80030fc:	f023 0301 	bic.w	r3, r3, #1
 8003100:	6213      	str	r3, [r2, #32]
 8003102:	4b10      	ldr	r3, [pc, #64]	@ (8003144 <HAL_RCC_OscConfig+0x99c>)
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	4a0f      	ldr	r2, [pc, #60]	@ (8003144 <HAL_RCC_OscConfig+0x99c>)
 8003108:	f023 0304 	bic.w	r3, r3, #4
 800310c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800310e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003112:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 8087 	beq.w	800322e <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003120:	f7fe f85c 	bl	80011dc <HAL_GetTick>
 8003124:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003128:	e012      	b.n	8003150 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800312a:	f7fe f857 	bl	80011dc <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	f241 3288 	movw	r2, #5000	@ 0x1388
 800313a:	4293      	cmp	r3, r2
 800313c:	d908      	bls.n	8003150 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e339      	b.n	80037b6 <HAL_RCC_OscConfig+0x100e>
 8003142:	bf00      	nop
 8003144:	40021000 	.word	0x40021000
 8003148:	10908120 	.word	0x10908120
 800314c:	40007000 	.word	0x40007000
 8003150:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003154:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003158:	2202      	movs	r2, #2
 800315a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003160:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	fa93 f2a3 	rbit	r2, r3
 800316a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800316e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003178:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800317c:	2202      	movs	r2, #2
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003184:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	fa93 f2a3 	rbit	r2, r3
 800318e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003192:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003196:	601a      	str	r2, [r3, #0]
  return result;
 8003198:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800319c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80031a0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a2:	fab3 f383 	clz	r3, r3
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d102      	bne.n	80031b8 <HAL_RCC_OscConfig+0xa10>
 80031b2:	4b98      	ldr	r3, [pc, #608]	@ (8003414 <HAL_RCC_OscConfig+0xc6c>)
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	e013      	b.n	80031e0 <HAL_RCC_OscConfig+0xa38>
 80031b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031bc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80031c0:	2202      	movs	r2, #2
 80031c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031c8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	fa93 f2a3 	rbit	r2, r3
 80031d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031d6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	4b8d      	ldr	r3, [pc, #564]	@ (8003414 <HAL_RCC_OscConfig+0xc6c>)
 80031de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031e4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80031e8:	2102      	movs	r1, #2
 80031ea:	6011      	str	r1, [r2, #0]
 80031ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031f0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80031f4:	6812      	ldr	r2, [r2, #0]
 80031f6:	fa92 f1a2 	rbit	r1, r2
 80031fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031fe:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003202:	6011      	str	r1, [r2, #0]
  return result;
 8003204:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003208:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800320c:	6812      	ldr	r2, [r2, #0]
 800320e:	fab2 f282 	clz	r2, r2
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003218:	b2d2      	uxtb	r2, r2
 800321a:	f002 021f 	and.w	r2, r2, #31
 800321e:	2101      	movs	r1, #1
 8003220:	fa01 f202 	lsl.w	r2, r1, r2
 8003224:	4013      	ands	r3, r2
 8003226:	2b00      	cmp	r3, #0
 8003228:	f43f af7f 	beq.w	800312a <HAL_RCC_OscConfig+0x982>
 800322c:	e07d      	b.n	800332a <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800322e:	f7fd ffd5 	bl	80011dc <HAL_GetTick>
 8003232:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003236:	e00b      	b.n	8003250 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003238:	f7fd ffd0 	bl	80011dc <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003248:	4293      	cmp	r3, r2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e2b2      	b.n	80037b6 <HAL_RCC_OscConfig+0x100e>
 8003250:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003254:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003258:	2202      	movs	r2, #2
 800325a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003260:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	fa93 f2a3 	rbit	r2, r3
 800326a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800326e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003278:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800327c:	2202      	movs	r2, #2
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003284:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	fa93 f2a3 	rbit	r2, r3
 800328e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003292:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003296:	601a      	str	r2, [r3, #0]
  return result;
 8003298:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800329c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80032a0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032a2:	fab3 f383 	clz	r3, r3
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d102      	bne.n	80032b8 <HAL_RCC_OscConfig+0xb10>
 80032b2:	4b58      	ldr	r3, [pc, #352]	@ (8003414 <HAL_RCC_OscConfig+0xc6c>)
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	e013      	b.n	80032e0 <HAL_RCC_OscConfig+0xb38>
 80032b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032bc:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80032c0:	2202      	movs	r2, #2
 80032c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032c8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	fa93 f2a3 	rbit	r2, r3
 80032d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032d6:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	4b4d      	ldr	r3, [pc, #308]	@ (8003414 <HAL_RCC_OscConfig+0xc6c>)
 80032de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032e4:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80032e8:	2102      	movs	r1, #2
 80032ea:	6011      	str	r1, [r2, #0]
 80032ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032f0:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80032f4:	6812      	ldr	r2, [r2, #0]
 80032f6:	fa92 f1a2 	rbit	r1, r2
 80032fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032fe:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003302:	6011      	str	r1, [r2, #0]
  return result;
 8003304:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003308:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800330c:	6812      	ldr	r2, [r2, #0]
 800330e:	fab2 f282 	clz	r2, r2
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003318:	b2d2      	uxtb	r2, r2
 800331a:	f002 021f 	and.w	r2, r2, #31
 800331e:	2101      	movs	r1, #1
 8003320:	fa01 f202 	lsl.w	r2, r1, r2
 8003324:	4013      	ands	r3, r2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d186      	bne.n	8003238 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800332a:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800332e:	2b01      	cmp	r3, #1
 8003330:	d105      	bne.n	800333e <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003332:	4b38      	ldr	r3, [pc, #224]	@ (8003414 <HAL_RCC_OscConfig+0xc6c>)
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	4a37      	ldr	r2, [pc, #220]	@ (8003414 <HAL_RCC_OscConfig+0xc6c>)
 8003338:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800333c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800333e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003342:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 8232 	beq.w	80037b4 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003350:	4b30      	ldr	r3, [pc, #192]	@ (8003414 <HAL_RCC_OscConfig+0xc6c>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f003 030c 	and.w	r3, r3, #12
 8003358:	2b08      	cmp	r3, #8
 800335a:	f000 8201 	beq.w	8003760 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800335e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003362:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	2b02      	cmp	r3, #2
 800336c:	f040 8157 	bne.w	800361e <HAL_RCC_OscConfig+0xe76>
 8003370:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003374:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003378:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800337c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003382:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	fa93 f2a3 	rbit	r2, r3
 800338c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003390:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003394:	601a      	str	r2, [r3, #0]
  return result;
 8003396:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800339a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800339e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033a0:	fab3 f383 	clz	r3, r3
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80033aa:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	461a      	mov	r2, r3
 80033b2:	2300      	movs	r3, #0
 80033b4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b6:	f7fd ff11 	bl	80011dc <HAL_GetTick>
 80033ba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033be:	e009      	b.n	80033d4 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c0:	f7fd ff0c 	bl	80011dc <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e1f0      	b.n	80037b6 <HAL_RCC_OscConfig+0x100e>
 80033d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033d8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80033dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033e6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	fa93 f2a3 	rbit	r2, r3
 80033f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033f4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80033f8:	601a      	str	r2, [r3, #0]
  return result;
 80033fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033fe:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003402:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003404:	fab3 f383 	clz	r3, r3
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b3f      	cmp	r3, #63	@ 0x3f
 800340c:	d804      	bhi.n	8003418 <HAL_RCC_OscConfig+0xc70>
 800340e:	4b01      	ldr	r3, [pc, #4]	@ (8003414 <HAL_RCC_OscConfig+0xc6c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	e029      	b.n	8003468 <HAL_RCC_OscConfig+0xcc0>
 8003414:	40021000 	.word	0x40021000
 8003418:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800341c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003420:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003424:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003426:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800342a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	fa93 f2a3 	rbit	r2, r3
 8003434:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003438:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003442:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003446:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003450:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	fa93 f2a3 	rbit	r2, r3
 800345a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800345e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	4bc3      	ldr	r3, [pc, #780]	@ (8003774 <HAL_RCC_OscConfig+0xfcc>)
 8003466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003468:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800346c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003470:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003474:	6011      	str	r1, [r2, #0]
 8003476:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800347a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800347e:	6812      	ldr	r2, [r2, #0]
 8003480:	fa92 f1a2 	rbit	r1, r2
 8003484:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003488:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800348c:	6011      	str	r1, [r2, #0]
  return result;
 800348e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003492:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003496:	6812      	ldr	r2, [r2, #0]
 8003498:	fab2 f282 	clz	r2, r2
 800349c:	b2d2      	uxtb	r2, r2
 800349e:	f042 0220 	orr.w	r2, r2, #32
 80034a2:	b2d2      	uxtb	r2, r2
 80034a4:	f002 021f 	and.w	r2, r2, #31
 80034a8:	2101      	movs	r1, #1
 80034aa:	fa01 f202 	lsl.w	r2, r1, r2
 80034ae:	4013      	ands	r3, r2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d185      	bne.n	80033c0 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034b4:	4baf      	ldr	r3, [pc, #700]	@ (8003774 <HAL_RCC_OscConfig+0xfcc>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80034bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80034c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	430b      	orrs	r3, r1
 80034d6:	49a7      	ldr	r1, [pc, #668]	@ (8003774 <HAL_RCC_OscConfig+0xfcc>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	604b      	str	r3, [r1, #4]
 80034dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034e0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80034e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80034e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ee:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	fa93 f2a3 	rbit	r2, r3
 80034f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034fc:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003500:	601a      	str	r2, [r3, #0]
  return result;
 8003502:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003506:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800350a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800350c:	fab3 f383 	clz	r3, r3
 8003510:	b2db      	uxtb	r3, r3
 8003512:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003516:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	461a      	mov	r2, r3
 800351e:	2301      	movs	r3, #1
 8003520:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003522:	f7fd fe5b 	bl	80011dc <HAL_GetTick>
 8003526:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800352a:	e009      	b.n	8003540 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800352c:	f7fd fe56 	bl	80011dc <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d901      	bls.n	8003540 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e13a      	b.n	80037b6 <HAL_RCC_OscConfig+0x100e>
 8003540:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003544:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003548:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800354c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003552:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	fa93 f2a3 	rbit	r2, r3
 800355c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003560:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003564:	601a      	str	r2, [r3, #0]
  return result;
 8003566:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800356a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800356e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003570:	fab3 f383 	clz	r3, r3
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b3f      	cmp	r3, #63	@ 0x3f
 8003578:	d802      	bhi.n	8003580 <HAL_RCC_OscConfig+0xdd8>
 800357a:	4b7e      	ldr	r3, [pc, #504]	@ (8003774 <HAL_RCC_OscConfig+0xfcc>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	e027      	b.n	80035d0 <HAL_RCC_OscConfig+0xe28>
 8003580:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003584:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003588:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800358c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003592:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	fa93 f2a3 	rbit	r2, r3
 800359c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035a0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035aa:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80035ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035b8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	fa93 f2a3 	rbit	r2, r3
 80035c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035c6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	4b69      	ldr	r3, [pc, #420]	@ (8003774 <HAL_RCC_OscConfig+0xfcc>)
 80035ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035d4:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80035d8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80035dc:	6011      	str	r1, [r2, #0]
 80035de:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035e2:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80035e6:	6812      	ldr	r2, [r2, #0]
 80035e8:	fa92 f1a2 	rbit	r1, r2
 80035ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035f0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80035f4:	6011      	str	r1, [r2, #0]
  return result;
 80035f6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035fa:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80035fe:	6812      	ldr	r2, [r2, #0]
 8003600:	fab2 f282 	clz	r2, r2
 8003604:	b2d2      	uxtb	r2, r2
 8003606:	f042 0220 	orr.w	r2, r2, #32
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	f002 021f 	and.w	r2, r2, #31
 8003610:	2101      	movs	r1, #1
 8003612:	fa01 f202 	lsl.w	r2, r1, r2
 8003616:	4013      	ands	r3, r2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d087      	beq.n	800352c <HAL_RCC_OscConfig+0xd84>
 800361c:	e0ca      	b.n	80037b4 <HAL_RCC_OscConfig+0x100c>
 800361e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003622:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003626:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800362a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003630:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	fa93 f2a3 	rbit	r2, r3
 800363a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800363e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003642:	601a      	str	r2, [r3, #0]
  return result;
 8003644:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003648:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800364c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800364e:	fab3 f383 	clz	r3, r3
 8003652:	b2db      	uxtb	r3, r3
 8003654:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003658:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	461a      	mov	r2, r3
 8003660:	2300      	movs	r3, #0
 8003662:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003664:	f7fd fdba 	bl	80011dc <HAL_GetTick>
 8003668:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800366c:	e009      	b.n	8003682 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800366e:	f7fd fdb5 	bl	80011dc <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e099      	b.n	80037b6 <HAL_RCC_OscConfig+0x100e>
 8003682:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003686:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800368a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800368e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003690:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003694:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	fa93 f2a3 	rbit	r2, r3
 800369e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036a2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80036a6:	601a      	str	r2, [r3, #0]
  return result;
 80036a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036ac:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80036b0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036b2:	fab3 f383 	clz	r3, r3
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b3f      	cmp	r3, #63	@ 0x3f
 80036ba:	d802      	bhi.n	80036c2 <HAL_RCC_OscConfig+0xf1a>
 80036bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003774 <HAL_RCC_OscConfig+0xfcc>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	e027      	b.n	8003712 <HAL_RCC_OscConfig+0xf6a>
 80036c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036c6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80036ca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036d4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	fa93 f2a3 	rbit	r2, r3
 80036de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036e2:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036ec:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80036f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036fa:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	fa93 f2a3 	rbit	r2, r3
 8003704:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003708:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	4b19      	ldr	r3, [pc, #100]	@ (8003774 <HAL_RCC_OscConfig+0xfcc>)
 8003710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003712:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003716:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800371a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800371e:	6011      	str	r1, [r2, #0]
 8003720:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003724:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003728:	6812      	ldr	r2, [r2, #0]
 800372a:	fa92 f1a2 	rbit	r1, r2
 800372e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003732:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003736:	6011      	str	r1, [r2, #0]
  return result;
 8003738:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800373c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003740:	6812      	ldr	r2, [r2, #0]
 8003742:	fab2 f282 	clz	r2, r2
 8003746:	b2d2      	uxtb	r2, r2
 8003748:	f042 0220 	orr.w	r2, r2, #32
 800374c:	b2d2      	uxtb	r2, r2
 800374e:	f002 021f 	and.w	r2, r2, #31
 8003752:	2101      	movs	r1, #1
 8003754:	fa01 f202 	lsl.w	r2, r1, r2
 8003758:	4013      	ands	r3, r2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d187      	bne.n	800366e <HAL_RCC_OscConfig+0xec6>
 800375e:	e029      	b.n	80037b4 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003760:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003764:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d103      	bne.n	8003778 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e020      	b.n	80037b6 <HAL_RCC_OscConfig+0x100e>
 8003774:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003778:	4b11      	ldr	r3, [pc, #68]	@ (80037c0 <HAL_RCC_OscConfig+0x1018>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003780:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003784:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003788:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800378c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	429a      	cmp	r2, r3
 8003796:	d10b      	bne.n	80037b0 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003798:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800379c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80037a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d001      	beq.n	80037b4 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e000      	b.n	80037b6 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	40021000 	.word	0x40021000

080037c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b09e      	sub	sp, #120	@ 0x78
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e154      	b.n	8003a86 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037dc:	4b89      	ldr	r3, [pc, #548]	@ (8003a04 <HAL_RCC_ClockConfig+0x240>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d910      	bls.n	800380c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ea:	4b86      	ldr	r3, [pc, #536]	@ (8003a04 <HAL_RCC_ClockConfig+0x240>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f023 0207 	bic.w	r2, r3, #7
 80037f2:	4984      	ldr	r1, [pc, #528]	@ (8003a04 <HAL_RCC_ClockConfig+0x240>)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037fa:	4b82      	ldr	r3, [pc, #520]	@ (8003a04 <HAL_RCC_ClockConfig+0x240>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	429a      	cmp	r2, r3
 8003806:	d001      	beq.n	800380c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e13c      	b.n	8003a86 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d008      	beq.n	800382a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003818:	4b7b      	ldr	r3, [pc, #492]	@ (8003a08 <HAL_RCC_ClockConfig+0x244>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	4978      	ldr	r1, [pc, #480]	@ (8003a08 <HAL_RCC_ClockConfig+0x244>)
 8003826:	4313      	orrs	r3, r2
 8003828:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 80cd 	beq.w	80039d2 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d137      	bne.n	80038b0 <HAL_RCC_ClockConfig+0xec>
 8003840:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003844:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003846:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003848:	fa93 f3a3 	rbit	r3, r3
 800384c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800384e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003850:	fab3 f383 	clz	r3, r3
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b3f      	cmp	r3, #63	@ 0x3f
 8003858:	d802      	bhi.n	8003860 <HAL_RCC_ClockConfig+0x9c>
 800385a:	4b6b      	ldr	r3, [pc, #428]	@ (8003a08 <HAL_RCC_ClockConfig+0x244>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	e00f      	b.n	8003880 <HAL_RCC_ClockConfig+0xbc>
 8003860:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003864:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003866:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003868:	fa93 f3a3 	rbit	r3, r3
 800386c:	667b      	str	r3, [r7, #100]	@ 0x64
 800386e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003872:	663b      	str	r3, [r7, #96]	@ 0x60
 8003874:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003876:	fa93 f3a3 	rbit	r3, r3
 800387a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800387c:	4b62      	ldr	r3, [pc, #392]	@ (8003a08 <HAL_RCC_ClockConfig+0x244>)
 800387e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003880:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003884:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003886:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003888:	fa92 f2a2 	rbit	r2, r2
 800388c:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800388e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003890:	fab2 f282 	clz	r2, r2
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	f042 0220 	orr.w	r2, r2, #32
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	f002 021f 	and.w	r2, r2, #31
 80038a0:	2101      	movs	r1, #1
 80038a2:	fa01 f202 	lsl.w	r2, r1, r2
 80038a6:	4013      	ands	r3, r2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d171      	bne.n	8003990 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e0ea      	b.n	8003a86 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d137      	bne.n	8003928 <HAL_RCC_ClockConfig+0x164>
 80038b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038bc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038c0:	fa93 f3a3 	rbit	r3, r3
 80038c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80038c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038c8:	fab3 f383 	clz	r3, r3
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80038d0:	d802      	bhi.n	80038d8 <HAL_RCC_ClockConfig+0x114>
 80038d2:	4b4d      	ldr	r3, [pc, #308]	@ (8003a08 <HAL_RCC_ClockConfig+0x244>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	e00f      	b.n	80038f8 <HAL_RCC_ClockConfig+0x134>
 80038d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038e0:	fa93 f3a3 	rbit	r3, r3
 80038e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80038e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80038ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038ee:	fa93 f3a3 	rbit	r3, r3
 80038f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038f4:	4b44      	ldr	r3, [pc, #272]	@ (8003a08 <HAL_RCC_ClockConfig+0x244>)
 80038f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80038fc:	63ba      	str	r2, [r7, #56]	@ 0x38
 80038fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003900:	fa92 f2a2 	rbit	r2, r2
 8003904:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003906:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003908:	fab2 f282 	clz	r2, r2
 800390c:	b2d2      	uxtb	r2, r2
 800390e:	f042 0220 	orr.w	r2, r2, #32
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	f002 021f 	and.w	r2, r2, #31
 8003918:	2101      	movs	r1, #1
 800391a:	fa01 f202 	lsl.w	r2, r1, r2
 800391e:	4013      	ands	r3, r2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d135      	bne.n	8003990 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e0ae      	b.n	8003a86 <HAL_RCC_ClockConfig+0x2c2>
 8003928:	2302      	movs	r3, #2
 800392a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392e:	fa93 f3a3 	rbit	r3, r3
 8003932:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003936:	fab3 f383 	clz	r3, r3
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b3f      	cmp	r3, #63	@ 0x3f
 800393e:	d802      	bhi.n	8003946 <HAL_RCC_ClockConfig+0x182>
 8003940:	4b31      	ldr	r3, [pc, #196]	@ (8003a08 <HAL_RCC_ClockConfig+0x244>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	e00d      	b.n	8003962 <HAL_RCC_ClockConfig+0x19e>
 8003946:	2302      	movs	r3, #2
 8003948:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800394c:	fa93 f3a3 	rbit	r3, r3
 8003950:	627b      	str	r3, [r7, #36]	@ 0x24
 8003952:	2302      	movs	r3, #2
 8003954:	623b      	str	r3, [r7, #32]
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	fa93 f3a3 	rbit	r3, r3
 800395c:	61fb      	str	r3, [r7, #28]
 800395e:	4b2a      	ldr	r3, [pc, #168]	@ (8003a08 <HAL_RCC_ClockConfig+0x244>)
 8003960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003962:	2202      	movs	r2, #2
 8003964:	61ba      	str	r2, [r7, #24]
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	fa92 f2a2 	rbit	r2, r2
 800396c:	617a      	str	r2, [r7, #20]
  return result;
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	fab2 f282 	clz	r2, r2
 8003974:	b2d2      	uxtb	r2, r2
 8003976:	f042 0220 	orr.w	r2, r2, #32
 800397a:	b2d2      	uxtb	r2, r2
 800397c:	f002 021f 	and.w	r2, r2, #31
 8003980:	2101      	movs	r1, #1
 8003982:	fa01 f202 	lsl.w	r2, r1, r2
 8003986:	4013      	ands	r3, r2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d101      	bne.n	8003990 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e07a      	b.n	8003a86 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003990:	4b1d      	ldr	r3, [pc, #116]	@ (8003a08 <HAL_RCC_ClockConfig+0x244>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f023 0203 	bic.w	r2, r3, #3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	491a      	ldr	r1, [pc, #104]	@ (8003a08 <HAL_RCC_ClockConfig+0x244>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039a2:	f7fd fc1b 	bl	80011dc <HAL_GetTick>
 80039a6:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039a8:	e00a      	b.n	80039c0 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039aa:	f7fd fc17 	bl	80011dc <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e062      	b.n	8003a86 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c0:	4b11      	ldr	r3, [pc, #68]	@ (8003a08 <HAL_RCC_ClockConfig+0x244>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f003 020c 	and.w	r2, r3, #12
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d1eb      	bne.n	80039aa <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003a04 <HAL_RCC_ClockConfig+0x240>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0307 	and.w	r3, r3, #7
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d215      	bcs.n	8003a0c <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039e0:	4b08      	ldr	r3, [pc, #32]	@ (8003a04 <HAL_RCC_ClockConfig+0x240>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f023 0207 	bic.w	r2, r3, #7
 80039e8:	4906      	ldr	r1, [pc, #24]	@ (8003a04 <HAL_RCC_ClockConfig+0x240>)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f0:	4b04      	ldr	r3, [pc, #16]	@ (8003a04 <HAL_RCC_ClockConfig+0x240>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d006      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e041      	b.n	8003a86 <HAL_RCC_ClockConfig+0x2c2>
 8003a02:	bf00      	nop
 8003a04:	40022000 	.word	0x40022000
 8003a08:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d008      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a18:	4b1d      	ldr	r3, [pc, #116]	@ (8003a90 <HAL_RCC_ClockConfig+0x2cc>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	491a      	ldr	r1, [pc, #104]	@ (8003a90 <HAL_RCC_ClockConfig+0x2cc>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0308 	and.w	r3, r3, #8
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d009      	beq.n	8003a4a <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a36:	4b16      	ldr	r3, [pc, #88]	@ (8003a90 <HAL_RCC_ClockConfig+0x2cc>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	4912      	ldr	r1, [pc, #72]	@ (8003a90 <HAL_RCC_ClockConfig+0x2cc>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a4a:	f000 f829 	bl	8003aa0 <HAL_RCC_GetSysClockFreq>
 8003a4e:	4601      	mov	r1, r0
 8003a50:	4b0f      	ldr	r3, [pc, #60]	@ (8003a90 <HAL_RCC_ClockConfig+0x2cc>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a58:	22f0      	movs	r2, #240	@ 0xf0
 8003a5a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	fa92 f2a2 	rbit	r2, r2
 8003a62:	60fa      	str	r2, [r7, #12]
  return result;
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	fab2 f282 	clz	r2, r2
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	40d3      	lsrs	r3, r2
 8003a6e:	4a09      	ldr	r2, [pc, #36]	@ (8003a94 <HAL_RCC_ClockConfig+0x2d0>)
 8003a70:	5cd3      	ldrb	r3, [r2, r3]
 8003a72:	fa21 f303 	lsr.w	r3, r1, r3
 8003a76:	4a08      	ldr	r2, [pc, #32]	@ (8003a98 <HAL_RCC_ClockConfig+0x2d4>)
 8003a78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003a7a:	4b08      	ldr	r3, [pc, #32]	@ (8003a9c <HAL_RCC_ClockConfig+0x2d8>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fd fb68 	bl	8001154 <HAL_InitTick>
  
  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3778      	adds	r7, #120	@ 0x78
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	40021000 	.word	0x40021000
 8003a94:	080067d4 	.word	0x080067d4
 8003a98:	20000000 	.word	0x20000000
 8003a9c:	20000004 	.word	0x20000004

08003aa0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b087      	sub	sp, #28
 8003aa4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60fb      	str	r3, [r7, #12]
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60bb      	str	r3, [r7, #8]
 8003aae:	2300      	movs	r3, #0
 8003ab0:	617b      	str	r3, [r7, #20]
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003aba:	4b1e      	ldr	r3, [pc, #120]	@ (8003b34 <HAL_RCC_GetSysClockFreq+0x94>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f003 030c 	and.w	r3, r3, #12
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d002      	beq.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x30>
 8003aca:	2b08      	cmp	r3, #8
 8003acc:	d003      	beq.n	8003ad6 <HAL_RCC_GetSysClockFreq+0x36>
 8003ace:	e026      	b.n	8003b1e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ad0:	4b19      	ldr	r3, [pc, #100]	@ (8003b38 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ad2:	613b      	str	r3, [r7, #16]
      break;
 8003ad4:	e026      	b.n	8003b24 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	0c9b      	lsrs	r3, r3, #18
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	4a17      	ldr	r2, [pc, #92]	@ (8003b3c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ae0:	5cd3      	ldrb	r3, [r2, r3]
 8003ae2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003ae4:	4b13      	ldr	r3, [pc, #76]	@ (8003b34 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae8:	f003 030f 	and.w	r3, r3, #15
 8003aec:	4a14      	ldr	r2, [pc, #80]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003aee:	5cd3      	ldrb	r3, [r2, r3]
 8003af0:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d008      	beq.n	8003b0e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003afc:	4a0e      	ldr	r2, [pc, #56]	@ (8003b38 <HAL_RCC_GetSysClockFreq+0x98>)
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	fb02 f303 	mul.w	r3, r2, r3
 8003b0a:	617b      	str	r3, [r7, #20]
 8003b0c:	e004      	b.n	8003b18 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a0c      	ldr	r2, [pc, #48]	@ (8003b44 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b12:	fb02 f303 	mul.w	r3, r2, r3
 8003b16:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	613b      	str	r3, [r7, #16]
      break;
 8003b1c:	e002      	b.n	8003b24 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b1e:	4b06      	ldr	r3, [pc, #24]	@ (8003b38 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b20:	613b      	str	r3, [r7, #16]
      break;
 8003b22:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b24:	693b      	ldr	r3, [r7, #16]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	371c      	adds	r7, #28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	40021000 	.word	0x40021000
 8003b38:	007a1200 	.word	0x007a1200
 8003b3c:	080067e4 	.word	0x080067e4
 8003b40:	080067f4 	.word	0x080067f4
 8003b44:	003d0900 	.word	0x003d0900

08003b48 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b092      	sub	sp, #72	@ 0x48
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b50:	2300      	movs	r3, #0
 8003b52:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 80cb 	beq.w	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x1ba>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b6c:	4b85      	ldr	r3, [pc, #532]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003b6e:	69db      	ldr	r3, [r3, #28]
 8003b70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10e      	bne.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b78:	4b82      	ldr	r3, [pc, #520]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003b7a:	69db      	ldr	r3, [r3, #28]
 8003b7c:	4a81      	ldr	r2, [pc, #516]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003b7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b82:	61d3      	str	r3, [r2, #28]
 8003b84:	4b7f      	ldr	r3, [pc, #508]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b8c:	60bb      	str	r3, [r7, #8]
 8003b8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b90:	2301      	movs	r3, #1
 8003b92:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b96:	4b7c      	ldr	r3, [pc, #496]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d118      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ba2:	4b79      	ldr	r3, [pc, #484]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a78      	ldr	r2, [pc, #480]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ba8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bae:	f7fd fb15 	bl	80011dc <HAL_GetTick>
 8003bb2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb4:	e008      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb6:	f7fd fb11 	bl	80011dc <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b64      	cmp	r3, #100	@ 0x64
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e0d9      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x234>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc8:	4b6f      	ldr	r3, [pc, #444]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d0f0      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bd4:	4b6b      	ldr	r3, [pc, #428]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d07b      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x194>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d074      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bf2:	4b64      	ldr	r3, [pc, #400]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bfc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003c00:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c04:	fa93 f3a3 	rbit	r3, r3
 8003c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c0c:	fab3 f383 	clz	r3, r3
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	461a      	mov	r2, r3
 8003c14:	4b5d      	ldr	r3, [pc, #372]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c16:	4413      	add	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	6013      	str	r3, [r2, #0]
 8003c20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003c24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c28:	fa93 f3a3 	rbit	r3, r3
 8003c2c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c30:	fab3 f383 	clz	r3, r3
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	461a      	mov	r2, r3
 8003c38:	4b54      	ldr	r3, [pc, #336]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c3a:	4413      	add	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	461a      	mov	r2, r3
 8003c40:	2300      	movs	r3, #0
 8003c42:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c44:	4a4f      	ldr	r2, [pc, #316]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003c46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c48:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d043      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c54:	f7fd fac2 	bl	80011dc <HAL_GetTick>
 8003c58:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c5a:	e00a      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c5c:	f7fd fabe 	bl	80011dc <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e084      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003c72:	2302      	movs	r3, #2
 8003c74:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c78:	fa93 f3a3 	rbit	r3, r3
 8003c7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c7e:	2302      	movs	r3, #2
 8003c80:	623b      	str	r3, [r7, #32]
 8003c82:	6a3b      	ldr	r3, [r7, #32]
 8003c84:	fa93 f3a3 	rbit	r3, r3
 8003c88:	61fb      	str	r3, [r7, #28]
  return result;
 8003c8a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c8c:	fab3 f383 	clz	r3, r3
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d102      	bne.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003c9c:	4b39      	ldr	r3, [pc, #228]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	e007      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	fa93 f3a3 	rbit	r3, r3
 8003cac:	617b      	str	r3, [r7, #20]
 8003cae:	4b35      	ldr	r3, [pc, #212]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	613a      	str	r2, [r7, #16]
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	fa92 f2a2 	rbit	r2, r2
 8003cbc:	60fa      	str	r2, [r7, #12]
  return result;
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	fab2 f282 	clz	r2, r2
 8003cc4:	b2d2      	uxtb	r2, r2
 8003cc6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003cca:	b2d2      	uxtb	r2, r2
 8003ccc:	f002 021f 	and.w	r2, r2, #31
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	fa01 f202 	lsl.w	r2, r1, r2
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0bf      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003cdc:	4b29      	ldr	r3, [pc, #164]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	4926      	ldr	r1, [pc, #152]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003cee:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d105      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cf6:	4b23      	ldr	r3, [pc, #140]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	4a22      	ldr	r2, [pc, #136]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003cfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d00:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d008      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d12:	f023 0203 	bic.w	r2, r3, #3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	491a      	ldr	r1, [pc, #104]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0320 	and.w	r3, r3, #32
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d008      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d2c:	4b15      	ldr	r3, [pc, #84]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d30:	f023 0210 	bic.w	r2, r3, #16
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	4912      	ldr	r1, [pc, #72]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d008      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d4e:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	490b      	ldr	r1, [pc, #44]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d008      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003d68:	4b06      	ldr	r3, [pc, #24]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	4903      	ldr	r1, [pc, #12]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3748      	adds	r7, #72	@ 0x48
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40021000 	.word	0x40021000
 8003d88:	40007000 	.word	0x40007000
 8003d8c:	10908100 	.word	0x10908100

08003d90 <__cvt>:
 8003d90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d94:	ec57 6b10 	vmov	r6, r7, d0
 8003d98:	2f00      	cmp	r7, #0
 8003d9a:	460c      	mov	r4, r1
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	463b      	mov	r3, r7
 8003da0:	bfbb      	ittet	lt
 8003da2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003da6:	461f      	movlt	r7, r3
 8003da8:	2300      	movge	r3, #0
 8003daa:	232d      	movlt	r3, #45	@ 0x2d
 8003dac:	700b      	strb	r3, [r1, #0]
 8003dae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003db0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003db4:	4691      	mov	r9, r2
 8003db6:	f023 0820 	bic.w	r8, r3, #32
 8003dba:	bfbc      	itt	lt
 8003dbc:	4632      	movlt	r2, r6
 8003dbe:	4616      	movlt	r6, r2
 8003dc0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003dc4:	d005      	beq.n	8003dd2 <__cvt+0x42>
 8003dc6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003dca:	d100      	bne.n	8003dce <__cvt+0x3e>
 8003dcc:	3401      	adds	r4, #1
 8003dce:	2102      	movs	r1, #2
 8003dd0:	e000      	b.n	8003dd4 <__cvt+0x44>
 8003dd2:	2103      	movs	r1, #3
 8003dd4:	ab03      	add	r3, sp, #12
 8003dd6:	9301      	str	r3, [sp, #4]
 8003dd8:	ab02      	add	r3, sp, #8
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	ec47 6b10 	vmov	d0, r6, r7
 8003de0:	4653      	mov	r3, sl
 8003de2:	4622      	mov	r2, r4
 8003de4:	f000 ff3c 	bl	8004c60 <_dtoa_r>
 8003de8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003dec:	4605      	mov	r5, r0
 8003dee:	d119      	bne.n	8003e24 <__cvt+0x94>
 8003df0:	f019 0f01 	tst.w	r9, #1
 8003df4:	d00e      	beq.n	8003e14 <__cvt+0x84>
 8003df6:	eb00 0904 	add.w	r9, r0, r4
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	4630      	mov	r0, r6
 8003e00:	4639      	mov	r1, r7
 8003e02:	f7fc fe61 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e06:	b108      	cbz	r0, 8003e0c <__cvt+0x7c>
 8003e08:	f8cd 900c 	str.w	r9, [sp, #12]
 8003e0c:	2230      	movs	r2, #48	@ 0x30
 8003e0e:	9b03      	ldr	r3, [sp, #12]
 8003e10:	454b      	cmp	r3, r9
 8003e12:	d31e      	bcc.n	8003e52 <__cvt+0xc2>
 8003e14:	9b03      	ldr	r3, [sp, #12]
 8003e16:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003e18:	1b5b      	subs	r3, r3, r5
 8003e1a:	4628      	mov	r0, r5
 8003e1c:	6013      	str	r3, [r2, #0]
 8003e1e:	b004      	add	sp, #16
 8003e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e24:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003e28:	eb00 0904 	add.w	r9, r0, r4
 8003e2c:	d1e5      	bne.n	8003dfa <__cvt+0x6a>
 8003e2e:	7803      	ldrb	r3, [r0, #0]
 8003e30:	2b30      	cmp	r3, #48	@ 0x30
 8003e32:	d10a      	bne.n	8003e4a <__cvt+0xba>
 8003e34:	2200      	movs	r2, #0
 8003e36:	2300      	movs	r3, #0
 8003e38:	4630      	mov	r0, r6
 8003e3a:	4639      	mov	r1, r7
 8003e3c:	f7fc fe44 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e40:	b918      	cbnz	r0, 8003e4a <__cvt+0xba>
 8003e42:	f1c4 0401 	rsb	r4, r4, #1
 8003e46:	f8ca 4000 	str.w	r4, [sl]
 8003e4a:	f8da 3000 	ldr.w	r3, [sl]
 8003e4e:	4499      	add	r9, r3
 8003e50:	e7d3      	b.n	8003dfa <__cvt+0x6a>
 8003e52:	1c59      	adds	r1, r3, #1
 8003e54:	9103      	str	r1, [sp, #12]
 8003e56:	701a      	strb	r2, [r3, #0]
 8003e58:	e7d9      	b.n	8003e0e <__cvt+0x7e>

08003e5a <__exponent>:
 8003e5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e5c:	2900      	cmp	r1, #0
 8003e5e:	bfba      	itte	lt
 8003e60:	4249      	neglt	r1, r1
 8003e62:	232d      	movlt	r3, #45	@ 0x2d
 8003e64:	232b      	movge	r3, #43	@ 0x2b
 8003e66:	2909      	cmp	r1, #9
 8003e68:	7002      	strb	r2, [r0, #0]
 8003e6a:	7043      	strb	r3, [r0, #1]
 8003e6c:	dd29      	ble.n	8003ec2 <__exponent+0x68>
 8003e6e:	f10d 0307 	add.w	r3, sp, #7
 8003e72:	461d      	mov	r5, r3
 8003e74:	270a      	movs	r7, #10
 8003e76:	461a      	mov	r2, r3
 8003e78:	fbb1 f6f7 	udiv	r6, r1, r7
 8003e7c:	fb07 1416 	mls	r4, r7, r6, r1
 8003e80:	3430      	adds	r4, #48	@ 0x30
 8003e82:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003e86:	460c      	mov	r4, r1
 8003e88:	2c63      	cmp	r4, #99	@ 0x63
 8003e8a:	f103 33ff 	add.w	r3, r3, #4294967295
 8003e8e:	4631      	mov	r1, r6
 8003e90:	dcf1      	bgt.n	8003e76 <__exponent+0x1c>
 8003e92:	3130      	adds	r1, #48	@ 0x30
 8003e94:	1e94      	subs	r4, r2, #2
 8003e96:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003e9a:	1c41      	adds	r1, r0, #1
 8003e9c:	4623      	mov	r3, r4
 8003e9e:	42ab      	cmp	r3, r5
 8003ea0:	d30a      	bcc.n	8003eb8 <__exponent+0x5e>
 8003ea2:	f10d 0309 	add.w	r3, sp, #9
 8003ea6:	1a9b      	subs	r3, r3, r2
 8003ea8:	42ac      	cmp	r4, r5
 8003eaa:	bf88      	it	hi
 8003eac:	2300      	movhi	r3, #0
 8003eae:	3302      	adds	r3, #2
 8003eb0:	4403      	add	r3, r0
 8003eb2:	1a18      	subs	r0, r3, r0
 8003eb4:	b003      	add	sp, #12
 8003eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eb8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003ebc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003ec0:	e7ed      	b.n	8003e9e <__exponent+0x44>
 8003ec2:	2330      	movs	r3, #48	@ 0x30
 8003ec4:	3130      	adds	r1, #48	@ 0x30
 8003ec6:	7083      	strb	r3, [r0, #2]
 8003ec8:	70c1      	strb	r1, [r0, #3]
 8003eca:	1d03      	adds	r3, r0, #4
 8003ecc:	e7f1      	b.n	8003eb2 <__exponent+0x58>
	...

08003ed0 <_printf_float>:
 8003ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ed4:	b08d      	sub	sp, #52	@ 0x34
 8003ed6:	460c      	mov	r4, r1
 8003ed8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003edc:	4616      	mov	r6, r2
 8003ede:	461f      	mov	r7, r3
 8003ee0:	4605      	mov	r5, r0
 8003ee2:	f000 fdbd 	bl	8004a60 <_localeconv_r>
 8003ee6:	6803      	ldr	r3, [r0, #0]
 8003ee8:	9304      	str	r3, [sp, #16]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7fc f9c0 	bl	8000270 <strlen>
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	930a      	str	r3, [sp, #40]	@ 0x28
 8003ef4:	f8d8 3000 	ldr.w	r3, [r8]
 8003ef8:	9005      	str	r0, [sp, #20]
 8003efa:	3307      	adds	r3, #7
 8003efc:	f023 0307 	bic.w	r3, r3, #7
 8003f00:	f103 0208 	add.w	r2, r3, #8
 8003f04:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003f08:	f8d4 b000 	ldr.w	fp, [r4]
 8003f0c:	f8c8 2000 	str.w	r2, [r8]
 8003f10:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003f14:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003f18:	9307      	str	r3, [sp, #28]
 8003f1a:	f8cd 8018 	str.w	r8, [sp, #24]
 8003f1e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003f22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f26:	4b9c      	ldr	r3, [pc, #624]	@ (8004198 <_printf_float+0x2c8>)
 8003f28:	f04f 32ff 	mov.w	r2, #4294967295
 8003f2c:	f7fc fdfe 	bl	8000b2c <__aeabi_dcmpun>
 8003f30:	bb70      	cbnz	r0, 8003f90 <_printf_float+0xc0>
 8003f32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f36:	4b98      	ldr	r3, [pc, #608]	@ (8004198 <_printf_float+0x2c8>)
 8003f38:	f04f 32ff 	mov.w	r2, #4294967295
 8003f3c:	f7fc fdd8 	bl	8000af0 <__aeabi_dcmple>
 8003f40:	bb30      	cbnz	r0, 8003f90 <_printf_float+0xc0>
 8003f42:	2200      	movs	r2, #0
 8003f44:	2300      	movs	r3, #0
 8003f46:	4640      	mov	r0, r8
 8003f48:	4649      	mov	r1, r9
 8003f4a:	f7fc fdc7 	bl	8000adc <__aeabi_dcmplt>
 8003f4e:	b110      	cbz	r0, 8003f56 <_printf_float+0x86>
 8003f50:	232d      	movs	r3, #45	@ 0x2d
 8003f52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f56:	4a91      	ldr	r2, [pc, #580]	@ (800419c <_printf_float+0x2cc>)
 8003f58:	4b91      	ldr	r3, [pc, #580]	@ (80041a0 <_printf_float+0x2d0>)
 8003f5a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003f5e:	bf8c      	ite	hi
 8003f60:	4690      	movhi	r8, r2
 8003f62:	4698      	movls	r8, r3
 8003f64:	2303      	movs	r3, #3
 8003f66:	6123      	str	r3, [r4, #16]
 8003f68:	f02b 0304 	bic.w	r3, fp, #4
 8003f6c:	6023      	str	r3, [r4, #0]
 8003f6e:	f04f 0900 	mov.w	r9, #0
 8003f72:	9700      	str	r7, [sp, #0]
 8003f74:	4633      	mov	r3, r6
 8003f76:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003f78:	4621      	mov	r1, r4
 8003f7a:	4628      	mov	r0, r5
 8003f7c:	f000 f9d2 	bl	8004324 <_printf_common>
 8003f80:	3001      	adds	r0, #1
 8003f82:	f040 808d 	bne.w	80040a0 <_printf_float+0x1d0>
 8003f86:	f04f 30ff 	mov.w	r0, #4294967295
 8003f8a:	b00d      	add	sp, #52	@ 0x34
 8003f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f90:	4642      	mov	r2, r8
 8003f92:	464b      	mov	r3, r9
 8003f94:	4640      	mov	r0, r8
 8003f96:	4649      	mov	r1, r9
 8003f98:	f7fc fdc8 	bl	8000b2c <__aeabi_dcmpun>
 8003f9c:	b140      	cbz	r0, 8003fb0 <_printf_float+0xe0>
 8003f9e:	464b      	mov	r3, r9
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	bfbc      	itt	lt
 8003fa4:	232d      	movlt	r3, #45	@ 0x2d
 8003fa6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003faa:	4a7e      	ldr	r2, [pc, #504]	@ (80041a4 <_printf_float+0x2d4>)
 8003fac:	4b7e      	ldr	r3, [pc, #504]	@ (80041a8 <_printf_float+0x2d8>)
 8003fae:	e7d4      	b.n	8003f5a <_printf_float+0x8a>
 8003fb0:	6863      	ldr	r3, [r4, #4]
 8003fb2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003fb6:	9206      	str	r2, [sp, #24]
 8003fb8:	1c5a      	adds	r2, r3, #1
 8003fba:	d13b      	bne.n	8004034 <_printf_float+0x164>
 8003fbc:	2306      	movs	r3, #6
 8003fbe:	6063      	str	r3, [r4, #4]
 8003fc0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	6022      	str	r2, [r4, #0]
 8003fc8:	9303      	str	r3, [sp, #12]
 8003fca:	ab0a      	add	r3, sp, #40	@ 0x28
 8003fcc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003fd0:	ab09      	add	r3, sp, #36	@ 0x24
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	6861      	ldr	r1, [r4, #4]
 8003fd6:	ec49 8b10 	vmov	d0, r8, r9
 8003fda:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003fde:	4628      	mov	r0, r5
 8003fe0:	f7ff fed6 	bl	8003d90 <__cvt>
 8003fe4:	9b06      	ldr	r3, [sp, #24]
 8003fe6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003fe8:	2b47      	cmp	r3, #71	@ 0x47
 8003fea:	4680      	mov	r8, r0
 8003fec:	d129      	bne.n	8004042 <_printf_float+0x172>
 8003fee:	1cc8      	adds	r0, r1, #3
 8003ff0:	db02      	blt.n	8003ff8 <_printf_float+0x128>
 8003ff2:	6863      	ldr	r3, [r4, #4]
 8003ff4:	4299      	cmp	r1, r3
 8003ff6:	dd41      	ble.n	800407c <_printf_float+0x1ac>
 8003ff8:	f1aa 0a02 	sub.w	sl, sl, #2
 8003ffc:	fa5f fa8a 	uxtb.w	sl, sl
 8004000:	3901      	subs	r1, #1
 8004002:	4652      	mov	r2, sl
 8004004:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004008:	9109      	str	r1, [sp, #36]	@ 0x24
 800400a:	f7ff ff26 	bl	8003e5a <__exponent>
 800400e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004010:	1813      	adds	r3, r2, r0
 8004012:	2a01      	cmp	r2, #1
 8004014:	4681      	mov	r9, r0
 8004016:	6123      	str	r3, [r4, #16]
 8004018:	dc02      	bgt.n	8004020 <_printf_float+0x150>
 800401a:	6822      	ldr	r2, [r4, #0]
 800401c:	07d2      	lsls	r2, r2, #31
 800401e:	d501      	bpl.n	8004024 <_printf_float+0x154>
 8004020:	3301      	adds	r3, #1
 8004022:	6123      	str	r3, [r4, #16]
 8004024:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0a2      	beq.n	8003f72 <_printf_float+0xa2>
 800402c:	232d      	movs	r3, #45	@ 0x2d
 800402e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004032:	e79e      	b.n	8003f72 <_printf_float+0xa2>
 8004034:	9a06      	ldr	r2, [sp, #24]
 8004036:	2a47      	cmp	r2, #71	@ 0x47
 8004038:	d1c2      	bne.n	8003fc0 <_printf_float+0xf0>
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1c0      	bne.n	8003fc0 <_printf_float+0xf0>
 800403e:	2301      	movs	r3, #1
 8004040:	e7bd      	b.n	8003fbe <_printf_float+0xee>
 8004042:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004046:	d9db      	bls.n	8004000 <_printf_float+0x130>
 8004048:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800404c:	d118      	bne.n	8004080 <_printf_float+0x1b0>
 800404e:	2900      	cmp	r1, #0
 8004050:	6863      	ldr	r3, [r4, #4]
 8004052:	dd0b      	ble.n	800406c <_printf_float+0x19c>
 8004054:	6121      	str	r1, [r4, #16]
 8004056:	b913      	cbnz	r3, 800405e <_printf_float+0x18e>
 8004058:	6822      	ldr	r2, [r4, #0]
 800405a:	07d0      	lsls	r0, r2, #31
 800405c:	d502      	bpl.n	8004064 <_printf_float+0x194>
 800405e:	3301      	adds	r3, #1
 8004060:	440b      	add	r3, r1
 8004062:	6123      	str	r3, [r4, #16]
 8004064:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004066:	f04f 0900 	mov.w	r9, #0
 800406a:	e7db      	b.n	8004024 <_printf_float+0x154>
 800406c:	b913      	cbnz	r3, 8004074 <_printf_float+0x1a4>
 800406e:	6822      	ldr	r2, [r4, #0]
 8004070:	07d2      	lsls	r2, r2, #31
 8004072:	d501      	bpl.n	8004078 <_printf_float+0x1a8>
 8004074:	3302      	adds	r3, #2
 8004076:	e7f4      	b.n	8004062 <_printf_float+0x192>
 8004078:	2301      	movs	r3, #1
 800407a:	e7f2      	b.n	8004062 <_printf_float+0x192>
 800407c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004080:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004082:	4299      	cmp	r1, r3
 8004084:	db05      	blt.n	8004092 <_printf_float+0x1c2>
 8004086:	6823      	ldr	r3, [r4, #0]
 8004088:	6121      	str	r1, [r4, #16]
 800408a:	07d8      	lsls	r0, r3, #31
 800408c:	d5ea      	bpl.n	8004064 <_printf_float+0x194>
 800408e:	1c4b      	adds	r3, r1, #1
 8004090:	e7e7      	b.n	8004062 <_printf_float+0x192>
 8004092:	2900      	cmp	r1, #0
 8004094:	bfd4      	ite	le
 8004096:	f1c1 0202 	rsble	r2, r1, #2
 800409a:	2201      	movgt	r2, #1
 800409c:	4413      	add	r3, r2
 800409e:	e7e0      	b.n	8004062 <_printf_float+0x192>
 80040a0:	6823      	ldr	r3, [r4, #0]
 80040a2:	055a      	lsls	r2, r3, #21
 80040a4:	d407      	bmi.n	80040b6 <_printf_float+0x1e6>
 80040a6:	6923      	ldr	r3, [r4, #16]
 80040a8:	4642      	mov	r2, r8
 80040aa:	4631      	mov	r1, r6
 80040ac:	4628      	mov	r0, r5
 80040ae:	47b8      	blx	r7
 80040b0:	3001      	adds	r0, #1
 80040b2:	d12b      	bne.n	800410c <_printf_float+0x23c>
 80040b4:	e767      	b.n	8003f86 <_printf_float+0xb6>
 80040b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80040ba:	f240 80dd 	bls.w	8004278 <_printf_float+0x3a8>
 80040be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80040c2:	2200      	movs	r2, #0
 80040c4:	2300      	movs	r3, #0
 80040c6:	f7fc fcff 	bl	8000ac8 <__aeabi_dcmpeq>
 80040ca:	2800      	cmp	r0, #0
 80040cc:	d033      	beq.n	8004136 <_printf_float+0x266>
 80040ce:	4a37      	ldr	r2, [pc, #220]	@ (80041ac <_printf_float+0x2dc>)
 80040d0:	2301      	movs	r3, #1
 80040d2:	4631      	mov	r1, r6
 80040d4:	4628      	mov	r0, r5
 80040d6:	47b8      	blx	r7
 80040d8:	3001      	adds	r0, #1
 80040da:	f43f af54 	beq.w	8003f86 <_printf_float+0xb6>
 80040de:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80040e2:	4543      	cmp	r3, r8
 80040e4:	db02      	blt.n	80040ec <_printf_float+0x21c>
 80040e6:	6823      	ldr	r3, [r4, #0]
 80040e8:	07d8      	lsls	r0, r3, #31
 80040ea:	d50f      	bpl.n	800410c <_printf_float+0x23c>
 80040ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040f0:	4631      	mov	r1, r6
 80040f2:	4628      	mov	r0, r5
 80040f4:	47b8      	blx	r7
 80040f6:	3001      	adds	r0, #1
 80040f8:	f43f af45 	beq.w	8003f86 <_printf_float+0xb6>
 80040fc:	f04f 0900 	mov.w	r9, #0
 8004100:	f108 38ff 	add.w	r8, r8, #4294967295
 8004104:	f104 0a1a 	add.w	sl, r4, #26
 8004108:	45c8      	cmp	r8, r9
 800410a:	dc09      	bgt.n	8004120 <_printf_float+0x250>
 800410c:	6823      	ldr	r3, [r4, #0]
 800410e:	079b      	lsls	r3, r3, #30
 8004110:	f100 8103 	bmi.w	800431a <_printf_float+0x44a>
 8004114:	68e0      	ldr	r0, [r4, #12]
 8004116:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004118:	4298      	cmp	r0, r3
 800411a:	bfb8      	it	lt
 800411c:	4618      	movlt	r0, r3
 800411e:	e734      	b.n	8003f8a <_printf_float+0xba>
 8004120:	2301      	movs	r3, #1
 8004122:	4652      	mov	r2, sl
 8004124:	4631      	mov	r1, r6
 8004126:	4628      	mov	r0, r5
 8004128:	47b8      	blx	r7
 800412a:	3001      	adds	r0, #1
 800412c:	f43f af2b 	beq.w	8003f86 <_printf_float+0xb6>
 8004130:	f109 0901 	add.w	r9, r9, #1
 8004134:	e7e8      	b.n	8004108 <_printf_float+0x238>
 8004136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004138:	2b00      	cmp	r3, #0
 800413a:	dc39      	bgt.n	80041b0 <_printf_float+0x2e0>
 800413c:	4a1b      	ldr	r2, [pc, #108]	@ (80041ac <_printf_float+0x2dc>)
 800413e:	2301      	movs	r3, #1
 8004140:	4631      	mov	r1, r6
 8004142:	4628      	mov	r0, r5
 8004144:	47b8      	blx	r7
 8004146:	3001      	adds	r0, #1
 8004148:	f43f af1d 	beq.w	8003f86 <_printf_float+0xb6>
 800414c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004150:	ea59 0303 	orrs.w	r3, r9, r3
 8004154:	d102      	bne.n	800415c <_printf_float+0x28c>
 8004156:	6823      	ldr	r3, [r4, #0]
 8004158:	07d9      	lsls	r1, r3, #31
 800415a:	d5d7      	bpl.n	800410c <_printf_float+0x23c>
 800415c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004160:	4631      	mov	r1, r6
 8004162:	4628      	mov	r0, r5
 8004164:	47b8      	blx	r7
 8004166:	3001      	adds	r0, #1
 8004168:	f43f af0d 	beq.w	8003f86 <_printf_float+0xb6>
 800416c:	f04f 0a00 	mov.w	sl, #0
 8004170:	f104 0b1a 	add.w	fp, r4, #26
 8004174:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004176:	425b      	negs	r3, r3
 8004178:	4553      	cmp	r3, sl
 800417a:	dc01      	bgt.n	8004180 <_printf_float+0x2b0>
 800417c:	464b      	mov	r3, r9
 800417e:	e793      	b.n	80040a8 <_printf_float+0x1d8>
 8004180:	2301      	movs	r3, #1
 8004182:	465a      	mov	r2, fp
 8004184:	4631      	mov	r1, r6
 8004186:	4628      	mov	r0, r5
 8004188:	47b8      	blx	r7
 800418a:	3001      	adds	r0, #1
 800418c:	f43f aefb 	beq.w	8003f86 <_printf_float+0xb6>
 8004190:	f10a 0a01 	add.w	sl, sl, #1
 8004194:	e7ee      	b.n	8004174 <_printf_float+0x2a4>
 8004196:	bf00      	nop
 8004198:	7fefffff 	.word	0x7fefffff
 800419c:	08006808 	.word	0x08006808
 80041a0:	08006804 	.word	0x08006804
 80041a4:	08006810 	.word	0x08006810
 80041a8:	0800680c 	.word	0x0800680c
 80041ac:	08006814 	.word	0x08006814
 80041b0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80041b2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80041b6:	4553      	cmp	r3, sl
 80041b8:	bfa8      	it	ge
 80041ba:	4653      	movge	r3, sl
 80041bc:	2b00      	cmp	r3, #0
 80041be:	4699      	mov	r9, r3
 80041c0:	dc36      	bgt.n	8004230 <_printf_float+0x360>
 80041c2:	f04f 0b00 	mov.w	fp, #0
 80041c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80041ca:	f104 021a 	add.w	r2, r4, #26
 80041ce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80041d0:	9306      	str	r3, [sp, #24]
 80041d2:	eba3 0309 	sub.w	r3, r3, r9
 80041d6:	455b      	cmp	r3, fp
 80041d8:	dc31      	bgt.n	800423e <_printf_float+0x36e>
 80041da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041dc:	459a      	cmp	sl, r3
 80041de:	dc3a      	bgt.n	8004256 <_printf_float+0x386>
 80041e0:	6823      	ldr	r3, [r4, #0]
 80041e2:	07da      	lsls	r2, r3, #31
 80041e4:	d437      	bmi.n	8004256 <_printf_float+0x386>
 80041e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041e8:	ebaa 0903 	sub.w	r9, sl, r3
 80041ec:	9b06      	ldr	r3, [sp, #24]
 80041ee:	ebaa 0303 	sub.w	r3, sl, r3
 80041f2:	4599      	cmp	r9, r3
 80041f4:	bfa8      	it	ge
 80041f6:	4699      	movge	r9, r3
 80041f8:	f1b9 0f00 	cmp.w	r9, #0
 80041fc:	dc33      	bgt.n	8004266 <_printf_float+0x396>
 80041fe:	f04f 0800 	mov.w	r8, #0
 8004202:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004206:	f104 0b1a 	add.w	fp, r4, #26
 800420a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800420c:	ebaa 0303 	sub.w	r3, sl, r3
 8004210:	eba3 0309 	sub.w	r3, r3, r9
 8004214:	4543      	cmp	r3, r8
 8004216:	f77f af79 	ble.w	800410c <_printf_float+0x23c>
 800421a:	2301      	movs	r3, #1
 800421c:	465a      	mov	r2, fp
 800421e:	4631      	mov	r1, r6
 8004220:	4628      	mov	r0, r5
 8004222:	47b8      	blx	r7
 8004224:	3001      	adds	r0, #1
 8004226:	f43f aeae 	beq.w	8003f86 <_printf_float+0xb6>
 800422a:	f108 0801 	add.w	r8, r8, #1
 800422e:	e7ec      	b.n	800420a <_printf_float+0x33a>
 8004230:	4642      	mov	r2, r8
 8004232:	4631      	mov	r1, r6
 8004234:	4628      	mov	r0, r5
 8004236:	47b8      	blx	r7
 8004238:	3001      	adds	r0, #1
 800423a:	d1c2      	bne.n	80041c2 <_printf_float+0x2f2>
 800423c:	e6a3      	b.n	8003f86 <_printf_float+0xb6>
 800423e:	2301      	movs	r3, #1
 8004240:	4631      	mov	r1, r6
 8004242:	4628      	mov	r0, r5
 8004244:	9206      	str	r2, [sp, #24]
 8004246:	47b8      	blx	r7
 8004248:	3001      	adds	r0, #1
 800424a:	f43f ae9c 	beq.w	8003f86 <_printf_float+0xb6>
 800424e:	9a06      	ldr	r2, [sp, #24]
 8004250:	f10b 0b01 	add.w	fp, fp, #1
 8004254:	e7bb      	b.n	80041ce <_printf_float+0x2fe>
 8004256:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800425a:	4631      	mov	r1, r6
 800425c:	4628      	mov	r0, r5
 800425e:	47b8      	blx	r7
 8004260:	3001      	adds	r0, #1
 8004262:	d1c0      	bne.n	80041e6 <_printf_float+0x316>
 8004264:	e68f      	b.n	8003f86 <_printf_float+0xb6>
 8004266:	9a06      	ldr	r2, [sp, #24]
 8004268:	464b      	mov	r3, r9
 800426a:	4442      	add	r2, r8
 800426c:	4631      	mov	r1, r6
 800426e:	4628      	mov	r0, r5
 8004270:	47b8      	blx	r7
 8004272:	3001      	adds	r0, #1
 8004274:	d1c3      	bne.n	80041fe <_printf_float+0x32e>
 8004276:	e686      	b.n	8003f86 <_printf_float+0xb6>
 8004278:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800427c:	f1ba 0f01 	cmp.w	sl, #1
 8004280:	dc01      	bgt.n	8004286 <_printf_float+0x3b6>
 8004282:	07db      	lsls	r3, r3, #31
 8004284:	d536      	bpl.n	80042f4 <_printf_float+0x424>
 8004286:	2301      	movs	r3, #1
 8004288:	4642      	mov	r2, r8
 800428a:	4631      	mov	r1, r6
 800428c:	4628      	mov	r0, r5
 800428e:	47b8      	blx	r7
 8004290:	3001      	adds	r0, #1
 8004292:	f43f ae78 	beq.w	8003f86 <_printf_float+0xb6>
 8004296:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800429a:	4631      	mov	r1, r6
 800429c:	4628      	mov	r0, r5
 800429e:	47b8      	blx	r7
 80042a0:	3001      	adds	r0, #1
 80042a2:	f43f ae70 	beq.w	8003f86 <_printf_float+0xb6>
 80042a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80042aa:	2200      	movs	r2, #0
 80042ac:	2300      	movs	r3, #0
 80042ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80042b2:	f7fc fc09 	bl	8000ac8 <__aeabi_dcmpeq>
 80042b6:	b9c0      	cbnz	r0, 80042ea <_printf_float+0x41a>
 80042b8:	4653      	mov	r3, sl
 80042ba:	f108 0201 	add.w	r2, r8, #1
 80042be:	4631      	mov	r1, r6
 80042c0:	4628      	mov	r0, r5
 80042c2:	47b8      	blx	r7
 80042c4:	3001      	adds	r0, #1
 80042c6:	d10c      	bne.n	80042e2 <_printf_float+0x412>
 80042c8:	e65d      	b.n	8003f86 <_printf_float+0xb6>
 80042ca:	2301      	movs	r3, #1
 80042cc:	465a      	mov	r2, fp
 80042ce:	4631      	mov	r1, r6
 80042d0:	4628      	mov	r0, r5
 80042d2:	47b8      	blx	r7
 80042d4:	3001      	adds	r0, #1
 80042d6:	f43f ae56 	beq.w	8003f86 <_printf_float+0xb6>
 80042da:	f108 0801 	add.w	r8, r8, #1
 80042de:	45d0      	cmp	r8, sl
 80042e0:	dbf3      	blt.n	80042ca <_printf_float+0x3fa>
 80042e2:	464b      	mov	r3, r9
 80042e4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80042e8:	e6df      	b.n	80040aa <_printf_float+0x1da>
 80042ea:	f04f 0800 	mov.w	r8, #0
 80042ee:	f104 0b1a 	add.w	fp, r4, #26
 80042f2:	e7f4      	b.n	80042de <_printf_float+0x40e>
 80042f4:	2301      	movs	r3, #1
 80042f6:	4642      	mov	r2, r8
 80042f8:	e7e1      	b.n	80042be <_printf_float+0x3ee>
 80042fa:	2301      	movs	r3, #1
 80042fc:	464a      	mov	r2, r9
 80042fe:	4631      	mov	r1, r6
 8004300:	4628      	mov	r0, r5
 8004302:	47b8      	blx	r7
 8004304:	3001      	adds	r0, #1
 8004306:	f43f ae3e 	beq.w	8003f86 <_printf_float+0xb6>
 800430a:	f108 0801 	add.w	r8, r8, #1
 800430e:	68e3      	ldr	r3, [r4, #12]
 8004310:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004312:	1a5b      	subs	r3, r3, r1
 8004314:	4543      	cmp	r3, r8
 8004316:	dcf0      	bgt.n	80042fa <_printf_float+0x42a>
 8004318:	e6fc      	b.n	8004114 <_printf_float+0x244>
 800431a:	f04f 0800 	mov.w	r8, #0
 800431e:	f104 0919 	add.w	r9, r4, #25
 8004322:	e7f4      	b.n	800430e <_printf_float+0x43e>

08004324 <_printf_common>:
 8004324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004328:	4616      	mov	r6, r2
 800432a:	4698      	mov	r8, r3
 800432c:	688a      	ldr	r2, [r1, #8]
 800432e:	690b      	ldr	r3, [r1, #16]
 8004330:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004334:	4293      	cmp	r3, r2
 8004336:	bfb8      	it	lt
 8004338:	4613      	movlt	r3, r2
 800433a:	6033      	str	r3, [r6, #0]
 800433c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004340:	4607      	mov	r7, r0
 8004342:	460c      	mov	r4, r1
 8004344:	b10a      	cbz	r2, 800434a <_printf_common+0x26>
 8004346:	3301      	adds	r3, #1
 8004348:	6033      	str	r3, [r6, #0]
 800434a:	6823      	ldr	r3, [r4, #0]
 800434c:	0699      	lsls	r1, r3, #26
 800434e:	bf42      	ittt	mi
 8004350:	6833      	ldrmi	r3, [r6, #0]
 8004352:	3302      	addmi	r3, #2
 8004354:	6033      	strmi	r3, [r6, #0]
 8004356:	6825      	ldr	r5, [r4, #0]
 8004358:	f015 0506 	ands.w	r5, r5, #6
 800435c:	d106      	bne.n	800436c <_printf_common+0x48>
 800435e:	f104 0a19 	add.w	sl, r4, #25
 8004362:	68e3      	ldr	r3, [r4, #12]
 8004364:	6832      	ldr	r2, [r6, #0]
 8004366:	1a9b      	subs	r3, r3, r2
 8004368:	42ab      	cmp	r3, r5
 800436a:	dc26      	bgt.n	80043ba <_printf_common+0x96>
 800436c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004370:	6822      	ldr	r2, [r4, #0]
 8004372:	3b00      	subs	r3, #0
 8004374:	bf18      	it	ne
 8004376:	2301      	movne	r3, #1
 8004378:	0692      	lsls	r2, r2, #26
 800437a:	d42b      	bmi.n	80043d4 <_printf_common+0xb0>
 800437c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004380:	4641      	mov	r1, r8
 8004382:	4638      	mov	r0, r7
 8004384:	47c8      	blx	r9
 8004386:	3001      	adds	r0, #1
 8004388:	d01e      	beq.n	80043c8 <_printf_common+0xa4>
 800438a:	6823      	ldr	r3, [r4, #0]
 800438c:	6922      	ldr	r2, [r4, #16]
 800438e:	f003 0306 	and.w	r3, r3, #6
 8004392:	2b04      	cmp	r3, #4
 8004394:	bf02      	ittt	eq
 8004396:	68e5      	ldreq	r5, [r4, #12]
 8004398:	6833      	ldreq	r3, [r6, #0]
 800439a:	1aed      	subeq	r5, r5, r3
 800439c:	68a3      	ldr	r3, [r4, #8]
 800439e:	bf0c      	ite	eq
 80043a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043a4:	2500      	movne	r5, #0
 80043a6:	4293      	cmp	r3, r2
 80043a8:	bfc4      	itt	gt
 80043aa:	1a9b      	subgt	r3, r3, r2
 80043ac:	18ed      	addgt	r5, r5, r3
 80043ae:	2600      	movs	r6, #0
 80043b0:	341a      	adds	r4, #26
 80043b2:	42b5      	cmp	r5, r6
 80043b4:	d11a      	bne.n	80043ec <_printf_common+0xc8>
 80043b6:	2000      	movs	r0, #0
 80043b8:	e008      	b.n	80043cc <_printf_common+0xa8>
 80043ba:	2301      	movs	r3, #1
 80043bc:	4652      	mov	r2, sl
 80043be:	4641      	mov	r1, r8
 80043c0:	4638      	mov	r0, r7
 80043c2:	47c8      	blx	r9
 80043c4:	3001      	adds	r0, #1
 80043c6:	d103      	bne.n	80043d0 <_printf_common+0xac>
 80043c8:	f04f 30ff 	mov.w	r0, #4294967295
 80043cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043d0:	3501      	adds	r5, #1
 80043d2:	e7c6      	b.n	8004362 <_printf_common+0x3e>
 80043d4:	18e1      	adds	r1, r4, r3
 80043d6:	1c5a      	adds	r2, r3, #1
 80043d8:	2030      	movs	r0, #48	@ 0x30
 80043da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80043de:	4422      	add	r2, r4
 80043e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80043e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80043e8:	3302      	adds	r3, #2
 80043ea:	e7c7      	b.n	800437c <_printf_common+0x58>
 80043ec:	2301      	movs	r3, #1
 80043ee:	4622      	mov	r2, r4
 80043f0:	4641      	mov	r1, r8
 80043f2:	4638      	mov	r0, r7
 80043f4:	47c8      	blx	r9
 80043f6:	3001      	adds	r0, #1
 80043f8:	d0e6      	beq.n	80043c8 <_printf_common+0xa4>
 80043fa:	3601      	adds	r6, #1
 80043fc:	e7d9      	b.n	80043b2 <_printf_common+0x8e>
	...

08004400 <_printf_i>:
 8004400:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004404:	7e0f      	ldrb	r7, [r1, #24]
 8004406:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004408:	2f78      	cmp	r7, #120	@ 0x78
 800440a:	4691      	mov	r9, r2
 800440c:	4680      	mov	r8, r0
 800440e:	460c      	mov	r4, r1
 8004410:	469a      	mov	sl, r3
 8004412:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004416:	d807      	bhi.n	8004428 <_printf_i+0x28>
 8004418:	2f62      	cmp	r7, #98	@ 0x62
 800441a:	d80a      	bhi.n	8004432 <_printf_i+0x32>
 800441c:	2f00      	cmp	r7, #0
 800441e:	f000 80d1 	beq.w	80045c4 <_printf_i+0x1c4>
 8004422:	2f58      	cmp	r7, #88	@ 0x58
 8004424:	f000 80b8 	beq.w	8004598 <_printf_i+0x198>
 8004428:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800442c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004430:	e03a      	b.n	80044a8 <_printf_i+0xa8>
 8004432:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004436:	2b15      	cmp	r3, #21
 8004438:	d8f6      	bhi.n	8004428 <_printf_i+0x28>
 800443a:	a101      	add	r1, pc, #4	@ (adr r1, 8004440 <_printf_i+0x40>)
 800443c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004440:	08004499 	.word	0x08004499
 8004444:	080044ad 	.word	0x080044ad
 8004448:	08004429 	.word	0x08004429
 800444c:	08004429 	.word	0x08004429
 8004450:	08004429 	.word	0x08004429
 8004454:	08004429 	.word	0x08004429
 8004458:	080044ad 	.word	0x080044ad
 800445c:	08004429 	.word	0x08004429
 8004460:	08004429 	.word	0x08004429
 8004464:	08004429 	.word	0x08004429
 8004468:	08004429 	.word	0x08004429
 800446c:	080045ab 	.word	0x080045ab
 8004470:	080044d7 	.word	0x080044d7
 8004474:	08004565 	.word	0x08004565
 8004478:	08004429 	.word	0x08004429
 800447c:	08004429 	.word	0x08004429
 8004480:	080045cd 	.word	0x080045cd
 8004484:	08004429 	.word	0x08004429
 8004488:	080044d7 	.word	0x080044d7
 800448c:	08004429 	.word	0x08004429
 8004490:	08004429 	.word	0x08004429
 8004494:	0800456d 	.word	0x0800456d
 8004498:	6833      	ldr	r3, [r6, #0]
 800449a:	1d1a      	adds	r2, r3, #4
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	6032      	str	r2, [r6, #0]
 80044a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80044a8:	2301      	movs	r3, #1
 80044aa:	e09c      	b.n	80045e6 <_printf_i+0x1e6>
 80044ac:	6833      	ldr	r3, [r6, #0]
 80044ae:	6820      	ldr	r0, [r4, #0]
 80044b0:	1d19      	adds	r1, r3, #4
 80044b2:	6031      	str	r1, [r6, #0]
 80044b4:	0606      	lsls	r6, r0, #24
 80044b6:	d501      	bpl.n	80044bc <_printf_i+0xbc>
 80044b8:	681d      	ldr	r5, [r3, #0]
 80044ba:	e003      	b.n	80044c4 <_printf_i+0xc4>
 80044bc:	0645      	lsls	r5, r0, #25
 80044be:	d5fb      	bpl.n	80044b8 <_printf_i+0xb8>
 80044c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80044c4:	2d00      	cmp	r5, #0
 80044c6:	da03      	bge.n	80044d0 <_printf_i+0xd0>
 80044c8:	232d      	movs	r3, #45	@ 0x2d
 80044ca:	426d      	negs	r5, r5
 80044cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044d0:	4858      	ldr	r0, [pc, #352]	@ (8004634 <_printf_i+0x234>)
 80044d2:	230a      	movs	r3, #10
 80044d4:	e011      	b.n	80044fa <_printf_i+0xfa>
 80044d6:	6821      	ldr	r1, [r4, #0]
 80044d8:	6833      	ldr	r3, [r6, #0]
 80044da:	0608      	lsls	r0, r1, #24
 80044dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80044e0:	d402      	bmi.n	80044e8 <_printf_i+0xe8>
 80044e2:	0649      	lsls	r1, r1, #25
 80044e4:	bf48      	it	mi
 80044e6:	b2ad      	uxthmi	r5, r5
 80044e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80044ea:	4852      	ldr	r0, [pc, #328]	@ (8004634 <_printf_i+0x234>)
 80044ec:	6033      	str	r3, [r6, #0]
 80044ee:	bf14      	ite	ne
 80044f0:	230a      	movne	r3, #10
 80044f2:	2308      	moveq	r3, #8
 80044f4:	2100      	movs	r1, #0
 80044f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80044fa:	6866      	ldr	r6, [r4, #4]
 80044fc:	60a6      	str	r6, [r4, #8]
 80044fe:	2e00      	cmp	r6, #0
 8004500:	db05      	blt.n	800450e <_printf_i+0x10e>
 8004502:	6821      	ldr	r1, [r4, #0]
 8004504:	432e      	orrs	r6, r5
 8004506:	f021 0104 	bic.w	r1, r1, #4
 800450a:	6021      	str	r1, [r4, #0]
 800450c:	d04b      	beq.n	80045a6 <_printf_i+0x1a6>
 800450e:	4616      	mov	r6, r2
 8004510:	fbb5 f1f3 	udiv	r1, r5, r3
 8004514:	fb03 5711 	mls	r7, r3, r1, r5
 8004518:	5dc7      	ldrb	r7, [r0, r7]
 800451a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800451e:	462f      	mov	r7, r5
 8004520:	42bb      	cmp	r3, r7
 8004522:	460d      	mov	r5, r1
 8004524:	d9f4      	bls.n	8004510 <_printf_i+0x110>
 8004526:	2b08      	cmp	r3, #8
 8004528:	d10b      	bne.n	8004542 <_printf_i+0x142>
 800452a:	6823      	ldr	r3, [r4, #0]
 800452c:	07df      	lsls	r7, r3, #31
 800452e:	d508      	bpl.n	8004542 <_printf_i+0x142>
 8004530:	6923      	ldr	r3, [r4, #16]
 8004532:	6861      	ldr	r1, [r4, #4]
 8004534:	4299      	cmp	r1, r3
 8004536:	bfde      	ittt	le
 8004538:	2330      	movle	r3, #48	@ 0x30
 800453a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800453e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004542:	1b92      	subs	r2, r2, r6
 8004544:	6122      	str	r2, [r4, #16]
 8004546:	f8cd a000 	str.w	sl, [sp]
 800454a:	464b      	mov	r3, r9
 800454c:	aa03      	add	r2, sp, #12
 800454e:	4621      	mov	r1, r4
 8004550:	4640      	mov	r0, r8
 8004552:	f7ff fee7 	bl	8004324 <_printf_common>
 8004556:	3001      	adds	r0, #1
 8004558:	d14a      	bne.n	80045f0 <_printf_i+0x1f0>
 800455a:	f04f 30ff 	mov.w	r0, #4294967295
 800455e:	b004      	add	sp, #16
 8004560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004564:	6823      	ldr	r3, [r4, #0]
 8004566:	f043 0320 	orr.w	r3, r3, #32
 800456a:	6023      	str	r3, [r4, #0]
 800456c:	4832      	ldr	r0, [pc, #200]	@ (8004638 <_printf_i+0x238>)
 800456e:	2778      	movs	r7, #120	@ 0x78
 8004570:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004574:	6823      	ldr	r3, [r4, #0]
 8004576:	6831      	ldr	r1, [r6, #0]
 8004578:	061f      	lsls	r7, r3, #24
 800457a:	f851 5b04 	ldr.w	r5, [r1], #4
 800457e:	d402      	bmi.n	8004586 <_printf_i+0x186>
 8004580:	065f      	lsls	r7, r3, #25
 8004582:	bf48      	it	mi
 8004584:	b2ad      	uxthmi	r5, r5
 8004586:	6031      	str	r1, [r6, #0]
 8004588:	07d9      	lsls	r1, r3, #31
 800458a:	bf44      	itt	mi
 800458c:	f043 0320 	orrmi.w	r3, r3, #32
 8004590:	6023      	strmi	r3, [r4, #0]
 8004592:	b11d      	cbz	r5, 800459c <_printf_i+0x19c>
 8004594:	2310      	movs	r3, #16
 8004596:	e7ad      	b.n	80044f4 <_printf_i+0xf4>
 8004598:	4826      	ldr	r0, [pc, #152]	@ (8004634 <_printf_i+0x234>)
 800459a:	e7e9      	b.n	8004570 <_printf_i+0x170>
 800459c:	6823      	ldr	r3, [r4, #0]
 800459e:	f023 0320 	bic.w	r3, r3, #32
 80045a2:	6023      	str	r3, [r4, #0]
 80045a4:	e7f6      	b.n	8004594 <_printf_i+0x194>
 80045a6:	4616      	mov	r6, r2
 80045a8:	e7bd      	b.n	8004526 <_printf_i+0x126>
 80045aa:	6833      	ldr	r3, [r6, #0]
 80045ac:	6825      	ldr	r5, [r4, #0]
 80045ae:	6961      	ldr	r1, [r4, #20]
 80045b0:	1d18      	adds	r0, r3, #4
 80045b2:	6030      	str	r0, [r6, #0]
 80045b4:	062e      	lsls	r6, r5, #24
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	d501      	bpl.n	80045be <_printf_i+0x1be>
 80045ba:	6019      	str	r1, [r3, #0]
 80045bc:	e002      	b.n	80045c4 <_printf_i+0x1c4>
 80045be:	0668      	lsls	r0, r5, #25
 80045c0:	d5fb      	bpl.n	80045ba <_printf_i+0x1ba>
 80045c2:	8019      	strh	r1, [r3, #0]
 80045c4:	2300      	movs	r3, #0
 80045c6:	6123      	str	r3, [r4, #16]
 80045c8:	4616      	mov	r6, r2
 80045ca:	e7bc      	b.n	8004546 <_printf_i+0x146>
 80045cc:	6833      	ldr	r3, [r6, #0]
 80045ce:	1d1a      	adds	r2, r3, #4
 80045d0:	6032      	str	r2, [r6, #0]
 80045d2:	681e      	ldr	r6, [r3, #0]
 80045d4:	6862      	ldr	r2, [r4, #4]
 80045d6:	2100      	movs	r1, #0
 80045d8:	4630      	mov	r0, r6
 80045da:	f7fb fdf9 	bl	80001d0 <memchr>
 80045de:	b108      	cbz	r0, 80045e4 <_printf_i+0x1e4>
 80045e0:	1b80      	subs	r0, r0, r6
 80045e2:	6060      	str	r0, [r4, #4]
 80045e4:	6863      	ldr	r3, [r4, #4]
 80045e6:	6123      	str	r3, [r4, #16]
 80045e8:	2300      	movs	r3, #0
 80045ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045ee:	e7aa      	b.n	8004546 <_printf_i+0x146>
 80045f0:	6923      	ldr	r3, [r4, #16]
 80045f2:	4632      	mov	r2, r6
 80045f4:	4649      	mov	r1, r9
 80045f6:	4640      	mov	r0, r8
 80045f8:	47d0      	blx	sl
 80045fa:	3001      	adds	r0, #1
 80045fc:	d0ad      	beq.n	800455a <_printf_i+0x15a>
 80045fe:	6823      	ldr	r3, [r4, #0]
 8004600:	079b      	lsls	r3, r3, #30
 8004602:	d413      	bmi.n	800462c <_printf_i+0x22c>
 8004604:	68e0      	ldr	r0, [r4, #12]
 8004606:	9b03      	ldr	r3, [sp, #12]
 8004608:	4298      	cmp	r0, r3
 800460a:	bfb8      	it	lt
 800460c:	4618      	movlt	r0, r3
 800460e:	e7a6      	b.n	800455e <_printf_i+0x15e>
 8004610:	2301      	movs	r3, #1
 8004612:	4632      	mov	r2, r6
 8004614:	4649      	mov	r1, r9
 8004616:	4640      	mov	r0, r8
 8004618:	47d0      	blx	sl
 800461a:	3001      	adds	r0, #1
 800461c:	d09d      	beq.n	800455a <_printf_i+0x15a>
 800461e:	3501      	adds	r5, #1
 8004620:	68e3      	ldr	r3, [r4, #12]
 8004622:	9903      	ldr	r1, [sp, #12]
 8004624:	1a5b      	subs	r3, r3, r1
 8004626:	42ab      	cmp	r3, r5
 8004628:	dcf2      	bgt.n	8004610 <_printf_i+0x210>
 800462a:	e7eb      	b.n	8004604 <_printf_i+0x204>
 800462c:	2500      	movs	r5, #0
 800462e:	f104 0619 	add.w	r6, r4, #25
 8004632:	e7f5      	b.n	8004620 <_printf_i+0x220>
 8004634:	08006816 	.word	0x08006816
 8004638:	08006827 	.word	0x08006827

0800463c <std>:
 800463c:	2300      	movs	r3, #0
 800463e:	b510      	push	{r4, lr}
 8004640:	4604      	mov	r4, r0
 8004642:	e9c0 3300 	strd	r3, r3, [r0]
 8004646:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800464a:	6083      	str	r3, [r0, #8]
 800464c:	8181      	strh	r1, [r0, #12]
 800464e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004650:	81c2      	strh	r2, [r0, #14]
 8004652:	6183      	str	r3, [r0, #24]
 8004654:	4619      	mov	r1, r3
 8004656:	2208      	movs	r2, #8
 8004658:	305c      	adds	r0, #92	@ 0x5c
 800465a:	f000 f9f9 	bl	8004a50 <memset>
 800465e:	4b0d      	ldr	r3, [pc, #52]	@ (8004694 <std+0x58>)
 8004660:	6263      	str	r3, [r4, #36]	@ 0x24
 8004662:	4b0d      	ldr	r3, [pc, #52]	@ (8004698 <std+0x5c>)
 8004664:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004666:	4b0d      	ldr	r3, [pc, #52]	@ (800469c <std+0x60>)
 8004668:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800466a:	4b0d      	ldr	r3, [pc, #52]	@ (80046a0 <std+0x64>)
 800466c:	6323      	str	r3, [r4, #48]	@ 0x30
 800466e:	4b0d      	ldr	r3, [pc, #52]	@ (80046a4 <std+0x68>)
 8004670:	6224      	str	r4, [r4, #32]
 8004672:	429c      	cmp	r4, r3
 8004674:	d006      	beq.n	8004684 <std+0x48>
 8004676:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800467a:	4294      	cmp	r4, r2
 800467c:	d002      	beq.n	8004684 <std+0x48>
 800467e:	33d0      	adds	r3, #208	@ 0xd0
 8004680:	429c      	cmp	r4, r3
 8004682:	d105      	bne.n	8004690 <std+0x54>
 8004684:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800468c:	f000 ba5c 	b.w	8004b48 <__retarget_lock_init_recursive>
 8004690:	bd10      	pop	{r4, pc}
 8004692:	bf00      	nop
 8004694:	080048a1 	.word	0x080048a1
 8004698:	080048c3 	.word	0x080048c3
 800469c:	080048fb 	.word	0x080048fb
 80046a0:	0800491f 	.word	0x0800491f
 80046a4:	20000248 	.word	0x20000248

080046a8 <stdio_exit_handler>:
 80046a8:	4a02      	ldr	r2, [pc, #8]	@ (80046b4 <stdio_exit_handler+0xc>)
 80046aa:	4903      	ldr	r1, [pc, #12]	@ (80046b8 <stdio_exit_handler+0x10>)
 80046ac:	4803      	ldr	r0, [pc, #12]	@ (80046bc <stdio_exit_handler+0x14>)
 80046ae:	f000 b869 	b.w	8004784 <_fwalk_sglue>
 80046b2:	bf00      	nop
 80046b4:	2000000c 	.word	0x2000000c
 80046b8:	08006481 	.word	0x08006481
 80046bc:	2000001c 	.word	0x2000001c

080046c0 <cleanup_stdio>:
 80046c0:	6841      	ldr	r1, [r0, #4]
 80046c2:	4b0c      	ldr	r3, [pc, #48]	@ (80046f4 <cleanup_stdio+0x34>)
 80046c4:	4299      	cmp	r1, r3
 80046c6:	b510      	push	{r4, lr}
 80046c8:	4604      	mov	r4, r0
 80046ca:	d001      	beq.n	80046d0 <cleanup_stdio+0x10>
 80046cc:	f001 fed8 	bl	8006480 <_fflush_r>
 80046d0:	68a1      	ldr	r1, [r4, #8]
 80046d2:	4b09      	ldr	r3, [pc, #36]	@ (80046f8 <cleanup_stdio+0x38>)
 80046d4:	4299      	cmp	r1, r3
 80046d6:	d002      	beq.n	80046de <cleanup_stdio+0x1e>
 80046d8:	4620      	mov	r0, r4
 80046da:	f001 fed1 	bl	8006480 <_fflush_r>
 80046de:	68e1      	ldr	r1, [r4, #12]
 80046e0:	4b06      	ldr	r3, [pc, #24]	@ (80046fc <cleanup_stdio+0x3c>)
 80046e2:	4299      	cmp	r1, r3
 80046e4:	d004      	beq.n	80046f0 <cleanup_stdio+0x30>
 80046e6:	4620      	mov	r0, r4
 80046e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046ec:	f001 bec8 	b.w	8006480 <_fflush_r>
 80046f0:	bd10      	pop	{r4, pc}
 80046f2:	bf00      	nop
 80046f4:	20000248 	.word	0x20000248
 80046f8:	200002b0 	.word	0x200002b0
 80046fc:	20000318 	.word	0x20000318

08004700 <global_stdio_init.part.0>:
 8004700:	b510      	push	{r4, lr}
 8004702:	4b0b      	ldr	r3, [pc, #44]	@ (8004730 <global_stdio_init.part.0+0x30>)
 8004704:	4c0b      	ldr	r4, [pc, #44]	@ (8004734 <global_stdio_init.part.0+0x34>)
 8004706:	4a0c      	ldr	r2, [pc, #48]	@ (8004738 <global_stdio_init.part.0+0x38>)
 8004708:	601a      	str	r2, [r3, #0]
 800470a:	4620      	mov	r0, r4
 800470c:	2200      	movs	r2, #0
 800470e:	2104      	movs	r1, #4
 8004710:	f7ff ff94 	bl	800463c <std>
 8004714:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004718:	2201      	movs	r2, #1
 800471a:	2109      	movs	r1, #9
 800471c:	f7ff ff8e 	bl	800463c <std>
 8004720:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004724:	2202      	movs	r2, #2
 8004726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800472a:	2112      	movs	r1, #18
 800472c:	f7ff bf86 	b.w	800463c <std>
 8004730:	20000380 	.word	0x20000380
 8004734:	20000248 	.word	0x20000248
 8004738:	080046a9 	.word	0x080046a9

0800473c <__sfp_lock_acquire>:
 800473c:	4801      	ldr	r0, [pc, #4]	@ (8004744 <__sfp_lock_acquire+0x8>)
 800473e:	f000 ba04 	b.w	8004b4a <__retarget_lock_acquire_recursive>
 8004742:	bf00      	nop
 8004744:	20000389 	.word	0x20000389

08004748 <__sfp_lock_release>:
 8004748:	4801      	ldr	r0, [pc, #4]	@ (8004750 <__sfp_lock_release+0x8>)
 800474a:	f000 b9ff 	b.w	8004b4c <__retarget_lock_release_recursive>
 800474e:	bf00      	nop
 8004750:	20000389 	.word	0x20000389

08004754 <__sinit>:
 8004754:	b510      	push	{r4, lr}
 8004756:	4604      	mov	r4, r0
 8004758:	f7ff fff0 	bl	800473c <__sfp_lock_acquire>
 800475c:	6a23      	ldr	r3, [r4, #32]
 800475e:	b11b      	cbz	r3, 8004768 <__sinit+0x14>
 8004760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004764:	f7ff bff0 	b.w	8004748 <__sfp_lock_release>
 8004768:	4b04      	ldr	r3, [pc, #16]	@ (800477c <__sinit+0x28>)
 800476a:	6223      	str	r3, [r4, #32]
 800476c:	4b04      	ldr	r3, [pc, #16]	@ (8004780 <__sinit+0x2c>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1f5      	bne.n	8004760 <__sinit+0xc>
 8004774:	f7ff ffc4 	bl	8004700 <global_stdio_init.part.0>
 8004778:	e7f2      	b.n	8004760 <__sinit+0xc>
 800477a:	bf00      	nop
 800477c:	080046c1 	.word	0x080046c1
 8004780:	20000380 	.word	0x20000380

08004784 <_fwalk_sglue>:
 8004784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004788:	4607      	mov	r7, r0
 800478a:	4688      	mov	r8, r1
 800478c:	4614      	mov	r4, r2
 800478e:	2600      	movs	r6, #0
 8004790:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004794:	f1b9 0901 	subs.w	r9, r9, #1
 8004798:	d505      	bpl.n	80047a6 <_fwalk_sglue+0x22>
 800479a:	6824      	ldr	r4, [r4, #0]
 800479c:	2c00      	cmp	r4, #0
 800479e:	d1f7      	bne.n	8004790 <_fwalk_sglue+0xc>
 80047a0:	4630      	mov	r0, r6
 80047a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047a6:	89ab      	ldrh	r3, [r5, #12]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d907      	bls.n	80047bc <_fwalk_sglue+0x38>
 80047ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047b0:	3301      	adds	r3, #1
 80047b2:	d003      	beq.n	80047bc <_fwalk_sglue+0x38>
 80047b4:	4629      	mov	r1, r5
 80047b6:	4638      	mov	r0, r7
 80047b8:	47c0      	blx	r8
 80047ba:	4306      	orrs	r6, r0
 80047bc:	3568      	adds	r5, #104	@ 0x68
 80047be:	e7e9      	b.n	8004794 <_fwalk_sglue+0x10>

080047c0 <iprintf>:
 80047c0:	b40f      	push	{r0, r1, r2, r3}
 80047c2:	b507      	push	{r0, r1, r2, lr}
 80047c4:	4906      	ldr	r1, [pc, #24]	@ (80047e0 <iprintf+0x20>)
 80047c6:	ab04      	add	r3, sp, #16
 80047c8:	6808      	ldr	r0, [r1, #0]
 80047ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80047ce:	6881      	ldr	r1, [r0, #8]
 80047d0:	9301      	str	r3, [sp, #4]
 80047d2:	f001 fcb9 	bl	8006148 <_vfiprintf_r>
 80047d6:	b003      	add	sp, #12
 80047d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80047dc:	b004      	add	sp, #16
 80047de:	4770      	bx	lr
 80047e0:	20000018 	.word	0x20000018

080047e4 <_puts_r>:
 80047e4:	6a03      	ldr	r3, [r0, #32]
 80047e6:	b570      	push	{r4, r5, r6, lr}
 80047e8:	6884      	ldr	r4, [r0, #8]
 80047ea:	4605      	mov	r5, r0
 80047ec:	460e      	mov	r6, r1
 80047ee:	b90b      	cbnz	r3, 80047f4 <_puts_r+0x10>
 80047f0:	f7ff ffb0 	bl	8004754 <__sinit>
 80047f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80047f6:	07db      	lsls	r3, r3, #31
 80047f8:	d405      	bmi.n	8004806 <_puts_r+0x22>
 80047fa:	89a3      	ldrh	r3, [r4, #12]
 80047fc:	0598      	lsls	r0, r3, #22
 80047fe:	d402      	bmi.n	8004806 <_puts_r+0x22>
 8004800:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004802:	f000 f9a2 	bl	8004b4a <__retarget_lock_acquire_recursive>
 8004806:	89a3      	ldrh	r3, [r4, #12]
 8004808:	0719      	lsls	r1, r3, #28
 800480a:	d502      	bpl.n	8004812 <_puts_r+0x2e>
 800480c:	6923      	ldr	r3, [r4, #16]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d135      	bne.n	800487e <_puts_r+0x9a>
 8004812:	4621      	mov	r1, r4
 8004814:	4628      	mov	r0, r5
 8004816:	f000 f8c5 	bl	80049a4 <__swsetup_r>
 800481a:	b380      	cbz	r0, 800487e <_puts_r+0x9a>
 800481c:	f04f 35ff 	mov.w	r5, #4294967295
 8004820:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004822:	07da      	lsls	r2, r3, #31
 8004824:	d405      	bmi.n	8004832 <_puts_r+0x4e>
 8004826:	89a3      	ldrh	r3, [r4, #12]
 8004828:	059b      	lsls	r3, r3, #22
 800482a:	d402      	bmi.n	8004832 <_puts_r+0x4e>
 800482c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800482e:	f000 f98d 	bl	8004b4c <__retarget_lock_release_recursive>
 8004832:	4628      	mov	r0, r5
 8004834:	bd70      	pop	{r4, r5, r6, pc}
 8004836:	2b00      	cmp	r3, #0
 8004838:	da04      	bge.n	8004844 <_puts_r+0x60>
 800483a:	69a2      	ldr	r2, [r4, #24]
 800483c:	429a      	cmp	r2, r3
 800483e:	dc17      	bgt.n	8004870 <_puts_r+0x8c>
 8004840:	290a      	cmp	r1, #10
 8004842:	d015      	beq.n	8004870 <_puts_r+0x8c>
 8004844:	6823      	ldr	r3, [r4, #0]
 8004846:	1c5a      	adds	r2, r3, #1
 8004848:	6022      	str	r2, [r4, #0]
 800484a:	7019      	strb	r1, [r3, #0]
 800484c:	68a3      	ldr	r3, [r4, #8]
 800484e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004852:	3b01      	subs	r3, #1
 8004854:	60a3      	str	r3, [r4, #8]
 8004856:	2900      	cmp	r1, #0
 8004858:	d1ed      	bne.n	8004836 <_puts_r+0x52>
 800485a:	2b00      	cmp	r3, #0
 800485c:	da11      	bge.n	8004882 <_puts_r+0x9e>
 800485e:	4622      	mov	r2, r4
 8004860:	210a      	movs	r1, #10
 8004862:	4628      	mov	r0, r5
 8004864:	f000 f85f 	bl	8004926 <__swbuf_r>
 8004868:	3001      	adds	r0, #1
 800486a:	d0d7      	beq.n	800481c <_puts_r+0x38>
 800486c:	250a      	movs	r5, #10
 800486e:	e7d7      	b.n	8004820 <_puts_r+0x3c>
 8004870:	4622      	mov	r2, r4
 8004872:	4628      	mov	r0, r5
 8004874:	f000 f857 	bl	8004926 <__swbuf_r>
 8004878:	3001      	adds	r0, #1
 800487a:	d1e7      	bne.n	800484c <_puts_r+0x68>
 800487c:	e7ce      	b.n	800481c <_puts_r+0x38>
 800487e:	3e01      	subs	r6, #1
 8004880:	e7e4      	b.n	800484c <_puts_r+0x68>
 8004882:	6823      	ldr	r3, [r4, #0]
 8004884:	1c5a      	adds	r2, r3, #1
 8004886:	6022      	str	r2, [r4, #0]
 8004888:	220a      	movs	r2, #10
 800488a:	701a      	strb	r2, [r3, #0]
 800488c:	e7ee      	b.n	800486c <_puts_r+0x88>
	...

08004890 <puts>:
 8004890:	4b02      	ldr	r3, [pc, #8]	@ (800489c <puts+0xc>)
 8004892:	4601      	mov	r1, r0
 8004894:	6818      	ldr	r0, [r3, #0]
 8004896:	f7ff bfa5 	b.w	80047e4 <_puts_r>
 800489a:	bf00      	nop
 800489c:	20000018 	.word	0x20000018

080048a0 <__sread>:
 80048a0:	b510      	push	{r4, lr}
 80048a2:	460c      	mov	r4, r1
 80048a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048a8:	f000 f900 	bl	8004aac <_read_r>
 80048ac:	2800      	cmp	r0, #0
 80048ae:	bfab      	itete	ge
 80048b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80048b2:	89a3      	ldrhlt	r3, [r4, #12]
 80048b4:	181b      	addge	r3, r3, r0
 80048b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80048ba:	bfac      	ite	ge
 80048bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80048be:	81a3      	strhlt	r3, [r4, #12]
 80048c0:	bd10      	pop	{r4, pc}

080048c2 <__swrite>:
 80048c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048c6:	461f      	mov	r7, r3
 80048c8:	898b      	ldrh	r3, [r1, #12]
 80048ca:	05db      	lsls	r3, r3, #23
 80048cc:	4605      	mov	r5, r0
 80048ce:	460c      	mov	r4, r1
 80048d0:	4616      	mov	r6, r2
 80048d2:	d505      	bpl.n	80048e0 <__swrite+0x1e>
 80048d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048d8:	2302      	movs	r3, #2
 80048da:	2200      	movs	r2, #0
 80048dc:	f000 f8d4 	bl	8004a88 <_lseek_r>
 80048e0:	89a3      	ldrh	r3, [r4, #12]
 80048e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80048ea:	81a3      	strh	r3, [r4, #12]
 80048ec:	4632      	mov	r2, r6
 80048ee:	463b      	mov	r3, r7
 80048f0:	4628      	mov	r0, r5
 80048f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048f6:	f000 b8eb 	b.w	8004ad0 <_write_r>

080048fa <__sseek>:
 80048fa:	b510      	push	{r4, lr}
 80048fc:	460c      	mov	r4, r1
 80048fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004902:	f000 f8c1 	bl	8004a88 <_lseek_r>
 8004906:	1c43      	adds	r3, r0, #1
 8004908:	89a3      	ldrh	r3, [r4, #12]
 800490a:	bf15      	itete	ne
 800490c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800490e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004912:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004916:	81a3      	strheq	r3, [r4, #12]
 8004918:	bf18      	it	ne
 800491a:	81a3      	strhne	r3, [r4, #12]
 800491c:	bd10      	pop	{r4, pc}

0800491e <__sclose>:
 800491e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004922:	f000 b8a1 	b.w	8004a68 <_close_r>

08004926 <__swbuf_r>:
 8004926:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004928:	460e      	mov	r6, r1
 800492a:	4614      	mov	r4, r2
 800492c:	4605      	mov	r5, r0
 800492e:	b118      	cbz	r0, 8004938 <__swbuf_r+0x12>
 8004930:	6a03      	ldr	r3, [r0, #32]
 8004932:	b90b      	cbnz	r3, 8004938 <__swbuf_r+0x12>
 8004934:	f7ff ff0e 	bl	8004754 <__sinit>
 8004938:	69a3      	ldr	r3, [r4, #24]
 800493a:	60a3      	str	r3, [r4, #8]
 800493c:	89a3      	ldrh	r3, [r4, #12]
 800493e:	071a      	lsls	r2, r3, #28
 8004940:	d501      	bpl.n	8004946 <__swbuf_r+0x20>
 8004942:	6923      	ldr	r3, [r4, #16]
 8004944:	b943      	cbnz	r3, 8004958 <__swbuf_r+0x32>
 8004946:	4621      	mov	r1, r4
 8004948:	4628      	mov	r0, r5
 800494a:	f000 f82b 	bl	80049a4 <__swsetup_r>
 800494e:	b118      	cbz	r0, 8004958 <__swbuf_r+0x32>
 8004950:	f04f 37ff 	mov.w	r7, #4294967295
 8004954:	4638      	mov	r0, r7
 8004956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004958:	6823      	ldr	r3, [r4, #0]
 800495a:	6922      	ldr	r2, [r4, #16]
 800495c:	1a98      	subs	r0, r3, r2
 800495e:	6963      	ldr	r3, [r4, #20]
 8004960:	b2f6      	uxtb	r6, r6
 8004962:	4283      	cmp	r3, r0
 8004964:	4637      	mov	r7, r6
 8004966:	dc05      	bgt.n	8004974 <__swbuf_r+0x4e>
 8004968:	4621      	mov	r1, r4
 800496a:	4628      	mov	r0, r5
 800496c:	f001 fd88 	bl	8006480 <_fflush_r>
 8004970:	2800      	cmp	r0, #0
 8004972:	d1ed      	bne.n	8004950 <__swbuf_r+0x2a>
 8004974:	68a3      	ldr	r3, [r4, #8]
 8004976:	3b01      	subs	r3, #1
 8004978:	60a3      	str	r3, [r4, #8]
 800497a:	6823      	ldr	r3, [r4, #0]
 800497c:	1c5a      	adds	r2, r3, #1
 800497e:	6022      	str	r2, [r4, #0]
 8004980:	701e      	strb	r6, [r3, #0]
 8004982:	6962      	ldr	r2, [r4, #20]
 8004984:	1c43      	adds	r3, r0, #1
 8004986:	429a      	cmp	r2, r3
 8004988:	d004      	beq.n	8004994 <__swbuf_r+0x6e>
 800498a:	89a3      	ldrh	r3, [r4, #12]
 800498c:	07db      	lsls	r3, r3, #31
 800498e:	d5e1      	bpl.n	8004954 <__swbuf_r+0x2e>
 8004990:	2e0a      	cmp	r6, #10
 8004992:	d1df      	bne.n	8004954 <__swbuf_r+0x2e>
 8004994:	4621      	mov	r1, r4
 8004996:	4628      	mov	r0, r5
 8004998:	f001 fd72 	bl	8006480 <_fflush_r>
 800499c:	2800      	cmp	r0, #0
 800499e:	d0d9      	beq.n	8004954 <__swbuf_r+0x2e>
 80049a0:	e7d6      	b.n	8004950 <__swbuf_r+0x2a>
	...

080049a4 <__swsetup_r>:
 80049a4:	b538      	push	{r3, r4, r5, lr}
 80049a6:	4b29      	ldr	r3, [pc, #164]	@ (8004a4c <__swsetup_r+0xa8>)
 80049a8:	4605      	mov	r5, r0
 80049aa:	6818      	ldr	r0, [r3, #0]
 80049ac:	460c      	mov	r4, r1
 80049ae:	b118      	cbz	r0, 80049b8 <__swsetup_r+0x14>
 80049b0:	6a03      	ldr	r3, [r0, #32]
 80049b2:	b90b      	cbnz	r3, 80049b8 <__swsetup_r+0x14>
 80049b4:	f7ff fece 	bl	8004754 <__sinit>
 80049b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049bc:	0719      	lsls	r1, r3, #28
 80049be:	d422      	bmi.n	8004a06 <__swsetup_r+0x62>
 80049c0:	06da      	lsls	r2, r3, #27
 80049c2:	d407      	bmi.n	80049d4 <__swsetup_r+0x30>
 80049c4:	2209      	movs	r2, #9
 80049c6:	602a      	str	r2, [r5, #0]
 80049c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049cc:	81a3      	strh	r3, [r4, #12]
 80049ce:	f04f 30ff 	mov.w	r0, #4294967295
 80049d2:	e033      	b.n	8004a3c <__swsetup_r+0x98>
 80049d4:	0758      	lsls	r0, r3, #29
 80049d6:	d512      	bpl.n	80049fe <__swsetup_r+0x5a>
 80049d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80049da:	b141      	cbz	r1, 80049ee <__swsetup_r+0x4a>
 80049dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80049e0:	4299      	cmp	r1, r3
 80049e2:	d002      	beq.n	80049ea <__swsetup_r+0x46>
 80049e4:	4628      	mov	r0, r5
 80049e6:	f000 ff0b 	bl	8005800 <_free_r>
 80049ea:	2300      	movs	r3, #0
 80049ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80049ee:	89a3      	ldrh	r3, [r4, #12]
 80049f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80049f4:	81a3      	strh	r3, [r4, #12]
 80049f6:	2300      	movs	r3, #0
 80049f8:	6063      	str	r3, [r4, #4]
 80049fa:	6923      	ldr	r3, [r4, #16]
 80049fc:	6023      	str	r3, [r4, #0]
 80049fe:	89a3      	ldrh	r3, [r4, #12]
 8004a00:	f043 0308 	orr.w	r3, r3, #8
 8004a04:	81a3      	strh	r3, [r4, #12]
 8004a06:	6923      	ldr	r3, [r4, #16]
 8004a08:	b94b      	cbnz	r3, 8004a1e <__swsetup_r+0x7a>
 8004a0a:	89a3      	ldrh	r3, [r4, #12]
 8004a0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004a10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a14:	d003      	beq.n	8004a1e <__swsetup_r+0x7a>
 8004a16:	4621      	mov	r1, r4
 8004a18:	4628      	mov	r0, r5
 8004a1a:	f001 fd7f 	bl	800651c <__smakebuf_r>
 8004a1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a22:	f013 0201 	ands.w	r2, r3, #1
 8004a26:	d00a      	beq.n	8004a3e <__swsetup_r+0x9a>
 8004a28:	2200      	movs	r2, #0
 8004a2a:	60a2      	str	r2, [r4, #8]
 8004a2c:	6962      	ldr	r2, [r4, #20]
 8004a2e:	4252      	negs	r2, r2
 8004a30:	61a2      	str	r2, [r4, #24]
 8004a32:	6922      	ldr	r2, [r4, #16]
 8004a34:	b942      	cbnz	r2, 8004a48 <__swsetup_r+0xa4>
 8004a36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004a3a:	d1c5      	bne.n	80049c8 <__swsetup_r+0x24>
 8004a3c:	bd38      	pop	{r3, r4, r5, pc}
 8004a3e:	0799      	lsls	r1, r3, #30
 8004a40:	bf58      	it	pl
 8004a42:	6962      	ldrpl	r2, [r4, #20]
 8004a44:	60a2      	str	r2, [r4, #8]
 8004a46:	e7f4      	b.n	8004a32 <__swsetup_r+0x8e>
 8004a48:	2000      	movs	r0, #0
 8004a4a:	e7f7      	b.n	8004a3c <__swsetup_r+0x98>
 8004a4c:	20000018 	.word	0x20000018

08004a50 <memset>:
 8004a50:	4402      	add	r2, r0
 8004a52:	4603      	mov	r3, r0
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d100      	bne.n	8004a5a <memset+0xa>
 8004a58:	4770      	bx	lr
 8004a5a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a5e:	e7f9      	b.n	8004a54 <memset+0x4>

08004a60 <_localeconv_r>:
 8004a60:	4800      	ldr	r0, [pc, #0]	@ (8004a64 <_localeconv_r+0x4>)
 8004a62:	4770      	bx	lr
 8004a64:	20000158 	.word	0x20000158

08004a68 <_close_r>:
 8004a68:	b538      	push	{r3, r4, r5, lr}
 8004a6a:	4d06      	ldr	r5, [pc, #24]	@ (8004a84 <_close_r+0x1c>)
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	4604      	mov	r4, r0
 8004a70:	4608      	mov	r0, r1
 8004a72:	602b      	str	r3, [r5, #0]
 8004a74:	f7fc fab1 	bl	8000fda <_close>
 8004a78:	1c43      	adds	r3, r0, #1
 8004a7a:	d102      	bne.n	8004a82 <_close_r+0x1a>
 8004a7c:	682b      	ldr	r3, [r5, #0]
 8004a7e:	b103      	cbz	r3, 8004a82 <_close_r+0x1a>
 8004a80:	6023      	str	r3, [r4, #0]
 8004a82:	bd38      	pop	{r3, r4, r5, pc}
 8004a84:	20000384 	.word	0x20000384

08004a88 <_lseek_r>:
 8004a88:	b538      	push	{r3, r4, r5, lr}
 8004a8a:	4d07      	ldr	r5, [pc, #28]	@ (8004aa8 <_lseek_r+0x20>)
 8004a8c:	4604      	mov	r4, r0
 8004a8e:	4608      	mov	r0, r1
 8004a90:	4611      	mov	r1, r2
 8004a92:	2200      	movs	r2, #0
 8004a94:	602a      	str	r2, [r5, #0]
 8004a96:	461a      	mov	r2, r3
 8004a98:	f7fc fac6 	bl	8001028 <_lseek>
 8004a9c:	1c43      	adds	r3, r0, #1
 8004a9e:	d102      	bne.n	8004aa6 <_lseek_r+0x1e>
 8004aa0:	682b      	ldr	r3, [r5, #0]
 8004aa2:	b103      	cbz	r3, 8004aa6 <_lseek_r+0x1e>
 8004aa4:	6023      	str	r3, [r4, #0]
 8004aa6:	bd38      	pop	{r3, r4, r5, pc}
 8004aa8:	20000384 	.word	0x20000384

08004aac <_read_r>:
 8004aac:	b538      	push	{r3, r4, r5, lr}
 8004aae:	4d07      	ldr	r5, [pc, #28]	@ (8004acc <_read_r+0x20>)
 8004ab0:	4604      	mov	r4, r0
 8004ab2:	4608      	mov	r0, r1
 8004ab4:	4611      	mov	r1, r2
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	602a      	str	r2, [r5, #0]
 8004aba:	461a      	mov	r2, r3
 8004abc:	f7fc fa54 	bl	8000f68 <_read>
 8004ac0:	1c43      	adds	r3, r0, #1
 8004ac2:	d102      	bne.n	8004aca <_read_r+0x1e>
 8004ac4:	682b      	ldr	r3, [r5, #0]
 8004ac6:	b103      	cbz	r3, 8004aca <_read_r+0x1e>
 8004ac8:	6023      	str	r3, [r4, #0]
 8004aca:	bd38      	pop	{r3, r4, r5, pc}
 8004acc:	20000384 	.word	0x20000384

08004ad0 <_write_r>:
 8004ad0:	b538      	push	{r3, r4, r5, lr}
 8004ad2:	4d07      	ldr	r5, [pc, #28]	@ (8004af0 <_write_r+0x20>)
 8004ad4:	4604      	mov	r4, r0
 8004ad6:	4608      	mov	r0, r1
 8004ad8:	4611      	mov	r1, r2
 8004ada:	2200      	movs	r2, #0
 8004adc:	602a      	str	r2, [r5, #0]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	f7fc fa5f 	bl	8000fa2 <_write>
 8004ae4:	1c43      	adds	r3, r0, #1
 8004ae6:	d102      	bne.n	8004aee <_write_r+0x1e>
 8004ae8:	682b      	ldr	r3, [r5, #0]
 8004aea:	b103      	cbz	r3, 8004aee <_write_r+0x1e>
 8004aec:	6023      	str	r3, [r4, #0]
 8004aee:	bd38      	pop	{r3, r4, r5, pc}
 8004af0:	20000384 	.word	0x20000384

08004af4 <__errno>:
 8004af4:	4b01      	ldr	r3, [pc, #4]	@ (8004afc <__errno+0x8>)
 8004af6:	6818      	ldr	r0, [r3, #0]
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	20000018 	.word	0x20000018

08004b00 <__libc_init_array>:
 8004b00:	b570      	push	{r4, r5, r6, lr}
 8004b02:	4d0d      	ldr	r5, [pc, #52]	@ (8004b38 <__libc_init_array+0x38>)
 8004b04:	4c0d      	ldr	r4, [pc, #52]	@ (8004b3c <__libc_init_array+0x3c>)
 8004b06:	1b64      	subs	r4, r4, r5
 8004b08:	10a4      	asrs	r4, r4, #2
 8004b0a:	2600      	movs	r6, #0
 8004b0c:	42a6      	cmp	r6, r4
 8004b0e:	d109      	bne.n	8004b24 <__libc_init_array+0x24>
 8004b10:	4d0b      	ldr	r5, [pc, #44]	@ (8004b40 <__libc_init_array+0x40>)
 8004b12:	4c0c      	ldr	r4, [pc, #48]	@ (8004b44 <__libc_init_array+0x44>)
 8004b14:	f001 fe2e 	bl	8006774 <_init>
 8004b18:	1b64      	subs	r4, r4, r5
 8004b1a:	10a4      	asrs	r4, r4, #2
 8004b1c:	2600      	movs	r6, #0
 8004b1e:	42a6      	cmp	r6, r4
 8004b20:	d105      	bne.n	8004b2e <__libc_init_array+0x2e>
 8004b22:	bd70      	pop	{r4, r5, r6, pc}
 8004b24:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b28:	4798      	blx	r3
 8004b2a:	3601      	adds	r6, #1
 8004b2c:	e7ee      	b.n	8004b0c <__libc_init_array+0xc>
 8004b2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b32:	4798      	blx	r3
 8004b34:	3601      	adds	r6, #1
 8004b36:	e7f2      	b.n	8004b1e <__libc_init_array+0x1e>
 8004b38:	08006b84 	.word	0x08006b84
 8004b3c:	08006b84 	.word	0x08006b84
 8004b40:	08006b84 	.word	0x08006b84
 8004b44:	08006b88 	.word	0x08006b88

08004b48 <__retarget_lock_init_recursive>:
 8004b48:	4770      	bx	lr

08004b4a <__retarget_lock_acquire_recursive>:
 8004b4a:	4770      	bx	lr

08004b4c <__retarget_lock_release_recursive>:
 8004b4c:	4770      	bx	lr

08004b4e <quorem>:
 8004b4e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b52:	6903      	ldr	r3, [r0, #16]
 8004b54:	690c      	ldr	r4, [r1, #16]
 8004b56:	42a3      	cmp	r3, r4
 8004b58:	4607      	mov	r7, r0
 8004b5a:	db7e      	blt.n	8004c5a <quorem+0x10c>
 8004b5c:	3c01      	subs	r4, #1
 8004b5e:	f101 0814 	add.w	r8, r1, #20
 8004b62:	00a3      	lsls	r3, r4, #2
 8004b64:	f100 0514 	add.w	r5, r0, #20
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b6e:	9301      	str	r3, [sp, #4]
 8004b70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004b74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004b80:	fbb2 f6f3 	udiv	r6, r2, r3
 8004b84:	d32e      	bcc.n	8004be4 <quorem+0x96>
 8004b86:	f04f 0a00 	mov.w	sl, #0
 8004b8a:	46c4      	mov	ip, r8
 8004b8c:	46ae      	mov	lr, r5
 8004b8e:	46d3      	mov	fp, sl
 8004b90:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004b94:	b298      	uxth	r0, r3
 8004b96:	fb06 a000 	mla	r0, r6, r0, sl
 8004b9a:	0c02      	lsrs	r2, r0, #16
 8004b9c:	0c1b      	lsrs	r3, r3, #16
 8004b9e:	fb06 2303 	mla	r3, r6, r3, r2
 8004ba2:	f8de 2000 	ldr.w	r2, [lr]
 8004ba6:	b280      	uxth	r0, r0
 8004ba8:	b292      	uxth	r2, r2
 8004baa:	1a12      	subs	r2, r2, r0
 8004bac:	445a      	add	r2, fp
 8004bae:	f8de 0000 	ldr.w	r0, [lr]
 8004bb2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004bbc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004bc0:	b292      	uxth	r2, r2
 8004bc2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004bc6:	45e1      	cmp	r9, ip
 8004bc8:	f84e 2b04 	str.w	r2, [lr], #4
 8004bcc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004bd0:	d2de      	bcs.n	8004b90 <quorem+0x42>
 8004bd2:	9b00      	ldr	r3, [sp, #0]
 8004bd4:	58eb      	ldr	r3, [r5, r3]
 8004bd6:	b92b      	cbnz	r3, 8004be4 <quorem+0x96>
 8004bd8:	9b01      	ldr	r3, [sp, #4]
 8004bda:	3b04      	subs	r3, #4
 8004bdc:	429d      	cmp	r5, r3
 8004bde:	461a      	mov	r2, r3
 8004be0:	d32f      	bcc.n	8004c42 <quorem+0xf4>
 8004be2:	613c      	str	r4, [r7, #16]
 8004be4:	4638      	mov	r0, r7
 8004be6:	f001 f97d 	bl	8005ee4 <__mcmp>
 8004bea:	2800      	cmp	r0, #0
 8004bec:	db25      	blt.n	8004c3a <quorem+0xec>
 8004bee:	4629      	mov	r1, r5
 8004bf0:	2000      	movs	r0, #0
 8004bf2:	f858 2b04 	ldr.w	r2, [r8], #4
 8004bf6:	f8d1 c000 	ldr.w	ip, [r1]
 8004bfa:	fa1f fe82 	uxth.w	lr, r2
 8004bfe:	fa1f f38c 	uxth.w	r3, ip
 8004c02:	eba3 030e 	sub.w	r3, r3, lr
 8004c06:	4403      	add	r3, r0
 8004c08:	0c12      	lsrs	r2, r2, #16
 8004c0a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004c0e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c18:	45c1      	cmp	r9, r8
 8004c1a:	f841 3b04 	str.w	r3, [r1], #4
 8004c1e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004c22:	d2e6      	bcs.n	8004bf2 <quorem+0xa4>
 8004c24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c28:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c2c:	b922      	cbnz	r2, 8004c38 <quorem+0xea>
 8004c2e:	3b04      	subs	r3, #4
 8004c30:	429d      	cmp	r5, r3
 8004c32:	461a      	mov	r2, r3
 8004c34:	d30b      	bcc.n	8004c4e <quorem+0x100>
 8004c36:	613c      	str	r4, [r7, #16]
 8004c38:	3601      	adds	r6, #1
 8004c3a:	4630      	mov	r0, r6
 8004c3c:	b003      	add	sp, #12
 8004c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c42:	6812      	ldr	r2, [r2, #0]
 8004c44:	3b04      	subs	r3, #4
 8004c46:	2a00      	cmp	r2, #0
 8004c48:	d1cb      	bne.n	8004be2 <quorem+0x94>
 8004c4a:	3c01      	subs	r4, #1
 8004c4c:	e7c6      	b.n	8004bdc <quorem+0x8e>
 8004c4e:	6812      	ldr	r2, [r2, #0]
 8004c50:	3b04      	subs	r3, #4
 8004c52:	2a00      	cmp	r2, #0
 8004c54:	d1ef      	bne.n	8004c36 <quorem+0xe8>
 8004c56:	3c01      	subs	r4, #1
 8004c58:	e7ea      	b.n	8004c30 <quorem+0xe2>
 8004c5a:	2000      	movs	r0, #0
 8004c5c:	e7ee      	b.n	8004c3c <quorem+0xee>
	...

08004c60 <_dtoa_r>:
 8004c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c64:	69c7      	ldr	r7, [r0, #28]
 8004c66:	b097      	sub	sp, #92	@ 0x5c
 8004c68:	ed8d 0b04 	vstr	d0, [sp, #16]
 8004c6c:	ec55 4b10 	vmov	r4, r5, d0
 8004c70:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8004c72:	9107      	str	r1, [sp, #28]
 8004c74:	4681      	mov	r9, r0
 8004c76:	920c      	str	r2, [sp, #48]	@ 0x30
 8004c78:	9311      	str	r3, [sp, #68]	@ 0x44
 8004c7a:	b97f      	cbnz	r7, 8004c9c <_dtoa_r+0x3c>
 8004c7c:	2010      	movs	r0, #16
 8004c7e:	f000 fe09 	bl	8005894 <malloc>
 8004c82:	4602      	mov	r2, r0
 8004c84:	f8c9 001c 	str.w	r0, [r9, #28]
 8004c88:	b920      	cbnz	r0, 8004c94 <_dtoa_r+0x34>
 8004c8a:	4ba9      	ldr	r3, [pc, #676]	@ (8004f30 <_dtoa_r+0x2d0>)
 8004c8c:	21ef      	movs	r1, #239	@ 0xef
 8004c8e:	48a9      	ldr	r0, [pc, #676]	@ (8004f34 <_dtoa_r+0x2d4>)
 8004c90:	f001 fcc0 	bl	8006614 <__assert_func>
 8004c94:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004c98:	6007      	str	r7, [r0, #0]
 8004c9a:	60c7      	str	r7, [r0, #12]
 8004c9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004ca0:	6819      	ldr	r1, [r3, #0]
 8004ca2:	b159      	cbz	r1, 8004cbc <_dtoa_r+0x5c>
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	604a      	str	r2, [r1, #4]
 8004ca8:	2301      	movs	r3, #1
 8004caa:	4093      	lsls	r3, r2
 8004cac:	608b      	str	r3, [r1, #8]
 8004cae:	4648      	mov	r0, r9
 8004cb0:	f000 fee6 	bl	8005a80 <_Bfree>
 8004cb4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	601a      	str	r2, [r3, #0]
 8004cbc:	1e2b      	subs	r3, r5, #0
 8004cbe:	bfb9      	ittee	lt
 8004cc0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004cc4:	9305      	strlt	r3, [sp, #20]
 8004cc6:	2300      	movge	r3, #0
 8004cc8:	6033      	strge	r3, [r6, #0]
 8004cca:	9f05      	ldr	r7, [sp, #20]
 8004ccc:	4b9a      	ldr	r3, [pc, #616]	@ (8004f38 <_dtoa_r+0x2d8>)
 8004cce:	bfbc      	itt	lt
 8004cd0:	2201      	movlt	r2, #1
 8004cd2:	6032      	strlt	r2, [r6, #0]
 8004cd4:	43bb      	bics	r3, r7
 8004cd6:	d112      	bne.n	8004cfe <_dtoa_r+0x9e>
 8004cd8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004cda:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004cde:	6013      	str	r3, [r2, #0]
 8004ce0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004ce4:	4323      	orrs	r3, r4
 8004ce6:	f000 855a 	beq.w	800579e <_dtoa_r+0xb3e>
 8004cea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004cec:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8004f4c <_dtoa_r+0x2ec>
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 855c 	beq.w	80057ae <_dtoa_r+0xb4e>
 8004cf6:	f10a 0303 	add.w	r3, sl, #3
 8004cfa:	f000 bd56 	b.w	80057aa <_dtoa_r+0xb4a>
 8004cfe:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004d02:	2200      	movs	r2, #0
 8004d04:	ec51 0b17 	vmov	r0, r1, d7
 8004d08:	2300      	movs	r3, #0
 8004d0a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8004d0e:	f7fb fedb 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d12:	4680      	mov	r8, r0
 8004d14:	b158      	cbz	r0, 8004d2e <_dtoa_r+0xce>
 8004d16:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004d18:	2301      	movs	r3, #1
 8004d1a:	6013      	str	r3, [r2, #0]
 8004d1c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004d1e:	b113      	cbz	r3, 8004d26 <_dtoa_r+0xc6>
 8004d20:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8004d22:	4b86      	ldr	r3, [pc, #536]	@ (8004f3c <_dtoa_r+0x2dc>)
 8004d24:	6013      	str	r3, [r2, #0]
 8004d26:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8004f50 <_dtoa_r+0x2f0>
 8004d2a:	f000 bd40 	b.w	80057ae <_dtoa_r+0xb4e>
 8004d2e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8004d32:	aa14      	add	r2, sp, #80	@ 0x50
 8004d34:	a915      	add	r1, sp, #84	@ 0x54
 8004d36:	4648      	mov	r0, r9
 8004d38:	f001 f984 	bl	8006044 <__d2b>
 8004d3c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004d40:	9002      	str	r0, [sp, #8]
 8004d42:	2e00      	cmp	r6, #0
 8004d44:	d078      	beq.n	8004e38 <_dtoa_r+0x1d8>
 8004d46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d48:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8004d4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004d54:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004d58:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004d5c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004d60:	4619      	mov	r1, r3
 8004d62:	2200      	movs	r2, #0
 8004d64:	4b76      	ldr	r3, [pc, #472]	@ (8004f40 <_dtoa_r+0x2e0>)
 8004d66:	f7fb fa8f 	bl	8000288 <__aeabi_dsub>
 8004d6a:	a36b      	add	r3, pc, #428	@ (adr r3, 8004f18 <_dtoa_r+0x2b8>)
 8004d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d70:	f7fb fc42 	bl	80005f8 <__aeabi_dmul>
 8004d74:	a36a      	add	r3, pc, #424	@ (adr r3, 8004f20 <_dtoa_r+0x2c0>)
 8004d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7a:	f7fb fa87 	bl	800028c <__adddf3>
 8004d7e:	4604      	mov	r4, r0
 8004d80:	4630      	mov	r0, r6
 8004d82:	460d      	mov	r5, r1
 8004d84:	f7fb fbce 	bl	8000524 <__aeabi_i2d>
 8004d88:	a367      	add	r3, pc, #412	@ (adr r3, 8004f28 <_dtoa_r+0x2c8>)
 8004d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8e:	f7fb fc33 	bl	80005f8 <__aeabi_dmul>
 8004d92:	4602      	mov	r2, r0
 8004d94:	460b      	mov	r3, r1
 8004d96:	4620      	mov	r0, r4
 8004d98:	4629      	mov	r1, r5
 8004d9a:	f7fb fa77 	bl	800028c <__adddf3>
 8004d9e:	4604      	mov	r4, r0
 8004da0:	460d      	mov	r5, r1
 8004da2:	f7fb fed9 	bl	8000b58 <__aeabi_d2iz>
 8004da6:	2200      	movs	r2, #0
 8004da8:	4607      	mov	r7, r0
 8004daa:	2300      	movs	r3, #0
 8004dac:	4620      	mov	r0, r4
 8004dae:	4629      	mov	r1, r5
 8004db0:	f7fb fe94 	bl	8000adc <__aeabi_dcmplt>
 8004db4:	b140      	cbz	r0, 8004dc8 <_dtoa_r+0x168>
 8004db6:	4638      	mov	r0, r7
 8004db8:	f7fb fbb4 	bl	8000524 <__aeabi_i2d>
 8004dbc:	4622      	mov	r2, r4
 8004dbe:	462b      	mov	r3, r5
 8004dc0:	f7fb fe82 	bl	8000ac8 <__aeabi_dcmpeq>
 8004dc4:	b900      	cbnz	r0, 8004dc8 <_dtoa_r+0x168>
 8004dc6:	3f01      	subs	r7, #1
 8004dc8:	2f16      	cmp	r7, #22
 8004dca:	d852      	bhi.n	8004e72 <_dtoa_r+0x212>
 8004dcc:	4b5d      	ldr	r3, [pc, #372]	@ (8004f44 <_dtoa_r+0x2e4>)
 8004dce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004dda:	f7fb fe7f 	bl	8000adc <__aeabi_dcmplt>
 8004dde:	2800      	cmp	r0, #0
 8004de0:	d049      	beq.n	8004e76 <_dtoa_r+0x216>
 8004de2:	3f01      	subs	r7, #1
 8004de4:	2300      	movs	r3, #0
 8004de6:	9310      	str	r3, [sp, #64]	@ 0x40
 8004de8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004dea:	1b9b      	subs	r3, r3, r6
 8004dec:	1e5a      	subs	r2, r3, #1
 8004dee:	bf45      	ittet	mi
 8004df0:	f1c3 0301 	rsbmi	r3, r3, #1
 8004df4:	9300      	strmi	r3, [sp, #0]
 8004df6:	2300      	movpl	r3, #0
 8004df8:	2300      	movmi	r3, #0
 8004dfa:	9206      	str	r2, [sp, #24]
 8004dfc:	bf54      	ite	pl
 8004dfe:	9300      	strpl	r3, [sp, #0]
 8004e00:	9306      	strmi	r3, [sp, #24]
 8004e02:	2f00      	cmp	r7, #0
 8004e04:	db39      	blt.n	8004e7a <_dtoa_r+0x21a>
 8004e06:	9b06      	ldr	r3, [sp, #24]
 8004e08:	970d      	str	r7, [sp, #52]	@ 0x34
 8004e0a:	443b      	add	r3, r7
 8004e0c:	9306      	str	r3, [sp, #24]
 8004e0e:	2300      	movs	r3, #0
 8004e10:	9308      	str	r3, [sp, #32]
 8004e12:	9b07      	ldr	r3, [sp, #28]
 8004e14:	2b09      	cmp	r3, #9
 8004e16:	d863      	bhi.n	8004ee0 <_dtoa_r+0x280>
 8004e18:	2b05      	cmp	r3, #5
 8004e1a:	bfc4      	itt	gt
 8004e1c:	3b04      	subgt	r3, #4
 8004e1e:	9307      	strgt	r3, [sp, #28]
 8004e20:	9b07      	ldr	r3, [sp, #28]
 8004e22:	f1a3 0302 	sub.w	r3, r3, #2
 8004e26:	bfcc      	ite	gt
 8004e28:	2400      	movgt	r4, #0
 8004e2a:	2401      	movle	r4, #1
 8004e2c:	2b03      	cmp	r3, #3
 8004e2e:	d863      	bhi.n	8004ef8 <_dtoa_r+0x298>
 8004e30:	e8df f003 	tbb	[pc, r3]
 8004e34:	2b375452 	.word	0x2b375452
 8004e38:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004e3c:	441e      	add	r6, r3
 8004e3e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004e42:	2b20      	cmp	r3, #32
 8004e44:	bfc1      	itttt	gt
 8004e46:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004e4a:	409f      	lslgt	r7, r3
 8004e4c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004e50:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004e54:	bfd6      	itet	le
 8004e56:	f1c3 0320 	rsble	r3, r3, #32
 8004e5a:	ea47 0003 	orrgt.w	r0, r7, r3
 8004e5e:	fa04 f003 	lslle.w	r0, r4, r3
 8004e62:	f7fb fb4f 	bl	8000504 <__aeabi_ui2d>
 8004e66:	2201      	movs	r2, #1
 8004e68:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004e6c:	3e01      	subs	r6, #1
 8004e6e:	9212      	str	r2, [sp, #72]	@ 0x48
 8004e70:	e776      	b.n	8004d60 <_dtoa_r+0x100>
 8004e72:	2301      	movs	r3, #1
 8004e74:	e7b7      	b.n	8004de6 <_dtoa_r+0x186>
 8004e76:	9010      	str	r0, [sp, #64]	@ 0x40
 8004e78:	e7b6      	b.n	8004de8 <_dtoa_r+0x188>
 8004e7a:	9b00      	ldr	r3, [sp, #0]
 8004e7c:	1bdb      	subs	r3, r3, r7
 8004e7e:	9300      	str	r3, [sp, #0]
 8004e80:	427b      	negs	r3, r7
 8004e82:	9308      	str	r3, [sp, #32]
 8004e84:	2300      	movs	r3, #0
 8004e86:	930d      	str	r3, [sp, #52]	@ 0x34
 8004e88:	e7c3      	b.n	8004e12 <_dtoa_r+0x1b2>
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004e90:	eb07 0b03 	add.w	fp, r7, r3
 8004e94:	f10b 0301 	add.w	r3, fp, #1
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	9303      	str	r3, [sp, #12]
 8004e9c:	bfb8      	it	lt
 8004e9e:	2301      	movlt	r3, #1
 8004ea0:	e006      	b.n	8004eb0 <_dtoa_r+0x250>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ea6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	dd28      	ble.n	8004efe <_dtoa_r+0x29e>
 8004eac:	469b      	mov	fp, r3
 8004eae:	9303      	str	r3, [sp, #12]
 8004eb0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	2204      	movs	r2, #4
 8004eb8:	f102 0514 	add.w	r5, r2, #20
 8004ebc:	429d      	cmp	r5, r3
 8004ebe:	d926      	bls.n	8004f0e <_dtoa_r+0x2ae>
 8004ec0:	6041      	str	r1, [r0, #4]
 8004ec2:	4648      	mov	r0, r9
 8004ec4:	f000 fd9c 	bl	8005a00 <_Balloc>
 8004ec8:	4682      	mov	sl, r0
 8004eca:	2800      	cmp	r0, #0
 8004ecc:	d142      	bne.n	8004f54 <_dtoa_r+0x2f4>
 8004ece:	4b1e      	ldr	r3, [pc, #120]	@ (8004f48 <_dtoa_r+0x2e8>)
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	f240 11af 	movw	r1, #431	@ 0x1af
 8004ed6:	e6da      	b.n	8004c8e <_dtoa_r+0x2e>
 8004ed8:	2300      	movs	r3, #0
 8004eda:	e7e3      	b.n	8004ea4 <_dtoa_r+0x244>
 8004edc:	2300      	movs	r3, #0
 8004ede:	e7d5      	b.n	8004e8c <_dtoa_r+0x22c>
 8004ee0:	2401      	movs	r4, #1
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	9307      	str	r3, [sp, #28]
 8004ee6:	9409      	str	r4, [sp, #36]	@ 0x24
 8004ee8:	f04f 3bff 	mov.w	fp, #4294967295
 8004eec:	2200      	movs	r2, #0
 8004eee:	f8cd b00c 	str.w	fp, [sp, #12]
 8004ef2:	2312      	movs	r3, #18
 8004ef4:	920c      	str	r2, [sp, #48]	@ 0x30
 8004ef6:	e7db      	b.n	8004eb0 <_dtoa_r+0x250>
 8004ef8:	2301      	movs	r3, #1
 8004efa:	9309      	str	r3, [sp, #36]	@ 0x24
 8004efc:	e7f4      	b.n	8004ee8 <_dtoa_r+0x288>
 8004efe:	f04f 0b01 	mov.w	fp, #1
 8004f02:	f8cd b00c 	str.w	fp, [sp, #12]
 8004f06:	465b      	mov	r3, fp
 8004f08:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8004f0c:	e7d0      	b.n	8004eb0 <_dtoa_r+0x250>
 8004f0e:	3101      	adds	r1, #1
 8004f10:	0052      	lsls	r2, r2, #1
 8004f12:	e7d1      	b.n	8004eb8 <_dtoa_r+0x258>
 8004f14:	f3af 8000 	nop.w
 8004f18:	636f4361 	.word	0x636f4361
 8004f1c:	3fd287a7 	.word	0x3fd287a7
 8004f20:	8b60c8b3 	.word	0x8b60c8b3
 8004f24:	3fc68a28 	.word	0x3fc68a28
 8004f28:	509f79fb 	.word	0x509f79fb
 8004f2c:	3fd34413 	.word	0x3fd34413
 8004f30:	08006845 	.word	0x08006845
 8004f34:	0800685c 	.word	0x0800685c
 8004f38:	7ff00000 	.word	0x7ff00000
 8004f3c:	08006815 	.word	0x08006815
 8004f40:	3ff80000 	.word	0x3ff80000
 8004f44:	080069b0 	.word	0x080069b0
 8004f48:	080068b4 	.word	0x080068b4
 8004f4c:	08006841 	.word	0x08006841
 8004f50:	08006814 	.word	0x08006814
 8004f54:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004f58:	6018      	str	r0, [r3, #0]
 8004f5a:	9b03      	ldr	r3, [sp, #12]
 8004f5c:	2b0e      	cmp	r3, #14
 8004f5e:	f200 80a1 	bhi.w	80050a4 <_dtoa_r+0x444>
 8004f62:	2c00      	cmp	r4, #0
 8004f64:	f000 809e 	beq.w	80050a4 <_dtoa_r+0x444>
 8004f68:	2f00      	cmp	r7, #0
 8004f6a:	dd33      	ble.n	8004fd4 <_dtoa_r+0x374>
 8004f6c:	4b9c      	ldr	r3, [pc, #624]	@ (80051e0 <_dtoa_r+0x580>)
 8004f6e:	f007 020f 	and.w	r2, r7, #15
 8004f72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f76:	ed93 7b00 	vldr	d7, [r3]
 8004f7a:	05f8      	lsls	r0, r7, #23
 8004f7c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8004f80:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004f84:	d516      	bpl.n	8004fb4 <_dtoa_r+0x354>
 8004f86:	4b97      	ldr	r3, [pc, #604]	@ (80051e4 <_dtoa_r+0x584>)
 8004f88:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004f8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004f90:	f7fb fc5c 	bl	800084c <__aeabi_ddiv>
 8004f94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f98:	f004 040f 	and.w	r4, r4, #15
 8004f9c:	2603      	movs	r6, #3
 8004f9e:	4d91      	ldr	r5, [pc, #580]	@ (80051e4 <_dtoa_r+0x584>)
 8004fa0:	b954      	cbnz	r4, 8004fb8 <_dtoa_r+0x358>
 8004fa2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004fa6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004faa:	f7fb fc4f 	bl	800084c <__aeabi_ddiv>
 8004fae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004fb2:	e028      	b.n	8005006 <_dtoa_r+0x3a6>
 8004fb4:	2602      	movs	r6, #2
 8004fb6:	e7f2      	b.n	8004f9e <_dtoa_r+0x33e>
 8004fb8:	07e1      	lsls	r1, r4, #31
 8004fba:	d508      	bpl.n	8004fce <_dtoa_r+0x36e>
 8004fbc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004fc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004fc4:	f7fb fb18 	bl	80005f8 <__aeabi_dmul>
 8004fc8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004fcc:	3601      	adds	r6, #1
 8004fce:	1064      	asrs	r4, r4, #1
 8004fd0:	3508      	adds	r5, #8
 8004fd2:	e7e5      	b.n	8004fa0 <_dtoa_r+0x340>
 8004fd4:	f000 80af 	beq.w	8005136 <_dtoa_r+0x4d6>
 8004fd8:	427c      	negs	r4, r7
 8004fda:	4b81      	ldr	r3, [pc, #516]	@ (80051e0 <_dtoa_r+0x580>)
 8004fdc:	4d81      	ldr	r5, [pc, #516]	@ (80051e4 <_dtoa_r+0x584>)
 8004fde:	f004 020f 	and.w	r2, r4, #15
 8004fe2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004fee:	f7fb fb03 	bl	80005f8 <__aeabi_dmul>
 8004ff2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ff6:	1124      	asrs	r4, r4, #4
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	2602      	movs	r6, #2
 8004ffc:	2c00      	cmp	r4, #0
 8004ffe:	f040 808f 	bne.w	8005120 <_dtoa_r+0x4c0>
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1d3      	bne.n	8004fae <_dtoa_r+0x34e>
 8005006:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005008:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800500c:	2b00      	cmp	r3, #0
 800500e:	f000 8094 	beq.w	800513a <_dtoa_r+0x4da>
 8005012:	4b75      	ldr	r3, [pc, #468]	@ (80051e8 <_dtoa_r+0x588>)
 8005014:	2200      	movs	r2, #0
 8005016:	4620      	mov	r0, r4
 8005018:	4629      	mov	r1, r5
 800501a:	f7fb fd5f 	bl	8000adc <__aeabi_dcmplt>
 800501e:	2800      	cmp	r0, #0
 8005020:	f000 808b 	beq.w	800513a <_dtoa_r+0x4da>
 8005024:	9b03      	ldr	r3, [sp, #12]
 8005026:	2b00      	cmp	r3, #0
 8005028:	f000 8087 	beq.w	800513a <_dtoa_r+0x4da>
 800502c:	f1bb 0f00 	cmp.w	fp, #0
 8005030:	dd34      	ble.n	800509c <_dtoa_r+0x43c>
 8005032:	4620      	mov	r0, r4
 8005034:	4b6d      	ldr	r3, [pc, #436]	@ (80051ec <_dtoa_r+0x58c>)
 8005036:	2200      	movs	r2, #0
 8005038:	4629      	mov	r1, r5
 800503a:	f7fb fadd 	bl	80005f8 <__aeabi_dmul>
 800503e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005042:	f107 38ff 	add.w	r8, r7, #4294967295
 8005046:	3601      	adds	r6, #1
 8005048:	465c      	mov	r4, fp
 800504a:	4630      	mov	r0, r6
 800504c:	f7fb fa6a 	bl	8000524 <__aeabi_i2d>
 8005050:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005054:	f7fb fad0 	bl	80005f8 <__aeabi_dmul>
 8005058:	4b65      	ldr	r3, [pc, #404]	@ (80051f0 <_dtoa_r+0x590>)
 800505a:	2200      	movs	r2, #0
 800505c:	f7fb f916 	bl	800028c <__adddf3>
 8005060:	4605      	mov	r5, r0
 8005062:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005066:	2c00      	cmp	r4, #0
 8005068:	d16a      	bne.n	8005140 <_dtoa_r+0x4e0>
 800506a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800506e:	4b61      	ldr	r3, [pc, #388]	@ (80051f4 <_dtoa_r+0x594>)
 8005070:	2200      	movs	r2, #0
 8005072:	f7fb f909 	bl	8000288 <__aeabi_dsub>
 8005076:	4602      	mov	r2, r0
 8005078:	460b      	mov	r3, r1
 800507a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800507e:	462a      	mov	r2, r5
 8005080:	4633      	mov	r3, r6
 8005082:	f7fb fd49 	bl	8000b18 <__aeabi_dcmpgt>
 8005086:	2800      	cmp	r0, #0
 8005088:	f040 8298 	bne.w	80055bc <_dtoa_r+0x95c>
 800508c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005090:	462a      	mov	r2, r5
 8005092:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005096:	f7fb fd21 	bl	8000adc <__aeabi_dcmplt>
 800509a:	bb38      	cbnz	r0, 80050ec <_dtoa_r+0x48c>
 800509c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80050a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80050a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f2c0 8157 	blt.w	800535a <_dtoa_r+0x6fa>
 80050ac:	2f0e      	cmp	r7, #14
 80050ae:	f300 8154 	bgt.w	800535a <_dtoa_r+0x6fa>
 80050b2:	4b4b      	ldr	r3, [pc, #300]	@ (80051e0 <_dtoa_r+0x580>)
 80050b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80050b8:	ed93 7b00 	vldr	d7, [r3]
 80050bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80050be:	2b00      	cmp	r3, #0
 80050c0:	ed8d 7b00 	vstr	d7, [sp]
 80050c4:	f280 80e5 	bge.w	8005292 <_dtoa_r+0x632>
 80050c8:	9b03      	ldr	r3, [sp, #12]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f300 80e1 	bgt.w	8005292 <_dtoa_r+0x632>
 80050d0:	d10c      	bne.n	80050ec <_dtoa_r+0x48c>
 80050d2:	4b48      	ldr	r3, [pc, #288]	@ (80051f4 <_dtoa_r+0x594>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	ec51 0b17 	vmov	r0, r1, d7
 80050da:	f7fb fa8d 	bl	80005f8 <__aeabi_dmul>
 80050de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050e2:	f7fb fd0f 	bl	8000b04 <__aeabi_dcmpge>
 80050e6:	2800      	cmp	r0, #0
 80050e8:	f000 8266 	beq.w	80055b8 <_dtoa_r+0x958>
 80050ec:	2400      	movs	r4, #0
 80050ee:	4625      	mov	r5, r4
 80050f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80050f2:	4656      	mov	r6, sl
 80050f4:	ea6f 0803 	mvn.w	r8, r3
 80050f8:	2700      	movs	r7, #0
 80050fa:	4621      	mov	r1, r4
 80050fc:	4648      	mov	r0, r9
 80050fe:	f000 fcbf 	bl	8005a80 <_Bfree>
 8005102:	2d00      	cmp	r5, #0
 8005104:	f000 80bd 	beq.w	8005282 <_dtoa_r+0x622>
 8005108:	b12f      	cbz	r7, 8005116 <_dtoa_r+0x4b6>
 800510a:	42af      	cmp	r7, r5
 800510c:	d003      	beq.n	8005116 <_dtoa_r+0x4b6>
 800510e:	4639      	mov	r1, r7
 8005110:	4648      	mov	r0, r9
 8005112:	f000 fcb5 	bl	8005a80 <_Bfree>
 8005116:	4629      	mov	r1, r5
 8005118:	4648      	mov	r0, r9
 800511a:	f000 fcb1 	bl	8005a80 <_Bfree>
 800511e:	e0b0      	b.n	8005282 <_dtoa_r+0x622>
 8005120:	07e2      	lsls	r2, r4, #31
 8005122:	d505      	bpl.n	8005130 <_dtoa_r+0x4d0>
 8005124:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005128:	f7fb fa66 	bl	80005f8 <__aeabi_dmul>
 800512c:	3601      	adds	r6, #1
 800512e:	2301      	movs	r3, #1
 8005130:	1064      	asrs	r4, r4, #1
 8005132:	3508      	adds	r5, #8
 8005134:	e762      	b.n	8004ffc <_dtoa_r+0x39c>
 8005136:	2602      	movs	r6, #2
 8005138:	e765      	b.n	8005006 <_dtoa_r+0x3a6>
 800513a:	9c03      	ldr	r4, [sp, #12]
 800513c:	46b8      	mov	r8, r7
 800513e:	e784      	b.n	800504a <_dtoa_r+0x3ea>
 8005140:	4b27      	ldr	r3, [pc, #156]	@ (80051e0 <_dtoa_r+0x580>)
 8005142:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005144:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005148:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800514c:	4454      	add	r4, sl
 800514e:	2900      	cmp	r1, #0
 8005150:	d054      	beq.n	80051fc <_dtoa_r+0x59c>
 8005152:	4929      	ldr	r1, [pc, #164]	@ (80051f8 <_dtoa_r+0x598>)
 8005154:	2000      	movs	r0, #0
 8005156:	f7fb fb79 	bl	800084c <__aeabi_ddiv>
 800515a:	4633      	mov	r3, r6
 800515c:	462a      	mov	r2, r5
 800515e:	f7fb f893 	bl	8000288 <__aeabi_dsub>
 8005162:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005166:	4656      	mov	r6, sl
 8005168:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800516c:	f7fb fcf4 	bl	8000b58 <__aeabi_d2iz>
 8005170:	4605      	mov	r5, r0
 8005172:	f7fb f9d7 	bl	8000524 <__aeabi_i2d>
 8005176:	4602      	mov	r2, r0
 8005178:	460b      	mov	r3, r1
 800517a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800517e:	f7fb f883 	bl	8000288 <__aeabi_dsub>
 8005182:	3530      	adds	r5, #48	@ 0x30
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800518c:	f806 5b01 	strb.w	r5, [r6], #1
 8005190:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005194:	f7fb fca2 	bl	8000adc <__aeabi_dcmplt>
 8005198:	2800      	cmp	r0, #0
 800519a:	d172      	bne.n	8005282 <_dtoa_r+0x622>
 800519c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051a0:	4911      	ldr	r1, [pc, #68]	@ (80051e8 <_dtoa_r+0x588>)
 80051a2:	2000      	movs	r0, #0
 80051a4:	f7fb f870 	bl	8000288 <__aeabi_dsub>
 80051a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80051ac:	f7fb fc96 	bl	8000adc <__aeabi_dcmplt>
 80051b0:	2800      	cmp	r0, #0
 80051b2:	f040 80b4 	bne.w	800531e <_dtoa_r+0x6be>
 80051b6:	42a6      	cmp	r6, r4
 80051b8:	f43f af70 	beq.w	800509c <_dtoa_r+0x43c>
 80051bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80051c0:	4b0a      	ldr	r3, [pc, #40]	@ (80051ec <_dtoa_r+0x58c>)
 80051c2:	2200      	movs	r2, #0
 80051c4:	f7fb fa18 	bl	80005f8 <__aeabi_dmul>
 80051c8:	4b08      	ldr	r3, [pc, #32]	@ (80051ec <_dtoa_r+0x58c>)
 80051ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80051ce:	2200      	movs	r2, #0
 80051d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051d4:	f7fb fa10 	bl	80005f8 <__aeabi_dmul>
 80051d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051dc:	e7c4      	b.n	8005168 <_dtoa_r+0x508>
 80051de:	bf00      	nop
 80051e0:	080069b0 	.word	0x080069b0
 80051e4:	08006988 	.word	0x08006988
 80051e8:	3ff00000 	.word	0x3ff00000
 80051ec:	40240000 	.word	0x40240000
 80051f0:	401c0000 	.word	0x401c0000
 80051f4:	40140000 	.word	0x40140000
 80051f8:	3fe00000 	.word	0x3fe00000
 80051fc:	4631      	mov	r1, r6
 80051fe:	4628      	mov	r0, r5
 8005200:	f7fb f9fa 	bl	80005f8 <__aeabi_dmul>
 8005204:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005208:	9413      	str	r4, [sp, #76]	@ 0x4c
 800520a:	4656      	mov	r6, sl
 800520c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005210:	f7fb fca2 	bl	8000b58 <__aeabi_d2iz>
 8005214:	4605      	mov	r5, r0
 8005216:	f7fb f985 	bl	8000524 <__aeabi_i2d>
 800521a:	4602      	mov	r2, r0
 800521c:	460b      	mov	r3, r1
 800521e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005222:	f7fb f831 	bl	8000288 <__aeabi_dsub>
 8005226:	3530      	adds	r5, #48	@ 0x30
 8005228:	f806 5b01 	strb.w	r5, [r6], #1
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	42a6      	cmp	r6, r4
 8005232:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005236:	f04f 0200 	mov.w	r2, #0
 800523a:	d124      	bne.n	8005286 <_dtoa_r+0x626>
 800523c:	4baf      	ldr	r3, [pc, #700]	@ (80054fc <_dtoa_r+0x89c>)
 800523e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005242:	f7fb f823 	bl	800028c <__adddf3>
 8005246:	4602      	mov	r2, r0
 8005248:	460b      	mov	r3, r1
 800524a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800524e:	f7fb fc63 	bl	8000b18 <__aeabi_dcmpgt>
 8005252:	2800      	cmp	r0, #0
 8005254:	d163      	bne.n	800531e <_dtoa_r+0x6be>
 8005256:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800525a:	49a8      	ldr	r1, [pc, #672]	@ (80054fc <_dtoa_r+0x89c>)
 800525c:	2000      	movs	r0, #0
 800525e:	f7fb f813 	bl	8000288 <__aeabi_dsub>
 8005262:	4602      	mov	r2, r0
 8005264:	460b      	mov	r3, r1
 8005266:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800526a:	f7fb fc37 	bl	8000adc <__aeabi_dcmplt>
 800526e:	2800      	cmp	r0, #0
 8005270:	f43f af14 	beq.w	800509c <_dtoa_r+0x43c>
 8005274:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005276:	1e73      	subs	r3, r6, #1
 8005278:	9313      	str	r3, [sp, #76]	@ 0x4c
 800527a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800527e:	2b30      	cmp	r3, #48	@ 0x30
 8005280:	d0f8      	beq.n	8005274 <_dtoa_r+0x614>
 8005282:	4647      	mov	r7, r8
 8005284:	e03b      	b.n	80052fe <_dtoa_r+0x69e>
 8005286:	4b9e      	ldr	r3, [pc, #632]	@ (8005500 <_dtoa_r+0x8a0>)
 8005288:	f7fb f9b6 	bl	80005f8 <__aeabi_dmul>
 800528c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005290:	e7bc      	b.n	800520c <_dtoa_r+0x5ac>
 8005292:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005296:	4656      	mov	r6, sl
 8005298:	e9dd 2300 	ldrd	r2, r3, [sp]
 800529c:	4620      	mov	r0, r4
 800529e:	4629      	mov	r1, r5
 80052a0:	f7fb fad4 	bl	800084c <__aeabi_ddiv>
 80052a4:	f7fb fc58 	bl	8000b58 <__aeabi_d2iz>
 80052a8:	4680      	mov	r8, r0
 80052aa:	f7fb f93b 	bl	8000524 <__aeabi_i2d>
 80052ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80052b2:	f7fb f9a1 	bl	80005f8 <__aeabi_dmul>
 80052b6:	4602      	mov	r2, r0
 80052b8:	460b      	mov	r3, r1
 80052ba:	4620      	mov	r0, r4
 80052bc:	4629      	mov	r1, r5
 80052be:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80052c2:	f7fa ffe1 	bl	8000288 <__aeabi_dsub>
 80052c6:	f806 4b01 	strb.w	r4, [r6], #1
 80052ca:	9d03      	ldr	r5, [sp, #12]
 80052cc:	eba6 040a 	sub.w	r4, r6, sl
 80052d0:	42a5      	cmp	r5, r4
 80052d2:	4602      	mov	r2, r0
 80052d4:	460b      	mov	r3, r1
 80052d6:	d133      	bne.n	8005340 <_dtoa_r+0x6e0>
 80052d8:	f7fa ffd8 	bl	800028c <__adddf3>
 80052dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80052e0:	4604      	mov	r4, r0
 80052e2:	460d      	mov	r5, r1
 80052e4:	f7fb fc18 	bl	8000b18 <__aeabi_dcmpgt>
 80052e8:	b9c0      	cbnz	r0, 800531c <_dtoa_r+0x6bc>
 80052ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80052ee:	4620      	mov	r0, r4
 80052f0:	4629      	mov	r1, r5
 80052f2:	f7fb fbe9 	bl	8000ac8 <__aeabi_dcmpeq>
 80052f6:	b110      	cbz	r0, 80052fe <_dtoa_r+0x69e>
 80052f8:	f018 0f01 	tst.w	r8, #1
 80052fc:	d10e      	bne.n	800531c <_dtoa_r+0x6bc>
 80052fe:	9902      	ldr	r1, [sp, #8]
 8005300:	4648      	mov	r0, r9
 8005302:	f000 fbbd 	bl	8005a80 <_Bfree>
 8005306:	2300      	movs	r3, #0
 8005308:	7033      	strb	r3, [r6, #0]
 800530a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800530c:	3701      	adds	r7, #1
 800530e:	601f      	str	r7, [r3, #0]
 8005310:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005312:	2b00      	cmp	r3, #0
 8005314:	f000 824b 	beq.w	80057ae <_dtoa_r+0xb4e>
 8005318:	601e      	str	r6, [r3, #0]
 800531a:	e248      	b.n	80057ae <_dtoa_r+0xb4e>
 800531c:	46b8      	mov	r8, r7
 800531e:	4633      	mov	r3, r6
 8005320:	461e      	mov	r6, r3
 8005322:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005326:	2a39      	cmp	r2, #57	@ 0x39
 8005328:	d106      	bne.n	8005338 <_dtoa_r+0x6d8>
 800532a:	459a      	cmp	sl, r3
 800532c:	d1f8      	bne.n	8005320 <_dtoa_r+0x6c0>
 800532e:	2230      	movs	r2, #48	@ 0x30
 8005330:	f108 0801 	add.w	r8, r8, #1
 8005334:	f88a 2000 	strb.w	r2, [sl]
 8005338:	781a      	ldrb	r2, [r3, #0]
 800533a:	3201      	adds	r2, #1
 800533c:	701a      	strb	r2, [r3, #0]
 800533e:	e7a0      	b.n	8005282 <_dtoa_r+0x622>
 8005340:	4b6f      	ldr	r3, [pc, #444]	@ (8005500 <_dtoa_r+0x8a0>)
 8005342:	2200      	movs	r2, #0
 8005344:	f7fb f958 	bl	80005f8 <__aeabi_dmul>
 8005348:	2200      	movs	r2, #0
 800534a:	2300      	movs	r3, #0
 800534c:	4604      	mov	r4, r0
 800534e:	460d      	mov	r5, r1
 8005350:	f7fb fbba 	bl	8000ac8 <__aeabi_dcmpeq>
 8005354:	2800      	cmp	r0, #0
 8005356:	d09f      	beq.n	8005298 <_dtoa_r+0x638>
 8005358:	e7d1      	b.n	80052fe <_dtoa_r+0x69e>
 800535a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800535c:	2a00      	cmp	r2, #0
 800535e:	f000 80ea 	beq.w	8005536 <_dtoa_r+0x8d6>
 8005362:	9a07      	ldr	r2, [sp, #28]
 8005364:	2a01      	cmp	r2, #1
 8005366:	f300 80cd 	bgt.w	8005504 <_dtoa_r+0x8a4>
 800536a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800536c:	2a00      	cmp	r2, #0
 800536e:	f000 80c1 	beq.w	80054f4 <_dtoa_r+0x894>
 8005372:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005376:	9c08      	ldr	r4, [sp, #32]
 8005378:	9e00      	ldr	r6, [sp, #0]
 800537a:	9a00      	ldr	r2, [sp, #0]
 800537c:	441a      	add	r2, r3
 800537e:	9200      	str	r2, [sp, #0]
 8005380:	9a06      	ldr	r2, [sp, #24]
 8005382:	2101      	movs	r1, #1
 8005384:	441a      	add	r2, r3
 8005386:	4648      	mov	r0, r9
 8005388:	9206      	str	r2, [sp, #24]
 800538a:	f000 fc2d 	bl	8005be8 <__i2b>
 800538e:	4605      	mov	r5, r0
 8005390:	b166      	cbz	r6, 80053ac <_dtoa_r+0x74c>
 8005392:	9b06      	ldr	r3, [sp, #24]
 8005394:	2b00      	cmp	r3, #0
 8005396:	dd09      	ble.n	80053ac <_dtoa_r+0x74c>
 8005398:	42b3      	cmp	r3, r6
 800539a:	9a00      	ldr	r2, [sp, #0]
 800539c:	bfa8      	it	ge
 800539e:	4633      	movge	r3, r6
 80053a0:	1ad2      	subs	r2, r2, r3
 80053a2:	9200      	str	r2, [sp, #0]
 80053a4:	9a06      	ldr	r2, [sp, #24]
 80053a6:	1af6      	subs	r6, r6, r3
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	9306      	str	r3, [sp, #24]
 80053ac:	9b08      	ldr	r3, [sp, #32]
 80053ae:	b30b      	cbz	r3, 80053f4 <_dtoa_r+0x794>
 80053b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f000 80c6 	beq.w	8005544 <_dtoa_r+0x8e4>
 80053b8:	2c00      	cmp	r4, #0
 80053ba:	f000 80c0 	beq.w	800553e <_dtoa_r+0x8de>
 80053be:	4629      	mov	r1, r5
 80053c0:	4622      	mov	r2, r4
 80053c2:	4648      	mov	r0, r9
 80053c4:	f000 fcc8 	bl	8005d58 <__pow5mult>
 80053c8:	9a02      	ldr	r2, [sp, #8]
 80053ca:	4601      	mov	r1, r0
 80053cc:	4605      	mov	r5, r0
 80053ce:	4648      	mov	r0, r9
 80053d0:	f000 fc20 	bl	8005c14 <__multiply>
 80053d4:	9902      	ldr	r1, [sp, #8]
 80053d6:	4680      	mov	r8, r0
 80053d8:	4648      	mov	r0, r9
 80053da:	f000 fb51 	bl	8005a80 <_Bfree>
 80053de:	9b08      	ldr	r3, [sp, #32]
 80053e0:	1b1b      	subs	r3, r3, r4
 80053e2:	9308      	str	r3, [sp, #32]
 80053e4:	f000 80b1 	beq.w	800554a <_dtoa_r+0x8ea>
 80053e8:	9a08      	ldr	r2, [sp, #32]
 80053ea:	4641      	mov	r1, r8
 80053ec:	4648      	mov	r0, r9
 80053ee:	f000 fcb3 	bl	8005d58 <__pow5mult>
 80053f2:	9002      	str	r0, [sp, #8]
 80053f4:	2101      	movs	r1, #1
 80053f6:	4648      	mov	r0, r9
 80053f8:	f000 fbf6 	bl	8005be8 <__i2b>
 80053fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80053fe:	4604      	mov	r4, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 81d8 	beq.w	80057b6 <_dtoa_r+0xb56>
 8005406:	461a      	mov	r2, r3
 8005408:	4601      	mov	r1, r0
 800540a:	4648      	mov	r0, r9
 800540c:	f000 fca4 	bl	8005d58 <__pow5mult>
 8005410:	9b07      	ldr	r3, [sp, #28]
 8005412:	2b01      	cmp	r3, #1
 8005414:	4604      	mov	r4, r0
 8005416:	f300 809f 	bgt.w	8005558 <_dtoa_r+0x8f8>
 800541a:	9b04      	ldr	r3, [sp, #16]
 800541c:	2b00      	cmp	r3, #0
 800541e:	f040 8097 	bne.w	8005550 <_dtoa_r+0x8f0>
 8005422:	9b05      	ldr	r3, [sp, #20]
 8005424:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005428:	2b00      	cmp	r3, #0
 800542a:	f040 8093 	bne.w	8005554 <_dtoa_r+0x8f4>
 800542e:	9b05      	ldr	r3, [sp, #20]
 8005430:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005434:	0d1b      	lsrs	r3, r3, #20
 8005436:	051b      	lsls	r3, r3, #20
 8005438:	b133      	cbz	r3, 8005448 <_dtoa_r+0x7e8>
 800543a:	9b00      	ldr	r3, [sp, #0]
 800543c:	3301      	adds	r3, #1
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	9b06      	ldr	r3, [sp, #24]
 8005442:	3301      	adds	r3, #1
 8005444:	9306      	str	r3, [sp, #24]
 8005446:	2301      	movs	r3, #1
 8005448:	9308      	str	r3, [sp, #32]
 800544a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800544c:	2b00      	cmp	r3, #0
 800544e:	f000 81b8 	beq.w	80057c2 <_dtoa_r+0xb62>
 8005452:	6923      	ldr	r3, [r4, #16]
 8005454:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005458:	6918      	ldr	r0, [r3, #16]
 800545a:	f000 fb79 	bl	8005b50 <__hi0bits>
 800545e:	f1c0 0020 	rsb	r0, r0, #32
 8005462:	9b06      	ldr	r3, [sp, #24]
 8005464:	4418      	add	r0, r3
 8005466:	f010 001f 	ands.w	r0, r0, #31
 800546a:	f000 8082 	beq.w	8005572 <_dtoa_r+0x912>
 800546e:	f1c0 0320 	rsb	r3, r0, #32
 8005472:	2b04      	cmp	r3, #4
 8005474:	dd73      	ble.n	800555e <_dtoa_r+0x8fe>
 8005476:	9b00      	ldr	r3, [sp, #0]
 8005478:	f1c0 001c 	rsb	r0, r0, #28
 800547c:	4403      	add	r3, r0
 800547e:	9300      	str	r3, [sp, #0]
 8005480:	9b06      	ldr	r3, [sp, #24]
 8005482:	4403      	add	r3, r0
 8005484:	4406      	add	r6, r0
 8005486:	9306      	str	r3, [sp, #24]
 8005488:	9b00      	ldr	r3, [sp, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	dd05      	ble.n	800549a <_dtoa_r+0x83a>
 800548e:	9902      	ldr	r1, [sp, #8]
 8005490:	461a      	mov	r2, r3
 8005492:	4648      	mov	r0, r9
 8005494:	f000 fcba 	bl	8005e0c <__lshift>
 8005498:	9002      	str	r0, [sp, #8]
 800549a:	9b06      	ldr	r3, [sp, #24]
 800549c:	2b00      	cmp	r3, #0
 800549e:	dd05      	ble.n	80054ac <_dtoa_r+0x84c>
 80054a0:	4621      	mov	r1, r4
 80054a2:	461a      	mov	r2, r3
 80054a4:	4648      	mov	r0, r9
 80054a6:	f000 fcb1 	bl	8005e0c <__lshift>
 80054aa:	4604      	mov	r4, r0
 80054ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d061      	beq.n	8005576 <_dtoa_r+0x916>
 80054b2:	9802      	ldr	r0, [sp, #8]
 80054b4:	4621      	mov	r1, r4
 80054b6:	f000 fd15 	bl	8005ee4 <__mcmp>
 80054ba:	2800      	cmp	r0, #0
 80054bc:	da5b      	bge.n	8005576 <_dtoa_r+0x916>
 80054be:	2300      	movs	r3, #0
 80054c0:	9902      	ldr	r1, [sp, #8]
 80054c2:	220a      	movs	r2, #10
 80054c4:	4648      	mov	r0, r9
 80054c6:	f000 fafd 	bl	8005ac4 <__multadd>
 80054ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054cc:	9002      	str	r0, [sp, #8]
 80054ce:	f107 38ff 	add.w	r8, r7, #4294967295
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f000 8177 	beq.w	80057c6 <_dtoa_r+0xb66>
 80054d8:	4629      	mov	r1, r5
 80054da:	2300      	movs	r3, #0
 80054dc:	220a      	movs	r2, #10
 80054de:	4648      	mov	r0, r9
 80054e0:	f000 faf0 	bl	8005ac4 <__multadd>
 80054e4:	f1bb 0f00 	cmp.w	fp, #0
 80054e8:	4605      	mov	r5, r0
 80054ea:	dc6f      	bgt.n	80055cc <_dtoa_r+0x96c>
 80054ec:	9b07      	ldr	r3, [sp, #28]
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	dc49      	bgt.n	8005586 <_dtoa_r+0x926>
 80054f2:	e06b      	b.n	80055cc <_dtoa_r+0x96c>
 80054f4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80054f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80054fa:	e73c      	b.n	8005376 <_dtoa_r+0x716>
 80054fc:	3fe00000 	.word	0x3fe00000
 8005500:	40240000 	.word	0x40240000
 8005504:	9b03      	ldr	r3, [sp, #12]
 8005506:	1e5c      	subs	r4, r3, #1
 8005508:	9b08      	ldr	r3, [sp, #32]
 800550a:	42a3      	cmp	r3, r4
 800550c:	db09      	blt.n	8005522 <_dtoa_r+0x8c2>
 800550e:	1b1c      	subs	r4, r3, r4
 8005510:	9b03      	ldr	r3, [sp, #12]
 8005512:	2b00      	cmp	r3, #0
 8005514:	f6bf af30 	bge.w	8005378 <_dtoa_r+0x718>
 8005518:	9b00      	ldr	r3, [sp, #0]
 800551a:	9a03      	ldr	r2, [sp, #12]
 800551c:	1a9e      	subs	r6, r3, r2
 800551e:	2300      	movs	r3, #0
 8005520:	e72b      	b.n	800537a <_dtoa_r+0x71a>
 8005522:	9b08      	ldr	r3, [sp, #32]
 8005524:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005526:	9408      	str	r4, [sp, #32]
 8005528:	1ae3      	subs	r3, r4, r3
 800552a:	441a      	add	r2, r3
 800552c:	9e00      	ldr	r6, [sp, #0]
 800552e:	9b03      	ldr	r3, [sp, #12]
 8005530:	920d      	str	r2, [sp, #52]	@ 0x34
 8005532:	2400      	movs	r4, #0
 8005534:	e721      	b.n	800537a <_dtoa_r+0x71a>
 8005536:	9c08      	ldr	r4, [sp, #32]
 8005538:	9e00      	ldr	r6, [sp, #0]
 800553a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800553c:	e728      	b.n	8005390 <_dtoa_r+0x730>
 800553e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005542:	e751      	b.n	80053e8 <_dtoa_r+0x788>
 8005544:	9a08      	ldr	r2, [sp, #32]
 8005546:	9902      	ldr	r1, [sp, #8]
 8005548:	e750      	b.n	80053ec <_dtoa_r+0x78c>
 800554a:	f8cd 8008 	str.w	r8, [sp, #8]
 800554e:	e751      	b.n	80053f4 <_dtoa_r+0x794>
 8005550:	2300      	movs	r3, #0
 8005552:	e779      	b.n	8005448 <_dtoa_r+0x7e8>
 8005554:	9b04      	ldr	r3, [sp, #16]
 8005556:	e777      	b.n	8005448 <_dtoa_r+0x7e8>
 8005558:	2300      	movs	r3, #0
 800555a:	9308      	str	r3, [sp, #32]
 800555c:	e779      	b.n	8005452 <_dtoa_r+0x7f2>
 800555e:	d093      	beq.n	8005488 <_dtoa_r+0x828>
 8005560:	9a00      	ldr	r2, [sp, #0]
 8005562:	331c      	adds	r3, #28
 8005564:	441a      	add	r2, r3
 8005566:	9200      	str	r2, [sp, #0]
 8005568:	9a06      	ldr	r2, [sp, #24]
 800556a:	441a      	add	r2, r3
 800556c:	441e      	add	r6, r3
 800556e:	9206      	str	r2, [sp, #24]
 8005570:	e78a      	b.n	8005488 <_dtoa_r+0x828>
 8005572:	4603      	mov	r3, r0
 8005574:	e7f4      	b.n	8005560 <_dtoa_r+0x900>
 8005576:	9b03      	ldr	r3, [sp, #12]
 8005578:	2b00      	cmp	r3, #0
 800557a:	46b8      	mov	r8, r7
 800557c:	dc20      	bgt.n	80055c0 <_dtoa_r+0x960>
 800557e:	469b      	mov	fp, r3
 8005580:	9b07      	ldr	r3, [sp, #28]
 8005582:	2b02      	cmp	r3, #2
 8005584:	dd1e      	ble.n	80055c4 <_dtoa_r+0x964>
 8005586:	f1bb 0f00 	cmp.w	fp, #0
 800558a:	f47f adb1 	bne.w	80050f0 <_dtoa_r+0x490>
 800558e:	4621      	mov	r1, r4
 8005590:	465b      	mov	r3, fp
 8005592:	2205      	movs	r2, #5
 8005594:	4648      	mov	r0, r9
 8005596:	f000 fa95 	bl	8005ac4 <__multadd>
 800559a:	4601      	mov	r1, r0
 800559c:	4604      	mov	r4, r0
 800559e:	9802      	ldr	r0, [sp, #8]
 80055a0:	f000 fca0 	bl	8005ee4 <__mcmp>
 80055a4:	2800      	cmp	r0, #0
 80055a6:	f77f ada3 	ble.w	80050f0 <_dtoa_r+0x490>
 80055aa:	4656      	mov	r6, sl
 80055ac:	2331      	movs	r3, #49	@ 0x31
 80055ae:	f806 3b01 	strb.w	r3, [r6], #1
 80055b2:	f108 0801 	add.w	r8, r8, #1
 80055b6:	e59f      	b.n	80050f8 <_dtoa_r+0x498>
 80055b8:	9c03      	ldr	r4, [sp, #12]
 80055ba:	46b8      	mov	r8, r7
 80055bc:	4625      	mov	r5, r4
 80055be:	e7f4      	b.n	80055aa <_dtoa_r+0x94a>
 80055c0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80055c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f000 8101 	beq.w	80057ce <_dtoa_r+0xb6e>
 80055cc:	2e00      	cmp	r6, #0
 80055ce:	dd05      	ble.n	80055dc <_dtoa_r+0x97c>
 80055d0:	4629      	mov	r1, r5
 80055d2:	4632      	mov	r2, r6
 80055d4:	4648      	mov	r0, r9
 80055d6:	f000 fc19 	bl	8005e0c <__lshift>
 80055da:	4605      	mov	r5, r0
 80055dc:	9b08      	ldr	r3, [sp, #32]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d05c      	beq.n	800569c <_dtoa_r+0xa3c>
 80055e2:	6869      	ldr	r1, [r5, #4]
 80055e4:	4648      	mov	r0, r9
 80055e6:	f000 fa0b 	bl	8005a00 <_Balloc>
 80055ea:	4606      	mov	r6, r0
 80055ec:	b928      	cbnz	r0, 80055fa <_dtoa_r+0x99a>
 80055ee:	4b82      	ldr	r3, [pc, #520]	@ (80057f8 <_dtoa_r+0xb98>)
 80055f0:	4602      	mov	r2, r0
 80055f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80055f6:	f7ff bb4a 	b.w	8004c8e <_dtoa_r+0x2e>
 80055fa:	692a      	ldr	r2, [r5, #16]
 80055fc:	3202      	adds	r2, #2
 80055fe:	0092      	lsls	r2, r2, #2
 8005600:	f105 010c 	add.w	r1, r5, #12
 8005604:	300c      	adds	r0, #12
 8005606:	f000 fff7 	bl	80065f8 <memcpy>
 800560a:	2201      	movs	r2, #1
 800560c:	4631      	mov	r1, r6
 800560e:	4648      	mov	r0, r9
 8005610:	f000 fbfc 	bl	8005e0c <__lshift>
 8005614:	f10a 0301 	add.w	r3, sl, #1
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	eb0a 030b 	add.w	r3, sl, fp
 800561e:	9308      	str	r3, [sp, #32]
 8005620:	9b04      	ldr	r3, [sp, #16]
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	462f      	mov	r7, r5
 8005628:	9306      	str	r3, [sp, #24]
 800562a:	4605      	mov	r5, r0
 800562c:	9b00      	ldr	r3, [sp, #0]
 800562e:	9802      	ldr	r0, [sp, #8]
 8005630:	4621      	mov	r1, r4
 8005632:	f103 3bff 	add.w	fp, r3, #4294967295
 8005636:	f7ff fa8a 	bl	8004b4e <quorem>
 800563a:	4603      	mov	r3, r0
 800563c:	3330      	adds	r3, #48	@ 0x30
 800563e:	9003      	str	r0, [sp, #12]
 8005640:	4639      	mov	r1, r7
 8005642:	9802      	ldr	r0, [sp, #8]
 8005644:	9309      	str	r3, [sp, #36]	@ 0x24
 8005646:	f000 fc4d 	bl	8005ee4 <__mcmp>
 800564a:	462a      	mov	r2, r5
 800564c:	9004      	str	r0, [sp, #16]
 800564e:	4621      	mov	r1, r4
 8005650:	4648      	mov	r0, r9
 8005652:	f000 fc63 	bl	8005f1c <__mdiff>
 8005656:	68c2      	ldr	r2, [r0, #12]
 8005658:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800565a:	4606      	mov	r6, r0
 800565c:	bb02      	cbnz	r2, 80056a0 <_dtoa_r+0xa40>
 800565e:	4601      	mov	r1, r0
 8005660:	9802      	ldr	r0, [sp, #8]
 8005662:	f000 fc3f 	bl	8005ee4 <__mcmp>
 8005666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005668:	4602      	mov	r2, r0
 800566a:	4631      	mov	r1, r6
 800566c:	4648      	mov	r0, r9
 800566e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005670:	9309      	str	r3, [sp, #36]	@ 0x24
 8005672:	f000 fa05 	bl	8005a80 <_Bfree>
 8005676:	9b07      	ldr	r3, [sp, #28]
 8005678:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800567a:	9e00      	ldr	r6, [sp, #0]
 800567c:	ea42 0103 	orr.w	r1, r2, r3
 8005680:	9b06      	ldr	r3, [sp, #24]
 8005682:	4319      	orrs	r1, r3
 8005684:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005686:	d10d      	bne.n	80056a4 <_dtoa_r+0xa44>
 8005688:	2b39      	cmp	r3, #57	@ 0x39
 800568a:	d027      	beq.n	80056dc <_dtoa_r+0xa7c>
 800568c:	9a04      	ldr	r2, [sp, #16]
 800568e:	2a00      	cmp	r2, #0
 8005690:	dd01      	ble.n	8005696 <_dtoa_r+0xa36>
 8005692:	9b03      	ldr	r3, [sp, #12]
 8005694:	3331      	adds	r3, #49	@ 0x31
 8005696:	f88b 3000 	strb.w	r3, [fp]
 800569a:	e52e      	b.n	80050fa <_dtoa_r+0x49a>
 800569c:	4628      	mov	r0, r5
 800569e:	e7b9      	b.n	8005614 <_dtoa_r+0x9b4>
 80056a0:	2201      	movs	r2, #1
 80056a2:	e7e2      	b.n	800566a <_dtoa_r+0xa0a>
 80056a4:	9904      	ldr	r1, [sp, #16]
 80056a6:	2900      	cmp	r1, #0
 80056a8:	db04      	blt.n	80056b4 <_dtoa_r+0xa54>
 80056aa:	9807      	ldr	r0, [sp, #28]
 80056ac:	4301      	orrs	r1, r0
 80056ae:	9806      	ldr	r0, [sp, #24]
 80056b0:	4301      	orrs	r1, r0
 80056b2:	d120      	bne.n	80056f6 <_dtoa_r+0xa96>
 80056b4:	2a00      	cmp	r2, #0
 80056b6:	ddee      	ble.n	8005696 <_dtoa_r+0xa36>
 80056b8:	9902      	ldr	r1, [sp, #8]
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	2201      	movs	r2, #1
 80056be:	4648      	mov	r0, r9
 80056c0:	f000 fba4 	bl	8005e0c <__lshift>
 80056c4:	4621      	mov	r1, r4
 80056c6:	9002      	str	r0, [sp, #8]
 80056c8:	f000 fc0c 	bl	8005ee4 <__mcmp>
 80056cc:	2800      	cmp	r0, #0
 80056ce:	9b00      	ldr	r3, [sp, #0]
 80056d0:	dc02      	bgt.n	80056d8 <_dtoa_r+0xa78>
 80056d2:	d1e0      	bne.n	8005696 <_dtoa_r+0xa36>
 80056d4:	07da      	lsls	r2, r3, #31
 80056d6:	d5de      	bpl.n	8005696 <_dtoa_r+0xa36>
 80056d8:	2b39      	cmp	r3, #57	@ 0x39
 80056da:	d1da      	bne.n	8005692 <_dtoa_r+0xa32>
 80056dc:	2339      	movs	r3, #57	@ 0x39
 80056de:	f88b 3000 	strb.w	r3, [fp]
 80056e2:	4633      	mov	r3, r6
 80056e4:	461e      	mov	r6, r3
 80056e6:	3b01      	subs	r3, #1
 80056e8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80056ec:	2a39      	cmp	r2, #57	@ 0x39
 80056ee:	d04e      	beq.n	800578e <_dtoa_r+0xb2e>
 80056f0:	3201      	adds	r2, #1
 80056f2:	701a      	strb	r2, [r3, #0]
 80056f4:	e501      	b.n	80050fa <_dtoa_r+0x49a>
 80056f6:	2a00      	cmp	r2, #0
 80056f8:	dd03      	ble.n	8005702 <_dtoa_r+0xaa2>
 80056fa:	2b39      	cmp	r3, #57	@ 0x39
 80056fc:	d0ee      	beq.n	80056dc <_dtoa_r+0xa7c>
 80056fe:	3301      	adds	r3, #1
 8005700:	e7c9      	b.n	8005696 <_dtoa_r+0xa36>
 8005702:	9a00      	ldr	r2, [sp, #0]
 8005704:	9908      	ldr	r1, [sp, #32]
 8005706:	f802 3c01 	strb.w	r3, [r2, #-1]
 800570a:	428a      	cmp	r2, r1
 800570c:	d028      	beq.n	8005760 <_dtoa_r+0xb00>
 800570e:	9902      	ldr	r1, [sp, #8]
 8005710:	2300      	movs	r3, #0
 8005712:	220a      	movs	r2, #10
 8005714:	4648      	mov	r0, r9
 8005716:	f000 f9d5 	bl	8005ac4 <__multadd>
 800571a:	42af      	cmp	r7, r5
 800571c:	9002      	str	r0, [sp, #8]
 800571e:	f04f 0300 	mov.w	r3, #0
 8005722:	f04f 020a 	mov.w	r2, #10
 8005726:	4639      	mov	r1, r7
 8005728:	4648      	mov	r0, r9
 800572a:	d107      	bne.n	800573c <_dtoa_r+0xadc>
 800572c:	f000 f9ca 	bl	8005ac4 <__multadd>
 8005730:	4607      	mov	r7, r0
 8005732:	4605      	mov	r5, r0
 8005734:	9b00      	ldr	r3, [sp, #0]
 8005736:	3301      	adds	r3, #1
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	e777      	b.n	800562c <_dtoa_r+0x9cc>
 800573c:	f000 f9c2 	bl	8005ac4 <__multadd>
 8005740:	4629      	mov	r1, r5
 8005742:	4607      	mov	r7, r0
 8005744:	2300      	movs	r3, #0
 8005746:	220a      	movs	r2, #10
 8005748:	4648      	mov	r0, r9
 800574a:	f000 f9bb 	bl	8005ac4 <__multadd>
 800574e:	4605      	mov	r5, r0
 8005750:	e7f0      	b.n	8005734 <_dtoa_r+0xad4>
 8005752:	f1bb 0f00 	cmp.w	fp, #0
 8005756:	bfcc      	ite	gt
 8005758:	465e      	movgt	r6, fp
 800575a:	2601      	movle	r6, #1
 800575c:	4456      	add	r6, sl
 800575e:	2700      	movs	r7, #0
 8005760:	9902      	ldr	r1, [sp, #8]
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	2201      	movs	r2, #1
 8005766:	4648      	mov	r0, r9
 8005768:	f000 fb50 	bl	8005e0c <__lshift>
 800576c:	4621      	mov	r1, r4
 800576e:	9002      	str	r0, [sp, #8]
 8005770:	f000 fbb8 	bl	8005ee4 <__mcmp>
 8005774:	2800      	cmp	r0, #0
 8005776:	dcb4      	bgt.n	80056e2 <_dtoa_r+0xa82>
 8005778:	d102      	bne.n	8005780 <_dtoa_r+0xb20>
 800577a:	9b00      	ldr	r3, [sp, #0]
 800577c:	07db      	lsls	r3, r3, #31
 800577e:	d4b0      	bmi.n	80056e2 <_dtoa_r+0xa82>
 8005780:	4633      	mov	r3, r6
 8005782:	461e      	mov	r6, r3
 8005784:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005788:	2a30      	cmp	r2, #48	@ 0x30
 800578a:	d0fa      	beq.n	8005782 <_dtoa_r+0xb22>
 800578c:	e4b5      	b.n	80050fa <_dtoa_r+0x49a>
 800578e:	459a      	cmp	sl, r3
 8005790:	d1a8      	bne.n	80056e4 <_dtoa_r+0xa84>
 8005792:	2331      	movs	r3, #49	@ 0x31
 8005794:	f108 0801 	add.w	r8, r8, #1
 8005798:	f88a 3000 	strb.w	r3, [sl]
 800579c:	e4ad      	b.n	80050fa <_dtoa_r+0x49a>
 800579e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80057a0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80057fc <_dtoa_r+0xb9c>
 80057a4:	b11b      	cbz	r3, 80057ae <_dtoa_r+0xb4e>
 80057a6:	f10a 0308 	add.w	r3, sl, #8
 80057aa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80057ac:	6013      	str	r3, [r2, #0]
 80057ae:	4650      	mov	r0, sl
 80057b0:	b017      	add	sp, #92	@ 0x5c
 80057b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057b6:	9b07      	ldr	r3, [sp, #28]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	f77f ae2e 	ble.w	800541a <_dtoa_r+0x7ba>
 80057be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80057c0:	9308      	str	r3, [sp, #32]
 80057c2:	2001      	movs	r0, #1
 80057c4:	e64d      	b.n	8005462 <_dtoa_r+0x802>
 80057c6:	f1bb 0f00 	cmp.w	fp, #0
 80057ca:	f77f aed9 	ble.w	8005580 <_dtoa_r+0x920>
 80057ce:	4656      	mov	r6, sl
 80057d0:	9802      	ldr	r0, [sp, #8]
 80057d2:	4621      	mov	r1, r4
 80057d4:	f7ff f9bb 	bl	8004b4e <quorem>
 80057d8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80057dc:	f806 3b01 	strb.w	r3, [r6], #1
 80057e0:	eba6 020a 	sub.w	r2, r6, sl
 80057e4:	4593      	cmp	fp, r2
 80057e6:	ddb4      	ble.n	8005752 <_dtoa_r+0xaf2>
 80057e8:	9902      	ldr	r1, [sp, #8]
 80057ea:	2300      	movs	r3, #0
 80057ec:	220a      	movs	r2, #10
 80057ee:	4648      	mov	r0, r9
 80057f0:	f000 f968 	bl	8005ac4 <__multadd>
 80057f4:	9002      	str	r0, [sp, #8]
 80057f6:	e7eb      	b.n	80057d0 <_dtoa_r+0xb70>
 80057f8:	080068b4 	.word	0x080068b4
 80057fc:	08006838 	.word	0x08006838

08005800 <_free_r>:
 8005800:	b538      	push	{r3, r4, r5, lr}
 8005802:	4605      	mov	r5, r0
 8005804:	2900      	cmp	r1, #0
 8005806:	d041      	beq.n	800588c <_free_r+0x8c>
 8005808:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800580c:	1f0c      	subs	r4, r1, #4
 800580e:	2b00      	cmp	r3, #0
 8005810:	bfb8      	it	lt
 8005812:	18e4      	addlt	r4, r4, r3
 8005814:	f000 f8e8 	bl	80059e8 <__malloc_lock>
 8005818:	4a1d      	ldr	r2, [pc, #116]	@ (8005890 <_free_r+0x90>)
 800581a:	6813      	ldr	r3, [r2, #0]
 800581c:	b933      	cbnz	r3, 800582c <_free_r+0x2c>
 800581e:	6063      	str	r3, [r4, #4]
 8005820:	6014      	str	r4, [r2, #0]
 8005822:	4628      	mov	r0, r5
 8005824:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005828:	f000 b8e4 	b.w	80059f4 <__malloc_unlock>
 800582c:	42a3      	cmp	r3, r4
 800582e:	d908      	bls.n	8005842 <_free_r+0x42>
 8005830:	6820      	ldr	r0, [r4, #0]
 8005832:	1821      	adds	r1, r4, r0
 8005834:	428b      	cmp	r3, r1
 8005836:	bf01      	itttt	eq
 8005838:	6819      	ldreq	r1, [r3, #0]
 800583a:	685b      	ldreq	r3, [r3, #4]
 800583c:	1809      	addeq	r1, r1, r0
 800583e:	6021      	streq	r1, [r4, #0]
 8005840:	e7ed      	b.n	800581e <_free_r+0x1e>
 8005842:	461a      	mov	r2, r3
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	b10b      	cbz	r3, 800584c <_free_r+0x4c>
 8005848:	42a3      	cmp	r3, r4
 800584a:	d9fa      	bls.n	8005842 <_free_r+0x42>
 800584c:	6811      	ldr	r1, [r2, #0]
 800584e:	1850      	adds	r0, r2, r1
 8005850:	42a0      	cmp	r0, r4
 8005852:	d10b      	bne.n	800586c <_free_r+0x6c>
 8005854:	6820      	ldr	r0, [r4, #0]
 8005856:	4401      	add	r1, r0
 8005858:	1850      	adds	r0, r2, r1
 800585a:	4283      	cmp	r3, r0
 800585c:	6011      	str	r1, [r2, #0]
 800585e:	d1e0      	bne.n	8005822 <_free_r+0x22>
 8005860:	6818      	ldr	r0, [r3, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	6053      	str	r3, [r2, #4]
 8005866:	4408      	add	r0, r1
 8005868:	6010      	str	r0, [r2, #0]
 800586a:	e7da      	b.n	8005822 <_free_r+0x22>
 800586c:	d902      	bls.n	8005874 <_free_r+0x74>
 800586e:	230c      	movs	r3, #12
 8005870:	602b      	str	r3, [r5, #0]
 8005872:	e7d6      	b.n	8005822 <_free_r+0x22>
 8005874:	6820      	ldr	r0, [r4, #0]
 8005876:	1821      	adds	r1, r4, r0
 8005878:	428b      	cmp	r3, r1
 800587a:	bf04      	itt	eq
 800587c:	6819      	ldreq	r1, [r3, #0]
 800587e:	685b      	ldreq	r3, [r3, #4]
 8005880:	6063      	str	r3, [r4, #4]
 8005882:	bf04      	itt	eq
 8005884:	1809      	addeq	r1, r1, r0
 8005886:	6021      	streq	r1, [r4, #0]
 8005888:	6054      	str	r4, [r2, #4]
 800588a:	e7ca      	b.n	8005822 <_free_r+0x22>
 800588c:	bd38      	pop	{r3, r4, r5, pc}
 800588e:	bf00      	nop
 8005890:	20000390 	.word	0x20000390

08005894 <malloc>:
 8005894:	4b02      	ldr	r3, [pc, #8]	@ (80058a0 <malloc+0xc>)
 8005896:	4601      	mov	r1, r0
 8005898:	6818      	ldr	r0, [r3, #0]
 800589a:	f000 b825 	b.w	80058e8 <_malloc_r>
 800589e:	bf00      	nop
 80058a0:	20000018 	.word	0x20000018

080058a4 <sbrk_aligned>:
 80058a4:	b570      	push	{r4, r5, r6, lr}
 80058a6:	4e0f      	ldr	r6, [pc, #60]	@ (80058e4 <sbrk_aligned+0x40>)
 80058a8:	460c      	mov	r4, r1
 80058aa:	6831      	ldr	r1, [r6, #0]
 80058ac:	4605      	mov	r5, r0
 80058ae:	b911      	cbnz	r1, 80058b6 <sbrk_aligned+0x12>
 80058b0:	f000 fe92 	bl	80065d8 <_sbrk_r>
 80058b4:	6030      	str	r0, [r6, #0]
 80058b6:	4621      	mov	r1, r4
 80058b8:	4628      	mov	r0, r5
 80058ba:	f000 fe8d 	bl	80065d8 <_sbrk_r>
 80058be:	1c43      	adds	r3, r0, #1
 80058c0:	d103      	bne.n	80058ca <sbrk_aligned+0x26>
 80058c2:	f04f 34ff 	mov.w	r4, #4294967295
 80058c6:	4620      	mov	r0, r4
 80058c8:	bd70      	pop	{r4, r5, r6, pc}
 80058ca:	1cc4      	adds	r4, r0, #3
 80058cc:	f024 0403 	bic.w	r4, r4, #3
 80058d0:	42a0      	cmp	r0, r4
 80058d2:	d0f8      	beq.n	80058c6 <sbrk_aligned+0x22>
 80058d4:	1a21      	subs	r1, r4, r0
 80058d6:	4628      	mov	r0, r5
 80058d8:	f000 fe7e 	bl	80065d8 <_sbrk_r>
 80058dc:	3001      	adds	r0, #1
 80058de:	d1f2      	bne.n	80058c6 <sbrk_aligned+0x22>
 80058e0:	e7ef      	b.n	80058c2 <sbrk_aligned+0x1e>
 80058e2:	bf00      	nop
 80058e4:	2000038c 	.word	0x2000038c

080058e8 <_malloc_r>:
 80058e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058ec:	1ccd      	adds	r5, r1, #3
 80058ee:	f025 0503 	bic.w	r5, r5, #3
 80058f2:	3508      	adds	r5, #8
 80058f4:	2d0c      	cmp	r5, #12
 80058f6:	bf38      	it	cc
 80058f8:	250c      	movcc	r5, #12
 80058fa:	2d00      	cmp	r5, #0
 80058fc:	4606      	mov	r6, r0
 80058fe:	db01      	blt.n	8005904 <_malloc_r+0x1c>
 8005900:	42a9      	cmp	r1, r5
 8005902:	d904      	bls.n	800590e <_malloc_r+0x26>
 8005904:	230c      	movs	r3, #12
 8005906:	6033      	str	r3, [r6, #0]
 8005908:	2000      	movs	r0, #0
 800590a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800590e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80059e4 <_malloc_r+0xfc>
 8005912:	f000 f869 	bl	80059e8 <__malloc_lock>
 8005916:	f8d8 3000 	ldr.w	r3, [r8]
 800591a:	461c      	mov	r4, r3
 800591c:	bb44      	cbnz	r4, 8005970 <_malloc_r+0x88>
 800591e:	4629      	mov	r1, r5
 8005920:	4630      	mov	r0, r6
 8005922:	f7ff ffbf 	bl	80058a4 <sbrk_aligned>
 8005926:	1c43      	adds	r3, r0, #1
 8005928:	4604      	mov	r4, r0
 800592a:	d158      	bne.n	80059de <_malloc_r+0xf6>
 800592c:	f8d8 4000 	ldr.w	r4, [r8]
 8005930:	4627      	mov	r7, r4
 8005932:	2f00      	cmp	r7, #0
 8005934:	d143      	bne.n	80059be <_malloc_r+0xd6>
 8005936:	2c00      	cmp	r4, #0
 8005938:	d04b      	beq.n	80059d2 <_malloc_r+0xea>
 800593a:	6823      	ldr	r3, [r4, #0]
 800593c:	4639      	mov	r1, r7
 800593e:	4630      	mov	r0, r6
 8005940:	eb04 0903 	add.w	r9, r4, r3
 8005944:	f000 fe48 	bl	80065d8 <_sbrk_r>
 8005948:	4581      	cmp	r9, r0
 800594a:	d142      	bne.n	80059d2 <_malloc_r+0xea>
 800594c:	6821      	ldr	r1, [r4, #0]
 800594e:	1a6d      	subs	r5, r5, r1
 8005950:	4629      	mov	r1, r5
 8005952:	4630      	mov	r0, r6
 8005954:	f7ff ffa6 	bl	80058a4 <sbrk_aligned>
 8005958:	3001      	adds	r0, #1
 800595a:	d03a      	beq.n	80059d2 <_malloc_r+0xea>
 800595c:	6823      	ldr	r3, [r4, #0]
 800595e:	442b      	add	r3, r5
 8005960:	6023      	str	r3, [r4, #0]
 8005962:	f8d8 3000 	ldr.w	r3, [r8]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	bb62      	cbnz	r2, 80059c4 <_malloc_r+0xdc>
 800596a:	f8c8 7000 	str.w	r7, [r8]
 800596e:	e00f      	b.n	8005990 <_malloc_r+0xa8>
 8005970:	6822      	ldr	r2, [r4, #0]
 8005972:	1b52      	subs	r2, r2, r5
 8005974:	d420      	bmi.n	80059b8 <_malloc_r+0xd0>
 8005976:	2a0b      	cmp	r2, #11
 8005978:	d917      	bls.n	80059aa <_malloc_r+0xc2>
 800597a:	1961      	adds	r1, r4, r5
 800597c:	42a3      	cmp	r3, r4
 800597e:	6025      	str	r5, [r4, #0]
 8005980:	bf18      	it	ne
 8005982:	6059      	strne	r1, [r3, #4]
 8005984:	6863      	ldr	r3, [r4, #4]
 8005986:	bf08      	it	eq
 8005988:	f8c8 1000 	streq.w	r1, [r8]
 800598c:	5162      	str	r2, [r4, r5]
 800598e:	604b      	str	r3, [r1, #4]
 8005990:	4630      	mov	r0, r6
 8005992:	f000 f82f 	bl	80059f4 <__malloc_unlock>
 8005996:	f104 000b 	add.w	r0, r4, #11
 800599a:	1d23      	adds	r3, r4, #4
 800599c:	f020 0007 	bic.w	r0, r0, #7
 80059a0:	1ac2      	subs	r2, r0, r3
 80059a2:	bf1c      	itt	ne
 80059a4:	1a1b      	subne	r3, r3, r0
 80059a6:	50a3      	strne	r3, [r4, r2]
 80059a8:	e7af      	b.n	800590a <_malloc_r+0x22>
 80059aa:	6862      	ldr	r2, [r4, #4]
 80059ac:	42a3      	cmp	r3, r4
 80059ae:	bf0c      	ite	eq
 80059b0:	f8c8 2000 	streq.w	r2, [r8]
 80059b4:	605a      	strne	r2, [r3, #4]
 80059b6:	e7eb      	b.n	8005990 <_malloc_r+0xa8>
 80059b8:	4623      	mov	r3, r4
 80059ba:	6864      	ldr	r4, [r4, #4]
 80059bc:	e7ae      	b.n	800591c <_malloc_r+0x34>
 80059be:	463c      	mov	r4, r7
 80059c0:	687f      	ldr	r7, [r7, #4]
 80059c2:	e7b6      	b.n	8005932 <_malloc_r+0x4a>
 80059c4:	461a      	mov	r2, r3
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	42a3      	cmp	r3, r4
 80059ca:	d1fb      	bne.n	80059c4 <_malloc_r+0xdc>
 80059cc:	2300      	movs	r3, #0
 80059ce:	6053      	str	r3, [r2, #4]
 80059d0:	e7de      	b.n	8005990 <_malloc_r+0xa8>
 80059d2:	230c      	movs	r3, #12
 80059d4:	6033      	str	r3, [r6, #0]
 80059d6:	4630      	mov	r0, r6
 80059d8:	f000 f80c 	bl	80059f4 <__malloc_unlock>
 80059dc:	e794      	b.n	8005908 <_malloc_r+0x20>
 80059de:	6005      	str	r5, [r0, #0]
 80059e0:	e7d6      	b.n	8005990 <_malloc_r+0xa8>
 80059e2:	bf00      	nop
 80059e4:	20000390 	.word	0x20000390

080059e8 <__malloc_lock>:
 80059e8:	4801      	ldr	r0, [pc, #4]	@ (80059f0 <__malloc_lock+0x8>)
 80059ea:	f7ff b8ae 	b.w	8004b4a <__retarget_lock_acquire_recursive>
 80059ee:	bf00      	nop
 80059f0:	20000388 	.word	0x20000388

080059f4 <__malloc_unlock>:
 80059f4:	4801      	ldr	r0, [pc, #4]	@ (80059fc <__malloc_unlock+0x8>)
 80059f6:	f7ff b8a9 	b.w	8004b4c <__retarget_lock_release_recursive>
 80059fa:	bf00      	nop
 80059fc:	20000388 	.word	0x20000388

08005a00 <_Balloc>:
 8005a00:	b570      	push	{r4, r5, r6, lr}
 8005a02:	69c6      	ldr	r6, [r0, #28]
 8005a04:	4604      	mov	r4, r0
 8005a06:	460d      	mov	r5, r1
 8005a08:	b976      	cbnz	r6, 8005a28 <_Balloc+0x28>
 8005a0a:	2010      	movs	r0, #16
 8005a0c:	f7ff ff42 	bl	8005894 <malloc>
 8005a10:	4602      	mov	r2, r0
 8005a12:	61e0      	str	r0, [r4, #28]
 8005a14:	b920      	cbnz	r0, 8005a20 <_Balloc+0x20>
 8005a16:	4b18      	ldr	r3, [pc, #96]	@ (8005a78 <_Balloc+0x78>)
 8005a18:	4818      	ldr	r0, [pc, #96]	@ (8005a7c <_Balloc+0x7c>)
 8005a1a:	216b      	movs	r1, #107	@ 0x6b
 8005a1c:	f000 fdfa 	bl	8006614 <__assert_func>
 8005a20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a24:	6006      	str	r6, [r0, #0]
 8005a26:	60c6      	str	r6, [r0, #12]
 8005a28:	69e6      	ldr	r6, [r4, #28]
 8005a2a:	68f3      	ldr	r3, [r6, #12]
 8005a2c:	b183      	cbz	r3, 8005a50 <_Balloc+0x50>
 8005a2e:	69e3      	ldr	r3, [r4, #28]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005a36:	b9b8      	cbnz	r0, 8005a68 <_Balloc+0x68>
 8005a38:	2101      	movs	r1, #1
 8005a3a:	fa01 f605 	lsl.w	r6, r1, r5
 8005a3e:	1d72      	adds	r2, r6, #5
 8005a40:	0092      	lsls	r2, r2, #2
 8005a42:	4620      	mov	r0, r4
 8005a44:	f000 fe04 	bl	8006650 <_calloc_r>
 8005a48:	b160      	cbz	r0, 8005a64 <_Balloc+0x64>
 8005a4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005a4e:	e00e      	b.n	8005a6e <_Balloc+0x6e>
 8005a50:	2221      	movs	r2, #33	@ 0x21
 8005a52:	2104      	movs	r1, #4
 8005a54:	4620      	mov	r0, r4
 8005a56:	f000 fdfb 	bl	8006650 <_calloc_r>
 8005a5a:	69e3      	ldr	r3, [r4, #28]
 8005a5c:	60f0      	str	r0, [r6, #12]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1e4      	bne.n	8005a2e <_Balloc+0x2e>
 8005a64:	2000      	movs	r0, #0
 8005a66:	bd70      	pop	{r4, r5, r6, pc}
 8005a68:	6802      	ldr	r2, [r0, #0]
 8005a6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005a6e:	2300      	movs	r3, #0
 8005a70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005a74:	e7f7      	b.n	8005a66 <_Balloc+0x66>
 8005a76:	bf00      	nop
 8005a78:	08006845 	.word	0x08006845
 8005a7c:	080068c5 	.word	0x080068c5

08005a80 <_Bfree>:
 8005a80:	b570      	push	{r4, r5, r6, lr}
 8005a82:	69c6      	ldr	r6, [r0, #28]
 8005a84:	4605      	mov	r5, r0
 8005a86:	460c      	mov	r4, r1
 8005a88:	b976      	cbnz	r6, 8005aa8 <_Bfree+0x28>
 8005a8a:	2010      	movs	r0, #16
 8005a8c:	f7ff ff02 	bl	8005894 <malloc>
 8005a90:	4602      	mov	r2, r0
 8005a92:	61e8      	str	r0, [r5, #28]
 8005a94:	b920      	cbnz	r0, 8005aa0 <_Bfree+0x20>
 8005a96:	4b09      	ldr	r3, [pc, #36]	@ (8005abc <_Bfree+0x3c>)
 8005a98:	4809      	ldr	r0, [pc, #36]	@ (8005ac0 <_Bfree+0x40>)
 8005a9a:	218f      	movs	r1, #143	@ 0x8f
 8005a9c:	f000 fdba 	bl	8006614 <__assert_func>
 8005aa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005aa4:	6006      	str	r6, [r0, #0]
 8005aa6:	60c6      	str	r6, [r0, #12]
 8005aa8:	b13c      	cbz	r4, 8005aba <_Bfree+0x3a>
 8005aaa:	69eb      	ldr	r3, [r5, #28]
 8005aac:	6862      	ldr	r2, [r4, #4]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ab4:	6021      	str	r1, [r4, #0]
 8005ab6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005aba:	bd70      	pop	{r4, r5, r6, pc}
 8005abc:	08006845 	.word	0x08006845
 8005ac0:	080068c5 	.word	0x080068c5

08005ac4 <__multadd>:
 8005ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ac8:	690d      	ldr	r5, [r1, #16]
 8005aca:	4607      	mov	r7, r0
 8005acc:	460c      	mov	r4, r1
 8005ace:	461e      	mov	r6, r3
 8005ad0:	f101 0c14 	add.w	ip, r1, #20
 8005ad4:	2000      	movs	r0, #0
 8005ad6:	f8dc 3000 	ldr.w	r3, [ip]
 8005ada:	b299      	uxth	r1, r3
 8005adc:	fb02 6101 	mla	r1, r2, r1, r6
 8005ae0:	0c1e      	lsrs	r6, r3, #16
 8005ae2:	0c0b      	lsrs	r3, r1, #16
 8005ae4:	fb02 3306 	mla	r3, r2, r6, r3
 8005ae8:	b289      	uxth	r1, r1
 8005aea:	3001      	adds	r0, #1
 8005aec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005af0:	4285      	cmp	r5, r0
 8005af2:	f84c 1b04 	str.w	r1, [ip], #4
 8005af6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005afa:	dcec      	bgt.n	8005ad6 <__multadd+0x12>
 8005afc:	b30e      	cbz	r6, 8005b42 <__multadd+0x7e>
 8005afe:	68a3      	ldr	r3, [r4, #8]
 8005b00:	42ab      	cmp	r3, r5
 8005b02:	dc19      	bgt.n	8005b38 <__multadd+0x74>
 8005b04:	6861      	ldr	r1, [r4, #4]
 8005b06:	4638      	mov	r0, r7
 8005b08:	3101      	adds	r1, #1
 8005b0a:	f7ff ff79 	bl	8005a00 <_Balloc>
 8005b0e:	4680      	mov	r8, r0
 8005b10:	b928      	cbnz	r0, 8005b1e <__multadd+0x5a>
 8005b12:	4602      	mov	r2, r0
 8005b14:	4b0c      	ldr	r3, [pc, #48]	@ (8005b48 <__multadd+0x84>)
 8005b16:	480d      	ldr	r0, [pc, #52]	@ (8005b4c <__multadd+0x88>)
 8005b18:	21ba      	movs	r1, #186	@ 0xba
 8005b1a:	f000 fd7b 	bl	8006614 <__assert_func>
 8005b1e:	6922      	ldr	r2, [r4, #16]
 8005b20:	3202      	adds	r2, #2
 8005b22:	f104 010c 	add.w	r1, r4, #12
 8005b26:	0092      	lsls	r2, r2, #2
 8005b28:	300c      	adds	r0, #12
 8005b2a:	f000 fd65 	bl	80065f8 <memcpy>
 8005b2e:	4621      	mov	r1, r4
 8005b30:	4638      	mov	r0, r7
 8005b32:	f7ff ffa5 	bl	8005a80 <_Bfree>
 8005b36:	4644      	mov	r4, r8
 8005b38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005b3c:	3501      	adds	r5, #1
 8005b3e:	615e      	str	r6, [r3, #20]
 8005b40:	6125      	str	r5, [r4, #16]
 8005b42:	4620      	mov	r0, r4
 8005b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b48:	080068b4 	.word	0x080068b4
 8005b4c:	080068c5 	.word	0x080068c5

08005b50 <__hi0bits>:
 8005b50:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005b54:	4603      	mov	r3, r0
 8005b56:	bf36      	itet	cc
 8005b58:	0403      	lslcc	r3, r0, #16
 8005b5a:	2000      	movcs	r0, #0
 8005b5c:	2010      	movcc	r0, #16
 8005b5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b62:	bf3c      	itt	cc
 8005b64:	021b      	lslcc	r3, r3, #8
 8005b66:	3008      	addcc	r0, #8
 8005b68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b6c:	bf3c      	itt	cc
 8005b6e:	011b      	lslcc	r3, r3, #4
 8005b70:	3004      	addcc	r0, #4
 8005b72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b76:	bf3c      	itt	cc
 8005b78:	009b      	lslcc	r3, r3, #2
 8005b7a:	3002      	addcc	r0, #2
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	db05      	blt.n	8005b8c <__hi0bits+0x3c>
 8005b80:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005b84:	f100 0001 	add.w	r0, r0, #1
 8005b88:	bf08      	it	eq
 8005b8a:	2020      	moveq	r0, #32
 8005b8c:	4770      	bx	lr

08005b8e <__lo0bits>:
 8005b8e:	6803      	ldr	r3, [r0, #0]
 8005b90:	4602      	mov	r2, r0
 8005b92:	f013 0007 	ands.w	r0, r3, #7
 8005b96:	d00b      	beq.n	8005bb0 <__lo0bits+0x22>
 8005b98:	07d9      	lsls	r1, r3, #31
 8005b9a:	d421      	bmi.n	8005be0 <__lo0bits+0x52>
 8005b9c:	0798      	lsls	r0, r3, #30
 8005b9e:	bf49      	itett	mi
 8005ba0:	085b      	lsrmi	r3, r3, #1
 8005ba2:	089b      	lsrpl	r3, r3, #2
 8005ba4:	2001      	movmi	r0, #1
 8005ba6:	6013      	strmi	r3, [r2, #0]
 8005ba8:	bf5c      	itt	pl
 8005baa:	6013      	strpl	r3, [r2, #0]
 8005bac:	2002      	movpl	r0, #2
 8005bae:	4770      	bx	lr
 8005bb0:	b299      	uxth	r1, r3
 8005bb2:	b909      	cbnz	r1, 8005bb8 <__lo0bits+0x2a>
 8005bb4:	0c1b      	lsrs	r3, r3, #16
 8005bb6:	2010      	movs	r0, #16
 8005bb8:	b2d9      	uxtb	r1, r3
 8005bba:	b909      	cbnz	r1, 8005bc0 <__lo0bits+0x32>
 8005bbc:	3008      	adds	r0, #8
 8005bbe:	0a1b      	lsrs	r3, r3, #8
 8005bc0:	0719      	lsls	r1, r3, #28
 8005bc2:	bf04      	itt	eq
 8005bc4:	091b      	lsreq	r3, r3, #4
 8005bc6:	3004      	addeq	r0, #4
 8005bc8:	0799      	lsls	r1, r3, #30
 8005bca:	bf04      	itt	eq
 8005bcc:	089b      	lsreq	r3, r3, #2
 8005bce:	3002      	addeq	r0, #2
 8005bd0:	07d9      	lsls	r1, r3, #31
 8005bd2:	d403      	bmi.n	8005bdc <__lo0bits+0x4e>
 8005bd4:	085b      	lsrs	r3, r3, #1
 8005bd6:	f100 0001 	add.w	r0, r0, #1
 8005bda:	d003      	beq.n	8005be4 <__lo0bits+0x56>
 8005bdc:	6013      	str	r3, [r2, #0]
 8005bde:	4770      	bx	lr
 8005be0:	2000      	movs	r0, #0
 8005be2:	4770      	bx	lr
 8005be4:	2020      	movs	r0, #32
 8005be6:	4770      	bx	lr

08005be8 <__i2b>:
 8005be8:	b510      	push	{r4, lr}
 8005bea:	460c      	mov	r4, r1
 8005bec:	2101      	movs	r1, #1
 8005bee:	f7ff ff07 	bl	8005a00 <_Balloc>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	b928      	cbnz	r0, 8005c02 <__i2b+0x1a>
 8005bf6:	4b05      	ldr	r3, [pc, #20]	@ (8005c0c <__i2b+0x24>)
 8005bf8:	4805      	ldr	r0, [pc, #20]	@ (8005c10 <__i2b+0x28>)
 8005bfa:	f240 1145 	movw	r1, #325	@ 0x145
 8005bfe:	f000 fd09 	bl	8006614 <__assert_func>
 8005c02:	2301      	movs	r3, #1
 8005c04:	6144      	str	r4, [r0, #20]
 8005c06:	6103      	str	r3, [r0, #16]
 8005c08:	bd10      	pop	{r4, pc}
 8005c0a:	bf00      	nop
 8005c0c:	080068b4 	.word	0x080068b4
 8005c10:	080068c5 	.word	0x080068c5

08005c14 <__multiply>:
 8005c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c18:	4617      	mov	r7, r2
 8005c1a:	690a      	ldr	r2, [r1, #16]
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	bfa8      	it	ge
 8005c22:	463b      	movge	r3, r7
 8005c24:	4689      	mov	r9, r1
 8005c26:	bfa4      	itt	ge
 8005c28:	460f      	movge	r7, r1
 8005c2a:	4699      	movge	r9, r3
 8005c2c:	693d      	ldr	r5, [r7, #16]
 8005c2e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	6879      	ldr	r1, [r7, #4]
 8005c36:	eb05 060a 	add.w	r6, r5, sl
 8005c3a:	42b3      	cmp	r3, r6
 8005c3c:	b085      	sub	sp, #20
 8005c3e:	bfb8      	it	lt
 8005c40:	3101      	addlt	r1, #1
 8005c42:	f7ff fedd 	bl	8005a00 <_Balloc>
 8005c46:	b930      	cbnz	r0, 8005c56 <__multiply+0x42>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	4b41      	ldr	r3, [pc, #260]	@ (8005d50 <__multiply+0x13c>)
 8005c4c:	4841      	ldr	r0, [pc, #260]	@ (8005d54 <__multiply+0x140>)
 8005c4e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005c52:	f000 fcdf 	bl	8006614 <__assert_func>
 8005c56:	f100 0414 	add.w	r4, r0, #20
 8005c5a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8005c5e:	4623      	mov	r3, r4
 8005c60:	2200      	movs	r2, #0
 8005c62:	4573      	cmp	r3, lr
 8005c64:	d320      	bcc.n	8005ca8 <__multiply+0x94>
 8005c66:	f107 0814 	add.w	r8, r7, #20
 8005c6a:	f109 0114 	add.w	r1, r9, #20
 8005c6e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8005c72:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8005c76:	9302      	str	r3, [sp, #8]
 8005c78:	1beb      	subs	r3, r5, r7
 8005c7a:	3b15      	subs	r3, #21
 8005c7c:	f023 0303 	bic.w	r3, r3, #3
 8005c80:	3304      	adds	r3, #4
 8005c82:	3715      	adds	r7, #21
 8005c84:	42bd      	cmp	r5, r7
 8005c86:	bf38      	it	cc
 8005c88:	2304      	movcc	r3, #4
 8005c8a:	9301      	str	r3, [sp, #4]
 8005c8c:	9b02      	ldr	r3, [sp, #8]
 8005c8e:	9103      	str	r1, [sp, #12]
 8005c90:	428b      	cmp	r3, r1
 8005c92:	d80c      	bhi.n	8005cae <__multiply+0x9a>
 8005c94:	2e00      	cmp	r6, #0
 8005c96:	dd03      	ble.n	8005ca0 <__multiply+0x8c>
 8005c98:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d055      	beq.n	8005d4c <__multiply+0x138>
 8005ca0:	6106      	str	r6, [r0, #16]
 8005ca2:	b005      	add	sp, #20
 8005ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ca8:	f843 2b04 	str.w	r2, [r3], #4
 8005cac:	e7d9      	b.n	8005c62 <__multiply+0x4e>
 8005cae:	f8b1 a000 	ldrh.w	sl, [r1]
 8005cb2:	f1ba 0f00 	cmp.w	sl, #0
 8005cb6:	d01f      	beq.n	8005cf8 <__multiply+0xe4>
 8005cb8:	46c4      	mov	ip, r8
 8005cba:	46a1      	mov	r9, r4
 8005cbc:	2700      	movs	r7, #0
 8005cbe:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005cc2:	f8d9 3000 	ldr.w	r3, [r9]
 8005cc6:	fa1f fb82 	uxth.w	fp, r2
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	fb0a 330b 	mla	r3, sl, fp, r3
 8005cd0:	443b      	add	r3, r7
 8005cd2:	f8d9 7000 	ldr.w	r7, [r9]
 8005cd6:	0c12      	lsrs	r2, r2, #16
 8005cd8:	0c3f      	lsrs	r7, r7, #16
 8005cda:	fb0a 7202 	mla	r2, sl, r2, r7
 8005cde:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ce8:	4565      	cmp	r5, ip
 8005cea:	f849 3b04 	str.w	r3, [r9], #4
 8005cee:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8005cf2:	d8e4      	bhi.n	8005cbe <__multiply+0xaa>
 8005cf4:	9b01      	ldr	r3, [sp, #4]
 8005cf6:	50e7      	str	r7, [r4, r3]
 8005cf8:	9b03      	ldr	r3, [sp, #12]
 8005cfa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005cfe:	3104      	adds	r1, #4
 8005d00:	f1b9 0f00 	cmp.w	r9, #0
 8005d04:	d020      	beq.n	8005d48 <__multiply+0x134>
 8005d06:	6823      	ldr	r3, [r4, #0]
 8005d08:	4647      	mov	r7, r8
 8005d0a:	46a4      	mov	ip, r4
 8005d0c:	f04f 0a00 	mov.w	sl, #0
 8005d10:	f8b7 b000 	ldrh.w	fp, [r7]
 8005d14:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8005d18:	fb09 220b 	mla	r2, r9, fp, r2
 8005d1c:	4452      	add	r2, sl
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d24:	f84c 3b04 	str.w	r3, [ip], #4
 8005d28:	f857 3b04 	ldr.w	r3, [r7], #4
 8005d2c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005d30:	f8bc 3000 	ldrh.w	r3, [ip]
 8005d34:	fb09 330a 	mla	r3, r9, sl, r3
 8005d38:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005d3c:	42bd      	cmp	r5, r7
 8005d3e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005d42:	d8e5      	bhi.n	8005d10 <__multiply+0xfc>
 8005d44:	9a01      	ldr	r2, [sp, #4]
 8005d46:	50a3      	str	r3, [r4, r2]
 8005d48:	3404      	adds	r4, #4
 8005d4a:	e79f      	b.n	8005c8c <__multiply+0x78>
 8005d4c:	3e01      	subs	r6, #1
 8005d4e:	e7a1      	b.n	8005c94 <__multiply+0x80>
 8005d50:	080068b4 	.word	0x080068b4
 8005d54:	080068c5 	.word	0x080068c5

08005d58 <__pow5mult>:
 8005d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d5c:	4615      	mov	r5, r2
 8005d5e:	f012 0203 	ands.w	r2, r2, #3
 8005d62:	4607      	mov	r7, r0
 8005d64:	460e      	mov	r6, r1
 8005d66:	d007      	beq.n	8005d78 <__pow5mult+0x20>
 8005d68:	4c25      	ldr	r4, [pc, #148]	@ (8005e00 <__pow5mult+0xa8>)
 8005d6a:	3a01      	subs	r2, #1
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005d72:	f7ff fea7 	bl	8005ac4 <__multadd>
 8005d76:	4606      	mov	r6, r0
 8005d78:	10ad      	asrs	r5, r5, #2
 8005d7a:	d03d      	beq.n	8005df8 <__pow5mult+0xa0>
 8005d7c:	69fc      	ldr	r4, [r7, #28]
 8005d7e:	b97c      	cbnz	r4, 8005da0 <__pow5mult+0x48>
 8005d80:	2010      	movs	r0, #16
 8005d82:	f7ff fd87 	bl	8005894 <malloc>
 8005d86:	4602      	mov	r2, r0
 8005d88:	61f8      	str	r0, [r7, #28]
 8005d8a:	b928      	cbnz	r0, 8005d98 <__pow5mult+0x40>
 8005d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8005e04 <__pow5mult+0xac>)
 8005d8e:	481e      	ldr	r0, [pc, #120]	@ (8005e08 <__pow5mult+0xb0>)
 8005d90:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005d94:	f000 fc3e 	bl	8006614 <__assert_func>
 8005d98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d9c:	6004      	str	r4, [r0, #0]
 8005d9e:	60c4      	str	r4, [r0, #12]
 8005da0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005da4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005da8:	b94c      	cbnz	r4, 8005dbe <__pow5mult+0x66>
 8005daa:	f240 2171 	movw	r1, #625	@ 0x271
 8005dae:	4638      	mov	r0, r7
 8005db0:	f7ff ff1a 	bl	8005be8 <__i2b>
 8005db4:	2300      	movs	r3, #0
 8005db6:	f8c8 0008 	str.w	r0, [r8, #8]
 8005dba:	4604      	mov	r4, r0
 8005dbc:	6003      	str	r3, [r0, #0]
 8005dbe:	f04f 0900 	mov.w	r9, #0
 8005dc2:	07eb      	lsls	r3, r5, #31
 8005dc4:	d50a      	bpl.n	8005ddc <__pow5mult+0x84>
 8005dc6:	4631      	mov	r1, r6
 8005dc8:	4622      	mov	r2, r4
 8005dca:	4638      	mov	r0, r7
 8005dcc:	f7ff ff22 	bl	8005c14 <__multiply>
 8005dd0:	4631      	mov	r1, r6
 8005dd2:	4680      	mov	r8, r0
 8005dd4:	4638      	mov	r0, r7
 8005dd6:	f7ff fe53 	bl	8005a80 <_Bfree>
 8005dda:	4646      	mov	r6, r8
 8005ddc:	106d      	asrs	r5, r5, #1
 8005dde:	d00b      	beq.n	8005df8 <__pow5mult+0xa0>
 8005de0:	6820      	ldr	r0, [r4, #0]
 8005de2:	b938      	cbnz	r0, 8005df4 <__pow5mult+0x9c>
 8005de4:	4622      	mov	r2, r4
 8005de6:	4621      	mov	r1, r4
 8005de8:	4638      	mov	r0, r7
 8005dea:	f7ff ff13 	bl	8005c14 <__multiply>
 8005dee:	6020      	str	r0, [r4, #0]
 8005df0:	f8c0 9000 	str.w	r9, [r0]
 8005df4:	4604      	mov	r4, r0
 8005df6:	e7e4      	b.n	8005dc2 <__pow5mult+0x6a>
 8005df8:	4630      	mov	r0, r6
 8005dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dfe:	bf00      	nop
 8005e00:	08006978 	.word	0x08006978
 8005e04:	08006845 	.word	0x08006845
 8005e08:	080068c5 	.word	0x080068c5

08005e0c <__lshift>:
 8005e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e10:	460c      	mov	r4, r1
 8005e12:	6849      	ldr	r1, [r1, #4]
 8005e14:	6923      	ldr	r3, [r4, #16]
 8005e16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005e1a:	68a3      	ldr	r3, [r4, #8]
 8005e1c:	4607      	mov	r7, r0
 8005e1e:	4691      	mov	r9, r2
 8005e20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005e24:	f108 0601 	add.w	r6, r8, #1
 8005e28:	42b3      	cmp	r3, r6
 8005e2a:	db0b      	blt.n	8005e44 <__lshift+0x38>
 8005e2c:	4638      	mov	r0, r7
 8005e2e:	f7ff fde7 	bl	8005a00 <_Balloc>
 8005e32:	4605      	mov	r5, r0
 8005e34:	b948      	cbnz	r0, 8005e4a <__lshift+0x3e>
 8005e36:	4602      	mov	r2, r0
 8005e38:	4b28      	ldr	r3, [pc, #160]	@ (8005edc <__lshift+0xd0>)
 8005e3a:	4829      	ldr	r0, [pc, #164]	@ (8005ee0 <__lshift+0xd4>)
 8005e3c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005e40:	f000 fbe8 	bl	8006614 <__assert_func>
 8005e44:	3101      	adds	r1, #1
 8005e46:	005b      	lsls	r3, r3, #1
 8005e48:	e7ee      	b.n	8005e28 <__lshift+0x1c>
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	f100 0114 	add.w	r1, r0, #20
 8005e50:	f100 0210 	add.w	r2, r0, #16
 8005e54:	4618      	mov	r0, r3
 8005e56:	4553      	cmp	r3, sl
 8005e58:	db33      	blt.n	8005ec2 <__lshift+0xb6>
 8005e5a:	6920      	ldr	r0, [r4, #16]
 8005e5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005e60:	f104 0314 	add.w	r3, r4, #20
 8005e64:	f019 091f 	ands.w	r9, r9, #31
 8005e68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005e6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005e70:	d02b      	beq.n	8005eca <__lshift+0xbe>
 8005e72:	f1c9 0e20 	rsb	lr, r9, #32
 8005e76:	468a      	mov	sl, r1
 8005e78:	2200      	movs	r2, #0
 8005e7a:	6818      	ldr	r0, [r3, #0]
 8005e7c:	fa00 f009 	lsl.w	r0, r0, r9
 8005e80:	4310      	orrs	r0, r2
 8005e82:	f84a 0b04 	str.w	r0, [sl], #4
 8005e86:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e8a:	459c      	cmp	ip, r3
 8005e8c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005e90:	d8f3      	bhi.n	8005e7a <__lshift+0x6e>
 8005e92:	ebac 0304 	sub.w	r3, ip, r4
 8005e96:	3b15      	subs	r3, #21
 8005e98:	f023 0303 	bic.w	r3, r3, #3
 8005e9c:	3304      	adds	r3, #4
 8005e9e:	f104 0015 	add.w	r0, r4, #21
 8005ea2:	4560      	cmp	r0, ip
 8005ea4:	bf88      	it	hi
 8005ea6:	2304      	movhi	r3, #4
 8005ea8:	50ca      	str	r2, [r1, r3]
 8005eaa:	b10a      	cbz	r2, 8005eb0 <__lshift+0xa4>
 8005eac:	f108 0602 	add.w	r6, r8, #2
 8005eb0:	3e01      	subs	r6, #1
 8005eb2:	4638      	mov	r0, r7
 8005eb4:	612e      	str	r6, [r5, #16]
 8005eb6:	4621      	mov	r1, r4
 8005eb8:	f7ff fde2 	bl	8005a80 <_Bfree>
 8005ebc:	4628      	mov	r0, r5
 8005ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ec2:	f842 0f04 	str.w	r0, [r2, #4]!
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	e7c5      	b.n	8005e56 <__lshift+0x4a>
 8005eca:	3904      	subs	r1, #4
 8005ecc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ed0:	f841 2f04 	str.w	r2, [r1, #4]!
 8005ed4:	459c      	cmp	ip, r3
 8005ed6:	d8f9      	bhi.n	8005ecc <__lshift+0xc0>
 8005ed8:	e7ea      	b.n	8005eb0 <__lshift+0xa4>
 8005eda:	bf00      	nop
 8005edc:	080068b4 	.word	0x080068b4
 8005ee0:	080068c5 	.word	0x080068c5

08005ee4 <__mcmp>:
 8005ee4:	690a      	ldr	r2, [r1, #16]
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	6900      	ldr	r0, [r0, #16]
 8005eea:	1a80      	subs	r0, r0, r2
 8005eec:	b530      	push	{r4, r5, lr}
 8005eee:	d10e      	bne.n	8005f0e <__mcmp+0x2a>
 8005ef0:	3314      	adds	r3, #20
 8005ef2:	3114      	adds	r1, #20
 8005ef4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005ef8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005efc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005f00:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005f04:	4295      	cmp	r5, r2
 8005f06:	d003      	beq.n	8005f10 <__mcmp+0x2c>
 8005f08:	d205      	bcs.n	8005f16 <__mcmp+0x32>
 8005f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f0e:	bd30      	pop	{r4, r5, pc}
 8005f10:	42a3      	cmp	r3, r4
 8005f12:	d3f3      	bcc.n	8005efc <__mcmp+0x18>
 8005f14:	e7fb      	b.n	8005f0e <__mcmp+0x2a>
 8005f16:	2001      	movs	r0, #1
 8005f18:	e7f9      	b.n	8005f0e <__mcmp+0x2a>
	...

08005f1c <__mdiff>:
 8005f1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f20:	4689      	mov	r9, r1
 8005f22:	4606      	mov	r6, r0
 8005f24:	4611      	mov	r1, r2
 8005f26:	4648      	mov	r0, r9
 8005f28:	4614      	mov	r4, r2
 8005f2a:	f7ff ffdb 	bl	8005ee4 <__mcmp>
 8005f2e:	1e05      	subs	r5, r0, #0
 8005f30:	d112      	bne.n	8005f58 <__mdiff+0x3c>
 8005f32:	4629      	mov	r1, r5
 8005f34:	4630      	mov	r0, r6
 8005f36:	f7ff fd63 	bl	8005a00 <_Balloc>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	b928      	cbnz	r0, 8005f4a <__mdiff+0x2e>
 8005f3e:	4b3f      	ldr	r3, [pc, #252]	@ (800603c <__mdiff+0x120>)
 8005f40:	f240 2137 	movw	r1, #567	@ 0x237
 8005f44:	483e      	ldr	r0, [pc, #248]	@ (8006040 <__mdiff+0x124>)
 8005f46:	f000 fb65 	bl	8006614 <__assert_func>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005f50:	4610      	mov	r0, r2
 8005f52:	b003      	add	sp, #12
 8005f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f58:	bfbc      	itt	lt
 8005f5a:	464b      	movlt	r3, r9
 8005f5c:	46a1      	movlt	r9, r4
 8005f5e:	4630      	mov	r0, r6
 8005f60:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005f64:	bfba      	itte	lt
 8005f66:	461c      	movlt	r4, r3
 8005f68:	2501      	movlt	r5, #1
 8005f6a:	2500      	movge	r5, #0
 8005f6c:	f7ff fd48 	bl	8005a00 <_Balloc>
 8005f70:	4602      	mov	r2, r0
 8005f72:	b918      	cbnz	r0, 8005f7c <__mdiff+0x60>
 8005f74:	4b31      	ldr	r3, [pc, #196]	@ (800603c <__mdiff+0x120>)
 8005f76:	f240 2145 	movw	r1, #581	@ 0x245
 8005f7a:	e7e3      	b.n	8005f44 <__mdiff+0x28>
 8005f7c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005f80:	6926      	ldr	r6, [r4, #16]
 8005f82:	60c5      	str	r5, [r0, #12]
 8005f84:	f109 0310 	add.w	r3, r9, #16
 8005f88:	f109 0514 	add.w	r5, r9, #20
 8005f8c:	f104 0e14 	add.w	lr, r4, #20
 8005f90:	f100 0b14 	add.w	fp, r0, #20
 8005f94:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005f98:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005f9c:	9301      	str	r3, [sp, #4]
 8005f9e:	46d9      	mov	r9, fp
 8005fa0:	f04f 0c00 	mov.w	ip, #0
 8005fa4:	9b01      	ldr	r3, [sp, #4]
 8005fa6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005faa:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005fae:	9301      	str	r3, [sp, #4]
 8005fb0:	fa1f f38a 	uxth.w	r3, sl
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	b283      	uxth	r3, r0
 8005fb8:	1acb      	subs	r3, r1, r3
 8005fba:	0c00      	lsrs	r0, r0, #16
 8005fbc:	4463      	add	r3, ip
 8005fbe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005fc2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005fcc:	4576      	cmp	r6, lr
 8005fce:	f849 3b04 	str.w	r3, [r9], #4
 8005fd2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005fd6:	d8e5      	bhi.n	8005fa4 <__mdiff+0x88>
 8005fd8:	1b33      	subs	r3, r6, r4
 8005fda:	3b15      	subs	r3, #21
 8005fdc:	f023 0303 	bic.w	r3, r3, #3
 8005fe0:	3415      	adds	r4, #21
 8005fe2:	3304      	adds	r3, #4
 8005fe4:	42a6      	cmp	r6, r4
 8005fe6:	bf38      	it	cc
 8005fe8:	2304      	movcc	r3, #4
 8005fea:	441d      	add	r5, r3
 8005fec:	445b      	add	r3, fp
 8005fee:	461e      	mov	r6, r3
 8005ff0:	462c      	mov	r4, r5
 8005ff2:	4544      	cmp	r4, r8
 8005ff4:	d30e      	bcc.n	8006014 <__mdiff+0xf8>
 8005ff6:	f108 0103 	add.w	r1, r8, #3
 8005ffa:	1b49      	subs	r1, r1, r5
 8005ffc:	f021 0103 	bic.w	r1, r1, #3
 8006000:	3d03      	subs	r5, #3
 8006002:	45a8      	cmp	r8, r5
 8006004:	bf38      	it	cc
 8006006:	2100      	movcc	r1, #0
 8006008:	440b      	add	r3, r1
 800600a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800600e:	b191      	cbz	r1, 8006036 <__mdiff+0x11a>
 8006010:	6117      	str	r7, [r2, #16]
 8006012:	e79d      	b.n	8005f50 <__mdiff+0x34>
 8006014:	f854 1b04 	ldr.w	r1, [r4], #4
 8006018:	46e6      	mov	lr, ip
 800601a:	0c08      	lsrs	r0, r1, #16
 800601c:	fa1c fc81 	uxtah	ip, ip, r1
 8006020:	4471      	add	r1, lr
 8006022:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006026:	b289      	uxth	r1, r1
 8006028:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800602c:	f846 1b04 	str.w	r1, [r6], #4
 8006030:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006034:	e7dd      	b.n	8005ff2 <__mdiff+0xd6>
 8006036:	3f01      	subs	r7, #1
 8006038:	e7e7      	b.n	800600a <__mdiff+0xee>
 800603a:	bf00      	nop
 800603c:	080068b4 	.word	0x080068b4
 8006040:	080068c5 	.word	0x080068c5

08006044 <__d2b>:
 8006044:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006048:	460f      	mov	r7, r1
 800604a:	2101      	movs	r1, #1
 800604c:	ec59 8b10 	vmov	r8, r9, d0
 8006050:	4616      	mov	r6, r2
 8006052:	f7ff fcd5 	bl	8005a00 <_Balloc>
 8006056:	4604      	mov	r4, r0
 8006058:	b930      	cbnz	r0, 8006068 <__d2b+0x24>
 800605a:	4602      	mov	r2, r0
 800605c:	4b23      	ldr	r3, [pc, #140]	@ (80060ec <__d2b+0xa8>)
 800605e:	4824      	ldr	r0, [pc, #144]	@ (80060f0 <__d2b+0xac>)
 8006060:	f240 310f 	movw	r1, #783	@ 0x30f
 8006064:	f000 fad6 	bl	8006614 <__assert_func>
 8006068:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800606c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006070:	b10d      	cbz	r5, 8006076 <__d2b+0x32>
 8006072:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006076:	9301      	str	r3, [sp, #4]
 8006078:	f1b8 0300 	subs.w	r3, r8, #0
 800607c:	d023      	beq.n	80060c6 <__d2b+0x82>
 800607e:	4668      	mov	r0, sp
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	f7ff fd84 	bl	8005b8e <__lo0bits>
 8006086:	e9dd 1200 	ldrd	r1, r2, [sp]
 800608a:	b1d0      	cbz	r0, 80060c2 <__d2b+0x7e>
 800608c:	f1c0 0320 	rsb	r3, r0, #32
 8006090:	fa02 f303 	lsl.w	r3, r2, r3
 8006094:	430b      	orrs	r3, r1
 8006096:	40c2      	lsrs	r2, r0
 8006098:	6163      	str	r3, [r4, #20]
 800609a:	9201      	str	r2, [sp, #4]
 800609c:	9b01      	ldr	r3, [sp, #4]
 800609e:	61a3      	str	r3, [r4, #24]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	bf0c      	ite	eq
 80060a4:	2201      	moveq	r2, #1
 80060a6:	2202      	movne	r2, #2
 80060a8:	6122      	str	r2, [r4, #16]
 80060aa:	b1a5      	cbz	r5, 80060d6 <__d2b+0x92>
 80060ac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80060b0:	4405      	add	r5, r0
 80060b2:	603d      	str	r5, [r7, #0]
 80060b4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80060b8:	6030      	str	r0, [r6, #0]
 80060ba:	4620      	mov	r0, r4
 80060bc:	b003      	add	sp, #12
 80060be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80060c2:	6161      	str	r1, [r4, #20]
 80060c4:	e7ea      	b.n	800609c <__d2b+0x58>
 80060c6:	a801      	add	r0, sp, #4
 80060c8:	f7ff fd61 	bl	8005b8e <__lo0bits>
 80060cc:	9b01      	ldr	r3, [sp, #4]
 80060ce:	6163      	str	r3, [r4, #20]
 80060d0:	3020      	adds	r0, #32
 80060d2:	2201      	movs	r2, #1
 80060d4:	e7e8      	b.n	80060a8 <__d2b+0x64>
 80060d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80060da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80060de:	6038      	str	r0, [r7, #0]
 80060e0:	6918      	ldr	r0, [r3, #16]
 80060e2:	f7ff fd35 	bl	8005b50 <__hi0bits>
 80060e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80060ea:	e7e5      	b.n	80060b8 <__d2b+0x74>
 80060ec:	080068b4 	.word	0x080068b4
 80060f0:	080068c5 	.word	0x080068c5

080060f4 <__sfputc_r>:
 80060f4:	6893      	ldr	r3, [r2, #8]
 80060f6:	3b01      	subs	r3, #1
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	b410      	push	{r4}
 80060fc:	6093      	str	r3, [r2, #8]
 80060fe:	da08      	bge.n	8006112 <__sfputc_r+0x1e>
 8006100:	6994      	ldr	r4, [r2, #24]
 8006102:	42a3      	cmp	r3, r4
 8006104:	db01      	blt.n	800610a <__sfputc_r+0x16>
 8006106:	290a      	cmp	r1, #10
 8006108:	d103      	bne.n	8006112 <__sfputc_r+0x1e>
 800610a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800610e:	f7fe bc0a 	b.w	8004926 <__swbuf_r>
 8006112:	6813      	ldr	r3, [r2, #0]
 8006114:	1c58      	adds	r0, r3, #1
 8006116:	6010      	str	r0, [r2, #0]
 8006118:	7019      	strb	r1, [r3, #0]
 800611a:	4608      	mov	r0, r1
 800611c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006120:	4770      	bx	lr

08006122 <__sfputs_r>:
 8006122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006124:	4606      	mov	r6, r0
 8006126:	460f      	mov	r7, r1
 8006128:	4614      	mov	r4, r2
 800612a:	18d5      	adds	r5, r2, r3
 800612c:	42ac      	cmp	r4, r5
 800612e:	d101      	bne.n	8006134 <__sfputs_r+0x12>
 8006130:	2000      	movs	r0, #0
 8006132:	e007      	b.n	8006144 <__sfputs_r+0x22>
 8006134:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006138:	463a      	mov	r2, r7
 800613a:	4630      	mov	r0, r6
 800613c:	f7ff ffda 	bl	80060f4 <__sfputc_r>
 8006140:	1c43      	adds	r3, r0, #1
 8006142:	d1f3      	bne.n	800612c <__sfputs_r+0xa>
 8006144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006148 <_vfiprintf_r>:
 8006148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800614c:	460d      	mov	r5, r1
 800614e:	b09d      	sub	sp, #116	@ 0x74
 8006150:	4614      	mov	r4, r2
 8006152:	4698      	mov	r8, r3
 8006154:	4606      	mov	r6, r0
 8006156:	b118      	cbz	r0, 8006160 <_vfiprintf_r+0x18>
 8006158:	6a03      	ldr	r3, [r0, #32]
 800615a:	b90b      	cbnz	r3, 8006160 <_vfiprintf_r+0x18>
 800615c:	f7fe fafa 	bl	8004754 <__sinit>
 8006160:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006162:	07d9      	lsls	r1, r3, #31
 8006164:	d405      	bmi.n	8006172 <_vfiprintf_r+0x2a>
 8006166:	89ab      	ldrh	r3, [r5, #12]
 8006168:	059a      	lsls	r2, r3, #22
 800616a:	d402      	bmi.n	8006172 <_vfiprintf_r+0x2a>
 800616c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800616e:	f7fe fcec 	bl	8004b4a <__retarget_lock_acquire_recursive>
 8006172:	89ab      	ldrh	r3, [r5, #12]
 8006174:	071b      	lsls	r3, r3, #28
 8006176:	d501      	bpl.n	800617c <_vfiprintf_r+0x34>
 8006178:	692b      	ldr	r3, [r5, #16]
 800617a:	b99b      	cbnz	r3, 80061a4 <_vfiprintf_r+0x5c>
 800617c:	4629      	mov	r1, r5
 800617e:	4630      	mov	r0, r6
 8006180:	f7fe fc10 	bl	80049a4 <__swsetup_r>
 8006184:	b170      	cbz	r0, 80061a4 <_vfiprintf_r+0x5c>
 8006186:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006188:	07dc      	lsls	r4, r3, #31
 800618a:	d504      	bpl.n	8006196 <_vfiprintf_r+0x4e>
 800618c:	f04f 30ff 	mov.w	r0, #4294967295
 8006190:	b01d      	add	sp, #116	@ 0x74
 8006192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006196:	89ab      	ldrh	r3, [r5, #12]
 8006198:	0598      	lsls	r0, r3, #22
 800619a:	d4f7      	bmi.n	800618c <_vfiprintf_r+0x44>
 800619c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800619e:	f7fe fcd5 	bl	8004b4c <__retarget_lock_release_recursive>
 80061a2:	e7f3      	b.n	800618c <_vfiprintf_r+0x44>
 80061a4:	2300      	movs	r3, #0
 80061a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80061a8:	2320      	movs	r3, #32
 80061aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80061ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80061b2:	2330      	movs	r3, #48	@ 0x30
 80061b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006364 <_vfiprintf_r+0x21c>
 80061b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80061bc:	f04f 0901 	mov.w	r9, #1
 80061c0:	4623      	mov	r3, r4
 80061c2:	469a      	mov	sl, r3
 80061c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061c8:	b10a      	cbz	r2, 80061ce <_vfiprintf_r+0x86>
 80061ca:	2a25      	cmp	r2, #37	@ 0x25
 80061cc:	d1f9      	bne.n	80061c2 <_vfiprintf_r+0x7a>
 80061ce:	ebba 0b04 	subs.w	fp, sl, r4
 80061d2:	d00b      	beq.n	80061ec <_vfiprintf_r+0xa4>
 80061d4:	465b      	mov	r3, fp
 80061d6:	4622      	mov	r2, r4
 80061d8:	4629      	mov	r1, r5
 80061da:	4630      	mov	r0, r6
 80061dc:	f7ff ffa1 	bl	8006122 <__sfputs_r>
 80061e0:	3001      	adds	r0, #1
 80061e2:	f000 80a7 	beq.w	8006334 <_vfiprintf_r+0x1ec>
 80061e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80061e8:	445a      	add	r2, fp
 80061ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80061ec:	f89a 3000 	ldrb.w	r3, [sl]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f000 809f 	beq.w	8006334 <_vfiprintf_r+0x1ec>
 80061f6:	2300      	movs	r3, #0
 80061f8:	f04f 32ff 	mov.w	r2, #4294967295
 80061fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006200:	f10a 0a01 	add.w	sl, sl, #1
 8006204:	9304      	str	r3, [sp, #16]
 8006206:	9307      	str	r3, [sp, #28]
 8006208:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800620c:	931a      	str	r3, [sp, #104]	@ 0x68
 800620e:	4654      	mov	r4, sl
 8006210:	2205      	movs	r2, #5
 8006212:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006216:	4853      	ldr	r0, [pc, #332]	@ (8006364 <_vfiprintf_r+0x21c>)
 8006218:	f7f9 ffda 	bl	80001d0 <memchr>
 800621c:	9a04      	ldr	r2, [sp, #16]
 800621e:	b9d8      	cbnz	r0, 8006258 <_vfiprintf_r+0x110>
 8006220:	06d1      	lsls	r1, r2, #27
 8006222:	bf44      	itt	mi
 8006224:	2320      	movmi	r3, #32
 8006226:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800622a:	0713      	lsls	r3, r2, #28
 800622c:	bf44      	itt	mi
 800622e:	232b      	movmi	r3, #43	@ 0x2b
 8006230:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006234:	f89a 3000 	ldrb.w	r3, [sl]
 8006238:	2b2a      	cmp	r3, #42	@ 0x2a
 800623a:	d015      	beq.n	8006268 <_vfiprintf_r+0x120>
 800623c:	9a07      	ldr	r2, [sp, #28]
 800623e:	4654      	mov	r4, sl
 8006240:	2000      	movs	r0, #0
 8006242:	f04f 0c0a 	mov.w	ip, #10
 8006246:	4621      	mov	r1, r4
 8006248:	f811 3b01 	ldrb.w	r3, [r1], #1
 800624c:	3b30      	subs	r3, #48	@ 0x30
 800624e:	2b09      	cmp	r3, #9
 8006250:	d94b      	bls.n	80062ea <_vfiprintf_r+0x1a2>
 8006252:	b1b0      	cbz	r0, 8006282 <_vfiprintf_r+0x13a>
 8006254:	9207      	str	r2, [sp, #28]
 8006256:	e014      	b.n	8006282 <_vfiprintf_r+0x13a>
 8006258:	eba0 0308 	sub.w	r3, r0, r8
 800625c:	fa09 f303 	lsl.w	r3, r9, r3
 8006260:	4313      	orrs	r3, r2
 8006262:	9304      	str	r3, [sp, #16]
 8006264:	46a2      	mov	sl, r4
 8006266:	e7d2      	b.n	800620e <_vfiprintf_r+0xc6>
 8006268:	9b03      	ldr	r3, [sp, #12]
 800626a:	1d19      	adds	r1, r3, #4
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	9103      	str	r1, [sp, #12]
 8006270:	2b00      	cmp	r3, #0
 8006272:	bfbb      	ittet	lt
 8006274:	425b      	neglt	r3, r3
 8006276:	f042 0202 	orrlt.w	r2, r2, #2
 800627a:	9307      	strge	r3, [sp, #28]
 800627c:	9307      	strlt	r3, [sp, #28]
 800627e:	bfb8      	it	lt
 8006280:	9204      	strlt	r2, [sp, #16]
 8006282:	7823      	ldrb	r3, [r4, #0]
 8006284:	2b2e      	cmp	r3, #46	@ 0x2e
 8006286:	d10a      	bne.n	800629e <_vfiprintf_r+0x156>
 8006288:	7863      	ldrb	r3, [r4, #1]
 800628a:	2b2a      	cmp	r3, #42	@ 0x2a
 800628c:	d132      	bne.n	80062f4 <_vfiprintf_r+0x1ac>
 800628e:	9b03      	ldr	r3, [sp, #12]
 8006290:	1d1a      	adds	r2, r3, #4
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	9203      	str	r2, [sp, #12]
 8006296:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800629a:	3402      	adds	r4, #2
 800629c:	9305      	str	r3, [sp, #20]
 800629e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006374 <_vfiprintf_r+0x22c>
 80062a2:	7821      	ldrb	r1, [r4, #0]
 80062a4:	2203      	movs	r2, #3
 80062a6:	4650      	mov	r0, sl
 80062a8:	f7f9 ff92 	bl	80001d0 <memchr>
 80062ac:	b138      	cbz	r0, 80062be <_vfiprintf_r+0x176>
 80062ae:	9b04      	ldr	r3, [sp, #16]
 80062b0:	eba0 000a 	sub.w	r0, r0, sl
 80062b4:	2240      	movs	r2, #64	@ 0x40
 80062b6:	4082      	lsls	r2, r0
 80062b8:	4313      	orrs	r3, r2
 80062ba:	3401      	adds	r4, #1
 80062bc:	9304      	str	r3, [sp, #16]
 80062be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062c2:	4829      	ldr	r0, [pc, #164]	@ (8006368 <_vfiprintf_r+0x220>)
 80062c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80062c8:	2206      	movs	r2, #6
 80062ca:	f7f9 ff81 	bl	80001d0 <memchr>
 80062ce:	2800      	cmp	r0, #0
 80062d0:	d03f      	beq.n	8006352 <_vfiprintf_r+0x20a>
 80062d2:	4b26      	ldr	r3, [pc, #152]	@ (800636c <_vfiprintf_r+0x224>)
 80062d4:	bb1b      	cbnz	r3, 800631e <_vfiprintf_r+0x1d6>
 80062d6:	9b03      	ldr	r3, [sp, #12]
 80062d8:	3307      	adds	r3, #7
 80062da:	f023 0307 	bic.w	r3, r3, #7
 80062de:	3308      	adds	r3, #8
 80062e0:	9303      	str	r3, [sp, #12]
 80062e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062e4:	443b      	add	r3, r7
 80062e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80062e8:	e76a      	b.n	80061c0 <_vfiprintf_r+0x78>
 80062ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80062ee:	460c      	mov	r4, r1
 80062f0:	2001      	movs	r0, #1
 80062f2:	e7a8      	b.n	8006246 <_vfiprintf_r+0xfe>
 80062f4:	2300      	movs	r3, #0
 80062f6:	3401      	adds	r4, #1
 80062f8:	9305      	str	r3, [sp, #20]
 80062fa:	4619      	mov	r1, r3
 80062fc:	f04f 0c0a 	mov.w	ip, #10
 8006300:	4620      	mov	r0, r4
 8006302:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006306:	3a30      	subs	r2, #48	@ 0x30
 8006308:	2a09      	cmp	r2, #9
 800630a:	d903      	bls.n	8006314 <_vfiprintf_r+0x1cc>
 800630c:	2b00      	cmp	r3, #0
 800630e:	d0c6      	beq.n	800629e <_vfiprintf_r+0x156>
 8006310:	9105      	str	r1, [sp, #20]
 8006312:	e7c4      	b.n	800629e <_vfiprintf_r+0x156>
 8006314:	fb0c 2101 	mla	r1, ip, r1, r2
 8006318:	4604      	mov	r4, r0
 800631a:	2301      	movs	r3, #1
 800631c:	e7f0      	b.n	8006300 <_vfiprintf_r+0x1b8>
 800631e:	ab03      	add	r3, sp, #12
 8006320:	9300      	str	r3, [sp, #0]
 8006322:	462a      	mov	r2, r5
 8006324:	4b12      	ldr	r3, [pc, #72]	@ (8006370 <_vfiprintf_r+0x228>)
 8006326:	a904      	add	r1, sp, #16
 8006328:	4630      	mov	r0, r6
 800632a:	f7fd fdd1 	bl	8003ed0 <_printf_float>
 800632e:	4607      	mov	r7, r0
 8006330:	1c78      	adds	r0, r7, #1
 8006332:	d1d6      	bne.n	80062e2 <_vfiprintf_r+0x19a>
 8006334:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006336:	07d9      	lsls	r1, r3, #31
 8006338:	d405      	bmi.n	8006346 <_vfiprintf_r+0x1fe>
 800633a:	89ab      	ldrh	r3, [r5, #12]
 800633c:	059a      	lsls	r2, r3, #22
 800633e:	d402      	bmi.n	8006346 <_vfiprintf_r+0x1fe>
 8006340:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006342:	f7fe fc03 	bl	8004b4c <__retarget_lock_release_recursive>
 8006346:	89ab      	ldrh	r3, [r5, #12]
 8006348:	065b      	lsls	r3, r3, #25
 800634a:	f53f af1f 	bmi.w	800618c <_vfiprintf_r+0x44>
 800634e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006350:	e71e      	b.n	8006190 <_vfiprintf_r+0x48>
 8006352:	ab03      	add	r3, sp, #12
 8006354:	9300      	str	r3, [sp, #0]
 8006356:	462a      	mov	r2, r5
 8006358:	4b05      	ldr	r3, [pc, #20]	@ (8006370 <_vfiprintf_r+0x228>)
 800635a:	a904      	add	r1, sp, #16
 800635c:	4630      	mov	r0, r6
 800635e:	f7fe f84f 	bl	8004400 <_printf_i>
 8006362:	e7e4      	b.n	800632e <_vfiprintf_r+0x1e6>
 8006364:	0800691e 	.word	0x0800691e
 8006368:	08006928 	.word	0x08006928
 800636c:	08003ed1 	.word	0x08003ed1
 8006370:	08006123 	.word	0x08006123
 8006374:	08006924 	.word	0x08006924

08006378 <__sflush_r>:
 8006378:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800637c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006380:	0716      	lsls	r6, r2, #28
 8006382:	4605      	mov	r5, r0
 8006384:	460c      	mov	r4, r1
 8006386:	d454      	bmi.n	8006432 <__sflush_r+0xba>
 8006388:	684b      	ldr	r3, [r1, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	dc02      	bgt.n	8006394 <__sflush_r+0x1c>
 800638e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006390:	2b00      	cmp	r3, #0
 8006392:	dd48      	ble.n	8006426 <__sflush_r+0xae>
 8006394:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006396:	2e00      	cmp	r6, #0
 8006398:	d045      	beq.n	8006426 <__sflush_r+0xae>
 800639a:	2300      	movs	r3, #0
 800639c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80063a0:	682f      	ldr	r7, [r5, #0]
 80063a2:	6a21      	ldr	r1, [r4, #32]
 80063a4:	602b      	str	r3, [r5, #0]
 80063a6:	d030      	beq.n	800640a <__sflush_r+0x92>
 80063a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80063aa:	89a3      	ldrh	r3, [r4, #12]
 80063ac:	0759      	lsls	r1, r3, #29
 80063ae:	d505      	bpl.n	80063bc <__sflush_r+0x44>
 80063b0:	6863      	ldr	r3, [r4, #4]
 80063b2:	1ad2      	subs	r2, r2, r3
 80063b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80063b6:	b10b      	cbz	r3, 80063bc <__sflush_r+0x44>
 80063b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80063ba:	1ad2      	subs	r2, r2, r3
 80063bc:	2300      	movs	r3, #0
 80063be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80063c0:	6a21      	ldr	r1, [r4, #32]
 80063c2:	4628      	mov	r0, r5
 80063c4:	47b0      	blx	r6
 80063c6:	1c43      	adds	r3, r0, #1
 80063c8:	89a3      	ldrh	r3, [r4, #12]
 80063ca:	d106      	bne.n	80063da <__sflush_r+0x62>
 80063cc:	6829      	ldr	r1, [r5, #0]
 80063ce:	291d      	cmp	r1, #29
 80063d0:	d82b      	bhi.n	800642a <__sflush_r+0xb2>
 80063d2:	4a2a      	ldr	r2, [pc, #168]	@ (800647c <__sflush_r+0x104>)
 80063d4:	40ca      	lsrs	r2, r1
 80063d6:	07d6      	lsls	r6, r2, #31
 80063d8:	d527      	bpl.n	800642a <__sflush_r+0xb2>
 80063da:	2200      	movs	r2, #0
 80063dc:	6062      	str	r2, [r4, #4]
 80063de:	04d9      	lsls	r1, r3, #19
 80063e0:	6922      	ldr	r2, [r4, #16]
 80063e2:	6022      	str	r2, [r4, #0]
 80063e4:	d504      	bpl.n	80063f0 <__sflush_r+0x78>
 80063e6:	1c42      	adds	r2, r0, #1
 80063e8:	d101      	bne.n	80063ee <__sflush_r+0x76>
 80063ea:	682b      	ldr	r3, [r5, #0]
 80063ec:	b903      	cbnz	r3, 80063f0 <__sflush_r+0x78>
 80063ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80063f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80063f2:	602f      	str	r7, [r5, #0]
 80063f4:	b1b9      	cbz	r1, 8006426 <__sflush_r+0xae>
 80063f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80063fa:	4299      	cmp	r1, r3
 80063fc:	d002      	beq.n	8006404 <__sflush_r+0x8c>
 80063fe:	4628      	mov	r0, r5
 8006400:	f7ff f9fe 	bl	8005800 <_free_r>
 8006404:	2300      	movs	r3, #0
 8006406:	6363      	str	r3, [r4, #52]	@ 0x34
 8006408:	e00d      	b.n	8006426 <__sflush_r+0xae>
 800640a:	2301      	movs	r3, #1
 800640c:	4628      	mov	r0, r5
 800640e:	47b0      	blx	r6
 8006410:	4602      	mov	r2, r0
 8006412:	1c50      	adds	r0, r2, #1
 8006414:	d1c9      	bne.n	80063aa <__sflush_r+0x32>
 8006416:	682b      	ldr	r3, [r5, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d0c6      	beq.n	80063aa <__sflush_r+0x32>
 800641c:	2b1d      	cmp	r3, #29
 800641e:	d001      	beq.n	8006424 <__sflush_r+0xac>
 8006420:	2b16      	cmp	r3, #22
 8006422:	d11e      	bne.n	8006462 <__sflush_r+0xea>
 8006424:	602f      	str	r7, [r5, #0]
 8006426:	2000      	movs	r0, #0
 8006428:	e022      	b.n	8006470 <__sflush_r+0xf8>
 800642a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800642e:	b21b      	sxth	r3, r3
 8006430:	e01b      	b.n	800646a <__sflush_r+0xf2>
 8006432:	690f      	ldr	r7, [r1, #16]
 8006434:	2f00      	cmp	r7, #0
 8006436:	d0f6      	beq.n	8006426 <__sflush_r+0xae>
 8006438:	0793      	lsls	r3, r2, #30
 800643a:	680e      	ldr	r6, [r1, #0]
 800643c:	bf08      	it	eq
 800643e:	694b      	ldreq	r3, [r1, #20]
 8006440:	600f      	str	r7, [r1, #0]
 8006442:	bf18      	it	ne
 8006444:	2300      	movne	r3, #0
 8006446:	eba6 0807 	sub.w	r8, r6, r7
 800644a:	608b      	str	r3, [r1, #8]
 800644c:	f1b8 0f00 	cmp.w	r8, #0
 8006450:	dde9      	ble.n	8006426 <__sflush_r+0xae>
 8006452:	6a21      	ldr	r1, [r4, #32]
 8006454:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006456:	4643      	mov	r3, r8
 8006458:	463a      	mov	r2, r7
 800645a:	4628      	mov	r0, r5
 800645c:	47b0      	blx	r6
 800645e:	2800      	cmp	r0, #0
 8006460:	dc08      	bgt.n	8006474 <__sflush_r+0xfc>
 8006462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006466:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800646a:	81a3      	strh	r3, [r4, #12]
 800646c:	f04f 30ff 	mov.w	r0, #4294967295
 8006470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006474:	4407      	add	r7, r0
 8006476:	eba8 0800 	sub.w	r8, r8, r0
 800647a:	e7e7      	b.n	800644c <__sflush_r+0xd4>
 800647c:	20400001 	.word	0x20400001

08006480 <_fflush_r>:
 8006480:	b538      	push	{r3, r4, r5, lr}
 8006482:	690b      	ldr	r3, [r1, #16]
 8006484:	4605      	mov	r5, r0
 8006486:	460c      	mov	r4, r1
 8006488:	b913      	cbnz	r3, 8006490 <_fflush_r+0x10>
 800648a:	2500      	movs	r5, #0
 800648c:	4628      	mov	r0, r5
 800648e:	bd38      	pop	{r3, r4, r5, pc}
 8006490:	b118      	cbz	r0, 800649a <_fflush_r+0x1a>
 8006492:	6a03      	ldr	r3, [r0, #32]
 8006494:	b90b      	cbnz	r3, 800649a <_fflush_r+0x1a>
 8006496:	f7fe f95d 	bl	8004754 <__sinit>
 800649a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d0f3      	beq.n	800648a <_fflush_r+0xa>
 80064a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80064a4:	07d0      	lsls	r0, r2, #31
 80064a6:	d404      	bmi.n	80064b2 <_fflush_r+0x32>
 80064a8:	0599      	lsls	r1, r3, #22
 80064aa:	d402      	bmi.n	80064b2 <_fflush_r+0x32>
 80064ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80064ae:	f7fe fb4c 	bl	8004b4a <__retarget_lock_acquire_recursive>
 80064b2:	4628      	mov	r0, r5
 80064b4:	4621      	mov	r1, r4
 80064b6:	f7ff ff5f 	bl	8006378 <__sflush_r>
 80064ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80064bc:	07da      	lsls	r2, r3, #31
 80064be:	4605      	mov	r5, r0
 80064c0:	d4e4      	bmi.n	800648c <_fflush_r+0xc>
 80064c2:	89a3      	ldrh	r3, [r4, #12]
 80064c4:	059b      	lsls	r3, r3, #22
 80064c6:	d4e1      	bmi.n	800648c <_fflush_r+0xc>
 80064c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80064ca:	f7fe fb3f 	bl	8004b4c <__retarget_lock_release_recursive>
 80064ce:	e7dd      	b.n	800648c <_fflush_r+0xc>

080064d0 <__swhatbuf_r>:
 80064d0:	b570      	push	{r4, r5, r6, lr}
 80064d2:	460c      	mov	r4, r1
 80064d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064d8:	2900      	cmp	r1, #0
 80064da:	b096      	sub	sp, #88	@ 0x58
 80064dc:	4615      	mov	r5, r2
 80064de:	461e      	mov	r6, r3
 80064e0:	da0d      	bge.n	80064fe <__swhatbuf_r+0x2e>
 80064e2:	89a3      	ldrh	r3, [r4, #12]
 80064e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80064e8:	f04f 0100 	mov.w	r1, #0
 80064ec:	bf14      	ite	ne
 80064ee:	2340      	movne	r3, #64	@ 0x40
 80064f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80064f4:	2000      	movs	r0, #0
 80064f6:	6031      	str	r1, [r6, #0]
 80064f8:	602b      	str	r3, [r5, #0]
 80064fa:	b016      	add	sp, #88	@ 0x58
 80064fc:	bd70      	pop	{r4, r5, r6, pc}
 80064fe:	466a      	mov	r2, sp
 8006500:	f000 f848 	bl	8006594 <_fstat_r>
 8006504:	2800      	cmp	r0, #0
 8006506:	dbec      	blt.n	80064e2 <__swhatbuf_r+0x12>
 8006508:	9901      	ldr	r1, [sp, #4]
 800650a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800650e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006512:	4259      	negs	r1, r3
 8006514:	4159      	adcs	r1, r3
 8006516:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800651a:	e7eb      	b.n	80064f4 <__swhatbuf_r+0x24>

0800651c <__smakebuf_r>:
 800651c:	898b      	ldrh	r3, [r1, #12]
 800651e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006520:	079d      	lsls	r5, r3, #30
 8006522:	4606      	mov	r6, r0
 8006524:	460c      	mov	r4, r1
 8006526:	d507      	bpl.n	8006538 <__smakebuf_r+0x1c>
 8006528:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800652c:	6023      	str	r3, [r4, #0]
 800652e:	6123      	str	r3, [r4, #16]
 8006530:	2301      	movs	r3, #1
 8006532:	6163      	str	r3, [r4, #20]
 8006534:	b003      	add	sp, #12
 8006536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006538:	ab01      	add	r3, sp, #4
 800653a:	466a      	mov	r2, sp
 800653c:	f7ff ffc8 	bl	80064d0 <__swhatbuf_r>
 8006540:	9f00      	ldr	r7, [sp, #0]
 8006542:	4605      	mov	r5, r0
 8006544:	4639      	mov	r1, r7
 8006546:	4630      	mov	r0, r6
 8006548:	f7ff f9ce 	bl	80058e8 <_malloc_r>
 800654c:	b948      	cbnz	r0, 8006562 <__smakebuf_r+0x46>
 800654e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006552:	059a      	lsls	r2, r3, #22
 8006554:	d4ee      	bmi.n	8006534 <__smakebuf_r+0x18>
 8006556:	f023 0303 	bic.w	r3, r3, #3
 800655a:	f043 0302 	orr.w	r3, r3, #2
 800655e:	81a3      	strh	r3, [r4, #12]
 8006560:	e7e2      	b.n	8006528 <__smakebuf_r+0xc>
 8006562:	89a3      	ldrh	r3, [r4, #12]
 8006564:	6020      	str	r0, [r4, #0]
 8006566:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800656a:	81a3      	strh	r3, [r4, #12]
 800656c:	9b01      	ldr	r3, [sp, #4]
 800656e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006572:	b15b      	cbz	r3, 800658c <__smakebuf_r+0x70>
 8006574:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006578:	4630      	mov	r0, r6
 800657a:	f000 f81d 	bl	80065b8 <_isatty_r>
 800657e:	b128      	cbz	r0, 800658c <__smakebuf_r+0x70>
 8006580:	89a3      	ldrh	r3, [r4, #12]
 8006582:	f023 0303 	bic.w	r3, r3, #3
 8006586:	f043 0301 	orr.w	r3, r3, #1
 800658a:	81a3      	strh	r3, [r4, #12]
 800658c:	89a3      	ldrh	r3, [r4, #12]
 800658e:	431d      	orrs	r5, r3
 8006590:	81a5      	strh	r5, [r4, #12]
 8006592:	e7cf      	b.n	8006534 <__smakebuf_r+0x18>

08006594 <_fstat_r>:
 8006594:	b538      	push	{r3, r4, r5, lr}
 8006596:	4d07      	ldr	r5, [pc, #28]	@ (80065b4 <_fstat_r+0x20>)
 8006598:	2300      	movs	r3, #0
 800659a:	4604      	mov	r4, r0
 800659c:	4608      	mov	r0, r1
 800659e:	4611      	mov	r1, r2
 80065a0:	602b      	str	r3, [r5, #0]
 80065a2:	f7fa fd26 	bl	8000ff2 <_fstat>
 80065a6:	1c43      	adds	r3, r0, #1
 80065a8:	d102      	bne.n	80065b0 <_fstat_r+0x1c>
 80065aa:	682b      	ldr	r3, [r5, #0]
 80065ac:	b103      	cbz	r3, 80065b0 <_fstat_r+0x1c>
 80065ae:	6023      	str	r3, [r4, #0]
 80065b0:	bd38      	pop	{r3, r4, r5, pc}
 80065b2:	bf00      	nop
 80065b4:	20000384 	.word	0x20000384

080065b8 <_isatty_r>:
 80065b8:	b538      	push	{r3, r4, r5, lr}
 80065ba:	4d06      	ldr	r5, [pc, #24]	@ (80065d4 <_isatty_r+0x1c>)
 80065bc:	2300      	movs	r3, #0
 80065be:	4604      	mov	r4, r0
 80065c0:	4608      	mov	r0, r1
 80065c2:	602b      	str	r3, [r5, #0]
 80065c4:	f7fa fd25 	bl	8001012 <_isatty>
 80065c8:	1c43      	adds	r3, r0, #1
 80065ca:	d102      	bne.n	80065d2 <_isatty_r+0x1a>
 80065cc:	682b      	ldr	r3, [r5, #0]
 80065ce:	b103      	cbz	r3, 80065d2 <_isatty_r+0x1a>
 80065d0:	6023      	str	r3, [r4, #0]
 80065d2:	bd38      	pop	{r3, r4, r5, pc}
 80065d4:	20000384 	.word	0x20000384

080065d8 <_sbrk_r>:
 80065d8:	b538      	push	{r3, r4, r5, lr}
 80065da:	4d06      	ldr	r5, [pc, #24]	@ (80065f4 <_sbrk_r+0x1c>)
 80065dc:	2300      	movs	r3, #0
 80065de:	4604      	mov	r4, r0
 80065e0:	4608      	mov	r0, r1
 80065e2:	602b      	str	r3, [r5, #0]
 80065e4:	f7fa fd2e 	bl	8001044 <_sbrk>
 80065e8:	1c43      	adds	r3, r0, #1
 80065ea:	d102      	bne.n	80065f2 <_sbrk_r+0x1a>
 80065ec:	682b      	ldr	r3, [r5, #0]
 80065ee:	b103      	cbz	r3, 80065f2 <_sbrk_r+0x1a>
 80065f0:	6023      	str	r3, [r4, #0]
 80065f2:	bd38      	pop	{r3, r4, r5, pc}
 80065f4:	20000384 	.word	0x20000384

080065f8 <memcpy>:
 80065f8:	440a      	add	r2, r1
 80065fa:	4291      	cmp	r1, r2
 80065fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006600:	d100      	bne.n	8006604 <memcpy+0xc>
 8006602:	4770      	bx	lr
 8006604:	b510      	push	{r4, lr}
 8006606:	f811 4b01 	ldrb.w	r4, [r1], #1
 800660a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800660e:	4291      	cmp	r1, r2
 8006610:	d1f9      	bne.n	8006606 <memcpy+0xe>
 8006612:	bd10      	pop	{r4, pc}

08006614 <__assert_func>:
 8006614:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006616:	4614      	mov	r4, r2
 8006618:	461a      	mov	r2, r3
 800661a:	4b09      	ldr	r3, [pc, #36]	@ (8006640 <__assert_func+0x2c>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4605      	mov	r5, r0
 8006620:	68d8      	ldr	r0, [r3, #12]
 8006622:	b14c      	cbz	r4, 8006638 <__assert_func+0x24>
 8006624:	4b07      	ldr	r3, [pc, #28]	@ (8006644 <__assert_func+0x30>)
 8006626:	9100      	str	r1, [sp, #0]
 8006628:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800662c:	4906      	ldr	r1, [pc, #24]	@ (8006648 <__assert_func+0x34>)
 800662e:	462b      	mov	r3, r5
 8006630:	f000 f842 	bl	80066b8 <fiprintf>
 8006634:	f000 f852 	bl	80066dc <abort>
 8006638:	4b04      	ldr	r3, [pc, #16]	@ (800664c <__assert_func+0x38>)
 800663a:	461c      	mov	r4, r3
 800663c:	e7f3      	b.n	8006626 <__assert_func+0x12>
 800663e:	bf00      	nop
 8006640:	20000018 	.word	0x20000018
 8006644:	08006939 	.word	0x08006939
 8006648:	08006946 	.word	0x08006946
 800664c:	08006974 	.word	0x08006974

08006650 <_calloc_r>:
 8006650:	b570      	push	{r4, r5, r6, lr}
 8006652:	fba1 5402 	umull	r5, r4, r1, r2
 8006656:	b934      	cbnz	r4, 8006666 <_calloc_r+0x16>
 8006658:	4629      	mov	r1, r5
 800665a:	f7ff f945 	bl	80058e8 <_malloc_r>
 800665e:	4606      	mov	r6, r0
 8006660:	b928      	cbnz	r0, 800666e <_calloc_r+0x1e>
 8006662:	4630      	mov	r0, r6
 8006664:	bd70      	pop	{r4, r5, r6, pc}
 8006666:	220c      	movs	r2, #12
 8006668:	6002      	str	r2, [r0, #0]
 800666a:	2600      	movs	r6, #0
 800666c:	e7f9      	b.n	8006662 <_calloc_r+0x12>
 800666e:	462a      	mov	r2, r5
 8006670:	4621      	mov	r1, r4
 8006672:	f7fe f9ed 	bl	8004a50 <memset>
 8006676:	e7f4      	b.n	8006662 <_calloc_r+0x12>

08006678 <__ascii_mbtowc>:
 8006678:	b082      	sub	sp, #8
 800667a:	b901      	cbnz	r1, 800667e <__ascii_mbtowc+0x6>
 800667c:	a901      	add	r1, sp, #4
 800667e:	b142      	cbz	r2, 8006692 <__ascii_mbtowc+0x1a>
 8006680:	b14b      	cbz	r3, 8006696 <__ascii_mbtowc+0x1e>
 8006682:	7813      	ldrb	r3, [r2, #0]
 8006684:	600b      	str	r3, [r1, #0]
 8006686:	7812      	ldrb	r2, [r2, #0]
 8006688:	1e10      	subs	r0, r2, #0
 800668a:	bf18      	it	ne
 800668c:	2001      	movne	r0, #1
 800668e:	b002      	add	sp, #8
 8006690:	4770      	bx	lr
 8006692:	4610      	mov	r0, r2
 8006694:	e7fb      	b.n	800668e <__ascii_mbtowc+0x16>
 8006696:	f06f 0001 	mvn.w	r0, #1
 800669a:	e7f8      	b.n	800668e <__ascii_mbtowc+0x16>

0800669c <__ascii_wctomb>:
 800669c:	4603      	mov	r3, r0
 800669e:	4608      	mov	r0, r1
 80066a0:	b141      	cbz	r1, 80066b4 <__ascii_wctomb+0x18>
 80066a2:	2aff      	cmp	r2, #255	@ 0xff
 80066a4:	d904      	bls.n	80066b0 <__ascii_wctomb+0x14>
 80066a6:	228a      	movs	r2, #138	@ 0x8a
 80066a8:	601a      	str	r2, [r3, #0]
 80066aa:	f04f 30ff 	mov.w	r0, #4294967295
 80066ae:	4770      	bx	lr
 80066b0:	700a      	strb	r2, [r1, #0]
 80066b2:	2001      	movs	r0, #1
 80066b4:	4770      	bx	lr
	...

080066b8 <fiprintf>:
 80066b8:	b40e      	push	{r1, r2, r3}
 80066ba:	b503      	push	{r0, r1, lr}
 80066bc:	4601      	mov	r1, r0
 80066be:	ab03      	add	r3, sp, #12
 80066c0:	4805      	ldr	r0, [pc, #20]	@ (80066d8 <fiprintf+0x20>)
 80066c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80066c6:	6800      	ldr	r0, [r0, #0]
 80066c8:	9301      	str	r3, [sp, #4]
 80066ca:	f7ff fd3d 	bl	8006148 <_vfiprintf_r>
 80066ce:	b002      	add	sp, #8
 80066d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80066d4:	b003      	add	sp, #12
 80066d6:	4770      	bx	lr
 80066d8:	20000018 	.word	0x20000018

080066dc <abort>:
 80066dc:	b508      	push	{r3, lr}
 80066de:	2006      	movs	r0, #6
 80066e0:	f000 f82c 	bl	800673c <raise>
 80066e4:	2001      	movs	r0, #1
 80066e6:	f7fa fc34 	bl	8000f52 <_exit>

080066ea <_raise_r>:
 80066ea:	291f      	cmp	r1, #31
 80066ec:	b538      	push	{r3, r4, r5, lr}
 80066ee:	4605      	mov	r5, r0
 80066f0:	460c      	mov	r4, r1
 80066f2:	d904      	bls.n	80066fe <_raise_r+0x14>
 80066f4:	2316      	movs	r3, #22
 80066f6:	6003      	str	r3, [r0, #0]
 80066f8:	f04f 30ff 	mov.w	r0, #4294967295
 80066fc:	bd38      	pop	{r3, r4, r5, pc}
 80066fe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006700:	b112      	cbz	r2, 8006708 <_raise_r+0x1e>
 8006702:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006706:	b94b      	cbnz	r3, 800671c <_raise_r+0x32>
 8006708:	4628      	mov	r0, r5
 800670a:	f000 f831 	bl	8006770 <_getpid_r>
 800670e:	4622      	mov	r2, r4
 8006710:	4601      	mov	r1, r0
 8006712:	4628      	mov	r0, r5
 8006714:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006718:	f000 b818 	b.w	800674c <_kill_r>
 800671c:	2b01      	cmp	r3, #1
 800671e:	d00a      	beq.n	8006736 <_raise_r+0x4c>
 8006720:	1c59      	adds	r1, r3, #1
 8006722:	d103      	bne.n	800672c <_raise_r+0x42>
 8006724:	2316      	movs	r3, #22
 8006726:	6003      	str	r3, [r0, #0]
 8006728:	2001      	movs	r0, #1
 800672a:	e7e7      	b.n	80066fc <_raise_r+0x12>
 800672c:	2100      	movs	r1, #0
 800672e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006732:	4620      	mov	r0, r4
 8006734:	4798      	blx	r3
 8006736:	2000      	movs	r0, #0
 8006738:	e7e0      	b.n	80066fc <_raise_r+0x12>
	...

0800673c <raise>:
 800673c:	4b02      	ldr	r3, [pc, #8]	@ (8006748 <raise+0xc>)
 800673e:	4601      	mov	r1, r0
 8006740:	6818      	ldr	r0, [r3, #0]
 8006742:	f7ff bfd2 	b.w	80066ea <_raise_r>
 8006746:	bf00      	nop
 8006748:	20000018 	.word	0x20000018

0800674c <_kill_r>:
 800674c:	b538      	push	{r3, r4, r5, lr}
 800674e:	4d07      	ldr	r5, [pc, #28]	@ (800676c <_kill_r+0x20>)
 8006750:	2300      	movs	r3, #0
 8006752:	4604      	mov	r4, r0
 8006754:	4608      	mov	r0, r1
 8006756:	4611      	mov	r1, r2
 8006758:	602b      	str	r3, [r5, #0]
 800675a:	f7fa fbea 	bl	8000f32 <_kill>
 800675e:	1c43      	adds	r3, r0, #1
 8006760:	d102      	bne.n	8006768 <_kill_r+0x1c>
 8006762:	682b      	ldr	r3, [r5, #0]
 8006764:	b103      	cbz	r3, 8006768 <_kill_r+0x1c>
 8006766:	6023      	str	r3, [r4, #0]
 8006768:	bd38      	pop	{r3, r4, r5, pc}
 800676a:	bf00      	nop
 800676c:	20000384 	.word	0x20000384

08006770 <_getpid_r>:
 8006770:	f7fa bbd7 	b.w	8000f22 <_getpid>

08006774 <_init>:
 8006774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006776:	bf00      	nop
 8006778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800677a:	bc08      	pop	{r3}
 800677c:	469e      	mov	lr, r3
 800677e:	4770      	bx	lr

08006780 <_fini>:
 8006780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006782:	bf00      	nop
 8006784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006786:	bc08      	pop	{r3}
 8006788:	469e      	mov	lr, r3
 800678a:	4770      	bx	lr
