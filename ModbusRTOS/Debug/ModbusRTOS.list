
ModbusRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fe4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  08008174  08008174  00009174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008474  08008474  0000a0a0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008474  08008474  00009474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800847c  0800847c  0000a0a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800847c  0800847c  0000947c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008480  08008480  00009480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  08008484  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a0a0  2**0
                  CONTENTS
 10 .bss          00001fbc  200000a0  200000a0  0000a0a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000205c  2000205c  0000a0a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bcac  00000000  00000000  0000a0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f84  00000000  00000000  00025d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015d0  00000000  00000000  00029d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010f3  00000000  00000000  0002b2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003ff4  00000000  00000000  0002c3c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bd92  00000000  00000000  000303b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000af454  00000000  00000000  0004c149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fb59d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006220  00000000  00000000  000fb5e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00101800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800815c 	.word	0x0800815c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	0800815c 	.word	0x0800815c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  initialise_monitor_handles();
 80001e4:	f007 ff5a 	bl	800809c <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e8:	f001 f86c 	bl	80012c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ec:	f000 f83c 	bl	8000268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f0:	f000 f8e4 	bl	80003bc <MX_GPIO_Init>
  MX_DMA_Init();
 80001f4:	f000 f8bc 	bl	8000370 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80001f8:	f000 f888 	bl	800030c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialize UART callbacks
  UART_Callbacks_Init();
 80001fc:	f000 ffda 	bl	80011b4 <UART_Callbacks_Init>

  // Initialize Modbus RTU slave
  Modbus_Init();
 8000200:	f000 fcfa 	bl	8000bf8 <Modbus_Init>

  // Initialize test functions
  Modbus_Test_Init();
 8000204:	f000 fd74 	bl	8000cf0 <Modbus_Test_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000208:	f004 fc96 	bl	8004b38 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800020c:	4a0d      	ldr	r2, [pc, #52]	@ (8000244 <main+0x64>)
 800020e:	2100      	movs	r1, #0
 8000210:	480d      	ldr	r0, [pc, #52]	@ (8000248 <main+0x68>)
 8000212:	f004 fcf9 	bl	8004c08 <osThreadNew>
 8000216:	4603      	mov	r3, r0
 8000218:	4a0c      	ldr	r2, [pc, #48]	@ (800024c <main+0x6c>)
 800021a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  // Create Modbus communication task
  ModbusCommunicationTaskHandle = osThreadNew(ModbusCommunicationTask, NULL, &ModbusCommunicationTask_attributes);
 800021c:	4a0c      	ldr	r2, [pc, #48]	@ (8000250 <main+0x70>)
 800021e:	2100      	movs	r1, #0
 8000220:	480c      	ldr	r0, [pc, #48]	@ (8000254 <main+0x74>)
 8000222:	f004 fcf1 	bl	8004c08 <osThreadNew>
 8000226:	4603      	mov	r3, r0
 8000228:	4a0b      	ldr	r2, [pc, #44]	@ (8000258 <main+0x78>)
 800022a:	6013      	str	r3, [r2, #0]

  // Create sensor update task
  SensorUpdateTaskHandle = osThreadNew(SensorUpdateTask, NULL, &SensorUpdateTask_attributes);
 800022c:	4a0b      	ldr	r2, [pc, #44]	@ (800025c <main+0x7c>)
 800022e:	2100      	movs	r1, #0
 8000230:	480b      	ldr	r0, [pc, #44]	@ (8000260 <main+0x80>)
 8000232:	f004 fce9 	bl	8004c08 <osThreadNew>
 8000236:	4603      	mov	r3, r0
 8000238:	4a0a      	ldr	r2, [pc, #40]	@ (8000264 <main+0x84>)
 800023a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800023c:	f004 fcb0 	bl	8004ba0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000240:	bf00      	nop
 8000242:	e7fd      	b.n	8000240 <main+0x60>
 8000244:	080081b4 	.word	0x080081b4
 8000248:	08000405 	.word	0x08000405
 800024c:	200001cc 	.word	0x200001cc
 8000250:	080081d8 	.word	0x080081d8
 8000254:	08000415 	.word	0x08000415
 8000258:	200001d0 	.word	0x200001d0
 800025c:	080081fc 	.word	0x080081fc
 8000260:	0800042b 	.word	0x0800042b
 8000264:	200001d4 	.word	0x200001d4

08000268 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b096      	sub	sp, #88	@ 0x58
 800026c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000272:	2228      	movs	r2, #40	@ 0x28
 8000274:	2100      	movs	r1, #0
 8000276:	4618      	mov	r0, r3
 8000278:	f007 fb15 	bl	80078a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800027c:	f107 031c 	add.w	r3, r7, #28
 8000280:	2200      	movs	r2, #0
 8000282:	601a      	str	r2, [r3, #0]
 8000284:	605a      	str	r2, [r3, #4]
 8000286:	609a      	str	r2, [r3, #8]
 8000288:	60da      	str	r2, [r3, #12]
 800028a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	605a      	str	r2, [r3, #4]
 8000294:	609a      	str	r2, [r3, #8]
 8000296:	60da      	str	r2, [r3, #12]
 8000298:	611a      	str	r2, [r3, #16]
 800029a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800029c:	2302      	movs	r3, #2
 800029e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a0:	2301      	movs	r3, #1
 80002a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a4:	2310      	movs	r3, #16
 80002a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002a8:	2300      	movs	r3, #0
 80002aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80002b0:	4618      	mov	r0, r3
 80002b2:	f001 fca5 	bl	8001c00 <HAL_RCC_OscConfig>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002bc:	f000 f8d2 	bl	8000464 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80002c0:	230f      	movs	r3, #15
 80002c2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002c4:	2300      	movs	r3, #0
 80002c6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002d4:	f107 031c 	add.w	r3, r7, #28
 80002d8:	2100      	movs	r1, #0
 80002da:	4618      	mov	r0, r3
 80002dc:	f002 fc9e 	bl	8002c1c <HAL_RCC_ClockConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002e6:	f000 f8bd 	bl	8000464 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80002ea:	2301      	movs	r3, #1
 80002ec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80002ee:	2300      	movs	r3, #0
 80002f0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	4618      	mov	r0, r3
 80002f6:	f002 fed5 	bl	80030a4 <HAL_RCCEx_PeriphCLKConfig>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000300:	f000 f8b0 	bl	8000464 <Error_Handler>
  }
}
 8000304:	bf00      	nop
 8000306:	3758      	adds	r7, #88	@ 0x58
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}

0800030c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000310:	4b15      	ldr	r3, [pc, #84]	@ (8000368 <MX_USART1_UART_Init+0x5c>)
 8000312:	4a16      	ldr	r2, [pc, #88]	@ (800036c <MX_USART1_UART_Init+0x60>)
 8000314:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000316:	4b14      	ldr	r3, [pc, #80]	@ (8000368 <MX_USART1_UART_Init+0x5c>)
 8000318:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800031c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800031e:	4b12      	ldr	r3, [pc, #72]	@ (8000368 <MX_USART1_UART_Init+0x5c>)
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000324:	4b10      	ldr	r3, [pc, #64]	@ (8000368 <MX_USART1_UART_Init+0x5c>)
 8000326:	2200      	movs	r2, #0
 8000328:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800032a:	4b0f      	ldr	r3, [pc, #60]	@ (8000368 <MX_USART1_UART_Init+0x5c>)
 800032c:	2200      	movs	r2, #0
 800032e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000330:	4b0d      	ldr	r3, [pc, #52]	@ (8000368 <MX_USART1_UART_Init+0x5c>)
 8000332:	220c      	movs	r2, #12
 8000334:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000336:	4b0c      	ldr	r3, [pc, #48]	@ (8000368 <MX_USART1_UART_Init+0x5c>)
 8000338:	2200      	movs	r2, #0
 800033a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800033c:	4b0a      	ldr	r3, [pc, #40]	@ (8000368 <MX_USART1_UART_Init+0x5c>)
 800033e:	2200      	movs	r2, #0
 8000340:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000342:	4b09      	ldr	r3, [pc, #36]	@ (8000368 <MX_USART1_UART_Init+0x5c>)
 8000344:	2200      	movs	r2, #0
 8000346:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000348:	4b07      	ldr	r3, [pc, #28]	@ (8000368 <MX_USART1_UART_Init+0x5c>)
 800034a:	2200      	movs	r2, #0
 800034c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800034e:	2300      	movs	r3, #0
 8000350:	2200      	movs	r2, #0
 8000352:	2100      	movs	r1, #0
 8000354:	4804      	ldr	r0, [pc, #16]	@ (8000368 <MX_USART1_UART_Init+0x5c>)
 8000356:	f004 fb2a 	bl	80049ae <HAL_RS485Ex_Init>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000360:	f000 f880 	bl	8000464 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8000364:	bf00      	nop
 8000366:	bd80      	pop	{r7, pc}
 8000368:	200000bc 	.word	0x200000bc
 800036c:	40013800 	.word	0x40013800

08000370 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000376:	4b10      	ldr	r3, [pc, #64]	@ (80003b8 <MX_DMA_Init+0x48>)
 8000378:	695b      	ldr	r3, [r3, #20]
 800037a:	4a0f      	ldr	r2, [pc, #60]	@ (80003b8 <MX_DMA_Init+0x48>)
 800037c:	f043 0301 	orr.w	r3, r3, #1
 8000380:	6153      	str	r3, [r2, #20]
 8000382:	4b0d      	ldr	r3, [pc, #52]	@ (80003b8 <MX_DMA_Init+0x48>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	f003 0301 	and.w	r3, r3, #1
 800038a:	607b      	str	r3, [r7, #4]
 800038c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800038e:	2200      	movs	r2, #0
 8000390:	2105      	movs	r1, #5
 8000392:	200e      	movs	r0, #14
 8000394:	f001 f884 	bl	80014a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000398:	200e      	movs	r0, #14
 800039a:	f001 f89d 	bl	80014d8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800039e:	2200      	movs	r2, #0
 80003a0:	2105      	movs	r1, #5
 80003a2:	200f      	movs	r0, #15
 80003a4:	f001 f87c 	bl	80014a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80003a8:	200f      	movs	r0, #15
 80003aa:	f001 f895 	bl	80014d8 <HAL_NVIC_EnableIRQ>
}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40021000 	.word	0x40021000

080003bc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000400 <MX_GPIO_Init+0x44>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000400 <MX_GPIO_Init+0x44>)
 80003c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003cc:	6153      	str	r3, [r2, #20]
 80003ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000400 <MX_GPIO_Init+0x44>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003d6:	607b      	str	r3, [r7, #4]
 80003d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003da:	4b09      	ldr	r3, [pc, #36]	@ (8000400 <MX_GPIO_Init+0x44>)
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	4a08      	ldr	r2, [pc, #32]	@ (8000400 <MX_GPIO_Init+0x44>)
 80003e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80003e4:	6153      	str	r3, [r2, #20]
 80003e6:	4b06      	ldr	r3, [pc, #24]	@ (8000400 <MX_GPIO_Init+0x44>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80003ee:	603b      	str	r3, [r7, #0]
 80003f0:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80003f2:	bf00      	nop
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	40021000 	.word	0x40021000

08000404 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1);
 800040c:	2001      	movs	r0, #1
 800040e:	f004 fca5 	bl	8004d5c <osDelay>
 8000412:	e7fb      	b.n	800040c <StartDefaultTask+0x8>

08000414 <ModbusCommunicationTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_ModbusCommunicationTask */
void ModbusCommunicationTask(void *argument)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ModbusCommunicationTask */
  /* Infinite loop */
  for (;;)
  {
    // Process Modbus communication
    Modbus_Process();
 800041c:	f000 fc38 	bl	8000c90 <Modbus_Process>

    // Small delay to prevent busy waiting
    osDelay(10);
 8000420:	200a      	movs	r0, #10
 8000422:	f004 fc9b 	bl	8004d5c <osDelay>
    Modbus_Process();
 8000426:	bf00      	nop
 8000428:	e7f8      	b.n	800041c <ModbusCommunicationTask+0x8>

0800042a <SensorUpdateTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_SensorUpdateTask */
void SensorUpdateTask(void *argument)
{
 800042a:	b580      	push	{r7, lr}
 800042c:	b082      	sub	sp, #8
 800042e:	af00      	add	r7, sp, #0
 8000430:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SensorUpdateTask */
  /* Infinite loop */
  for (;;)
  {
    // Update test values
    Modbus_Test_Update();
 8000432:	f000 fc9d 	bl	8000d70 <Modbus_Test_Update>

    // Delay for 100ms between updates
    osDelay(100);
 8000436:	2064      	movs	r0, #100	@ 0x64
 8000438:	f004 fc90 	bl	8004d5c <osDelay>
    Modbus_Test_Update();
 800043c:	bf00      	nop
 800043e:	e7f8      	b.n	8000432 <SensorUpdateTask+0x8>

08000440 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a04      	ldr	r2, [pc, #16]	@ (8000460 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d101      	bne.n	8000456 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000452:	f000 ff4d 	bl	80012f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000456:	bf00      	nop
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	40001000 	.word	0x40001000

08000464 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000468:	b672      	cpsid	i
}
 800046a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800046c:	bf00      	nop
 800046e:	e7fd      	b.n	800046c <Error_Handler+0x8>

08000470 <mbutils_crc16>:
 * @param  buffer: Data buffer
 * @param  length: Buffer length
 * @retval CRC-16 value
 */
uint16_t mbutils_crc16(const uint8_t *buffer, uint16_t length)
{
 8000470:	b480      	push	{r7}
 8000472:	b085      	sub	sp, #20
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
 8000478:	460b      	mov	r3, r1
 800047a:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 800047c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000480:	81fb      	strh	r3, [r7, #14]

    for (uint16_t i = 0; i < length; i++)
 8000482:	2300      	movs	r3, #0
 8000484:	81bb      	strh	r3, [r7, #12]
 8000486:	e011      	b.n	80004ac <mbutils_crc16+0x3c>
    {
        crc = (crc >> 8) ^ crc16_table[(crc ^ buffer[i]) & 0xFF];
 8000488:	89fb      	ldrh	r3, [r7, #14]
 800048a:	0a1b      	lsrs	r3, r3, #8
 800048c:	b29a      	uxth	r2, r3
 800048e:	89fb      	ldrh	r3, [r7, #14]
 8000490:	89b9      	ldrh	r1, [r7, #12]
 8000492:	6878      	ldr	r0, [r7, #4]
 8000494:	4401      	add	r1, r0
 8000496:	7809      	ldrb	r1, [r1, #0]
 8000498:	404b      	eors	r3, r1
 800049a:	b2db      	uxtb	r3, r3
 800049c:	4909      	ldr	r1, [pc, #36]	@ (80004c4 <mbutils_crc16+0x54>)
 800049e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80004a2:	4053      	eors	r3, r2
 80004a4:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < length; i++)
 80004a6:	89bb      	ldrh	r3, [r7, #12]
 80004a8:	3301      	adds	r3, #1
 80004aa:	81bb      	strh	r3, [r7, #12]
 80004ac:	89ba      	ldrh	r2, [r7, #12]
 80004ae:	887b      	ldrh	r3, [r7, #2]
 80004b0:	429a      	cmp	r2, r3
 80004b2:	d3e9      	bcc.n	8000488 <mbutils_crc16+0x18>
    }

    return crc;
 80004b4:	89fb      	ldrh	r3, [r7, #14]
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	3714      	adds	r7, #20
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	08008220 	.word	0x08008220

080004c8 <mbutils_crc16_update>:
 * @param  crc: Current CRC value
 * @param  data: New data byte
 * @retval Updated CRC value
 */
uint16_t mbutils_crc16_update(uint16_t crc, uint8_t data)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	460a      	mov	r2, r1
 80004d2:	80fb      	strh	r3, [r7, #6]
 80004d4:	4613      	mov	r3, r2
 80004d6:	717b      	strb	r3, [r7, #5]
    return (crc >> 8) ^ crc16_table[(crc ^ data) & 0xFF];
 80004d8:	88fb      	ldrh	r3, [r7, #6]
 80004da:	0a1b      	lsrs	r3, r3, #8
 80004dc:	b29a      	uxth	r2, r3
 80004de:	88f9      	ldrh	r1, [r7, #6]
 80004e0:	797b      	ldrb	r3, [r7, #5]
 80004e2:	404b      	eors	r3, r1
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	4905      	ldr	r1, [pc, #20]	@ (80004fc <mbutils_crc16_update+0x34>)
 80004e8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80004ec:	4053      	eors	r3, r2
 80004ee:	b29b      	uxth	r3, r3
 80004f0:	4618      	mov	r0, r3
 80004f2:	370c      	adds	r7, #12
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr
 80004fc:	08008220 	.word	0x08008220

08000500 <mbus_open>:
 * @brief  Open new Modbus context
 * @param  pconf: Modbus configuration
 * @retval Context handle or MBUS_ERROR
 */
mbus_t mbus_open(Modbus_Conf_t *pconf)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
    mbus_t context;

    for (context = 0; context < STMODBUS_COUNT_CONTEXT; context++)
 8000508:	2300      	movs	r3, #0
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	e00c      	b.n	8000528 <mbus_open+0x28>
    {
        if (g_mbusContext[context].open == 0)
 800050e:	4a1e      	ldr	r2, [pc, #120]	@ (8000588 <mbus_open+0x88>)
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	2134      	movs	r1, #52	@ 0x34
 8000514:	fb01 f303 	mul.w	r3, r1, r3
 8000518:	4413      	add	r3, r2
 800051a:	3324      	adds	r3, #36	@ 0x24
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d006      	beq.n	8000530 <mbus_open+0x30>
    for (context = 0; context < STMODBUS_COUNT_CONTEXT; context++)
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	3301      	adds	r3, #1
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	2b00      	cmp	r3, #0
 800052c:	ddef      	ble.n	800050e <mbus_open+0xe>
 800052e:	e000      	b.n	8000532 <mbus_open+0x32>
        {
            break;
 8000530:	bf00      	nop
        }
    }

    if (context == STMODBUS_COUNT_CONTEXT)
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	2b01      	cmp	r3, #1
 8000536:	d102      	bne.n	800053e <mbus_open+0x3e>
        return (mbus_t)MBUS_ERROR;
 8000538:	f04f 33ff 	mov.w	r3, #4294967295
 800053c:	e01f      	b.n	800057e <mbus_open+0x7e>

    // Clear context
    memset(&g_mbusContext[context], 0, sizeof(_stmodbus_context_t));
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	2234      	movs	r2, #52	@ 0x34
 8000542:	fb02 f303 	mul.w	r3, r2, r3
 8000546:	4a10      	ldr	r2, [pc, #64]	@ (8000588 <mbus_open+0x88>)
 8000548:	4413      	add	r3, r2
 800054a:	2234      	movs	r2, #52	@ 0x34
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f007 f9a9 	bl	80078a6 <memset>

    // Copy config
    memcpy((void *)&g_mbusContext[context].conf, (void *)pconf, sizeof(Modbus_Conf_t));
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	2234      	movs	r2, #52	@ 0x34
 8000558:	fb02 f303 	mul.w	r3, r2, r3
 800055c:	4a0a      	ldr	r2, [pc, #40]	@ (8000588 <mbus_open+0x88>)
 800055e:	4413      	add	r3, r2
 8000560:	2224      	movs	r2, #36	@ 0x24
 8000562:	6879      	ldr	r1, [r7, #4]
 8000564:	4618      	mov	r0, r3
 8000566:	f007 fa78 	bl	8007a5a <memcpy>

    g_mbusContext[context].open = 1;
 800056a:	4a07      	ldr	r2, [pc, #28]	@ (8000588 <mbus_open+0x88>)
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	2134      	movs	r1, #52	@ 0x34
 8000570:	fb01 f303 	mul.w	r3, r1, r3
 8000574:	4413      	add	r3, r2
 8000576:	3324      	adds	r3, #36	@ 0x24
 8000578:	2201      	movs	r2, #1
 800057a:	701a      	strb	r2, [r3, #0]
    return context;
 800057c:	68fb      	ldr	r3, [r7, #12]
}
 800057e:	4618      	mov	r0, r3
 8000580:	3710      	adds	r7, #16
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	200001d8 	.word	0x200001d8

0800058c <mbus_poll>:
 * @param  mb_context: Modbus context
 * @param  data: Received byte
 * @retval Status
 */
mbus_status_t mbus_poll(mbus_t mb_context, uint8_t data)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	460b      	mov	r3, r1
 8000596:	70fb      	strb	r3, [r7, #3]
    _stmodbus_context_t *ctx = &g_mbusContext[mb_context];
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2234      	movs	r2, #52	@ 0x34
 800059c:	fb02 f303 	mul.w	r3, r2, r3
 80005a0:	4a6b      	ldr	r2, [pc, #428]	@ (8000750 <mbus_poll+0x1c4>)
 80005a2:	4413      	add	r3, r2
 80005a4:	60fb      	str	r3, [r7, #12]

    // Update CRC
    ctx->crc16 = mbutils_crc16_update(ctx->crc16, data);
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80005aa:	78fa      	ldrb	r2, [r7, #3]
 80005ac:	4611      	mov	r1, r2
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff ff8a 	bl	80004c8 <mbutils_crc16_update>
 80005b4:	4603      	mov	r3, r0
 80005b6:	461a      	mov	r2, r3
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	84da      	strh	r2, [r3, #38]	@ 0x26

    // Process based on current state
    switch (ctx->state)
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d002      	beq.n	80005cc <mbus_poll+0x40>
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d013      	beq.n	80005f2 <mbus_poll+0x66>
 80005ca:	e0af      	b.n	800072c <mbus_poll+0x1a0>
    {
    case MBUS_STATE_IDLE:
        // Check if this is our slave address
        if (data == ctx->conf.devaddr)
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	78fa      	ldrb	r2, [r7, #3]
 80005d2:	429a      	cmp	r2, r3
 80005d4:	f040 80b3 	bne.w	800073e <mbus_poll+0x1b2>
        {
            ctx->state = MBUS_STATE_RECEIVING;
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	2201      	movs	r2, #1
 80005dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
            ctx->header[0] = data;
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	78fa      	ldrb	r2, [r7, #3]
 80005e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            ctx->header_len = 1;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	2201      	movs	r2, #1
 80005ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        }
        break;
 80005f0:	e0a5      	b.n	800073e <mbus_poll+0x1b2>

    case MBUS_STATE_RECEIVING:
        // Continue receiving frame
        if (ctx->header_len < sizeof(ctx->header))
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80005f8:	2b07      	cmp	r3, #7
 80005fa:	f200 808e 	bhi.w	800071a <mbus_poll+0x18e>
        {
            ctx->header[ctx->header_len++] = data;
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000604:	1c5a      	adds	r2, r3, #1
 8000606:	b2d1      	uxtb	r1, r2
 8000608:	68fa      	ldr	r2, [r7, #12]
 800060a:	f882 1030 	strb.w	r1, [r2, #48]	@ 0x30
 800060e:	461a      	mov	r2, r3
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	4413      	add	r3, r2
 8000614:	78fa      	ldrb	r2, [r7, #3]
 8000616:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

            // Check if we have a complete Modbus frame (minimum 8 bytes for function 3/4/6/16)
            if (ctx->header_len >= 8)
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000620:	2b07      	cmp	r3, #7
 8000622:	f240 808e 	bls.w	8000742 <mbus_poll+0x1b6>
            {
                // Validate CRC (last 2 bytes)
                uint16_t received_crc = (ctx->header[ctx->header_len - 1] << 8) | ctx->header[ctx->header_len - 2];
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800062c:	3b01      	subs	r3, #1
 800062e:	68fa      	ldr	r2, [r7, #12]
 8000630:	4413      	add	r3, r2
 8000632:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8000636:	b21b      	sxth	r3, r3
 8000638:	021b      	lsls	r3, r3, #8
 800063a:	b21a      	sxth	r2, r3
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000642:	3b02      	subs	r3, #2
 8000644:	68f9      	ldr	r1, [r7, #12]
 8000646:	440b      	add	r3, r1
 8000648:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800064c:	b21b      	sxth	r3, r3
 800064e:	4313      	orrs	r3, r2
 8000650:	b21b      	sxth	r3, r3
 8000652:	817b      	strh	r3, [r7, #10]
                uint16_t calculated_crc = mbutils_crc16(ctx->header, ctx->header_len - 2);
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000660:	3b02      	subs	r3, #2
 8000662:	b29b      	uxth	r3, r3
 8000664:	4619      	mov	r1, r3
 8000666:	4610      	mov	r0, r2
 8000668:	f7ff ff02 	bl	8000470 <mbutils_crc16>
 800066c:	4603      	mov	r3, r0
 800066e:	813b      	strh	r3, [r7, #8]

                if (received_crc == calculated_crc)
 8000670:	897a      	ldrh	r2, [r7, #10]
 8000672:	893b      	ldrh	r3, [r7, #8]
 8000674:	429a      	cmp	r2, r3
 8000676:	d147      	bne.n	8000708 <mbus_poll+0x17c>
                {
                    // Process the frame
                    ctx->state = MBUS_STATE_PROCESSING;
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	2202      	movs	r2, #2
 800067c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

                    // Handle different function codes
                    switch (ctx->header[1])
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8000686:	3b03      	subs	r3, #3
 8000688:	2b0d      	cmp	r3, #13
 800068a:	d82f      	bhi.n	80006ec <mbus_poll+0x160>
 800068c:	a201      	add	r2, pc, #4	@ (adr r2, 8000694 <mbus_poll+0x108>)
 800068e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000692:	bf00      	nop
 8000694:	080006cd 	.word	0x080006cd
 8000698:	080006d5 	.word	0x080006d5
 800069c:	080006ed 	.word	0x080006ed
 80006a0:	080006dd 	.word	0x080006dd
 80006a4:	080006ed 	.word	0x080006ed
 80006a8:	080006ed 	.word	0x080006ed
 80006ac:	080006ed 	.word	0x080006ed
 80006b0:	080006ed 	.word	0x080006ed
 80006b4:	080006ed 	.word	0x080006ed
 80006b8:	080006ed 	.word	0x080006ed
 80006bc:	080006ed 	.word	0x080006ed
 80006c0:	080006ed 	.word	0x080006ed
 80006c4:	080006ed 	.word	0x080006ed
 80006c8:	080006e5 	.word	0x080006e5
                    {
                    case MBUS_FUNC_READ_REGS: // Function 3 - Read Holding Registers
                        Modbus_ProcessReadRegisters(ctx);
 80006cc:	68f8      	ldr	r0, [r7, #12]
 80006ce:	f000 f841 	bl	8000754 <Modbus_ProcessReadRegisters>
                        break;
 80006d2:	e010      	b.n	80006f6 <mbus_poll+0x16a>

                    case MBUS_FUNC_READ_INPUT_REGS: // Function 4 - Read Input Registers
                        Modbus_ProcessReadInputRegisters(ctx);
 80006d4:	68f8      	ldr	r0, [r7, #12]
 80006d6:	f000 f91c 	bl	8000912 <Modbus_ProcessReadInputRegisters>
                        break;
 80006da:	e00c      	b.n	80006f6 <mbus_poll+0x16a>

                    case MBUS_FUNC_WRITE_REG: // Function 6 - Write Single Register
                        Modbus_ProcessWriteRegister(ctx);
 80006dc:	68f8      	ldr	r0, [r7, #12]
 80006de:	f000 f923 	bl	8000928 <Modbus_ProcessWriteRegister>
                        break;
 80006e2:	e008      	b.n	80006f6 <mbus_poll+0x16a>

                    case MBUS_FUNC_WRITE_REGS: // Function 16 - Write Multiple Registers
                        Modbus_ProcessWriteRegisters(ctx);
 80006e4:	68f8      	ldr	r0, [r7, #12]
 80006e6:	f000 f96b 	bl	80009c0 <Modbus_ProcessWriteRegisters>
                        break;
 80006ea:	e004      	b.n	80006f6 <mbus_poll+0x16a>

                    default:
                        Modbus_SendErrorResponse(ctx, MBUS_RESPONSE_ILLEGAL_FUNCTION);
 80006ec:	2101      	movs	r1, #1
 80006ee:	68f8      	ldr	r0, [r7, #12]
 80006f0:	f000 f9f4 	bl	8000adc <Modbus_SendErrorResponse>
                        break;
 80006f4:	bf00      	nop
                    }

                    // Reset state for next frame
                    ctx->state = MBUS_STATE_IDLE;
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	2200      	movs	r2, #0
 80006fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                    ctx->header_len = 0;
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	2200      	movs	r2, #0
 8000702:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        {
            // Buffer overflow, reset
            ctx->state = MBUS_STATE_IDLE;
            ctx->header_len = 0;
        }
        break;
 8000706:	e01c      	b.n	8000742 <mbus_poll+0x1b6>
                    ctx->state = MBUS_STATE_IDLE;
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	2200      	movs	r2, #0
 800070c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                    ctx->header_len = 0;
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	2200      	movs	r2, #0
 8000714:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        break;
 8000718:	e013      	b.n	8000742 <mbus_poll+0x1b6>
            ctx->state = MBUS_STATE_IDLE;
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	2200      	movs	r2, #0
 800071e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
            ctx->header_len = 0;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	2200      	movs	r2, #0
 8000726:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        break;
 800072a:	e00a      	b.n	8000742 <mbus_poll+0x1b6>

    default:
        // Reset to idle on unknown state
        ctx->state = MBUS_STATE_IDLE;
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	2200      	movs	r2, #0
 8000730:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
        ctx->header_len = 0;
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	2200      	movs	r2, #0
 8000738:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        break;
 800073c:	e002      	b.n	8000744 <mbus_poll+0x1b8>
        break;
 800073e:	bf00      	nop
 8000740:	e000      	b.n	8000744 <mbus_poll+0x1b8>
        break;
 8000742:	bf00      	nop
    }

    return MBUS_OK;
 8000744:	2300      	movs	r3, #0
}
 8000746:	4618      	mov	r0, r3
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	200001d8 	.word	0x200001d8

08000754 <Modbus_ProcessReadRegisters>:
}

/* Modbus frame processing functions */

void Modbus_ProcessReadRegisters(_stmodbus_context_t *ctx)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b0c6      	sub	sp, #280	@ 0x118
 8000758:	af00      	add	r7, sp, #0
 800075a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800075e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000762:	6018      	str	r0, [r3, #0]
    // Extract register address and count from frame
    uint16_t start_addr = (ctx->header[2] << 8) | ctx->header[3];
 8000764:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000768:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000772:	b21b      	sxth	r3, r3
 8000774:	021b      	lsls	r3, r3, #8
 8000776:	b21a      	sxth	r2, r3
 8000778:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800077c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8000786:	b21b      	sxth	r3, r3
 8000788:	4313      	orrs	r3, r2
 800078a:	b21b      	sxth	r3, r3
 800078c:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
    uint16_t reg_count = (ctx->header[4] << 8) | ctx->header[5];
 8000790:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000794:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800079e:	b21b      	sxth	r3, r3
 80007a0:	021b      	lsls	r3, r3, #8
 80007a2:	b21a      	sxth	r2, r3
 80007a4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80007a8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80007b2:	b21b      	sxth	r3, r3
 80007b4:	4313      	orrs	r3, r2
 80007b6:	b21b      	sxth	r3, r3
 80007b8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112

    // Validate parameters
    if (reg_count == 0 || reg_count > 125)
 80007bc:	f8b7 3112 	ldrh.w	r3, [r7, #274]	@ 0x112
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d003      	beq.n	80007cc <Modbus_ProcessReadRegisters+0x78>
 80007c4:	f8b7 3112 	ldrh.w	r3, [r7, #274]	@ 0x112
 80007c8:	2b7d      	cmp	r3, #125	@ 0x7d
 80007ca:	d908      	bls.n	80007de <Modbus_ProcessReadRegisters+0x8a>
    {
        Modbus_SendErrorResponse(ctx, MBUS_RESPONSE_ILLEGAL_DATA_VALUE);
 80007cc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80007d0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80007d4:	2103      	movs	r1, #3
 80007d6:	6818      	ldr	r0, [r3, #0]
 80007d8:	f000 f980 	bl	8000adc <Modbus_SendErrorResponse>
 80007dc:	e095      	b.n	800090a <Modbus_ProcessReadRegisters+0x1b6>
        return;
    }

    // Build response
    uint8_t response[256];
    response[0] = ctx->conf.devaddr; // Slave address
 80007de:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80007e2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	781a      	ldrb	r2, [r3, #0]
 80007ea:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80007ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80007f2:	701a      	strb	r2, [r3, #0]
    response[1] = ctx->header[1];    // Function code
 80007f4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80007f8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 8000802:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000806:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800080a:	705a      	strb	r2, [r3, #1]
    response[2] = reg_count * 2;     // Byte count
 800080c:	f8b7 3112 	ldrh.w	r3, [r7, #274]	@ 0x112
 8000810:	b2db      	uxtb	r3, r3
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	b2da      	uxtb	r2, r3
 8000816:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800081a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800081e:	709a      	strb	r2, [r3, #2]

    // Read registers
    for (uint16_t i = 0; i < reg_count; i++)
 8000820:	2300      	movs	r3, #0
 8000822:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
 8000826:	e031      	b.n	800088c <Modbus_ProcessReadRegisters+0x138>
    {
        uint16_t reg_value = ctx->conf.read(start_addr + i + 40001);
 8000828:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800082c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	68da      	ldr	r2, [r3, #12]
 8000834:	f8b7 1114 	ldrh.w	r1, [r7, #276]	@ 0x114
 8000838:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 800083c:	440b      	add	r3, r1
 800083e:	f503 431c 	add.w	r3, r3, #39936	@ 0x9c00
 8000842:	3341      	adds	r3, #65	@ 0x41
 8000844:	4618      	mov	r0, r3
 8000846:	4790      	blx	r2
 8000848:	4603      	mov	r3, r0
 800084a:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
        response[3 + (i * 2)] = reg_value >> 8;
 800084e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8000852:	0a1b      	lsrs	r3, r3, #8
 8000854:	b29a      	uxth	r2, r3
 8000856:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	3303      	adds	r3, #3
 800085e:	b2d1      	uxtb	r1, r2
 8000860:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000864:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000868:	54d1      	strb	r1, [r2, r3]
        response[3 + (i * 2) + 1] = reg_value & 0xFF;
 800086a:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 800086e:	3302      	adds	r3, #2
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	f8b7 210e 	ldrh.w	r2, [r7, #270]	@ 0x10e
 8000876:	b2d1      	uxtb	r1, r2
 8000878:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800087c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000880:	54d1      	strb	r1, [r2, r3]
    for (uint16_t i = 0; i < reg_count; i++)
 8000882:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 8000886:	3301      	adds	r3, #1
 8000888:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
 800088c:	f8b7 2116 	ldrh.w	r2, [r7, #278]	@ 0x116
 8000890:	f8b7 3112 	ldrh.w	r3, [r7, #274]	@ 0x112
 8000894:	429a      	cmp	r2, r3
 8000896:	d3c7      	bcc.n	8000828 <Modbus_ProcessReadRegisters+0xd4>
    }

    // Calculate and append CRC
    uint16_t crc = mbutils_crc16(response, 3 + (reg_count * 2));
 8000898:	f8b7 3112 	ldrh.w	r3, [r7, #274]	@ 0x112
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	b29b      	uxth	r3, r3
 80008a0:	3303      	adds	r3, #3
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	f107 030c 	add.w	r3, r7, #12
 80008a8:	4611      	mov	r1, r2
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff fde0 	bl	8000470 <mbutils_crc16>
 80008b0:	4603      	mov	r3, r0
 80008b2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
    response[3 + (reg_count * 2)] = crc & 0xFF;
 80008b6:	f8b7 3112 	ldrh.w	r3, [r7, #274]	@ 0x112
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	3303      	adds	r3, #3
 80008be:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 80008c2:	b2d1      	uxtb	r1, r2
 80008c4:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80008c8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80008cc:	54d1      	strb	r1, [r2, r3]
    response[3 + (reg_count * 2) + 1] = (crc >> 8) & 0xFF;
 80008ce:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 80008d2:	0a1b      	lsrs	r3, r3, #8
 80008d4:	b29a      	uxth	r2, r3
 80008d6:	f8b7 3112 	ldrh.w	r3, [r7, #274]	@ 0x112
 80008da:	3302      	adds	r3, #2
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	b2d1      	uxtb	r1, r2
 80008e0:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80008e4:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80008e8:	54d1      	strb	r1, [r2, r3]

    // Send response
    ctx->conf.send(NULL, response, 5 + (reg_count * 2));
 80008ea:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80008ee:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	689b      	ldr	r3, [r3, #8]
 80008f6:	f8b7 2112 	ldrh.w	r2, [r7, #274]	@ 0x112
 80008fa:	0052      	lsls	r2, r2, #1
 80008fc:	b292      	uxth	r2, r2
 80008fe:	3205      	adds	r2, #5
 8000900:	b292      	uxth	r2, r2
 8000902:	f107 010c 	add.w	r1, r7, #12
 8000906:	2000      	movs	r0, #0
 8000908:	4798      	blx	r3
}
 800090a:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <Modbus_ProcessReadInputRegisters>:

void Modbus_ProcessReadInputRegisters(_stmodbus_context_t *ctx)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
    // For now, treat input registers the same as holding registers
    Modbus_ProcessReadRegisters(ctx);
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f7ff ff1a 	bl	8000754 <Modbus_ProcessReadRegisters>
}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <Modbus_ProcessWriteRegister>:

void Modbus_ProcessWriteRegister(_stmodbus_context_t *ctx)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
    // Extract register address and value from frame
    uint16_t reg_addr = (ctx->header[2] << 8) | ctx->header[3];
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000936:	b21b      	sxth	r3, r3
 8000938:	021b      	lsls	r3, r3, #8
 800093a:	b21a      	sxth	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8000942:	b21b      	sxth	r3, r3
 8000944:	4313      	orrs	r3, r2
 8000946:	b21b      	sxth	r3, r3
 8000948:	82fb      	strh	r3, [r7, #22]
    uint16_t reg_value = (ctx->header[4] << 8) | ctx->header[5];
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8000950:	b21b      	sxth	r3, r3
 8000952:	021b      	lsls	r3, r3, #8
 8000954:	b21a      	sxth	r2, r3
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800095c:	b21b      	sxth	r3, r3
 800095e:	4313      	orrs	r3, r2
 8000960:	b21b      	sxth	r3, r3
 8000962:	82bb      	strh	r3, [r7, #20]

    // Write register
    ctx->conf.write(reg_addr + 40001, reg_value);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	691a      	ldr	r2, [r3, #16]
 8000968:	8afb      	ldrh	r3, [r7, #22]
 800096a:	f503 431c 	add.w	r3, r3, #39936	@ 0x9c00
 800096e:	3341      	adds	r3, #65	@ 0x41
 8000970:	4618      	mov	r0, r3
 8000972:	8abb      	ldrh	r3, [r7, #20]
 8000974:	4619      	mov	r1, r3
 8000976:	4790      	blx	r2

    // Send echo response (same as request for function 6)
    uint8_t response[8];
    memcpy(response, ctx->header, 6); // Copy first 6 bytes
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800097e:	f107 0308 	add.w	r3, r7, #8
 8000982:	2206      	movs	r2, #6
 8000984:	4618      	mov	r0, r3
 8000986:	f007 f868 	bl	8007a5a <memcpy>

    // Calculate and append CRC
    uint16_t crc = mbutils_crc16(response, 6);
 800098a:	f107 0308 	add.w	r3, r7, #8
 800098e:	2106      	movs	r1, #6
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff fd6d 	bl	8000470 <mbutils_crc16>
 8000996:	4603      	mov	r3, r0
 8000998:	827b      	strh	r3, [r7, #18]
    response[6] = crc & 0xFF;
 800099a:	8a7b      	ldrh	r3, [r7, #18]
 800099c:	b2db      	uxtb	r3, r3
 800099e:	73bb      	strb	r3, [r7, #14]
    response[7] = (crc >> 8) & 0xFF;
 80009a0:	8a7b      	ldrh	r3, [r7, #18]
 80009a2:	0a1b      	lsrs	r3, r3, #8
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	73fb      	strb	r3, [r7, #15]

    // Send response
    ctx->conf.send(NULL, response, 8);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	f107 0108 	add.w	r1, r7, #8
 80009b2:	2208      	movs	r2, #8
 80009b4:	2000      	movs	r0, #0
 80009b6:	4798      	blx	r3
}
 80009b8:	bf00      	nop
 80009ba:	3718      	adds	r7, #24
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <Modbus_ProcessWriteRegisters>:

void Modbus_ProcessWriteRegisters(_stmodbus_context_t *ctx)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b088      	sub	sp, #32
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
    // Extract parameters from frame
    uint16_t start_addr = (ctx->header[2] << 8) | ctx->header[3];
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80009ce:	b21b      	sxth	r3, r3
 80009d0:	021b      	lsls	r3, r3, #8
 80009d2:	b21a      	sxth	r2, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80009da:	b21b      	sxth	r3, r3
 80009dc:	4313      	orrs	r3, r2
 80009de:	b21b      	sxth	r3, r3
 80009e0:	83bb      	strh	r3, [r7, #28]
    uint16_t reg_count = (ctx->header[4] << 8) | ctx->header[5];
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80009e8:	b21b      	sxth	r3, r3
 80009ea:	021b      	lsls	r3, r3, #8
 80009ec:	b21a      	sxth	r2, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80009f4:	b21b      	sxth	r3, r3
 80009f6:	4313      	orrs	r3, r2
 80009f8:	b21b      	sxth	r3, r3
 80009fa:	837b      	strh	r3, [r7, #26]
    uint8_t byte_count = ctx->header[6];
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8000a02:	767b      	strb	r3, [r7, #25]

    // Validate parameters
    if (reg_count == 0 || reg_count > 123 || byte_count != reg_count * 2)
 8000a04:	8b7b      	ldrh	r3, [r7, #26]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d007      	beq.n	8000a1a <Modbus_ProcessWriteRegisters+0x5a>
 8000a0a:	8b7b      	ldrh	r3, [r7, #26]
 8000a0c:	2b7b      	cmp	r3, #123	@ 0x7b
 8000a0e:	d804      	bhi.n	8000a1a <Modbus_ProcessWriteRegisters+0x5a>
 8000a10:	7e7a      	ldrb	r2, [r7, #25]
 8000a12:	8b7b      	ldrh	r3, [r7, #26]
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d004      	beq.n	8000a24 <Modbus_ProcessWriteRegisters+0x64>
    {
        Modbus_SendErrorResponse(ctx, MBUS_RESPONSE_ILLEGAL_DATA_VALUE);
 8000a1a:	2103      	movs	r1, #3
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f000 f85d 	bl	8000adc <Modbus_SendErrorResponse>
 8000a22:	e058      	b.n	8000ad6 <Modbus_ProcessWriteRegisters+0x116>
        return;
    }

    // Write registers
    for (uint16_t i = 0; i < reg_count; i++)
 8000a24:	2300      	movs	r3, #0
 8000a26:	83fb      	strh	r3, [r7, #30]
 8000a28:	e023      	b.n	8000a72 <Modbus_ProcessWriteRegisters+0xb2>
    {
        uint16_t reg_value = (ctx->header[7 + (i * 2)] << 8) | ctx->header[8 + (i * 2)];
 8000a2a:	8bfb      	ldrh	r3, [r7, #30]
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	3307      	adds	r3, #7
 8000a30:	687a      	ldr	r2, [r7, #4]
 8000a32:	4413      	add	r3, r2
 8000a34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8000a38:	b21b      	sxth	r3, r3
 8000a3a:	021b      	lsls	r3, r3, #8
 8000a3c:	b21a      	sxth	r2, r3
 8000a3e:	8bfb      	ldrh	r3, [r7, #30]
 8000a40:	3304      	adds	r3, #4
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	6879      	ldr	r1, [r7, #4]
 8000a46:	440b      	add	r3, r1
 8000a48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8000a4c:	b21b      	sxth	r3, r3
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	b21b      	sxth	r3, r3
 8000a52:	82bb      	strh	r3, [r7, #20]
        ctx->conf.write(start_addr + i + 40001, reg_value);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	691a      	ldr	r2, [r3, #16]
 8000a58:	8bb9      	ldrh	r1, [r7, #28]
 8000a5a:	8bfb      	ldrh	r3, [r7, #30]
 8000a5c:	440b      	add	r3, r1
 8000a5e:	f503 431c 	add.w	r3, r3, #39936	@ 0x9c00
 8000a62:	3341      	adds	r3, #65	@ 0x41
 8000a64:	4618      	mov	r0, r3
 8000a66:	8abb      	ldrh	r3, [r7, #20]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4790      	blx	r2
    for (uint16_t i = 0; i < reg_count; i++)
 8000a6c:	8bfb      	ldrh	r3, [r7, #30]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	83fb      	strh	r3, [r7, #30]
 8000a72:	8bfa      	ldrh	r2, [r7, #30]
 8000a74:	8b7b      	ldrh	r3, [r7, #26]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d3d7      	bcc.n	8000a2a <Modbus_ProcessWriteRegisters+0x6a>
    }

    // Send response (address and count)
    uint8_t response[8];
    response[0] = ctx->conf.devaddr;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	733b      	strb	r3, [r7, #12]
    response[1] = ctx->header[1];
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8000a86:	737b      	strb	r3, [r7, #13]
    response[2] = ctx->header[2];
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000a8e:	73bb      	strb	r3, [r7, #14]
    response[3] = ctx->header[3];
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8000a96:	73fb      	strb	r3, [r7, #15]
    response[4] = ctx->header[4];
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8000a9e:	743b      	strb	r3, [r7, #16]
    response[5] = ctx->header[5];
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8000aa6:	747b      	strb	r3, [r7, #17]

    // Calculate and append CRC
    uint16_t crc = mbutils_crc16(response, 6);
 8000aa8:	f107 030c 	add.w	r3, r7, #12
 8000aac:	2106      	movs	r1, #6
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff fcde 	bl	8000470 <mbutils_crc16>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	82fb      	strh	r3, [r7, #22]
    response[6] = crc & 0xFF;
 8000ab8:	8afb      	ldrh	r3, [r7, #22]
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	74bb      	strb	r3, [r7, #18]
    response[7] = (crc >> 8) & 0xFF;
 8000abe:	8afb      	ldrh	r3, [r7, #22]
 8000ac0:	0a1b      	lsrs	r3, r3, #8
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	74fb      	strb	r3, [r7, #19]

    // Send response
    ctx->conf.send(NULL, response, 8);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	f107 010c 	add.w	r1, r7, #12
 8000ad0:	2208      	movs	r2, #8
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	4798      	blx	r3
}
 8000ad6:	3720      	adds	r7, #32
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <Modbus_SendErrorResponse>:

void Modbus_SendErrorResponse(_stmodbus_context_t *ctx, uint8_t error_code)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	70fb      	strb	r3, [r7, #3]
    uint8_t response[5];
    response[0] = ctx->conf.devaddr;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	723b      	strb	r3, [r7, #8]
    response[1] = ctx->header[1] | 0x80; // Function code with error bit
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8000af4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	727b      	strb	r3, [r7, #9]
    response[2] = error_code;
 8000afc:	78fb      	ldrb	r3, [r7, #3]
 8000afe:	72bb      	strb	r3, [r7, #10]

    // Calculate and append CRC
    uint16_t crc = mbutils_crc16(response, 3);
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	2103      	movs	r1, #3
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff fcb2 	bl	8000470 <mbutils_crc16>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	81fb      	strh	r3, [r7, #14]
    response[3] = crc & 0xFF;
 8000b10:	89fb      	ldrh	r3, [r7, #14]
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	72fb      	strb	r3, [r7, #11]
    response[4] = (crc >> 8) & 0xFF;
 8000b16:	89fb      	ldrh	r3, [r7, #14]
 8000b18:	0a1b      	lsrs	r3, r3, #8
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	733b      	strb	r3, [r7, #12]

    // Send error response
    ctx->conf.send(NULL, response, 5);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	f107 0108 	add.w	r1, r7, #8
 8000b28:	2205      	movs	r2, #5
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	4798      	blx	r3
 8000b2e:	bf00      	nop
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <Modbus_Device_Read>:
 * @brief  Modbus device read callback
 * @param  logical_address: Modbus logical address (40001, 40002, etc.)
 * @retval Register value
 */
uint16_t Modbus_Device_Read(uint32_t logical_address)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
    // Convert logical address to array index
    if (logical_address >= 40001 && logical_address <= 40020)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d90f      	bls.n	8000b6a <Modbus_Device_Read+0x32>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	f649 4254 	movw	r2, #40020	@ 0x9c54
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d80a      	bhi.n	8000b6a <Modbus_Device_Read+0x32>
    {
        uint16_t index = logical_address - 40001;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	f503 43c7 	add.w	r3, r3, #25472	@ 0x6380
 8000b5c:	333f      	adds	r3, #63	@ 0x3f
 8000b5e:	81fb      	strh	r3, [r7, #14]
        return device_registers[index];
 8000b60:	89fb      	ldrh	r3, [r7, #14]
 8000b62:	4a05      	ldr	r2, [pc, #20]	@ (8000b78 <Modbus_Device_Read+0x40>)
 8000b64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b68:	e000      	b.n	8000b6c <Modbus_Device_Read+0x34>
    }

    return 0; // Invalid address
 8000b6a:	2300      	movs	r3, #0
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	20000000 	.word	0x20000000

08000b7c <Modbus_Device_Write>:
 * @param  logical_address: Modbus logical address (40001, 40002, etc.)
 * @param  value: Value to write
 * @retval Written value
 */
uint16_t Modbus_Device_Write(uint32_t logical_address, uint16_t value)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	460b      	mov	r3, r1
 8000b86:	807b      	strh	r3, [r7, #2]
    // Convert logical address to array index
    if (logical_address >= 40001 && logical_address <= 40020)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d911      	bls.n	8000bb6 <Modbus_Device_Write+0x3a>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	f649 4254 	movw	r2, #40020	@ 0x9c54
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d80c      	bhi.n	8000bb6 <Modbus_Device_Write+0x3a>
    {
        uint16_t index = logical_address - 40001;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	f503 43c7 	add.w	r3, r3, #25472	@ 0x6380
 8000ba4:	333f      	adds	r3, #63	@ 0x3f
 8000ba6:	81fb      	strh	r3, [r7, #14]

        // Store the value (simplified - no special cases needed for basic testing)
        device_registers[index] = value;
 8000ba8:	89fb      	ldrh	r3, [r7, #14]
 8000baa:	4906      	ldr	r1, [pc, #24]	@ (8000bc4 <Modbus_Device_Write+0x48>)
 8000bac:	887a      	ldrh	r2, [r7, #2]
 8000bae:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        return value;
 8000bb2:	887b      	ldrh	r3, [r7, #2]
 8000bb4:	e000      	b.n	8000bb8 <Modbus_Device_Write+0x3c>
    }

    return 0; // Invalid address
 8000bb6:	2300      	movs	r3, #0
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	20000000 	.word	0x20000000

08000bc8 <Modbus_Device_SetRegister>:
 * @param  index: Register index (0-19 for 40001-40020)
 * @param  value: Value to set
 * @retval None
 */
void Modbus_Device_SetRegister(uint8_t index, uint16_t value)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	460a      	mov	r2, r1
 8000bd2:	71fb      	strb	r3, [r7, #7]
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	80bb      	strh	r3, [r7, #4]
    if (index < MODBUS_DEVICE_REGISTERS)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	2b13      	cmp	r3, #19
 8000bdc:	d804      	bhi.n	8000be8 <Modbus_Device_SetRegister+0x20>
    {
        device_registers[index] = value;
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	4904      	ldr	r1, [pc, #16]	@ (8000bf4 <Modbus_Device_SetRegister+0x2c>)
 8000be2:	88ba      	ldrh	r2, [r7, #4]
 8000be4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    }
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	20000000 	.word	0x20000000

08000bf8 <Modbus_Init>:
 * @brief  Initialize Modbus RTU slave
 * @param  None
 * @retval None
 */
void Modbus_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
    // Configure Modbus
    modbus_config.devaddr = MODBUS_SLAVE_ADDRESS;
 8000bfc:	4b1c      	ldr	r3, [pc, #112]	@ (8000c70 <Modbus_Init+0x78>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	701a      	strb	r2, [r3, #0]
    modbus_config.coils = 0;
 8000c02:	4b1b      	ldr	r3, [pc, #108]	@ (8000c70 <Modbus_Init+0x78>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	705a      	strb	r2, [r3, #1]
    modbus_config.discrete = 0;
 8000c08:	4b19      	ldr	r3, [pc, #100]	@ (8000c70 <Modbus_Init+0x78>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	709a      	strb	r2, [r3, #2]
    modbus_config.device = NULL;
 8000c0e:	4b18      	ldr	r3, [pc, #96]	@ (8000c70 <Modbus_Init+0x78>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	605a      	str	r2, [r3, #4]
    modbus_config.send = Modbus_SendData;
 8000c14:	4b16      	ldr	r3, [pc, #88]	@ (8000c70 <Modbus_Init+0x78>)
 8000c16:	4a17      	ldr	r2, [pc, #92]	@ (8000c74 <Modbus_Init+0x7c>)
 8000c18:	609a      	str	r2, [r3, #8]
    modbus_config.read = Modbus_Device_Read;
 8000c1a:	4b15      	ldr	r3, [pc, #84]	@ (8000c70 <Modbus_Init+0x78>)
 8000c1c:	4a16      	ldr	r2, [pc, #88]	@ (8000c78 <Modbus_Init+0x80>)
 8000c1e:	60da      	str	r2, [r3, #12]
    modbus_config.write = Modbus_Device_Write;
 8000c20:	4b13      	ldr	r3, [pc, #76]	@ (8000c70 <Modbus_Init+0x78>)
 8000c22:	4a16      	ldr	r2, [pc, #88]	@ (8000c7c <Modbus_Init+0x84>)
 8000c24:	611a      	str	r2, [r3, #16]
    modbus_config.sendbuf = modbus_tx_buffer;
 8000c26:	4b12      	ldr	r3, [pc, #72]	@ (8000c70 <Modbus_Init+0x78>)
 8000c28:	4a15      	ldr	r2, [pc, #84]	@ (8000c80 <Modbus_Init+0x88>)
 8000c2a:	615a      	str	r2, [r3, #20]
    modbus_config.sendbuf_sz = sizeof(modbus_tx_buffer);
 8000c2c:	4b10      	ldr	r3, [pc, #64]	@ (8000c70 <Modbus_Init+0x78>)
 8000c2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c32:	831a      	strh	r2, [r3, #24]
    modbus_config.recvbuf = modbus_rx_buffer;
 8000c34:	4b0e      	ldr	r3, [pc, #56]	@ (8000c70 <Modbus_Init+0x78>)
 8000c36:	4a13      	ldr	r2, [pc, #76]	@ (8000c84 <Modbus_Init+0x8c>)
 8000c38:	61da      	str	r2, [r3, #28]
    modbus_config.recvbuf_sz = sizeof(modbus_rx_buffer);
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c70 <Modbus_Init+0x78>)
 8000c3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c40:	841a      	strh	r2, [r3, #32]

    // Initialize Modbus context
    modbus_context = mbus_open(&modbus_config);
 8000c42:	480b      	ldr	r0, [pc, #44]	@ (8000c70 <Modbus_Init+0x78>)
 8000c44:	f7ff fc5c 	bl	8000500 <mbus_open>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c88 <Modbus_Init+0x90>)
 8000c4c:	6013      	str	r3, [r2, #0]

    // Note: device_registers are already initialized in modbus_device.c
    // with values: 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1

    // Start UART DMA reception
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, modbus_rx_buffer, sizeof(modbus_rx_buffer));
 8000c4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c52:	490c      	ldr	r1, [pc, #48]	@ (8000c84 <Modbus_Init+0x8c>)
 8000c54:	480d      	ldr	r0, [pc, #52]	@ (8000c8c <Modbus_Init+0x94>)
 8000c56:	f003 ff1b 	bl	8004a90 <HAL_UARTEx_ReceiveToIdle_DMA>

    // Enable UART idle line interrupt
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c8c <Modbus_Init+0x94>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b0a      	ldr	r3, [pc, #40]	@ (8000c8c <Modbus_Init+0x94>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f042 0210 	orr.w	r2, r2, #16
 8000c68:	601a      	str	r2, [r3, #0]

    // Modbus initialization complete
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000210 	.word	0x20000210
 8000c74:	08000ca1 	.word	0x08000ca1
 8000c78:	08000b39 	.word	0x08000b39
 8000c7c:	08000b7d 	.word	0x08000b7d
 8000c80:	20000334 	.word	0x20000334
 8000c84:	20000234 	.word	0x20000234
 8000c88:	2000020c 	.word	0x2000020c
 8000c8c:	200000bc 	.word	0x200000bc

08000c90 <Modbus_Process>:
 * @brief  Process Modbus communication
 * @param  None
 * @retval None
 */
void Modbus_Process(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
    // This function is called from RTOS task
    // Processing is handled in UART callback
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
	...

08000ca0 <Modbus_SendData>:
 * @param  data: Data to send
 * @param  size: Size of data
 * @retval Number of bytes sent
 */
static int Modbus_SendData(void *context, const uint8_t *data, const uint16_t size)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	4613      	mov	r3, r2
 8000cac:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, (uint8_t *)data, size, 1000);
 8000cae:	88fa      	ldrh	r2, [r7, #6]
 8000cb0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cb4:	68b9      	ldr	r1, [r7, #8]
 8000cb6:	4807      	ldr	r0, [pc, #28]	@ (8000cd4 <Modbus_SendData+0x34>)
 8000cb8:	f002 fda2 	bl	8003800 <HAL_UART_Transmit>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8000cc0:	7dfb      	ldrb	r3, [r7, #23]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d101      	bne.n	8000cca <Modbus_SendData+0x2a>
    {
        return size;
 8000cc6:	88fb      	ldrh	r3, [r7, #6]
 8000cc8:	e000      	b.n	8000ccc <Modbus_SendData+0x2c>
    }
    else
    {
        return 0;
 8000cca:	2300      	movs	r3, #0
    }
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3718      	adds	r7, #24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	200000bc 	.word	0x200000bc

08000cd8 <Modbus_GetContext>:
 * @brief  Get Modbus context
 * @param  None
 * @retval Modbus context
 */
mbus_t Modbus_GetContext(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
    return modbus_context;
 8000cdc:	4b03      	ldr	r3, [pc, #12]	@ (8000cec <Modbus_GetContext+0x14>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	2000020c 	.word	0x2000020c

08000cf0 <Modbus_Test_Init>:
 * @brief  Initialize Modbus test functions
 * @param  None
 * @retval None
 */
void Modbus_Test_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
    // Set initial test values - start with recognizable patterns
    Modbus_Device_SetRegister(0, 1000);    // 40001: Test sensor 1 - start at 1000
 8000cf4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	f7ff ff65 	bl	8000bc8 <Modbus_Device_SetRegister>
    Modbus_Device_SetRegister(1, 1100);    // 40002: Test sensor 2 - start at 1100
 8000cfe:	f240 414c 	movw	r1, #1100	@ 0x44c
 8000d02:	2001      	movs	r0, #1
 8000d04:	f7ff ff60 	bl	8000bc8 <Modbus_Device_SetRegister>
    Modbus_Device_SetRegister(2, 1200);    // 40003: Test sensor 3 - start at 1200
 8000d08:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8000d0c:	2002      	movs	r0, #2
 8000d0e:	f7ff ff5b 	bl	8000bc8 <Modbus_Device_SetRegister>
    Modbus_Device_SetRegister(3, 1300);    // 40004: Test sensor 4 - start at 1300
 8000d12:	f240 5114 	movw	r1, #1300	@ 0x514
 8000d16:	2003      	movs	r0, #3
 8000d18:	f7ff ff56 	bl	8000bc8 <Modbus_Device_SetRegister>
    Modbus_Device_SetRegister(4, 1400);    // 40005: Test sensor 5 - start at 1400
 8000d1c:	f44f 61af 	mov.w	r1, #1400	@ 0x578
 8000d20:	2004      	movs	r0, #4
 8000d22:	f7ff ff51 	bl	8000bc8 <Modbus_Device_SetRegister>
    Modbus_Device_SetRegister(5, 1500);    // 40006: Test sensor 6 - start at 1500
 8000d26:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8000d2a:	2005      	movs	r0, #5
 8000d2c:	f7ff ff4c 	bl	8000bc8 <Modbus_Device_SetRegister>
    Modbus_Device_SetRegister(6, 1600);    // 40007: Test sensor 7 - start at 1600
 8000d30:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000d34:	2006      	movs	r0, #6
 8000d36:	f7ff ff47 	bl	8000bc8 <Modbus_Device_SetRegister>
    Modbus_Device_SetRegister(7, 1700);    // 40008: Test sensor 8 - start at 1700
 8000d3a:	f240 61a4 	movw	r1, #1700	@ 0x6a4
 8000d3e:	2007      	movs	r0, #7
 8000d40:	f7ff ff42 	bl	8000bc8 <Modbus_Device_SetRegister>
    Modbus_Device_SetRegister(8, 1800);    // 40009: Test sensor 9 - start at 1800
 8000d44:	f44f 61e1 	mov.w	r1, #1800	@ 0x708
 8000d48:	2008      	movs	r0, #8
 8000d4a:	f7ff ff3d 	bl	8000bc8 <Modbus_Device_SetRegister>
    Modbus_Device_SetRegister(9, 1900);    // 40010: Test sensor 10 - start at 1900
 8000d4e:	f240 716c 	movw	r1, #1900	@ 0x76c
 8000d52:	2009      	movs	r0, #9
 8000d54:	f7ff ff38 	bl	8000bc8 <Modbus_Device_SetRegister>
    Modbus_Device_SetRegister(10, 2000);   // 40011: Status register
 8000d58:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000d5c:	200a      	movs	r0, #10
 8000d5e:	f7ff ff33 	bl	8000bc8 <Modbus_Device_SetRegister>
    Modbus_Device_SetRegister(11, 0x0100); // 40012: Firmware version 1.0
 8000d62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d66:	200b      	movs	r0, #11
 8000d68:	f7ff ff2e 	bl	8000bc8 <Modbus_Device_SetRegister>
}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <Modbus_Test_Update>:
 * @brief  Update test values periodically
 * @param  None
 * @retval None
 */
void Modbus_Test_Update(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
    test_counter++;
 8000d76:	4b40      	ldr	r3, [pc, #256]	@ (8000e78 <Modbus_Test_Update+0x108>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	4a3e      	ldr	r2, [pc, #248]	@ (8000e78 <Modbus_Test_Update+0x108>)
 8000d7e:	6013      	str	r3, [r2, #0]

    // Update test sensor values every 50 cycles (faster updates)
    if (test_counter % 50 == 0)
 8000d80:	4b3d      	ldr	r3, [pc, #244]	@ (8000e78 <Modbus_Test_Update+0x108>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	4b3d      	ldr	r3, [pc, #244]	@ (8000e7c <Modbus_Test_Update+0x10c>)
 8000d86:	fba3 1302 	umull	r1, r3, r3, r2
 8000d8a:	091b      	lsrs	r3, r3, #4
 8000d8c:	2132      	movs	r1, #50	@ 0x32
 8000d8e:	fb01 f303 	mul.w	r3, r1, r3
 8000d92:	1ad3      	subs	r3, r2, r3
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d153      	bne.n	8000e40 <Modbus_Test_Update+0xd0>
    {
        static uint16_t test_value = 1000; // Start from 1000
        test_value += 10;                  // Increment by 10 each time for more noticeable change
 8000d98:	4b39      	ldr	r3, [pc, #228]	@ (8000e80 <Modbus_Test_Update+0x110>)
 8000d9a:	881b      	ldrh	r3, [r3, #0]
 8000d9c:	330a      	adds	r3, #10
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	4b37      	ldr	r3, [pc, #220]	@ (8000e80 <Modbus_Test_Update+0x110>)
 8000da2:	801a      	strh	r2, [r3, #0]

        // Update first 10 registers with rising pattern
        Modbus_Device_SetRegister(0, test_value);      // 40001: Base value
 8000da4:	4b36      	ldr	r3, [pc, #216]	@ (8000e80 <Modbus_Test_Update+0x110>)
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	4619      	mov	r1, r3
 8000daa:	2000      	movs	r0, #0
 8000dac:	f7ff ff0c 	bl	8000bc8 <Modbus_Device_SetRegister>
        Modbus_Device_SetRegister(1, test_value + 10); // 40002: Base + 10
 8000db0:	4b33      	ldr	r3, [pc, #204]	@ (8000e80 <Modbus_Test_Update+0x110>)
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	330a      	adds	r3, #10
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	4619      	mov	r1, r3
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f7ff ff04 	bl	8000bc8 <Modbus_Device_SetRegister>
        Modbus_Device_SetRegister(2, test_value + 20); // 40003: Base + 20
 8000dc0:	4b2f      	ldr	r3, [pc, #188]	@ (8000e80 <Modbus_Test_Update+0x110>)
 8000dc2:	881b      	ldrh	r3, [r3, #0]
 8000dc4:	3314      	adds	r3, #20
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	4619      	mov	r1, r3
 8000dca:	2002      	movs	r0, #2
 8000dcc:	f7ff fefc 	bl	8000bc8 <Modbus_Device_SetRegister>
        Modbus_Device_SetRegister(3, test_value + 30); // 40004: Base + 30
 8000dd0:	4b2b      	ldr	r3, [pc, #172]	@ (8000e80 <Modbus_Test_Update+0x110>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	331e      	adds	r3, #30
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	4619      	mov	r1, r3
 8000dda:	2003      	movs	r0, #3
 8000ddc:	f7ff fef4 	bl	8000bc8 <Modbus_Device_SetRegister>
        Modbus_Device_SetRegister(4, test_value + 40); // 40005: Base + 40
 8000de0:	4b27      	ldr	r3, [pc, #156]	@ (8000e80 <Modbus_Test_Update+0x110>)
 8000de2:	881b      	ldrh	r3, [r3, #0]
 8000de4:	3328      	adds	r3, #40	@ 0x28
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	4619      	mov	r1, r3
 8000dea:	2004      	movs	r0, #4
 8000dec:	f7ff feec 	bl	8000bc8 <Modbus_Device_SetRegister>
        Modbus_Device_SetRegister(5, test_value + 50); // 40006: Base + 50
 8000df0:	4b23      	ldr	r3, [pc, #140]	@ (8000e80 <Modbus_Test_Update+0x110>)
 8000df2:	881b      	ldrh	r3, [r3, #0]
 8000df4:	3332      	adds	r3, #50	@ 0x32
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	4619      	mov	r1, r3
 8000dfa:	2005      	movs	r0, #5
 8000dfc:	f7ff fee4 	bl	8000bc8 <Modbus_Device_SetRegister>
        Modbus_Device_SetRegister(6, test_value + 60); // 40007: Base + 60
 8000e00:	4b1f      	ldr	r3, [pc, #124]	@ (8000e80 <Modbus_Test_Update+0x110>)
 8000e02:	881b      	ldrh	r3, [r3, #0]
 8000e04:	333c      	adds	r3, #60	@ 0x3c
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	4619      	mov	r1, r3
 8000e0a:	2006      	movs	r0, #6
 8000e0c:	f7ff fedc 	bl	8000bc8 <Modbus_Device_SetRegister>
        Modbus_Device_SetRegister(7, test_value + 70); // 40008: Base + 70
 8000e10:	4b1b      	ldr	r3, [pc, #108]	@ (8000e80 <Modbus_Test_Update+0x110>)
 8000e12:	881b      	ldrh	r3, [r3, #0]
 8000e14:	3346      	adds	r3, #70	@ 0x46
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	4619      	mov	r1, r3
 8000e1a:	2007      	movs	r0, #7
 8000e1c:	f7ff fed4 	bl	8000bc8 <Modbus_Device_SetRegister>
        Modbus_Device_SetRegister(8, test_value + 80); // 40009: Base + 80
 8000e20:	4b17      	ldr	r3, [pc, #92]	@ (8000e80 <Modbus_Test_Update+0x110>)
 8000e22:	881b      	ldrh	r3, [r3, #0]
 8000e24:	3350      	adds	r3, #80	@ 0x50
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	4619      	mov	r1, r3
 8000e2a:	2008      	movs	r0, #8
 8000e2c:	f7ff fecc 	bl	8000bc8 <Modbus_Device_SetRegister>
        Modbus_Device_SetRegister(9, test_value + 90); // 40010: Base + 90
 8000e30:	4b13      	ldr	r3, [pc, #76]	@ (8000e80 <Modbus_Test_Update+0x110>)
 8000e32:	881b      	ldrh	r3, [r3, #0]
 8000e34:	335a      	adds	r3, #90	@ 0x5a
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	4619      	mov	r1, r3
 8000e3a:	2009      	movs	r0, #9
 8000e3c:	f7ff fec4 	bl	8000bc8 <Modbus_Device_SetRegister>
    }

    // Update status register (only when needed to avoid conflicts)
    if (test_counter % 200 == 0)  // Every 20 seconds
 8000e40:	4b0d      	ldr	r3, [pc, #52]	@ (8000e78 <Modbus_Test_Update+0x108>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b0d      	ldr	r3, [pc, #52]	@ (8000e7c <Modbus_Test_Update+0x10c>)
 8000e46:	fba3 1302 	umull	r1, r3, r3, r2
 8000e4a:	099b      	lsrs	r3, r3, #6
 8000e4c:	21c8      	movs	r1, #200	@ 0xc8
 8000e4e:	fb01 f303 	mul.w	r3, r1, r3
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d10a      	bne.n	8000e6e <Modbus_Test_Update+0xfe>
    {
        uint16_t status = 0x0001; // Bit 0: Ready
 8000e58:	2301      	movs	r3, #1
 8000e5a:	80fb      	strh	r3, [r7, #6]
        status |= 0x0002;         // Bit 1: Data updated
 8000e5c:	88fb      	ldrh	r3, [r7, #6]
 8000e5e:	f043 0302 	orr.w	r3, r3, #2
 8000e62:	80fb      	strh	r3, [r7, #6]
        Modbus_Device_SetRegister(10, status); // Use register 10 for status (40011)
 8000e64:	88fb      	ldrh	r3, [r7, #6]
 8000e66:	4619      	mov	r1, r3
 8000e68:	200a      	movs	r0, #10
 8000e6a:	f7ff fead 	bl	8000bc8 <Modbus_Device_SetRegister>
    }
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000434 	.word	0x20000434
 8000e7c:	51eb851f 	.word	0x51eb851f
 8000e80:	20000028 	.word	0x20000028

08000e84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8a:	4b11      	ldr	r3, [pc, #68]	@ (8000ed0 <HAL_MspInit+0x4c>)
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	4a10      	ldr	r2, [pc, #64]	@ (8000ed0 <HAL_MspInit+0x4c>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6193      	str	r3, [r2, #24]
 8000e96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed0 <HAL_MspInit+0x4c>)
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed0 <HAL_MspInit+0x4c>)
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed0 <HAL_MspInit+0x4c>)
 8000ea8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eac:	61d3      	str	r3, [r2, #28]
 8000eae:	4b08      	ldr	r3, [pc, #32]	@ (8000ed0 <HAL_MspInit+0x4c>)
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	210f      	movs	r1, #15
 8000ebe:	f06f 0001 	mvn.w	r0, #1
 8000ec2:	f000 faed 	bl	80014a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40021000 	.word	0x40021000

08000ed4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	@ 0x28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a42      	ldr	r2, [pc, #264]	@ (8000ffc <HAL_UART_MspInit+0x128>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d17d      	bne.n	8000ff2 <HAL_UART_MspInit+0x11e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ef6:	4b42      	ldr	r3, [pc, #264]	@ (8001000 <HAL_UART_MspInit+0x12c>)
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	4a41      	ldr	r2, [pc, #260]	@ (8001000 <HAL_UART_MspInit+0x12c>)
 8000efc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f00:	6193      	str	r3, [r2, #24]
 8000f02:	4b3f      	ldr	r3, [pc, #252]	@ (8001000 <HAL_UART_MspInit+0x12c>)
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	4b3c      	ldr	r3, [pc, #240]	@ (8001000 <HAL_UART_MspInit+0x12c>)
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	4a3b      	ldr	r2, [pc, #236]	@ (8001000 <HAL_UART_MspInit+0x12c>)
 8000f14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f18:	6153      	str	r3, [r2, #20]
 8000f1a:	4b39      	ldr	r3, [pc, #228]	@ (8001000 <HAL_UART_MspInit+0x12c>)
 8000f1c:	695b      	ldr	r3, [r3, #20]
 8000f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA12     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8000f26:	f44f 53b0 	mov.w	r3, #5632	@ 0x1600
 8000f2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f34:	2303      	movs	r3, #3
 8000f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f38:	2307      	movs	r3, #7
 8000f3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	4619      	mov	r1, r3
 8000f42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f46:	f000 fce9 	bl	800191c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000f4a:	4b2e      	ldr	r3, [pc, #184]	@ (8001004 <HAL_UART_MspInit+0x130>)
 8000f4c:	4a2e      	ldr	r2, [pc, #184]	@ (8001008 <HAL_UART_MspInit+0x134>)
 8000f4e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f50:	4b2c      	ldr	r3, [pc, #176]	@ (8001004 <HAL_UART_MspInit+0x130>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f56:	4b2b      	ldr	r3, [pc, #172]	@ (8001004 <HAL_UART_MspInit+0x130>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f5c:	4b29      	ldr	r3, [pc, #164]	@ (8001004 <HAL_UART_MspInit+0x130>)
 8000f5e:	2280      	movs	r2, #128	@ 0x80
 8000f60:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f62:	4b28      	ldr	r3, [pc, #160]	@ (8001004 <HAL_UART_MspInit+0x130>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f68:	4b26      	ldr	r3, [pc, #152]	@ (8001004 <HAL_UART_MspInit+0x130>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000f6e:	4b25      	ldr	r3, [pc, #148]	@ (8001004 <HAL_UART_MspInit+0x130>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f74:	4b23      	ldr	r3, [pc, #140]	@ (8001004 <HAL_UART_MspInit+0x130>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000f7a:	4822      	ldr	r0, [pc, #136]	@ (8001004 <HAL_UART_MspInit+0x130>)
 8000f7c:	f000 faba 	bl	80014f4 <HAL_DMA_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8000f86:	f7ff fa6d 	bl	8000464 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a1d      	ldr	r2, [pc, #116]	@ (8001004 <HAL_UART_MspInit+0x130>)
 8000f8e:	675a      	str	r2, [r3, #116]	@ 0x74
 8000f90:	4a1c      	ldr	r2, [pc, #112]	@ (8001004 <HAL_UART_MspInit+0x130>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000f96:	4b1d      	ldr	r3, [pc, #116]	@ (800100c <HAL_UART_MspInit+0x138>)
 8000f98:	4a1d      	ldr	r2, [pc, #116]	@ (8001010 <HAL_UART_MspInit+0x13c>)
 8000f9a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800100c <HAL_UART_MspInit+0x138>)
 8000f9e:	2210      	movs	r2, #16
 8000fa0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800100c <HAL_UART_MspInit+0x138>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fa8:	4b18      	ldr	r3, [pc, #96]	@ (800100c <HAL_UART_MspInit+0x138>)
 8000faa:	2280      	movs	r2, #128	@ 0x80
 8000fac:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fae:	4b17      	ldr	r3, [pc, #92]	@ (800100c <HAL_UART_MspInit+0x138>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fb4:	4b15      	ldr	r3, [pc, #84]	@ (800100c <HAL_UART_MspInit+0x138>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000fba:	4b14      	ldr	r3, [pc, #80]	@ (800100c <HAL_UART_MspInit+0x138>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000fc0:	4b12      	ldr	r3, [pc, #72]	@ (800100c <HAL_UART_MspInit+0x138>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000fc6:	4811      	ldr	r0, [pc, #68]	@ (800100c <HAL_UART_MspInit+0x138>)
 8000fc8:	f000 fa94 	bl	80014f4 <HAL_DMA_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 8000fd2:	f7ff fa47 	bl	8000464 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a0c      	ldr	r2, [pc, #48]	@ (800100c <HAL_UART_MspInit+0x138>)
 8000fda:	671a      	str	r2, [r3, #112]	@ 0x70
 8000fdc:	4a0b      	ldr	r2, [pc, #44]	@ (800100c <HAL_UART_MspInit+0x138>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2105      	movs	r1, #5
 8000fe6:	2025      	movs	r0, #37	@ 0x25
 8000fe8:	f000 fa5a 	bl	80014a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fec:	2025      	movs	r0, #37	@ 0x25
 8000fee:	f000 fa73 	bl	80014d8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000ff2:	bf00      	nop
 8000ff4:	3728      	adds	r7, #40	@ 0x28
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40013800 	.word	0x40013800
 8001000:	40021000 	.word	0x40021000
 8001004:	20000144 	.word	0x20000144
 8001008:	40020058 	.word	0x40020058
 800100c:	20000188 	.word	0x20000188
 8001010:	40020044 	.word	0x40020044

08001014 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08e      	sub	sp, #56	@ 0x38
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800101c:	2300      	movs	r3, #0
 800101e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001020:	2300      	movs	r3, #0
 8001022:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001024:	4b33      	ldr	r3, [pc, #204]	@ (80010f4 <HAL_InitTick+0xe0>)
 8001026:	69db      	ldr	r3, [r3, #28]
 8001028:	4a32      	ldr	r2, [pc, #200]	@ (80010f4 <HAL_InitTick+0xe0>)
 800102a:	f043 0310 	orr.w	r3, r3, #16
 800102e:	61d3      	str	r3, [r2, #28]
 8001030:	4b30      	ldr	r3, [pc, #192]	@ (80010f4 <HAL_InitTick+0xe0>)
 8001032:	69db      	ldr	r3, [r3, #28]
 8001034:	f003 0310 	and.w	r3, r3, #16
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800103c:	f107 0210 	add.w	r2, r7, #16
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4611      	mov	r1, r2
 8001046:	4618      	mov	r0, r3
 8001048:	f001 fffa 	bl	8003040 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800104c:	6a3b      	ldr	r3, [r7, #32]
 800104e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001052:	2b00      	cmp	r3, #0
 8001054:	d103      	bne.n	800105e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001056:	f001 ffaf 	bl	8002fb8 <HAL_RCC_GetPCLK1Freq>
 800105a:	6378      	str	r0, [r7, #52]	@ 0x34
 800105c:	e004      	b.n	8001068 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800105e:	f001 ffab 	bl	8002fb8 <HAL_RCC_GetPCLK1Freq>
 8001062:	4603      	mov	r3, r0
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800106a:	4a23      	ldr	r2, [pc, #140]	@ (80010f8 <HAL_InitTick+0xe4>)
 800106c:	fba2 2303 	umull	r2, r3, r2, r3
 8001070:	0c9b      	lsrs	r3, r3, #18
 8001072:	3b01      	subs	r3, #1
 8001074:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001076:	4b21      	ldr	r3, [pc, #132]	@ (80010fc <HAL_InitTick+0xe8>)
 8001078:	4a21      	ldr	r2, [pc, #132]	@ (8001100 <HAL_InitTick+0xec>)
 800107a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800107c:	4b1f      	ldr	r3, [pc, #124]	@ (80010fc <HAL_InitTick+0xe8>)
 800107e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001082:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001084:	4a1d      	ldr	r2, [pc, #116]	@ (80010fc <HAL_InitTick+0xe8>)
 8001086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001088:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800108a:	4b1c      	ldr	r3, [pc, #112]	@ (80010fc <HAL_InitTick+0xe8>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001090:	4b1a      	ldr	r3, [pc, #104]	@ (80010fc <HAL_InitTick+0xe8>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001096:	4b19      	ldr	r3, [pc, #100]	@ (80010fc <HAL_InitTick+0xe8>)
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800109c:	4817      	ldr	r0, [pc, #92]	@ (80010fc <HAL_InitTick+0xe8>)
 800109e:	f002 f925 	bl	80032ec <HAL_TIM_Base_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80010a8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d11b      	bne.n	80010e8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80010b0:	4812      	ldr	r0, [pc, #72]	@ (80010fc <HAL_InitTick+0xe8>)
 80010b2:	f002 f97d 	bl	80033b0 <HAL_TIM_Base_Start_IT>
 80010b6:	4603      	mov	r3, r0
 80010b8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80010bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d111      	bne.n	80010e8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 80010c4:	2036      	movs	r0, #54	@ 0x36
 80010c6:	f000 fa07 	bl	80014d8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b0f      	cmp	r3, #15
 80010ce:	d808      	bhi.n	80010e2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, TickPriority, 0U);
 80010d0:	2200      	movs	r2, #0
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	2036      	movs	r0, #54	@ 0x36
 80010d6:	f000 f9e3 	bl	80014a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010da:	4a0a      	ldr	r2, [pc, #40]	@ (8001104 <HAL_InitTick+0xf0>)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6013      	str	r3, [r2, #0]
 80010e0:	e002      	b.n	80010e8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80010e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3738      	adds	r7, #56	@ 0x38
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40021000 	.word	0x40021000
 80010f8:	431bde83 	.word	0x431bde83
 80010fc:	20000438 	.word	0x20000438
 8001100:	40001000 	.word	0x40001000
 8001104:	20000030 	.word	0x20000030

08001108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <NMI_Handler+0x4>

08001110 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <HardFault_Handler+0x4>

08001118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800111c:	bf00      	nop
 800111e:	e7fd      	b.n	800111c <MemManage_Handler+0x4>

08001120 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001124:	bf00      	nop
 8001126:	e7fd      	b.n	8001124 <BusFault_Handler+0x4>

08001128 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <UsageFault_Handler+0x4>

08001130 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
	...

08001140 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001144:	4802      	ldr	r0, [pc, #8]	@ (8001150 <DMA1_Channel4_IRQHandler+0x10>)
 8001146:	f000 faf7 	bl	8001738 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000188 	.word	0x20000188

08001154 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001158:	4802      	ldr	r0, [pc, #8]	@ (8001164 <DMA1_Channel5_IRQHandler+0x10>)
 800115a:	f000 faed 	bl	8001738 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000144 	.word	0x20000144

08001168 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800116c:	4802      	ldr	r0, [pc, #8]	@ (8001178 <USART1_IRQHandler+0x10>)
 800116e:	f002 fbd1 	bl	8003914 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	200000bc 	.word	0x200000bc

0800117c <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001180:	4802      	ldr	r0, [pc, #8]	@ (800118c <TIM6_DAC1_IRQHandler+0x10>)
 8001182:	f002 f971 	bl	8003468 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000438 	.word	0x20000438

08001190 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001194:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <SystemInit+0x20>)
 8001196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800119a:	4a05      	ldr	r2, [pc, #20]	@ (80011b0 <SystemInit+0x20>)
 800119c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <UART_Callbacks_Init>:
 * @brief  Initialize UART callbacks
 * @param  None
 * @retval None
 */
void UART_Callbacks_Init(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
    // UART callbacks are handled by HAL
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <UART_RestartDmaReception>:
 * @brief  Restart UART DMA reception
 * @param  None
 * @retval None
 */
static void UART_RestartDmaReception(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, modbus_rx_buffer, sizeof(modbus_rx_buffer));
 80011c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011cc:	4902      	ldr	r1, [pc, #8]	@ (80011d8 <UART_RestartDmaReception+0x14>)
 80011ce:	4803      	ldr	r0, [pc, #12]	@ (80011dc <UART_RestartDmaReception+0x18>)
 80011d0:	f003 fc5e 	bl	8004a90 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000234 	.word	0x20000234
 80011dc:	200000bc 	.word	0x200000bc

080011e0 <HAL_UARTEx_RxEventCallback>:
 * @param  huart: UART handle
 * @param  Size: Number of bytes received
 * @retval None
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	807b      	strh	r3, [r7, #2]
    if (huart == &huart1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a10      	ldr	r2, [pc, #64]	@ (8001230 <HAL_UARTEx_RxEventCallback+0x50>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d119      	bne.n	8001228 <HAL_UARTEx_RxEventCallback+0x48>
    {
        // Get Modbus context
        mbus_t modbus_ctx = Modbus_GetContext();
 80011f4:	f7ff fd70 	bl	8000cd8 <Modbus_GetContext>
 80011f8:	60b8      	str	r0, [r7, #8]

        // Process received Modbus data byte by byte
        for (uint16_t i = 0; i < Size; i++)
 80011fa:	2300      	movs	r3, #0
 80011fc:	81fb      	strh	r3, [r7, #14]
 80011fe:	e009      	b.n	8001214 <HAL_UARTEx_RxEventCallback+0x34>
        {
            mbus_poll(modbus_ctx, modbus_rx_buffer[i]);
 8001200:	89fb      	ldrh	r3, [r7, #14]
 8001202:	4a0c      	ldr	r2, [pc, #48]	@ (8001234 <HAL_UARTEx_RxEventCallback+0x54>)
 8001204:	5cd3      	ldrb	r3, [r2, r3]
 8001206:	4619      	mov	r1, r3
 8001208:	68b8      	ldr	r0, [r7, #8]
 800120a:	f7ff f9bf 	bl	800058c <mbus_poll>
        for (uint16_t i = 0; i < Size; i++)
 800120e:	89fb      	ldrh	r3, [r7, #14]
 8001210:	3301      	adds	r3, #1
 8001212:	81fb      	strh	r3, [r7, #14]
 8001214:	89fa      	ldrh	r2, [r7, #14]
 8001216:	887b      	ldrh	r3, [r7, #2]
 8001218:	429a      	cmp	r2, r3
 800121a:	d3f1      	bcc.n	8001200 <HAL_UARTEx_RxEventCallback+0x20>
        }

        // Clear UART idle flag
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2210      	movs	r2, #16
 8001222:	621a      	str	r2, [r3, #32]

        // Restart DMA reception
        UART_RestartDmaReception();
 8001224:	f7ff ffce 	bl	80011c4 <UART_RestartDmaReception>
    }
}
 8001228:	bf00      	nop
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	200000bc 	.word	0x200000bc
 8001234:	20000234 	.word	0x20000234

08001238 <HAL_UART_ErrorCallback>:
 * @brief  UART error callback
 * @param  huart: UART handle
 * @retval None
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
    if (huart == &huart1)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a0a      	ldr	r2, [pc, #40]	@ (800126c <HAL_UART_ErrorCallback+0x34>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d10d      	bne.n	8001264 <HAL_UART_ErrorCallback+0x2c>
    {
        // Clear error flags
        __HAL_UART_CLEAR_OREFLAG(huart);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2208      	movs	r2, #8
 800124e:	621a      	str	r2, [r3, #32]
        __HAL_UART_CLEAR_NEFLAG(huart);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2204      	movs	r2, #4
 8001256:	621a      	str	r2, [r3, #32]
        __HAL_UART_CLEAR_FEFLAG(huart);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2202      	movs	r2, #2
 800125e:	621a      	str	r2, [r3, #32]

        // Restart DMA reception
        UART_RestartDmaReception();
 8001260:	f7ff ffb0 	bl	80011c4 <UART_RestartDmaReception>
    }
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	200000bc 	.word	0x200000bc

08001270 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001270:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012a8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001274:	f7ff ff8c 	bl	8001190 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001278:	480c      	ldr	r0, [pc, #48]	@ (80012ac <LoopForever+0x6>)
  ldr r1, =_edata
 800127a:	490d      	ldr	r1, [pc, #52]	@ (80012b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800127c:	4a0d      	ldr	r2, [pc, #52]	@ (80012b4 <LoopForever+0xe>)
  movs r3, #0
 800127e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001280:	e002      	b.n	8001288 <LoopCopyDataInit>

08001282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001286:	3304      	adds	r3, #4

08001288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800128a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800128c:	d3f9      	bcc.n	8001282 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800128e:	4a0a      	ldr	r2, [pc, #40]	@ (80012b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001290:	4c0a      	ldr	r4, [pc, #40]	@ (80012bc <LoopForever+0x16>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001294:	e001      	b.n	800129a <LoopFillZerobss>

08001296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001298:	3204      	adds	r2, #4

0800129a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800129a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800129c:	d3fb      	bcc.n	8001296 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800129e:	f006 fbb5 	bl	8007a0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012a2:	f7fe ff9d 	bl	80001e0 <main>

080012a6 <LoopForever>:

LoopForever:
    b LoopForever
 80012a6:	e7fe      	b.n	80012a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012a8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80012ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b0:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80012b4:	08008484 	.word	0x08008484
  ldr r2, =_sbss
 80012b8:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80012bc:	2000205c 	.word	0x2000205c

080012c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012c0:	e7fe      	b.n	80012c0 <ADC1_2_IRQHandler>
	...

080012c4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c8:	4b08      	ldr	r3, [pc, #32]	@ (80012ec <HAL_Init+0x28>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a07      	ldr	r2, [pc, #28]	@ (80012ec <HAL_Init+0x28>)
 80012ce:	f043 0310 	orr.w	r3, r3, #16
 80012d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d4:	2003      	movs	r0, #3
 80012d6:	f000 f8d8 	bl	800148a <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012da:	200f      	movs	r0, #15
 80012dc:	f7ff fe9a 	bl	8001014 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e0:	f7ff fdd0 	bl	8000e84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40022000 	.word	0x40022000

080012f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f4:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <HAL_IncTick+0x20>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <HAL_IncTick+0x24>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4413      	add	r3, r2
 8001300:	4a04      	ldr	r2, [pc, #16]	@ (8001314 <HAL_IncTick+0x24>)
 8001302:	6013      	str	r3, [r2, #0]
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000034 	.word	0x20000034
 8001314:	20000484 	.word	0x20000484

08001318 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return uwTick;  
 800131c:	4b03      	ldr	r3, [pc, #12]	@ (800132c <HAL_GetTick+0x14>)
 800131e:	681b      	ldr	r3, [r3, #0]
}
 8001320:	4618      	mov	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000484 	.word	0x20000484

08001330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001340:	4b0c      	ldr	r3, [pc, #48]	@ (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800134c:	4013      	ands	r3, r2
 800134e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001358:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800135c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001362:	4a04      	ldr	r2, [pc, #16]	@ (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	60d3      	str	r3, [r2, #12]
}
 8001368:	bf00      	nop
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800137c:	4b04      	ldr	r3, [pc, #16]	@ (8001390 <__NVIC_GetPriorityGrouping+0x18>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	0a1b      	lsrs	r3, r3, #8
 8001382:	f003 0307 	and.w	r3, r3, #7
}
 8001386:	4618      	mov	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	db0b      	blt.n	80013be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	f003 021f 	and.w	r2, r3, #31
 80013ac:	4907      	ldr	r1, [pc, #28]	@ (80013cc <__NVIC_EnableIRQ+0x38>)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	095b      	lsrs	r3, r3, #5
 80013b4:	2001      	movs	r0, #1
 80013b6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000e100 	.word	0xe000e100

080013d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	6039      	str	r1, [r7, #0]
 80013da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	db0a      	blt.n	80013fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	490c      	ldr	r1, [pc, #48]	@ (800141c <__NVIC_SetPriority+0x4c>)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	0112      	lsls	r2, r2, #4
 80013f0:	b2d2      	uxtb	r2, r2
 80013f2:	440b      	add	r3, r1
 80013f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f8:	e00a      	b.n	8001410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	4908      	ldr	r1, [pc, #32]	@ (8001420 <__NVIC_SetPriority+0x50>)
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	f003 030f 	and.w	r3, r3, #15
 8001406:	3b04      	subs	r3, #4
 8001408:	0112      	lsls	r2, r2, #4
 800140a:	b2d2      	uxtb	r2, r2
 800140c:	440b      	add	r3, r1
 800140e:	761a      	strb	r2, [r3, #24]
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	e000e100 	.word	0xe000e100
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001424:	b480      	push	{r7}
 8001426:	b089      	sub	sp, #36	@ 0x24
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	f1c3 0307 	rsb	r3, r3, #7
 800143e:	2b04      	cmp	r3, #4
 8001440:	bf28      	it	cs
 8001442:	2304      	movcs	r3, #4
 8001444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3304      	adds	r3, #4
 800144a:	2b06      	cmp	r3, #6
 800144c:	d902      	bls.n	8001454 <NVIC_EncodePriority+0x30>
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3b03      	subs	r3, #3
 8001452:	e000      	b.n	8001456 <NVIC_EncodePriority+0x32>
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001458:	f04f 32ff 	mov.w	r2, #4294967295
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43da      	mvns	r2, r3
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	401a      	ands	r2, r3
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800146c:	f04f 31ff 	mov.w	r1, #4294967295
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	fa01 f303 	lsl.w	r3, r1, r3
 8001476:	43d9      	mvns	r1, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800147c:	4313      	orrs	r3, r2
         );
}
 800147e:	4618      	mov	r0, r3
 8001480:	3724      	adds	r7, #36	@ 0x24
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff ff4c 	bl	8001330 <__NVIC_SetPriorityGrouping>
}
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
 80014ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014b2:	f7ff ff61 	bl	8001378 <__NVIC_GetPriorityGrouping>
 80014b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	68b9      	ldr	r1, [r7, #8]
 80014bc:	6978      	ldr	r0, [r7, #20]
 80014be:	f7ff ffb1 	bl	8001424 <NVIC_EncodePriority>
 80014c2:	4602      	mov	r2, r0
 80014c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c8:	4611      	mov	r1, r2
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff ff80 	bl	80013d0 <__NVIC_SetPriority>
}
 80014d0:	bf00      	nop
 80014d2:	3718      	adds	r7, #24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff ff54 	bl	8001394 <__NVIC_EnableIRQ>
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e037      	b.n	800157a <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2202      	movs	r2, #2
 800150e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001520:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001524:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800152e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800153a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	695b      	ldr	r3, [r3, #20]
 8001540:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001546:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	69db      	ldr	r3, [r3, #28]
 800154c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	4313      	orrs	r3, r2
 8001552:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f000 f9bd 	bl	80018dc <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2201      	movs	r2, #1
 800156c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b086      	sub	sp, #24
 8001586:	af00      	add	r7, sp, #0
 8001588:	60f8      	str	r0, [r7, #12]
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
 800158e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001590:	2300      	movs	r3, #0
 8001592:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f893 3020 	ldrb.w	r3, [r3, #32]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d101      	bne.n	80015a2 <HAL_DMA_Start_IT+0x20>
 800159e:	2302      	movs	r3, #2
 80015a0:	e04a      	b.n	8001638 <HAL_DMA_Start_IT+0xb6>
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2201      	movs	r2, #1
 80015a6:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d13a      	bne.n	800162a <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2202      	movs	r2, #2
 80015b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2200      	movs	r2, #0
 80015c0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 0201 	bic.w	r2, r2, #1
 80015d0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	68b9      	ldr	r1, [r7, #8]
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f000 f950 	bl	800187e <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d008      	beq.n	80015f8 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f042 020e 	orr.w	r2, r2, #14
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	e00f      	b.n	8001618 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f042 020a 	orr.w	r2, r2, #10
 8001606:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 0204 	bic.w	r2, r2, #4
 8001616:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f042 0201 	orr.w	r2, r2, #1
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	e005      	b.n	8001636 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001632:	2302      	movs	r3, #2
 8001634:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001636:	7dfb      	ldrb	r3, [r7, #23]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3718      	adds	r7, #24
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e02e      	b.n	80016b0 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001658:	2b02      	cmp	r3, #2
 800165a:	d008      	beq.n	800166e <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2204      	movs	r2, #4
 8001660:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e020      	b.n	80016b0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f022 020e 	bic.w	r2, r2, #14
 800167c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f022 0201 	bic.w	r2, r2, #1
 800168c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001696:	2101      	movs	r1, #1
 8001698:	fa01 f202 	lsl.w	r2, r1, r2
 800169c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016c4:	2300      	movs	r3, #0
 80016c6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d005      	beq.n	80016de <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2204      	movs	r2, #4
 80016d6:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	73fb      	strb	r3, [r7, #15]
 80016dc:	e027      	b.n	800172e <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 020e 	bic.w	r2, r2, #14
 80016ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 0201 	bic.w	r2, r2, #1
 80016fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001706:	2101      	movs	r1, #1
 8001708:	fa01 f202 	lsl.w	r2, r1, r2
 800170c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	4798      	blx	r3
    }
  }
  return status;
 800172e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001754:	2204      	movs	r2, #4
 8001756:	409a      	lsls	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4013      	ands	r3, r2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d024      	beq.n	80017aa <HAL_DMA_IRQHandler+0x72>
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	f003 0304 	and.w	r3, r3, #4
 8001766:	2b00      	cmp	r3, #0
 8001768:	d01f      	beq.n	80017aa <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0320 	and.w	r3, r3, #32
 8001774:	2b00      	cmp	r3, #0
 8001776:	d107      	bne.n	8001788 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 0204 	bic.w	r2, r2, #4
 8001786:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001790:	2104      	movs	r1, #4
 8001792:	fa01 f202 	lsl.w	r2, r1, r2
 8001796:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800179c:	2b00      	cmp	r3, #0
 800179e:	d06a      	beq.n	8001876 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80017a8:	e065      	b.n	8001876 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ae:	2202      	movs	r2, #2
 80017b0:	409a      	lsls	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	4013      	ands	r3, r2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d02c      	beq.n	8001814 <HAL_DMA_IRQHandler+0xdc>
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d027      	beq.n	8001814 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0320 	and.w	r3, r3, #32
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10b      	bne.n	80017ea <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f022 020a 	bic.w	r2, r2, #10
 80017e0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017f2:	2102      	movs	r1, #2
 80017f4:	fa01 f202 	lsl.w	r2, r1, r2
 80017f8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001806:	2b00      	cmp	r3, #0
 8001808:	d035      	beq.n	8001876 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001812:	e030      	b.n	8001876 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001818:	2208      	movs	r2, #8
 800181a:	409a      	lsls	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4013      	ands	r3, r2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d028      	beq.n	8001876 <HAL_DMA_IRQHandler+0x13e>
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	f003 0308 	and.w	r3, r3, #8
 800182a:	2b00      	cmp	r3, #0
 800182c:	d023      	beq.n	8001876 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 020e 	bic.w	r2, r2, #14
 800183c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001846:	2101      	movs	r1, #1
 8001848:	fa01 f202 	lsl.w	r2, r1, r2
 800184c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2201      	movs	r2, #1
 8001852:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001868:	2b00      	cmp	r3, #0
 800186a:	d004      	beq.n	8001876 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	4798      	blx	r3
    }
  }
}
 8001874:	e7ff      	b.n	8001876 <HAL_DMA_IRQHandler+0x13e>
 8001876:	bf00      	nop
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800187e:	b480      	push	{r7}
 8001880:	b085      	sub	sp, #20
 8001882:	af00      	add	r7, sp, #0
 8001884:	60f8      	str	r0, [r7, #12]
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	607a      	str	r2, [r7, #4]
 800188a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001894:	2101      	movs	r1, #1
 8001896:	fa01 f202 	lsl.w	r2, r1, r2
 800189a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2b10      	cmp	r3, #16
 80018aa:	d108      	bne.n	80018be <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	68ba      	ldr	r2, [r7, #8]
 80018ba:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80018bc:	e007      	b.n	80018ce <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	60da      	str	r2, [r3, #12]
}
 80018ce:	bf00      	nop
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
	...

080018dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <DMA_CalcBaseAndBitshift+0x34>)
 80018ec:	4413      	add	r3, r2
 80018ee:	4a09      	ldr	r2, [pc, #36]	@ (8001914 <DMA_CalcBaseAndBitshift+0x38>)
 80018f0:	fba2 2303 	umull	r2, r3, r2, r3
 80018f4:	091b      	lsrs	r3, r3, #4
 80018f6:	009a      	lsls	r2, r3, #2
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a06      	ldr	r2, [pc, #24]	@ (8001918 <DMA_CalcBaseAndBitshift+0x3c>)
 8001900:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	bffdfff8 	.word	0xbffdfff8
 8001914:	cccccccd 	.word	0xcccccccd
 8001918:	40020000 	.word	0x40020000

0800191c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800191c:	b480      	push	{r7}
 800191e:	b087      	sub	sp, #28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800192a:	e14e      	b.n	8001bca <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	2101      	movs	r1, #1
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	fa01 f303 	lsl.w	r3, r1, r3
 8001938:	4013      	ands	r3, r2
 800193a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 8140 	beq.w	8001bc4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 0303 	and.w	r3, r3, #3
 800194c:	2b01      	cmp	r3, #1
 800194e:	d005      	beq.n	800195c <HAL_GPIO_Init+0x40>
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 0303 	and.w	r3, r3, #3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d130      	bne.n	80019be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	2203      	movs	r2, #3
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4013      	ands	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	68da      	ldr	r2, [r3, #12]
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	4313      	orrs	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001992:	2201      	movs	r2, #1
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43db      	mvns	r3, r3
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	4013      	ands	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	091b      	lsrs	r3, r3, #4
 80019a8:	f003 0201 	and.w	r2, r3, #1
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 0303 	and.w	r3, r3, #3
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d017      	beq.n	80019fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	2203      	movs	r2, #3
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43db      	mvns	r3, r3
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	4013      	ands	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	689a      	ldr	r2, [r3, #8]
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d123      	bne.n	8001a4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	08da      	lsrs	r2, r3, #3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3208      	adds	r2, #8
 8001a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	220f      	movs	r2, #15
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43db      	mvns	r3, r3
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	4013      	ands	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	691a      	ldr	r2, [r3, #16]
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	08da      	lsrs	r2, r3, #3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3208      	adds	r2, #8
 8001a48:	6939      	ldr	r1, [r7, #16]
 8001a4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	2203      	movs	r2, #3
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	4013      	ands	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f003 0203 	and.w	r2, r3, #3
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f000 809a 	beq.w	8001bc4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a90:	4b55      	ldr	r3, [pc, #340]	@ (8001be8 <HAL_GPIO_Init+0x2cc>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	4a54      	ldr	r2, [pc, #336]	@ (8001be8 <HAL_GPIO_Init+0x2cc>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	6193      	str	r3, [r2, #24]
 8001a9c:	4b52      	ldr	r3, [pc, #328]	@ (8001be8 <HAL_GPIO_Init+0x2cc>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001aa8:	4a50      	ldr	r2, [pc, #320]	@ (8001bec <HAL_GPIO_Init+0x2d0>)
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	089b      	lsrs	r3, r3, #2
 8001aae:	3302      	adds	r3, #2
 8001ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	220f      	movs	r2, #15
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001ad2:	d013      	beq.n	8001afc <HAL_GPIO_Init+0x1e0>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a46      	ldr	r2, [pc, #280]	@ (8001bf0 <HAL_GPIO_Init+0x2d4>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d00d      	beq.n	8001af8 <HAL_GPIO_Init+0x1dc>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a45      	ldr	r2, [pc, #276]	@ (8001bf4 <HAL_GPIO_Init+0x2d8>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d007      	beq.n	8001af4 <HAL_GPIO_Init+0x1d8>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a44      	ldr	r2, [pc, #272]	@ (8001bf8 <HAL_GPIO_Init+0x2dc>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d101      	bne.n	8001af0 <HAL_GPIO_Init+0x1d4>
 8001aec:	2303      	movs	r3, #3
 8001aee:	e006      	b.n	8001afe <HAL_GPIO_Init+0x1e2>
 8001af0:	2305      	movs	r3, #5
 8001af2:	e004      	b.n	8001afe <HAL_GPIO_Init+0x1e2>
 8001af4:	2302      	movs	r3, #2
 8001af6:	e002      	b.n	8001afe <HAL_GPIO_Init+0x1e2>
 8001af8:	2301      	movs	r3, #1
 8001afa:	e000      	b.n	8001afe <HAL_GPIO_Init+0x1e2>
 8001afc:	2300      	movs	r3, #0
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	f002 0203 	and.w	r2, r2, #3
 8001b04:	0092      	lsls	r2, r2, #2
 8001b06:	4093      	lsls	r3, r2
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b0e:	4937      	ldr	r1, [pc, #220]	@ (8001bec <HAL_GPIO_Init+0x2d0>)
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	089b      	lsrs	r3, r3, #2
 8001b14:	3302      	adds	r3, #2
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b1c:	4b37      	ldr	r3, [pc, #220]	@ (8001bfc <HAL_GPIO_Init+0x2e0>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	43db      	mvns	r3, r3
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d003      	beq.n	8001b40 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b40:	4a2e      	ldr	r2, [pc, #184]	@ (8001bfc <HAL_GPIO_Init+0x2e0>)
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b46:	4b2d      	ldr	r3, [pc, #180]	@ (8001bfc <HAL_GPIO_Init+0x2e0>)
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	4013      	ands	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b6a:	4a24      	ldr	r2, [pc, #144]	@ (8001bfc <HAL_GPIO_Init+0x2e0>)
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b70:	4b22      	ldr	r3, [pc, #136]	@ (8001bfc <HAL_GPIO_Init+0x2e0>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b94:	4a19      	ldr	r2, [pc, #100]	@ (8001bfc <HAL_GPIO_Init+0x2e0>)
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b9a:	4b18      	ldr	r3, [pc, #96]	@ (8001bfc <HAL_GPIO_Init+0x2e0>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001bbe:	4a0f      	ldr	r2, [pc, #60]	@ (8001bfc <HAL_GPIO_Init+0x2e0>)
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f47f aea9 	bne.w	800192c <HAL_GPIO_Init+0x10>
  }
}
 8001bda:	bf00      	nop
 8001bdc:	bf00      	nop
 8001bde:	371c      	adds	r7, #28
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	40021000 	.word	0x40021000
 8001bec:	40010000 	.word	0x40010000
 8001bf0:	48000400 	.word	0x48000400
 8001bf4:	48000800 	.word	0x48000800
 8001bf8:	48000c00 	.word	0x48000c00
 8001bfc:	40010400 	.word	0x40010400

08001c00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c0c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c10:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c16:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d102      	bne.n	8001c26 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	f000 bff4 	b.w	8002c0e <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f000 816d 	beq.w	8001f16 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c3c:	4bb4      	ldr	r3, [pc, #720]	@ (8001f10 <HAL_RCC_OscConfig+0x310>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 030c 	and.w	r3, r3, #12
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	d00c      	beq.n	8001c62 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c48:	4bb1      	ldr	r3, [pc, #708]	@ (8001f10 <HAL_RCC_OscConfig+0x310>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 030c 	and.w	r3, r3, #12
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d157      	bne.n	8001d04 <HAL_RCC_OscConfig+0x104>
 8001c54:	4bae      	ldr	r3, [pc, #696]	@ (8001f10 <HAL_RCC_OscConfig+0x310>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c60:	d150      	bne.n	8001d04 <HAL_RCC_OscConfig+0x104>
 8001c62:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c66:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001c6e:	fa93 f3a3 	rbit	r3, r3
 8001c72:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c76:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c7a:	fab3 f383 	clz	r3, r3
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c82:	d802      	bhi.n	8001c8a <HAL_RCC_OscConfig+0x8a>
 8001c84:	4ba2      	ldr	r3, [pc, #648]	@ (8001f10 <HAL_RCC_OscConfig+0x310>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	e015      	b.n	8001cb6 <HAL_RCC_OscConfig+0xb6>
 8001c8a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c8e:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c92:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001c96:	fa93 f3a3 	rbit	r3, r3
 8001c9a:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001c9e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ca2:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001ca6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001caa:	fa93 f3a3 	rbit	r3, r3
 8001cae:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001cb2:	4b97      	ldr	r3, [pc, #604]	@ (8001f10 <HAL_RCC_OscConfig+0x310>)
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001cba:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001cbe:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001cc2:	fa92 f2a2 	rbit	r2, r2
 8001cc6:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001cca:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001cce:	fab2 f282 	clz	r2, r2
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	f042 0220 	orr.w	r2, r2, #32
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	f002 021f 	and.w	r2, r2, #31
 8001cde:	2101      	movs	r1, #1
 8001ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f000 8114 	beq.w	8001f14 <HAL_RCC_OscConfig+0x314>
 8001cec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cf0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f040 810b 	bne.w	8001f14 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	f000 bf85 	b.w	8002c0e <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d08:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d14:	d106      	bne.n	8001d24 <HAL_RCC_OscConfig+0x124>
 8001d16:	4b7e      	ldr	r3, [pc, #504]	@ (8001f10 <HAL_RCC_OscConfig+0x310>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a7d      	ldr	r2, [pc, #500]	@ (8001f10 <HAL_RCC_OscConfig+0x310>)
 8001d1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	e036      	b.n	8001d92 <HAL_RCC_OscConfig+0x192>
 8001d24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d28:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10c      	bne.n	8001d4e <HAL_RCC_OscConfig+0x14e>
 8001d34:	4b76      	ldr	r3, [pc, #472]	@ (8001f10 <HAL_RCC_OscConfig+0x310>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a75      	ldr	r2, [pc, #468]	@ (8001f10 <HAL_RCC_OscConfig+0x310>)
 8001d3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	4b73      	ldr	r3, [pc, #460]	@ (8001f10 <HAL_RCC_OscConfig+0x310>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a72      	ldr	r2, [pc, #456]	@ (8001f10 <HAL_RCC_OscConfig+0x310>)
 8001d46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d4a:	6013      	str	r3, [r2, #0]
 8001d4c:	e021      	b.n	8001d92 <HAL_RCC_OscConfig+0x192>
 8001d4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d52:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d5e:	d10c      	bne.n	8001d7a <HAL_RCC_OscConfig+0x17a>
 8001d60:	4b6b      	ldr	r3, [pc, #428]	@ (8001f10 <HAL_RCC_OscConfig+0x310>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a6a      	ldr	r2, [pc, #424]	@ (8001f10 <HAL_RCC_OscConfig+0x310>)
 8001d66:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d6a:	6013      	str	r3, [r2, #0]
 8001d6c:	4b68      	ldr	r3, [pc, #416]	@ (8001f10 <HAL_RCC_OscConfig+0x310>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a67      	ldr	r2, [pc, #412]	@ (8001f10 <HAL_RCC_OscConfig+0x310>)
 8001d72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d76:	6013      	str	r3, [r2, #0]
 8001d78:	e00b      	b.n	8001d92 <HAL_RCC_OscConfig+0x192>
 8001d7a:	4b65      	ldr	r3, [pc, #404]	@ (8001f10 <HAL_RCC_OscConfig+0x310>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a64      	ldr	r2, [pc, #400]	@ (8001f10 <HAL_RCC_OscConfig+0x310>)
 8001d80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d84:	6013      	str	r3, [r2, #0]
 8001d86:	4b62      	ldr	r3, [pc, #392]	@ (8001f10 <HAL_RCC_OscConfig+0x310>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a61      	ldr	r2, [pc, #388]	@ (8001f10 <HAL_RCC_OscConfig+0x310>)
 8001d8c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d90:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d92:	4b5f      	ldr	r3, [pc, #380]	@ (8001f10 <HAL_RCC_OscConfig+0x310>)
 8001d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d96:	f023 020f 	bic.w	r2, r3, #15
 8001d9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	495a      	ldr	r1, [pc, #360]	@ (8001f10 <HAL_RCC_OscConfig+0x310>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001db0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d054      	beq.n	8001e66 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbc:	f7ff faac 	bl	8001318 <HAL_GetTick>
 8001dc0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc4:	e00a      	b.n	8001ddc <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dc6:	f7ff faa7 	bl	8001318 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b64      	cmp	r3, #100	@ 0x64
 8001dd4:	d902      	bls.n	8001ddc <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	f000 bf19 	b.w	8002c0e <HAL_RCC_OscConfig+0x100e>
 8001ddc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001de0:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001de8:	fa93 f3a3 	rbit	r3, r3
 8001dec:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001df0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df4:	fab3 f383 	clz	r3, r3
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b3f      	cmp	r3, #63	@ 0x3f
 8001dfc:	d802      	bhi.n	8001e04 <HAL_RCC_OscConfig+0x204>
 8001dfe:	4b44      	ldr	r3, [pc, #272]	@ (8001f10 <HAL_RCC_OscConfig+0x310>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	e015      	b.n	8001e30 <HAL_RCC_OscConfig+0x230>
 8001e04:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e08:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001e10:	fa93 f3a3 	rbit	r3, r3
 8001e14:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001e18:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e1c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001e20:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001e24:	fa93 f3a3 	rbit	r3, r3
 8001e28:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001e2c:	4b38      	ldr	r3, [pc, #224]	@ (8001f10 <HAL_RCC_OscConfig+0x310>)
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e30:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e34:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001e38:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001e3c:	fa92 f2a2 	rbit	r2, r2
 8001e40:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001e44:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001e48:	fab2 f282 	clz	r2, r2
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	f042 0220 	orr.w	r2, r2, #32
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	f002 021f 	and.w	r2, r2, #31
 8001e58:	2101      	movs	r1, #1
 8001e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e5e:	4013      	ands	r3, r2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d0b0      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x1c6>
 8001e64:	e057      	b.n	8001f16 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e66:	f7ff fa57 	bl	8001318 <HAL_GetTick>
 8001e6a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e6e:	e00a      	b.n	8001e86 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e70:	f7ff fa52 	bl	8001318 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b64      	cmp	r3, #100	@ 0x64
 8001e7e:	d902      	bls.n	8001e86 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	f000 bec4 	b.w	8002c0e <HAL_RCC_OscConfig+0x100e>
 8001e86:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e8a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001e92:	fa93 f3a3 	rbit	r3, r3
 8001e96:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001e9a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e9e:	fab3 f383 	clz	r3, r3
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ea6:	d802      	bhi.n	8001eae <HAL_RCC_OscConfig+0x2ae>
 8001ea8:	4b19      	ldr	r3, [pc, #100]	@ (8001f10 <HAL_RCC_OscConfig+0x310>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	e015      	b.n	8001eda <HAL_RCC_OscConfig+0x2da>
 8001eae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001eb2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001eba:	fa93 f3a3 	rbit	r3, r3
 8001ebe:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001ec2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ec6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001eca:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001ece:	fa93 f3a3 	rbit	r3, r3
 8001ed2:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f10 <HAL_RCC_OscConfig+0x310>)
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eda:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ede:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001ee2:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001ee6:	fa92 f2a2 	rbit	r2, r2
 8001eea:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001eee:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001ef2:	fab2 f282 	clz	r2, r2
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	f042 0220 	orr.w	r2, r2, #32
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	f002 021f 	and.w	r2, r2, #31
 8001f02:	2101      	movs	r1, #1
 8001f04:	fa01 f202 	lsl.w	r2, r1, r2
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1b0      	bne.n	8001e70 <HAL_RCC_OscConfig+0x270>
 8001f0e:	e002      	b.n	8001f16 <HAL_RCC_OscConfig+0x316>
 8001f10:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f1a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 816c 	beq.w	8002204 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f2c:	4bcc      	ldr	r3, [pc, #816]	@ (8002260 <HAL_RCC_OscConfig+0x660>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 030c 	and.w	r3, r3, #12
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00b      	beq.n	8001f50 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f38:	4bc9      	ldr	r3, [pc, #804]	@ (8002260 <HAL_RCC_OscConfig+0x660>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 030c 	and.w	r3, r3, #12
 8001f40:	2b08      	cmp	r3, #8
 8001f42:	d16d      	bne.n	8002020 <HAL_RCC_OscConfig+0x420>
 8001f44:	4bc6      	ldr	r3, [pc, #792]	@ (8002260 <HAL_RCC_OscConfig+0x660>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d167      	bne.n	8002020 <HAL_RCC_OscConfig+0x420>
 8001f50:	2302      	movs	r3, #2
 8001f52:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f56:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001f5a:	fa93 f3a3 	rbit	r3, r3
 8001f5e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001f62:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f66:	fab3 f383 	clz	r3, r3
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f6e:	d802      	bhi.n	8001f76 <HAL_RCC_OscConfig+0x376>
 8001f70:	4bbb      	ldr	r3, [pc, #748]	@ (8002260 <HAL_RCC_OscConfig+0x660>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	e013      	b.n	8001f9e <HAL_RCC_OscConfig+0x39e>
 8001f76:	2302      	movs	r3, #2
 8001f78:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001f80:	fa93 f3a3 	rbit	r3, r3
 8001f84:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001f88:	2302      	movs	r3, #2
 8001f8a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001f8e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001f92:	fa93 f3a3 	rbit	r3, r3
 8001f96:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001f9a:	4bb1      	ldr	r3, [pc, #708]	@ (8002260 <HAL_RCC_OscConfig+0x660>)
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001fa4:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001fa8:	fa92 f2a2 	rbit	r2, r2
 8001fac:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001fb0:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001fb4:	fab2 f282 	clz	r2, r2
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	f042 0220 	orr.w	r2, r2, #32
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	f002 021f 	and.w	r2, r2, #31
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8001fca:	4013      	ands	r3, r2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00a      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x3e6>
 8001fd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fd4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d002      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	f000 be14 	b.w	8002c0e <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe6:	4b9e      	ldr	r3, [pc, #632]	@ (8002260 <HAL_RCC_OscConfig+0x660>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ff2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	21f8      	movs	r1, #248	@ 0xf8
 8001ffc:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002000:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002004:	fa91 f1a1 	rbit	r1, r1
 8002008:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800200c:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002010:	fab1 f181 	clz	r1, r1
 8002014:	b2c9      	uxtb	r1, r1
 8002016:	408b      	lsls	r3, r1
 8002018:	4991      	ldr	r1, [pc, #580]	@ (8002260 <HAL_RCC_OscConfig+0x660>)
 800201a:	4313      	orrs	r3, r2
 800201c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800201e:	e0f1      	b.n	8002204 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002020:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002024:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 8083 	beq.w	8002138 <HAL_RCC_OscConfig+0x538>
 8002032:	2301      	movs	r3, #1
 8002034:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002038:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800203c:	fa93 f3a3 	rbit	r3, r3
 8002040:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002044:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002048:	fab3 f383 	clz	r3, r3
 800204c:	b2db      	uxtb	r3, r3
 800204e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002052:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	461a      	mov	r2, r3
 800205a:	2301      	movs	r3, #1
 800205c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205e:	f7ff f95b 	bl	8001318 <HAL_GetTick>
 8002062:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002066:	e00a      	b.n	800207e <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002068:	f7ff f956 	bl	8001318 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d902      	bls.n	800207e <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	f000 bdc8 	b.w	8002c0e <HAL_RCC_OscConfig+0x100e>
 800207e:	2302      	movs	r3, #2
 8002080:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002084:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002088:	fa93 f3a3 	rbit	r3, r3
 800208c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002090:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002094:	fab3 f383 	clz	r3, r3
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b3f      	cmp	r3, #63	@ 0x3f
 800209c:	d802      	bhi.n	80020a4 <HAL_RCC_OscConfig+0x4a4>
 800209e:	4b70      	ldr	r3, [pc, #448]	@ (8002260 <HAL_RCC_OscConfig+0x660>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	e013      	b.n	80020cc <HAL_RCC_OscConfig+0x4cc>
 80020a4:	2302      	movs	r3, #2
 80020a6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020aa:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80020ae:	fa93 f3a3 	rbit	r3, r3
 80020b2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80020b6:	2302      	movs	r3, #2
 80020b8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80020bc:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80020c0:	fa93 f3a3 	rbit	r3, r3
 80020c4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80020c8:	4b65      	ldr	r3, [pc, #404]	@ (8002260 <HAL_RCC_OscConfig+0x660>)
 80020ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020cc:	2202      	movs	r2, #2
 80020ce:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80020d2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80020d6:	fa92 f2a2 	rbit	r2, r2
 80020da:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80020de:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80020e2:	fab2 f282 	clz	r2, r2
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	f042 0220 	orr.w	r2, r2, #32
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	f002 021f 	and.w	r2, r2, #31
 80020f2:	2101      	movs	r1, #1
 80020f4:	fa01 f202 	lsl.w	r2, r1, r2
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0b4      	beq.n	8002068 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020fe:	4b58      	ldr	r3, [pc, #352]	@ (8002260 <HAL_RCC_OscConfig+0x660>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002106:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800210a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	21f8      	movs	r1, #248	@ 0xf8
 8002114:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002118:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800211c:	fa91 f1a1 	rbit	r1, r1
 8002120:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002124:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002128:	fab1 f181 	clz	r1, r1
 800212c:	b2c9      	uxtb	r1, r1
 800212e:	408b      	lsls	r3, r1
 8002130:	494b      	ldr	r1, [pc, #300]	@ (8002260 <HAL_RCC_OscConfig+0x660>)
 8002132:	4313      	orrs	r3, r2
 8002134:	600b      	str	r3, [r1, #0]
 8002136:	e065      	b.n	8002204 <HAL_RCC_OscConfig+0x604>
 8002138:	2301      	movs	r3, #1
 800213a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002142:	fa93 f3a3 	rbit	r3, r3
 8002146:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800214a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800214e:	fab3 f383 	clz	r3, r3
 8002152:	b2db      	uxtb	r3, r3
 8002154:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002158:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	461a      	mov	r2, r3
 8002160:	2300      	movs	r3, #0
 8002162:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002164:	f7ff f8d8 	bl	8001318 <HAL_GetTick>
 8002168:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800216c:	e00a      	b.n	8002184 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800216e:	f7ff f8d3 	bl	8001318 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d902      	bls.n	8002184 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	f000 bd45 	b.w	8002c0e <HAL_RCC_OscConfig+0x100e>
 8002184:	2302      	movs	r3, #2
 8002186:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800218e:	fa93 f3a3 	rbit	r3, r3
 8002192:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002196:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800219a:	fab3 f383 	clz	r3, r3
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b3f      	cmp	r3, #63	@ 0x3f
 80021a2:	d802      	bhi.n	80021aa <HAL_RCC_OscConfig+0x5aa>
 80021a4:	4b2e      	ldr	r3, [pc, #184]	@ (8002260 <HAL_RCC_OscConfig+0x660>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	e013      	b.n	80021d2 <HAL_RCC_OscConfig+0x5d2>
 80021aa:	2302      	movs	r3, #2
 80021ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80021b4:	fa93 f3a3 	rbit	r3, r3
 80021b8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80021bc:	2302      	movs	r3, #2
 80021be:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80021c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80021c6:	fa93 f3a3 	rbit	r3, r3
 80021ca:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80021ce:	4b24      	ldr	r3, [pc, #144]	@ (8002260 <HAL_RCC_OscConfig+0x660>)
 80021d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d2:	2202      	movs	r2, #2
 80021d4:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80021d8:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80021dc:	fa92 f2a2 	rbit	r2, r2
 80021e0:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80021e4:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80021e8:	fab2 f282 	clz	r2, r2
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	f042 0220 	orr.w	r2, r2, #32
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	f002 021f 	and.w	r2, r2, #31
 80021f8:	2101      	movs	r1, #1
 80021fa:	fa01 f202 	lsl.w	r2, r1, r2
 80021fe:	4013      	ands	r3, r2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1b4      	bne.n	800216e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002204:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002208:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0308 	and.w	r3, r3, #8
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 8115 	beq.w	8002444 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800221a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800221e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d07e      	beq.n	8002328 <HAL_RCC_OscConfig+0x728>
 800222a:	2301      	movs	r3, #1
 800222c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002230:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002234:	fa93 f3a3 	rbit	r3, r3
 8002238:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800223c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002240:	fab3 f383 	clz	r3, r3
 8002244:	b2db      	uxtb	r3, r3
 8002246:	461a      	mov	r2, r3
 8002248:	4b06      	ldr	r3, [pc, #24]	@ (8002264 <HAL_RCC_OscConfig+0x664>)
 800224a:	4413      	add	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	461a      	mov	r2, r3
 8002250:	2301      	movs	r3, #1
 8002252:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002254:	f7ff f860 	bl	8001318 <HAL_GetTick>
 8002258:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800225c:	e00f      	b.n	800227e <HAL_RCC_OscConfig+0x67e>
 800225e:	bf00      	nop
 8002260:	40021000 	.word	0x40021000
 8002264:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002268:	f7ff f856 	bl	8001318 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d902      	bls.n	800227e <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	f000 bcc8 	b.w	8002c0e <HAL_RCC_OscConfig+0x100e>
 800227e:	2302      	movs	r3, #2
 8002280:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002284:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002288:	fa93 f3a3 	rbit	r3, r3
 800228c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002290:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002294:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002298:	2202      	movs	r2, #2
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022a0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	fa93 f2a3 	rbit	r2, r3
 80022aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80022bc:	2202      	movs	r2, #2
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	fa93 f2a3 	rbit	r2, r3
 80022ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80022d6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d8:	4bb0      	ldr	r3, [pc, #704]	@ (800259c <HAL_RCC_OscConfig+0x99c>)
 80022da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80022e4:	2102      	movs	r1, #2
 80022e6:	6019      	str	r1, [r3, #0]
 80022e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	fa93 f1a3 	rbit	r1, r3
 80022f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022fa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80022fe:	6019      	str	r1, [r3, #0]
  return result;
 8002300:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002304:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	fab3 f383 	clz	r3, r3
 800230e:	b2db      	uxtb	r3, r3
 8002310:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002314:	b2db      	uxtb	r3, r3
 8002316:	f003 031f 	and.w	r3, r3, #31
 800231a:	2101      	movs	r1, #1
 800231c:	fa01 f303 	lsl.w	r3, r1, r3
 8002320:	4013      	ands	r3, r2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0a0      	beq.n	8002268 <HAL_RCC_OscConfig+0x668>
 8002326:	e08d      	b.n	8002444 <HAL_RCC_OscConfig+0x844>
 8002328:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800232c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002330:	2201      	movs	r2, #1
 8002332:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002334:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002338:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	fa93 f2a3 	rbit	r2, r3
 8002342:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002346:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800234a:	601a      	str	r2, [r3, #0]
  return result;
 800234c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002350:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002354:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002356:	fab3 f383 	clz	r3, r3
 800235a:	b2db      	uxtb	r3, r3
 800235c:	461a      	mov	r2, r3
 800235e:	4b90      	ldr	r3, [pc, #576]	@ (80025a0 <HAL_RCC_OscConfig+0x9a0>)
 8002360:	4413      	add	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	461a      	mov	r2, r3
 8002366:	2300      	movs	r3, #0
 8002368:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800236a:	f7fe ffd5 	bl	8001318 <HAL_GetTick>
 800236e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002372:	e00a      	b.n	800238a <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002374:	f7fe ffd0 	bl	8001318 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d902      	bls.n	800238a <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	f000 bc42 	b.w	8002c0e <HAL_RCC_OscConfig+0x100e>
 800238a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800238e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002392:	2202      	movs	r2, #2
 8002394:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002396:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800239a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	fa93 f2a3 	rbit	r2, r3
 80023a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80023b6:	2202      	movs	r2, #2
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023be:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	fa93 f2a3 	rbit	r2, r3
 80023c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80023da:	2202      	movs	r2, #2
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	fa93 f2a3 	rbit	r2, r3
 80023ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80023f4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f6:	4b69      	ldr	r3, [pc, #420]	@ (800259c <HAL_RCC_OscConfig+0x99c>)
 80023f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023fe:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002402:	2102      	movs	r1, #2
 8002404:	6019      	str	r1, [r3, #0]
 8002406:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800240a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	fa93 f1a3 	rbit	r1, r3
 8002414:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002418:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800241c:	6019      	str	r1, [r3, #0]
  return result;
 800241e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002422:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	fab3 f383 	clz	r3, r3
 800242c:	b2db      	uxtb	r3, r3
 800242e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002432:	b2db      	uxtb	r3, r3
 8002434:	f003 031f 	and.w	r3, r3, #31
 8002438:	2101      	movs	r1, #1
 800243a:	fa01 f303 	lsl.w	r3, r1, r3
 800243e:	4013      	ands	r3, r2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d197      	bne.n	8002374 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002444:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002448:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 819e 	beq.w	8002796 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 800245a:	2300      	movs	r3, #0
 800245c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002460:	4b4e      	ldr	r3, [pc, #312]	@ (800259c <HAL_RCC_OscConfig+0x99c>)
 8002462:	69db      	ldr	r3, [r3, #28]
 8002464:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d116      	bne.n	800249a <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800246c:	4b4b      	ldr	r3, [pc, #300]	@ (800259c <HAL_RCC_OscConfig+0x99c>)
 800246e:	69db      	ldr	r3, [r3, #28]
 8002470:	4a4a      	ldr	r2, [pc, #296]	@ (800259c <HAL_RCC_OscConfig+0x99c>)
 8002472:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002476:	61d3      	str	r3, [r2, #28]
 8002478:	4b48      	ldr	r3, [pc, #288]	@ (800259c <HAL_RCC_OscConfig+0x99c>)
 800247a:	69db      	ldr	r3, [r3, #28]
 800247c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002480:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002484:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800248e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002492:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002494:	2301      	movs	r3, #1
 8002496:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249a:	4b42      	ldr	r3, [pc, #264]	@ (80025a4 <HAL_RCC_OscConfig+0x9a4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d11a      	bne.n	80024dc <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024a6:	4b3f      	ldr	r3, [pc, #252]	@ (80025a4 <HAL_RCC_OscConfig+0x9a4>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a3e      	ldr	r2, [pc, #248]	@ (80025a4 <HAL_RCC_OscConfig+0x9a4>)
 80024ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024b2:	f7fe ff31 	bl	8001318 <HAL_GetTick>
 80024b6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ba:	e009      	b.n	80024d0 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024bc:	f7fe ff2c 	bl	8001318 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b64      	cmp	r3, #100	@ 0x64
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e39e      	b.n	8002c0e <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d0:	4b34      	ldr	r3, [pc, #208]	@ (80025a4 <HAL_RCC_OscConfig+0x9a4>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0ef      	beq.n	80024bc <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d106      	bne.n	80024fa <HAL_RCC_OscConfig+0x8fa>
 80024ec:	4b2b      	ldr	r3, [pc, #172]	@ (800259c <HAL_RCC_OscConfig+0x99c>)
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	4a2a      	ldr	r2, [pc, #168]	@ (800259c <HAL_RCC_OscConfig+0x99c>)
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	6213      	str	r3, [r2, #32]
 80024f8:	e035      	b.n	8002566 <HAL_RCC_OscConfig+0x966>
 80024fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10c      	bne.n	8002524 <HAL_RCC_OscConfig+0x924>
 800250a:	4b24      	ldr	r3, [pc, #144]	@ (800259c <HAL_RCC_OscConfig+0x99c>)
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	4a23      	ldr	r2, [pc, #140]	@ (800259c <HAL_RCC_OscConfig+0x99c>)
 8002510:	f023 0301 	bic.w	r3, r3, #1
 8002514:	6213      	str	r3, [r2, #32]
 8002516:	4b21      	ldr	r3, [pc, #132]	@ (800259c <HAL_RCC_OscConfig+0x99c>)
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	4a20      	ldr	r2, [pc, #128]	@ (800259c <HAL_RCC_OscConfig+0x99c>)
 800251c:	f023 0304 	bic.w	r3, r3, #4
 8002520:	6213      	str	r3, [r2, #32]
 8002522:	e020      	b.n	8002566 <HAL_RCC_OscConfig+0x966>
 8002524:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002528:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	2b05      	cmp	r3, #5
 8002532:	d10c      	bne.n	800254e <HAL_RCC_OscConfig+0x94e>
 8002534:	4b19      	ldr	r3, [pc, #100]	@ (800259c <HAL_RCC_OscConfig+0x99c>)
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	4a18      	ldr	r2, [pc, #96]	@ (800259c <HAL_RCC_OscConfig+0x99c>)
 800253a:	f043 0304 	orr.w	r3, r3, #4
 800253e:	6213      	str	r3, [r2, #32]
 8002540:	4b16      	ldr	r3, [pc, #88]	@ (800259c <HAL_RCC_OscConfig+0x99c>)
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	4a15      	ldr	r2, [pc, #84]	@ (800259c <HAL_RCC_OscConfig+0x99c>)
 8002546:	f043 0301 	orr.w	r3, r3, #1
 800254a:	6213      	str	r3, [r2, #32]
 800254c:	e00b      	b.n	8002566 <HAL_RCC_OscConfig+0x966>
 800254e:	4b13      	ldr	r3, [pc, #76]	@ (800259c <HAL_RCC_OscConfig+0x99c>)
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	4a12      	ldr	r2, [pc, #72]	@ (800259c <HAL_RCC_OscConfig+0x99c>)
 8002554:	f023 0301 	bic.w	r3, r3, #1
 8002558:	6213      	str	r3, [r2, #32]
 800255a:	4b10      	ldr	r3, [pc, #64]	@ (800259c <HAL_RCC_OscConfig+0x99c>)
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	4a0f      	ldr	r2, [pc, #60]	@ (800259c <HAL_RCC_OscConfig+0x99c>)
 8002560:	f023 0304 	bic.w	r3, r3, #4
 8002564:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002566:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800256a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 8087 	beq.w	8002686 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002578:	f7fe fece 	bl	8001318 <HAL_GetTick>
 800257c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002580:	e012      	b.n	80025a8 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002582:	f7fe fec9 	bl	8001318 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002592:	4293      	cmp	r3, r2
 8002594:	d908      	bls.n	80025a8 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e339      	b.n	8002c0e <HAL_RCC_OscConfig+0x100e>
 800259a:	bf00      	nop
 800259c:	40021000 	.word	0x40021000
 80025a0:	10908120 	.word	0x10908120
 80025a4:	40007000 	.word	0x40007000
 80025a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ac:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80025b0:	2202      	movs	r2, #2
 80025b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	fa93 f2a3 	rbit	r2, r3
 80025c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80025d4:	2202      	movs	r2, #2
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025dc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	fa93 f2a3 	rbit	r2, r3
 80025e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ea:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80025ee:	601a      	str	r2, [r3, #0]
  return result;
 80025f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80025f8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025fa:	fab3 f383 	clz	r3, r3
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d102      	bne.n	8002610 <HAL_RCC_OscConfig+0xa10>
 800260a:	4b98      	ldr	r3, [pc, #608]	@ (800286c <HAL_RCC_OscConfig+0xc6c>)
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	e013      	b.n	8002638 <HAL_RCC_OscConfig+0xa38>
 8002610:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002614:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002618:	2202      	movs	r2, #2
 800261a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002620:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	fa93 f2a3 	rbit	r2, r3
 800262a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800262e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	4b8d      	ldr	r3, [pc, #564]	@ (800286c <HAL_RCC_OscConfig+0xc6c>)
 8002636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002638:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800263c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002640:	2102      	movs	r1, #2
 8002642:	6011      	str	r1, [r2, #0]
 8002644:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002648:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800264c:	6812      	ldr	r2, [r2, #0]
 800264e:	fa92 f1a2 	rbit	r1, r2
 8002652:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002656:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800265a:	6011      	str	r1, [r2, #0]
  return result;
 800265c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002660:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002664:	6812      	ldr	r2, [r2, #0]
 8002666:	fab2 f282 	clz	r2, r2
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	f002 021f 	and.w	r2, r2, #31
 8002676:	2101      	movs	r1, #1
 8002678:	fa01 f202 	lsl.w	r2, r1, r2
 800267c:	4013      	ands	r3, r2
 800267e:	2b00      	cmp	r3, #0
 8002680:	f43f af7f 	beq.w	8002582 <HAL_RCC_OscConfig+0x982>
 8002684:	e07d      	b.n	8002782 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002686:	f7fe fe47 	bl	8001318 <HAL_GetTick>
 800268a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800268e:	e00b      	b.n	80026a8 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002690:	f7fe fe42 	bl	8001318 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e2b2      	b.n	8002c0e <HAL_RCC_OscConfig+0x100e>
 80026a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ac:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80026b0:	2202      	movs	r2, #2
 80026b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	fa93 f2a3 	rbit	r2, r3
 80026c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c6:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80026d4:	2202      	movs	r2, #2
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026dc:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	fa93 f2a3 	rbit	r2, r3
 80026e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ea:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80026ee:	601a      	str	r2, [r3, #0]
  return result;
 80026f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80026f8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026fa:	fab3 f383 	clz	r3, r3
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d102      	bne.n	8002710 <HAL_RCC_OscConfig+0xb10>
 800270a:	4b58      	ldr	r3, [pc, #352]	@ (800286c <HAL_RCC_OscConfig+0xc6c>)
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	e013      	b.n	8002738 <HAL_RCC_OscConfig+0xb38>
 8002710:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002714:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002718:	2202      	movs	r2, #2
 800271a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002720:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	fa93 f2a3 	rbit	r2, r3
 800272a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800272e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	4b4d      	ldr	r3, [pc, #308]	@ (800286c <HAL_RCC_OscConfig+0xc6c>)
 8002736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002738:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800273c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002740:	2102      	movs	r1, #2
 8002742:	6011      	str	r1, [r2, #0]
 8002744:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002748:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800274c:	6812      	ldr	r2, [r2, #0]
 800274e:	fa92 f1a2 	rbit	r1, r2
 8002752:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002756:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800275a:	6011      	str	r1, [r2, #0]
  return result;
 800275c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002760:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002764:	6812      	ldr	r2, [r2, #0]
 8002766:	fab2 f282 	clz	r2, r2
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	f002 021f 	and.w	r2, r2, #31
 8002776:	2101      	movs	r1, #1
 8002778:	fa01 f202 	lsl.w	r2, r1, r2
 800277c:	4013      	ands	r3, r2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d186      	bne.n	8002690 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002782:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002786:	2b01      	cmp	r3, #1
 8002788:	d105      	bne.n	8002796 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800278a:	4b38      	ldr	r3, [pc, #224]	@ (800286c <HAL_RCC_OscConfig+0xc6c>)
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	4a37      	ldr	r2, [pc, #220]	@ (800286c <HAL_RCC_OscConfig+0xc6c>)
 8002790:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002794:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002796:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800279a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f000 8232 	beq.w	8002c0c <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027a8:	4b30      	ldr	r3, [pc, #192]	@ (800286c <HAL_RCC_OscConfig+0xc6c>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f003 030c 	and.w	r3, r3, #12
 80027b0:	2b08      	cmp	r3, #8
 80027b2:	f000 8201 	beq.w	8002bb8 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	f040 8157 	bne.w	8002a76 <HAL_RCC_OscConfig+0xe76>
 80027c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027cc:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80027d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80027d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027da:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	fa93 f2a3 	rbit	r2, r3
 80027e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80027ec:	601a      	str	r2, [r3, #0]
  return result;
 80027ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80027f6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f8:	fab3 f383 	clz	r3, r3
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002802:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	461a      	mov	r2, r3
 800280a:	2300      	movs	r3, #0
 800280c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280e:	f7fe fd83 	bl	8001318 <HAL_GetTick>
 8002812:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002816:	e009      	b.n	800282c <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002818:	f7fe fd7e 	bl	8001318 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e1f0      	b.n	8002c0e <HAL_RCC_OscConfig+0x100e>
 800282c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002830:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002834:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002838:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800283e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	fa93 f2a3 	rbit	r2, r3
 8002848:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800284c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002850:	601a      	str	r2, [r3, #0]
  return result;
 8002852:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002856:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800285a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800285c:	fab3 f383 	clz	r3, r3
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b3f      	cmp	r3, #63	@ 0x3f
 8002864:	d804      	bhi.n	8002870 <HAL_RCC_OscConfig+0xc70>
 8002866:	4b01      	ldr	r3, [pc, #4]	@ (800286c <HAL_RCC_OscConfig+0xc6c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	e029      	b.n	80028c0 <HAL_RCC_OscConfig+0xcc0>
 800286c:	40021000 	.word	0x40021000
 8002870:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002874:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002878:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800287c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002882:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	fa93 f2a3 	rbit	r2, r3
 800288c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002890:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800289a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800289e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	fa93 f2a3 	rbit	r2, r3
 80028b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	4bc3      	ldr	r3, [pc, #780]	@ (8002bcc <HAL_RCC_OscConfig+0xfcc>)
 80028be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028c4:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80028c8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80028cc:	6011      	str	r1, [r2, #0]
 80028ce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028d2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80028d6:	6812      	ldr	r2, [r2, #0]
 80028d8:	fa92 f1a2 	rbit	r1, r2
 80028dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028e0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80028e4:	6011      	str	r1, [r2, #0]
  return result;
 80028e6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028ea:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80028ee:	6812      	ldr	r2, [r2, #0]
 80028f0:	fab2 f282 	clz	r2, r2
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	f042 0220 	orr.w	r2, r2, #32
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	f002 021f 	and.w	r2, r2, #31
 8002900:	2101      	movs	r1, #1
 8002902:	fa01 f202 	lsl.w	r2, r1, r2
 8002906:	4013      	ands	r3, r2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d185      	bne.n	8002818 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800290c:	4baf      	ldr	r3, [pc, #700]	@ (8002bcc <HAL_RCC_OscConfig+0xfcc>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002914:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002918:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002920:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002924:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	430b      	orrs	r3, r1
 800292e:	49a7      	ldr	r1, [pc, #668]	@ (8002bcc <HAL_RCC_OscConfig+0xfcc>)
 8002930:	4313      	orrs	r3, r2
 8002932:	604b      	str	r3, [r1, #4]
 8002934:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002938:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800293c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002940:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002942:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002946:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	fa93 f2a3 	rbit	r2, r3
 8002950:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002954:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002958:	601a      	str	r2, [r3, #0]
  return result;
 800295a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800295e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002962:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002964:	fab3 f383 	clz	r3, r3
 8002968:	b2db      	uxtb	r3, r3
 800296a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800296e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	461a      	mov	r2, r3
 8002976:	2301      	movs	r3, #1
 8002978:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297a:	f7fe fccd 	bl	8001318 <HAL_GetTick>
 800297e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002982:	e009      	b.n	8002998 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002984:	f7fe fcc8 	bl	8001318 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e13a      	b.n	8002c0e <HAL_RCC_OscConfig+0x100e>
 8002998:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800299c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80029a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029aa:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	fa93 f2a3 	rbit	r2, r3
 80029b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80029bc:	601a      	str	r2, [r3, #0]
  return result;
 80029be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80029c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029c8:	fab3 f383 	clz	r3, r3
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80029d0:	d802      	bhi.n	80029d8 <HAL_RCC_OscConfig+0xdd8>
 80029d2:	4b7e      	ldr	r3, [pc, #504]	@ (8002bcc <HAL_RCC_OscConfig+0xfcc>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	e027      	b.n	8002a28 <HAL_RCC_OscConfig+0xe28>
 80029d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029dc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80029e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ea:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	fa93 f2a3 	rbit	r2, r3
 80029f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029f8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a02:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002a06:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a10:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	fa93 f2a3 	rbit	r2, r3
 8002a1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a1e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	4b69      	ldr	r3, [pc, #420]	@ (8002bcc <HAL_RCC_OscConfig+0xfcc>)
 8002a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a28:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a2c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002a30:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002a34:	6011      	str	r1, [r2, #0]
 8002a36:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a3a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002a3e:	6812      	ldr	r2, [r2, #0]
 8002a40:	fa92 f1a2 	rbit	r1, r2
 8002a44:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a48:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002a4c:	6011      	str	r1, [r2, #0]
  return result;
 8002a4e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a52:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002a56:	6812      	ldr	r2, [r2, #0]
 8002a58:	fab2 f282 	clz	r2, r2
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	f042 0220 	orr.w	r2, r2, #32
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	f002 021f 	and.w	r2, r2, #31
 8002a68:	2101      	movs	r1, #1
 8002a6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a6e:	4013      	ands	r3, r2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d087      	beq.n	8002984 <HAL_RCC_OscConfig+0xd84>
 8002a74:	e0ca      	b.n	8002c0c <HAL_RCC_OscConfig+0x100c>
 8002a76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a7a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002a7e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a88:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	fa93 f2a3 	rbit	r2, r3
 8002a92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a96:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002a9a:	601a      	str	r2, [r3, #0]
  return result;
 8002a9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002aa4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa6:	fab3 f383 	clz	r3, r3
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002ab0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	2300      	movs	r3, #0
 8002aba:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abc:	f7fe fc2c 	bl	8001318 <HAL_GetTick>
 8002ac0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ac4:	e009      	b.n	8002ada <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ac6:	f7fe fc27 	bl	8001318 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e099      	b.n	8002c0e <HAL_RCC_OscConfig+0x100e>
 8002ada:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ade:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002ae2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ae6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aec:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	fa93 f2a3 	rbit	r2, r3
 8002af6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002afa:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002afe:	601a      	str	r2, [r3, #0]
  return result;
 8002b00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b04:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002b08:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b0a:	fab3 f383 	clz	r3, r3
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b12:	d802      	bhi.n	8002b1a <HAL_RCC_OscConfig+0xf1a>
 8002b14:	4b2d      	ldr	r3, [pc, #180]	@ (8002bcc <HAL_RCC_OscConfig+0xfcc>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	e027      	b.n	8002b6a <HAL_RCC_OscConfig+0xf6a>
 8002b1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b1e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002b22:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b2c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	fa93 f2a3 	rbit	r2, r3
 8002b36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b3a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b44:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002b48:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b52:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	fa93 f2a3 	rbit	r2, r3
 8002b5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b60:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	4b19      	ldr	r3, [pc, #100]	@ (8002bcc <HAL_RCC_OscConfig+0xfcc>)
 8002b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b6e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002b72:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002b76:	6011      	str	r1, [r2, #0]
 8002b78:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b7c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002b80:	6812      	ldr	r2, [r2, #0]
 8002b82:	fa92 f1a2 	rbit	r1, r2
 8002b86:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b8a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002b8e:	6011      	str	r1, [r2, #0]
  return result;
 8002b90:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b94:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002b98:	6812      	ldr	r2, [r2, #0]
 8002b9a:	fab2 f282 	clz	r2, r2
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	f042 0220 	orr.w	r2, r2, #32
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	f002 021f 	and.w	r2, r2, #31
 8002baa:	2101      	movs	r1, #1
 8002bac:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d187      	bne.n	8002ac6 <HAL_RCC_OscConfig+0xec6>
 8002bb6:	e029      	b.n	8002c0c <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bbc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d103      	bne.n	8002bd0 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e020      	b.n	8002c0e <HAL_RCC_OscConfig+0x100e>
 8002bcc:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bd0:	4b11      	ldr	r3, [pc, #68]	@ (8002c18 <HAL_RCC_OscConfig+0x1018>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002bd8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002bdc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002be0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d10b      	bne.n	8002c08 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002bf0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002bf4:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002bf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bfc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d001      	beq.n	8002c0c <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e000      	b.n	8002c0e <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40021000 	.word	0x40021000

08002c1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b09e      	sub	sp, #120	@ 0x78
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e154      	b.n	8002ede <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c34:	4b89      	ldr	r3, [pc, #548]	@ (8002e5c <HAL_RCC_ClockConfig+0x240>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d910      	bls.n	8002c64 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c42:	4b86      	ldr	r3, [pc, #536]	@ (8002e5c <HAL_RCC_ClockConfig+0x240>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f023 0207 	bic.w	r2, r3, #7
 8002c4a:	4984      	ldr	r1, [pc, #528]	@ (8002e5c <HAL_RCC_ClockConfig+0x240>)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c52:	4b82      	ldr	r3, [pc, #520]	@ (8002e5c <HAL_RCC_ClockConfig+0x240>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d001      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e13c      	b.n	8002ede <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d008      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c70:	4b7b      	ldr	r3, [pc, #492]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	4978      	ldr	r1, [pc, #480]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 80cd 	beq.w	8002e2a <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d137      	bne.n	8002d08 <HAL_RCC_ClockConfig+0xec>
 8002c98:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ca0:	fa93 f3a3 	rbit	r3, r3
 8002ca4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002ca6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca8:	fab3 f383 	clz	r3, r3
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b3f      	cmp	r3, #63	@ 0x3f
 8002cb0:	d802      	bhi.n	8002cb8 <HAL_RCC_ClockConfig+0x9c>
 8002cb2:	4b6b      	ldr	r3, [pc, #428]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	e00f      	b.n	8002cd8 <HAL_RCC_ClockConfig+0xbc>
 8002cb8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002cbc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002cc0:	fa93 f3a3 	rbit	r3, r3
 8002cc4:	667b      	str	r3, [r7, #100]	@ 0x64
 8002cc6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002cca:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ccc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002cce:	fa93 f3a3 	rbit	r3, r3
 8002cd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002cd4:	4b62      	ldr	r3, [pc, #392]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002cdc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002cde:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002ce0:	fa92 f2a2 	rbit	r2, r2
 8002ce4:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002ce6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002ce8:	fab2 f282 	clz	r2, r2
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	f042 0220 	orr.w	r2, r2, #32
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	f002 021f 	and.w	r2, r2, #31
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d171      	bne.n	8002de8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e0ea      	b.n	8002ede <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d137      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x164>
 8002d10:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d14:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d18:	fa93 f3a3 	rbit	r3, r3
 8002d1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002d1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d20:	fab3 f383 	clz	r3, r3
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b3f      	cmp	r3, #63	@ 0x3f
 8002d28:	d802      	bhi.n	8002d30 <HAL_RCC_ClockConfig+0x114>
 8002d2a:	4b4d      	ldr	r3, [pc, #308]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	e00f      	b.n	8002d50 <HAL_RCC_ClockConfig+0x134>
 8002d30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d34:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d38:	fa93 f3a3 	rbit	r3, r3
 8002d3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d42:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d46:	fa93 f3a3 	rbit	r3, r3
 8002d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d4c:	4b44      	ldr	r3, [pc, #272]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d50:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d54:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002d56:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002d58:	fa92 f2a2 	rbit	r2, r2
 8002d5c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002d5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d60:	fab2 f282 	clz	r2, r2
 8002d64:	b2d2      	uxtb	r2, r2
 8002d66:	f042 0220 	orr.w	r2, r2, #32
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	f002 021f 	and.w	r2, r2, #31
 8002d70:	2101      	movs	r1, #1
 8002d72:	fa01 f202 	lsl.w	r2, r1, r2
 8002d76:	4013      	ands	r3, r2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d135      	bne.n	8002de8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e0ae      	b.n	8002ede <HAL_RCC_ClockConfig+0x2c2>
 8002d80:	2302      	movs	r3, #2
 8002d82:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d86:	fa93 f3a3 	rbit	r3, r3
 8002d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d8e:	fab3 f383 	clz	r3, r3
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b3f      	cmp	r3, #63	@ 0x3f
 8002d96:	d802      	bhi.n	8002d9e <HAL_RCC_ClockConfig+0x182>
 8002d98:	4b31      	ldr	r3, [pc, #196]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	e00d      	b.n	8002dba <HAL_RCC_ClockConfig+0x19e>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002da4:	fa93 f3a3 	rbit	r3, r3
 8002da8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002daa:	2302      	movs	r3, #2
 8002dac:	623b      	str	r3, [r7, #32]
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	fa93 f3a3 	rbit	r3, r3
 8002db4:	61fb      	str	r3, [r7, #28]
 8002db6:	4b2a      	ldr	r3, [pc, #168]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dba:	2202      	movs	r2, #2
 8002dbc:	61ba      	str	r2, [r7, #24]
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	fa92 f2a2 	rbit	r2, r2
 8002dc4:	617a      	str	r2, [r7, #20]
  return result;
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	fab2 f282 	clz	r2, r2
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	f042 0220 	orr.w	r2, r2, #32
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	f002 021f 	and.w	r2, r2, #31
 8002dd8:	2101      	movs	r1, #1
 8002dda:	fa01 f202 	lsl.w	r2, r1, r2
 8002dde:	4013      	ands	r3, r2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e07a      	b.n	8002ede <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002de8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f023 0203 	bic.w	r2, r3, #3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	491a      	ldr	r1, [pc, #104]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dfa:	f7fe fa8d 	bl	8001318 <HAL_GetTick>
 8002dfe:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e00:	e00a      	b.n	8002e18 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e02:	f7fe fa89 	bl	8001318 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e062      	b.n	8002ede <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e18:	4b11      	ldr	r3, [pc, #68]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f003 020c 	and.w	r2, r3, #12
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d1eb      	bne.n	8002e02 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8002e5c <HAL_RCC_ClockConfig+0x240>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d215      	bcs.n	8002e64 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e38:	4b08      	ldr	r3, [pc, #32]	@ (8002e5c <HAL_RCC_ClockConfig+0x240>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f023 0207 	bic.w	r2, r3, #7
 8002e40:	4906      	ldr	r1, [pc, #24]	@ (8002e5c <HAL_RCC_ClockConfig+0x240>)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e48:	4b04      	ldr	r3, [pc, #16]	@ (8002e5c <HAL_RCC_ClockConfig+0x240>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d006      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e041      	b.n	8002ede <HAL_RCC_ClockConfig+0x2c2>
 8002e5a:	bf00      	nop
 8002e5c:	40022000 	.word	0x40022000
 8002e60:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d008      	beq.n	8002e82 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e70:	4b1d      	ldr	r3, [pc, #116]	@ (8002ee8 <HAL_RCC_ClockConfig+0x2cc>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	491a      	ldr	r1, [pc, #104]	@ (8002ee8 <HAL_RCC_ClockConfig+0x2cc>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d009      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e8e:	4b16      	ldr	r3, [pc, #88]	@ (8002ee8 <HAL_RCC_ClockConfig+0x2cc>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4912      	ldr	r1, [pc, #72]	@ (8002ee8 <HAL_RCC_ClockConfig+0x2cc>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002ea2:	f000 f829 	bl	8002ef8 <HAL_RCC_GetSysClockFreq>
 8002ea6:	4601      	mov	r1, r0
 8002ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8002ee8 <HAL_RCC_ClockConfig+0x2cc>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002eb0:	22f0      	movs	r2, #240	@ 0xf0
 8002eb2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	fa92 f2a2 	rbit	r2, r2
 8002eba:	60fa      	str	r2, [r7, #12]
  return result;
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	fab2 f282 	clz	r2, r2
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	40d3      	lsrs	r3, r2
 8002ec6:	4a09      	ldr	r2, [pc, #36]	@ (8002eec <HAL_RCC_ClockConfig+0x2d0>)
 8002ec8:	5cd3      	ldrb	r3, [r2, r3]
 8002eca:	fa21 f303 	lsr.w	r3, r1, r3
 8002ece:	4a08      	ldr	r2, [pc, #32]	@ (8002ef0 <HAL_RCC_ClockConfig+0x2d4>)
 8002ed0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002ed2:	4b08      	ldr	r3, [pc, #32]	@ (8002ef4 <HAL_RCC_ClockConfig+0x2d8>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fe f89c 	bl	8001014 <HAL_InitTick>
  
  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3778      	adds	r7, #120	@ 0x78
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	08008420 	.word	0x08008420
 8002ef0:	2000002c 	.word	0x2000002c
 8002ef4:	20000030 	.word	0x20000030

08002ef8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b087      	sub	sp, #28
 8002efc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	2300      	movs	r3, #0
 8002f04:	60bb      	str	r3, [r7, #8]
 8002f06:	2300      	movs	r3, #0
 8002f08:	617b      	str	r3, [r7, #20]
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002f12:	4b1e      	ldr	r3, [pc, #120]	@ (8002f8c <HAL_RCC_GetSysClockFreq+0x94>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f003 030c 	and.w	r3, r3, #12
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d002      	beq.n	8002f28 <HAL_RCC_GetSysClockFreq+0x30>
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d003      	beq.n	8002f2e <HAL_RCC_GetSysClockFreq+0x36>
 8002f26:	e026      	b.n	8002f76 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f28:	4b19      	ldr	r3, [pc, #100]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f2a:	613b      	str	r3, [r7, #16]
      break;
 8002f2c:	e026      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	0c9b      	lsrs	r3, r3, #18
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	4a17      	ldr	r2, [pc, #92]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f38:	5cd3      	ldrb	r3, [r2, r3]
 8002f3a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002f3c:	4b13      	ldr	r3, [pc, #76]	@ (8002f8c <HAL_RCC_GetSysClockFreq+0x94>)
 8002f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f40:	f003 030f 	and.w	r3, r3, #15
 8002f44:	4a14      	ldr	r2, [pc, #80]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f46:	5cd3      	ldrb	r3, [r2, r3]
 8002f48:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d008      	beq.n	8002f66 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f54:	4a0e      	ldr	r2, [pc, #56]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	fb02 f303 	mul.w	r3, r2, r3
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	e004      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a0c      	ldr	r2, [pc, #48]	@ (8002f9c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f6a:	fb02 f303 	mul.w	r3, r2, r3
 8002f6e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	613b      	str	r3, [r7, #16]
      break;
 8002f74:	e002      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f76:	4b06      	ldr	r3, [pc, #24]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f78:	613b      	str	r3, [r7, #16]
      break;
 8002f7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f7c:	693b      	ldr	r3, [r7, #16]
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	371c      	adds	r7, #28
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	007a1200 	.word	0x007a1200
 8002f94:	08008438 	.word	0x08008438
 8002f98:	08008448 	.word	0x08008448
 8002f9c:	003d0900 	.word	0x003d0900

08002fa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fa4:	4b03      	ldr	r3, [pc, #12]	@ (8002fb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	2000002c 	.word	0x2000002c

08002fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002fbe:	f7ff ffef 	bl	8002fa0 <HAL_RCC_GetHCLKFreq>
 8002fc2:	4601      	mov	r1, r0
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ff4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002fcc:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002fd0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	fa92 f2a2 	rbit	r2, r2
 8002fd8:	603a      	str	r2, [r7, #0]
  return result;
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	fab2 f282 	clz	r2, r2
 8002fe0:	b2d2      	uxtb	r2, r2
 8002fe2:	40d3      	lsrs	r3, r2
 8002fe4:	4a04      	ldr	r2, [pc, #16]	@ (8002ff8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002fe6:	5cd3      	ldrb	r3, [r2, r3]
 8002fe8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002fec:	4618      	mov	r0, r3
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	08008430 	.word	0x08008430

08002ffc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003002:	f7ff ffcd 	bl	8002fa0 <HAL_RCC_GetHCLKFreq>
 8003006:	4601      	mov	r1, r0
 8003008:	4b0b      	ldr	r3, [pc, #44]	@ (8003038 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003010:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003014:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	fa92 f2a2 	rbit	r2, r2
 800301c:	603a      	str	r2, [r7, #0]
  return result;
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	fab2 f282 	clz	r2, r2
 8003024:	b2d2      	uxtb	r2, r2
 8003026:	40d3      	lsrs	r3, r2
 8003028:	4a04      	ldr	r2, [pc, #16]	@ (800303c <HAL_RCC_GetPCLK2Freq+0x40>)
 800302a:	5cd3      	ldrb	r3, [r2, r3]
 800302c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003030:	4618      	mov	r0, r3
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40021000 	.word	0x40021000
 800303c:	08008430 	.word	0x08008430

08003040 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	220f      	movs	r2, #15
 800304e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003050:	4b12      	ldr	r3, [pc, #72]	@ (800309c <HAL_RCC_GetClockConfig+0x5c>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f003 0203 	and.w	r2, r3, #3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800305c:	4b0f      	ldr	r3, [pc, #60]	@ (800309c <HAL_RCC_GetClockConfig+0x5c>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003068:	4b0c      	ldr	r3, [pc, #48]	@ (800309c <HAL_RCC_GetClockConfig+0x5c>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003074:	4b09      	ldr	r3, [pc, #36]	@ (800309c <HAL_RCC_GetClockConfig+0x5c>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	08db      	lsrs	r3, r3, #3
 800307a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003082:	4b07      	ldr	r3, [pc, #28]	@ (80030a0 <HAL_RCC_GetClockConfig+0x60>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0207 	and.w	r2, r3, #7
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	601a      	str	r2, [r3, #0]
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40021000 	.word	0x40021000
 80030a0:	40022000 	.word	0x40022000

080030a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b092      	sub	sp, #72	@ 0x48
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030ac:	2300      	movs	r3, #0
 80030ae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80030b4:	2300      	movs	r3, #0
 80030b6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 80cb 	beq.w	800325e <HAL_RCCEx_PeriphCLKConfig+0x1ba>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030c8:	4b85      	ldr	r3, [pc, #532]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10e      	bne.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030d4:	4b82      	ldr	r3, [pc, #520]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80030d6:	69db      	ldr	r3, [r3, #28]
 80030d8:	4a81      	ldr	r2, [pc, #516]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80030da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030de:	61d3      	str	r3, [r2, #28]
 80030e0:	4b7f      	ldr	r3, [pc, #508]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030e8:	60bb      	str	r3, [r7, #8]
 80030ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ec:	2301      	movs	r3, #1
 80030ee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f2:	4b7c      	ldr	r3, [pc, #496]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d118      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030fe:	4b79      	ldr	r3, [pc, #484]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a78      	ldr	r2, [pc, #480]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003104:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003108:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800310a:	f7fe f905 	bl	8001318 <HAL_GetTick>
 800310e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003110:	e008      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003112:	f7fe f901 	bl	8001318 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b64      	cmp	r3, #100	@ 0x64
 800311e:	d901      	bls.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e0d9      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003124:	4b6f      	ldr	r3, [pc, #444]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0f0      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003130:	4b6b      	ldr	r3, [pc, #428]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003138:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800313a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800313c:	2b00      	cmp	r3, #0
 800313e:	d07b      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003148:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800314a:	429a      	cmp	r2, r3
 800314c:	d074      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800314e:	4b64      	ldr	r3, [pc, #400]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003156:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003158:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800315c:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003160:	fa93 f3a3 	rbit	r3, r3
 8003164:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003168:	fab3 f383 	clz	r3, r3
 800316c:	b2db      	uxtb	r3, r3
 800316e:	461a      	mov	r2, r3
 8003170:	4b5d      	ldr	r3, [pc, #372]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003172:	4413      	add	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	461a      	mov	r2, r3
 8003178:	2301      	movs	r3, #1
 800317a:	6013      	str	r3, [r2, #0]
 800317c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003180:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003184:	fa93 f3a3 	rbit	r3, r3
 8003188:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800318a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800318c:	fab3 f383 	clz	r3, r3
 8003190:	b2db      	uxtb	r3, r3
 8003192:	461a      	mov	r2, r3
 8003194:	4b54      	ldr	r3, [pc, #336]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003196:	4413      	add	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	461a      	mov	r2, r3
 800319c:	2300      	movs	r3, #0
 800319e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80031a0:	4a4f      	ldr	r2, [pc, #316]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80031a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031a4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80031a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d043      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b0:	f7fe f8b2 	bl	8001318 <HAL_GetTick>
 80031b4:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b6:	e00a      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b8:	f7fe f8ae 	bl	8001318 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d901      	bls.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e084      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80031ce:	2302      	movs	r3, #2
 80031d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031d4:	fa93 f3a3 	rbit	r3, r3
 80031d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80031da:	2302      	movs	r3, #2
 80031dc:	623b      	str	r3, [r7, #32]
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	fa93 f3a3 	rbit	r3, r3
 80031e4:	61fb      	str	r3, [r7, #28]
  return result;
 80031e6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e8:	fab3 f383 	clz	r3, r3
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d102      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80031f8:	4b39      	ldr	r3, [pc, #228]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	e007      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x16a>
 80031fe:	2302      	movs	r3, #2
 8003200:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	fa93 f3a3 	rbit	r3, r3
 8003208:	617b      	str	r3, [r7, #20]
 800320a:	4b35      	ldr	r3, [pc, #212]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800320c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320e:	2202      	movs	r2, #2
 8003210:	613a      	str	r2, [r7, #16]
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	fa92 f2a2 	rbit	r2, r2
 8003218:	60fa      	str	r2, [r7, #12]
  return result;
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	fab2 f282 	clz	r2, r2
 8003220:	b2d2      	uxtb	r2, r2
 8003222:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	f002 021f 	and.w	r2, r2, #31
 800322c:	2101      	movs	r1, #1
 800322e:	fa01 f202 	lsl.w	r2, r1, r2
 8003232:	4013      	ands	r3, r2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0bf      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003238:	4b29      	ldr	r3, [pc, #164]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	4926      	ldr	r1, [pc, #152]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003246:	4313      	orrs	r3, r2
 8003248:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800324a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800324e:	2b01      	cmp	r3, #1
 8003250:	d105      	bne.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003252:	4b23      	ldr	r3, [pc, #140]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	4a22      	ldr	r2, [pc, #136]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003258:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800325c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	d008      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800326a:	4b1d      	ldr	r3, [pc, #116]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326e:	f023 0203 	bic.w	r2, r3, #3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	491a      	ldr	r1, [pc, #104]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003278:	4313      	orrs	r3, r2
 800327a:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0320 	and.w	r3, r3, #32
 8003284:	2b00      	cmp	r3, #0
 8003286:	d008      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003288:	4b15      	ldr	r3, [pc, #84]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800328a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328c:	f023 0210 	bic.w	r2, r3, #16
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	4912      	ldr	r1, [pc, #72]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003296:	4313      	orrs	r3, r2
 8003298:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d008      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80032a6:	4b0e      	ldr	r3, [pc, #56]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80032a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032aa:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	490b      	ldr	r1, [pc, #44]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d008      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80032c4:	4b06      	ldr	r3, [pc, #24]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80032c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	4903      	ldr	r1, [pc, #12]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3748      	adds	r7, #72	@ 0x48
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40021000 	.word	0x40021000
 80032e4:	40007000 	.word	0x40007000
 80032e8:	10908100 	.word	0x10908100

080032ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e049      	b.n	8003392 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d106      	bne.n	8003318 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f841 	bl	800339a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2202      	movs	r2, #2
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3304      	adds	r3, #4
 8003328:	4619      	mov	r1, r3
 800332a:	4610      	mov	r0, r2
 800332c:	f000 f9c6 	bl	80036bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
	...

080033b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d001      	beq.n	80033c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e040      	b.n	800344a <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2202      	movs	r2, #2
 80033cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0201 	orr.w	r2, r2, #1
 80033de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a1c      	ldr	r2, [pc, #112]	@ (8003458 <HAL_TIM_Base_Start_IT+0xa8>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d00e      	beq.n	8003408 <HAL_TIM_Base_Start_IT+0x58>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033f2:	d009      	beq.n	8003408 <HAL_TIM_Base_Start_IT+0x58>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a18      	ldr	r2, [pc, #96]	@ (800345c <HAL_TIM_Base_Start_IT+0xac>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d004      	beq.n	8003408 <HAL_TIM_Base_Start_IT+0x58>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a17      	ldr	r2, [pc, #92]	@ (8003460 <HAL_TIM_Base_Start_IT+0xb0>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d115      	bne.n	8003434 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	4b15      	ldr	r3, [pc, #84]	@ (8003464 <HAL_TIM_Base_Start_IT+0xb4>)
 8003410:	4013      	ands	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2b06      	cmp	r3, #6
 8003418:	d015      	beq.n	8003446 <HAL_TIM_Base_Start_IT+0x96>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003420:	d011      	beq.n	8003446 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f042 0201 	orr.w	r2, r2, #1
 8003430:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003432:	e008      	b.n	8003446 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0201 	orr.w	r2, r2, #1
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	e000      	b.n	8003448 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003446:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3714      	adds	r7, #20
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	40012c00 	.word	0x40012c00
 800345c:	40000400 	.word	0x40000400
 8003460:	40014000 	.word	0x40014000
 8003464:	00010007 	.word	0x00010007

08003468 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d020      	beq.n	80034cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d01b      	beq.n	80034cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f06f 0202 	mvn.w	r2, #2
 800349c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f8e4 	bl	8003680 <HAL_TIM_IC_CaptureCallback>
 80034b8:	e005      	b.n	80034c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f8d6 	bl	800366c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 f8e7 	bl	8003694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	f003 0304 	and.w	r3, r3, #4
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d020      	beq.n	8003518 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f003 0304 	and.w	r3, r3, #4
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d01b      	beq.n	8003518 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f06f 0204 	mvn.w	r2, #4
 80034e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2202      	movs	r2, #2
 80034ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f8be 	bl	8003680 <HAL_TIM_IC_CaptureCallback>
 8003504:	e005      	b.n	8003512 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f8b0 	bl	800366c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f8c1 	bl	8003694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	2b00      	cmp	r3, #0
 8003520:	d020      	beq.n	8003564 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f003 0308 	and.w	r3, r3, #8
 8003528:	2b00      	cmp	r3, #0
 800352a:	d01b      	beq.n	8003564 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f06f 0208 	mvn.w	r2, #8
 8003534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2204      	movs	r2, #4
 800353a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	f003 0303 	and.w	r3, r3, #3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f898 	bl	8003680 <HAL_TIM_IC_CaptureCallback>
 8003550:	e005      	b.n	800355e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f88a 	bl	800366c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 f89b 	bl	8003694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f003 0310 	and.w	r3, r3, #16
 800356a:	2b00      	cmp	r3, #0
 800356c:	d020      	beq.n	80035b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f003 0310 	and.w	r3, r3, #16
 8003574:	2b00      	cmp	r3, #0
 8003576:	d01b      	beq.n	80035b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f06f 0210 	mvn.w	r2, #16
 8003580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2208      	movs	r2, #8
 8003586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f872 	bl	8003680 <HAL_TIM_IC_CaptureCallback>
 800359c:	e005      	b.n	80035aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f864 	bl	800366c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 f875 	bl	8003694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00c      	beq.n	80035d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d007      	beq.n	80035d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f06f 0201 	mvn.w	r2, #1
 80035cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7fc ff36 	bl	8000440 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00c      	beq.n	80035f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d007      	beq.n	80035f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80035f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f8f0 	bl	80037d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00c      	beq.n	800361c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003608:	2b00      	cmp	r3, #0
 800360a:	d007      	beq.n	800361c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f8e8 	bl	80037ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00c      	beq.n	8003640 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800362c:	2b00      	cmp	r3, #0
 800362e:	d007      	beq.n	8003640 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f834 	bl	80036a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f003 0320 	and.w	r3, r3, #32
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00c      	beq.n	8003664 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f003 0320 	and.w	r3, r3, #32
 8003650:	2b00      	cmp	r3, #0
 8003652:	d007      	beq.n	8003664 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f06f 0220 	mvn.w	r2, #32
 800365c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f8b0 	bl	80037c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003664:	bf00      	nop
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a38      	ldr	r2, [pc, #224]	@ (80037b0 <TIM_Base_SetConfig+0xf4>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d007      	beq.n	80036e4 <TIM_Base_SetConfig+0x28>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036da:	d003      	beq.n	80036e4 <TIM_Base_SetConfig+0x28>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a35      	ldr	r2, [pc, #212]	@ (80037b4 <TIM_Base_SetConfig+0xf8>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d108      	bne.n	80036f6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a2d      	ldr	r2, [pc, #180]	@ (80037b0 <TIM_Base_SetConfig+0xf4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d013      	beq.n	8003726 <TIM_Base_SetConfig+0x6a>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003704:	d00f      	beq.n	8003726 <TIM_Base_SetConfig+0x6a>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a2a      	ldr	r2, [pc, #168]	@ (80037b4 <TIM_Base_SetConfig+0xf8>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d00b      	beq.n	8003726 <TIM_Base_SetConfig+0x6a>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a29      	ldr	r2, [pc, #164]	@ (80037b8 <TIM_Base_SetConfig+0xfc>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d007      	beq.n	8003726 <TIM_Base_SetConfig+0x6a>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a28      	ldr	r2, [pc, #160]	@ (80037bc <TIM_Base_SetConfig+0x100>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d003      	beq.n	8003726 <TIM_Base_SetConfig+0x6a>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a27      	ldr	r2, [pc, #156]	@ (80037c0 <TIM_Base_SetConfig+0x104>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d108      	bne.n	8003738 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800372c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	4313      	orrs	r3, r2
 8003736:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	4313      	orrs	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a14      	ldr	r2, [pc, #80]	@ (80037b0 <TIM_Base_SetConfig+0xf4>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d00b      	beq.n	800377c <TIM_Base_SetConfig+0xc0>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a14      	ldr	r2, [pc, #80]	@ (80037b8 <TIM_Base_SetConfig+0xfc>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d007      	beq.n	800377c <TIM_Base_SetConfig+0xc0>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a13      	ldr	r2, [pc, #76]	@ (80037bc <TIM_Base_SetConfig+0x100>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d003      	beq.n	800377c <TIM_Base_SetConfig+0xc0>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a12      	ldr	r2, [pc, #72]	@ (80037c0 <TIM_Base_SetConfig+0x104>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d103      	bne.n	8003784 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	691a      	ldr	r2, [r3, #16]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b01      	cmp	r3, #1
 8003794:	d105      	bne.n	80037a2 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f023 0201 	bic.w	r2, r3, #1
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	611a      	str	r2, [r3, #16]
  }
}
 80037a2:	bf00      	nop
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	40012c00 	.word	0x40012c00
 80037b4:	40000400 	.word	0x40000400
 80037b8:	40014000 	.word	0x40014000
 80037bc:	40014400 	.word	0x40014400
 80037c0:	40014800 	.word	0x40014800

080037c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08a      	sub	sp, #40	@ 0x28
 8003804:	af02      	add	r7, sp, #8
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	603b      	str	r3, [r7, #0]
 800380c:	4613      	mov	r3, r2
 800380e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003814:	2b20      	cmp	r3, #32
 8003816:	d177      	bne.n	8003908 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d002      	beq.n	8003824 <HAL_UART_Transmit+0x24>
 800381e:	88fb      	ldrh	r3, [r7, #6]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d101      	bne.n	8003828 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e070      	b.n	800390a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2221      	movs	r2, #33	@ 0x21
 8003834:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003836:	f7fd fd6f 	bl	8001318 <HAL_GetTick>
 800383a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	88fa      	ldrh	r2, [r7, #6]
 8003840:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	88fa      	ldrh	r2, [r7, #6]
 8003848:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003854:	d108      	bne.n	8003868 <HAL_UART_Transmit+0x68>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d104      	bne.n	8003868 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800385e:	2300      	movs	r3, #0
 8003860:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	61bb      	str	r3, [r7, #24]
 8003866:	e003      	b.n	8003870 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800386c:	2300      	movs	r3, #0
 800386e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003870:	e02f      	b.n	80038d2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	2200      	movs	r2, #0
 800387a:	2180      	movs	r1, #128	@ 0x80
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 fdcd 	bl	800441c <UART_WaitOnFlagUntilTimeout>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d004      	beq.n	8003892 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2220      	movs	r2, #32
 800388c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e03b      	b.n	800390a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10b      	bne.n	80038b0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	881a      	ldrh	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038a4:	b292      	uxth	r2, r2
 80038a6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	3302      	adds	r3, #2
 80038ac:	61bb      	str	r3, [r7, #24]
 80038ae:	e007      	b.n	80038c0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	781a      	ldrb	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	3301      	adds	r3, #1
 80038be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	3b01      	subs	r3, #1
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80038d8:	b29b      	uxth	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1c9      	bne.n	8003872 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	2200      	movs	r2, #0
 80038e6:	2140      	movs	r1, #64	@ 0x40
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 fd97 	bl	800441c <UART_WaitOnFlagUntilTimeout>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d004      	beq.n	80038fe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2220      	movs	r2, #32
 80038f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e005      	b.n	800390a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2220      	movs	r2, #32
 8003902:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003904:	2300      	movs	r3, #0
 8003906:	e000      	b.n	800390a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003908:	2302      	movs	r3, #2
  }
}
 800390a:	4618      	mov	r0, r3
 800390c:	3720      	adds	r7, #32
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
	...

08003914 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b0ba      	sub	sp, #232	@ 0xe8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800393a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800393e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003942:	4013      	ands	r3, r2
 8003944:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003948:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800394c:	2b00      	cmp	r3, #0
 800394e:	d115      	bne.n	800397c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003954:	f003 0320 	and.w	r3, r3, #32
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00f      	beq.n	800397c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800395c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003960:	f003 0320 	and.w	r3, r3, #32
 8003964:	2b00      	cmp	r3, #0
 8003966:	d009      	beq.n	800397c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 82ab 	beq.w	8003ec8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	4798      	blx	r3
      }
      return;
 800397a:	e2a5      	b.n	8003ec8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800397c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 8117 	beq.w	8003bb4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003986:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d106      	bne.n	80039a0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003992:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003996:	4b85      	ldr	r3, [pc, #532]	@ (8003bac <HAL_UART_IRQHandler+0x298>)
 8003998:	4013      	ands	r3, r2
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 810a 	beq.w	8003bb4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80039a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d011      	beq.n	80039d0 <HAL_UART_IRQHandler+0xbc>
 80039ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00b      	beq.n	80039d0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2201      	movs	r2, #1
 80039be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039c6:	f043 0201 	orr.w	r2, r3, #1
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d011      	beq.n	8003a00 <HAL_UART_IRQHandler+0xec>
 80039dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00b      	beq.n	8003a00 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2202      	movs	r2, #2
 80039ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039f6:	f043 0204 	orr.w	r2, r3, #4
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d011      	beq.n	8003a30 <HAL_UART_IRQHandler+0x11c>
 8003a0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00b      	beq.n	8003a30 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2204      	movs	r2, #4
 8003a1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a26:	f043 0202 	orr.w	r2, r3, #2
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a34:	f003 0308 	and.w	r3, r3, #8
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d017      	beq.n	8003a6c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a40:	f003 0320 	and.w	r3, r3, #32
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d105      	bne.n	8003a54 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003a48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a4c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00b      	beq.n	8003a6c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2208      	movs	r2, #8
 8003a5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a62:	f043 0208 	orr.w	r2, r3, #8
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d012      	beq.n	8003a9e <HAL_UART_IRQHandler+0x18a>
 8003a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a7c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00c      	beq.n	8003a9e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a94:	f043 0220 	orr.w	r2, r3, #32
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 8211 	beq.w	8003ecc <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aae:	f003 0320 	and.w	r3, r3, #32
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00d      	beq.n	8003ad2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003aba:	f003 0320 	and.w	r3, r3, #32
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d007      	beq.n	8003ad2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ad8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ae6:	2b40      	cmp	r3, #64	@ 0x40
 8003ae8:	d005      	beq.n	8003af6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003aea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003aee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d04f      	beq.n	8003b96 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 fdc4 	bl	8004684 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b06:	2b40      	cmp	r3, #64	@ 0x40
 8003b08:	d141      	bne.n	8003b8e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	3308      	adds	r3, #8
 8003b10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b14:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b18:	e853 3f00 	ldrex	r3, [r3]
 8003b1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003b20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	3308      	adds	r3, #8
 8003b32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003b36:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003b3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003b42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003b46:	e841 2300 	strex	r3, r2, [r1]
 8003b4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003b4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1d9      	bne.n	8003b0a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d013      	beq.n	8003b86 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b62:	4a13      	ldr	r2, [pc, #76]	@ (8003bb0 <HAL_UART_IRQHandler+0x29c>)
 8003b64:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7fd fda6 	bl	80016bc <HAL_DMA_Abort_IT>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d017      	beq.n	8003ba6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003b80:	4610      	mov	r0, r2
 8003b82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b84:	e00f      	b.n	8003ba6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7fd fb56 	bl	8001238 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b8c:	e00b      	b.n	8003ba6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7fd fb52 	bl	8001238 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b94:	e007      	b.n	8003ba6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7fd fb4e 	bl	8001238 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003ba4:	e192      	b.n	8003ecc <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba6:	bf00      	nop
    return;
 8003ba8:	e190      	b.n	8003ecc <HAL_UART_IRQHandler+0x5b8>
 8003baa:	bf00      	nop
 8003bac:	04000120 	.word	0x04000120
 8003bb0:	0800492f 	.word	0x0800492f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	f040 814b 	bne.w	8003e54 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bc2:	f003 0310 	and.w	r3, r3, #16
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f000 8144 	beq.w	8003e54 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bd0:	f003 0310 	and.w	r3, r3, #16
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 813d 	beq.w	8003e54 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2210      	movs	r2, #16
 8003be0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bec:	2b40      	cmp	r3, #64	@ 0x40
 8003bee:	f040 80b5 	bne.w	8003d5c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003bfe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 8164 	beq.w	8003ed0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003c0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c12:	429a      	cmp	r2, r3
 8003c14:	f080 815c 	bcs.w	8003ed0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c1e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	2b20      	cmp	r3, #32
 8003c2a:	f000 8086 	beq.w	8003d3a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c36:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c3a:	e853 3f00 	ldrex	r3, [r3]
 8003c3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003c42:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c46:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c4a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	461a      	mov	r2, r3
 8003c54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003c58:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003c5c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c60:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003c64:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003c68:	e841 2300 	strex	r3, r2, [r1]
 8003c6c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003c70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1da      	bne.n	8003c2e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	3308      	adds	r3, #8
 8003c7e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c82:	e853 3f00 	ldrex	r3, [r3]
 8003c86:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003c88:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c8a:	f023 0301 	bic.w	r3, r3, #1
 8003c8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	3308      	adds	r3, #8
 8003c98:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c9c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003ca0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003ca4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003ca8:	e841 2300 	strex	r3, r2, [r1]
 8003cac:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003cae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1e1      	bne.n	8003c78 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	3308      	adds	r3, #8
 8003cba:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cbc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003cbe:	e853 3f00 	ldrex	r3, [r3]
 8003cc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003cc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	3308      	adds	r3, #8
 8003cd4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003cd8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003cda:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cdc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003cde:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003ce0:	e841 2300 	strex	r3, r2, [r1]
 8003ce4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003ce6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1e3      	bne.n	8003cb4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d02:	e853 3f00 	ldrex	r3, [r3]
 8003d06:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003d08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d0a:	f023 0310 	bic.w	r3, r3, #16
 8003d0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	461a      	mov	r2, r3
 8003d18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d1e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d20:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d24:	e841 2300 	strex	r3, r2, [r1]
 8003d28:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003d2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1e4      	bne.n	8003cfa <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7fd fc83 	bl	8001640 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	4619      	mov	r1, r3
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f7fd fa43 	bl	80011e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d5a:	e0b9      	b.n	8003ed0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 80ab 	beq.w	8003ed4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003d7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 80a6 	beq.w	8003ed4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d90:	e853 3f00 	ldrex	r3, [r3]
 8003d94:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	461a      	mov	r2, r3
 8003da6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003daa:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dac:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003db0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003db2:	e841 2300 	strex	r3, r2, [r1]
 8003db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003db8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1e4      	bne.n	8003d88 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	3308      	adds	r3, #8
 8003dc4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc8:	e853 3f00 	ldrex	r3, [r3]
 8003dcc:	623b      	str	r3, [r7, #32]
   return(result);
 8003dce:	6a3b      	ldr	r3, [r7, #32]
 8003dd0:	f023 0301 	bic.w	r3, r3, #1
 8003dd4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	3308      	adds	r3, #8
 8003dde:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003de2:	633a      	str	r2, [r7, #48]	@ 0x30
 8003de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003de8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dea:	e841 2300 	strex	r3, r2, [r1]
 8003dee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1e3      	bne.n	8003dbe <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2220      	movs	r2, #32
 8003dfa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	e853 3f00 	ldrex	r3, [r3]
 8003e16:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f023 0310 	bic.w	r3, r3, #16
 8003e1e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	461a      	mov	r2, r3
 8003e28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003e2c:	61fb      	str	r3, [r7, #28]
 8003e2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e30:	69b9      	ldr	r1, [r7, #24]
 8003e32:	69fa      	ldr	r2, [r7, #28]
 8003e34:	e841 2300 	strex	r3, r2, [r1]
 8003e38:	617b      	str	r3, [r7, #20]
   return(result);
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1e4      	bne.n	8003e0a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2202      	movs	r2, #2
 8003e44:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7fd f9c7 	bl	80011e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e52:	e03f      	b.n	8003ed4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003e54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00e      	beq.n	8003e7e <HAL_UART_IRQHandler+0x56a>
 8003e60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d008      	beq.n	8003e7e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003e74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 fe00 	bl	8004a7c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e7c:	e02d      	b.n	8003eda <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00e      	beq.n	8003ea8 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003e8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d008      	beq.n	8003ea8 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d01c      	beq.n	8003ed8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	4798      	blx	r3
    }
    return;
 8003ea6:	e017      	b.n	8003ed8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d012      	beq.n	8003eda <HAL_UART_IRQHandler+0x5c6>
 8003eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00c      	beq.n	8003eda <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 fd4a 	bl	800495a <UART_EndTransmit_IT>
    return;
 8003ec6:	e008      	b.n	8003eda <HAL_UART_IRQHandler+0x5c6>
      return;
 8003ec8:	bf00      	nop
 8003eca:	e006      	b.n	8003eda <HAL_UART_IRQHandler+0x5c6>
    return;
 8003ecc:	bf00      	nop
 8003ece:	e004      	b.n	8003eda <HAL_UART_IRQHandler+0x5c6>
      return;
 8003ed0:	bf00      	nop
 8003ed2:	e002      	b.n	8003eda <HAL_UART_IRQHandler+0x5c6>
      return;
 8003ed4:	bf00      	nop
 8003ed6:	e000      	b.n	8003eda <HAL_UART_IRQHandler+0x5c6>
    return;
 8003ed8:	bf00      	nop
  }

}
 8003eda:	37e8      	adds	r7, #232	@ 0xe8
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b088      	sub	sp, #32
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f24:	2300      	movs	r3, #0
 8003f26:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	69db      	ldr	r3, [r3, #28]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	4b8a      	ldr	r3, [pc, #552]	@ (8004170 <UART_SetConfig+0x254>)
 8003f48:	4013      	ands	r3, r2
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	6812      	ldr	r2, [r2, #0]
 8003f4e:	6979      	ldr	r1, [r7, #20]
 8003f50:	430b      	orrs	r3, r1
 8003f52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a78      	ldr	r2, [pc, #480]	@ (8004174 <UART_SetConfig+0x258>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d120      	bne.n	8003fda <UART_SetConfig+0xbe>
 8003f98:	4b77      	ldr	r3, [pc, #476]	@ (8004178 <UART_SetConfig+0x25c>)
 8003f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9c:	f003 0303 	and.w	r3, r3, #3
 8003fa0:	2b03      	cmp	r3, #3
 8003fa2:	d817      	bhi.n	8003fd4 <UART_SetConfig+0xb8>
 8003fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8003fac <UART_SetConfig+0x90>)
 8003fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003faa:	bf00      	nop
 8003fac:	08003fbd 	.word	0x08003fbd
 8003fb0:	08003fc9 	.word	0x08003fc9
 8003fb4:	08003fcf 	.word	0x08003fcf
 8003fb8:	08003fc3 	.word	0x08003fc3
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	77fb      	strb	r3, [r7, #31]
 8003fc0:	e01d      	b.n	8003ffe <UART_SetConfig+0xe2>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	77fb      	strb	r3, [r7, #31]
 8003fc6:	e01a      	b.n	8003ffe <UART_SetConfig+0xe2>
 8003fc8:	2304      	movs	r3, #4
 8003fca:	77fb      	strb	r3, [r7, #31]
 8003fcc:	e017      	b.n	8003ffe <UART_SetConfig+0xe2>
 8003fce:	2308      	movs	r3, #8
 8003fd0:	77fb      	strb	r3, [r7, #31]
 8003fd2:	e014      	b.n	8003ffe <UART_SetConfig+0xe2>
 8003fd4:	2310      	movs	r3, #16
 8003fd6:	77fb      	strb	r3, [r7, #31]
 8003fd8:	e011      	b.n	8003ffe <UART_SetConfig+0xe2>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a67      	ldr	r2, [pc, #412]	@ (800417c <UART_SetConfig+0x260>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d102      	bne.n	8003fea <UART_SetConfig+0xce>
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	77fb      	strb	r3, [r7, #31]
 8003fe8:	e009      	b.n	8003ffe <UART_SetConfig+0xe2>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a64      	ldr	r2, [pc, #400]	@ (8004180 <UART_SetConfig+0x264>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d102      	bne.n	8003ffa <UART_SetConfig+0xde>
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	77fb      	strb	r3, [r7, #31]
 8003ff8:	e001      	b.n	8003ffe <UART_SetConfig+0xe2>
 8003ffa:	2310      	movs	r3, #16
 8003ffc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004006:	d15a      	bne.n	80040be <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004008:	7ffb      	ldrb	r3, [r7, #31]
 800400a:	2b08      	cmp	r3, #8
 800400c:	d827      	bhi.n	800405e <UART_SetConfig+0x142>
 800400e:	a201      	add	r2, pc, #4	@ (adr r2, 8004014 <UART_SetConfig+0xf8>)
 8004010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004014:	08004039 	.word	0x08004039
 8004018:	08004041 	.word	0x08004041
 800401c:	08004049 	.word	0x08004049
 8004020:	0800405f 	.word	0x0800405f
 8004024:	0800404f 	.word	0x0800404f
 8004028:	0800405f 	.word	0x0800405f
 800402c:	0800405f 	.word	0x0800405f
 8004030:	0800405f 	.word	0x0800405f
 8004034:	08004057 	.word	0x08004057
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004038:	f7fe ffbe 	bl	8002fb8 <HAL_RCC_GetPCLK1Freq>
 800403c:	61b8      	str	r0, [r7, #24]
        break;
 800403e:	e013      	b.n	8004068 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004040:	f7fe ffdc 	bl	8002ffc <HAL_RCC_GetPCLK2Freq>
 8004044:	61b8      	str	r0, [r7, #24]
        break;
 8004046:	e00f      	b.n	8004068 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004048:	4b4e      	ldr	r3, [pc, #312]	@ (8004184 <UART_SetConfig+0x268>)
 800404a:	61bb      	str	r3, [r7, #24]
        break;
 800404c:	e00c      	b.n	8004068 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800404e:	f7fe ff53 	bl	8002ef8 <HAL_RCC_GetSysClockFreq>
 8004052:	61b8      	str	r0, [r7, #24]
        break;
 8004054:	e008      	b.n	8004068 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004056:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800405a:	61bb      	str	r3, [r7, #24]
        break;
 800405c:	e004      	b.n	8004068 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800405e:	2300      	movs	r3, #0
 8004060:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	77bb      	strb	r3, [r7, #30]
        break;
 8004066:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d074      	beq.n	8004158 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	005a      	lsls	r2, r3, #1
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	085b      	lsrs	r3, r3, #1
 8004078:	441a      	add	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004082:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	2b0f      	cmp	r3, #15
 8004088:	d916      	bls.n	80040b8 <UART_SetConfig+0x19c>
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004090:	d212      	bcs.n	80040b8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	b29b      	uxth	r3, r3
 8004096:	f023 030f 	bic.w	r3, r3, #15
 800409a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	085b      	lsrs	r3, r3, #1
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	f003 0307 	and.w	r3, r3, #7
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	89fb      	ldrh	r3, [r7, #14]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	89fa      	ldrh	r2, [r7, #14]
 80040b4:	60da      	str	r2, [r3, #12]
 80040b6:	e04f      	b.n	8004158 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	77bb      	strb	r3, [r7, #30]
 80040bc:	e04c      	b.n	8004158 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040be:	7ffb      	ldrb	r3, [r7, #31]
 80040c0:	2b08      	cmp	r3, #8
 80040c2:	d828      	bhi.n	8004116 <UART_SetConfig+0x1fa>
 80040c4:	a201      	add	r2, pc, #4	@ (adr r2, 80040cc <UART_SetConfig+0x1b0>)
 80040c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ca:	bf00      	nop
 80040cc:	080040f1 	.word	0x080040f1
 80040d0:	080040f9 	.word	0x080040f9
 80040d4:	08004101 	.word	0x08004101
 80040d8:	08004117 	.word	0x08004117
 80040dc:	08004107 	.word	0x08004107
 80040e0:	08004117 	.word	0x08004117
 80040e4:	08004117 	.word	0x08004117
 80040e8:	08004117 	.word	0x08004117
 80040ec:	0800410f 	.word	0x0800410f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040f0:	f7fe ff62 	bl	8002fb8 <HAL_RCC_GetPCLK1Freq>
 80040f4:	61b8      	str	r0, [r7, #24]
        break;
 80040f6:	e013      	b.n	8004120 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040f8:	f7fe ff80 	bl	8002ffc <HAL_RCC_GetPCLK2Freq>
 80040fc:	61b8      	str	r0, [r7, #24]
        break;
 80040fe:	e00f      	b.n	8004120 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004100:	4b20      	ldr	r3, [pc, #128]	@ (8004184 <UART_SetConfig+0x268>)
 8004102:	61bb      	str	r3, [r7, #24]
        break;
 8004104:	e00c      	b.n	8004120 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004106:	f7fe fef7 	bl	8002ef8 <HAL_RCC_GetSysClockFreq>
 800410a:	61b8      	str	r0, [r7, #24]
        break;
 800410c:	e008      	b.n	8004120 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800410e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004112:	61bb      	str	r3, [r7, #24]
        break;
 8004114:	e004      	b.n	8004120 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004116:	2300      	movs	r3, #0
 8004118:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	77bb      	strb	r3, [r7, #30]
        break;
 800411e:	bf00      	nop
    }

    if (pclk != 0U)
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d018      	beq.n	8004158 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	085a      	lsrs	r2, r3, #1
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	441a      	add	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	fbb2 f3f3 	udiv	r3, r2, r3
 8004138:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	2b0f      	cmp	r3, #15
 800413e:	d909      	bls.n	8004154 <UART_SetConfig+0x238>
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004146:	d205      	bcs.n	8004154 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	b29a      	uxth	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	60da      	str	r2, [r3, #12]
 8004152:	e001      	b.n	8004158 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004164:	7fbb      	ldrb	r3, [r7, #30]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3720      	adds	r7, #32
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	efff69f3 	.word	0xefff69f3
 8004174:	40013800 	.word	0x40013800
 8004178:	40021000 	.word	0x40021000
 800417c:	40004400 	.word	0x40004400
 8004180:	40004800 	.word	0x40004800
 8004184:	007a1200 	.word	0x007a1200

08004188 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004194:	f003 0308 	and.w	r3, r3, #8
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00a      	beq.n	80041b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00a      	beq.n	80041d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00a      	beq.n	80041f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fa:	f003 0304 	and.w	r3, r3, #4
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00a      	beq.n	8004218 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421c:	f003 0310 	and.w	r3, r3, #16
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00a      	beq.n	800423a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423e:	f003 0320 	and.w	r3, r3, #32
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00a      	beq.n	800425c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004264:	2b00      	cmp	r3, #0
 8004266:	d01a      	beq.n	800429e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004282:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004286:	d10a      	bne.n	800429e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	430a      	orrs	r2, r1
 800429c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00a      	beq.n	80042c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	430a      	orrs	r2, r1
 80042be:	605a      	str	r2, [r3, #4]
  }
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b098      	sub	sp, #96	@ 0x60
 80042d0:	af02      	add	r7, sp, #8
 80042d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042dc:	f7fd f81c 	bl	8001318 <HAL_GetTick>
 80042e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0308 	and.w	r3, r3, #8
 80042ec:	2b08      	cmp	r3, #8
 80042ee:	d12e      	bne.n	800434e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042f8:	2200      	movs	r2, #0
 80042fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f88c 	bl	800441c <UART_WaitOnFlagUntilTimeout>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d021      	beq.n	800434e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004312:	e853 3f00 	ldrex	r3, [r3]
 8004316:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800431a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800431e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	461a      	mov	r2, r3
 8004326:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004328:	647b      	str	r3, [r7, #68]	@ 0x44
 800432a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800432e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004330:	e841 2300 	strex	r3, r2, [r1]
 8004334:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1e6      	bne.n	800430a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2220      	movs	r2, #32
 8004340:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e062      	b.n	8004414 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	2b04      	cmp	r3, #4
 800435a:	d149      	bne.n	80043f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800435c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004364:	2200      	movs	r2, #0
 8004366:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f856 	bl	800441c <UART_WaitOnFlagUntilTimeout>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d03c      	beq.n	80043f0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437e:	e853 3f00 	ldrex	r3, [r3]
 8004382:	623b      	str	r3, [r7, #32]
   return(result);
 8004384:	6a3b      	ldr	r3, [r7, #32]
 8004386:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800438a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	461a      	mov	r2, r3
 8004392:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004394:	633b      	str	r3, [r7, #48]	@ 0x30
 8004396:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004398:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800439a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800439c:	e841 2300 	strex	r3, r2, [r1]
 80043a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1e6      	bne.n	8004376 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3308      	adds	r3, #8
 80043ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	e853 3f00 	ldrex	r3, [r3]
 80043b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f023 0301 	bic.w	r3, r3, #1
 80043be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	3308      	adds	r3, #8
 80043c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043c8:	61fa      	str	r2, [r7, #28]
 80043ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043cc:	69b9      	ldr	r1, [r7, #24]
 80043ce:	69fa      	ldr	r2, [r7, #28]
 80043d0:	e841 2300 	strex	r3, r2, [r1]
 80043d4:	617b      	str	r3, [r7, #20]
   return(result);
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1e5      	bne.n	80043a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2220      	movs	r2, #32
 80043e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e011      	b.n	8004414 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2220      	movs	r2, #32
 80043f4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2220      	movs	r2, #32
 80043fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3758      	adds	r7, #88	@ 0x58
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	603b      	str	r3, [r7, #0]
 8004428:	4613      	mov	r3, r2
 800442a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800442c:	e04f      	b.n	80044ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004434:	d04b      	beq.n	80044ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004436:	f7fc ff6f 	bl	8001318 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	429a      	cmp	r2, r3
 8004444:	d302      	bcc.n	800444c <UART_WaitOnFlagUntilTimeout+0x30>
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e04e      	b.n	80044ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0304 	and.w	r3, r3, #4
 800445a:	2b00      	cmp	r3, #0
 800445c:	d037      	beq.n	80044ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	2b80      	cmp	r3, #128	@ 0x80
 8004462:	d034      	beq.n	80044ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2b40      	cmp	r3, #64	@ 0x40
 8004468:	d031      	beq.n	80044ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	69db      	ldr	r3, [r3, #28]
 8004470:	f003 0308 	and.w	r3, r3, #8
 8004474:	2b08      	cmp	r3, #8
 8004476:	d110      	bne.n	800449a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2208      	movs	r2, #8
 800447e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f000 f8ff 	bl	8004684 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2208      	movs	r2, #8
 800448a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e029      	b.n	80044ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044a8:	d111      	bne.n	80044ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80044b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 f8e5 	bl	8004684 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2220      	movs	r2, #32
 80044be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e00f      	b.n	80044ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69da      	ldr	r2, [r3, #28]
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	4013      	ands	r3, r2
 80044d8:	68ba      	ldr	r2, [r7, #8]
 80044da:	429a      	cmp	r2, r3
 80044dc:	bf0c      	ite	eq
 80044de:	2301      	moveq	r3, #1
 80044e0:	2300      	movne	r3, #0
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	461a      	mov	r2, r3
 80044e6:	79fb      	ldrb	r3, [r7, #7]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d0a0      	beq.n	800442e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
	...

080044f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b096      	sub	sp, #88	@ 0x58
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	4613      	mov	r3, r2
 8004504:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	88fa      	ldrh	r2, [r7, #6]
 8004510:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2222      	movs	r2, #34	@ 0x22
 8004520:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004528:	2b00      	cmp	r3, #0
 800452a:	d028      	beq.n	800457e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004530:	4a3e      	ldr	r2, [pc, #248]	@ (800462c <UART_Start_Receive_DMA+0x134>)
 8004532:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004538:	4a3d      	ldr	r2, [pc, #244]	@ (8004630 <UART_Start_Receive_DMA+0x138>)
 800453a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004540:	4a3c      	ldr	r2, [pc, #240]	@ (8004634 <UART_Start_Receive_DMA+0x13c>)
 8004542:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004548:	2200      	movs	r2, #0
 800454a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	3324      	adds	r3, #36	@ 0x24
 8004556:	4619      	mov	r1, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800455c:	461a      	mov	r2, r3
 800455e:	88fb      	ldrh	r3, [r7, #6]
 8004560:	f7fd f80f 	bl	8001582 <HAL_DMA_Start_IT>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d009      	beq.n	800457e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2210      	movs	r2, #16
 800456e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2220      	movs	r2, #32
 8004576:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e051      	b.n	8004622 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d018      	beq.n	80045b8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800458e:	e853 3f00 	ldrex	r3, [r3]
 8004592:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004596:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800459a:	657b      	str	r3, [r7, #84]	@ 0x54
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	461a      	mov	r2, r3
 80045a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045a6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80045aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045ac:	e841 2300 	strex	r3, r2, [r1]
 80045b0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80045b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1e6      	bne.n	8004586 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	3308      	adds	r3, #8
 80045be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c2:	e853 3f00 	ldrex	r3, [r3]
 80045c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ca:	f043 0301 	orr.w	r3, r3, #1
 80045ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	3308      	adds	r3, #8
 80045d6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80045d8:	637a      	str	r2, [r7, #52]	@ 0x34
 80045da:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80045de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80045e0:	e841 2300 	strex	r3, r2, [r1]
 80045e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80045e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1e5      	bne.n	80045b8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	3308      	adds	r3, #8
 80045f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	e853 3f00 	ldrex	r3, [r3]
 80045fa:	613b      	str	r3, [r7, #16]
   return(result);
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004602:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	3308      	adds	r3, #8
 800460a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800460c:	623a      	str	r2, [r7, #32]
 800460e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004610:	69f9      	ldr	r1, [r7, #28]
 8004612:	6a3a      	ldr	r2, [r7, #32]
 8004614:	e841 2300 	strex	r3, r2, [r1]
 8004618:	61bb      	str	r3, [r7, #24]
   return(result);
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1e5      	bne.n	80045ec <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3758      	adds	r7, #88	@ 0x58
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	0800474d 	.word	0x0800474d
 8004630:	08004873 	.word	0x08004873
 8004634:	080048b1 	.word	0x080048b1

08004638 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004638:	b480      	push	{r7}
 800463a:	b089      	sub	sp, #36	@ 0x24
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	e853 3f00 	ldrex	r3, [r3]
 800464c:	60bb      	str	r3, [r7, #8]
   return(result);
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004654:	61fb      	str	r3, [r7, #28]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	461a      	mov	r2, r3
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	61bb      	str	r3, [r7, #24]
 8004660:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004662:	6979      	ldr	r1, [r7, #20]
 8004664:	69ba      	ldr	r2, [r7, #24]
 8004666:	e841 2300 	strex	r3, r2, [r1]
 800466a:	613b      	str	r3, [r7, #16]
   return(result);
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1e6      	bne.n	8004640 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2220      	movs	r2, #32
 8004676:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004678:	bf00      	nop
 800467a:	3724      	adds	r7, #36	@ 0x24
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004684:	b480      	push	{r7}
 8004686:	b095      	sub	sp, #84	@ 0x54
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004694:	e853 3f00 	ldrex	r3, [r3]
 8004698:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800469a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800469c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	461a      	mov	r2, r3
 80046a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80046ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80046b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80046b2:	e841 2300 	strex	r3, r2, [r1]
 80046b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1e6      	bne.n	800468c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	3308      	adds	r3, #8
 80046c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c6:	6a3b      	ldr	r3, [r7, #32]
 80046c8:	e853 3f00 	ldrex	r3, [r3]
 80046cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	f023 0301 	bic.w	r3, r3, #1
 80046d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	3308      	adds	r3, #8
 80046dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046e6:	e841 2300 	strex	r3, r2, [r1]
 80046ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80046ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1e5      	bne.n	80046be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d118      	bne.n	800472c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	e853 3f00 	ldrex	r3, [r3]
 8004706:	60bb      	str	r3, [r7, #8]
   return(result);
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	f023 0310 	bic.w	r3, r3, #16
 800470e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	461a      	mov	r2, r3
 8004716:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004718:	61bb      	str	r3, [r7, #24]
 800471a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471c:	6979      	ldr	r1, [r7, #20]
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	e841 2300 	strex	r3, r2, [r1]
 8004724:	613b      	str	r3, [r7, #16]
   return(result);
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1e6      	bne.n	80046fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2220      	movs	r2, #32
 8004730:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004740:	bf00      	nop
 8004742:	3754      	adds	r7, #84	@ 0x54
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b09c      	sub	sp, #112	@ 0x70
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004758:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	2b20      	cmp	r3, #32
 8004760:	d071      	beq.n	8004846 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8004762:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004764:	2200      	movs	r2, #0
 8004766:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800476a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004770:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004772:	e853 3f00 	ldrex	r3, [r3]
 8004776:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004778:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800477a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800477e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004780:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	461a      	mov	r2, r3
 8004786:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004788:	65bb      	str	r3, [r7, #88]	@ 0x58
 800478a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800478e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004790:	e841 2300 	strex	r3, r2, [r1]
 8004794:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004796:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1e6      	bne.n	800476a <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800479c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	3308      	adds	r3, #8
 80047a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a6:	e853 3f00 	ldrex	r3, [r3]
 80047aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80047ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047ae:	f023 0301 	bic.w	r3, r3, #1
 80047b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80047b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	3308      	adds	r3, #8
 80047ba:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80047bc:	647a      	str	r2, [r7, #68]	@ 0x44
 80047be:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047c4:	e841 2300 	strex	r3, r2, [r1]
 80047c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1e5      	bne.n	800479c <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	3308      	adds	r3, #8
 80047d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047da:	e853 3f00 	ldrex	r3, [r3]
 80047de:	623b      	str	r3, [r7, #32]
   return(result);
 80047e0:	6a3b      	ldr	r3, [r7, #32]
 80047e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80047e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	3308      	adds	r3, #8
 80047ee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80047f0:	633a      	str	r2, [r7, #48]	@ 0x30
 80047f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047f8:	e841 2300 	strex	r3, r2, [r1]
 80047fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1e5      	bne.n	80047d0 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004804:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004806:	2220      	movs	r2, #32
 8004808:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800480c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800480e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004810:	2b01      	cmp	r3, #1
 8004812:	d118      	bne.n	8004846 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004814:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	e853 3f00 	ldrex	r3, [r3]
 8004820:	60fb      	str	r3, [r7, #12]
   return(result);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f023 0310 	bic.w	r3, r3, #16
 8004828:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800482a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	461a      	mov	r2, r3
 8004830:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004832:	61fb      	str	r3, [r7, #28]
 8004834:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004836:	69b9      	ldr	r1, [r7, #24]
 8004838:	69fa      	ldr	r2, [r7, #28]
 800483a:	e841 2300 	strex	r3, r2, [r1]
 800483e:	617b      	str	r3, [r7, #20]
   return(result);
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1e6      	bne.n	8004814 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004846:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004848:	2200      	movs	r2, #0
 800484a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800484c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800484e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004850:	2b01      	cmp	r3, #1
 8004852:	d107      	bne.n	8004864 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004854:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004856:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800485a:	4619      	mov	r1, r3
 800485c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800485e:	f7fc fcbf 	bl	80011e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004862:	e002      	b.n	800486a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004864:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004866:	f7ff fb45 	bl	8003ef4 <HAL_UART_RxCpltCallback>
}
 800486a:	bf00      	nop
 800486c:	3770      	adds	r7, #112	@ 0x70
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b084      	sub	sp, #16
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2201      	movs	r2, #1
 8004884:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800488a:	2b01      	cmp	r3, #1
 800488c:	d109      	bne.n	80048a2 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004894:	085b      	lsrs	r3, r3, #1
 8004896:	b29b      	uxth	r3, r3
 8004898:	4619      	mov	r1, r3
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f7fc fca0 	bl	80011e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80048a0:	e002      	b.n	80048a8 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f7ff fb30 	bl	8003f08 <HAL_UART_RxHalfCpltCallback>
}
 80048a8:	bf00      	nop
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048bc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048c2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048d6:	2b80      	cmp	r3, #128	@ 0x80
 80048d8:	d109      	bne.n	80048ee <UART_DMAError+0x3e>
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	2b21      	cmp	r3, #33	@ 0x21
 80048de:	d106      	bne.n	80048ee <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80048e8:	6978      	ldr	r0, [r7, #20]
 80048ea:	f7ff fea5 	bl	8004638 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048f8:	2b40      	cmp	r3, #64	@ 0x40
 80048fa:	d109      	bne.n	8004910 <UART_DMAError+0x60>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2b22      	cmp	r3, #34	@ 0x22
 8004900:	d106      	bne.n	8004910 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	2200      	movs	r2, #0
 8004906:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800490a:	6978      	ldr	r0, [r7, #20]
 800490c:	f7ff feba 	bl	8004684 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004916:	f043 0210 	orr.w	r2, r3, #16
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004920:	6978      	ldr	r0, [r7, #20]
 8004922:	f7fc fc89 	bl	8001238 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004926:	bf00      	nop
 8004928:	3718      	adds	r7, #24
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b084      	sub	sp, #16
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f7fc fc73 	bl	8001238 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004952:	bf00      	nop
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b088      	sub	sp, #32
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	e853 3f00 	ldrex	r3, [r3]
 800496e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004976:	61fb      	str	r3, [r7, #28]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	461a      	mov	r2, r3
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	61bb      	str	r3, [r7, #24]
 8004982:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004984:	6979      	ldr	r1, [r7, #20]
 8004986:	69ba      	ldr	r2, [r7, #24]
 8004988:	e841 2300 	strex	r3, r2, [r1]
 800498c:	613b      	str	r3, [r7, #16]
   return(result);
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1e6      	bne.n	8004962 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2220      	movs	r2, #32
 8004998:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f7ff fa9d 	bl	8003ee0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049a6:	bf00      	nop
 80049a8:	3720      	adds	r7, #32
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b086      	sub	sp, #24
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	60f8      	str	r0, [r7, #12]
 80049b6:	60b9      	str	r1, [r7, #8]
 80049b8:	607a      	str	r2, [r7, #4]
 80049ba:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e056      	b.n	8004a74 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d106      	bne.n	80049dc <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f7fc fa7c 	bl	8000ed4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2224      	movs	r2, #36	@ 0x24
 80049e0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 0201 	bic.w	r2, r2, #1
 80049f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d002      	beq.n	8004a00 <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f7ff fbc4 	bl	8004188 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f7ff fa8b 	bl	8003f1c <UART_SetConfig>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d101      	bne.n	8004a10 <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e031      	b.n	8004a74 <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	689a      	ldr	r2, [r3, #8]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a1e:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68ba      	ldr	r2, [r7, #8]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	055b      	lsls	r3, r3, #21
 8004a38:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	041b      	lsls	r3, r3, #16
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 8004a4e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	6812      	ldr	r2, [r2, #0]
 8004a56:	6979      	ldr	r1, [r7, #20]
 8004a58:	430b      	orrs	r3, r1
 8004a5a:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f042 0201 	orr.w	r2, r2, #1
 8004a6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f7ff fc2d 	bl	80042cc <UART_CheckIdleState>
 8004a72:	4603      	mov	r3, r0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3718      	adds	r7, #24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b08c      	sub	sp, #48	@ 0x30
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004aa4:	2b20      	cmp	r3, #32
 8004aa6:	d142      	bne.n	8004b2e <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d002      	beq.n	8004ab4 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8004aae:	88fb      	ldrh	r3, [r7, #6]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d101      	bne.n	8004ab8 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e03b      	b.n	8004b30 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2201      	movs	r2, #1
 8004abc:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004ac4:	88fb      	ldrh	r3, [r7, #6]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	68b9      	ldr	r1, [r7, #8]
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f7ff fd14 	bl	80044f8 <UART_Start_Receive_DMA>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004ad6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d124      	bne.n	8004b28 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d11d      	bne.n	8004b22 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2210      	movs	r2, #16
 8004aec:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	e853 3f00 	ldrex	r3, [r3]
 8004afa:	617b      	str	r3, [r7, #20]
   return(result);
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	f043 0310 	orr.w	r3, r3, #16
 8004b02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	461a      	mov	r2, r3
 8004b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b0e:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b10:	6a39      	ldr	r1, [r7, #32]
 8004b12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b14:	e841 2300 	strex	r3, r2, [r1]
 8004b18:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1e6      	bne.n	8004aee <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8004b20:	e002      	b.n	8004b28 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8004b28:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004b2c:	e000      	b.n	8004b30 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004b2e:	2302      	movs	r3, #2
  }
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3730      	adds	r7, #48	@ 0x30
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b3e:	f3ef 8305 	mrs	r3, IPSR
 8004b42:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b44:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10f      	bne.n	8004b6a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b4a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b4e:	607b      	str	r3, [r7, #4]
  return(result);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d109      	bne.n	8004b6a <osKernelInitialize+0x32>
 8004b56:	4b11      	ldr	r3, [pc, #68]	@ (8004b9c <osKernelInitialize+0x64>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d109      	bne.n	8004b72 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b5e:	f3ef 8311 	mrs	r3, BASEPRI
 8004b62:	603b      	str	r3, [r7, #0]
  return(result);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004b6a:	f06f 0305 	mvn.w	r3, #5
 8004b6e:	60fb      	str	r3, [r7, #12]
 8004b70:	e00c      	b.n	8004b8c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004b72:	4b0a      	ldr	r3, [pc, #40]	@ (8004b9c <osKernelInitialize+0x64>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d105      	bne.n	8004b86 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004b7a:	4b08      	ldr	r3, [pc, #32]	@ (8004b9c <osKernelInitialize+0x64>)
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004b80:	2300      	movs	r3, #0
 8004b82:	60fb      	str	r3, [r7, #12]
 8004b84:	e002      	b.n	8004b8c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004b86:	f04f 33ff 	mov.w	r3, #4294967295
 8004b8a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	20000488 	.word	0x20000488

08004ba0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ba6:	f3ef 8305 	mrs	r3, IPSR
 8004baa:	60bb      	str	r3, [r7, #8]
  return(result);
 8004bac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10f      	bne.n	8004bd2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bb2:	f3ef 8310 	mrs	r3, PRIMASK
 8004bb6:	607b      	str	r3, [r7, #4]
  return(result);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d109      	bne.n	8004bd2 <osKernelStart+0x32>
 8004bbe:	4b11      	ldr	r3, [pc, #68]	@ (8004c04 <osKernelStart+0x64>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d109      	bne.n	8004bda <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004bc6:	f3ef 8311 	mrs	r3, BASEPRI
 8004bca:	603b      	str	r3, [r7, #0]
  return(result);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <osKernelStart+0x3a>
    stat = osErrorISR;
 8004bd2:	f06f 0305 	mvn.w	r3, #5
 8004bd6:	60fb      	str	r3, [r7, #12]
 8004bd8:	e00e      	b.n	8004bf8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004bda:	4b0a      	ldr	r3, [pc, #40]	@ (8004c04 <osKernelStart+0x64>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d107      	bne.n	8004bf2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004be2:	4b08      	ldr	r3, [pc, #32]	@ (8004c04 <osKernelStart+0x64>)
 8004be4:	2202      	movs	r2, #2
 8004be6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004be8:	f001 f8b0 	bl	8005d4c <vTaskStartScheduler>
      stat = osOK;
 8004bec:	2300      	movs	r3, #0
 8004bee:	60fb      	str	r3, [r7, #12]
 8004bf0:	e002      	b.n	8004bf8 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8004bf6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	20000488 	.word	0x20000488

08004c08 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b092      	sub	sp, #72	@ 0x48
 8004c0c:	af04      	add	r7, sp, #16
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004c14:	2300      	movs	r3, #0
 8004c16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c18:	f3ef 8305 	mrs	r3, IPSR
 8004c1c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f040 8094 	bne.w	8004d4e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c26:	f3ef 8310 	mrs	r3, PRIMASK
 8004c2a:	623b      	str	r3, [r7, #32]
  return(result);
 8004c2c:	6a3b      	ldr	r3, [r7, #32]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f040 808d 	bne.w	8004d4e <osThreadNew+0x146>
 8004c34:	4b48      	ldr	r3, [pc, #288]	@ (8004d58 <osThreadNew+0x150>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d106      	bne.n	8004c4a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c3c:	f3ef 8311 	mrs	r3, BASEPRI
 8004c40:	61fb      	str	r3, [r7, #28]
  return(result);
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f040 8082 	bne.w	8004d4e <osThreadNew+0x146>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d07e      	beq.n	8004d4e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004c50:	2380      	movs	r3, #128	@ 0x80
 8004c52:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004c54:	2318      	movs	r3, #24
 8004c56:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8004c58:	2300      	movs	r3, #0
 8004c5a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004c5c:	f107 031b 	add.w	r3, r7, #27
 8004c60:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8004c62:	f04f 33ff 	mov.w	r3, #4294967295
 8004c66:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d045      	beq.n	8004cfa <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d002      	beq.n	8004c7c <osThreadNew+0x74>
        name = attr->name;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d008      	beq.n	8004ca2 <osThreadNew+0x9a>
 8004c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c92:	2b38      	cmp	r3, #56	@ 0x38
 8004c94:	d805      	bhi.n	8004ca2 <osThreadNew+0x9a>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d001      	beq.n	8004ca6 <osThreadNew+0x9e>
        return (NULL);
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	e054      	b.n	8004d50 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d003      	beq.n	8004cb6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	089b      	lsrs	r3, r3, #2
 8004cb4:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00e      	beq.n	8004cdc <osThreadNew+0xd4>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	2ba7      	cmp	r3, #167	@ 0xa7
 8004cc4:	d90a      	bls.n	8004cdc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d006      	beq.n	8004cdc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d002      	beq.n	8004cdc <osThreadNew+0xd4>
        mem = 1;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cda:	e010      	b.n	8004cfe <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10c      	bne.n	8004cfe <osThreadNew+0xf6>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d108      	bne.n	8004cfe <osThreadNew+0xf6>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d104      	bne.n	8004cfe <osThreadNew+0xf6>
          mem = 0;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cf8:	e001      	b.n	8004cfe <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8004cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d110      	bne.n	8004d26 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d0c:	9202      	str	r2, [sp, #8]
 8004d0e:	9301      	str	r3, [sp, #4]
 8004d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d18:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f000 fe2c 	bl	8005978 <xTaskCreateStatic>
 8004d20:	4603      	mov	r3, r0
 8004d22:	617b      	str	r3, [r7, #20]
 8004d24:	e013      	b.n	8004d4e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d110      	bne.n	8004d4e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	f107 0314 	add.w	r3, r7, #20
 8004d34:	9301      	str	r3, [sp, #4]
 8004d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f000 fe79 	bl	8005a36 <xTaskCreate>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d001      	beq.n	8004d4e <osThreadNew+0x146>
          hTask = NULL;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004d4e:	697b      	ldr	r3, [r7, #20]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3738      	adds	r7, #56	@ 0x38
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	20000488 	.word	0x20000488

08004d5c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d64:	f3ef 8305 	mrs	r3, IPSR
 8004d68:	613b      	str	r3, [r7, #16]
  return(result);
 8004d6a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10f      	bne.n	8004d90 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d70:	f3ef 8310 	mrs	r3, PRIMASK
 8004d74:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d109      	bne.n	8004d90 <osDelay+0x34>
 8004d7c:	4b0d      	ldr	r3, [pc, #52]	@ (8004db4 <osDelay+0x58>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d109      	bne.n	8004d98 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d84:	f3ef 8311 	mrs	r3, BASEPRI
 8004d88:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d003      	beq.n	8004d98 <osDelay+0x3c>
    stat = osErrorISR;
 8004d90:	f06f 0305 	mvn.w	r3, #5
 8004d94:	617b      	str	r3, [r7, #20]
 8004d96:	e007      	b.n	8004da8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d002      	beq.n	8004da8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 ff9c 	bl	8005ce0 <vTaskDelay>
    }
  }

  return (stat);
 8004da8:	697b      	ldr	r3, [r7, #20]
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3718      	adds	r7, #24
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	20000488 	.word	0x20000488

08004db8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	4a07      	ldr	r2, [pc, #28]	@ (8004de4 <vApplicationGetIdleTaskMemory+0x2c>)
 8004dc8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	4a06      	ldr	r2, [pc, #24]	@ (8004de8 <vApplicationGetIdleTaskMemory+0x30>)
 8004dce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2280      	movs	r2, #128	@ 0x80
 8004dd4:	601a      	str	r2, [r3, #0]
}
 8004dd6:	bf00      	nop
 8004dd8:	3714      	adds	r7, #20
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	2000048c 	.word	0x2000048c
 8004de8:	20000534 	.word	0x20000534

08004dec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	4a07      	ldr	r2, [pc, #28]	@ (8004e18 <vApplicationGetTimerTaskMemory+0x2c>)
 8004dfc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	4a06      	ldr	r2, [pc, #24]	@ (8004e1c <vApplicationGetTimerTaskMemory+0x30>)
 8004e02:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e0a:	601a      	str	r2, [r3, #0]
}
 8004e0c:	bf00      	nop
 8004e0e:	3714      	adds	r7, #20
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr
 8004e18:	20000734 	.word	0x20000734
 8004e1c:	200007dc 	.word	0x200007dc

08004e20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f103 0208 	add.w	r2, r3, #8
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f04f 32ff 	mov.w	r2, #4294967295
 8004e38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f103 0208 	add.w	r2, r3, #8
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f103 0208 	add.w	r2, r3, #8
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004e6e:	bf00      	nop
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b085      	sub	sp, #20
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
 8004e82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	683a      	ldr	r2, [r7, #0]
 8004ea4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	1c5a      	adds	r2, r3, #1
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	601a      	str	r2, [r3, #0]
}
 8004eb6:	bf00      	nop
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b085      	sub	sp, #20
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
 8004eca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed8:	d103      	bne.n	8004ee2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	60fb      	str	r3, [r7, #12]
 8004ee0:	e00c      	b.n	8004efc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	3308      	adds	r3, #8
 8004ee6:	60fb      	str	r3, [r7, #12]
 8004ee8:	e002      	b.n	8004ef0 <vListInsert+0x2e>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	60fb      	str	r3, [r7, #12]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d2f6      	bcs.n	8004eea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	683a      	ldr	r2, [r7, #0]
 8004f0a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	1c5a      	adds	r2, r3, #1
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	601a      	str	r2, [r3, #0]
}
 8004f28:	bf00      	nop
 8004f2a:	3714      	adds	r7, #20
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	6892      	ldr	r2, [r2, #8]
 8004f4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	6852      	ldr	r2, [r2, #4]
 8004f54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d103      	bne.n	8004f68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	1e5a      	subs	r2, r3, #1
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3714      	adds	r7, #20
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10b      	bne.n	8004fb4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa0:	f383 8811 	msr	BASEPRI, r3
 8004fa4:	f3bf 8f6f 	isb	sy
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004fae:	bf00      	nop
 8004fb0:	bf00      	nop
 8004fb2:	e7fd      	b.n	8004fb0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004fb4:	f002 f870 	bl	8007098 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fc0:	68f9      	ldr	r1, [r7, #12]
 8004fc2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004fc4:	fb01 f303 	mul.w	r3, r1, r3
 8004fc8:	441a      	add	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	68f9      	ldr	r1, [r7, #12]
 8004fe8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004fea:	fb01 f303 	mul.w	r3, r1, r3
 8004fee:	441a      	add	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	22ff      	movs	r2, #255	@ 0xff
 8004ff8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	22ff      	movs	r2, #255	@ 0xff
 8005000:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d114      	bne.n	8005034 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d01a      	beq.n	8005048 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	3310      	adds	r3, #16
 8005016:	4618      	mov	r0, r3
 8005018:	f001 f93c 	bl	8006294 <xTaskRemoveFromEventList>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d012      	beq.n	8005048 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005022:	4b0d      	ldr	r3, [pc, #52]	@ (8005058 <xQueueGenericReset+0xd0>)
 8005024:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	e009      	b.n	8005048 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	3310      	adds	r3, #16
 8005038:	4618      	mov	r0, r3
 800503a:	f7ff fef1 	bl	8004e20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	3324      	adds	r3, #36	@ 0x24
 8005042:	4618      	mov	r0, r3
 8005044:	f7ff feec 	bl	8004e20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005048:	f002 f858 	bl	80070fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800504c:	2301      	movs	r3, #1
}
 800504e:	4618      	mov	r0, r3
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	e000ed04 	.word	0xe000ed04

0800505c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800505c:	b580      	push	{r7, lr}
 800505e:	b08e      	sub	sp, #56	@ 0x38
 8005060:	af02      	add	r7, sp, #8
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
 8005068:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10b      	bne.n	8005088 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005074:	f383 8811 	msr	BASEPRI, r3
 8005078:	f3bf 8f6f 	isb	sy
 800507c:	f3bf 8f4f 	dsb	sy
 8005080:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005082:	bf00      	nop
 8005084:	bf00      	nop
 8005086:	e7fd      	b.n	8005084 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10b      	bne.n	80050a6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800508e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80050a0:	bf00      	nop
 80050a2:	bf00      	nop
 80050a4:	e7fd      	b.n	80050a2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d002      	beq.n	80050b2 <xQueueGenericCreateStatic+0x56>
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <xQueueGenericCreateStatic+0x5a>
 80050b2:	2301      	movs	r3, #1
 80050b4:	e000      	b.n	80050b8 <xQueueGenericCreateStatic+0x5c>
 80050b6:	2300      	movs	r3, #0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10b      	bne.n	80050d4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80050bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c0:	f383 8811 	msr	BASEPRI, r3
 80050c4:	f3bf 8f6f 	isb	sy
 80050c8:	f3bf 8f4f 	dsb	sy
 80050cc:	623b      	str	r3, [r7, #32]
}
 80050ce:	bf00      	nop
 80050d0:	bf00      	nop
 80050d2:	e7fd      	b.n	80050d0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d102      	bne.n	80050e0 <xQueueGenericCreateStatic+0x84>
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <xQueueGenericCreateStatic+0x88>
 80050e0:	2301      	movs	r3, #1
 80050e2:	e000      	b.n	80050e6 <xQueueGenericCreateStatic+0x8a>
 80050e4:	2300      	movs	r3, #0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10b      	bne.n	8005102 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80050ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ee:	f383 8811 	msr	BASEPRI, r3
 80050f2:	f3bf 8f6f 	isb	sy
 80050f6:	f3bf 8f4f 	dsb	sy
 80050fa:	61fb      	str	r3, [r7, #28]
}
 80050fc:	bf00      	nop
 80050fe:	bf00      	nop
 8005100:	e7fd      	b.n	80050fe <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005102:	2350      	movs	r3, #80	@ 0x50
 8005104:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	2b50      	cmp	r3, #80	@ 0x50
 800510a:	d00b      	beq.n	8005124 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800510c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005110:	f383 8811 	msr	BASEPRI, r3
 8005114:	f3bf 8f6f 	isb	sy
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	61bb      	str	r3, [r7, #24]
}
 800511e:	bf00      	nop
 8005120:	bf00      	nop
 8005122:	e7fd      	b.n	8005120 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00d      	beq.n	800514a <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800512e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005136:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800513a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800513c:	9300      	str	r3, [sp, #0]
 800513e:	4613      	mov	r3, r2
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	68b9      	ldr	r1, [r7, #8]
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f000 f805 	bl	8005154 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800514a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800514c:	4618      	mov	r0, r3
 800514e:	3730      	adds	r7, #48	@ 0x30
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
 8005160:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d103      	bne.n	8005170 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	601a      	str	r2, [r3, #0]
 800516e:	e002      	b.n	8005176 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005182:	2101      	movs	r1, #1
 8005184:	69b8      	ldr	r0, [r7, #24]
 8005186:	f7ff feff 	bl	8004f88 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	78fa      	ldrb	r2, [r7, #3]
 800518e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005192:	bf00      	nop
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
	...

0800519c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b08e      	sub	sp, #56	@ 0x38
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
 80051a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80051aa:	2300      	movs	r3, #0
 80051ac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80051b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d10b      	bne.n	80051d0 <xQueueGenericSend+0x34>
	__asm volatile
 80051b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051bc:	f383 8811 	msr	BASEPRI, r3
 80051c0:	f3bf 8f6f 	isb	sy
 80051c4:	f3bf 8f4f 	dsb	sy
 80051c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80051ca:	bf00      	nop
 80051cc:	bf00      	nop
 80051ce:	e7fd      	b.n	80051cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d103      	bne.n	80051de <xQueueGenericSend+0x42>
 80051d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <xQueueGenericSend+0x46>
 80051de:	2301      	movs	r3, #1
 80051e0:	e000      	b.n	80051e4 <xQueueGenericSend+0x48>
 80051e2:	2300      	movs	r3, #0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10b      	bne.n	8005200 <xQueueGenericSend+0x64>
	__asm volatile
 80051e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ec:	f383 8811 	msr	BASEPRI, r3
 80051f0:	f3bf 8f6f 	isb	sy
 80051f4:	f3bf 8f4f 	dsb	sy
 80051f8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80051fa:	bf00      	nop
 80051fc:	bf00      	nop
 80051fe:	e7fd      	b.n	80051fc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	2b02      	cmp	r3, #2
 8005204:	d103      	bne.n	800520e <xQueueGenericSend+0x72>
 8005206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800520a:	2b01      	cmp	r3, #1
 800520c:	d101      	bne.n	8005212 <xQueueGenericSend+0x76>
 800520e:	2301      	movs	r3, #1
 8005210:	e000      	b.n	8005214 <xQueueGenericSend+0x78>
 8005212:	2300      	movs	r3, #0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d10b      	bne.n	8005230 <xQueueGenericSend+0x94>
	__asm volatile
 8005218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800521c:	f383 8811 	msr	BASEPRI, r3
 8005220:	f3bf 8f6f 	isb	sy
 8005224:	f3bf 8f4f 	dsb	sy
 8005228:	623b      	str	r3, [r7, #32]
}
 800522a:	bf00      	nop
 800522c:	bf00      	nop
 800522e:	e7fd      	b.n	800522c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005230:	f001 f9fc 	bl	800662c <xTaskGetSchedulerState>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d102      	bne.n	8005240 <xQueueGenericSend+0xa4>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d101      	bne.n	8005244 <xQueueGenericSend+0xa8>
 8005240:	2301      	movs	r3, #1
 8005242:	e000      	b.n	8005246 <xQueueGenericSend+0xaa>
 8005244:	2300      	movs	r3, #0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10b      	bne.n	8005262 <xQueueGenericSend+0xc6>
	__asm volatile
 800524a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800524e:	f383 8811 	msr	BASEPRI, r3
 8005252:	f3bf 8f6f 	isb	sy
 8005256:	f3bf 8f4f 	dsb	sy
 800525a:	61fb      	str	r3, [r7, #28]
}
 800525c:	bf00      	nop
 800525e:	bf00      	nop
 8005260:	e7fd      	b.n	800525e <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005262:	f001 ff19 	bl	8007098 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005268:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800526a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800526c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800526e:	429a      	cmp	r2, r3
 8005270:	d302      	bcc.n	8005278 <xQueueGenericSend+0xdc>
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b02      	cmp	r3, #2
 8005276:	d129      	bne.n	80052cc <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005278:	683a      	ldr	r2, [r7, #0]
 800527a:	68b9      	ldr	r1, [r7, #8]
 800527c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800527e:	f000 fa0d 	bl	800569c <prvCopyDataToQueue>
 8005282:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005288:	2b00      	cmp	r3, #0
 800528a:	d010      	beq.n	80052ae <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800528c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800528e:	3324      	adds	r3, #36	@ 0x24
 8005290:	4618      	mov	r0, r3
 8005292:	f000 ffff 	bl	8006294 <xTaskRemoveFromEventList>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d013      	beq.n	80052c4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800529c:	4b3f      	ldr	r3, [pc, #252]	@ (800539c <xQueueGenericSend+0x200>)
 800529e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052a2:	601a      	str	r2, [r3, #0]
 80052a4:	f3bf 8f4f 	dsb	sy
 80052a8:	f3bf 8f6f 	isb	sy
 80052ac:	e00a      	b.n	80052c4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80052ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d007      	beq.n	80052c4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80052b4:	4b39      	ldr	r3, [pc, #228]	@ (800539c <xQueueGenericSend+0x200>)
 80052b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052ba:	601a      	str	r2, [r3, #0]
 80052bc:	f3bf 8f4f 	dsb	sy
 80052c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80052c4:	f001 ff1a 	bl	80070fc <vPortExitCritical>
				return pdPASS;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e063      	b.n	8005394 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d103      	bne.n	80052da <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052d2:	f001 ff13 	bl	80070fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80052d6:	2300      	movs	r3, #0
 80052d8:	e05c      	b.n	8005394 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d106      	bne.n	80052ee <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052e0:	f107 0314 	add.w	r3, r7, #20
 80052e4:	4618      	mov	r0, r3
 80052e6:	f001 f839 	bl	800635c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052ea:	2301      	movs	r3, #1
 80052ec:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80052ee:	f001 ff05 	bl	80070fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80052f2:	f000 fd9b 	bl	8005e2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052f6:	f001 fecf 	bl	8007098 <vPortEnterCritical>
 80052fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005300:	b25b      	sxtb	r3, r3
 8005302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005306:	d103      	bne.n	8005310 <xQueueGenericSend+0x174>
 8005308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800530a:	2200      	movs	r2, #0
 800530c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005312:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005316:	b25b      	sxtb	r3, r3
 8005318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800531c:	d103      	bne.n	8005326 <xQueueGenericSend+0x18a>
 800531e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005320:	2200      	movs	r2, #0
 8005322:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005326:	f001 fee9 	bl	80070fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800532a:	1d3a      	adds	r2, r7, #4
 800532c:	f107 0314 	add.w	r3, r7, #20
 8005330:	4611      	mov	r1, r2
 8005332:	4618      	mov	r0, r3
 8005334:	f001 f828 	bl	8006388 <xTaskCheckForTimeOut>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d124      	bne.n	8005388 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800533e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005340:	f000 faa4 	bl	800588c <prvIsQueueFull>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d018      	beq.n	800537c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800534a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800534c:	3310      	adds	r3, #16
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	4611      	mov	r1, r2
 8005352:	4618      	mov	r0, r3
 8005354:	f000 ff4c 	bl	80061f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005358:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800535a:	f000 fa2f 	bl	80057bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800535e:	f000 fd73 	bl	8005e48 <xTaskResumeAll>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	f47f af7c 	bne.w	8005262 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800536a:	4b0c      	ldr	r3, [pc, #48]	@ (800539c <xQueueGenericSend+0x200>)
 800536c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005370:	601a      	str	r2, [r3, #0]
 8005372:	f3bf 8f4f 	dsb	sy
 8005376:	f3bf 8f6f 	isb	sy
 800537a:	e772      	b.n	8005262 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800537c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800537e:	f000 fa1d 	bl	80057bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005382:	f000 fd61 	bl	8005e48 <xTaskResumeAll>
 8005386:	e76c      	b.n	8005262 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005388:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800538a:	f000 fa17 	bl	80057bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800538e:	f000 fd5b 	bl	8005e48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005392:	2300      	movs	r3, #0
		}
	}
}
 8005394:	4618      	mov	r0, r3
 8005396:	3738      	adds	r7, #56	@ 0x38
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	e000ed04 	.word	0xe000ed04

080053a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b08e      	sub	sp, #56	@ 0x38
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
 80053ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80053b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d10b      	bne.n	80053d0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80053b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053bc:	f383 8811 	msr	BASEPRI, r3
 80053c0:	f3bf 8f6f 	isb	sy
 80053c4:	f3bf 8f4f 	dsb	sy
 80053c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80053ca:	bf00      	nop
 80053cc:	bf00      	nop
 80053ce:	e7fd      	b.n	80053cc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d103      	bne.n	80053de <xQueueGenericSendFromISR+0x3e>
 80053d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <xQueueGenericSendFromISR+0x42>
 80053de:	2301      	movs	r3, #1
 80053e0:	e000      	b.n	80053e4 <xQueueGenericSendFromISR+0x44>
 80053e2:	2300      	movs	r3, #0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10b      	bne.n	8005400 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80053e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ec:	f383 8811 	msr	BASEPRI, r3
 80053f0:	f3bf 8f6f 	isb	sy
 80053f4:	f3bf 8f4f 	dsb	sy
 80053f8:	623b      	str	r3, [r7, #32]
}
 80053fa:	bf00      	nop
 80053fc:	bf00      	nop
 80053fe:	e7fd      	b.n	80053fc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	2b02      	cmp	r3, #2
 8005404:	d103      	bne.n	800540e <xQueueGenericSendFromISR+0x6e>
 8005406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800540a:	2b01      	cmp	r3, #1
 800540c:	d101      	bne.n	8005412 <xQueueGenericSendFromISR+0x72>
 800540e:	2301      	movs	r3, #1
 8005410:	e000      	b.n	8005414 <xQueueGenericSendFromISR+0x74>
 8005412:	2300      	movs	r3, #0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10b      	bne.n	8005430 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800541c:	f383 8811 	msr	BASEPRI, r3
 8005420:	f3bf 8f6f 	isb	sy
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	61fb      	str	r3, [r7, #28]
}
 800542a:	bf00      	nop
 800542c:	bf00      	nop
 800542e:	e7fd      	b.n	800542c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005430:	f001 ff12 	bl	8007258 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005434:	f3ef 8211 	mrs	r2, BASEPRI
 8005438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800543c:	f383 8811 	msr	BASEPRI, r3
 8005440:	f3bf 8f6f 	isb	sy
 8005444:	f3bf 8f4f 	dsb	sy
 8005448:	61ba      	str	r2, [r7, #24]
 800544a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800544c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800544e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005452:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005456:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005458:	429a      	cmp	r2, r3
 800545a:	d302      	bcc.n	8005462 <xQueueGenericSendFromISR+0xc2>
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	2b02      	cmp	r3, #2
 8005460:	d12c      	bne.n	80054bc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005464:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005468:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800546c:	683a      	ldr	r2, [r7, #0]
 800546e:	68b9      	ldr	r1, [r7, #8]
 8005470:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005472:	f000 f913 	bl	800569c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005476:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800547a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800547e:	d112      	bne.n	80054a6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005484:	2b00      	cmp	r3, #0
 8005486:	d016      	beq.n	80054b6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800548a:	3324      	adds	r3, #36	@ 0x24
 800548c:	4618      	mov	r0, r3
 800548e:	f000 ff01 	bl	8006294 <xTaskRemoveFromEventList>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00e      	beq.n	80054b6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00b      	beq.n	80054b6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	601a      	str	r2, [r3, #0]
 80054a4:	e007      	b.n	80054b6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80054a6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80054aa:	3301      	adds	r3, #1
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	b25a      	sxtb	r2, r3
 80054b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80054b6:	2301      	movs	r3, #1
 80054b8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80054ba:	e001      	b.n	80054c0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80054bc:	2300      	movs	r3, #0
 80054be:	637b      	str	r3, [r7, #52]	@ 0x34
 80054c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054c2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80054ca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80054cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3738      	adds	r7, #56	@ 0x38
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
	...

080054d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b08c      	sub	sp, #48	@ 0x30
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80054e4:	2300      	movs	r3, #0
 80054e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80054ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d10b      	bne.n	800550a <xQueueReceive+0x32>
	__asm volatile
 80054f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f6:	f383 8811 	msr	BASEPRI, r3
 80054fa:	f3bf 8f6f 	isb	sy
 80054fe:	f3bf 8f4f 	dsb	sy
 8005502:	623b      	str	r3, [r7, #32]
}
 8005504:	bf00      	nop
 8005506:	bf00      	nop
 8005508:	e7fd      	b.n	8005506 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d103      	bne.n	8005518 <xQueueReceive+0x40>
 8005510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <xQueueReceive+0x44>
 8005518:	2301      	movs	r3, #1
 800551a:	e000      	b.n	800551e <xQueueReceive+0x46>
 800551c:	2300      	movs	r3, #0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10b      	bne.n	800553a <xQueueReceive+0x62>
	__asm volatile
 8005522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005526:	f383 8811 	msr	BASEPRI, r3
 800552a:	f3bf 8f6f 	isb	sy
 800552e:	f3bf 8f4f 	dsb	sy
 8005532:	61fb      	str	r3, [r7, #28]
}
 8005534:	bf00      	nop
 8005536:	bf00      	nop
 8005538:	e7fd      	b.n	8005536 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800553a:	f001 f877 	bl	800662c <xTaskGetSchedulerState>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d102      	bne.n	800554a <xQueueReceive+0x72>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <xQueueReceive+0x76>
 800554a:	2301      	movs	r3, #1
 800554c:	e000      	b.n	8005550 <xQueueReceive+0x78>
 800554e:	2300      	movs	r3, #0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10b      	bne.n	800556c <xQueueReceive+0x94>
	__asm volatile
 8005554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005558:	f383 8811 	msr	BASEPRI, r3
 800555c:	f3bf 8f6f 	isb	sy
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	61bb      	str	r3, [r7, #24]
}
 8005566:	bf00      	nop
 8005568:	bf00      	nop
 800556a:	e7fd      	b.n	8005568 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800556c:	f001 fd94 	bl	8007098 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005574:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005578:	2b00      	cmp	r3, #0
 800557a:	d01f      	beq.n	80055bc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800557c:	68b9      	ldr	r1, [r7, #8]
 800557e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005580:	f000 f8f6 	bl	8005770 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005586:	1e5a      	subs	r2, r3, #1
 8005588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800558a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800558c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00f      	beq.n	80055b4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005596:	3310      	adds	r3, #16
 8005598:	4618      	mov	r0, r3
 800559a:	f000 fe7b 	bl	8006294 <xTaskRemoveFromEventList>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d007      	beq.n	80055b4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80055a4:	4b3c      	ldr	r3, [pc, #240]	@ (8005698 <xQueueReceive+0x1c0>)
 80055a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055aa:	601a      	str	r2, [r3, #0]
 80055ac:	f3bf 8f4f 	dsb	sy
 80055b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80055b4:	f001 fda2 	bl	80070fc <vPortExitCritical>
				return pdPASS;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e069      	b.n	8005690 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d103      	bne.n	80055ca <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80055c2:	f001 fd9b 	bl	80070fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80055c6:	2300      	movs	r3, #0
 80055c8:	e062      	b.n	8005690 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d106      	bne.n	80055de <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055d0:	f107 0310 	add.w	r3, r7, #16
 80055d4:	4618      	mov	r0, r3
 80055d6:	f000 fec1 	bl	800635c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055da:	2301      	movs	r3, #1
 80055dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055de:	f001 fd8d 	bl	80070fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055e2:	f000 fc23 	bl	8005e2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055e6:	f001 fd57 	bl	8007098 <vPortEnterCritical>
 80055ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80055f0:	b25b      	sxtb	r3, r3
 80055f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f6:	d103      	bne.n	8005600 <xQueueReceive+0x128>
 80055f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005602:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005606:	b25b      	sxtb	r3, r3
 8005608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560c:	d103      	bne.n	8005616 <xQueueReceive+0x13e>
 800560e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005610:	2200      	movs	r2, #0
 8005612:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005616:	f001 fd71 	bl	80070fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800561a:	1d3a      	adds	r2, r7, #4
 800561c:	f107 0310 	add.w	r3, r7, #16
 8005620:	4611      	mov	r1, r2
 8005622:	4618      	mov	r0, r3
 8005624:	f000 feb0 	bl	8006388 <xTaskCheckForTimeOut>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d123      	bne.n	8005676 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800562e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005630:	f000 f916 	bl	8005860 <prvIsQueueEmpty>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d017      	beq.n	800566a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800563a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800563c:	3324      	adds	r3, #36	@ 0x24
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	4611      	mov	r1, r2
 8005642:	4618      	mov	r0, r3
 8005644:	f000 fdd4 	bl	80061f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005648:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800564a:	f000 f8b7 	bl	80057bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800564e:	f000 fbfb 	bl	8005e48 <xTaskResumeAll>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d189      	bne.n	800556c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005658:	4b0f      	ldr	r3, [pc, #60]	@ (8005698 <xQueueReceive+0x1c0>)
 800565a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800565e:	601a      	str	r2, [r3, #0]
 8005660:	f3bf 8f4f 	dsb	sy
 8005664:	f3bf 8f6f 	isb	sy
 8005668:	e780      	b.n	800556c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800566a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800566c:	f000 f8a6 	bl	80057bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005670:	f000 fbea 	bl	8005e48 <xTaskResumeAll>
 8005674:	e77a      	b.n	800556c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005676:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005678:	f000 f8a0 	bl	80057bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800567c:	f000 fbe4 	bl	8005e48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005680:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005682:	f000 f8ed 	bl	8005860 <prvIsQueueEmpty>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	f43f af6f 	beq.w	800556c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800568e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005690:	4618      	mov	r0, r3
 8005692:	3730      	adds	r7, #48	@ 0x30
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	e000ed04 	.word	0xe000ed04

0800569c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80056a8:	2300      	movs	r3, #0
 80056aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10d      	bne.n	80056d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d14d      	bne.n	800575e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f000 ffce 	bl	8006668 <xTaskPriorityDisinherit>
 80056cc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	605a      	str	r2, [r3, #4]
 80056d4:	e043      	b.n	800575e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d119      	bne.n	8005710 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6898      	ldr	r0, [r3, #8]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e4:	461a      	mov	r2, r3
 80056e6:	68b9      	ldr	r1, [r7, #8]
 80056e8:	f002 f9b7 	bl	8007a5a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	689a      	ldr	r2, [r3, #8]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f4:	441a      	add	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	689a      	ldr	r2, [r3, #8]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	429a      	cmp	r2, r3
 8005704:	d32b      	bcc.n	800575e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	609a      	str	r2, [r3, #8]
 800570e:	e026      	b.n	800575e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	68d8      	ldr	r0, [r3, #12]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005718:	461a      	mov	r2, r3
 800571a:	68b9      	ldr	r1, [r7, #8]
 800571c:	f002 f99d 	bl	8007a5a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	68da      	ldr	r2, [r3, #12]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005728:	425b      	negs	r3, r3
 800572a:	441a      	add	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	68da      	ldr	r2, [r3, #12]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	429a      	cmp	r2, r3
 800573a:	d207      	bcs.n	800574c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005744:	425b      	negs	r3, r3
 8005746:	441a      	add	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b02      	cmp	r3, #2
 8005750:	d105      	bne.n	800575e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d002      	beq.n	800575e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	3b01      	subs	r3, #1
 800575c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	1c5a      	adds	r2, r3, #1
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005766:	697b      	ldr	r3, [r7, #20]
}
 8005768:	4618      	mov	r0, r3
 800576a:	3718      	adds	r7, #24
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800577e:	2b00      	cmp	r3, #0
 8005780:	d018      	beq.n	80057b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68da      	ldr	r2, [r3, #12]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800578a:	441a      	add	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	68da      	ldr	r2, [r3, #12]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	429a      	cmp	r2, r3
 800579a:	d303      	bcc.n	80057a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68d9      	ldr	r1, [r3, #12]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ac:	461a      	mov	r2, r3
 80057ae:	6838      	ldr	r0, [r7, #0]
 80057b0:	f002 f953 	bl	8007a5a <memcpy>
	}
}
 80057b4:	bf00      	nop
 80057b6:	3708      	adds	r7, #8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80057c4:	f001 fc68 	bl	8007098 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057d0:	e011      	b.n	80057f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d012      	beq.n	8005800 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	3324      	adds	r3, #36	@ 0x24
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 fd58 	bl	8006294 <xTaskRemoveFromEventList>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d001      	beq.n	80057ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80057ea:	f000 fe31 	bl	8006450 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80057ee:	7bfb      	ldrb	r3, [r7, #15]
 80057f0:	3b01      	subs	r3, #1
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	dce9      	bgt.n	80057d2 <prvUnlockQueue+0x16>
 80057fe:	e000      	b.n	8005802 <prvUnlockQueue+0x46>
					break;
 8005800:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	22ff      	movs	r2, #255	@ 0xff
 8005806:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800580a:	f001 fc77 	bl	80070fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800580e:	f001 fc43 	bl	8007098 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005818:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800581a:	e011      	b.n	8005840 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d012      	beq.n	800584a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	3310      	adds	r3, #16
 8005828:	4618      	mov	r0, r3
 800582a:	f000 fd33 	bl	8006294 <xTaskRemoveFromEventList>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d001      	beq.n	8005838 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005834:	f000 fe0c 	bl	8006450 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005838:	7bbb      	ldrb	r3, [r7, #14]
 800583a:	3b01      	subs	r3, #1
 800583c:	b2db      	uxtb	r3, r3
 800583e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005840:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005844:	2b00      	cmp	r3, #0
 8005846:	dce9      	bgt.n	800581c <prvUnlockQueue+0x60>
 8005848:	e000      	b.n	800584c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800584a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	22ff      	movs	r2, #255	@ 0xff
 8005850:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005854:	f001 fc52 	bl	80070fc <vPortExitCritical>
}
 8005858:	bf00      	nop
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005868:	f001 fc16 	bl	8007098 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005870:	2b00      	cmp	r3, #0
 8005872:	d102      	bne.n	800587a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005874:	2301      	movs	r3, #1
 8005876:	60fb      	str	r3, [r7, #12]
 8005878:	e001      	b.n	800587e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800587a:	2300      	movs	r3, #0
 800587c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800587e:	f001 fc3d 	bl	80070fc <vPortExitCritical>

	return xReturn;
 8005882:	68fb      	ldr	r3, [r7, #12]
}
 8005884:	4618      	mov	r0, r3
 8005886:	3710      	adds	r7, #16
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005894:	f001 fc00 	bl	8007098 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d102      	bne.n	80058aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80058a4:	2301      	movs	r3, #1
 80058a6:	60fb      	str	r3, [r7, #12]
 80058a8:	e001      	b.n	80058ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80058aa:	2300      	movs	r3, #0
 80058ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80058ae:	f001 fc25 	bl	80070fc <vPortExitCritical>

	return xReturn;
 80058b2:	68fb      	ldr	r3, [r7, #12]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058c6:	2300      	movs	r3, #0
 80058c8:	60fb      	str	r3, [r7, #12]
 80058ca:	e014      	b.n	80058f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80058cc:	4a0f      	ldr	r2, [pc, #60]	@ (800590c <vQueueAddToRegistry+0x50>)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10b      	bne.n	80058f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80058d8:	490c      	ldr	r1, [pc, #48]	@ (800590c <vQueueAddToRegistry+0x50>)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	683a      	ldr	r2, [r7, #0]
 80058de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80058e2:	4a0a      	ldr	r2, [pc, #40]	@ (800590c <vQueueAddToRegistry+0x50>)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	4413      	add	r3, r2
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80058ee:	e006      	b.n	80058fe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	3301      	adds	r3, #1
 80058f4:	60fb      	str	r3, [r7, #12]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2b07      	cmp	r3, #7
 80058fa:	d9e7      	bls.n	80058cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80058fc:	bf00      	nop
 80058fe:	bf00      	nop
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	20000bdc 	.word	0x20000bdc

08005910 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005920:	f001 fbba 	bl	8007098 <vPortEnterCritical>
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800592a:	b25b      	sxtb	r3, r3
 800592c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005930:	d103      	bne.n	800593a <vQueueWaitForMessageRestricted+0x2a>
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005940:	b25b      	sxtb	r3, r3
 8005942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005946:	d103      	bne.n	8005950 <vQueueWaitForMessageRestricted+0x40>
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005950:	f001 fbd4 	bl	80070fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005958:	2b00      	cmp	r3, #0
 800595a:	d106      	bne.n	800596a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	3324      	adds	r3, #36	@ 0x24
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	68b9      	ldr	r1, [r7, #8]
 8005964:	4618      	mov	r0, r3
 8005966:	f000 fc69 	bl	800623c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800596a:	6978      	ldr	r0, [r7, #20]
 800596c:	f7ff ff26 	bl	80057bc <prvUnlockQueue>
	}
 8005970:	bf00      	nop
 8005972:	3718      	adds	r7, #24
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005978:	b580      	push	{r7, lr}
 800597a:	b08e      	sub	sp, #56	@ 0x38
 800597c:	af04      	add	r7, sp, #16
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]
 8005984:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10b      	bne.n	80059a4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800598c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005990:	f383 8811 	msr	BASEPRI, r3
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	f3bf 8f4f 	dsb	sy
 800599c:	623b      	str	r3, [r7, #32]
}
 800599e:	bf00      	nop
 80059a0:	bf00      	nop
 80059a2:	e7fd      	b.n	80059a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80059a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10b      	bne.n	80059c2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80059aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ae:	f383 8811 	msr	BASEPRI, r3
 80059b2:	f3bf 8f6f 	isb	sy
 80059b6:	f3bf 8f4f 	dsb	sy
 80059ba:	61fb      	str	r3, [r7, #28]
}
 80059bc:	bf00      	nop
 80059be:	bf00      	nop
 80059c0:	e7fd      	b.n	80059be <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80059c2:	23a8      	movs	r3, #168	@ 0xa8
 80059c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	2ba8      	cmp	r3, #168	@ 0xa8
 80059ca:	d00b      	beq.n	80059e4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80059cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059d0:	f383 8811 	msr	BASEPRI, r3
 80059d4:	f3bf 8f6f 	isb	sy
 80059d8:	f3bf 8f4f 	dsb	sy
 80059dc:	61bb      	str	r3, [r7, #24]
}
 80059de:	bf00      	nop
 80059e0:	bf00      	nop
 80059e2:	e7fd      	b.n	80059e0 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80059e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d01e      	beq.n	8005a28 <xTaskCreateStatic+0xb0>
 80059ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d01b      	beq.n	8005a28 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80059f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f2:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80059f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80059f8:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80059fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fc:	2202      	movs	r2, #2
 80059fe:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a02:	2300      	movs	r3, #0
 8005a04:	9303      	str	r3, [sp, #12]
 8005a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a08:	9302      	str	r3, [sp, #8]
 8005a0a:	f107 0314 	add.w	r3, r7, #20
 8005a0e:	9301      	str	r3, [sp, #4]
 8005a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a12:	9300      	str	r3, [sp, #0]
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	68b9      	ldr	r1, [r7, #8]
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f000 f850 	bl	8005ac0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a20:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005a22:	f000 f8ed 	bl	8005c00 <prvAddNewTaskToReadyList>
 8005a26:	e001      	b.n	8005a2c <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005a2c:	697b      	ldr	r3, [r7, #20]
	}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3728      	adds	r7, #40	@ 0x28
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b08c      	sub	sp, #48	@ 0x30
 8005a3a:	af04      	add	r7, sp, #16
 8005a3c:	60f8      	str	r0, [r7, #12]
 8005a3e:	60b9      	str	r1, [r7, #8]
 8005a40:	603b      	str	r3, [r7, #0]
 8005a42:	4613      	mov	r3, r2
 8005a44:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a46:	88fb      	ldrh	r3, [r7, #6]
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f001 fc46 	bl	80072dc <pvPortMalloc>
 8005a50:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00e      	beq.n	8005a76 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005a58:	20a8      	movs	r0, #168	@ 0xa8
 8005a5a:	f001 fc3f 	bl	80072dc <pvPortMalloc>
 8005a5e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d003      	beq.n	8005a6e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a6c:	e005      	b.n	8005a7a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005a6e:	6978      	ldr	r0, [r7, #20]
 8005a70:	f001 fcfc 	bl	800746c <vPortFree>
 8005a74:	e001      	b.n	8005a7a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005a76:	2300      	movs	r3, #0
 8005a78:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d017      	beq.n	8005ab0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005a88:	88fa      	ldrh	r2, [r7, #6]
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	9303      	str	r3, [sp, #12]
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	9302      	str	r3, [sp, #8]
 8005a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a94:	9301      	str	r3, [sp, #4]
 8005a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a98:	9300      	str	r3, [sp, #0]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	68b9      	ldr	r1, [r7, #8]
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f000 f80e 	bl	8005ac0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005aa4:	69f8      	ldr	r0, [r7, #28]
 8005aa6:	f000 f8ab 	bl	8005c00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	61bb      	str	r3, [r7, #24]
 8005aae:	e002      	b.n	8005ab6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ab4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ab6:	69bb      	ldr	r3, [r7, #24]
	}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3720      	adds	r7, #32
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b088      	sub	sp, #32
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
 8005acc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	21a5      	movs	r1, #165	@ 0xa5
 8005ada:	f001 fee4 	bl	80078a6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	4413      	add	r3, r2
 8005aee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	f023 0307 	bic.w	r3, r3, #7
 8005af6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	f003 0307 	and.w	r3, r3, #7
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00b      	beq.n	8005b1a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b06:	f383 8811 	msr	BASEPRI, r3
 8005b0a:	f3bf 8f6f 	isb	sy
 8005b0e:	f3bf 8f4f 	dsb	sy
 8005b12:	617b      	str	r3, [r7, #20]
}
 8005b14:	bf00      	nop
 8005b16:	bf00      	nop
 8005b18:	e7fd      	b.n	8005b16 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	61fb      	str	r3, [r7, #28]
 8005b1e:	e012      	b.n	8005b46 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	4413      	add	r3, r2
 8005b26:	7819      	ldrb	r1, [r3, #0]
 8005b28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	3334      	adds	r3, #52	@ 0x34
 8005b30:	460a      	mov	r2, r1
 8005b32:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	4413      	add	r3, r2
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d006      	beq.n	8005b4e <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	3301      	adds	r3, #1
 8005b44:	61fb      	str	r3, [r7, #28]
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	2b0f      	cmp	r3, #15
 8005b4a:	d9e9      	bls.n	8005b20 <prvInitialiseNewTask+0x60>
 8005b4c:	e000      	b.n	8005b50 <prvInitialiseNewTask+0x90>
		{
			break;
 8005b4e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b5a:	2b37      	cmp	r3, #55	@ 0x37
 8005b5c:	d901      	bls.n	8005b62 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b5e:	2337      	movs	r3, #55	@ 0x37
 8005b60:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b66:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b6c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b70:	2200      	movs	r2, #0
 8005b72:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b76:	3304      	adds	r3, #4
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7ff f971 	bl	8004e60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b80:	3318      	adds	r3, #24
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7ff f96c 	bl	8004e60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b8c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b90:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b96:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b9c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb0:	3354      	adds	r3, #84	@ 0x54
 8005bb2:	224c      	movs	r2, #76	@ 0x4c
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f001 fe75 	bl	80078a6 <memset>
 8005bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bbe:	4a0d      	ldr	r2, [pc, #52]	@ (8005bf4 <prvInitialiseNewTask+0x134>)
 8005bc0:	659a      	str	r2, [r3, #88]	@ 0x58
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc4:	4a0c      	ldr	r2, [pc, #48]	@ (8005bf8 <prvInitialiseNewTask+0x138>)
 8005bc6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bca:	4a0c      	ldr	r2, [pc, #48]	@ (8005bfc <prvInitialiseNewTask+0x13c>)
 8005bcc:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005bce:	683a      	ldr	r2, [r7, #0]
 8005bd0:	68f9      	ldr	r1, [r7, #12]
 8005bd2:	69b8      	ldr	r0, [r7, #24]
 8005bd4:	f001 f92c 	bl	8006e30 <pxPortInitialiseStack>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bdc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d002      	beq.n	8005bea <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005be6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005be8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bea:	bf00      	nop
 8005bec:	3720      	adds	r7, #32
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	20001e68 	.word	0x20001e68
 8005bf8:	20001ed0 	.word	0x20001ed0
 8005bfc:	20001f38 	.word	0x20001f38

08005c00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005c08:	f001 fa46 	bl	8007098 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005c0c:	4b2d      	ldr	r3, [pc, #180]	@ (8005cc4 <prvAddNewTaskToReadyList+0xc4>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	3301      	adds	r3, #1
 8005c12:	4a2c      	ldr	r2, [pc, #176]	@ (8005cc4 <prvAddNewTaskToReadyList+0xc4>)
 8005c14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005c16:	4b2c      	ldr	r3, [pc, #176]	@ (8005cc8 <prvAddNewTaskToReadyList+0xc8>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d109      	bne.n	8005c32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005c1e:	4a2a      	ldr	r2, [pc, #168]	@ (8005cc8 <prvAddNewTaskToReadyList+0xc8>)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c24:	4b27      	ldr	r3, [pc, #156]	@ (8005cc4 <prvAddNewTaskToReadyList+0xc4>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d110      	bne.n	8005c4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c2c:	f000 fc34 	bl	8006498 <prvInitialiseTaskLists>
 8005c30:	e00d      	b.n	8005c4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c32:	4b26      	ldr	r3, [pc, #152]	@ (8005ccc <prvAddNewTaskToReadyList+0xcc>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d109      	bne.n	8005c4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c3a:	4b23      	ldr	r3, [pc, #140]	@ (8005cc8 <prvAddNewTaskToReadyList+0xc8>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d802      	bhi.n	8005c4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c48:	4a1f      	ldr	r2, [pc, #124]	@ (8005cc8 <prvAddNewTaskToReadyList+0xc8>)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c4e:	4b20      	ldr	r3, [pc, #128]	@ (8005cd0 <prvAddNewTaskToReadyList+0xd0>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	3301      	adds	r3, #1
 8005c54:	4a1e      	ldr	r2, [pc, #120]	@ (8005cd0 <prvAddNewTaskToReadyList+0xd0>)
 8005c56:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005c58:	4b1d      	ldr	r3, [pc, #116]	@ (8005cd0 <prvAddNewTaskToReadyList+0xd0>)
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c64:	4b1b      	ldr	r3, [pc, #108]	@ (8005cd4 <prvAddNewTaskToReadyList+0xd4>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d903      	bls.n	8005c74 <prvAddNewTaskToReadyList+0x74>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c70:	4a18      	ldr	r2, [pc, #96]	@ (8005cd4 <prvAddNewTaskToReadyList+0xd4>)
 8005c72:	6013      	str	r3, [r2, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c78:	4613      	mov	r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	4413      	add	r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	4a15      	ldr	r2, [pc, #84]	@ (8005cd8 <prvAddNewTaskToReadyList+0xd8>)
 8005c82:	441a      	add	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	3304      	adds	r3, #4
 8005c88:	4619      	mov	r1, r3
 8005c8a:	4610      	mov	r0, r2
 8005c8c:	f7ff f8f5 	bl	8004e7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005c90:	f001 fa34 	bl	80070fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005c94:	4b0d      	ldr	r3, [pc, #52]	@ (8005ccc <prvAddNewTaskToReadyList+0xcc>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00e      	beq.n	8005cba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8005cc8 <prvAddNewTaskToReadyList+0xc8>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d207      	bcs.n	8005cba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005caa:	4b0c      	ldr	r3, [pc, #48]	@ (8005cdc <prvAddNewTaskToReadyList+0xdc>)
 8005cac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cb0:	601a      	str	r2, [r3, #0]
 8005cb2:	f3bf 8f4f 	dsb	sy
 8005cb6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cba:	bf00      	nop
 8005cbc:	3708      	adds	r7, #8
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	200010f0 	.word	0x200010f0
 8005cc8:	20000c1c 	.word	0x20000c1c
 8005ccc:	200010fc 	.word	0x200010fc
 8005cd0:	2000110c 	.word	0x2000110c
 8005cd4:	200010f8 	.word	0x200010f8
 8005cd8:	20000c20 	.word	0x20000c20
 8005cdc:	e000ed04 	.word	0xe000ed04

08005ce0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d018      	beq.n	8005d24 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005cf2:	4b14      	ldr	r3, [pc, #80]	@ (8005d44 <vTaskDelay+0x64>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00b      	beq.n	8005d12 <vTaskDelay+0x32>
	__asm volatile
 8005cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cfe:	f383 8811 	msr	BASEPRI, r3
 8005d02:	f3bf 8f6f 	isb	sy
 8005d06:	f3bf 8f4f 	dsb	sy
 8005d0a:	60bb      	str	r3, [r7, #8]
}
 8005d0c:	bf00      	nop
 8005d0e:	bf00      	nop
 8005d10:	e7fd      	b.n	8005d0e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005d12:	f000 f88b 	bl	8005e2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005d16:	2100      	movs	r1, #0
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 fd15 	bl	8006748 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005d1e:	f000 f893 	bl	8005e48 <xTaskResumeAll>
 8005d22:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d107      	bne.n	8005d3a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005d2a:	4b07      	ldr	r3, [pc, #28]	@ (8005d48 <vTaskDelay+0x68>)
 8005d2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d30:	601a      	str	r2, [r3, #0]
 8005d32:	f3bf 8f4f 	dsb	sy
 8005d36:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d3a:	bf00      	nop
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	20001118 	.word	0x20001118
 8005d48:	e000ed04 	.word	0xe000ed04

08005d4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b08a      	sub	sp, #40	@ 0x28
 8005d50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d52:	2300      	movs	r3, #0
 8005d54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d56:	2300      	movs	r3, #0
 8005d58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d5a:	463a      	mov	r2, r7
 8005d5c:	1d39      	adds	r1, r7, #4
 8005d5e:	f107 0308 	add.w	r3, r7, #8
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7ff f828 	bl	8004db8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d68:	6839      	ldr	r1, [r7, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	9202      	str	r2, [sp, #8]
 8005d70:	9301      	str	r3, [sp, #4]
 8005d72:	2300      	movs	r3, #0
 8005d74:	9300      	str	r3, [sp, #0]
 8005d76:	2300      	movs	r3, #0
 8005d78:	460a      	mov	r2, r1
 8005d7a:	4924      	ldr	r1, [pc, #144]	@ (8005e0c <vTaskStartScheduler+0xc0>)
 8005d7c:	4824      	ldr	r0, [pc, #144]	@ (8005e10 <vTaskStartScheduler+0xc4>)
 8005d7e:	f7ff fdfb 	bl	8005978 <xTaskCreateStatic>
 8005d82:	4603      	mov	r3, r0
 8005d84:	4a23      	ldr	r2, [pc, #140]	@ (8005e14 <vTaskStartScheduler+0xc8>)
 8005d86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005d88:	4b22      	ldr	r3, [pc, #136]	@ (8005e14 <vTaskStartScheduler+0xc8>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d002      	beq.n	8005d96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005d90:	2301      	movs	r3, #1
 8005d92:	617b      	str	r3, [r7, #20]
 8005d94:	e001      	b.n	8005d9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005d96:	2300      	movs	r3, #0
 8005d98:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d102      	bne.n	8005da6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005da0:	f000 fd26 	bl	80067f0 <xTimerCreateTimerTask>
 8005da4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d11b      	bne.n	8005de4 <vTaskStartScheduler+0x98>
	__asm volatile
 8005dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db0:	f383 8811 	msr	BASEPRI, r3
 8005db4:	f3bf 8f6f 	isb	sy
 8005db8:	f3bf 8f4f 	dsb	sy
 8005dbc:	613b      	str	r3, [r7, #16]
}
 8005dbe:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005dc0:	4b15      	ldr	r3, [pc, #84]	@ (8005e18 <vTaskStartScheduler+0xcc>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	3354      	adds	r3, #84	@ 0x54
 8005dc6:	4a15      	ldr	r2, [pc, #84]	@ (8005e1c <vTaskStartScheduler+0xd0>)
 8005dc8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005dca:	4b15      	ldr	r3, [pc, #84]	@ (8005e20 <vTaskStartScheduler+0xd4>)
 8005dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8005dd0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005dd2:	4b14      	ldr	r3, [pc, #80]	@ (8005e24 <vTaskStartScheduler+0xd8>)
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005dd8:	4b13      	ldr	r3, [pc, #76]	@ (8005e28 <vTaskStartScheduler+0xdc>)
 8005dda:	2200      	movs	r2, #0
 8005ddc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005dde:	f001 f8b7 	bl	8006f50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005de2:	e00f      	b.n	8005e04 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dea:	d10b      	bne.n	8005e04 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df0:	f383 8811 	msr	BASEPRI, r3
 8005df4:	f3bf 8f6f 	isb	sy
 8005df8:	f3bf 8f4f 	dsb	sy
 8005dfc:	60fb      	str	r3, [r7, #12]
}
 8005dfe:	bf00      	nop
 8005e00:	bf00      	nop
 8005e02:	e7fd      	b.n	8005e00 <vTaskStartScheduler+0xb4>
}
 8005e04:	bf00      	nop
 8005e06:	3718      	adds	r7, #24
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	0800819c 	.word	0x0800819c
 8005e10:	08006469 	.word	0x08006469
 8005e14:	20001114 	.word	0x20001114
 8005e18:	20000c1c 	.word	0x20000c1c
 8005e1c:	20000048 	.word	0x20000048
 8005e20:	20001110 	.word	0x20001110
 8005e24:	200010fc 	.word	0x200010fc
 8005e28:	200010f4 	.word	0x200010f4

08005e2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005e30:	4b04      	ldr	r3, [pc, #16]	@ (8005e44 <vTaskSuspendAll+0x18>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	3301      	adds	r3, #1
 8005e36:	4a03      	ldr	r2, [pc, #12]	@ (8005e44 <vTaskSuspendAll+0x18>)
 8005e38:	6013      	str	r3, [r2, #0]
}
 8005e3a:	bf00      	nop
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr
 8005e44:	20001118 	.word	0x20001118

08005e48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e52:	2300      	movs	r3, #0
 8005e54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e56:	4b42      	ldr	r3, [pc, #264]	@ (8005f60 <xTaskResumeAll+0x118>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10b      	bne.n	8005e76 <xTaskResumeAll+0x2e>
	__asm volatile
 8005e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e62:	f383 8811 	msr	BASEPRI, r3
 8005e66:	f3bf 8f6f 	isb	sy
 8005e6a:	f3bf 8f4f 	dsb	sy
 8005e6e:	603b      	str	r3, [r7, #0]
}
 8005e70:	bf00      	nop
 8005e72:	bf00      	nop
 8005e74:	e7fd      	b.n	8005e72 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e76:	f001 f90f 	bl	8007098 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e7a:	4b39      	ldr	r3, [pc, #228]	@ (8005f60 <xTaskResumeAll+0x118>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	4a37      	ldr	r2, [pc, #220]	@ (8005f60 <xTaskResumeAll+0x118>)
 8005e82:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e84:	4b36      	ldr	r3, [pc, #216]	@ (8005f60 <xTaskResumeAll+0x118>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d162      	bne.n	8005f52 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e8c:	4b35      	ldr	r3, [pc, #212]	@ (8005f64 <xTaskResumeAll+0x11c>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d05e      	beq.n	8005f52 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e94:	e02f      	b.n	8005ef6 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005e96:	4b34      	ldr	r3, [pc, #208]	@ (8005f68 <xTaskResumeAll+0x120>)
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	3318      	adds	r3, #24
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7ff f846 	bl	8004f34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	3304      	adds	r3, #4
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7ff f841 	bl	8004f34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eb6:	4b2d      	ldr	r3, [pc, #180]	@ (8005f6c <xTaskResumeAll+0x124>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d903      	bls.n	8005ec6 <xTaskResumeAll+0x7e>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec2:	4a2a      	ldr	r2, [pc, #168]	@ (8005f6c <xTaskResumeAll+0x124>)
 8005ec4:	6013      	str	r3, [r2, #0]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eca:	4613      	mov	r3, r2
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	4413      	add	r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4a27      	ldr	r2, [pc, #156]	@ (8005f70 <xTaskResumeAll+0x128>)
 8005ed4:	441a      	add	r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	3304      	adds	r3, #4
 8005eda:	4619      	mov	r1, r3
 8005edc:	4610      	mov	r0, r2
 8005ede:	f7fe ffcc 	bl	8004e7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ee6:	4b23      	ldr	r3, [pc, #140]	@ (8005f74 <xTaskResumeAll+0x12c>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d302      	bcc.n	8005ef6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005ef0:	4b21      	ldr	r3, [pc, #132]	@ (8005f78 <xTaskResumeAll+0x130>)
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ef6:	4b1c      	ldr	r3, [pc, #112]	@ (8005f68 <xTaskResumeAll+0x120>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1cb      	bne.n	8005e96 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d001      	beq.n	8005f08 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005f04:	f000 fb6c 	bl	80065e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005f08:	4b1c      	ldr	r3, [pc, #112]	@ (8005f7c <xTaskResumeAll+0x134>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d010      	beq.n	8005f36 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005f14:	f000 f846 	bl	8005fa4 <xTaskIncrementTick>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d002      	beq.n	8005f24 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005f1e:	4b16      	ldr	r3, [pc, #88]	@ (8005f78 <xTaskResumeAll+0x130>)
 8005f20:	2201      	movs	r2, #1
 8005f22:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	3b01      	subs	r3, #1
 8005f28:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1f1      	bne.n	8005f14 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8005f30:	4b12      	ldr	r3, [pc, #72]	@ (8005f7c <xTaskResumeAll+0x134>)
 8005f32:	2200      	movs	r2, #0
 8005f34:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005f36:	4b10      	ldr	r3, [pc, #64]	@ (8005f78 <xTaskResumeAll+0x130>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d009      	beq.n	8005f52 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005f42:	4b0f      	ldr	r3, [pc, #60]	@ (8005f80 <xTaskResumeAll+0x138>)
 8005f44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f48:	601a      	str	r2, [r3, #0]
 8005f4a:	f3bf 8f4f 	dsb	sy
 8005f4e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f52:	f001 f8d3 	bl	80070fc <vPortExitCritical>

	return xAlreadyYielded;
 8005f56:	68bb      	ldr	r3, [r7, #8]
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3710      	adds	r7, #16
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	20001118 	.word	0x20001118
 8005f64:	200010f0 	.word	0x200010f0
 8005f68:	200010b0 	.word	0x200010b0
 8005f6c:	200010f8 	.word	0x200010f8
 8005f70:	20000c20 	.word	0x20000c20
 8005f74:	20000c1c 	.word	0x20000c1c
 8005f78:	20001104 	.word	0x20001104
 8005f7c:	20001100 	.word	0x20001100
 8005f80:	e000ed04 	.word	0xe000ed04

08005f84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005f8a:	4b05      	ldr	r3, [pc, #20]	@ (8005fa0 <xTaskGetTickCount+0x1c>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005f90:	687b      	ldr	r3, [r7, #4]
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	370c      	adds	r7, #12
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	200010f4 	.word	0x200010f4

08005fa4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005faa:	2300      	movs	r3, #0
 8005fac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fae:	4b52      	ldr	r3, [pc, #328]	@ (80060f8 <xTaskIncrementTick+0x154>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f040 808f 	bne.w	80060d6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005fb8:	4b50      	ldr	r3, [pc, #320]	@ (80060fc <xTaskIncrementTick+0x158>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005fc0:	4a4e      	ldr	r2, [pc, #312]	@ (80060fc <xTaskIncrementTick+0x158>)
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d121      	bne.n	8006010 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005fcc:	4b4c      	ldr	r3, [pc, #304]	@ (8006100 <xTaskIncrementTick+0x15c>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00b      	beq.n	8005fee <xTaskIncrementTick+0x4a>
	__asm volatile
 8005fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fda:	f383 8811 	msr	BASEPRI, r3
 8005fde:	f3bf 8f6f 	isb	sy
 8005fe2:	f3bf 8f4f 	dsb	sy
 8005fe6:	603b      	str	r3, [r7, #0]
}
 8005fe8:	bf00      	nop
 8005fea:	bf00      	nop
 8005fec:	e7fd      	b.n	8005fea <xTaskIncrementTick+0x46>
 8005fee:	4b44      	ldr	r3, [pc, #272]	@ (8006100 <xTaskIncrementTick+0x15c>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	60fb      	str	r3, [r7, #12]
 8005ff4:	4b43      	ldr	r3, [pc, #268]	@ (8006104 <xTaskIncrementTick+0x160>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a41      	ldr	r2, [pc, #260]	@ (8006100 <xTaskIncrementTick+0x15c>)
 8005ffa:	6013      	str	r3, [r2, #0]
 8005ffc:	4a41      	ldr	r2, [pc, #260]	@ (8006104 <xTaskIncrementTick+0x160>)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6013      	str	r3, [r2, #0]
 8006002:	4b41      	ldr	r3, [pc, #260]	@ (8006108 <xTaskIncrementTick+0x164>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	3301      	adds	r3, #1
 8006008:	4a3f      	ldr	r2, [pc, #252]	@ (8006108 <xTaskIncrementTick+0x164>)
 800600a:	6013      	str	r3, [r2, #0]
 800600c:	f000 fae8 	bl	80065e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006010:	4b3e      	ldr	r3, [pc, #248]	@ (800610c <xTaskIncrementTick+0x168>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	429a      	cmp	r2, r3
 8006018:	d34e      	bcc.n	80060b8 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800601a:	4b39      	ldr	r3, [pc, #228]	@ (8006100 <xTaskIncrementTick+0x15c>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d101      	bne.n	8006028 <xTaskIncrementTick+0x84>
 8006024:	2301      	movs	r3, #1
 8006026:	e000      	b.n	800602a <xTaskIncrementTick+0x86>
 8006028:	2300      	movs	r3, #0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d004      	beq.n	8006038 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800602e:	4b37      	ldr	r3, [pc, #220]	@ (800610c <xTaskIncrementTick+0x168>)
 8006030:	f04f 32ff 	mov.w	r2, #4294967295
 8006034:	601a      	str	r2, [r3, #0]
					break;
 8006036:	e03f      	b.n	80060b8 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006038:	4b31      	ldr	r3, [pc, #196]	@ (8006100 <xTaskIncrementTick+0x15c>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	429a      	cmp	r2, r3
 800604e:	d203      	bcs.n	8006058 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006050:	4a2e      	ldr	r2, [pc, #184]	@ (800610c <xTaskIncrementTick+0x168>)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6013      	str	r3, [r2, #0]
						break;
 8006056:	e02f      	b.n	80060b8 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	3304      	adds	r3, #4
 800605c:	4618      	mov	r0, r3
 800605e:	f7fe ff69 	bl	8004f34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006066:	2b00      	cmp	r3, #0
 8006068:	d004      	beq.n	8006074 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	3318      	adds	r3, #24
 800606e:	4618      	mov	r0, r3
 8006070:	f7fe ff60 	bl	8004f34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006078:	4b25      	ldr	r3, [pc, #148]	@ (8006110 <xTaskIncrementTick+0x16c>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	429a      	cmp	r2, r3
 800607e:	d903      	bls.n	8006088 <xTaskIncrementTick+0xe4>
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006084:	4a22      	ldr	r2, [pc, #136]	@ (8006110 <xTaskIncrementTick+0x16c>)
 8006086:	6013      	str	r3, [r2, #0]
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800608c:	4613      	mov	r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	4413      	add	r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	4a1f      	ldr	r2, [pc, #124]	@ (8006114 <xTaskIncrementTick+0x170>)
 8006096:	441a      	add	r2, r3
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	3304      	adds	r3, #4
 800609c:	4619      	mov	r1, r3
 800609e:	4610      	mov	r0, r2
 80060a0:	f7fe feeb 	bl	8004e7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060a8:	4b1b      	ldr	r3, [pc, #108]	@ (8006118 <xTaskIncrementTick+0x174>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d3b3      	bcc.n	800601a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80060b2:	2301      	movs	r3, #1
 80060b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060b6:	e7b0      	b.n	800601a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80060b8:	4b17      	ldr	r3, [pc, #92]	@ (8006118 <xTaskIncrementTick+0x174>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060be:	4915      	ldr	r1, [pc, #84]	@ (8006114 <xTaskIncrementTick+0x170>)
 80060c0:	4613      	mov	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4413      	add	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	440b      	add	r3, r1
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d907      	bls.n	80060e0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80060d0:	2301      	movs	r3, #1
 80060d2:	617b      	str	r3, [r7, #20]
 80060d4:	e004      	b.n	80060e0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80060d6:	4b11      	ldr	r3, [pc, #68]	@ (800611c <xTaskIncrementTick+0x178>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	3301      	adds	r3, #1
 80060dc:	4a0f      	ldr	r2, [pc, #60]	@ (800611c <xTaskIncrementTick+0x178>)
 80060de:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80060e0:	4b0f      	ldr	r3, [pc, #60]	@ (8006120 <xTaskIncrementTick+0x17c>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 80060e8:	2301      	movs	r3, #1
 80060ea:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80060ec:	697b      	ldr	r3, [r7, #20]
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3718      	adds	r7, #24
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	20001118 	.word	0x20001118
 80060fc:	200010f4 	.word	0x200010f4
 8006100:	200010a8 	.word	0x200010a8
 8006104:	200010ac 	.word	0x200010ac
 8006108:	20001108 	.word	0x20001108
 800610c:	20001110 	.word	0x20001110
 8006110:	200010f8 	.word	0x200010f8
 8006114:	20000c20 	.word	0x20000c20
 8006118:	20000c1c 	.word	0x20000c1c
 800611c:	20001100 	.word	0x20001100
 8006120:	20001104 	.word	0x20001104

08006124 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006124:	b480      	push	{r7}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800612a:	4b2b      	ldr	r3, [pc, #172]	@ (80061d8 <vTaskSwitchContext+0xb4>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d003      	beq.n	800613a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006132:	4b2a      	ldr	r3, [pc, #168]	@ (80061dc <vTaskSwitchContext+0xb8>)
 8006134:	2201      	movs	r2, #1
 8006136:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006138:	e047      	b.n	80061ca <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800613a:	4b28      	ldr	r3, [pc, #160]	@ (80061dc <vTaskSwitchContext+0xb8>)
 800613c:	2200      	movs	r2, #0
 800613e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006140:	4b27      	ldr	r3, [pc, #156]	@ (80061e0 <vTaskSwitchContext+0xbc>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	60fb      	str	r3, [r7, #12]
 8006146:	e011      	b.n	800616c <vTaskSwitchContext+0x48>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10b      	bne.n	8006166 <vTaskSwitchContext+0x42>
	__asm volatile
 800614e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006152:	f383 8811 	msr	BASEPRI, r3
 8006156:	f3bf 8f6f 	isb	sy
 800615a:	f3bf 8f4f 	dsb	sy
 800615e:	607b      	str	r3, [r7, #4]
}
 8006160:	bf00      	nop
 8006162:	bf00      	nop
 8006164:	e7fd      	b.n	8006162 <vTaskSwitchContext+0x3e>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	3b01      	subs	r3, #1
 800616a:	60fb      	str	r3, [r7, #12]
 800616c:	491d      	ldr	r1, [pc, #116]	@ (80061e4 <vTaskSwitchContext+0xc0>)
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	4613      	mov	r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4413      	add	r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	440b      	add	r3, r1
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d0e3      	beq.n	8006148 <vTaskSwitchContext+0x24>
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	4613      	mov	r3, r2
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4413      	add	r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	4a16      	ldr	r2, [pc, #88]	@ (80061e4 <vTaskSwitchContext+0xc0>)
 800618c:	4413      	add	r3, r2
 800618e:	60bb      	str	r3, [r7, #8]
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	685a      	ldr	r2, [r3, #4]
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	605a      	str	r2, [r3, #4]
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	685a      	ldr	r2, [r3, #4]
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	3308      	adds	r3, #8
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d104      	bne.n	80061b0 <vTaskSwitchContext+0x8c>
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	685a      	ldr	r2, [r3, #4]
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	605a      	str	r2, [r3, #4]
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	4a0c      	ldr	r2, [pc, #48]	@ (80061e8 <vTaskSwitchContext+0xc4>)
 80061b8:	6013      	str	r3, [r2, #0]
 80061ba:	4a09      	ldr	r2, [pc, #36]	@ (80061e0 <vTaskSwitchContext+0xbc>)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80061c0:	4b09      	ldr	r3, [pc, #36]	@ (80061e8 <vTaskSwitchContext+0xc4>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	3354      	adds	r3, #84	@ 0x54
 80061c6:	4a09      	ldr	r2, [pc, #36]	@ (80061ec <vTaskSwitchContext+0xc8>)
 80061c8:	6013      	str	r3, [r2, #0]
}
 80061ca:	bf00      	nop
 80061cc:	3714      	adds	r7, #20
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop
 80061d8:	20001118 	.word	0x20001118
 80061dc:	20001104 	.word	0x20001104
 80061e0:	200010f8 	.word	0x200010f8
 80061e4:	20000c20 	.word	0x20000c20
 80061e8:	20000c1c 	.word	0x20000c1c
 80061ec:	20000048 	.word	0x20000048

080061f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10b      	bne.n	8006218 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006204:	f383 8811 	msr	BASEPRI, r3
 8006208:	f3bf 8f6f 	isb	sy
 800620c:	f3bf 8f4f 	dsb	sy
 8006210:	60fb      	str	r3, [r7, #12]
}
 8006212:	bf00      	nop
 8006214:	bf00      	nop
 8006216:	e7fd      	b.n	8006214 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006218:	4b07      	ldr	r3, [pc, #28]	@ (8006238 <vTaskPlaceOnEventList+0x48>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	3318      	adds	r3, #24
 800621e:	4619      	mov	r1, r3
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f7fe fe4e 	bl	8004ec2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006226:	2101      	movs	r1, #1
 8006228:	6838      	ldr	r0, [r7, #0]
 800622a:	f000 fa8d 	bl	8006748 <prvAddCurrentTaskToDelayedList>
}
 800622e:	bf00      	nop
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	20000c1c 	.word	0x20000c1c

0800623c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800623c:	b580      	push	{r7, lr}
 800623e:	b086      	sub	sp, #24
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d10b      	bne.n	8006266 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800624e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006252:	f383 8811 	msr	BASEPRI, r3
 8006256:	f3bf 8f6f 	isb	sy
 800625a:	f3bf 8f4f 	dsb	sy
 800625e:	617b      	str	r3, [r7, #20]
}
 8006260:	bf00      	nop
 8006262:	bf00      	nop
 8006264:	e7fd      	b.n	8006262 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006266:	4b0a      	ldr	r3, [pc, #40]	@ (8006290 <vTaskPlaceOnEventListRestricted+0x54>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	3318      	adds	r3, #24
 800626c:	4619      	mov	r1, r3
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f7fe fe03 	bl	8004e7a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d002      	beq.n	8006280 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800627a:	f04f 33ff 	mov.w	r3, #4294967295
 800627e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006280:	6879      	ldr	r1, [r7, #4]
 8006282:	68b8      	ldr	r0, [r7, #8]
 8006284:	f000 fa60 	bl	8006748 <prvAddCurrentTaskToDelayedList>
	}
 8006288:	bf00      	nop
 800628a:	3718      	adds	r7, #24
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	20000c1c 	.word	0x20000c1c

08006294 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b086      	sub	sp, #24
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d10b      	bne.n	80062c2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80062aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ae:	f383 8811 	msr	BASEPRI, r3
 80062b2:	f3bf 8f6f 	isb	sy
 80062b6:	f3bf 8f4f 	dsb	sy
 80062ba:	60fb      	str	r3, [r7, #12]
}
 80062bc:	bf00      	nop
 80062be:	bf00      	nop
 80062c0:	e7fd      	b.n	80062be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	3318      	adds	r3, #24
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7fe fe34 	bl	8004f34 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062cc:	4b1d      	ldr	r3, [pc, #116]	@ (8006344 <xTaskRemoveFromEventList+0xb0>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d11d      	bne.n	8006310 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	3304      	adds	r3, #4
 80062d8:	4618      	mov	r0, r3
 80062da:	f7fe fe2b 	bl	8004f34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062e2:	4b19      	ldr	r3, [pc, #100]	@ (8006348 <xTaskRemoveFromEventList+0xb4>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d903      	bls.n	80062f2 <xTaskRemoveFromEventList+0x5e>
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ee:	4a16      	ldr	r2, [pc, #88]	@ (8006348 <xTaskRemoveFromEventList+0xb4>)
 80062f0:	6013      	str	r3, [r2, #0]
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062f6:	4613      	mov	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	4413      	add	r3, r2
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	4a13      	ldr	r2, [pc, #76]	@ (800634c <xTaskRemoveFromEventList+0xb8>)
 8006300:	441a      	add	r2, r3
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	3304      	adds	r3, #4
 8006306:	4619      	mov	r1, r3
 8006308:	4610      	mov	r0, r2
 800630a:	f7fe fdb6 	bl	8004e7a <vListInsertEnd>
 800630e:	e005      	b.n	800631c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	3318      	adds	r3, #24
 8006314:	4619      	mov	r1, r3
 8006316:	480e      	ldr	r0, [pc, #56]	@ (8006350 <xTaskRemoveFromEventList+0xbc>)
 8006318:	f7fe fdaf 	bl	8004e7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006320:	4b0c      	ldr	r3, [pc, #48]	@ (8006354 <xTaskRemoveFromEventList+0xc0>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006326:	429a      	cmp	r2, r3
 8006328:	d905      	bls.n	8006336 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800632a:	2301      	movs	r3, #1
 800632c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800632e:	4b0a      	ldr	r3, [pc, #40]	@ (8006358 <xTaskRemoveFromEventList+0xc4>)
 8006330:	2201      	movs	r2, #1
 8006332:	601a      	str	r2, [r3, #0]
 8006334:	e001      	b.n	800633a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006336:	2300      	movs	r3, #0
 8006338:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800633a:	697b      	ldr	r3, [r7, #20]
}
 800633c:	4618      	mov	r0, r3
 800633e:	3718      	adds	r7, #24
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	20001118 	.word	0x20001118
 8006348:	200010f8 	.word	0x200010f8
 800634c:	20000c20 	.word	0x20000c20
 8006350:	200010b0 	.word	0x200010b0
 8006354:	20000c1c 	.word	0x20000c1c
 8006358:	20001104 	.word	0x20001104

0800635c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006364:	4b06      	ldr	r3, [pc, #24]	@ (8006380 <vTaskInternalSetTimeOutState+0x24>)
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800636c:	4b05      	ldr	r3, [pc, #20]	@ (8006384 <vTaskInternalSetTimeOutState+0x28>)
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	605a      	str	r2, [r3, #4]
}
 8006374:	bf00      	nop
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr
 8006380:	20001108 	.word	0x20001108
 8006384:	200010f4 	.word	0x200010f4

08006388 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b088      	sub	sp, #32
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d10b      	bne.n	80063b0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800639c:	f383 8811 	msr	BASEPRI, r3
 80063a0:	f3bf 8f6f 	isb	sy
 80063a4:	f3bf 8f4f 	dsb	sy
 80063a8:	613b      	str	r3, [r7, #16]
}
 80063aa:	bf00      	nop
 80063ac:	bf00      	nop
 80063ae:	e7fd      	b.n	80063ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d10b      	bne.n	80063ce <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80063b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ba:	f383 8811 	msr	BASEPRI, r3
 80063be:	f3bf 8f6f 	isb	sy
 80063c2:	f3bf 8f4f 	dsb	sy
 80063c6:	60fb      	str	r3, [r7, #12]
}
 80063c8:	bf00      	nop
 80063ca:	bf00      	nop
 80063cc:	e7fd      	b.n	80063ca <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80063ce:	f000 fe63 	bl	8007098 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80063d2:	4b1d      	ldr	r3, [pc, #116]	@ (8006448 <xTaskCheckForTimeOut+0xc0>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	69ba      	ldr	r2, [r7, #24]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ea:	d102      	bne.n	80063f2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80063ec:	2300      	movs	r3, #0
 80063ee:	61fb      	str	r3, [r7, #28]
 80063f0:	e023      	b.n	800643a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	4b15      	ldr	r3, [pc, #84]	@ (800644c <xTaskCheckForTimeOut+0xc4>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d007      	beq.n	800640e <xTaskCheckForTimeOut+0x86>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	69ba      	ldr	r2, [r7, #24]
 8006404:	429a      	cmp	r2, r3
 8006406:	d302      	bcc.n	800640e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006408:	2301      	movs	r3, #1
 800640a:	61fb      	str	r3, [r7, #28]
 800640c:	e015      	b.n	800643a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	429a      	cmp	r2, r3
 8006416:	d20b      	bcs.n	8006430 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	1ad2      	subs	r2, r2, r3
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f7ff ff99 	bl	800635c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800642a:	2300      	movs	r3, #0
 800642c:	61fb      	str	r3, [r7, #28]
 800642e:	e004      	b.n	800643a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	2200      	movs	r2, #0
 8006434:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006436:	2301      	movs	r3, #1
 8006438:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800643a:	f000 fe5f 	bl	80070fc <vPortExitCritical>

	return xReturn;
 800643e:	69fb      	ldr	r3, [r7, #28]
}
 8006440:	4618      	mov	r0, r3
 8006442:	3720      	adds	r7, #32
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	200010f4 	.word	0x200010f4
 800644c:	20001108 	.word	0x20001108

08006450 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006450:	b480      	push	{r7}
 8006452:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006454:	4b03      	ldr	r3, [pc, #12]	@ (8006464 <vTaskMissedYield+0x14>)
 8006456:	2201      	movs	r2, #1
 8006458:	601a      	str	r2, [r3, #0]
}
 800645a:	bf00      	nop
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	20001104 	.word	0x20001104

08006468 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006470:	f000 f852 	bl	8006518 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006474:	4b06      	ldr	r3, [pc, #24]	@ (8006490 <prvIdleTask+0x28>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d9f9      	bls.n	8006470 <prvIdleTask+0x8>
			{
				taskYIELD();
 800647c:	4b05      	ldr	r3, [pc, #20]	@ (8006494 <prvIdleTask+0x2c>)
 800647e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006482:	601a      	str	r2, [r3, #0]
 8006484:	f3bf 8f4f 	dsb	sy
 8006488:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800648c:	e7f0      	b.n	8006470 <prvIdleTask+0x8>
 800648e:	bf00      	nop
 8006490:	20000c20 	.word	0x20000c20
 8006494:	e000ed04 	.word	0xe000ed04

08006498 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800649e:	2300      	movs	r3, #0
 80064a0:	607b      	str	r3, [r7, #4]
 80064a2:	e00c      	b.n	80064be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	4613      	mov	r3, r2
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4413      	add	r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4a12      	ldr	r2, [pc, #72]	@ (80064f8 <prvInitialiseTaskLists+0x60>)
 80064b0:	4413      	add	r3, r2
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7fe fcb4 	bl	8004e20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	3301      	adds	r3, #1
 80064bc:	607b      	str	r3, [r7, #4]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2b37      	cmp	r3, #55	@ 0x37
 80064c2:	d9ef      	bls.n	80064a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80064c4:	480d      	ldr	r0, [pc, #52]	@ (80064fc <prvInitialiseTaskLists+0x64>)
 80064c6:	f7fe fcab 	bl	8004e20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80064ca:	480d      	ldr	r0, [pc, #52]	@ (8006500 <prvInitialiseTaskLists+0x68>)
 80064cc:	f7fe fca8 	bl	8004e20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80064d0:	480c      	ldr	r0, [pc, #48]	@ (8006504 <prvInitialiseTaskLists+0x6c>)
 80064d2:	f7fe fca5 	bl	8004e20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80064d6:	480c      	ldr	r0, [pc, #48]	@ (8006508 <prvInitialiseTaskLists+0x70>)
 80064d8:	f7fe fca2 	bl	8004e20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80064dc:	480b      	ldr	r0, [pc, #44]	@ (800650c <prvInitialiseTaskLists+0x74>)
 80064de:	f7fe fc9f 	bl	8004e20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80064e2:	4b0b      	ldr	r3, [pc, #44]	@ (8006510 <prvInitialiseTaskLists+0x78>)
 80064e4:	4a05      	ldr	r2, [pc, #20]	@ (80064fc <prvInitialiseTaskLists+0x64>)
 80064e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80064e8:	4b0a      	ldr	r3, [pc, #40]	@ (8006514 <prvInitialiseTaskLists+0x7c>)
 80064ea:	4a05      	ldr	r2, [pc, #20]	@ (8006500 <prvInitialiseTaskLists+0x68>)
 80064ec:	601a      	str	r2, [r3, #0]
}
 80064ee:	bf00      	nop
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	20000c20 	.word	0x20000c20
 80064fc:	20001080 	.word	0x20001080
 8006500:	20001094 	.word	0x20001094
 8006504:	200010b0 	.word	0x200010b0
 8006508:	200010c4 	.word	0x200010c4
 800650c:	200010dc 	.word	0x200010dc
 8006510:	200010a8 	.word	0x200010a8
 8006514:	200010ac 	.word	0x200010ac

08006518 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800651e:	e019      	b.n	8006554 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006520:	f000 fdba 	bl	8007098 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006524:	4b10      	ldr	r3, [pc, #64]	@ (8006568 <prvCheckTasksWaitingTermination+0x50>)
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	3304      	adds	r3, #4
 8006530:	4618      	mov	r0, r3
 8006532:	f7fe fcff 	bl	8004f34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006536:	4b0d      	ldr	r3, [pc, #52]	@ (800656c <prvCheckTasksWaitingTermination+0x54>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	3b01      	subs	r3, #1
 800653c:	4a0b      	ldr	r2, [pc, #44]	@ (800656c <prvCheckTasksWaitingTermination+0x54>)
 800653e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006540:	4b0b      	ldr	r3, [pc, #44]	@ (8006570 <prvCheckTasksWaitingTermination+0x58>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	3b01      	subs	r3, #1
 8006546:	4a0a      	ldr	r2, [pc, #40]	@ (8006570 <prvCheckTasksWaitingTermination+0x58>)
 8006548:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800654a:	f000 fdd7 	bl	80070fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f810 	bl	8006574 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006554:	4b06      	ldr	r3, [pc, #24]	@ (8006570 <prvCheckTasksWaitingTermination+0x58>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d1e1      	bne.n	8006520 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800655c:	bf00      	nop
 800655e:	bf00      	nop
 8006560:	3708      	adds	r7, #8
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	200010c4 	.word	0x200010c4
 800656c:	200010f0 	.word	0x200010f0
 8006570:	200010d8 	.word	0x200010d8

08006574 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	3354      	adds	r3, #84	@ 0x54
 8006580:	4618      	mov	r0, r3
 8006582:	f001 f9a9 	bl	80078d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800658c:	2b00      	cmp	r3, #0
 800658e:	d108      	bne.n	80065a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006594:	4618      	mov	r0, r3
 8006596:	f000 ff69 	bl	800746c <vPortFree>
				vPortFree( pxTCB );
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 ff66 	bl	800746c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80065a0:	e019      	b.n	80065d6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d103      	bne.n	80065b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 ff5d 	bl	800746c <vPortFree>
	}
 80065b2:	e010      	b.n	80065d6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d00b      	beq.n	80065d6 <prvDeleteTCB+0x62>
	__asm volatile
 80065be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c2:	f383 8811 	msr	BASEPRI, r3
 80065c6:	f3bf 8f6f 	isb	sy
 80065ca:	f3bf 8f4f 	dsb	sy
 80065ce:	60fb      	str	r3, [r7, #12]
}
 80065d0:	bf00      	nop
 80065d2:	bf00      	nop
 80065d4:	e7fd      	b.n	80065d2 <prvDeleteTCB+0x5e>
	}
 80065d6:	bf00      	nop
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
	...

080065e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065e6:	4b0f      	ldr	r3, [pc, #60]	@ (8006624 <prvResetNextTaskUnblockTime+0x44>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d101      	bne.n	80065f4 <prvResetNextTaskUnblockTime+0x14>
 80065f0:	2301      	movs	r3, #1
 80065f2:	e000      	b.n	80065f6 <prvResetNextTaskUnblockTime+0x16>
 80065f4:	2300      	movs	r3, #0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d004      	beq.n	8006604 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80065fa:	4b0b      	ldr	r3, [pc, #44]	@ (8006628 <prvResetNextTaskUnblockTime+0x48>)
 80065fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006600:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006602:	e008      	b.n	8006616 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006604:	4b07      	ldr	r3, [pc, #28]	@ (8006624 <prvResetNextTaskUnblockTime+0x44>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	4a05      	ldr	r2, [pc, #20]	@ (8006628 <prvResetNextTaskUnblockTime+0x48>)
 8006614:	6013      	str	r3, [r2, #0]
}
 8006616:	bf00      	nop
 8006618:	370c      	adds	r7, #12
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	200010a8 	.word	0x200010a8
 8006628:	20001110 	.word	0x20001110

0800662c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006632:	4b0b      	ldr	r3, [pc, #44]	@ (8006660 <xTaskGetSchedulerState+0x34>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d102      	bne.n	8006640 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800663a:	2301      	movs	r3, #1
 800663c:	607b      	str	r3, [r7, #4]
 800663e:	e008      	b.n	8006652 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006640:	4b08      	ldr	r3, [pc, #32]	@ (8006664 <xTaskGetSchedulerState+0x38>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d102      	bne.n	800664e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006648:	2302      	movs	r3, #2
 800664a:	607b      	str	r3, [r7, #4]
 800664c:	e001      	b.n	8006652 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800664e:	2300      	movs	r3, #0
 8006650:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006652:	687b      	ldr	r3, [r7, #4]
	}
 8006654:	4618      	mov	r0, r3
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr
 8006660:	200010fc 	.word	0x200010fc
 8006664:	20001118 	.word	0x20001118

08006668 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006668:	b580      	push	{r7, lr}
 800666a:	b086      	sub	sp, #24
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006674:	2300      	movs	r3, #0
 8006676:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d058      	beq.n	8006730 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800667e:	4b2f      	ldr	r3, [pc, #188]	@ (800673c <xTaskPriorityDisinherit+0xd4>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	429a      	cmp	r2, r3
 8006686:	d00b      	beq.n	80066a0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800668c:	f383 8811 	msr	BASEPRI, r3
 8006690:	f3bf 8f6f 	isb	sy
 8006694:	f3bf 8f4f 	dsb	sy
 8006698:	60fb      	str	r3, [r7, #12]
}
 800669a:	bf00      	nop
 800669c:	bf00      	nop
 800669e:	e7fd      	b.n	800669c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d10b      	bne.n	80066c0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80066a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ac:	f383 8811 	msr	BASEPRI, r3
 80066b0:	f3bf 8f6f 	isb	sy
 80066b4:	f3bf 8f4f 	dsb	sy
 80066b8:	60bb      	str	r3, [r7, #8]
}
 80066ba:	bf00      	nop
 80066bc:	bf00      	nop
 80066be:	e7fd      	b.n	80066bc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066c4:	1e5a      	subs	r2, r3, #1
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d02c      	beq.n	8006730 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d128      	bne.n	8006730 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	3304      	adds	r3, #4
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7fe fc26 	bl	8004f34 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006700:	4b0f      	ldr	r3, [pc, #60]	@ (8006740 <xTaskPriorityDisinherit+0xd8>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	429a      	cmp	r2, r3
 8006706:	d903      	bls.n	8006710 <xTaskPriorityDisinherit+0xa8>
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800670c:	4a0c      	ldr	r2, [pc, #48]	@ (8006740 <xTaskPriorityDisinherit+0xd8>)
 800670e:	6013      	str	r3, [r2, #0]
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006714:	4613      	mov	r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4413      	add	r3, r2
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	4a09      	ldr	r2, [pc, #36]	@ (8006744 <xTaskPriorityDisinherit+0xdc>)
 800671e:	441a      	add	r2, r3
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	3304      	adds	r3, #4
 8006724:	4619      	mov	r1, r3
 8006726:	4610      	mov	r0, r2
 8006728:	f7fe fba7 	bl	8004e7a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800672c:	2301      	movs	r3, #1
 800672e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006730:	697b      	ldr	r3, [r7, #20]
	}
 8006732:	4618      	mov	r0, r3
 8006734:	3718      	adds	r7, #24
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	20000c1c 	.word	0x20000c1c
 8006740:	200010f8 	.word	0x200010f8
 8006744:	20000c20 	.word	0x20000c20

08006748 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006752:	4b21      	ldr	r3, [pc, #132]	@ (80067d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006758:	4b20      	ldr	r3, [pc, #128]	@ (80067dc <prvAddCurrentTaskToDelayedList+0x94>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	3304      	adds	r3, #4
 800675e:	4618      	mov	r0, r3
 8006760:	f7fe fbe8 	bl	8004f34 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800676a:	d10a      	bne.n	8006782 <prvAddCurrentTaskToDelayedList+0x3a>
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d007      	beq.n	8006782 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006772:	4b1a      	ldr	r3, [pc, #104]	@ (80067dc <prvAddCurrentTaskToDelayedList+0x94>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	3304      	adds	r3, #4
 8006778:	4619      	mov	r1, r3
 800677a:	4819      	ldr	r0, [pc, #100]	@ (80067e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800677c:	f7fe fb7d 	bl	8004e7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006780:	e026      	b.n	80067d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4413      	add	r3, r2
 8006788:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800678a:	4b14      	ldr	r3, [pc, #80]	@ (80067dc <prvAddCurrentTaskToDelayedList+0x94>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006792:	68ba      	ldr	r2, [r7, #8]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	429a      	cmp	r2, r3
 8006798:	d209      	bcs.n	80067ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800679a:	4b12      	ldr	r3, [pc, #72]	@ (80067e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	4b0f      	ldr	r3, [pc, #60]	@ (80067dc <prvAddCurrentTaskToDelayedList+0x94>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	3304      	adds	r3, #4
 80067a4:	4619      	mov	r1, r3
 80067a6:	4610      	mov	r0, r2
 80067a8:	f7fe fb8b 	bl	8004ec2 <vListInsert>
}
 80067ac:	e010      	b.n	80067d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067ae:	4b0e      	ldr	r3, [pc, #56]	@ (80067e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	4b0a      	ldr	r3, [pc, #40]	@ (80067dc <prvAddCurrentTaskToDelayedList+0x94>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	3304      	adds	r3, #4
 80067b8:	4619      	mov	r1, r3
 80067ba:	4610      	mov	r0, r2
 80067bc:	f7fe fb81 	bl	8004ec2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80067c0:	4b0a      	ldr	r3, [pc, #40]	@ (80067ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d202      	bcs.n	80067d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80067ca:	4a08      	ldr	r2, [pc, #32]	@ (80067ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	6013      	str	r3, [r2, #0]
}
 80067d0:	bf00      	nop
 80067d2:	3710      	adds	r7, #16
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	200010f4 	.word	0x200010f4
 80067dc:	20000c1c 	.word	0x20000c1c
 80067e0:	200010dc 	.word	0x200010dc
 80067e4:	200010ac 	.word	0x200010ac
 80067e8:	200010a8 	.word	0x200010a8
 80067ec:	20001110 	.word	0x20001110

080067f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b08a      	sub	sp, #40	@ 0x28
 80067f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80067f6:	2300      	movs	r3, #0
 80067f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80067fa:	f000 fad9 	bl	8006db0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80067fe:	4b1d      	ldr	r3, [pc, #116]	@ (8006874 <xTimerCreateTimerTask+0x84>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d021      	beq.n	800684a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006806:	2300      	movs	r3, #0
 8006808:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800680a:	2300      	movs	r3, #0
 800680c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800680e:	1d3a      	adds	r2, r7, #4
 8006810:	f107 0108 	add.w	r1, r7, #8
 8006814:	f107 030c 	add.w	r3, r7, #12
 8006818:	4618      	mov	r0, r3
 800681a:	f7fe fae7 	bl	8004dec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800681e:	6879      	ldr	r1, [r7, #4]
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	9202      	str	r2, [sp, #8]
 8006826:	9301      	str	r3, [sp, #4]
 8006828:	2302      	movs	r3, #2
 800682a:	9300      	str	r3, [sp, #0]
 800682c:	2300      	movs	r3, #0
 800682e:	460a      	mov	r2, r1
 8006830:	4911      	ldr	r1, [pc, #68]	@ (8006878 <xTimerCreateTimerTask+0x88>)
 8006832:	4812      	ldr	r0, [pc, #72]	@ (800687c <xTimerCreateTimerTask+0x8c>)
 8006834:	f7ff f8a0 	bl	8005978 <xTaskCreateStatic>
 8006838:	4603      	mov	r3, r0
 800683a:	4a11      	ldr	r2, [pc, #68]	@ (8006880 <xTimerCreateTimerTask+0x90>)
 800683c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800683e:	4b10      	ldr	r3, [pc, #64]	@ (8006880 <xTimerCreateTimerTask+0x90>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d001      	beq.n	800684a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006846:	2301      	movs	r3, #1
 8006848:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d10b      	bne.n	8006868 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006854:	f383 8811 	msr	BASEPRI, r3
 8006858:	f3bf 8f6f 	isb	sy
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	613b      	str	r3, [r7, #16]
}
 8006862:	bf00      	nop
 8006864:	bf00      	nop
 8006866:	e7fd      	b.n	8006864 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006868:	697b      	ldr	r3, [r7, #20]
}
 800686a:	4618      	mov	r0, r3
 800686c:	3718      	adds	r7, #24
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	2000114c 	.word	0x2000114c
 8006878:	080081a4 	.word	0x080081a4
 800687c:	080069a5 	.word	0x080069a5
 8006880:	20001150 	.word	0x20001150

08006884 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b08a      	sub	sp, #40	@ 0x28
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]
 8006890:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006892:	2300      	movs	r3, #0
 8006894:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d10b      	bne.n	80068b4 <xTimerGenericCommand+0x30>
	__asm volatile
 800689c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068a0:	f383 8811 	msr	BASEPRI, r3
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	f3bf 8f4f 	dsb	sy
 80068ac:	623b      	str	r3, [r7, #32]
}
 80068ae:	bf00      	nop
 80068b0:	bf00      	nop
 80068b2:	e7fd      	b.n	80068b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80068b4:	4b19      	ldr	r3, [pc, #100]	@ (800691c <xTimerGenericCommand+0x98>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d02a      	beq.n	8006912 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	2b05      	cmp	r3, #5
 80068cc:	dc18      	bgt.n	8006900 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80068ce:	f7ff fead 	bl	800662c <xTaskGetSchedulerState>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d109      	bne.n	80068ec <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80068d8:	4b10      	ldr	r3, [pc, #64]	@ (800691c <xTimerGenericCommand+0x98>)
 80068da:	6818      	ldr	r0, [r3, #0]
 80068dc:	f107 0110 	add.w	r1, r7, #16
 80068e0:	2300      	movs	r3, #0
 80068e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068e4:	f7fe fc5a 	bl	800519c <xQueueGenericSend>
 80068e8:	6278      	str	r0, [r7, #36]	@ 0x24
 80068ea:	e012      	b.n	8006912 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80068ec:	4b0b      	ldr	r3, [pc, #44]	@ (800691c <xTimerGenericCommand+0x98>)
 80068ee:	6818      	ldr	r0, [r3, #0]
 80068f0:	f107 0110 	add.w	r1, r7, #16
 80068f4:	2300      	movs	r3, #0
 80068f6:	2200      	movs	r2, #0
 80068f8:	f7fe fc50 	bl	800519c <xQueueGenericSend>
 80068fc:	6278      	str	r0, [r7, #36]	@ 0x24
 80068fe:	e008      	b.n	8006912 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006900:	4b06      	ldr	r3, [pc, #24]	@ (800691c <xTimerGenericCommand+0x98>)
 8006902:	6818      	ldr	r0, [r3, #0]
 8006904:	f107 0110 	add.w	r1, r7, #16
 8006908:	2300      	movs	r3, #0
 800690a:	683a      	ldr	r2, [r7, #0]
 800690c:	f7fe fd48 	bl	80053a0 <xQueueGenericSendFromISR>
 8006910:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006914:	4618      	mov	r0, r3
 8006916:	3728      	adds	r7, #40	@ 0x28
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	2000114c 	.word	0x2000114c

08006920 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b088      	sub	sp, #32
 8006924:	af02      	add	r7, sp, #8
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800692a:	4b1d      	ldr	r3, [pc, #116]	@ (80069a0 <prvProcessExpiredTimer+0x80>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	3304      	adds	r3, #4
 8006938:	4618      	mov	r0, r3
 800693a:	f7fe fafb 	bl	8004f34 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	69db      	ldr	r3, [r3, #28]
 8006942:	2b01      	cmp	r3, #1
 8006944:	d123      	bne.n	800698e <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	699a      	ldr	r2, [r3, #24]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	18d1      	adds	r1, r2, r3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	683a      	ldr	r2, [r7, #0]
 8006952:	6978      	ldr	r0, [r7, #20]
 8006954:	f000 f8cc 	bl	8006af0 <prvInsertTimerInActiveList>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d017      	beq.n	800698e <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800695e:	2300      	movs	r3, #0
 8006960:	9300      	str	r3, [sp, #0]
 8006962:	2300      	movs	r3, #0
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	2100      	movs	r1, #0
 8006968:	6978      	ldr	r0, [r7, #20]
 800696a:	f7ff ff8b 	bl	8006884 <xTimerGenericCommand>
 800696e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10b      	bne.n	800698e <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8006976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800697a:	f383 8811 	msr	BASEPRI, r3
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f3bf 8f4f 	dsb	sy
 8006986:	60fb      	str	r3, [r7, #12]
}
 8006988:	bf00      	nop
 800698a:	bf00      	nop
 800698c:	e7fd      	b.n	800698a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006992:	6978      	ldr	r0, [r7, #20]
 8006994:	4798      	blx	r3
}
 8006996:	bf00      	nop
 8006998:	3718      	adds	r7, #24
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	20001144 	.word	0x20001144

080069a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069ac:	f107 0308 	add.w	r3, r7, #8
 80069b0:	4618      	mov	r0, r3
 80069b2:	f000 f859 	bl	8006a68 <prvGetNextExpireTime>
 80069b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	4619      	mov	r1, r3
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f000 f805 	bl	80069cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80069c2:	f000 f8d7 	bl	8006b74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069c6:	bf00      	nop
 80069c8:	e7f0      	b.n	80069ac <prvTimerTask+0x8>
	...

080069cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80069d6:	f7ff fa29 	bl	8005e2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80069da:	f107 0308 	add.w	r3, r7, #8
 80069de:	4618      	mov	r0, r3
 80069e0:	f000 f866 	bl	8006ab0 <prvSampleTimeNow>
 80069e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d130      	bne.n	8006a4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d10a      	bne.n	8006a08 <prvProcessTimerOrBlockTask+0x3c>
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d806      	bhi.n	8006a08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80069fa:	f7ff fa25 	bl	8005e48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80069fe:	68f9      	ldr	r1, [r7, #12]
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f7ff ff8d 	bl	8006920 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006a06:	e024      	b.n	8006a52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d008      	beq.n	8006a20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006a0e:	4b13      	ldr	r3, [pc, #76]	@ (8006a5c <prvProcessTimerOrBlockTask+0x90>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	bf0c      	ite	eq
 8006a18:	2301      	moveq	r3, #1
 8006a1a:	2300      	movne	r3, #0
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006a20:	4b0f      	ldr	r3, [pc, #60]	@ (8006a60 <prvProcessTimerOrBlockTask+0x94>)
 8006a22:	6818      	ldr	r0, [r3, #0]
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	683a      	ldr	r2, [r7, #0]
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	f7fe ff6f 	bl	8005910 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006a32:	f7ff fa09 	bl	8005e48 <xTaskResumeAll>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d10a      	bne.n	8006a52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006a3c:	4b09      	ldr	r3, [pc, #36]	@ (8006a64 <prvProcessTimerOrBlockTask+0x98>)
 8006a3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a42:	601a      	str	r2, [r3, #0]
 8006a44:	f3bf 8f4f 	dsb	sy
 8006a48:	f3bf 8f6f 	isb	sy
}
 8006a4c:	e001      	b.n	8006a52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006a4e:	f7ff f9fb 	bl	8005e48 <xTaskResumeAll>
}
 8006a52:	bf00      	nop
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	20001148 	.word	0x20001148
 8006a60:	2000114c 	.word	0x2000114c
 8006a64:	e000ed04 	.word	0xe000ed04

08006a68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006a70:	4b0e      	ldr	r3, [pc, #56]	@ (8006aac <prvGetNextExpireTime+0x44>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	bf0c      	ite	eq
 8006a7a:	2301      	moveq	r3, #1
 8006a7c:	2300      	movne	r3, #0
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	461a      	mov	r2, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d105      	bne.n	8006a9a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a8e:	4b07      	ldr	r3, [pc, #28]	@ (8006aac <prvGetNextExpireTime+0x44>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	60fb      	str	r3, [r7, #12]
 8006a98:	e001      	b.n	8006a9e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3714      	adds	r7, #20
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr
 8006aac:	20001144 	.word	0x20001144

08006ab0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006ab8:	f7ff fa64 	bl	8005f84 <xTaskGetTickCount>
 8006abc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006abe:	4b0b      	ldr	r3, [pc, #44]	@ (8006aec <prvSampleTimeNow+0x3c>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d205      	bcs.n	8006ad4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006ac8:	f000 f910 	bl	8006cec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	601a      	str	r2, [r3, #0]
 8006ad2:	e002      	b.n	8006ada <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006ada:	4a04      	ldr	r2, [pc, #16]	@ (8006aec <prvSampleTimeNow+0x3c>)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	20001154 	.word	0x20001154

08006af0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b086      	sub	sp, #24
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
 8006afc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006afe:	2300      	movs	r3, #0
 8006b00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d812      	bhi.n	8006b3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	1ad2      	subs	r2, r2, r3
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	699b      	ldr	r3, [r3, #24]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d302      	bcc.n	8006b2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006b24:	2301      	movs	r3, #1
 8006b26:	617b      	str	r3, [r7, #20]
 8006b28:	e01b      	b.n	8006b62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b2a:	4b10      	ldr	r3, [pc, #64]	@ (8006b6c <prvInsertTimerInActiveList+0x7c>)
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	3304      	adds	r3, #4
 8006b32:	4619      	mov	r1, r3
 8006b34:	4610      	mov	r0, r2
 8006b36:	f7fe f9c4 	bl	8004ec2 <vListInsert>
 8006b3a:	e012      	b.n	8006b62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d206      	bcs.n	8006b52 <prvInsertTimerInActiveList+0x62>
 8006b44:	68ba      	ldr	r2, [r7, #8]
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d302      	bcc.n	8006b52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	617b      	str	r3, [r7, #20]
 8006b50:	e007      	b.n	8006b62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b52:	4b07      	ldr	r3, [pc, #28]	@ (8006b70 <prvInsertTimerInActiveList+0x80>)
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	3304      	adds	r3, #4
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	4610      	mov	r0, r2
 8006b5e:	f7fe f9b0 	bl	8004ec2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006b62:	697b      	ldr	r3, [r7, #20]
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3718      	adds	r7, #24
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	20001148 	.word	0x20001148
 8006b70:	20001144 	.word	0x20001144

08006b74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b08e      	sub	sp, #56	@ 0x38
 8006b78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b7a:	e0a5      	b.n	8006cc8 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	da19      	bge.n	8006bb6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006b82:	1d3b      	adds	r3, r7, #4
 8006b84:	3304      	adds	r3, #4
 8006b86:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10b      	bne.n	8006ba6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b92:	f383 8811 	msr	BASEPRI, r3
 8006b96:	f3bf 8f6f 	isb	sy
 8006b9a:	f3bf 8f4f 	dsb	sy
 8006b9e:	61fb      	str	r3, [r7, #28]
}
 8006ba0:	bf00      	nop
 8006ba2:	bf00      	nop
 8006ba4:	e7fd      	b.n	8006ba2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bac:	6850      	ldr	r0, [r2, #4]
 8006bae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bb0:	6892      	ldr	r2, [r2, #8]
 8006bb2:	4611      	mov	r1, r2
 8006bb4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f2c0 8085 	blt.w	8006cc8 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d004      	beq.n	8006bd4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bcc:	3304      	adds	r3, #4
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7fe f9b0 	bl	8004f34 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006bd4:	463b      	mov	r3, r7
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7ff ff6a 	bl	8006ab0 <prvSampleTimeNow>
 8006bdc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2b09      	cmp	r3, #9
 8006be2:	d86c      	bhi.n	8006cbe <prvProcessReceivedCommands+0x14a>
 8006be4:	a201      	add	r2, pc, #4	@ (adr r2, 8006bec <prvProcessReceivedCommands+0x78>)
 8006be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bea:	bf00      	nop
 8006bec:	08006c15 	.word	0x08006c15
 8006bf0:	08006c15 	.word	0x08006c15
 8006bf4:	08006c15 	.word	0x08006c15
 8006bf8:	08006cbf 	.word	0x08006cbf
 8006bfc:	08006c73 	.word	0x08006c73
 8006c00:	08006cad 	.word	0x08006cad
 8006c04:	08006c15 	.word	0x08006c15
 8006c08:	08006c15 	.word	0x08006c15
 8006c0c:	08006cbf 	.word	0x08006cbf
 8006c10:	08006c73 	.word	0x08006c73
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c14:	68ba      	ldr	r2, [r7, #8]
 8006c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c18:	699b      	ldr	r3, [r3, #24]
 8006c1a:	18d1      	adds	r1, r2, r3
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c22:	f7ff ff65 	bl	8006af0 <prvInsertTimerInActiveList>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d04a      	beq.n	8006cc2 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c32:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c36:	69db      	ldr	r3, [r3, #28]
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d142      	bne.n	8006cc2 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c40:	699b      	ldr	r3, [r3, #24]
 8006c42:	441a      	add	r2, r3
 8006c44:	2300      	movs	r3, #0
 8006c46:	9300      	str	r3, [sp, #0]
 8006c48:	2300      	movs	r3, #0
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c4e:	f7ff fe19 	bl	8006884 <xTimerGenericCommand>
 8006c52:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006c54:	6a3b      	ldr	r3, [r7, #32]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d133      	bne.n	8006cc2 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8006c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c5e:	f383 8811 	msr	BASEPRI, r3
 8006c62:	f3bf 8f6f 	isb	sy
 8006c66:	f3bf 8f4f 	dsb	sy
 8006c6a:	61bb      	str	r3, [r7, #24]
}
 8006c6c:	bf00      	nop
 8006c6e:	bf00      	nop
 8006c70:	e7fd      	b.n	8006c6e <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c76:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c7a:	699b      	ldr	r3, [r3, #24]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d10b      	bne.n	8006c98 <prvProcessReceivedCommands+0x124>
	__asm volatile
 8006c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c84:	f383 8811 	msr	BASEPRI, r3
 8006c88:	f3bf 8f6f 	isb	sy
 8006c8c:	f3bf 8f4f 	dsb	sy
 8006c90:	617b      	str	r3, [r7, #20]
}
 8006c92:	bf00      	nop
 8006c94:	bf00      	nop
 8006c96:	e7fd      	b.n	8006c94 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c9a:	699a      	ldr	r2, [r3, #24]
 8006c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c9e:	18d1      	adds	r1, r2, r3
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ca4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ca6:	f7ff ff23 	bl	8006af0 <prvInsertTimerInActiveList>
					break;
 8006caa:	e00d      	b.n	8006cc8 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cae:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d107      	bne.n	8006cc6 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8006cb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cb8:	f000 fbd8 	bl	800746c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006cbc:	e003      	b.n	8006cc6 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8006cbe:	bf00      	nop
 8006cc0:	e002      	b.n	8006cc8 <prvProcessReceivedCommands+0x154>
					break;
 8006cc2:	bf00      	nop
 8006cc4:	e000      	b.n	8006cc8 <prvProcessReceivedCommands+0x154>
					break;
 8006cc6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006cc8:	4b07      	ldr	r3, [pc, #28]	@ (8006ce8 <prvProcessReceivedCommands+0x174>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	1d39      	adds	r1, r7, #4
 8006cce:	2200      	movs	r2, #0
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f7fe fc01 	bl	80054d8 <xQueueReceive>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f47f af4f 	bne.w	8006b7c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006cde:	bf00      	nop
 8006ce0:	bf00      	nop
 8006ce2:	3730      	adds	r7, #48	@ 0x30
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	2000114c 	.word	0x2000114c

08006cec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b088      	sub	sp, #32
 8006cf0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006cf2:	e046      	b.n	8006d82 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006cf4:	4b2c      	ldr	r3, [pc, #176]	@ (8006da8 <prvSwitchTimerLists+0xbc>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006cfe:	4b2a      	ldr	r3, [pc, #168]	@ (8006da8 <prvSwitchTimerLists+0xbc>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	3304      	adds	r3, #4
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7fe f911 	bl	8004f34 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d16:	68f8      	ldr	r0, [r7, #12]
 8006d18:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	69db      	ldr	r3, [r3, #28]
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d12f      	bne.n	8006d82 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	699b      	ldr	r3, [r3, #24]
 8006d26:	693a      	ldr	r2, [r7, #16]
 8006d28:	4413      	add	r3, r2
 8006d2a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006d2c:	68ba      	ldr	r2, [r7, #8]
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d90e      	bls.n	8006d52 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d40:	4b19      	ldr	r3, [pc, #100]	@ (8006da8 <prvSwitchTimerLists+0xbc>)
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	3304      	adds	r3, #4
 8006d48:	4619      	mov	r1, r3
 8006d4a:	4610      	mov	r0, r2
 8006d4c:	f7fe f8b9 	bl	8004ec2 <vListInsert>
 8006d50:	e017      	b.n	8006d82 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d52:	2300      	movs	r3, #0
 8006d54:	9300      	str	r3, [sp, #0]
 8006d56:	2300      	movs	r3, #0
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f7ff fd91 	bl	8006884 <xTimerGenericCommand>
 8006d62:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10b      	bne.n	8006d82 <prvSwitchTimerLists+0x96>
	__asm volatile
 8006d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d6e:	f383 8811 	msr	BASEPRI, r3
 8006d72:	f3bf 8f6f 	isb	sy
 8006d76:	f3bf 8f4f 	dsb	sy
 8006d7a:	603b      	str	r3, [r7, #0]
}
 8006d7c:	bf00      	nop
 8006d7e:	bf00      	nop
 8006d80:	e7fd      	b.n	8006d7e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d82:	4b09      	ldr	r3, [pc, #36]	@ (8006da8 <prvSwitchTimerLists+0xbc>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1b3      	bne.n	8006cf4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006d8c:	4b06      	ldr	r3, [pc, #24]	@ (8006da8 <prvSwitchTimerLists+0xbc>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006d92:	4b06      	ldr	r3, [pc, #24]	@ (8006dac <prvSwitchTimerLists+0xc0>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a04      	ldr	r2, [pc, #16]	@ (8006da8 <prvSwitchTimerLists+0xbc>)
 8006d98:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006d9a:	4a04      	ldr	r2, [pc, #16]	@ (8006dac <prvSwitchTimerLists+0xc0>)
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	6013      	str	r3, [r2, #0]
}
 8006da0:	bf00      	nop
 8006da2:	3718      	adds	r7, #24
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	20001144 	.word	0x20001144
 8006dac:	20001148 	.word	0x20001148

08006db0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006db6:	f000 f96f 	bl	8007098 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006dba:	4b15      	ldr	r3, [pc, #84]	@ (8006e10 <prvCheckForValidListAndQueue+0x60>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d120      	bne.n	8006e04 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006dc2:	4814      	ldr	r0, [pc, #80]	@ (8006e14 <prvCheckForValidListAndQueue+0x64>)
 8006dc4:	f7fe f82c 	bl	8004e20 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006dc8:	4813      	ldr	r0, [pc, #76]	@ (8006e18 <prvCheckForValidListAndQueue+0x68>)
 8006dca:	f7fe f829 	bl	8004e20 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006dce:	4b13      	ldr	r3, [pc, #76]	@ (8006e1c <prvCheckForValidListAndQueue+0x6c>)
 8006dd0:	4a10      	ldr	r2, [pc, #64]	@ (8006e14 <prvCheckForValidListAndQueue+0x64>)
 8006dd2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006dd4:	4b12      	ldr	r3, [pc, #72]	@ (8006e20 <prvCheckForValidListAndQueue+0x70>)
 8006dd6:	4a10      	ldr	r2, [pc, #64]	@ (8006e18 <prvCheckForValidListAndQueue+0x68>)
 8006dd8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006dda:	2300      	movs	r3, #0
 8006ddc:	9300      	str	r3, [sp, #0]
 8006dde:	4b11      	ldr	r3, [pc, #68]	@ (8006e24 <prvCheckForValidListAndQueue+0x74>)
 8006de0:	4a11      	ldr	r2, [pc, #68]	@ (8006e28 <prvCheckForValidListAndQueue+0x78>)
 8006de2:	2110      	movs	r1, #16
 8006de4:	200a      	movs	r0, #10
 8006de6:	f7fe f939 	bl	800505c <xQueueGenericCreateStatic>
 8006dea:	4603      	mov	r3, r0
 8006dec:	4a08      	ldr	r2, [pc, #32]	@ (8006e10 <prvCheckForValidListAndQueue+0x60>)
 8006dee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006df0:	4b07      	ldr	r3, [pc, #28]	@ (8006e10 <prvCheckForValidListAndQueue+0x60>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d005      	beq.n	8006e04 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006df8:	4b05      	ldr	r3, [pc, #20]	@ (8006e10 <prvCheckForValidListAndQueue+0x60>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	490b      	ldr	r1, [pc, #44]	@ (8006e2c <prvCheckForValidListAndQueue+0x7c>)
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7fe fd5c 	bl	80058bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e04:	f000 f97a 	bl	80070fc <vPortExitCritical>
}
 8006e08:	bf00      	nop
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	2000114c 	.word	0x2000114c
 8006e14:	2000111c 	.word	0x2000111c
 8006e18:	20001130 	.word	0x20001130
 8006e1c:	20001144 	.word	0x20001144
 8006e20:	20001148 	.word	0x20001148
 8006e24:	200011f8 	.word	0x200011f8
 8006e28:	20001158 	.word	0x20001158
 8006e2c:	080081ac 	.word	0x080081ac

08006e30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006e30:	b480      	push	{r7}
 8006e32:	b085      	sub	sp, #20
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	3b04      	subs	r3, #4
 8006e40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006e48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	3b04      	subs	r3, #4
 8006e4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	f023 0201 	bic.w	r2, r3, #1
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	3b04      	subs	r3, #4
 8006e5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006e60:	4a0c      	ldr	r2, [pc, #48]	@ (8006e94 <pxPortInitialiseStack+0x64>)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	3b14      	subs	r3, #20
 8006e6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	3b04      	subs	r3, #4
 8006e76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f06f 0202 	mvn.w	r2, #2
 8006e7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	3b20      	subs	r3, #32
 8006e84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006e86:	68fb      	ldr	r3, [r7, #12]
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3714      	adds	r7, #20
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr
 8006e94:	08006e99 	.word	0x08006e99

08006e98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006ea2:	4b13      	ldr	r3, [pc, #76]	@ (8006ef0 <prvTaskExitError+0x58>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eaa:	d00b      	beq.n	8006ec4 <prvTaskExitError+0x2c>
	__asm volatile
 8006eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb0:	f383 8811 	msr	BASEPRI, r3
 8006eb4:	f3bf 8f6f 	isb	sy
 8006eb8:	f3bf 8f4f 	dsb	sy
 8006ebc:	60fb      	str	r3, [r7, #12]
}
 8006ebe:	bf00      	nop
 8006ec0:	bf00      	nop
 8006ec2:	e7fd      	b.n	8006ec0 <prvTaskExitError+0x28>
	__asm volatile
 8006ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec8:	f383 8811 	msr	BASEPRI, r3
 8006ecc:	f3bf 8f6f 	isb	sy
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	60bb      	str	r3, [r7, #8]
}
 8006ed6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006ed8:	bf00      	nop
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d0fc      	beq.n	8006eda <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006ee0:	bf00      	nop
 8006ee2:	bf00      	nop
 8006ee4:	3714      	adds	r7, #20
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop
 8006ef0:	20000038 	.word	0x20000038
	...

08006f00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f00:	4b07      	ldr	r3, [pc, #28]	@ (8006f20 <pxCurrentTCBConst2>)
 8006f02:	6819      	ldr	r1, [r3, #0]
 8006f04:	6808      	ldr	r0, [r1, #0]
 8006f06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f0a:	f380 8809 	msr	PSP, r0
 8006f0e:	f3bf 8f6f 	isb	sy
 8006f12:	f04f 0000 	mov.w	r0, #0
 8006f16:	f380 8811 	msr	BASEPRI, r0
 8006f1a:	4770      	bx	lr
 8006f1c:	f3af 8000 	nop.w

08006f20 <pxCurrentTCBConst2>:
 8006f20:	20000c1c 	.word	0x20000c1c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006f24:	bf00      	nop
 8006f26:	bf00      	nop

08006f28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006f28:	4808      	ldr	r0, [pc, #32]	@ (8006f4c <prvPortStartFirstTask+0x24>)
 8006f2a:	6800      	ldr	r0, [r0, #0]
 8006f2c:	6800      	ldr	r0, [r0, #0]
 8006f2e:	f380 8808 	msr	MSP, r0
 8006f32:	f04f 0000 	mov.w	r0, #0
 8006f36:	f380 8814 	msr	CONTROL, r0
 8006f3a:	b662      	cpsie	i
 8006f3c:	b661      	cpsie	f
 8006f3e:	f3bf 8f4f 	dsb	sy
 8006f42:	f3bf 8f6f 	isb	sy
 8006f46:	df00      	svc	0
 8006f48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006f4a:	bf00      	nop
 8006f4c:	e000ed08 	.word	0xe000ed08

08006f50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b086      	sub	sp, #24
 8006f54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006f56:	4b47      	ldr	r3, [pc, #284]	@ (8007074 <xPortStartScheduler+0x124>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a47      	ldr	r2, [pc, #284]	@ (8007078 <xPortStartScheduler+0x128>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d10b      	bne.n	8006f78 <xPortStartScheduler+0x28>
	__asm volatile
 8006f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f64:	f383 8811 	msr	BASEPRI, r3
 8006f68:	f3bf 8f6f 	isb	sy
 8006f6c:	f3bf 8f4f 	dsb	sy
 8006f70:	60fb      	str	r3, [r7, #12]
}
 8006f72:	bf00      	nop
 8006f74:	bf00      	nop
 8006f76:	e7fd      	b.n	8006f74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006f78:	4b3e      	ldr	r3, [pc, #248]	@ (8007074 <xPortStartScheduler+0x124>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a3f      	ldr	r2, [pc, #252]	@ (800707c <xPortStartScheduler+0x12c>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d10b      	bne.n	8006f9a <xPortStartScheduler+0x4a>
	__asm volatile
 8006f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f86:	f383 8811 	msr	BASEPRI, r3
 8006f8a:	f3bf 8f6f 	isb	sy
 8006f8e:	f3bf 8f4f 	dsb	sy
 8006f92:	613b      	str	r3, [r7, #16]
}
 8006f94:	bf00      	nop
 8006f96:	bf00      	nop
 8006f98:	e7fd      	b.n	8006f96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006f9a:	4b39      	ldr	r3, [pc, #228]	@ (8007080 <xPortStartScheduler+0x130>)
 8006f9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	22ff      	movs	r2, #255	@ 0xff
 8006faa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006fb4:	78fb      	ldrb	r3, [r7, #3]
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006fbc:	b2da      	uxtb	r2, r3
 8006fbe:	4b31      	ldr	r3, [pc, #196]	@ (8007084 <xPortStartScheduler+0x134>)
 8006fc0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006fc2:	4b31      	ldr	r3, [pc, #196]	@ (8007088 <xPortStartScheduler+0x138>)
 8006fc4:	2207      	movs	r2, #7
 8006fc6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006fc8:	e009      	b.n	8006fde <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006fca:	4b2f      	ldr	r3, [pc, #188]	@ (8007088 <xPortStartScheduler+0x138>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	4a2d      	ldr	r2, [pc, #180]	@ (8007088 <xPortStartScheduler+0x138>)
 8006fd2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006fd4:	78fb      	ldrb	r3, [r7, #3]
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	005b      	lsls	r3, r3, #1
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006fde:	78fb      	ldrb	r3, [r7, #3]
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fe6:	2b80      	cmp	r3, #128	@ 0x80
 8006fe8:	d0ef      	beq.n	8006fca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006fea:	4b27      	ldr	r3, [pc, #156]	@ (8007088 <xPortStartScheduler+0x138>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f1c3 0307 	rsb	r3, r3, #7
 8006ff2:	2b04      	cmp	r3, #4
 8006ff4:	d00b      	beq.n	800700e <xPortStartScheduler+0xbe>
	__asm volatile
 8006ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ffa:	f383 8811 	msr	BASEPRI, r3
 8006ffe:	f3bf 8f6f 	isb	sy
 8007002:	f3bf 8f4f 	dsb	sy
 8007006:	60bb      	str	r3, [r7, #8]
}
 8007008:	bf00      	nop
 800700a:	bf00      	nop
 800700c:	e7fd      	b.n	800700a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800700e:	4b1e      	ldr	r3, [pc, #120]	@ (8007088 <xPortStartScheduler+0x138>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	021b      	lsls	r3, r3, #8
 8007014:	4a1c      	ldr	r2, [pc, #112]	@ (8007088 <xPortStartScheduler+0x138>)
 8007016:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007018:	4b1b      	ldr	r3, [pc, #108]	@ (8007088 <xPortStartScheduler+0x138>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007020:	4a19      	ldr	r2, [pc, #100]	@ (8007088 <xPortStartScheduler+0x138>)
 8007022:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	b2da      	uxtb	r2, r3
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800702c:	4b17      	ldr	r3, [pc, #92]	@ (800708c <xPortStartScheduler+0x13c>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a16      	ldr	r2, [pc, #88]	@ (800708c <xPortStartScheduler+0x13c>)
 8007032:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007036:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007038:	4b14      	ldr	r3, [pc, #80]	@ (800708c <xPortStartScheduler+0x13c>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a13      	ldr	r2, [pc, #76]	@ (800708c <xPortStartScheduler+0x13c>)
 800703e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007042:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007044:	f000 f8da 	bl	80071fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007048:	4b11      	ldr	r3, [pc, #68]	@ (8007090 <xPortStartScheduler+0x140>)
 800704a:	2200      	movs	r2, #0
 800704c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800704e:	f000 f8f9 	bl	8007244 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007052:	4b10      	ldr	r3, [pc, #64]	@ (8007094 <xPortStartScheduler+0x144>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a0f      	ldr	r2, [pc, #60]	@ (8007094 <xPortStartScheduler+0x144>)
 8007058:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800705c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800705e:	f7ff ff63 	bl	8006f28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007062:	f7ff f85f 	bl	8006124 <vTaskSwitchContext>
	prvTaskExitError();
 8007066:	f7ff ff17 	bl	8006e98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3718      	adds	r7, #24
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	e000ed00 	.word	0xe000ed00
 8007078:	410fc271 	.word	0x410fc271
 800707c:	410fc270 	.word	0x410fc270
 8007080:	e000e400 	.word	0xe000e400
 8007084:	20001248 	.word	0x20001248
 8007088:	2000124c 	.word	0x2000124c
 800708c:	e000ed20 	.word	0xe000ed20
 8007090:	20000038 	.word	0x20000038
 8007094:	e000ef34 	.word	0xe000ef34

08007098 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
	__asm volatile
 800709e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070a2:	f383 8811 	msr	BASEPRI, r3
 80070a6:	f3bf 8f6f 	isb	sy
 80070aa:	f3bf 8f4f 	dsb	sy
 80070ae:	607b      	str	r3, [r7, #4]
}
 80070b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80070b2:	4b10      	ldr	r3, [pc, #64]	@ (80070f4 <vPortEnterCritical+0x5c>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	3301      	adds	r3, #1
 80070b8:	4a0e      	ldr	r2, [pc, #56]	@ (80070f4 <vPortEnterCritical+0x5c>)
 80070ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80070bc:	4b0d      	ldr	r3, [pc, #52]	@ (80070f4 <vPortEnterCritical+0x5c>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d110      	bne.n	80070e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80070c4:	4b0c      	ldr	r3, [pc, #48]	@ (80070f8 <vPortEnterCritical+0x60>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00b      	beq.n	80070e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80070ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d2:	f383 8811 	msr	BASEPRI, r3
 80070d6:	f3bf 8f6f 	isb	sy
 80070da:	f3bf 8f4f 	dsb	sy
 80070de:	603b      	str	r3, [r7, #0]
}
 80070e0:	bf00      	nop
 80070e2:	bf00      	nop
 80070e4:	e7fd      	b.n	80070e2 <vPortEnterCritical+0x4a>
	}
}
 80070e6:	bf00      	nop
 80070e8:	370c      	adds	r7, #12
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop
 80070f4:	20000038 	.word	0x20000038
 80070f8:	e000ed04 	.word	0xe000ed04

080070fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007102:	4b12      	ldr	r3, [pc, #72]	@ (800714c <vPortExitCritical+0x50>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d10b      	bne.n	8007122 <vPortExitCritical+0x26>
	__asm volatile
 800710a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800710e:	f383 8811 	msr	BASEPRI, r3
 8007112:	f3bf 8f6f 	isb	sy
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	607b      	str	r3, [r7, #4]
}
 800711c:	bf00      	nop
 800711e:	bf00      	nop
 8007120:	e7fd      	b.n	800711e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007122:	4b0a      	ldr	r3, [pc, #40]	@ (800714c <vPortExitCritical+0x50>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	3b01      	subs	r3, #1
 8007128:	4a08      	ldr	r2, [pc, #32]	@ (800714c <vPortExitCritical+0x50>)
 800712a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800712c:	4b07      	ldr	r3, [pc, #28]	@ (800714c <vPortExitCritical+0x50>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d105      	bne.n	8007140 <vPortExitCritical+0x44>
 8007134:	2300      	movs	r3, #0
 8007136:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	f383 8811 	msr	BASEPRI, r3
}
 800713e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007140:	bf00      	nop
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr
 800714c:	20000038 	.word	0x20000038

08007150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007150:	f3ef 8009 	mrs	r0, PSP
 8007154:	f3bf 8f6f 	isb	sy
 8007158:	4b15      	ldr	r3, [pc, #84]	@ (80071b0 <pxCurrentTCBConst>)
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	f01e 0f10 	tst.w	lr, #16
 8007160:	bf08      	it	eq
 8007162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800716a:	6010      	str	r0, [r2, #0]
 800716c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007170:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007174:	f380 8811 	msr	BASEPRI, r0
 8007178:	f3bf 8f4f 	dsb	sy
 800717c:	f3bf 8f6f 	isb	sy
 8007180:	f7fe ffd0 	bl	8006124 <vTaskSwitchContext>
 8007184:	f04f 0000 	mov.w	r0, #0
 8007188:	f380 8811 	msr	BASEPRI, r0
 800718c:	bc09      	pop	{r0, r3}
 800718e:	6819      	ldr	r1, [r3, #0]
 8007190:	6808      	ldr	r0, [r1, #0]
 8007192:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007196:	f01e 0f10 	tst.w	lr, #16
 800719a:	bf08      	it	eq
 800719c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80071a0:	f380 8809 	msr	PSP, r0
 80071a4:	f3bf 8f6f 	isb	sy
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	f3af 8000 	nop.w

080071b0 <pxCurrentTCBConst>:
 80071b0:	20000c1c 	.word	0x20000c1c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80071b4:	bf00      	nop
 80071b6:	bf00      	nop

080071b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
	__asm volatile
 80071be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c2:	f383 8811 	msr	BASEPRI, r3
 80071c6:	f3bf 8f6f 	isb	sy
 80071ca:	f3bf 8f4f 	dsb	sy
 80071ce:	607b      	str	r3, [r7, #4]
}
 80071d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80071d2:	f7fe fee7 	bl	8005fa4 <xTaskIncrementTick>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d003      	beq.n	80071e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80071dc:	4b06      	ldr	r3, [pc, #24]	@ (80071f8 <SysTick_Handler+0x40>)
 80071de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071e2:	601a      	str	r2, [r3, #0]
 80071e4:	2300      	movs	r3, #0
 80071e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	f383 8811 	msr	BASEPRI, r3
}
 80071ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80071f0:	bf00      	nop
 80071f2:	3708      	adds	r7, #8
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	e000ed04 	.word	0xe000ed04

080071fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80071fc:	b480      	push	{r7}
 80071fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007200:	4b0b      	ldr	r3, [pc, #44]	@ (8007230 <vPortSetupTimerInterrupt+0x34>)
 8007202:	2200      	movs	r2, #0
 8007204:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007206:	4b0b      	ldr	r3, [pc, #44]	@ (8007234 <vPortSetupTimerInterrupt+0x38>)
 8007208:	2200      	movs	r2, #0
 800720a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800720c:	4b0a      	ldr	r3, [pc, #40]	@ (8007238 <vPortSetupTimerInterrupt+0x3c>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a0a      	ldr	r2, [pc, #40]	@ (800723c <vPortSetupTimerInterrupt+0x40>)
 8007212:	fba2 2303 	umull	r2, r3, r2, r3
 8007216:	099b      	lsrs	r3, r3, #6
 8007218:	4a09      	ldr	r2, [pc, #36]	@ (8007240 <vPortSetupTimerInterrupt+0x44>)
 800721a:	3b01      	subs	r3, #1
 800721c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800721e:	4b04      	ldr	r3, [pc, #16]	@ (8007230 <vPortSetupTimerInterrupt+0x34>)
 8007220:	2207      	movs	r2, #7
 8007222:	601a      	str	r2, [r3, #0]
}
 8007224:	bf00      	nop
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr
 800722e:	bf00      	nop
 8007230:	e000e010 	.word	0xe000e010
 8007234:	e000e018 	.word	0xe000e018
 8007238:	2000002c 	.word	0x2000002c
 800723c:	10624dd3 	.word	0x10624dd3
 8007240:	e000e014 	.word	0xe000e014

08007244 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007244:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007254 <vPortEnableVFP+0x10>
 8007248:	6801      	ldr	r1, [r0, #0]
 800724a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800724e:	6001      	str	r1, [r0, #0]
 8007250:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007252:	bf00      	nop
 8007254:	e000ed88 	.word	0xe000ed88

08007258 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800725e:	f3ef 8305 	mrs	r3, IPSR
 8007262:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2b0f      	cmp	r3, #15
 8007268:	d915      	bls.n	8007296 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800726a:	4a18      	ldr	r2, [pc, #96]	@ (80072cc <vPortValidateInterruptPriority+0x74>)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	4413      	add	r3, r2
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007274:	4b16      	ldr	r3, [pc, #88]	@ (80072d0 <vPortValidateInterruptPriority+0x78>)
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	7afa      	ldrb	r2, [r7, #11]
 800727a:	429a      	cmp	r2, r3
 800727c:	d20b      	bcs.n	8007296 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800727e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007282:	f383 8811 	msr	BASEPRI, r3
 8007286:	f3bf 8f6f 	isb	sy
 800728a:	f3bf 8f4f 	dsb	sy
 800728e:	607b      	str	r3, [r7, #4]
}
 8007290:	bf00      	nop
 8007292:	bf00      	nop
 8007294:	e7fd      	b.n	8007292 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007296:	4b0f      	ldr	r3, [pc, #60]	@ (80072d4 <vPortValidateInterruptPriority+0x7c>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800729e:	4b0e      	ldr	r3, [pc, #56]	@ (80072d8 <vPortValidateInterruptPriority+0x80>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d90b      	bls.n	80072be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80072a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072aa:	f383 8811 	msr	BASEPRI, r3
 80072ae:	f3bf 8f6f 	isb	sy
 80072b2:	f3bf 8f4f 	dsb	sy
 80072b6:	603b      	str	r3, [r7, #0]
}
 80072b8:	bf00      	nop
 80072ba:	bf00      	nop
 80072bc:	e7fd      	b.n	80072ba <vPortValidateInterruptPriority+0x62>
	}
 80072be:	bf00      	nop
 80072c0:	3714      	adds	r7, #20
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	e000e3f0 	.word	0xe000e3f0
 80072d0:	20001248 	.word	0x20001248
 80072d4:	e000ed0c 	.word	0xe000ed0c
 80072d8:	2000124c 	.word	0x2000124c

080072dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b08a      	sub	sp, #40	@ 0x28
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80072e4:	2300      	movs	r3, #0
 80072e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80072e8:	f7fe fda0 	bl	8005e2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80072ec:	4b5a      	ldr	r3, [pc, #360]	@ (8007458 <pvPortMalloc+0x17c>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d101      	bne.n	80072f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80072f4:	f000 f916 	bl	8007524 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80072f8:	4b58      	ldr	r3, [pc, #352]	@ (800745c <pvPortMalloc+0x180>)
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4013      	ands	r3, r2
 8007300:	2b00      	cmp	r3, #0
 8007302:	f040 8090 	bne.w	8007426 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d01e      	beq.n	800734a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800730c:	2208      	movs	r2, #8
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4413      	add	r3, r2
 8007312:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f003 0307 	and.w	r3, r3, #7
 800731a:	2b00      	cmp	r3, #0
 800731c:	d015      	beq.n	800734a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f023 0307 	bic.w	r3, r3, #7
 8007324:	3308      	adds	r3, #8
 8007326:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f003 0307 	and.w	r3, r3, #7
 800732e:	2b00      	cmp	r3, #0
 8007330:	d00b      	beq.n	800734a <pvPortMalloc+0x6e>
	__asm volatile
 8007332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007336:	f383 8811 	msr	BASEPRI, r3
 800733a:	f3bf 8f6f 	isb	sy
 800733e:	f3bf 8f4f 	dsb	sy
 8007342:	617b      	str	r3, [r7, #20]
}
 8007344:	bf00      	nop
 8007346:	bf00      	nop
 8007348:	e7fd      	b.n	8007346 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d06a      	beq.n	8007426 <pvPortMalloc+0x14a>
 8007350:	4b43      	ldr	r3, [pc, #268]	@ (8007460 <pvPortMalloc+0x184>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	429a      	cmp	r2, r3
 8007358:	d865      	bhi.n	8007426 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800735a:	4b42      	ldr	r3, [pc, #264]	@ (8007464 <pvPortMalloc+0x188>)
 800735c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800735e:	4b41      	ldr	r3, [pc, #260]	@ (8007464 <pvPortMalloc+0x188>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007364:	e004      	b.n	8007370 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007368:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800736a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	429a      	cmp	r2, r3
 8007378:	d903      	bls.n	8007382 <pvPortMalloc+0xa6>
 800737a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1f1      	bne.n	8007366 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007382:	4b35      	ldr	r3, [pc, #212]	@ (8007458 <pvPortMalloc+0x17c>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007388:	429a      	cmp	r2, r3
 800738a:	d04c      	beq.n	8007426 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800738c:	6a3b      	ldr	r3, [r7, #32]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2208      	movs	r2, #8
 8007392:	4413      	add	r3, r2
 8007394:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	6a3b      	ldr	r3, [r7, #32]
 800739c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800739e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a0:	685a      	ldr	r2, [r3, #4]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	1ad2      	subs	r2, r2, r3
 80073a6:	2308      	movs	r3, #8
 80073a8:	005b      	lsls	r3, r3, #1
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d920      	bls.n	80073f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80073ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4413      	add	r3, r2
 80073b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	f003 0307 	and.w	r3, r3, #7
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00b      	beq.n	80073d8 <pvPortMalloc+0xfc>
	__asm volatile
 80073c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073c4:	f383 8811 	msr	BASEPRI, r3
 80073c8:	f3bf 8f6f 	isb	sy
 80073cc:	f3bf 8f4f 	dsb	sy
 80073d0:	613b      	str	r3, [r7, #16]
}
 80073d2:	bf00      	nop
 80073d4:	bf00      	nop
 80073d6:	e7fd      	b.n	80073d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80073d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073da:	685a      	ldr	r2, [r3, #4]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	1ad2      	subs	r2, r2, r3
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80073e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80073ea:	69b8      	ldr	r0, [r7, #24]
 80073ec:	f000 f8fc 	bl	80075e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80073f0:	4b1b      	ldr	r3, [pc, #108]	@ (8007460 <pvPortMalloc+0x184>)
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	4a19      	ldr	r2, [pc, #100]	@ (8007460 <pvPortMalloc+0x184>)
 80073fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80073fe:	4b18      	ldr	r3, [pc, #96]	@ (8007460 <pvPortMalloc+0x184>)
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	4b19      	ldr	r3, [pc, #100]	@ (8007468 <pvPortMalloc+0x18c>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	429a      	cmp	r2, r3
 8007408:	d203      	bcs.n	8007412 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800740a:	4b15      	ldr	r3, [pc, #84]	@ (8007460 <pvPortMalloc+0x184>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a16      	ldr	r2, [pc, #88]	@ (8007468 <pvPortMalloc+0x18c>)
 8007410:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007414:	685a      	ldr	r2, [r3, #4]
 8007416:	4b11      	ldr	r3, [pc, #68]	@ (800745c <pvPortMalloc+0x180>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	431a      	orrs	r2, r3
 800741c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800741e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007422:	2200      	movs	r2, #0
 8007424:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007426:	f7fe fd0f 	bl	8005e48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	f003 0307 	and.w	r3, r3, #7
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00b      	beq.n	800744c <pvPortMalloc+0x170>
	__asm volatile
 8007434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007438:	f383 8811 	msr	BASEPRI, r3
 800743c:	f3bf 8f6f 	isb	sy
 8007440:	f3bf 8f4f 	dsb	sy
 8007444:	60fb      	str	r3, [r7, #12]
}
 8007446:	bf00      	nop
 8007448:	bf00      	nop
 800744a:	e7fd      	b.n	8007448 <pvPortMalloc+0x16c>
	return pvReturn;
 800744c:	69fb      	ldr	r3, [r7, #28]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3728      	adds	r7, #40	@ 0x28
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	20001e58 	.word	0x20001e58
 800745c:	20001e64 	.word	0x20001e64
 8007460:	20001e5c 	.word	0x20001e5c
 8007464:	20001e50 	.word	0x20001e50
 8007468:	20001e60 	.word	0x20001e60

0800746c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b086      	sub	sp, #24
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d04a      	beq.n	8007514 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800747e:	2308      	movs	r3, #8
 8007480:	425b      	negs	r3, r3
 8007482:	697a      	ldr	r2, [r7, #20]
 8007484:	4413      	add	r3, r2
 8007486:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	685a      	ldr	r2, [r3, #4]
 8007490:	4b22      	ldr	r3, [pc, #136]	@ (800751c <vPortFree+0xb0>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4013      	ands	r3, r2
 8007496:	2b00      	cmp	r3, #0
 8007498:	d10b      	bne.n	80074b2 <vPortFree+0x46>
	__asm volatile
 800749a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800749e:	f383 8811 	msr	BASEPRI, r3
 80074a2:	f3bf 8f6f 	isb	sy
 80074a6:	f3bf 8f4f 	dsb	sy
 80074aa:	60fb      	str	r3, [r7, #12]
}
 80074ac:	bf00      	nop
 80074ae:	bf00      	nop
 80074b0:	e7fd      	b.n	80074ae <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00b      	beq.n	80074d2 <vPortFree+0x66>
	__asm volatile
 80074ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074be:	f383 8811 	msr	BASEPRI, r3
 80074c2:	f3bf 8f6f 	isb	sy
 80074c6:	f3bf 8f4f 	dsb	sy
 80074ca:	60bb      	str	r3, [r7, #8]
}
 80074cc:	bf00      	nop
 80074ce:	bf00      	nop
 80074d0:	e7fd      	b.n	80074ce <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	685a      	ldr	r2, [r3, #4]
 80074d6:	4b11      	ldr	r3, [pc, #68]	@ (800751c <vPortFree+0xb0>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4013      	ands	r3, r2
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d019      	beq.n	8007514 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d115      	bne.n	8007514 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	685a      	ldr	r2, [r3, #4]
 80074ec:	4b0b      	ldr	r3, [pc, #44]	@ (800751c <vPortFree+0xb0>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	43db      	mvns	r3, r3
 80074f2:	401a      	ands	r2, r3
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80074f8:	f7fe fc98 	bl	8005e2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	685a      	ldr	r2, [r3, #4]
 8007500:	4b07      	ldr	r3, [pc, #28]	@ (8007520 <vPortFree+0xb4>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4413      	add	r3, r2
 8007506:	4a06      	ldr	r2, [pc, #24]	@ (8007520 <vPortFree+0xb4>)
 8007508:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800750a:	6938      	ldr	r0, [r7, #16]
 800750c:	f000 f86c 	bl	80075e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007510:	f7fe fc9a 	bl	8005e48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007514:	bf00      	nop
 8007516:	3718      	adds	r7, #24
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}
 800751c:	20001e64 	.word	0x20001e64
 8007520:	20001e5c 	.word	0x20001e5c

08007524 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007524:	b480      	push	{r7}
 8007526:	b085      	sub	sp, #20
 8007528:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800752a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800752e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007530:	4b27      	ldr	r3, [pc, #156]	@ (80075d0 <prvHeapInit+0xac>)
 8007532:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f003 0307 	and.w	r3, r3, #7
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00c      	beq.n	8007558 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	3307      	adds	r3, #7
 8007542:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f023 0307 	bic.w	r3, r3, #7
 800754a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800754c:	68ba      	ldr	r2, [r7, #8]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	1ad3      	subs	r3, r2, r3
 8007552:	4a1f      	ldr	r2, [pc, #124]	@ (80075d0 <prvHeapInit+0xac>)
 8007554:	4413      	add	r3, r2
 8007556:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800755c:	4a1d      	ldr	r2, [pc, #116]	@ (80075d4 <prvHeapInit+0xb0>)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007562:	4b1c      	ldr	r3, [pc, #112]	@ (80075d4 <prvHeapInit+0xb0>)
 8007564:	2200      	movs	r2, #0
 8007566:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	68ba      	ldr	r2, [r7, #8]
 800756c:	4413      	add	r3, r2
 800756e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007570:	2208      	movs	r2, #8
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	1a9b      	subs	r3, r3, r2
 8007576:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f023 0307 	bic.w	r3, r3, #7
 800757e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	4a15      	ldr	r2, [pc, #84]	@ (80075d8 <prvHeapInit+0xb4>)
 8007584:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007586:	4b14      	ldr	r3, [pc, #80]	@ (80075d8 <prvHeapInit+0xb4>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2200      	movs	r2, #0
 800758c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800758e:	4b12      	ldr	r3, [pc, #72]	@ (80075d8 <prvHeapInit+0xb4>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2200      	movs	r2, #0
 8007594:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	1ad2      	subs	r2, r2, r3
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80075a4:	4b0c      	ldr	r3, [pc, #48]	@ (80075d8 <prvHeapInit+0xb4>)
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	4a0a      	ldr	r2, [pc, #40]	@ (80075dc <prvHeapInit+0xb8>)
 80075b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	4a09      	ldr	r2, [pc, #36]	@ (80075e0 <prvHeapInit+0xbc>)
 80075ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80075bc:	4b09      	ldr	r3, [pc, #36]	@ (80075e4 <prvHeapInit+0xc0>)
 80075be:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80075c2:	601a      	str	r2, [r3, #0]
}
 80075c4:	bf00      	nop
 80075c6:	3714      	adds	r7, #20
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr
 80075d0:	20001250 	.word	0x20001250
 80075d4:	20001e50 	.word	0x20001e50
 80075d8:	20001e58 	.word	0x20001e58
 80075dc:	20001e60 	.word	0x20001e60
 80075e0:	20001e5c 	.word	0x20001e5c
 80075e4:	20001e64 	.word	0x20001e64

080075e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80075f0:	4b28      	ldr	r3, [pc, #160]	@ (8007694 <prvInsertBlockIntoFreeList+0xac>)
 80075f2:	60fb      	str	r3, [r7, #12]
 80075f4:	e002      	b.n	80075fc <prvInsertBlockIntoFreeList+0x14>
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	60fb      	str	r3, [r7, #12]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	429a      	cmp	r2, r3
 8007604:	d8f7      	bhi.n	80075f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	68ba      	ldr	r2, [r7, #8]
 8007610:	4413      	add	r3, r2
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	429a      	cmp	r2, r3
 8007616:	d108      	bne.n	800762a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	685a      	ldr	r2, [r3, #4]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	441a      	add	r2, r3
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	68ba      	ldr	r2, [r7, #8]
 8007634:	441a      	add	r2, r3
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	429a      	cmp	r2, r3
 800763c:	d118      	bne.n	8007670 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	4b15      	ldr	r3, [pc, #84]	@ (8007698 <prvInsertBlockIntoFreeList+0xb0>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	429a      	cmp	r2, r3
 8007648:	d00d      	beq.n	8007666 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	685a      	ldr	r2, [r3, #4]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	441a      	add	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	601a      	str	r2, [r3, #0]
 8007664:	e008      	b.n	8007678 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007666:	4b0c      	ldr	r3, [pc, #48]	@ (8007698 <prvInsertBlockIntoFreeList+0xb0>)
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	601a      	str	r2, [r3, #0]
 800766e:	e003      	b.n	8007678 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	429a      	cmp	r2, r3
 800767e:	d002      	beq.n	8007686 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007686:	bf00      	nop
 8007688:	3714      	adds	r7, #20
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop
 8007694:	20001e50 	.word	0x20001e50
 8007698:	20001e58 	.word	0x20001e58

0800769c <std>:
 800769c:	2300      	movs	r3, #0
 800769e:	b510      	push	{r4, lr}
 80076a0:	4604      	mov	r4, r0
 80076a2:	e9c0 3300 	strd	r3, r3, [r0]
 80076a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076aa:	6083      	str	r3, [r0, #8]
 80076ac:	8181      	strh	r1, [r0, #12]
 80076ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80076b0:	81c2      	strh	r2, [r0, #14]
 80076b2:	6183      	str	r3, [r0, #24]
 80076b4:	4619      	mov	r1, r3
 80076b6:	2208      	movs	r2, #8
 80076b8:	305c      	adds	r0, #92	@ 0x5c
 80076ba:	f000 f8f4 	bl	80078a6 <memset>
 80076be:	4b0d      	ldr	r3, [pc, #52]	@ (80076f4 <std+0x58>)
 80076c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80076c2:	4b0d      	ldr	r3, [pc, #52]	@ (80076f8 <std+0x5c>)
 80076c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80076c6:	4b0d      	ldr	r3, [pc, #52]	@ (80076fc <std+0x60>)
 80076c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80076ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007700 <std+0x64>)
 80076cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80076ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007704 <std+0x68>)
 80076d0:	6224      	str	r4, [r4, #32]
 80076d2:	429c      	cmp	r4, r3
 80076d4:	d006      	beq.n	80076e4 <std+0x48>
 80076d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80076da:	4294      	cmp	r4, r2
 80076dc:	d002      	beq.n	80076e4 <std+0x48>
 80076de:	33d0      	adds	r3, #208	@ 0xd0
 80076e0:	429c      	cmp	r4, r3
 80076e2:	d105      	bne.n	80076f0 <std+0x54>
 80076e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80076e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076ec:	f000 b9b2 	b.w	8007a54 <__retarget_lock_init_recursive>
 80076f0:	bd10      	pop	{r4, pc}
 80076f2:	bf00      	nop
 80076f4:	08007821 	.word	0x08007821
 80076f8:	08007843 	.word	0x08007843
 80076fc:	0800787b 	.word	0x0800787b
 8007700:	0800789f 	.word	0x0800789f
 8007704:	20001e68 	.word	0x20001e68

08007708 <stdio_exit_handler>:
 8007708:	4a02      	ldr	r2, [pc, #8]	@ (8007714 <stdio_exit_handler+0xc>)
 800770a:	4903      	ldr	r1, [pc, #12]	@ (8007718 <stdio_exit_handler+0x10>)
 800770c:	4803      	ldr	r0, [pc, #12]	@ (800771c <stdio_exit_handler+0x14>)
 800770e:	f000 b869 	b.w	80077e4 <_fwalk_sglue>
 8007712:	bf00      	nop
 8007714:	2000003c 	.word	0x2000003c
 8007718:	08007c2d 	.word	0x08007c2d
 800771c:	2000004c 	.word	0x2000004c

08007720 <cleanup_stdio>:
 8007720:	6841      	ldr	r1, [r0, #4]
 8007722:	4b0c      	ldr	r3, [pc, #48]	@ (8007754 <cleanup_stdio+0x34>)
 8007724:	4299      	cmp	r1, r3
 8007726:	b510      	push	{r4, lr}
 8007728:	4604      	mov	r4, r0
 800772a:	d001      	beq.n	8007730 <cleanup_stdio+0x10>
 800772c:	f000 fa7e 	bl	8007c2c <_fflush_r>
 8007730:	68a1      	ldr	r1, [r4, #8]
 8007732:	4b09      	ldr	r3, [pc, #36]	@ (8007758 <cleanup_stdio+0x38>)
 8007734:	4299      	cmp	r1, r3
 8007736:	d002      	beq.n	800773e <cleanup_stdio+0x1e>
 8007738:	4620      	mov	r0, r4
 800773a:	f000 fa77 	bl	8007c2c <_fflush_r>
 800773e:	68e1      	ldr	r1, [r4, #12]
 8007740:	4b06      	ldr	r3, [pc, #24]	@ (800775c <cleanup_stdio+0x3c>)
 8007742:	4299      	cmp	r1, r3
 8007744:	d004      	beq.n	8007750 <cleanup_stdio+0x30>
 8007746:	4620      	mov	r0, r4
 8007748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800774c:	f000 ba6e 	b.w	8007c2c <_fflush_r>
 8007750:	bd10      	pop	{r4, pc}
 8007752:	bf00      	nop
 8007754:	20001e68 	.word	0x20001e68
 8007758:	20001ed0 	.word	0x20001ed0
 800775c:	20001f38 	.word	0x20001f38

08007760 <global_stdio_init.part.0>:
 8007760:	b510      	push	{r4, lr}
 8007762:	4b0b      	ldr	r3, [pc, #44]	@ (8007790 <global_stdio_init.part.0+0x30>)
 8007764:	4c0b      	ldr	r4, [pc, #44]	@ (8007794 <global_stdio_init.part.0+0x34>)
 8007766:	4a0c      	ldr	r2, [pc, #48]	@ (8007798 <global_stdio_init.part.0+0x38>)
 8007768:	601a      	str	r2, [r3, #0]
 800776a:	4620      	mov	r0, r4
 800776c:	2200      	movs	r2, #0
 800776e:	2104      	movs	r1, #4
 8007770:	f7ff ff94 	bl	800769c <std>
 8007774:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007778:	2201      	movs	r2, #1
 800777a:	2109      	movs	r1, #9
 800777c:	f7ff ff8e 	bl	800769c <std>
 8007780:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007784:	2202      	movs	r2, #2
 8007786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800778a:	2112      	movs	r1, #18
 800778c:	f7ff bf86 	b.w	800769c <std>
 8007790:	20001fa0 	.word	0x20001fa0
 8007794:	20001e68 	.word	0x20001e68
 8007798:	08007709 	.word	0x08007709

0800779c <__sfp_lock_acquire>:
 800779c:	4801      	ldr	r0, [pc, #4]	@ (80077a4 <__sfp_lock_acquire+0x8>)
 800779e:	f000 b95a 	b.w	8007a56 <__retarget_lock_acquire_recursive>
 80077a2:	bf00      	nop
 80077a4:	20001fa9 	.word	0x20001fa9

080077a8 <__sfp_lock_release>:
 80077a8:	4801      	ldr	r0, [pc, #4]	@ (80077b0 <__sfp_lock_release+0x8>)
 80077aa:	f000 b955 	b.w	8007a58 <__retarget_lock_release_recursive>
 80077ae:	bf00      	nop
 80077b0:	20001fa9 	.word	0x20001fa9

080077b4 <__sinit>:
 80077b4:	b510      	push	{r4, lr}
 80077b6:	4604      	mov	r4, r0
 80077b8:	f7ff fff0 	bl	800779c <__sfp_lock_acquire>
 80077bc:	6a23      	ldr	r3, [r4, #32]
 80077be:	b11b      	cbz	r3, 80077c8 <__sinit+0x14>
 80077c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077c4:	f7ff bff0 	b.w	80077a8 <__sfp_lock_release>
 80077c8:	4b04      	ldr	r3, [pc, #16]	@ (80077dc <__sinit+0x28>)
 80077ca:	6223      	str	r3, [r4, #32]
 80077cc:	4b04      	ldr	r3, [pc, #16]	@ (80077e0 <__sinit+0x2c>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1f5      	bne.n	80077c0 <__sinit+0xc>
 80077d4:	f7ff ffc4 	bl	8007760 <global_stdio_init.part.0>
 80077d8:	e7f2      	b.n	80077c0 <__sinit+0xc>
 80077da:	bf00      	nop
 80077dc:	08007721 	.word	0x08007721
 80077e0:	20001fa0 	.word	0x20001fa0

080077e4 <_fwalk_sglue>:
 80077e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077e8:	4607      	mov	r7, r0
 80077ea:	4688      	mov	r8, r1
 80077ec:	4614      	mov	r4, r2
 80077ee:	2600      	movs	r6, #0
 80077f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077f4:	f1b9 0901 	subs.w	r9, r9, #1
 80077f8:	d505      	bpl.n	8007806 <_fwalk_sglue+0x22>
 80077fa:	6824      	ldr	r4, [r4, #0]
 80077fc:	2c00      	cmp	r4, #0
 80077fe:	d1f7      	bne.n	80077f0 <_fwalk_sglue+0xc>
 8007800:	4630      	mov	r0, r6
 8007802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007806:	89ab      	ldrh	r3, [r5, #12]
 8007808:	2b01      	cmp	r3, #1
 800780a:	d907      	bls.n	800781c <_fwalk_sglue+0x38>
 800780c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007810:	3301      	adds	r3, #1
 8007812:	d003      	beq.n	800781c <_fwalk_sglue+0x38>
 8007814:	4629      	mov	r1, r5
 8007816:	4638      	mov	r0, r7
 8007818:	47c0      	blx	r8
 800781a:	4306      	orrs	r6, r0
 800781c:	3568      	adds	r5, #104	@ 0x68
 800781e:	e7e9      	b.n	80077f4 <_fwalk_sglue+0x10>

08007820 <__sread>:
 8007820:	b510      	push	{r4, lr}
 8007822:	460c      	mov	r4, r1
 8007824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007828:	f000 f8c6 	bl	80079b8 <_read_r>
 800782c:	2800      	cmp	r0, #0
 800782e:	bfab      	itete	ge
 8007830:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007832:	89a3      	ldrhlt	r3, [r4, #12]
 8007834:	181b      	addge	r3, r3, r0
 8007836:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800783a:	bfac      	ite	ge
 800783c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800783e:	81a3      	strhlt	r3, [r4, #12]
 8007840:	bd10      	pop	{r4, pc}

08007842 <__swrite>:
 8007842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007846:	461f      	mov	r7, r3
 8007848:	898b      	ldrh	r3, [r1, #12]
 800784a:	05db      	lsls	r3, r3, #23
 800784c:	4605      	mov	r5, r0
 800784e:	460c      	mov	r4, r1
 8007850:	4616      	mov	r6, r2
 8007852:	d505      	bpl.n	8007860 <__swrite+0x1e>
 8007854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007858:	2302      	movs	r3, #2
 800785a:	2200      	movs	r2, #0
 800785c:	f000 f89a 	bl	8007994 <_lseek_r>
 8007860:	89a3      	ldrh	r3, [r4, #12]
 8007862:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007866:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800786a:	81a3      	strh	r3, [r4, #12]
 800786c:	4632      	mov	r2, r6
 800786e:	463b      	mov	r3, r7
 8007870:	4628      	mov	r0, r5
 8007872:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007876:	f000 b8b1 	b.w	80079dc <_write_r>

0800787a <__sseek>:
 800787a:	b510      	push	{r4, lr}
 800787c:	460c      	mov	r4, r1
 800787e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007882:	f000 f887 	bl	8007994 <_lseek_r>
 8007886:	1c43      	adds	r3, r0, #1
 8007888:	89a3      	ldrh	r3, [r4, #12]
 800788a:	bf15      	itete	ne
 800788c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800788e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007892:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007896:	81a3      	strheq	r3, [r4, #12]
 8007898:	bf18      	it	ne
 800789a:	81a3      	strhne	r3, [r4, #12]
 800789c:	bd10      	pop	{r4, pc}

0800789e <__sclose>:
 800789e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078a2:	f000 b809 	b.w	80078b8 <_close_r>

080078a6 <memset>:
 80078a6:	4402      	add	r2, r0
 80078a8:	4603      	mov	r3, r0
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d100      	bne.n	80078b0 <memset+0xa>
 80078ae:	4770      	bx	lr
 80078b0:	f803 1b01 	strb.w	r1, [r3], #1
 80078b4:	e7f9      	b.n	80078aa <memset+0x4>
	...

080078b8 <_close_r>:
 80078b8:	b538      	push	{r3, r4, r5, lr}
 80078ba:	4d06      	ldr	r5, [pc, #24]	@ (80078d4 <_close_r+0x1c>)
 80078bc:	2300      	movs	r3, #0
 80078be:	4604      	mov	r4, r0
 80078c0:	4608      	mov	r0, r1
 80078c2:	602b      	str	r3, [r5, #0]
 80078c4:	f000 faac 	bl	8007e20 <_close>
 80078c8:	1c43      	adds	r3, r0, #1
 80078ca:	d102      	bne.n	80078d2 <_close_r+0x1a>
 80078cc:	682b      	ldr	r3, [r5, #0]
 80078ce:	b103      	cbz	r3, 80078d2 <_close_r+0x1a>
 80078d0:	6023      	str	r3, [r4, #0]
 80078d2:	bd38      	pop	{r3, r4, r5, pc}
 80078d4:	20001fa4 	.word	0x20001fa4

080078d8 <_reclaim_reent>:
 80078d8:	4b2d      	ldr	r3, [pc, #180]	@ (8007990 <_reclaim_reent+0xb8>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4283      	cmp	r3, r0
 80078de:	b570      	push	{r4, r5, r6, lr}
 80078e0:	4604      	mov	r4, r0
 80078e2:	d053      	beq.n	800798c <_reclaim_reent+0xb4>
 80078e4:	69c3      	ldr	r3, [r0, #28]
 80078e6:	b31b      	cbz	r3, 8007930 <_reclaim_reent+0x58>
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	b163      	cbz	r3, 8007906 <_reclaim_reent+0x2e>
 80078ec:	2500      	movs	r5, #0
 80078ee:	69e3      	ldr	r3, [r4, #28]
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	5959      	ldr	r1, [r3, r5]
 80078f4:	b9b1      	cbnz	r1, 8007924 <_reclaim_reent+0x4c>
 80078f6:	3504      	adds	r5, #4
 80078f8:	2d80      	cmp	r5, #128	@ 0x80
 80078fa:	d1f8      	bne.n	80078ee <_reclaim_reent+0x16>
 80078fc:	69e3      	ldr	r3, [r4, #28]
 80078fe:	4620      	mov	r0, r4
 8007900:	68d9      	ldr	r1, [r3, #12]
 8007902:	f000 f8b9 	bl	8007a78 <_free_r>
 8007906:	69e3      	ldr	r3, [r4, #28]
 8007908:	6819      	ldr	r1, [r3, #0]
 800790a:	b111      	cbz	r1, 8007912 <_reclaim_reent+0x3a>
 800790c:	4620      	mov	r0, r4
 800790e:	f000 f8b3 	bl	8007a78 <_free_r>
 8007912:	69e3      	ldr	r3, [r4, #28]
 8007914:	689d      	ldr	r5, [r3, #8]
 8007916:	b15d      	cbz	r5, 8007930 <_reclaim_reent+0x58>
 8007918:	4629      	mov	r1, r5
 800791a:	4620      	mov	r0, r4
 800791c:	682d      	ldr	r5, [r5, #0]
 800791e:	f000 f8ab 	bl	8007a78 <_free_r>
 8007922:	e7f8      	b.n	8007916 <_reclaim_reent+0x3e>
 8007924:	680e      	ldr	r6, [r1, #0]
 8007926:	4620      	mov	r0, r4
 8007928:	f000 f8a6 	bl	8007a78 <_free_r>
 800792c:	4631      	mov	r1, r6
 800792e:	e7e1      	b.n	80078f4 <_reclaim_reent+0x1c>
 8007930:	6961      	ldr	r1, [r4, #20]
 8007932:	b111      	cbz	r1, 800793a <_reclaim_reent+0x62>
 8007934:	4620      	mov	r0, r4
 8007936:	f000 f89f 	bl	8007a78 <_free_r>
 800793a:	69e1      	ldr	r1, [r4, #28]
 800793c:	b111      	cbz	r1, 8007944 <_reclaim_reent+0x6c>
 800793e:	4620      	mov	r0, r4
 8007940:	f000 f89a 	bl	8007a78 <_free_r>
 8007944:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007946:	b111      	cbz	r1, 800794e <_reclaim_reent+0x76>
 8007948:	4620      	mov	r0, r4
 800794a:	f000 f895 	bl	8007a78 <_free_r>
 800794e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007950:	b111      	cbz	r1, 8007958 <_reclaim_reent+0x80>
 8007952:	4620      	mov	r0, r4
 8007954:	f000 f890 	bl	8007a78 <_free_r>
 8007958:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800795a:	b111      	cbz	r1, 8007962 <_reclaim_reent+0x8a>
 800795c:	4620      	mov	r0, r4
 800795e:	f000 f88b 	bl	8007a78 <_free_r>
 8007962:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007964:	b111      	cbz	r1, 800796c <_reclaim_reent+0x94>
 8007966:	4620      	mov	r0, r4
 8007968:	f000 f886 	bl	8007a78 <_free_r>
 800796c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800796e:	b111      	cbz	r1, 8007976 <_reclaim_reent+0x9e>
 8007970:	4620      	mov	r0, r4
 8007972:	f000 f881 	bl	8007a78 <_free_r>
 8007976:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007978:	b111      	cbz	r1, 8007980 <_reclaim_reent+0xa8>
 800797a:	4620      	mov	r0, r4
 800797c:	f000 f87c 	bl	8007a78 <_free_r>
 8007980:	6a23      	ldr	r3, [r4, #32]
 8007982:	b11b      	cbz	r3, 800798c <_reclaim_reent+0xb4>
 8007984:	4620      	mov	r0, r4
 8007986:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800798a:	4718      	bx	r3
 800798c:	bd70      	pop	{r4, r5, r6, pc}
 800798e:	bf00      	nop
 8007990:	20000048 	.word	0x20000048

08007994 <_lseek_r>:
 8007994:	b538      	push	{r3, r4, r5, lr}
 8007996:	4d07      	ldr	r5, [pc, #28]	@ (80079b4 <_lseek_r+0x20>)
 8007998:	4604      	mov	r4, r0
 800799a:	4608      	mov	r0, r1
 800799c:	4611      	mov	r1, r2
 800799e:	2200      	movs	r2, #0
 80079a0:	602a      	str	r2, [r5, #0]
 80079a2:	461a      	mov	r2, r3
 80079a4:	f000 f9fd 	bl	8007da2 <_lseek>
 80079a8:	1c43      	adds	r3, r0, #1
 80079aa:	d102      	bne.n	80079b2 <_lseek_r+0x1e>
 80079ac:	682b      	ldr	r3, [r5, #0]
 80079ae:	b103      	cbz	r3, 80079b2 <_lseek_r+0x1e>
 80079b0:	6023      	str	r3, [r4, #0]
 80079b2:	bd38      	pop	{r3, r4, r5, pc}
 80079b4:	20001fa4 	.word	0x20001fa4

080079b8 <_read_r>:
 80079b8:	b538      	push	{r3, r4, r5, lr}
 80079ba:	4d07      	ldr	r5, [pc, #28]	@ (80079d8 <_read_r+0x20>)
 80079bc:	4604      	mov	r4, r0
 80079be:	4608      	mov	r0, r1
 80079c0:	4611      	mov	r1, r2
 80079c2:	2200      	movs	r2, #0
 80079c4:	602a      	str	r2, [r5, #0]
 80079c6:	461a      	mov	r2, r3
 80079c8:	f000 f995 	bl	8007cf6 <_read>
 80079cc:	1c43      	adds	r3, r0, #1
 80079ce:	d102      	bne.n	80079d6 <_read_r+0x1e>
 80079d0:	682b      	ldr	r3, [r5, #0]
 80079d2:	b103      	cbz	r3, 80079d6 <_read_r+0x1e>
 80079d4:	6023      	str	r3, [r4, #0]
 80079d6:	bd38      	pop	{r3, r4, r5, pc}
 80079d8:	20001fa4 	.word	0x20001fa4

080079dc <_write_r>:
 80079dc:	b538      	push	{r3, r4, r5, lr}
 80079de:	4d07      	ldr	r5, [pc, #28]	@ (80079fc <_write_r+0x20>)
 80079e0:	4604      	mov	r4, r0
 80079e2:	4608      	mov	r0, r1
 80079e4:	4611      	mov	r1, r2
 80079e6:	2200      	movs	r2, #0
 80079e8:	602a      	str	r2, [r5, #0]
 80079ea:	461a      	mov	r2, r3
 80079ec:	f000 f9eb 	bl	8007dc6 <_write>
 80079f0:	1c43      	adds	r3, r0, #1
 80079f2:	d102      	bne.n	80079fa <_write_r+0x1e>
 80079f4:	682b      	ldr	r3, [r5, #0]
 80079f6:	b103      	cbz	r3, 80079fa <_write_r+0x1e>
 80079f8:	6023      	str	r3, [r4, #0]
 80079fa:	bd38      	pop	{r3, r4, r5, pc}
 80079fc:	20001fa4 	.word	0x20001fa4

08007a00 <__errno>:
 8007a00:	4b01      	ldr	r3, [pc, #4]	@ (8007a08 <__errno+0x8>)
 8007a02:	6818      	ldr	r0, [r3, #0]
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop
 8007a08:	20000048 	.word	0x20000048

08007a0c <__libc_init_array>:
 8007a0c:	b570      	push	{r4, r5, r6, lr}
 8007a0e:	4d0d      	ldr	r5, [pc, #52]	@ (8007a44 <__libc_init_array+0x38>)
 8007a10:	4c0d      	ldr	r4, [pc, #52]	@ (8007a48 <__libc_init_array+0x3c>)
 8007a12:	1b64      	subs	r4, r4, r5
 8007a14:	10a4      	asrs	r4, r4, #2
 8007a16:	2600      	movs	r6, #0
 8007a18:	42a6      	cmp	r6, r4
 8007a1a:	d109      	bne.n	8007a30 <__libc_init_array+0x24>
 8007a1c:	4d0b      	ldr	r5, [pc, #44]	@ (8007a4c <__libc_init_array+0x40>)
 8007a1e:	4c0c      	ldr	r4, [pc, #48]	@ (8007a50 <__libc_init_array+0x44>)
 8007a20:	f000 fb9c 	bl	800815c <_init>
 8007a24:	1b64      	subs	r4, r4, r5
 8007a26:	10a4      	asrs	r4, r4, #2
 8007a28:	2600      	movs	r6, #0
 8007a2a:	42a6      	cmp	r6, r4
 8007a2c:	d105      	bne.n	8007a3a <__libc_init_array+0x2e>
 8007a2e:	bd70      	pop	{r4, r5, r6, pc}
 8007a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a34:	4798      	blx	r3
 8007a36:	3601      	adds	r6, #1
 8007a38:	e7ee      	b.n	8007a18 <__libc_init_array+0xc>
 8007a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a3e:	4798      	blx	r3
 8007a40:	3601      	adds	r6, #1
 8007a42:	e7f2      	b.n	8007a2a <__libc_init_array+0x1e>
 8007a44:	0800847c 	.word	0x0800847c
 8007a48:	0800847c 	.word	0x0800847c
 8007a4c:	0800847c 	.word	0x0800847c
 8007a50:	08008480 	.word	0x08008480

08007a54 <__retarget_lock_init_recursive>:
 8007a54:	4770      	bx	lr

08007a56 <__retarget_lock_acquire_recursive>:
 8007a56:	4770      	bx	lr

08007a58 <__retarget_lock_release_recursive>:
 8007a58:	4770      	bx	lr

08007a5a <memcpy>:
 8007a5a:	440a      	add	r2, r1
 8007a5c:	4291      	cmp	r1, r2
 8007a5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a62:	d100      	bne.n	8007a66 <memcpy+0xc>
 8007a64:	4770      	bx	lr
 8007a66:	b510      	push	{r4, lr}
 8007a68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a70:	4291      	cmp	r1, r2
 8007a72:	d1f9      	bne.n	8007a68 <memcpy+0xe>
 8007a74:	bd10      	pop	{r4, pc}
	...

08007a78 <_free_r>:
 8007a78:	b538      	push	{r3, r4, r5, lr}
 8007a7a:	4605      	mov	r5, r0
 8007a7c:	2900      	cmp	r1, #0
 8007a7e:	d041      	beq.n	8007b04 <_free_r+0x8c>
 8007a80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a84:	1f0c      	subs	r4, r1, #4
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	bfb8      	it	lt
 8007a8a:	18e4      	addlt	r4, r4, r3
 8007a8c:	f000 f83e 	bl	8007b0c <__malloc_lock>
 8007a90:	4a1d      	ldr	r2, [pc, #116]	@ (8007b08 <_free_r+0x90>)
 8007a92:	6813      	ldr	r3, [r2, #0]
 8007a94:	b933      	cbnz	r3, 8007aa4 <_free_r+0x2c>
 8007a96:	6063      	str	r3, [r4, #4]
 8007a98:	6014      	str	r4, [r2, #0]
 8007a9a:	4628      	mov	r0, r5
 8007a9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007aa0:	f000 b83a 	b.w	8007b18 <__malloc_unlock>
 8007aa4:	42a3      	cmp	r3, r4
 8007aa6:	d908      	bls.n	8007aba <_free_r+0x42>
 8007aa8:	6820      	ldr	r0, [r4, #0]
 8007aaa:	1821      	adds	r1, r4, r0
 8007aac:	428b      	cmp	r3, r1
 8007aae:	bf01      	itttt	eq
 8007ab0:	6819      	ldreq	r1, [r3, #0]
 8007ab2:	685b      	ldreq	r3, [r3, #4]
 8007ab4:	1809      	addeq	r1, r1, r0
 8007ab6:	6021      	streq	r1, [r4, #0]
 8007ab8:	e7ed      	b.n	8007a96 <_free_r+0x1e>
 8007aba:	461a      	mov	r2, r3
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	b10b      	cbz	r3, 8007ac4 <_free_r+0x4c>
 8007ac0:	42a3      	cmp	r3, r4
 8007ac2:	d9fa      	bls.n	8007aba <_free_r+0x42>
 8007ac4:	6811      	ldr	r1, [r2, #0]
 8007ac6:	1850      	adds	r0, r2, r1
 8007ac8:	42a0      	cmp	r0, r4
 8007aca:	d10b      	bne.n	8007ae4 <_free_r+0x6c>
 8007acc:	6820      	ldr	r0, [r4, #0]
 8007ace:	4401      	add	r1, r0
 8007ad0:	1850      	adds	r0, r2, r1
 8007ad2:	4283      	cmp	r3, r0
 8007ad4:	6011      	str	r1, [r2, #0]
 8007ad6:	d1e0      	bne.n	8007a9a <_free_r+0x22>
 8007ad8:	6818      	ldr	r0, [r3, #0]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	6053      	str	r3, [r2, #4]
 8007ade:	4408      	add	r0, r1
 8007ae0:	6010      	str	r0, [r2, #0]
 8007ae2:	e7da      	b.n	8007a9a <_free_r+0x22>
 8007ae4:	d902      	bls.n	8007aec <_free_r+0x74>
 8007ae6:	230c      	movs	r3, #12
 8007ae8:	602b      	str	r3, [r5, #0]
 8007aea:	e7d6      	b.n	8007a9a <_free_r+0x22>
 8007aec:	6820      	ldr	r0, [r4, #0]
 8007aee:	1821      	adds	r1, r4, r0
 8007af0:	428b      	cmp	r3, r1
 8007af2:	bf04      	itt	eq
 8007af4:	6819      	ldreq	r1, [r3, #0]
 8007af6:	685b      	ldreq	r3, [r3, #4]
 8007af8:	6063      	str	r3, [r4, #4]
 8007afa:	bf04      	itt	eq
 8007afc:	1809      	addeq	r1, r1, r0
 8007afe:	6021      	streq	r1, [r4, #0]
 8007b00:	6054      	str	r4, [r2, #4]
 8007b02:	e7ca      	b.n	8007a9a <_free_r+0x22>
 8007b04:	bd38      	pop	{r3, r4, r5, pc}
 8007b06:	bf00      	nop
 8007b08:	20001fac 	.word	0x20001fac

08007b0c <__malloc_lock>:
 8007b0c:	4801      	ldr	r0, [pc, #4]	@ (8007b14 <__malloc_lock+0x8>)
 8007b0e:	f7ff bfa2 	b.w	8007a56 <__retarget_lock_acquire_recursive>
 8007b12:	bf00      	nop
 8007b14:	20001fa8 	.word	0x20001fa8

08007b18 <__malloc_unlock>:
 8007b18:	4801      	ldr	r0, [pc, #4]	@ (8007b20 <__malloc_unlock+0x8>)
 8007b1a:	f7ff bf9d 	b.w	8007a58 <__retarget_lock_release_recursive>
 8007b1e:	bf00      	nop
 8007b20:	20001fa8 	.word	0x20001fa8

08007b24 <__sflush_r>:
 8007b24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b2c:	0716      	lsls	r6, r2, #28
 8007b2e:	4605      	mov	r5, r0
 8007b30:	460c      	mov	r4, r1
 8007b32:	d454      	bmi.n	8007bde <__sflush_r+0xba>
 8007b34:	684b      	ldr	r3, [r1, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	dc02      	bgt.n	8007b40 <__sflush_r+0x1c>
 8007b3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	dd48      	ble.n	8007bd2 <__sflush_r+0xae>
 8007b40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b42:	2e00      	cmp	r6, #0
 8007b44:	d045      	beq.n	8007bd2 <__sflush_r+0xae>
 8007b46:	2300      	movs	r3, #0
 8007b48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007b4c:	682f      	ldr	r7, [r5, #0]
 8007b4e:	6a21      	ldr	r1, [r4, #32]
 8007b50:	602b      	str	r3, [r5, #0]
 8007b52:	d030      	beq.n	8007bb6 <__sflush_r+0x92>
 8007b54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007b56:	89a3      	ldrh	r3, [r4, #12]
 8007b58:	0759      	lsls	r1, r3, #29
 8007b5a:	d505      	bpl.n	8007b68 <__sflush_r+0x44>
 8007b5c:	6863      	ldr	r3, [r4, #4]
 8007b5e:	1ad2      	subs	r2, r2, r3
 8007b60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007b62:	b10b      	cbz	r3, 8007b68 <__sflush_r+0x44>
 8007b64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007b66:	1ad2      	subs	r2, r2, r3
 8007b68:	2300      	movs	r3, #0
 8007b6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b6c:	6a21      	ldr	r1, [r4, #32]
 8007b6e:	4628      	mov	r0, r5
 8007b70:	47b0      	blx	r6
 8007b72:	1c43      	adds	r3, r0, #1
 8007b74:	89a3      	ldrh	r3, [r4, #12]
 8007b76:	d106      	bne.n	8007b86 <__sflush_r+0x62>
 8007b78:	6829      	ldr	r1, [r5, #0]
 8007b7a:	291d      	cmp	r1, #29
 8007b7c:	d82b      	bhi.n	8007bd6 <__sflush_r+0xb2>
 8007b7e:	4a2a      	ldr	r2, [pc, #168]	@ (8007c28 <__sflush_r+0x104>)
 8007b80:	40ca      	lsrs	r2, r1
 8007b82:	07d6      	lsls	r6, r2, #31
 8007b84:	d527      	bpl.n	8007bd6 <__sflush_r+0xb2>
 8007b86:	2200      	movs	r2, #0
 8007b88:	6062      	str	r2, [r4, #4]
 8007b8a:	04d9      	lsls	r1, r3, #19
 8007b8c:	6922      	ldr	r2, [r4, #16]
 8007b8e:	6022      	str	r2, [r4, #0]
 8007b90:	d504      	bpl.n	8007b9c <__sflush_r+0x78>
 8007b92:	1c42      	adds	r2, r0, #1
 8007b94:	d101      	bne.n	8007b9a <__sflush_r+0x76>
 8007b96:	682b      	ldr	r3, [r5, #0]
 8007b98:	b903      	cbnz	r3, 8007b9c <__sflush_r+0x78>
 8007b9a:	6560      	str	r0, [r4, #84]	@ 0x54
 8007b9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b9e:	602f      	str	r7, [r5, #0]
 8007ba0:	b1b9      	cbz	r1, 8007bd2 <__sflush_r+0xae>
 8007ba2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ba6:	4299      	cmp	r1, r3
 8007ba8:	d002      	beq.n	8007bb0 <__sflush_r+0x8c>
 8007baa:	4628      	mov	r0, r5
 8007bac:	f7ff ff64 	bl	8007a78 <_free_r>
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	6363      	str	r3, [r4, #52]	@ 0x34
 8007bb4:	e00d      	b.n	8007bd2 <__sflush_r+0xae>
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	4628      	mov	r0, r5
 8007bba:	47b0      	blx	r6
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	1c50      	adds	r0, r2, #1
 8007bc0:	d1c9      	bne.n	8007b56 <__sflush_r+0x32>
 8007bc2:	682b      	ldr	r3, [r5, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d0c6      	beq.n	8007b56 <__sflush_r+0x32>
 8007bc8:	2b1d      	cmp	r3, #29
 8007bca:	d001      	beq.n	8007bd0 <__sflush_r+0xac>
 8007bcc:	2b16      	cmp	r3, #22
 8007bce:	d11e      	bne.n	8007c0e <__sflush_r+0xea>
 8007bd0:	602f      	str	r7, [r5, #0]
 8007bd2:	2000      	movs	r0, #0
 8007bd4:	e022      	b.n	8007c1c <__sflush_r+0xf8>
 8007bd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bda:	b21b      	sxth	r3, r3
 8007bdc:	e01b      	b.n	8007c16 <__sflush_r+0xf2>
 8007bde:	690f      	ldr	r7, [r1, #16]
 8007be0:	2f00      	cmp	r7, #0
 8007be2:	d0f6      	beq.n	8007bd2 <__sflush_r+0xae>
 8007be4:	0793      	lsls	r3, r2, #30
 8007be6:	680e      	ldr	r6, [r1, #0]
 8007be8:	bf08      	it	eq
 8007bea:	694b      	ldreq	r3, [r1, #20]
 8007bec:	600f      	str	r7, [r1, #0]
 8007bee:	bf18      	it	ne
 8007bf0:	2300      	movne	r3, #0
 8007bf2:	eba6 0807 	sub.w	r8, r6, r7
 8007bf6:	608b      	str	r3, [r1, #8]
 8007bf8:	f1b8 0f00 	cmp.w	r8, #0
 8007bfc:	dde9      	ble.n	8007bd2 <__sflush_r+0xae>
 8007bfe:	6a21      	ldr	r1, [r4, #32]
 8007c00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007c02:	4643      	mov	r3, r8
 8007c04:	463a      	mov	r2, r7
 8007c06:	4628      	mov	r0, r5
 8007c08:	47b0      	blx	r6
 8007c0a:	2800      	cmp	r0, #0
 8007c0c:	dc08      	bgt.n	8007c20 <__sflush_r+0xfc>
 8007c0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c16:	81a3      	strh	r3, [r4, #12]
 8007c18:	f04f 30ff 	mov.w	r0, #4294967295
 8007c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c20:	4407      	add	r7, r0
 8007c22:	eba8 0800 	sub.w	r8, r8, r0
 8007c26:	e7e7      	b.n	8007bf8 <__sflush_r+0xd4>
 8007c28:	20400001 	.word	0x20400001

08007c2c <_fflush_r>:
 8007c2c:	b538      	push	{r3, r4, r5, lr}
 8007c2e:	690b      	ldr	r3, [r1, #16]
 8007c30:	4605      	mov	r5, r0
 8007c32:	460c      	mov	r4, r1
 8007c34:	b913      	cbnz	r3, 8007c3c <_fflush_r+0x10>
 8007c36:	2500      	movs	r5, #0
 8007c38:	4628      	mov	r0, r5
 8007c3a:	bd38      	pop	{r3, r4, r5, pc}
 8007c3c:	b118      	cbz	r0, 8007c46 <_fflush_r+0x1a>
 8007c3e:	6a03      	ldr	r3, [r0, #32]
 8007c40:	b90b      	cbnz	r3, 8007c46 <_fflush_r+0x1a>
 8007c42:	f7ff fdb7 	bl	80077b4 <__sinit>
 8007c46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d0f3      	beq.n	8007c36 <_fflush_r+0xa>
 8007c4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007c50:	07d0      	lsls	r0, r2, #31
 8007c52:	d404      	bmi.n	8007c5e <_fflush_r+0x32>
 8007c54:	0599      	lsls	r1, r3, #22
 8007c56:	d402      	bmi.n	8007c5e <_fflush_r+0x32>
 8007c58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c5a:	f7ff fefc 	bl	8007a56 <__retarget_lock_acquire_recursive>
 8007c5e:	4628      	mov	r0, r5
 8007c60:	4621      	mov	r1, r4
 8007c62:	f7ff ff5f 	bl	8007b24 <__sflush_r>
 8007c66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c68:	07da      	lsls	r2, r3, #31
 8007c6a:	4605      	mov	r5, r0
 8007c6c:	d4e4      	bmi.n	8007c38 <_fflush_r+0xc>
 8007c6e:	89a3      	ldrh	r3, [r4, #12]
 8007c70:	059b      	lsls	r3, r3, #22
 8007c72:	d4e1      	bmi.n	8007c38 <_fflush_r+0xc>
 8007c74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c76:	f7ff feef 	bl	8007a58 <__retarget_lock_release_recursive>
 8007c7a:	e7dd      	b.n	8007c38 <_fflush_r+0xc>

08007c7c <findslot>:
 8007c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8007ca8 <findslot+0x2c>)
 8007c7e:	b510      	push	{r4, lr}
 8007c80:	4604      	mov	r4, r0
 8007c82:	6818      	ldr	r0, [r3, #0]
 8007c84:	b118      	cbz	r0, 8007c8e <findslot+0x12>
 8007c86:	6a03      	ldr	r3, [r0, #32]
 8007c88:	b90b      	cbnz	r3, 8007c8e <findslot+0x12>
 8007c8a:	f7ff fd93 	bl	80077b4 <__sinit>
 8007c8e:	2c13      	cmp	r4, #19
 8007c90:	d807      	bhi.n	8007ca2 <findslot+0x26>
 8007c92:	4806      	ldr	r0, [pc, #24]	@ (8007cac <findslot+0x30>)
 8007c94:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8007c98:	3201      	adds	r2, #1
 8007c9a:	d002      	beq.n	8007ca2 <findslot+0x26>
 8007c9c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8007ca0:	bd10      	pop	{r4, pc}
 8007ca2:	2000      	movs	r0, #0
 8007ca4:	e7fc      	b.n	8007ca0 <findslot+0x24>
 8007ca6:	bf00      	nop
 8007ca8:	20000048 	.word	0x20000048
 8007cac:	20001fbc 	.word	0x20001fbc

08007cb0 <error>:
 8007cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cb2:	4604      	mov	r4, r0
 8007cb4:	f7ff fea4 	bl	8007a00 <__errno>
 8007cb8:	2613      	movs	r6, #19
 8007cba:	4605      	mov	r5, r0
 8007cbc:	2700      	movs	r7, #0
 8007cbe:	4630      	mov	r0, r6
 8007cc0:	4639      	mov	r1, r7
 8007cc2:	beab      	bkpt	0x00ab
 8007cc4:	4606      	mov	r6, r0
 8007cc6:	602e      	str	r6, [r5, #0]
 8007cc8:	4620      	mov	r0, r4
 8007cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007ccc <checkerror>:
 8007ccc:	1c43      	adds	r3, r0, #1
 8007cce:	d101      	bne.n	8007cd4 <checkerror+0x8>
 8007cd0:	f7ff bfee 	b.w	8007cb0 <error>
 8007cd4:	4770      	bx	lr

08007cd6 <_swiread>:
 8007cd6:	b530      	push	{r4, r5, lr}
 8007cd8:	b085      	sub	sp, #20
 8007cda:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8007cde:	9203      	str	r2, [sp, #12]
 8007ce0:	2406      	movs	r4, #6
 8007ce2:	ad01      	add	r5, sp, #4
 8007ce4:	4620      	mov	r0, r4
 8007ce6:	4629      	mov	r1, r5
 8007ce8:	beab      	bkpt	0x00ab
 8007cea:	4604      	mov	r4, r0
 8007cec:	4620      	mov	r0, r4
 8007cee:	f7ff ffed 	bl	8007ccc <checkerror>
 8007cf2:	b005      	add	sp, #20
 8007cf4:	bd30      	pop	{r4, r5, pc}

08007cf6 <_read>:
 8007cf6:	b570      	push	{r4, r5, r6, lr}
 8007cf8:	460e      	mov	r6, r1
 8007cfa:	4614      	mov	r4, r2
 8007cfc:	f7ff ffbe 	bl	8007c7c <findslot>
 8007d00:	4605      	mov	r5, r0
 8007d02:	b930      	cbnz	r0, 8007d12 <_read+0x1c>
 8007d04:	f7ff fe7c 	bl	8007a00 <__errno>
 8007d08:	2309      	movs	r3, #9
 8007d0a:	6003      	str	r3, [r0, #0]
 8007d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d10:	bd70      	pop	{r4, r5, r6, pc}
 8007d12:	6800      	ldr	r0, [r0, #0]
 8007d14:	4622      	mov	r2, r4
 8007d16:	4631      	mov	r1, r6
 8007d18:	f7ff ffdd 	bl	8007cd6 <_swiread>
 8007d1c:	1c43      	adds	r3, r0, #1
 8007d1e:	d0f5      	beq.n	8007d0c <_read+0x16>
 8007d20:	686b      	ldr	r3, [r5, #4]
 8007d22:	1a20      	subs	r0, r4, r0
 8007d24:	4403      	add	r3, r0
 8007d26:	606b      	str	r3, [r5, #4]
 8007d28:	e7f2      	b.n	8007d10 <_read+0x1a>

08007d2a <_swilseek>:
 8007d2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d2c:	460c      	mov	r4, r1
 8007d2e:	4616      	mov	r6, r2
 8007d30:	f7ff ffa4 	bl	8007c7c <findslot>
 8007d34:	4605      	mov	r5, r0
 8007d36:	b940      	cbnz	r0, 8007d4a <_swilseek+0x20>
 8007d38:	f7ff fe62 	bl	8007a00 <__errno>
 8007d3c:	2309      	movs	r3, #9
 8007d3e:	6003      	str	r3, [r0, #0]
 8007d40:	f04f 34ff 	mov.w	r4, #4294967295
 8007d44:	4620      	mov	r0, r4
 8007d46:	b003      	add	sp, #12
 8007d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d4a:	2e02      	cmp	r6, #2
 8007d4c:	d903      	bls.n	8007d56 <_swilseek+0x2c>
 8007d4e:	f7ff fe57 	bl	8007a00 <__errno>
 8007d52:	2316      	movs	r3, #22
 8007d54:	e7f3      	b.n	8007d3e <_swilseek+0x14>
 8007d56:	2e01      	cmp	r6, #1
 8007d58:	d112      	bne.n	8007d80 <_swilseek+0x56>
 8007d5a:	6843      	ldr	r3, [r0, #4]
 8007d5c:	18e4      	adds	r4, r4, r3
 8007d5e:	d4f6      	bmi.n	8007d4e <_swilseek+0x24>
 8007d60:	682b      	ldr	r3, [r5, #0]
 8007d62:	260a      	movs	r6, #10
 8007d64:	e9cd 3400 	strd	r3, r4, [sp]
 8007d68:	466f      	mov	r7, sp
 8007d6a:	4630      	mov	r0, r6
 8007d6c:	4639      	mov	r1, r7
 8007d6e:	beab      	bkpt	0x00ab
 8007d70:	4606      	mov	r6, r0
 8007d72:	4630      	mov	r0, r6
 8007d74:	f7ff ffaa 	bl	8007ccc <checkerror>
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	dbe1      	blt.n	8007d40 <_swilseek+0x16>
 8007d7c:	606c      	str	r4, [r5, #4]
 8007d7e:	e7e1      	b.n	8007d44 <_swilseek+0x1a>
 8007d80:	2e02      	cmp	r6, #2
 8007d82:	6803      	ldr	r3, [r0, #0]
 8007d84:	d1ec      	bne.n	8007d60 <_swilseek+0x36>
 8007d86:	9300      	str	r3, [sp, #0]
 8007d88:	260c      	movs	r6, #12
 8007d8a:	466f      	mov	r7, sp
 8007d8c:	4630      	mov	r0, r6
 8007d8e:	4639      	mov	r1, r7
 8007d90:	beab      	bkpt	0x00ab
 8007d92:	4606      	mov	r6, r0
 8007d94:	4630      	mov	r0, r6
 8007d96:	f7ff ff99 	bl	8007ccc <checkerror>
 8007d9a:	1c43      	adds	r3, r0, #1
 8007d9c:	d0d0      	beq.n	8007d40 <_swilseek+0x16>
 8007d9e:	4404      	add	r4, r0
 8007da0:	e7de      	b.n	8007d60 <_swilseek+0x36>

08007da2 <_lseek>:
 8007da2:	f7ff bfc2 	b.w	8007d2a <_swilseek>

08007da6 <_swiwrite>:
 8007da6:	b530      	push	{r4, r5, lr}
 8007da8:	b085      	sub	sp, #20
 8007daa:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8007dae:	9203      	str	r2, [sp, #12]
 8007db0:	2405      	movs	r4, #5
 8007db2:	ad01      	add	r5, sp, #4
 8007db4:	4620      	mov	r0, r4
 8007db6:	4629      	mov	r1, r5
 8007db8:	beab      	bkpt	0x00ab
 8007dba:	4604      	mov	r4, r0
 8007dbc:	4620      	mov	r0, r4
 8007dbe:	f7ff ff85 	bl	8007ccc <checkerror>
 8007dc2:	b005      	add	sp, #20
 8007dc4:	bd30      	pop	{r4, r5, pc}

08007dc6 <_write>:
 8007dc6:	b570      	push	{r4, r5, r6, lr}
 8007dc8:	460e      	mov	r6, r1
 8007dca:	4615      	mov	r5, r2
 8007dcc:	f7ff ff56 	bl	8007c7c <findslot>
 8007dd0:	4604      	mov	r4, r0
 8007dd2:	b930      	cbnz	r0, 8007de2 <_write+0x1c>
 8007dd4:	f7ff fe14 	bl	8007a00 <__errno>
 8007dd8:	2309      	movs	r3, #9
 8007dda:	6003      	str	r3, [r0, #0]
 8007ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8007de0:	bd70      	pop	{r4, r5, r6, pc}
 8007de2:	6800      	ldr	r0, [r0, #0]
 8007de4:	462a      	mov	r2, r5
 8007de6:	4631      	mov	r1, r6
 8007de8:	f7ff ffdd 	bl	8007da6 <_swiwrite>
 8007dec:	1e03      	subs	r3, r0, #0
 8007dee:	dbf5      	blt.n	8007ddc <_write+0x16>
 8007df0:	6862      	ldr	r2, [r4, #4]
 8007df2:	1ae8      	subs	r0, r5, r3
 8007df4:	4402      	add	r2, r0
 8007df6:	42ab      	cmp	r3, r5
 8007df8:	6062      	str	r2, [r4, #4]
 8007dfa:	d1f1      	bne.n	8007de0 <_write+0x1a>
 8007dfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007e00:	2000      	movs	r0, #0
 8007e02:	f7ff bf55 	b.w	8007cb0 <error>

08007e06 <_swiclose>:
 8007e06:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e08:	2402      	movs	r4, #2
 8007e0a:	9001      	str	r0, [sp, #4]
 8007e0c:	ad01      	add	r5, sp, #4
 8007e0e:	4620      	mov	r0, r4
 8007e10:	4629      	mov	r1, r5
 8007e12:	beab      	bkpt	0x00ab
 8007e14:	4604      	mov	r4, r0
 8007e16:	4620      	mov	r0, r4
 8007e18:	f7ff ff58 	bl	8007ccc <checkerror>
 8007e1c:	b003      	add	sp, #12
 8007e1e:	bd30      	pop	{r4, r5, pc}

08007e20 <_close>:
 8007e20:	b538      	push	{r3, r4, r5, lr}
 8007e22:	4605      	mov	r5, r0
 8007e24:	f7ff ff2a 	bl	8007c7c <findslot>
 8007e28:	4604      	mov	r4, r0
 8007e2a:	b930      	cbnz	r0, 8007e3a <_close+0x1a>
 8007e2c:	f7ff fde8 	bl	8007a00 <__errno>
 8007e30:	2309      	movs	r3, #9
 8007e32:	6003      	str	r3, [r0, #0]
 8007e34:	f04f 30ff 	mov.w	r0, #4294967295
 8007e38:	bd38      	pop	{r3, r4, r5, pc}
 8007e3a:	3d01      	subs	r5, #1
 8007e3c:	2d01      	cmp	r5, #1
 8007e3e:	d809      	bhi.n	8007e54 <_close+0x34>
 8007e40:	4b09      	ldr	r3, [pc, #36]	@ (8007e68 <_close+0x48>)
 8007e42:	689a      	ldr	r2, [r3, #8]
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d104      	bne.n	8007e54 <_close+0x34>
 8007e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e4e:	6003      	str	r3, [r0, #0]
 8007e50:	2000      	movs	r0, #0
 8007e52:	e7f1      	b.n	8007e38 <_close+0x18>
 8007e54:	6820      	ldr	r0, [r4, #0]
 8007e56:	f7ff ffd6 	bl	8007e06 <_swiclose>
 8007e5a:	2800      	cmp	r0, #0
 8007e5c:	d1ec      	bne.n	8007e38 <_close+0x18>
 8007e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e62:	6023      	str	r3, [r4, #0]
 8007e64:	e7e8      	b.n	8007e38 <_close+0x18>
 8007e66:	bf00      	nop
 8007e68:	20001fbc 	.word	0x20001fbc

08007e6c <_swistat>:
 8007e6c:	b570      	push	{r4, r5, r6, lr}
 8007e6e:	460c      	mov	r4, r1
 8007e70:	f7ff ff04 	bl	8007c7c <findslot>
 8007e74:	4605      	mov	r5, r0
 8007e76:	b930      	cbnz	r0, 8007e86 <_swistat+0x1a>
 8007e78:	f7ff fdc2 	bl	8007a00 <__errno>
 8007e7c:	2309      	movs	r3, #9
 8007e7e:	6003      	str	r3, [r0, #0]
 8007e80:	f04f 30ff 	mov.w	r0, #4294967295
 8007e84:	bd70      	pop	{r4, r5, r6, pc}
 8007e86:	6863      	ldr	r3, [r4, #4]
 8007e88:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007e8c:	6063      	str	r3, [r4, #4]
 8007e8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e92:	64a3      	str	r3, [r4, #72]	@ 0x48
 8007e94:	260c      	movs	r6, #12
 8007e96:	4630      	mov	r0, r6
 8007e98:	4629      	mov	r1, r5
 8007e9a:	beab      	bkpt	0x00ab
 8007e9c:	4605      	mov	r5, r0
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	f7ff ff14 	bl	8007ccc <checkerror>
 8007ea4:	1c43      	adds	r3, r0, #1
 8007ea6:	d0eb      	beq.n	8007e80 <_swistat+0x14>
 8007ea8:	6120      	str	r0, [r4, #16]
 8007eaa:	2000      	movs	r0, #0
 8007eac:	e7ea      	b.n	8007e84 <_swistat+0x18>

08007eae <_stat>:
 8007eae:	b538      	push	{r3, r4, r5, lr}
 8007eb0:	460d      	mov	r5, r1
 8007eb2:	4604      	mov	r4, r0
 8007eb4:	2258      	movs	r2, #88	@ 0x58
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	4628      	mov	r0, r5
 8007eba:	f7ff fcf4 	bl	80078a6 <memset>
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	f000 f811 	bl	8007ee8 <_swiopen>
 8007ec6:	1c43      	adds	r3, r0, #1
 8007ec8:	4604      	mov	r4, r0
 8007eca:	d00b      	beq.n	8007ee4 <_stat+0x36>
 8007ecc:	686b      	ldr	r3, [r5, #4]
 8007ece:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007ed2:	606b      	str	r3, [r5, #4]
 8007ed4:	4629      	mov	r1, r5
 8007ed6:	f7ff ffc9 	bl	8007e6c <_swistat>
 8007eda:	4605      	mov	r5, r0
 8007edc:	4620      	mov	r0, r4
 8007ede:	f7ff ff9f 	bl	8007e20 <_close>
 8007ee2:	462c      	mov	r4, r5
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	bd38      	pop	{r3, r4, r5, pc}

08007ee8 <_swiopen>:
 8007ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007eec:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 8007f98 <_swiopen+0xb0>
 8007ef0:	b096      	sub	sp, #88	@ 0x58
 8007ef2:	4607      	mov	r7, r0
 8007ef4:	460e      	mov	r6, r1
 8007ef6:	2400      	movs	r4, #0
 8007ef8:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 8007efc:	3301      	adds	r3, #1
 8007efe:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8007f02:	d032      	beq.n	8007f6a <_swiopen+0x82>
 8007f04:	3401      	adds	r4, #1
 8007f06:	2c14      	cmp	r4, #20
 8007f08:	d1f6      	bne.n	8007ef8 <_swiopen+0x10>
 8007f0a:	f7ff fd79 	bl	8007a00 <__errno>
 8007f0e:	2318      	movs	r3, #24
 8007f10:	e03a      	b.n	8007f88 <_swiopen+0xa0>
 8007f12:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8007f16:	f240 6301 	movw	r3, #1537	@ 0x601
 8007f1a:	07b2      	lsls	r2, r6, #30
 8007f1c:	bf48      	it	mi
 8007f1e:	f045 0502 	orrmi.w	r5, r5, #2
 8007f22:	421e      	tst	r6, r3
 8007f24:	bf18      	it	ne
 8007f26:	f045 0504 	orrne.w	r5, r5, #4
 8007f2a:	0733      	lsls	r3, r6, #28
 8007f2c:	bf48      	it	mi
 8007f2e:	f025 0504 	bicmi.w	r5, r5, #4
 8007f32:	4638      	mov	r0, r7
 8007f34:	bf48      	it	mi
 8007f36:	f045 0508 	orrmi.w	r5, r5, #8
 8007f3a:	9700      	str	r7, [sp, #0]
 8007f3c:	f7f8 f948 	bl	80001d0 <strlen>
 8007f40:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8007f44:	2501      	movs	r5, #1
 8007f46:	4628      	mov	r0, r5
 8007f48:	4651      	mov	r1, sl
 8007f4a:	beab      	bkpt	0x00ab
 8007f4c:	4605      	mov	r5, r0
 8007f4e:	2d00      	cmp	r5, #0
 8007f50:	db06      	blt.n	8007f60 <_swiopen+0x78>
 8007f52:	44c8      	add	r8, r9
 8007f54:	2300      	movs	r3, #0
 8007f56:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 8007f5a:	f8c8 3004 	str.w	r3, [r8, #4]
 8007f5e:	e016      	b.n	8007f8e <_swiopen+0xa6>
 8007f60:	4628      	mov	r0, r5
 8007f62:	f7ff fea5 	bl	8007cb0 <error>
 8007f66:	4604      	mov	r4, r0
 8007f68:	e011      	b.n	8007f8e <_swiopen+0xa6>
 8007f6a:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8007f6e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007f72:	46ea      	mov	sl, sp
 8007f74:	d1cd      	bne.n	8007f12 <_swiopen+0x2a>
 8007f76:	4651      	mov	r1, sl
 8007f78:	4638      	mov	r0, r7
 8007f7a:	f7ff ff98 	bl	8007eae <_stat>
 8007f7e:	3001      	adds	r0, #1
 8007f80:	d0c7      	beq.n	8007f12 <_swiopen+0x2a>
 8007f82:	f7ff fd3d 	bl	8007a00 <__errno>
 8007f86:	2311      	movs	r3, #17
 8007f88:	6003      	str	r3, [r0, #0]
 8007f8a:	f04f 34ff 	mov.w	r4, #4294967295
 8007f8e:	4620      	mov	r0, r4
 8007f90:	b016      	add	sp, #88	@ 0x58
 8007f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f96:	bf00      	nop
 8007f98:	20001fbc 	.word	0x20001fbc

08007f9c <_get_semihosting_exts>:
 8007f9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007fa0:	4606      	mov	r6, r0
 8007fa2:	460f      	mov	r7, r1
 8007fa4:	4829      	ldr	r0, [pc, #164]	@ (800804c <_get_semihosting_exts+0xb0>)
 8007fa6:	2100      	movs	r1, #0
 8007fa8:	4615      	mov	r5, r2
 8007faa:	f7ff ff9d 	bl	8007ee8 <_swiopen>
 8007fae:	462a      	mov	r2, r5
 8007fb0:	4604      	mov	r4, r0
 8007fb2:	2100      	movs	r1, #0
 8007fb4:	4630      	mov	r0, r6
 8007fb6:	f7ff fc76 	bl	80078a6 <memset>
 8007fba:	1c63      	adds	r3, r4, #1
 8007fbc:	d014      	beq.n	8007fe8 <_get_semihosting_exts+0x4c>
 8007fbe:	4620      	mov	r0, r4
 8007fc0:	f7ff fe5c 	bl	8007c7c <findslot>
 8007fc4:	f04f 080c 	mov.w	r8, #12
 8007fc8:	4681      	mov	r9, r0
 8007fca:	4640      	mov	r0, r8
 8007fcc:	4649      	mov	r1, r9
 8007fce:	beab      	bkpt	0x00ab
 8007fd0:	4680      	mov	r8, r0
 8007fd2:	4640      	mov	r0, r8
 8007fd4:	f7ff fe7a 	bl	8007ccc <checkerror>
 8007fd8:	2803      	cmp	r0, #3
 8007fda:	dd02      	ble.n	8007fe2 <_get_semihosting_exts+0x46>
 8007fdc:	1ec3      	subs	r3, r0, #3
 8007fde:	42ab      	cmp	r3, r5
 8007fe0:	dc07      	bgt.n	8007ff2 <_get_semihosting_exts+0x56>
 8007fe2:	4620      	mov	r0, r4
 8007fe4:	f7ff ff1c 	bl	8007e20 <_close>
 8007fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fec:	b003      	add	sp, #12
 8007fee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ff2:	2204      	movs	r2, #4
 8007ff4:	eb0d 0102 	add.w	r1, sp, r2
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	f7ff fe7c 	bl	8007cf6 <_read>
 8007ffe:	2803      	cmp	r0, #3
 8008000:	ddef      	ble.n	8007fe2 <_get_semihosting_exts+0x46>
 8008002:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008006:	2b53      	cmp	r3, #83	@ 0x53
 8008008:	d1eb      	bne.n	8007fe2 <_get_semihosting_exts+0x46>
 800800a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800800e:	2b48      	cmp	r3, #72	@ 0x48
 8008010:	d1e7      	bne.n	8007fe2 <_get_semihosting_exts+0x46>
 8008012:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008016:	2b46      	cmp	r3, #70	@ 0x46
 8008018:	d1e3      	bne.n	8007fe2 <_get_semihosting_exts+0x46>
 800801a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800801e:	2b42      	cmp	r3, #66	@ 0x42
 8008020:	d1df      	bne.n	8007fe2 <_get_semihosting_exts+0x46>
 8008022:	2201      	movs	r2, #1
 8008024:	4639      	mov	r1, r7
 8008026:	4620      	mov	r0, r4
 8008028:	f7ff fe7f 	bl	8007d2a <_swilseek>
 800802c:	2800      	cmp	r0, #0
 800802e:	dbd8      	blt.n	8007fe2 <_get_semihosting_exts+0x46>
 8008030:	462a      	mov	r2, r5
 8008032:	4631      	mov	r1, r6
 8008034:	4620      	mov	r0, r4
 8008036:	f7ff fe5e 	bl	8007cf6 <_read>
 800803a:	4605      	mov	r5, r0
 800803c:	4620      	mov	r0, r4
 800803e:	f7ff feef 	bl	8007e20 <_close>
 8008042:	4628      	mov	r0, r5
 8008044:	f7ff fe42 	bl	8007ccc <checkerror>
 8008048:	e7d0      	b.n	8007fec <_get_semihosting_exts+0x50>
 800804a:	bf00      	nop
 800804c:	08008458 	.word	0x08008458

08008050 <initialise_semihosting_exts>:
 8008050:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008052:	4d0a      	ldr	r5, [pc, #40]	@ (800807c <initialise_semihosting_exts+0x2c>)
 8008054:	4c0a      	ldr	r4, [pc, #40]	@ (8008080 <initialise_semihosting_exts+0x30>)
 8008056:	2100      	movs	r1, #0
 8008058:	2201      	movs	r2, #1
 800805a:	a801      	add	r0, sp, #4
 800805c:	6029      	str	r1, [r5, #0]
 800805e:	6022      	str	r2, [r4, #0]
 8008060:	f7ff ff9c 	bl	8007f9c <_get_semihosting_exts>
 8008064:	2800      	cmp	r0, #0
 8008066:	dd07      	ble.n	8008078 <initialise_semihosting_exts+0x28>
 8008068:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800806c:	f003 0201 	and.w	r2, r3, #1
 8008070:	f003 0302 	and.w	r3, r3, #2
 8008074:	602a      	str	r2, [r5, #0]
 8008076:	6023      	str	r3, [r4, #0]
 8008078:	b003      	add	sp, #12
 800807a:	bd30      	pop	{r4, r5, pc}
 800807c:	2000009c 	.word	0x2000009c
 8008080:	20000098 	.word	0x20000098

08008084 <_has_ext_stdout_stderr>:
 8008084:	b510      	push	{r4, lr}
 8008086:	4c04      	ldr	r4, [pc, #16]	@ (8008098 <_has_ext_stdout_stderr+0x14>)
 8008088:	6823      	ldr	r3, [r4, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	da01      	bge.n	8008092 <_has_ext_stdout_stderr+0xe>
 800808e:	f7ff ffdf 	bl	8008050 <initialise_semihosting_exts>
 8008092:	6820      	ldr	r0, [r4, #0]
 8008094:	bd10      	pop	{r4, pc}
 8008096:	bf00      	nop
 8008098:	20000098 	.word	0x20000098

0800809c <initialise_monitor_handles>:
 800809c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a0:	b085      	sub	sp, #20
 80080a2:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8008154 <initialise_monitor_handles+0xb8>
 80080a6:	f8cd 9004 	str.w	r9, [sp, #4]
 80080aa:	2303      	movs	r3, #3
 80080ac:	2400      	movs	r4, #0
 80080ae:	9303      	str	r3, [sp, #12]
 80080b0:	af01      	add	r7, sp, #4
 80080b2:	9402      	str	r4, [sp, #8]
 80080b4:	2501      	movs	r5, #1
 80080b6:	4628      	mov	r0, r5
 80080b8:	4639      	mov	r1, r7
 80080ba:	beab      	bkpt	0x00ab
 80080bc:	4605      	mov	r5, r0
 80080be:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8008158 <initialise_monitor_handles+0xbc>
 80080c2:	4623      	mov	r3, r4
 80080c4:	4c20      	ldr	r4, [pc, #128]	@ (8008148 <initialise_monitor_handles+0xac>)
 80080c6:	f8c8 5000 	str.w	r5, [r8]
 80080ca:	f04f 32ff 	mov.w	r2, #4294967295
 80080ce:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80080d2:	3301      	adds	r3, #1
 80080d4:	2b14      	cmp	r3, #20
 80080d6:	d1fa      	bne.n	80080ce <initialise_monitor_handles+0x32>
 80080d8:	f7ff ffd4 	bl	8008084 <_has_ext_stdout_stderr>
 80080dc:	4d1b      	ldr	r5, [pc, #108]	@ (800814c <initialise_monitor_handles+0xb0>)
 80080de:	b1d0      	cbz	r0, 8008116 <initialise_monitor_handles+0x7a>
 80080e0:	f04f 0a03 	mov.w	sl, #3
 80080e4:	2304      	movs	r3, #4
 80080e6:	f8cd 9004 	str.w	r9, [sp, #4]
 80080ea:	2601      	movs	r6, #1
 80080ec:	f8cd a00c 	str.w	sl, [sp, #12]
 80080f0:	9302      	str	r3, [sp, #8]
 80080f2:	4630      	mov	r0, r6
 80080f4:	4639      	mov	r1, r7
 80080f6:	beab      	bkpt	0x00ab
 80080f8:	4683      	mov	fp, r0
 80080fa:	4b15      	ldr	r3, [pc, #84]	@ (8008150 <initialise_monitor_handles+0xb4>)
 80080fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8008100:	f8c3 b000 	str.w	fp, [r3]
 8008104:	2308      	movs	r3, #8
 8008106:	f8cd a00c 	str.w	sl, [sp, #12]
 800810a:	9302      	str	r3, [sp, #8]
 800810c:	4630      	mov	r0, r6
 800810e:	4639      	mov	r1, r7
 8008110:	beab      	bkpt	0x00ab
 8008112:	4606      	mov	r6, r0
 8008114:	602e      	str	r6, [r5, #0]
 8008116:	682b      	ldr	r3, [r5, #0]
 8008118:	3301      	adds	r3, #1
 800811a:	bf02      	ittt	eq
 800811c:	4b0c      	ldreq	r3, [pc, #48]	@ (8008150 <initialise_monitor_handles+0xb4>)
 800811e:	681b      	ldreq	r3, [r3, #0]
 8008120:	602b      	streq	r3, [r5, #0]
 8008122:	2600      	movs	r6, #0
 8008124:	f8d8 3000 	ldr.w	r3, [r8]
 8008128:	6023      	str	r3, [r4, #0]
 800812a:	6066      	str	r6, [r4, #4]
 800812c:	f7ff ffaa 	bl	8008084 <_has_ext_stdout_stderr>
 8008130:	b130      	cbz	r0, 8008140 <initialise_monitor_handles+0xa4>
 8008132:	4b07      	ldr	r3, [pc, #28]	@ (8008150 <initialise_monitor_handles+0xb4>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800813a:	682b      	ldr	r3, [r5, #0]
 800813c:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8008140:	b005      	add	sp, #20
 8008142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008146:	bf00      	nop
 8008148:	20001fbc 	.word	0x20001fbc
 800814c:	20001fb0 	.word	0x20001fb0
 8008150:	20001fb4 	.word	0x20001fb4
 8008154:	0800846e 	.word	0x0800846e
 8008158:	20001fb8 	.word	0x20001fb8

0800815c <_init>:
 800815c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800815e:	bf00      	nop
 8008160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008162:	bc08      	pop	{r3}
 8008164:	469e      	mov	lr, r3
 8008166:	4770      	bx	lr

08008168 <_fini>:
 8008168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800816a:	bf00      	nop
 800816c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800816e:	bc08      	pop	{r3}
 8008170:	469e      	mov	lr, r3
 8008172:	4770      	bx	lr
