
ModbusWithSensorsNoRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087fc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08008984  08008984  00009984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bbc  08008bbc  0000a00c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08008bbc  08008bbc  0000a00c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08008bbc  08008bbc  0000a00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bbc  08008bbc  00009bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008bc0  08008bc0  00009bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08008bc4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a00c  2**0
                  CONTENTS
 10 .bss          0000054c  2000000c  2000000c  0000a00c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000558  20000558  0000a00c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a00c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017501  00000000  00000000  0000a03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003433  00000000  00000000  0002153d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b8  00000000  00000000  00024970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f76  00000000  00000000  00025d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d2b1  00000000  00000000  00026c9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019e91  00000000  00000000  00043f4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ae056  00000000  00000000  0005dde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010be36  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000527c  00000000  00000000  0010be7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  001110f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800896c 	.word	0x0800896c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800896c 	.word	0x0800896c

080001c8 <ModbusRecovery_MarkActivity>:
 * @brief  Modbus activity marker (called from UART callbacks)
 * @param  None
 * @retval None
 */
void ModbusRecovery_MarkActivity(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
  // Mark successful Modbus activity
  // Could implement communication monitoring here
}
 80001cc:	bf00      	nop
 80001ce:	46bd      	mov	sp, r7
 80001d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001d4:	4770      	bx	lr

080001d6 <ModbusRecovery_MarkError>:
 * @brief  Modbus error marker (called from UART callbacks)
 * @param  None
 * @retval None
 */
void ModbusRecovery_MarkError(void)
{
 80001d6:	b480      	push	{r7}
 80001d8:	af00      	add	r7, sp, #0
  // Mark Modbus communication error
  // Could implement error recovery here
}
 80001da:	bf00      	nop
 80001dc:	46bd      	mov	sp, r7
 80001de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e2:	4770      	bx	lr

080001e4 <mbus_tickcount>:
 * @brief  Get system tick count for Modbus timing
 * @param  None
 * @retval Tick count in milliseconds
 */
uint32_t mbus_tickcount(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80001e8:	f002 f8bc 	bl	8002364 <HAL_GetTick>
 80001ec:	4603      	mov	r3, r0
}
 80001ee:	4618      	mov	r0, r3
 80001f0:	bd80      	pop	{r7, pc}
	...

080001f4 <HAL_TIM_PeriodElapsedCallback>:
 * @brief  Timer 3 period elapsed callback (1 second timer)
 * @param  htim: Timer handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
  if (htim == &htim3)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	4a09      	ldr	r2, [pc, #36]	@ (8000224 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000200:	4293      	cmp	r3, r2
 8000202:	d10b      	bne.n	800021c <HAL_TIM_PeriodElapsedCallback+0x28>
  {
    // Set timer flag for main loop processing
    timer_flag = 1;
 8000204:	4b08      	ldr	r3, [pc, #32]	@ (8000228 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000206:	2201      	movs	r2, #1
 8000208:	701a      	strb	r2, [r3, #0]
    sensor_update_counter++;
 800020a:	4b08      	ldr	r3, [pc, #32]	@ (800022c <HAL_TIM_PeriodElapsedCallback+0x38>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	3301      	adds	r3, #1
 8000210:	4a06      	ldr	r2, [pc, #24]	@ (800022c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000212:	6013      	str	r3, [r2, #0]

    // Toggle LED to show system activity
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000214:	2108      	movs	r1, #8
 8000216:	4806      	ldr	r0, [pc, #24]	@ (8000230 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000218:	f003 fe60 	bl	8003edc <HAL_GPIO_TogglePin>
  }
}
 800021c:	bf00      	nop
 800021e:	3708      	adds	r7, #8
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}
 8000224:	20000110 	.word	0x20000110
 8000228:	2000026c 	.word	0x2000026c
 800022c:	20000270 	.word	0x20000270
 8000230:	48000400 	.word	0x48000400

08000234 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000238:	f002 f83a 	bl	80022b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023c:	f000 f828 	bl	8000290 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000240:	f000 fa0a 	bl	8000658 <MX_GPIO_Init>
  MX_DMA_Init();
 8000244:	f000 f9da 	bl	80005fc <MX_DMA_Init>
  MX_I2C1_Init();
 8000248:	f000 f916 	bl	8000478 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800024c:	f000 f9a4 	bl	8000598 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000250:	f000 f87c 	bl	800034c <MX_ADC1_Init>
  MX_TIM3_Init();
 8000254:	f000 f950 	bl	80004f8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Initialize sensors (MQ2 + SCD30)
  Sensors_Init();
 8000258:	f001 fce6 	bl	8001c28 <Sensors_Init>

  // Initialize Modbus RTU slave
  Modbus_Init();
 800025c:	f001 f8e2 	bl	8001424 <Modbus_Init>

  // Initialize UART callbacks
  UART_Callbacks_Init();
 8000260:	f001 ff90 	bl	8002184 <UART_Callbacks_Init>

  // Start the 1-second timer for sensor updates
  HAL_TIM_Base_Start_IT(&htim3);
 8000264:	4808      	ldr	r0, [pc, #32]	@ (8000288 <main+0x54>)
 8000266:	f006 fdb1 	bl	8006dcc <HAL_TIM_Base_Start_IT>

  // Initial sensor update
  Modbus_Device_UpdateSensors();
 800026a:	f000 fffb 	bl	8001264 <Modbus_Device_UpdateSensors>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    // Check if 1-second timer has elapsed
    if (timer_flag)
 800026e:	4b07      	ldr	r3, [pc, #28]	@ (800028c <main+0x58>)
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	b2db      	uxtb	r3, r3
 8000274:	2b00      	cmp	r3, #0
 8000276:	d0fa      	beq.n	800026e <main+0x3a>
    {
      timer_flag = 0; // Clear flag
 8000278:	4b04      	ldr	r3, [pc, #16]	@ (800028c <main+0x58>)
 800027a:	2200      	movs	r2, #0
 800027c:	701a      	strb	r2, [r3, #0]

      // Update all sensor readings and map to Modbus registers
      Modbus_Device_UpdateSensors();
 800027e:	f000 fff1 	bl	8001264 <Modbus_Device_UpdateSensors>

      // Process any pending Modbus operations
      Modbus_Process();
 8000282:	f001 f959 	bl	8001538 <Modbus_Process>
    if (timer_flag)
 8000286:	e7f2      	b.n	800026e <main+0x3a>
 8000288:	20000110 	.word	0x20000110
 800028c:	2000026c 	.word	0x2000026c

08000290 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b096      	sub	sp, #88	@ 0x58
 8000294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000296:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800029a:	2228      	movs	r2, #40	@ 0x28
 800029c:	2100      	movs	r1, #0
 800029e:	4618      	mov	r0, r3
 80002a0:	f008 fb2a 	bl	80088f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a4:	f107 031c 	add.w	r3, r7, #28
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	605a      	str	r2, [r3, #4]
 80002ae:	609a      	str	r2, [r3, #8]
 80002b0:	60da      	str	r2, [r3, #12]
 80002b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]
 80002c0:	611a      	str	r2, [r3, #16]
 80002c2:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c4:	2302      	movs	r3, #2
 80002c6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c8:	2301      	movs	r3, #1
 80002ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002cc:	2310      	movs	r3, #16
 80002ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d0:	2302      	movs	r3, #2
 80002d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002d4:	2300      	movs	r3, #0
 80002d6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002d8:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80002dc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002de:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80002e2:	4618      	mov	r0, r3
 80002e4:	f005 f9d6 	bl	8005694 <HAL_RCC_OscConfig>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80002ee:	f000 f9e9 	bl	80006c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80002f2:	230f      	movs	r3, #15
 80002f4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f6:	2302      	movs	r3, #2
 80002f8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fa:	2300      	movs	r3, #0
 80002fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000302:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000304:	2300      	movs	r3, #0
 8000306:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000308:	f107 031c 	add.w	r3, r7, #28
 800030c:	2102      	movs	r1, #2
 800030e:	4618      	mov	r0, r3
 8000310:	f006 f9ce 	bl	80066b0 <HAL_RCC_ClockConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800031a:	f000 f9d3 	bl	80006c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_ADC12;
 800031e:	23a1      	movs	r3, #161	@ 0xa1
 8000320:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8000322:	2301      	movs	r3, #1
 8000324:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV2;
 8000326:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800032a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 800032c:	2310      	movs	r3, #16
 800032e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	4618      	mov	r0, r3
 8000334:	f006 fbce 	bl	8006ad4 <HAL_RCCEx_PeriphCLKConfig>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800033e:	f000 f9c1 	bl	80006c4 <Error_Handler>
  }
}
 8000342:	bf00      	nop
 8000344:	3758      	adds	r7, #88	@ 0x58
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
	...

0800034c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b08a      	sub	sp, #40	@ 0x28
 8000350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000352:	f107 031c 	add.w	r3, r7, #28
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	605a      	str	r2, [r3, #4]
 800035c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	2200      	movs	r2, #0
 8000362:	601a      	str	r2, [r3, #0]
 8000364:	605a      	str	r2, [r3, #4]
 8000366:	609a      	str	r2, [r3, #8]
 8000368:	60da      	str	r2, [r3, #12]
 800036a:	611a      	str	r2, [r3, #16]
 800036c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
   */
  hadc1.Instance = ADC1;
 800036e:	4b41      	ldr	r3, [pc, #260]	@ (8000474 <MX_ADC1_Init+0x128>)
 8000370:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000374:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000376:	4b3f      	ldr	r3, [pc, #252]	@ (8000474 <MX_ADC1_Init+0x128>)
 8000378:	2200      	movs	r2, #0
 800037a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800037c:	4b3d      	ldr	r3, [pc, #244]	@ (8000474 <MX_ADC1_Init+0x128>)
 800037e:	2200      	movs	r2, #0
 8000380:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000382:	4b3c      	ldr	r3, [pc, #240]	@ (8000474 <MX_ADC1_Init+0x128>)
 8000384:	2201      	movs	r2, #1
 8000386:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000388:	4b3a      	ldr	r3, [pc, #232]	@ (8000474 <MX_ADC1_Init+0x128>)
 800038a:	2200      	movs	r2, #0
 800038c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800038e:	4b39      	ldr	r3, [pc, #228]	@ (8000474 <MX_ADC1_Init+0x128>)
 8000390:	2200      	movs	r2, #0
 8000392:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000396:	4b37      	ldr	r3, [pc, #220]	@ (8000474 <MX_ADC1_Init+0x128>)
 8000398:	2200      	movs	r2, #0
 800039a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800039c:	4b35      	ldr	r3, [pc, #212]	@ (8000474 <MX_ADC1_Init+0x128>)
 800039e:	2201      	movs	r2, #1
 80003a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003a2:	4b34      	ldr	r3, [pc, #208]	@ (8000474 <MX_ADC1_Init+0x128>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80003a8:	4b32      	ldr	r3, [pc, #200]	@ (8000474 <MX_ADC1_Init+0x128>)
 80003aa:	2204      	movs	r2, #4
 80003ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80003ae:	4b31      	ldr	r3, [pc, #196]	@ (8000474 <MX_ADC1_Init+0x128>)
 80003b0:	2201      	movs	r2, #1
 80003b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003b6:	4b2f      	ldr	r3, [pc, #188]	@ (8000474 <MX_ADC1_Init+0x128>)
 80003b8:	2204      	movs	r2, #4
 80003ba:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003bc:	4b2d      	ldr	r3, [pc, #180]	@ (8000474 <MX_ADC1_Init+0x128>)
 80003be:	2200      	movs	r2, #0
 80003c0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003c2:	4b2c      	ldr	r3, [pc, #176]	@ (8000474 <MX_ADC1_Init+0x128>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003c8:	482a      	ldr	r0, [pc, #168]	@ (8000474 <MX_ADC1_Init+0x128>)
 80003ca:	f001 fffb 	bl	80023c4 <HAL_ADC_Init>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80003d4:	f000 f976 	bl	80006c4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
   */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80003d8:	2300      	movs	r3, #0
 80003da:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003dc:	f107 031c 	add.w	r3, r7, #28
 80003e0:	4619      	mov	r1, r3
 80003e2:	4824      	ldr	r0, [pc, #144]	@ (8000474 <MX_ADC1_Init+0x128>)
 80003e4:	f002 fe78 	bl	80030d8 <HAL_ADCEx_MultiModeConfigChannel>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80003ee:	f000 f969 	bl	80006c4 <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_4;
 80003f2:	2304      	movs	r3, #4
 80003f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003f6:	2301      	movs	r3, #1
 80003f8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003fa:	2300      	movs	r3, #0
 80003fc:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003fe:	2300      	movs	r3, #0
 8000400:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000402:	2300      	movs	r3, #0
 8000404:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000406:	2300      	movs	r3, #0
 8000408:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	4619      	mov	r1, r3
 800040e:	4819      	ldr	r0, [pc, #100]	@ (8000474 <MX_ADC1_Init+0x128>)
 8000410:	f002 fba4 	bl	8002b5c <HAL_ADC_ConfigChannel>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800041a:	f000 f953 	bl	80006c4 <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_1;
 800041e:	2301      	movs	r3, #1
 8000420:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000422:	2302      	movs	r3, #2
 8000424:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	4619      	mov	r1, r3
 800042a:	4812      	ldr	r0, [pc, #72]	@ (8000474 <MX_ADC1_Init+0x128>)
 800042c:	f002 fb96 	bl	8002b5c <HAL_ADC_ConfigChannel>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000436:	f000 f945 	bl	80006c4 <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800043a:	2303      	movs	r3, #3
 800043c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	4619      	mov	r1, r3
 8000442:	480c      	ldr	r0, [pc, #48]	@ (8000474 <MX_ADC1_Init+0x128>)
 8000444:	f002 fb8a 	bl	8002b5c <HAL_ADC_ConfigChannel>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 800044e:	f000 f939 	bl	80006c4 <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000452:	2304      	movs	r3, #4
 8000454:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	4619      	mov	r1, r3
 800045a:	4806      	ldr	r0, [pc, #24]	@ (8000474 <MX_ADC1_Init+0x128>)
 800045c:	f002 fb7e 	bl	8002b5c <HAL_ADC_ConfigChannel>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8000466:	f000 f92d 	bl	80006c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 800046a:	bf00      	nop
 800046c:	3728      	adds	r7, #40	@ 0x28
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	20000028 	.word	0x20000028

08000478 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800047c:	4b1b      	ldr	r3, [pc, #108]	@ (80004ec <MX_I2C1_Init+0x74>)
 800047e:	4a1c      	ldr	r2, [pc, #112]	@ (80004f0 <MX_I2C1_Init+0x78>)
 8000480:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 8000482:	4b1a      	ldr	r3, [pc, #104]	@ (80004ec <MX_I2C1_Init+0x74>)
 8000484:	4a1b      	ldr	r2, [pc, #108]	@ (80004f4 <MX_I2C1_Init+0x7c>)
 8000486:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000488:	4b18      	ldr	r3, [pc, #96]	@ (80004ec <MX_I2C1_Init+0x74>)
 800048a:	2200      	movs	r2, #0
 800048c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800048e:	4b17      	ldr	r3, [pc, #92]	@ (80004ec <MX_I2C1_Init+0x74>)
 8000490:	2201      	movs	r2, #1
 8000492:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000494:	4b15      	ldr	r3, [pc, #84]	@ (80004ec <MX_I2C1_Init+0x74>)
 8000496:	2200      	movs	r2, #0
 8000498:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800049a:	4b14      	ldr	r3, [pc, #80]	@ (80004ec <MX_I2C1_Init+0x74>)
 800049c:	2200      	movs	r2, #0
 800049e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004a0:	4b12      	ldr	r3, [pc, #72]	@ (80004ec <MX_I2C1_Init+0x74>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004a6:	4b11      	ldr	r3, [pc, #68]	@ (80004ec <MX_I2C1_Init+0x74>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004ac:	4b0f      	ldr	r3, [pc, #60]	@ (80004ec <MX_I2C1_Init+0x74>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004b2:	480e      	ldr	r0, [pc, #56]	@ (80004ec <MX_I2C1_Init+0x74>)
 80004b4:	f003 fd2c 	bl	8003f10 <HAL_I2C_Init>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004be:	f000 f901 	bl	80006c4 <Error_Handler>
  }

  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004c2:	2100      	movs	r1, #0
 80004c4:	4809      	ldr	r0, [pc, #36]	@ (80004ec <MX_I2C1_Init+0x74>)
 80004c6:	f005 f84d 	bl	8005564 <HAL_I2CEx_ConfigAnalogFilter>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004d0:	f000 f8f8 	bl	80006c4 <Error_Handler>
  }

  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004d4:	2100      	movs	r1, #0
 80004d6:	4805      	ldr	r0, [pc, #20]	@ (80004ec <MX_I2C1_Init+0x74>)
 80004d8:	f005 f88f 	bl	80055fa <HAL_I2CEx_ConfigDigitalFilter>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004e2:	f000 f8ef 	bl	80006c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	200000bc 	.word	0x200000bc
 80004f0:	40005400 	.word	0x40005400
 80004f4:	10b17db5 	.word	0x10b17db5

080004f8 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b088      	sub	sp, #32
 80004fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004fe:	f107 0310 	add.w	r3, r7, #16
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]
 8000508:	609a      	str	r2, [r3, #8]
 800050a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800050c:	1d3b      	adds	r3, r7, #4
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000516:	4b1e      	ldr	r3, [pc, #120]	@ (8000590 <MX_TIM3_Init+0x98>)
 8000518:	4a1e      	ldr	r2, [pc, #120]	@ (8000594 <MX_TIM3_Init+0x9c>)
 800051a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63999;
 800051c:	4b1c      	ldr	r3, [pc, #112]	@ (8000590 <MX_TIM3_Init+0x98>)
 800051e:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8000522:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000524:	4b1a      	ldr	r3, [pc, #104]	@ (8000590 <MX_TIM3_Init+0x98>)
 8000526:	2200      	movs	r2, #0
 8000528:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800052a:	4b19      	ldr	r3, [pc, #100]	@ (8000590 <MX_TIM3_Init+0x98>)
 800052c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000530:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000532:	4b17      	ldr	r3, [pc, #92]	@ (8000590 <MX_TIM3_Init+0x98>)
 8000534:	2200      	movs	r2, #0
 8000536:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000538:	4b15      	ldr	r3, [pc, #84]	@ (8000590 <MX_TIM3_Init+0x98>)
 800053a:	2280      	movs	r2, #128	@ 0x80
 800053c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800053e:	4814      	ldr	r0, [pc, #80]	@ (8000590 <MX_TIM3_Init+0x98>)
 8000540:	f006 fbec 	bl	8006d1c <HAL_TIM_Base_Init>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800054a:	f000 f8bb 	bl	80006c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800054e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000552:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000554:	f107 0310 	add.w	r3, r7, #16
 8000558:	4619      	mov	r1, r3
 800055a:	480d      	ldr	r0, [pc, #52]	@ (8000590 <MX_TIM3_Init+0x98>)
 800055c:	f006 fd94 	bl	8007088 <HAL_TIM_ConfigClockSource>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000566:	f000 f8ad 	bl	80006c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800056e:	2300      	movs	r3, #0
 8000570:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	4619      	mov	r1, r3
 8000576:	4806      	ldr	r0, [pc, #24]	@ (8000590 <MX_TIM3_Init+0x98>)
 8000578:	f006 ff96 	bl	80074a8 <HAL_TIMEx_MasterConfigSynchronization>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000582:	f000 f89f 	bl	80006c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
}
 8000586:	bf00      	nop
 8000588:	3720      	adds	r7, #32
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000110 	.word	0x20000110
 8000594:	40000400 	.word	0x40000400

08000598 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800059c:	4b15      	ldr	r3, [pc, #84]	@ (80005f4 <MX_USART1_UART_Init+0x5c>)
 800059e:	4a16      	ldr	r2, [pc, #88]	@ (80005f8 <MX_USART1_UART_Init+0x60>)
 80005a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80005a2:	4b14      	ldr	r3, [pc, #80]	@ (80005f4 <MX_USART1_UART_Init+0x5c>)
 80005a4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80005a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005aa:	4b12      	ldr	r3, [pc, #72]	@ (80005f4 <MX_USART1_UART_Init+0x5c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005b0:	4b10      	ldr	r3, [pc, #64]	@ (80005f4 <MX_USART1_UART_Init+0x5c>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005b6:	4b0f      	ldr	r3, [pc, #60]	@ (80005f4 <MX_USART1_UART_Init+0x5c>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005bc:	4b0d      	ldr	r3, [pc, #52]	@ (80005f4 <MX_USART1_UART_Init+0x5c>)
 80005be:	220c      	movs	r2, #12
 80005c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005c2:	4b0c      	ldr	r3, [pc, #48]	@ (80005f4 <MX_USART1_UART_Init+0x5c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005c8:	4b0a      	ldr	r3, [pc, #40]	@ (80005f4 <MX_USART1_UART_Init+0x5c>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005ce:	4b09      	ldr	r3, [pc, #36]	@ (80005f4 <MX_USART1_UART_Init+0x5c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005d4:	4b07      	ldr	r3, [pc, #28]	@ (80005f4 <MX_USART1_UART_Init+0x5c>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80005da:	2300      	movs	r3, #0
 80005dc:	2200      	movs	r2, #0
 80005de:	2100      	movs	r1, #0
 80005e0:	4804      	ldr	r0, [pc, #16]	@ (80005f4 <MX_USART1_UART_Init+0x5c>)
 80005e2:	f008 f8c4 	bl	800876e <HAL_RS485Ex_Init>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80005ec:	f000 f86a 	bl	80006c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	2000015c 	.word	0x2000015c
 80005f8:	40013800 	.word	0x40013800

080005fc <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000602:	4b14      	ldr	r3, [pc, #80]	@ (8000654 <MX_DMA_Init+0x58>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	4a13      	ldr	r2, [pc, #76]	@ (8000654 <MX_DMA_Init+0x58>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6153      	str	r3, [r2, #20]
 800060e:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <MX_DMA_Init+0x58>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	2100      	movs	r1, #0
 800061e:	200b      	movs	r0, #11
 8000620:	f003 f87b 	bl	800371a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000624:	200b      	movs	r0, #11
 8000626:	f003 f894 	bl	8003752 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800062a:	2200      	movs	r2, #0
 800062c:	2100      	movs	r1, #0
 800062e:	200e      	movs	r0, #14
 8000630:	f003 f873 	bl	800371a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000634:	200e      	movs	r0, #14
 8000636:	f003 f88c 	bl	8003752 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800063a:	2200      	movs	r2, #0
 800063c:	2100      	movs	r1, #0
 800063e:	200f      	movs	r0, #15
 8000640:	f003 f86b 	bl	800371a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000644:	200f      	movs	r0, #15
 8000646:	f003 f884 	bl	8003752 <HAL_NVIC_EnableIRQ>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40021000 	.word	0x40021000

08000658 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b088      	sub	sp, #32
 800065c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	f107 030c 	add.w	r3, r7, #12
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	4b14      	ldr	r3, [pc, #80]	@ (80006c0 <MX_GPIO_Init+0x68>)
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	4a13      	ldr	r2, [pc, #76]	@ (80006c0 <MX_GPIO_Init+0x68>)
 8000674:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000678:	6153      	str	r3, [r2, #20]
 800067a:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <MX_GPIO_Init+0x68>)
 800067c:	695b      	ldr	r3, [r3, #20]
 800067e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000686:	4b0e      	ldr	r3, [pc, #56]	@ (80006c0 <MX_GPIO_Init+0x68>)
 8000688:	695b      	ldr	r3, [r3, #20]
 800068a:	4a0d      	ldr	r2, [pc, #52]	@ (80006c0 <MX_GPIO_Init+0x68>)
 800068c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000690:	6153      	str	r3, [r2, #20]
 8000692:	4b0b      	ldr	r3, [pc, #44]	@ (80006c0 <MX_GPIO_Init+0x68>)
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 800069e:	23f0      	movs	r3, #240	@ 0xf0
 80006a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a2:	2300      	movs	r3, #0
 80006a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	4619      	mov	r1, r3
 80006b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b4:	f003 fa88 	bl	8003bc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006b8:	bf00      	nop
 80006ba:	3720      	adds	r7, #32
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40021000 	.word	0x40021000

080006c4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c8:	b672      	cpsid	i
}
 80006ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006cc:	bf00      	nop
 80006ce:	e7fd      	b.n	80006cc <Error_Handler+0x8>

080006d0 <mbus_crc16>:
}

*/

uint16_t mbus_crc16(const uint16_t crc16, const uint8_t byte)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	460a      	mov	r2, r1
 80006da:	80fb      	strh	r3, [r7, #6]
 80006dc:	4613      	mov	r3, r2
 80006de:	717b      	strb	r3, [r7, #5]
    const int index = (crc16 & 0xFF) ^ byte;
 80006e0:	88fb      	ldrh	r3, [r7, #6]
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	797b      	ldrb	r3, [r7, #5]
 80006e6:	4053      	eors	r3, r2
 80006e8:	60fb      	str	r3, [r7, #12]
    return (aucCRCLo[index] << 8) | ((crc16 >> 8) ^ aucCRCHi[index]);
 80006ea:	4a0d      	ldr	r2, [pc, #52]	@ (8000720 <mbus_crc16+0x50>)
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	4413      	add	r3, r2
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	b21b      	sxth	r3, r3
 80006f4:	021b      	lsls	r3, r3, #8
 80006f6:	b21a      	sxth	r2, r3
 80006f8:	88fb      	ldrh	r3, [r7, #6]
 80006fa:	0a1b      	lsrs	r3, r3, #8
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	4809      	ldr	r0, [pc, #36]	@ (8000724 <mbus_crc16+0x54>)
 8000700:	68f9      	ldr	r1, [r7, #12]
 8000702:	4401      	add	r1, r0
 8000704:	7809      	ldrb	r1, [r1, #0]
 8000706:	404b      	eors	r3, r1
 8000708:	b29b      	uxth	r3, r3
 800070a:	b21b      	sxth	r3, r3
 800070c:	4313      	orrs	r3, r2
 800070e:	b21b      	sxth	r3, r3
 8000710:	b29b      	uxth	r3, r3
}
 8000712:	4618      	mov	r0, r3
 8000714:	3714      	adds	r7, #20
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	08008a84 	.word	0x08008a84
 8000724:	08008984 	.word	0x08008984

08000728 <mbus_open>:
     * function mbus_open()
     * open new modbus context for new port
     * return: MODBUS_ERROR - if can't open context
     */
    mbus_t mbus_open(Modbus_Conf_t *pconf)
    {
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
        mbus_t context;
        for (context = 0; context < STMODBUS_COUNT_CONTEXT; context++)
 8000730:	2300      	movs	r3, #0
 8000732:	73fb      	strb	r3, [r7, #15]
 8000734:	e011      	b.n	800075a <mbus_open+0x32>
        {
            if (g_mbusContext[context].open == 0)
 8000736:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800073a:	4924      	ldr	r1, [pc, #144]	@ (80007cc <mbus_open+0xa4>)
 800073c:	4613      	mov	r3, r2
 800073e:	011b      	lsls	r3, r3, #4
 8000740:	4413      	add	r3, r2
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	440b      	add	r3, r1
 8000746:	3328      	adds	r3, #40	@ 0x28
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d00a      	beq.n	8000764 <mbus_open+0x3c>
        for (context = 0; context < STMODBUS_COUNT_CONTEXT; context++)
 800074e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000752:	b2db      	uxtb	r3, r3
 8000754:	3301      	adds	r3, #1
 8000756:	b2db      	uxtb	r3, r3
 8000758:	73fb      	strb	r3, [r7, #15]
 800075a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800075e:	2b00      	cmp	r3, #0
 8000760:	dde9      	ble.n	8000736 <mbus_open+0xe>
 8000762:	e000      	b.n	8000766 <mbus_open+0x3e>
            {
                break;
 8000764:	bf00      	nop
            }
        }
        if (context == STMODBUS_COUNT_CONTEXT)
 8000766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d102      	bne.n	8000774 <mbus_open+0x4c>
            return (mbus_t)MBUS_ERROR;
 800076e:	f04f 33ff 	mov.w	r3, #4294967295
 8000772:	e026      	b.n	80007c2 <mbus_open+0x9a>
        // Clear context
        memset(&g_mbusContext[context], 0, sizeof(_stmodbus_context_t));
 8000774:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000778:	4613      	mov	r3, r2
 800077a:	011b      	lsls	r3, r3, #4
 800077c:	4413      	add	r3, r2
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	4a12      	ldr	r2, [pc, #72]	@ (80007cc <mbus_open+0xa4>)
 8000782:	4413      	add	r3, r2
 8000784:	2244      	movs	r2, #68	@ 0x44
 8000786:	2100      	movs	r1, #0
 8000788:	4618      	mov	r0, r3
 800078a:	f008 f8b5 	bl	80088f8 <memset>
        // Copy config to context
        memcpy((void *)&g_mbusContext[context].conf, (void *)pconf,
 800078e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000792:	4613      	mov	r3, r2
 8000794:	011b      	lsls	r3, r3, #4
 8000796:	4413      	add	r3, r2
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	4a0c      	ldr	r2, [pc, #48]	@ (80007cc <mbus_open+0xa4>)
 800079c:	4413      	add	r3, r2
 800079e:	2228      	movs	r2, #40	@ 0x28
 80007a0:	6879      	ldr	r1, [r7, #4]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f008 f8d4 	bl	8008950 <memcpy>
               sizeof(Modbus_Conf_t));

        g_mbusContext[context].open = 1;
 80007a8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80007ac:	4907      	ldr	r1, [pc, #28]	@ (80007cc <mbus_open+0xa4>)
 80007ae:	4613      	mov	r3, r2
 80007b0:	011b      	lsls	r3, r3, #4
 80007b2:	4413      	add	r3, r2
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	440b      	add	r3, r1
 80007b8:	3328      	adds	r3, #40	@ 0x28
 80007ba:	2201      	movs	r2, #1
 80007bc:	701a      	strb	r2, [r3, #0]
        return context;
 80007be:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
 80007c2:	4618      	mov	r0, r3
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000274 	.word	0x20000274

080007d0 <mbus_flush>:

    mbus_status_t mbus_flush(const mbus_t context)
    {
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
        g_mbusContext[context].crc16 = 0xFFFF;
 80007da:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80007de:	490e      	ldr	r1, [pc, #56]	@ (8000818 <mbus_flush+0x48>)
 80007e0:	4613      	mov	r3, r2
 80007e2:	011b      	lsls	r3, r3, #4
 80007e4:	4413      	add	r3, r2
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	440b      	add	r3, r1
 80007ea:	332a      	adds	r3, #42	@ 0x2a
 80007ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007f0:	801a      	strh	r2, [r3, #0]
        g_mbusContext[context].state = MBUS_STATE_IDLE;
 80007f2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80007f6:	4908      	ldr	r1, [pc, #32]	@ (8000818 <mbus_flush+0x48>)
 80007f8:	4613      	mov	r3, r2
 80007fa:	011b      	lsls	r3, r3, #4
 80007fc:	4413      	add	r3, r2
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	440b      	add	r3, r1
 8000802:	3329      	adds	r3, #41	@ 0x29
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
        return MBUS_OK;
 8000808:	2300      	movs	r3, #0
    }
 800080a:	4618      	mov	r0, r3
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	20000274 	.word	0x20000274

0800081c <mbus_response>:

    mbus_status_t mbus_response(mbus_t mb_context, Modbus_ResponseType response)
    {
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	460a      	mov	r2, r1
 8000826:	71fb      	strb	r3, [r7, #7]
 8000828:	4613      	mov	r3, r2
 800082a:	71bb      	strb	r3, [r7, #6]

        if (response != MBUS_RESPONSE_OK)
 800082c:	79bb      	ldrb	r3, [r7, #6]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d008      	beq.n	8000844 <mbus_response+0x28>
        {
            return mbus_send_error(mb_context, response);
 8000832:	79ba      	ldrb	r2, [r7, #6]
 8000834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000838:	4611      	mov	r1, r2
 800083a:	4618      	mov	r0, r3
 800083c:	f000 fb66 	bl	8000f0c <mbus_send_error>
 8000840:	4603      	mov	r3, r0
 8000842:	e001      	b.n	8000848 <mbus_response+0x2c>
        }
        else
        {
        }
        return MBUS_ERROR;
 8000844:	f04f 33ff 	mov.w	r3, #4294967295
    }
 8000848:	4618      	mov	r0, r3
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <mbus_poll_response>:
        g_userError = error;
        return 0;
    }

    inline mbus_status_t mbus_poll_response(mbus_t mb_context)
    {
 8000850:	b580      	push	{r7, lr}
 8000852:	b08a      	sub	sp, #40	@ 0x28
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]
        stmbCallBackFunc func = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
        _stmodbus_context_t *ctx = &g_mbusContext[mb_context];
 800085e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000862:	4613      	mov	r3, r2
 8000864:	011b      	lsls	r3, r3, #4
 8000866:	4413      	add	r3, r2
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	4a9b      	ldr	r2, [pc, #620]	@ (8000ad8 <mbus_poll_response+0x288>)
 800086c:	4413      	add	r3, r2
 800086e:	613b      	str	r3, [r7, #16]
        int read = 1, la;
 8000870:	2301      	movs	r3, #1
 8000872:	60bb      	str	r3, [r7, #8]
        uint16_t d;

        if (ctx->header.func == 0x04)
 8000874:	693b      	ldr	r3, [r7, #16]
 8000876:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800087a:	2b04      	cmp	r3, #4
 800087c:	d101      	bne.n	8000882 <mbus_poll_response+0x32>
        {
            la = 10;
 800087e:	230a      	movs	r3, #10
 8000880:	627b      	str	r3, [r7, #36]	@ 0x24
                func = ctx->func[i].func;
                break;
            }
        }
#endif
        switch (ctx->header.func)
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8000888:	2b0f      	cmp	r3, #15
 800088a:	d006      	beq.n	800089a <mbus_poll_response+0x4a>
 800088c:	2b0f      	cmp	r3, #15
 800088e:	dc4a      	bgt.n	8000926 <mbus_poll_response+0xd6>
 8000890:	2b01      	cmp	r3, #1
 8000892:	d002      	beq.n	800089a <mbus_poll_response+0x4a>
 8000894:	2b02      	cmp	r3, #2
 8000896:	d023      	beq.n	80008e0 <mbus_poll_response+0x90>
            {
                return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_ADDRESS);
            }
            break;
        default:
            break;
 8000898:	e045      	b.n	8000926 <mbus_poll_response+0xd6>
            if ((ctx->header.num == 0) || (ctx->header.num > 0x07D0))
 800089a:	693b      	ldr	r3, [r7, #16]
 800089c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d004      	beq.n	80008ac <mbus_poll_response+0x5c>
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80008a6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80008aa:	d907      	bls.n	80008bc <mbus_poll_response+0x6c>
                return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_VALUE);
 80008ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b0:	2103      	movs	r1, #3
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff ffb2 	bl	800081c <mbus_response>
 80008b8:	4603      	mov	r3, r0
 80008ba:	e155      	b.n	8000b68 <mbus_poll_response+0x318>
            if ((ctx->header.addr + ctx->header.num) >= ctx->conf.coils)
 80008bc:	693b      	ldr	r3, [r7, #16]
 80008be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80008c0:	461a      	mov	r2, r3
 80008c2:	693b      	ldr	r3, [r7, #16]
 80008c4:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80008c6:	4413      	add	r3, r2
 80008c8:	693a      	ldr	r2, [r7, #16]
 80008ca:	8852      	ldrh	r2, [r2, #2]
 80008cc:	4293      	cmp	r3, r2
 80008ce:	db2c      	blt.n	800092a <mbus_poll_response+0xda>
                return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_ADDRESS);
 80008d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d4:	2102      	movs	r1, #2
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff ffa0 	bl	800081c <mbus_response>
 80008dc:	4603      	mov	r3, r0
 80008de:	e143      	b.n	8000b68 <mbus_poll_response+0x318>
            if ((ctx->header.num == 0) || (ctx->header.num > 0x07D0))
 80008e0:	693b      	ldr	r3, [r7, #16]
 80008e2:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d004      	beq.n	80008f2 <mbus_poll_response+0xa2>
 80008e8:	693b      	ldr	r3, [r7, #16]
 80008ea:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80008ec:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80008f0:	d907      	bls.n	8000902 <mbus_poll_response+0xb2>
                return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_VALUE);
 80008f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f6:	2103      	movs	r1, #3
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff ff8f 	bl	800081c <mbus_response>
 80008fe:	4603      	mov	r3, r0
 8000900:	e132      	b.n	8000b68 <mbus_poll_response+0x318>
            if ((ctx->header.addr + ctx->header.num) > ctx->conf.discrete)
 8000902:	693b      	ldr	r3, [r7, #16]
 8000904:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000906:	461a      	mov	r2, r3
 8000908:	693b      	ldr	r3, [r7, #16]
 800090a:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800090c:	4413      	add	r3, r2
 800090e:	693a      	ldr	r2, [r7, #16]
 8000910:	8892      	ldrh	r2, [r2, #4]
 8000912:	4293      	cmp	r3, r2
 8000914:	dd0b      	ble.n	800092e <mbus_poll_response+0xde>
                return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_ADDRESS);
 8000916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091a:	2102      	movs	r1, #2
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff ff7d 	bl	800081c <mbus_response>
 8000922:	4603      	mov	r3, r0
 8000924:	e120      	b.n	8000b68 <mbus_poll_response+0x318>
            break;
 8000926:	bf00      	nop
 8000928:	e002      	b.n	8000930 <mbus_poll_response+0xe0>
            break;
 800092a:	bf00      	nop
 800092c:	e000      	b.n	8000930 <mbus_poll_response+0xe0>
            break;
 800092e:	bf00      	nop
        }

        if (func != 0)
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d006      	beq.n	8000944 <mbus_poll_response+0xf4>
        {
            return func(mb_context);
 8000936:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	4610      	mov	r0, r2
 800093e:	4798      	blx	r3
 8000940:	4603      	mov	r3, r0
 8000942:	e111      	b.n	8000b68 <mbus_poll_response+0x318>
        }

        la = mbus_proto_address((Modbus_ConnectFuncType)ctx->header.func, (int *)&read);
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800094a:	f107 0208 	add.w	r2, r7, #8
 800094e:	4611      	mov	r1, r2
 8000950:	4618      	mov	r0, r3
 8000952:	f000 fb6d 	bl	8001030 <mbus_proto_address>
 8000956:	6278      	str	r0, [r7, #36]	@ 0x24
        if (la > 0)
 8000958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800095a:	2b00      	cmp	r3, #0
 800095c:	dd05      	ble.n	800096a <mbus_poll_response+0x11a>
        {
            la += ctx->header.addr;
 800095e:	693b      	ldr	r3, [r7, #16]
 8000960:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000962:	461a      	mov	r2, r3
 8000964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000966:	4413      	add	r3, r2
 8000968:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        if (la < 50001)
 800096a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800096c:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8000970:	4293      	cmp	r3, r2
 8000972:	f300 80f2 	bgt.w	8000b5a <mbus_poll_response+0x30a>
        {
            ctx->conf.sendbuf[0] = ctx->header.devaddr;
 8000976:	693b      	ldr	r3, [r7, #16]
 8000978:	699b      	ldr	r3, [r3, #24]
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 8000980:	701a      	strb	r2, [r3, #0]
            ctx->conf.sendbuf[1] = ctx->header.func;
 8000982:	693b      	ldr	r3, [r7, #16]
 8000984:	699b      	ldr	r3, [r3, #24]
 8000986:	3301      	adds	r3, #1
 8000988:	693a      	ldr	r2, [r7, #16]
 800098a:	f892 2031 	ldrb.w	r2, [r2, #49]	@ 0x31
 800098e:	701a      	strb	r2, [r3, #0]
            ctx->conf.sendbuf[2] = ctx->header.num * 2;
 8000990:	693b      	ldr	r3, [r7, #16]
 8000992:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000994:	b2da      	uxtb	r2, r3
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	699b      	ldr	r3, [r3, #24]
 800099a:	3302      	adds	r3, #2
 800099c:	0052      	lsls	r2, r2, #1
 800099e:	b2d2      	uxtb	r2, r2
 80009a0:	701a      	strb	r2, [r3, #0]
            if (read && ctx->conf.read)
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d04b      	beq.n	8000a40 <mbus_poll_response+0x1f0>
 80009a8:	693b      	ldr	r3, [r7, #16]
 80009aa:	691b      	ldr	r3, [r3, #16]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d047      	beq.n	8000a40 <mbus_poll_response+0x1f0>
            {
                g_userError = MBUS_RESPONSE_OK;
 80009b0:	4b4a      	ldr	r3, [pc, #296]	@ (8000adc <mbus_poll_response+0x28c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	701a      	strb	r2, [r3, #0]
                for (int i = 0; i < ctx->header.num; i++)
 80009b6:	2300      	movs	r3, #0
 80009b8:	623b      	str	r3, [r7, #32]
 80009ba:	e01f      	b.n	80009fc <mbus_poll_response+0x1ac>
                {

                    d = ctx->conf.read(la + i);
 80009bc:	693b      	ldr	r3, [r7, #16]
 80009be:	691b      	ldr	r3, [r3, #16]
 80009c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80009c2:	6a3a      	ldr	r2, [r7, #32]
 80009c4:	440a      	add	r2, r1
 80009c6:	4610      	mov	r0, r2
 80009c8:	4798      	blx	r3
 80009ca:	4603      	mov	r3, r0
 80009cc:	81fb      	strh	r3, [r7, #14]
                    ctx->conf.sendbuf[3 + (i << 1)] = d >> 8;
 80009ce:	89fb      	ldrh	r3, [r7, #14]
 80009d0:	0a1b      	lsrs	r3, r3, #8
 80009d2:	b299      	uxth	r1, r3
 80009d4:	693b      	ldr	r3, [r7, #16]
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	6a3a      	ldr	r2, [r7, #32]
 80009da:	0052      	lsls	r2, r2, #1
 80009dc:	3203      	adds	r2, #3
 80009de:	4413      	add	r3, r2
 80009e0:	b2ca      	uxtb	r2, r1
 80009e2:	701a      	strb	r2, [r3, #0]
                    ctx->conf.sendbuf[3 + (i << 1) + 1] = d & 0xFF;
 80009e4:	693b      	ldr	r3, [r7, #16]
 80009e6:	699a      	ldr	r2, [r3, #24]
 80009e8:	6a3b      	ldr	r3, [r7, #32]
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	3304      	adds	r3, #4
 80009ee:	4413      	add	r3, r2
 80009f0:	89fa      	ldrh	r2, [r7, #14]
 80009f2:	b2d2      	uxtb	r2, r2
 80009f4:	701a      	strb	r2, [r3, #0]
                for (int i = 0; i < ctx->header.num; i++)
 80009f6:	6a3b      	ldr	r3, [r7, #32]
 80009f8:	3301      	adds	r3, #1
 80009fa:	623b      	str	r3, [r7, #32]
 80009fc:	693b      	ldr	r3, [r7, #16]
 80009fe:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000a00:	461a      	mov	r2, r3
 8000a02:	6a3b      	ldr	r3, [r7, #32]
 8000a04:	4293      	cmp	r3, r2
 8000a06:	dbd9      	blt.n	80009bc <mbus_poll_response+0x16c>
                }
                if (g_userError == MBUS_RESPONSE_OK)
 8000a08:	4b34      	ldr	r3, [pc, #208]	@ (8000adc <mbus_poll_response+0x28c>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d10d      	bne.n	8000a2c <mbus_poll_response+0x1dc>
                {
                    return mbus_send_data(mb_context, 3 + ctx->conf.sendbuf[2]);
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	3302      	adds	r3, #2
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	3303      	adds	r3, #3
 8000a1a:	b29a      	uxth	r2, r3
 8000a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a20:	4611      	mov	r1, r2
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 fa9e 	bl	8000f64 <mbus_send_data>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	e09d      	b.n	8000b68 <mbus_poll_response+0x318>
                }
                else
                {
                    return mbus_response(mb_context, g_userError);
 8000a2c:	4b2b      	ldr	r3, [pc, #172]	@ (8000adc <mbus_poll_response+0x28c>)
 8000a2e:	781a      	ldrb	r2, [r3, #0]
 8000a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a34:	4611      	mov	r1, r2
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fef0 	bl	800081c <mbus_response>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	e093      	b.n	8000b68 <mbus_poll_response+0x318>
                }
            }
            else if (ctx->conf.write)
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	695b      	ldr	r3, [r3, #20]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	f000 8088 	beq.w	8000b5a <mbus_poll_response+0x30a>
            {
                uint16_t *value;
                ctx->conf.sendbuf[2] = 0;
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	3302      	adds	r3, #2
 8000a50:	2200      	movs	r2, #0
 8000a52:	701a      	strb	r2, [r3, #0]
                switch (ctx->header.func)
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8000a5a:	2b06      	cmp	r3, #6
 8000a5c:	dc02      	bgt.n	8000a64 <mbus_poll_response+0x214>
 8000a5e:	2b05      	cmp	r3, #5
 8000a60:	da03      	bge.n	8000a6a <mbus_poll_response+0x21a>
 8000a62:	e07a      	b.n	8000b5a <mbus_poll_response+0x30a>
 8000a64:	2b10      	cmp	r3, #16
 8000a66:	d030      	beq.n	8000aca <mbus_poll_response+0x27a>
 8000a68:	e077      	b.n	8000b5a <mbus_poll_response+0x30a>
                case MBUS_FUNC_WRITE_REG:
                case MBUS_FUNC_WRITE_COIL:
                    // in both these cases, we should return the same packet that we
                    // received. in both cases, the packes have 6 bytes of data + 2 CRC
                    // bytes = 8 bytes
                    value = (uint16_t *)ctx->conf.recvbuf;
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	6a1b      	ldr	r3, [r3, #32]
 8000a6e:	61fb      	str	r3, [r7, #28]
                    ctx->conf.write(la, *value);
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	695b      	ldr	r3, [r3, #20]
 8000a74:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000a76:	69fa      	ldr	r2, [r7, #28]
 8000a78:	8812      	ldrh	r2, [r2, #0]
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	4798      	blx	r3
                    ctx->conf.sendbuf[2] = ctx->header.addr >> 8;
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000a82:	0a1b      	lsrs	r3, r3, #8
 8000a84:	b29a      	uxth	r2, r3
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	3302      	adds	r3, #2
 8000a8c:	b2d2      	uxtb	r2, r2
 8000a8e:	701a      	strb	r2, [r3, #0]
                    ctx->conf.sendbuf[3] = ctx->header.addr & 0xFF;
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	3303      	adds	r3, #3
 8000a9a:	b2d2      	uxtb	r2, r2
 8000a9c:	701a      	strb	r2, [r3, #0]
                    ctx->conf.sendbuf[4] = ctx->conf.recvbuf[1];
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	6a1a      	ldr	r2, [r3, #32]
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	699b      	ldr	r3, [r3, #24]
 8000aa6:	3304      	adds	r3, #4
 8000aa8:	7852      	ldrb	r2, [r2, #1]
 8000aaa:	701a      	strb	r2, [r3, #0]
                    ctx->conf.sendbuf[5] = ctx->conf.recvbuf[0];
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	6a1a      	ldr	r2, [r3, #32]
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	3305      	adds	r3, #5
 8000ab6:	7812      	ldrb	r2, [r2, #0]
 8000ab8:	701a      	strb	r2, [r3, #0]
                    return mbus_send_data(mb_context, 6);
 8000aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abe:	2106      	movs	r1, #6
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f000 fa4f 	bl	8000f64 <mbus_send_data>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	e04e      	b.n	8000b68 <mbus_poll_response+0x318>

                case MBUS_FUNC_WRITE_REGS:
                    value = (uint16_t *)ctx->conf.recvbuf;
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	6a1b      	ldr	r3, [r3, #32]
 8000ace:	61fb      	str	r3, [r7, #28]
                    for (int i = 0; i < ctx->header.num; i++)
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61bb      	str	r3, [r7, #24]
 8000ad4:	e013      	b.n	8000afe <mbus_poll_response+0x2ae>
 8000ad6:	bf00      	nop
 8000ad8:	20000274 	.word	0x20000274
 8000adc:	200002b8 	.word	0x200002b8
                    {
                        ctx->conf.write(la + i, *value++);
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	695a      	ldr	r2, [r3, #20]
 8000ae4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000ae6:	69bb      	ldr	r3, [r7, #24]
 8000ae8:	440b      	add	r3, r1
 8000aea:	4618      	mov	r0, r3
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	1c99      	adds	r1, r3, #2
 8000af0:	61f9      	str	r1, [r7, #28]
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	4619      	mov	r1, r3
 8000af6:	4790      	blx	r2
                    for (int i = 0; i < ctx->header.num; i++)
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	3301      	adds	r3, #1
 8000afc:	61bb      	str	r3, [r7, #24]
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000b02:	461a      	mov	r2, r3
 8000b04:	69bb      	ldr	r3, [r7, #24]
 8000b06:	4293      	cmp	r3, r2
 8000b08:	dbea      	blt.n	8000ae0 <mbus_poll_response+0x290>
                    }
                    ctx->conf.sendbuf[2] = ctx->header.addr >> 8;
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000b0e:	0a1b      	lsrs	r3, r3, #8
 8000b10:	b29a      	uxth	r2, r3
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	699b      	ldr	r3, [r3, #24]
 8000b16:	3302      	adds	r3, #2
 8000b18:	b2d2      	uxtb	r2, r2
 8000b1a:	701a      	strb	r2, [r3, #0]
                    ctx->conf.sendbuf[3] = ctx->header.addr & 0xFF;
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	3303      	adds	r3, #3
 8000b26:	b2d2      	uxtb	r2, r2
 8000b28:	701a      	strb	r2, [r3, #0]
                    ctx->conf.sendbuf[4] = ctx->header.num >> 8;
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000b2e:	0a1b      	lsrs	r3, r3, #8
 8000b30:	b29a      	uxth	r2, r3
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	699b      	ldr	r3, [r3, #24]
 8000b36:	3304      	adds	r3, #4
 8000b38:	b2d2      	uxtb	r2, r2
 8000b3a:	701a      	strb	r2, [r3, #0]
                    ctx->conf.sendbuf[5] = ctx->header.num & 0xFF;
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	3305      	adds	r3, #5
 8000b46:	b2d2      	uxtb	r2, r2
 8000b48:	701a      	strb	r2, [r3, #0]
                    return mbus_send_data(mb_context, 6);
 8000b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4e:	2106      	movs	r1, #6
 8000b50:	4618      	mov	r0, r3
 8000b52:	f000 fa07 	bl	8000f64 <mbus_send_data>
 8000b56:	4603      	mov	r3, r0
 8000b58:	e006      	b.n	8000b68 <mbus_poll_response+0x318>
                } // end of switch
            }
        }
        return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_FUNCTION);
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	2101      	movs	r1, #1
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff fe5b 	bl	800081c <mbus_response>
 8000b66:	4603      	mov	r3, r0
    }
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3728      	adds	r7, #40	@ 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <mbus_poll>:
     * function mbus_close()
     * close modbus context
     * return: none
     */
    mbus_status_t mbus_poll(mbus_t mb_context, uint8_t byte)
    {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	460a      	mov	r2, r1
 8000b7a:	71fb      	strb	r3, [r7, #7]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	71bb      	strb	r3, [r7, #6]
        // State machine
        _stmodbus_context_t *ctx = &g_mbusContext[mb_context];
 8000b80:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000b84:	4613      	mov	r3, r2
 8000b86:	011b      	lsls	r3, r3, #4
 8000b88:	4413      	add	r3, r2
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	4ab1      	ldr	r2, [pc, #708]	@ (8000e54 <mbus_poll+0x2e4>)
 8000b8e:	4413      	add	r3, r2
 8000b90:	60fb      	str	r3, [r7, #12]

        if (mbus_tickcount() - ctx->timer > 4)
 8000b92:	f7ff fb27 	bl	80001e4 <mbus_tickcount>
 8000b96:	4602      	mov	r2, r0
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	2b04      	cmp	r3, #4
 8000ba0:	d904      	bls.n	8000bac <mbus_poll+0x3c>
        {
            mbus_flush(mb_context);
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff fe12 	bl	80007d0 <mbus_flush>
        }
        ctx->timer = mbus_tickcount();
 8000bac:	f7ff fb1a 	bl	80001e4 <mbus_tickcount>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	62da      	str	r2, [r3, #44]	@ 0x2c

        switch (ctx->state)
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8000bbc:	2b0e      	cmp	r3, #14
 8000bbe:	f200 8153 	bhi.w	8000e68 <mbus_poll+0x2f8>
 8000bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8000bc8 <mbus_poll+0x58>)
 8000bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc8:	08000c05 	.word	0x08000c05
 8000bcc:	08000e69 	.word	0x08000e69
 8000bd0:	08000c21 	.word	0x08000c21
 8000bd4:	08000cf5 	.word	0x08000cf5
 8000bd8:	08000cdf 	.word	0x08000cdf
 8000bdc:	08000dfb 	.word	0x08000dfb
 8000be0:	08000de5 	.word	0x08000de5
 8000be4:	08000d4d 	.word	0x08000d4d
 8000be8:	08000d29 	.word	0x08000d29
 8000bec:	08000d8d 	.word	0x08000d8d
 8000bf0:	08000da7 	.word	0x08000da7
 8000bf4:	08000e49 	.word	0x08000e49
 8000bf8:	08000e59 	.word	0x08000e59
 8000bfc:	08000e69 	.word	0x08000e69
 8000c00:	08000e63 	.word	0x08000e63
        {
        case MBUS_STATE_IDLE:
            mbus_flush(mb_context);
 8000c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fde1 	bl	80007d0 <mbus_flush>
            ctx->state = MBUS_STATE_FUNCTION;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	2202      	movs	r2, #2
 8000c12:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
            ctx->header.devaddr = byte;
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	79ba      	ldrb	r2, [r7, #6]
 8000c1a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
            break;
 8000c1e:	e12c      	b.n	8000e7a <mbus_poll+0x30a>
        case MBUS_STATE_FUNCTION:
            ctx->header.func = byte;
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	79ba      	ldrb	r2, [r7, #6]
 8000c24:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
            switch (byte)
 8000c28:	79bb      	ldrb	r3, [r7, #6]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	2b0f      	cmp	r3, #15
 8000c2e:	d84f      	bhi.n	8000cd0 <mbus_poll+0x160>
 8000c30:	a201      	add	r2, pc, #4	@ (adr r2, 8000c38 <mbus_poll+0xc8>)
 8000c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c36:	bf00      	nop
 8000c38:	08000ca5 	.word	0x08000ca5
 8000c3c:	08000cd1 	.word	0x08000cd1
 8000c40:	08000ca5 	.word	0x08000ca5
 8000c44:	08000ca5 	.word	0x08000ca5
 8000c48:	08000cbb 	.word	0x08000cbb
 8000c4c:	08000c79 	.word	0x08000c79
 8000c50:	08000cd1 	.word	0x08000cd1
 8000c54:	08000cd1 	.word	0x08000cd1
 8000c58:	08000cd1 	.word	0x08000cd1
 8000c5c:	08000cd1 	.word	0x08000cd1
 8000c60:	08000cd1 	.word	0x08000cd1
 8000c64:	08000cd1 	.word	0x08000cd1
 8000c68:	08000cd1 	.word	0x08000cd1
 8000c6c:	08000cd1 	.word	0x08000cd1
 8000c70:	08000c8f 	.word	0x08000c8f
 8000c74:	08000c8f 	.word	0x08000c8f
            {
            case MBUS_FUNC_WRITE_REG:
                ctx->header.rnum = 1;
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	86da      	strh	r2, [r3, #54]	@ 0x36
                ctx->header.num = 1;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	2201      	movs	r2, #1
 8000c82:	869a      	strh	r2, [r3, #52]	@ 0x34
                ctx->state = MBUS_STATE_REGADDR_HI;
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	2204      	movs	r2, #4
 8000c88:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
                break;
 8000c8c:	e026      	b.n	8000cdc <mbus_poll+0x16c>
            case MBUS_FUNC_WRITE_REGS:
            case MBUS_FUNC_WRITE_COILS:
                ctx->header.rnum = 1;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	2201      	movs	r2, #1
 8000c92:	86da      	strh	r2, [r3, #54]	@ 0x36
                ctx->header.num = 0;
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	2200      	movs	r2, #0
 8000c98:	869a      	strh	r2, [r3, #52]	@ 0x34
                ctx->state = MBUS_STATE_REGADDR_HI;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	2204      	movs	r2, #4
 8000c9e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
                break;
 8000ca2:	e01b      	b.n	8000cdc <mbus_poll+0x16c>
            case MBUS_FUNC_READ_INPUT_REGS:
            case MBUS_FUNC_READ_COILS:
            case MBUS_FUNC_READ_REGS:
                ctx->state = MBUS_STATE_REGADDR_HI;
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	2204      	movs	r2, #4
 8000ca8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
                ctx->header.rnum = 0;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	86da      	strh	r2, [r3, #54]	@ 0x36
                ctx->header.num = 0;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	869a      	strh	r2, [r3, #52]	@ 0x34
                break;
 8000cb8:	e010      	b.n	8000cdc <mbus_poll+0x16c>
            case MBUS_FUNC_WRITE_COIL:
                ctx->header.rnum = 1;
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	86da      	strh	r2, [r3, #54]	@ 0x36
                ctx->header.num = 1;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	869a      	strh	r2, [r3, #52]	@ 0x34
                ctx->state = MBUS_STATE_REGADDR_HI;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	2204      	movs	r2, #4
 8000cca:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
                break;
 8000cce:	e005      	b.n	8000cdc <mbus_poll+0x16c>
            default:
                // ctx->state = MBUS_STATE_IDLE;
                mbus_flush(mb_context);
 8000cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fd7b 	bl	80007d0 <mbus_flush>
                break;
 8000cda:	bf00      	nop
            }
            break;
 8000cdc:	e0cd      	b.n	8000e7a <mbus_poll+0x30a>
        case MBUS_STATE_REGADDR_HI:
            ctx->state = MBUS_STATE_REGADDR_LO;
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
            ctx->header.addr = byte << 8;
 8000ce6:	79bb      	ldrb	r3, [r7, #6]
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	021b      	lsls	r3, r3, #8
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	865a      	strh	r2, [r3, #50]	@ 0x32
            break;
 8000cf2:	e0c2      	b.n	8000e7a <mbus_poll+0x30a>
        case MBUS_STATE_REGADDR_LO:
            ctx->header.addr |= byte;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8000cf8:	79bb      	ldrb	r3, [r7, #6]
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	865a      	strh	r2, [r3, #50]	@ 0x32
            if (ctx->header.num == 1 && ctx->header.rnum == 1)
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d108      	bne.n	8000d1e <mbus_poll+0x1ae>
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d104      	bne.n	8000d1e <mbus_poll+0x1ae>
            {
                ctx->state = MBUS_STATE_DATA_HI;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	2208      	movs	r2, #8
 8000d18:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
            }
            else
            {
                ctx->state = MBUS_STATE_REGNUM_HI;
            }
            break;
 8000d1c:	e0ad      	b.n	8000e7a <mbus_poll+0x30a>
                ctx->state = MBUS_STATE_REGNUM_HI;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	2206      	movs	r2, #6
 8000d22:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
            break;
 8000d26:	e0a8      	b.n	8000e7a <mbus_poll+0x30a>
        case MBUS_STATE_DATA_HI:
            ctx->state = MBUS_STATE_DATA_LO;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	2207      	movs	r2, #7
 8000d2c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
            ctx->conf.recvbuf[2 * (ctx->header.num - ctx->header.rnum) + 1] = byte;
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	6a1a      	ldr	r2, [r3, #32]
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000d38:	4619      	mov	r1, r3
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000d3e:	1acb      	subs	r3, r1, r3
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	3301      	adds	r3, #1
 8000d44:	4413      	add	r3, r2
 8000d46:	79ba      	ldrb	r2, [r7, #6]
 8000d48:	701a      	strb	r2, [r3, #0]
            break;
 8000d4a:	e096      	b.n	8000e7a <mbus_poll+0x30a>
        case MBUS_STATE_DATA_LO:
            ctx->conf.recvbuf[2 * (ctx->header.num - ctx->header.rnum)] = byte;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	6a1b      	ldr	r3, [r3, #32]
 8000d50:	68fa      	ldr	r2, [r7, #12]
 8000d52:	8e92      	ldrh	r2, [r2, #52]	@ 0x34
 8000d54:	4611      	mov	r1, r2
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	8ed2      	ldrh	r2, [r2, #54]	@ 0x36
 8000d5a:	1a8a      	subs	r2, r1, r2
 8000d5c:	0052      	lsls	r2, r2, #1
 8000d5e:	4413      	add	r3, r2
 8000d60:	79ba      	ldrb	r2, [r7, #6]
 8000d62:	701a      	strb	r2, [r3, #0]
            ctx->header.rnum--;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	86da      	strh	r2, [r3, #54]	@ 0x36
            if (ctx->header.rnum == 0)
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d104      	bne.n	8000d82 <mbus_poll+0x212>
            {
                ctx->state = MBUS_STATE_CRC_LO;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	220b      	movs	r2, #11
 8000d7c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
            }
            else
            {
                ctx->state = MBUS_STATE_DATA_HI;
            }
            break;
 8000d80:	e07b      	b.n	8000e7a <mbus_poll+0x30a>
                ctx->state = MBUS_STATE_DATA_HI;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	2208      	movs	r2, #8
 8000d86:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
            break;
 8000d8a:	e076      	b.n	8000e7a <mbus_poll+0x30a>
        case MBUS_STATE_DATA_SIZE:
            ctx->state = MBUS_STATE_DATA;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	220a      	movs	r2, #10
 8000d90:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
            ctx->header.size = byte;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	79ba      	ldrb	r2, [r7, #6]
 8000d98:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            ctx->header.rsize = byte;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	79ba      	ldrb	r2, [r7, #6]
 8000da0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            break;
 8000da4:	e069      	b.n	8000e7a <mbus_poll+0x30a>
        case MBUS_STATE_DATA:
            ctx->conf.recvbuf[ctx->header.size - ctx->header.rsize] = byte;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	6a1b      	ldr	r3, [r3, #32]
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	f892 2038 	ldrb.w	r2, [r2, #56]	@ 0x38
 8000db0:	4611      	mov	r1, r2
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 8000db8:	1a8a      	subs	r2, r1, r2
 8000dba:	4413      	add	r3, r2
 8000dbc:	79ba      	ldrb	r2, [r7, #6]
 8000dbe:	701a      	strb	r2, [r3, #0]
            ctx->header.rsize--;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            if (ctx->header.rsize == 0)
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d14c      	bne.n	8000e74 <mbus_poll+0x304>
            {
                ctx->state = MBUS_STATE_CRC_LO;
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	220b      	movs	r2, #11
 8000dde:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
            }
            break;
 8000de2:	e047      	b.n	8000e74 <mbus_poll+0x304>
        case MBUS_STATE_REGNUM_HI:
            ctx->state = MBUS_STATE_REGNUM_LO;
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	2205      	movs	r2, #5
 8000de8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
            ctx->header.num = byte << 8;
 8000dec:	79bb      	ldrb	r3, [r7, #6]
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	021b      	lsls	r3, r3, #8
 8000df2:	b29a      	uxth	r2, r3
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	869a      	strh	r2, [r3, #52]	@ 0x34
            break;
 8000df8:	e03f      	b.n	8000e7a <mbus_poll+0x30a>
        case MBUS_STATE_REGNUM_LO:
            ctx->state = MBUS_STATE_CRC_LO;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	220b      	movs	r2, #11
 8000dfe:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
            ctx->header.num |= byte;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8000e06:	79bb      	ldrb	r3, [r7, #6]
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	b29a      	uxth	r2, r3
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	869a      	strh	r2, [r3, #52]	@ 0x34
            if (ctx->header.rnum == 0)
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d104      	bne.n	8000e24 <mbus_poll+0x2b4>
            {
                ctx->state = MBUS_STATE_CRC_LO;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	220b      	movs	r2, #11
 8000e1e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
                {
                    ctx->state = MBUS_STATE_DATA_SIZE;
                }
            }

            break;
 8000e22:	e029      	b.n	8000e78 <mbus_poll+0x308>
                ctx->header.rnum = ctx->header.num;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	86da      	strh	r2, [r3, #54]	@ 0x36
                ctx->state = MBUS_STATE_DATA_HI;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	2208      	movs	r2, #8
 8000e30:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
                if (ctx->header.func == MBUS_FUNC_WRITE_REGS)
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8000e3a:	2b10      	cmp	r3, #16
 8000e3c:	d11c      	bne.n	8000e78 <mbus_poll+0x308>
                    ctx->state = MBUS_STATE_DATA_SIZE;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	2209      	movs	r2, #9
 8000e42:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
            break;
 8000e46:	e017      	b.n	8000e78 <mbus_poll+0x308>
        case MBUS_STATE_CRC_LO:
            ctx->state = MBUS_STATE_CRC_HI;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	220c      	movs	r2, #12
 8000e4c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
            break;
 8000e50:	e013      	b.n	8000e7a <mbus_poll+0x30a>
 8000e52:	bf00      	nop
 8000e54:	20000274 	.word	0x20000274
        case MBUS_STATE_CRC_HI:
            ctx->state = MBUS_STATE_FINISH;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	220d      	movs	r2, #13
 8000e5c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
            break;
 8000e60:	e00b      	b.n	8000e7a <mbus_poll+0x30a>
        // We can't processing any more before callback not returned
        case MBUS_STATE_RESPONSE:
            return MBUS_ERROR;
 8000e62:	f04f 33ff 	mov.w	r3, #4294967295
 8000e66:	e04c      	b.n	8000f02 <mbus_poll+0x392>
        default:
            mbus_flush(mb_context);
 8000e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fcaf 	bl	80007d0 <mbus_flush>
            break;
 8000e72:	e002      	b.n	8000e7a <mbus_poll+0x30a>
            break;
 8000e74:	bf00      	nop
 8000e76:	e000      	b.n	8000e7a <mbus_poll+0x30a>
            break;
 8000e78:	bf00      	nop
        }

        ctx->crc16 = mbus_crc16(ctx->crc16, byte);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000e7e:	79ba      	ldrb	r2, [r7, #6]
 8000e80:	4611      	mov	r1, r2
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fc24 	bl	80006d0 <mbus_crc16>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (ctx->state == MBUS_STATE_FINISH)
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8000e96:	2b0d      	cmp	r3, #13
 8000e98:	d132      	bne.n	8000f00 <mbus_poll+0x390>
        {
            // CRC error
            if (ctx->crc16 != 0)
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d007      	beq.n	8000eb2 <mbus_poll+0x342>
            {
                mbus_flush(mb_context);
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fc92 	bl	80007d0 <mbus_flush>
                return MBUS_ERROR;
 8000eac:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb0:	e027      	b.n	8000f02 <mbus_poll+0x392>
            }

            // TODO: Add broadcast messages
            if (ctx->header.devaddr == ctx->conf.devaddr)
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d11a      	bne.n	8000ef6 <mbus_poll+0x386>
            {
                ctx->state = MBUS_STATE_RESPONSE;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	220e      	movs	r2, #14
 8000ec4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
                if (mbus_poll_response(mb_context) == MBUS_OK)
 8000ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fcbf 	bl	8000850 <mbus_poll_response>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d106      	bne.n	8000ee6 <mbus_poll+0x376>
                {
                    mbus_flush(mb_context);
 8000ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fc77 	bl	80007d0 <mbus_flush>
                    return MBUS_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	e00d      	b.n	8000f02 <mbus_poll+0x392>
                }
                mbus_flush(mb_context);
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fc70 	bl	80007d0 <mbus_flush>
                return MBUS_ERROR;
 8000ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef4:	e005      	b.n	8000f02 <mbus_poll+0x392>
            }
            mbus_flush(mb_context);
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fc68 	bl	80007d0 <mbus_flush>
        }
        return MBUS_OK;
 8000f00:	2300      	movs	r3, #0
    }
 8000f02:	4618      	mov	r0, r3
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop

08000f0c <mbus_send_error>:
            return (mbus_context_t)&g_mbusContext[mb_context];
        return 0;
    }

    mbus_status_t mbus_send_error(mbus_t mb_context, Modbus_ResponseType response)
    {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	460a      	mov	r2, r1
 8000f16:	71fb      	strb	r3, [r7, #7]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	71bb      	strb	r3, [r7, #6]
        uint16_t *pbuf = (uint16_t *)(g_mbusContext[mb_context].conf.sendbuf + 2);
 8000f1c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000f20:	490e      	ldr	r1, [pc, #56]	@ (8000f5c <mbus_send_error+0x50>)
 8000f22:	4613      	mov	r3, r2
 8000f24:	011b      	lsls	r3, r3, #4
 8000f26:	4413      	add	r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	3318      	adds	r3, #24
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	3302      	adds	r3, #2
 8000f32:	60fb      	str	r3, [r7, #12]
        *pbuf = 0x8300 | (uint8_t)response;
 8000f34:	79bb      	ldrb	r3, [r7, #6]
 8000f36:	b21a      	sxth	r2, r3
 8000f38:	4b09      	ldr	r3, [pc, #36]	@ (8000f60 <mbus_send_error+0x54>)
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	b21b      	sxth	r3, r3
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	801a      	strh	r2, [r3, #0]
        return mbus_send_data(mb_context, 4);
 8000f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f48:	2104      	movs	r1, #4
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 f80a 	bl	8000f64 <mbus_send_data>
 8000f50:	4603      	mov	r3, r0
    }
 8000f52:	4618      	mov	r0, r3
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000274 	.word	0x20000274
 8000f60:	ffff8300 	.word	0xffff8300

08000f64 <mbus_send_data>:

    mbus_status_t mbus_send_data(mbus_t mb_context, uint16_t size)
    {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	460a      	mov	r2, r1
 8000f6e:	71fb      	strb	r3, [r7, #7]
 8000f70:	4613      	mov	r3, r2
 8000f72:	80bb      	strh	r3, [r7, #4]
        // if size > ( conf.send_sz-2) error
        uint16_t crc32 = 0xFFFF;
 8000f74:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f78:	82fb      	strh	r3, [r7, #22]
        const _stmodbus_context_t *ctx = &g_mbusContext[mb_context];
 8000f7a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	011b      	lsls	r3, r3, #4
 8000f82:	4413      	add	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	4a29      	ldr	r2, [pc, #164]	@ (800102c <mbus_send_data+0xc8>)
 8000f88:	4413      	add	r3, r2
 8000f8a:	60fb      	str	r3, [r7, #12]
        uint8_t *pbuf = ctx->conf.sendbuf;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	60bb      	str	r3, [r7, #8]
        if (ctx->conf.send == 0 || pbuf == 0 || ctx->conf.sendbuf_sz < (size + 2))
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	68db      	ldr	r3, [r3, #12]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d008      	beq.n	8000fac <mbus_send_data+0x48>
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d005      	beq.n	8000fac <mbus_send_data+0x48>
 8000fa0:	88bb      	ldrh	r3, [r7, #4]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	68fa      	ldr	r2, [r7, #12]
 8000fa6:	8b92      	ldrh	r2, [r2, #28]
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	db02      	blt.n	8000fb2 <mbus_send_data+0x4e>
            return MBUS_ERROR;
 8000fac:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb0:	e037      	b.n	8001022 <mbus_send_data+0xbe>
        for (int i = 0; i < size; i++)
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	e00d      	b.n	8000fd4 <mbus_send_data+0x70>
        {
            crc32 = mbus_crc16(crc32, pbuf[i]);
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	781a      	ldrb	r2, [r3, #0]
 8000fc0:	8afb      	ldrh	r3, [r7, #22]
 8000fc2:	4611      	mov	r1, r2
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fb83 	bl	80006d0 <mbus_crc16>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	82fb      	strh	r3, [r7, #22]
        for (int i = 0; i < size; i++)
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	88bb      	ldrh	r3, [r7, #4]
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	dbed      	blt.n	8000fb8 <mbus_send_data+0x54>
        }
        pbuf[size++] = crc32 & 0xFF;
 8000fdc:	88bb      	ldrh	r3, [r7, #4]
 8000fde:	1c5a      	adds	r2, r3, #1
 8000fe0:	80ba      	strh	r2, [r7, #4]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	8afa      	ldrh	r2, [r7, #22]
 8000fea:	b2d2      	uxtb	r2, r2
 8000fec:	701a      	strb	r2, [r3, #0]
        pbuf[size++] = (crc32 >> 8);
 8000fee:	8afb      	ldrh	r3, [r7, #22]
 8000ff0:	0a1b      	lsrs	r3, r3, #8
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	88bb      	ldrh	r3, [r7, #4]
 8000ff6:	1c59      	adds	r1, r3, #1
 8000ff8:	80b9      	strh	r1, [r7, #4]
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	440b      	add	r3, r1
 8001000:	b2d2      	uxtb	r2, r2
 8001002:	701a      	strb	r2, [r3, #0]

        if (ctx->conf.send(mb_context, pbuf, size) != size)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	88ba      	ldrh	r2, [r7, #4]
 800100a:	f997 0007 	ldrsb.w	r0, [r7, #7]
 800100e:	68b9      	ldr	r1, [r7, #8]
 8001010:	4798      	blx	r3
 8001012:	4602      	mov	r2, r0
 8001014:	88bb      	ldrh	r3, [r7, #4]
 8001016:	429a      	cmp	r2, r3
 8001018:	d002      	beq.n	8001020 <mbus_send_data+0xbc>
            return MBUS_ERROR;
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	e000      	b.n	8001022 <mbus_send_data+0xbe>
        return MBUS_OK;
 8001020:	2300      	movs	r3, #0
    }
 8001022:	4618      	mov	r0, r3
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000274 	.word	0x20000274

08001030 <mbus_proto_address>:
#endif
        return MBUS_ERROR;
    }

    int mbus_proto_address(Modbus_ConnectFuncType func, int *r)
    {
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	71fb      	strb	r3, [r7, #7]
        int adr = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	60fb      	str	r3, [r7, #12]
        *r = 1;
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	2201      	movs	r2, #1
 8001044:	601a      	str	r2, [r3, #0]
        switch (func)
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	2b17      	cmp	r3, #23
 800104a:	dc3f      	bgt.n	80010cc <mbus_proto_address+0x9c>
 800104c:	2b04      	cmp	r3, #4
 800104e:	da08      	bge.n	8001062 <mbus_proto_address+0x32>
 8001050:	2b03      	cmp	r3, #3
 8001052:	d029      	beq.n	80010a8 <mbus_proto_address+0x78>
 8001054:	2b03      	cmp	r3, #3
 8001056:	dc39      	bgt.n	80010cc <mbus_proto_address+0x9c>
 8001058:	2b01      	cmp	r3, #1
 800105a:	d034      	beq.n	80010c6 <mbus_proto_address+0x96>
 800105c:	2b02      	cmp	r3, #2
 800105e:	d02b      	beq.n	80010b8 <mbus_proto_address+0x88>
            *r = 0;
        case MBUS_FUNC_READ_COILS:
            adr = 0001;
            break;
        default:
            break;
 8001060:	e034      	b.n	80010cc <mbus_proto_address+0x9c>
        switch (func)
 8001062:	461a      	mov	r2, r3
 8001064:	2301      	movs	r3, #1
 8001066:	4093      	lsls	r3, r2
 8001068:	4a1c      	ldr	r2, [pc, #112]	@ (80010dc <mbus_proto_address+0xac>)
 800106a:	401a      	ands	r2, r3
 800106c:	2a00      	cmp	r2, #0
 800106e:	bf14      	ite	ne
 8001070:	2201      	movne	r2, #1
 8001072:	2200      	moveq	r2, #0
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	2a00      	cmp	r2, #0
 8001078:	d113      	bne.n	80010a2 <mbus_proto_address+0x72>
 800107a:	f248 0220 	movw	r2, #32800	@ 0x8020
 800107e:	401a      	ands	r2, r3
 8001080:	2a00      	cmp	r2, #0
 8001082:	bf14      	ite	ne
 8001084:	2201      	movne	r2, #1
 8001086:	2200      	moveq	r2, #0
 8001088:	b2d2      	uxtb	r2, r2
 800108a:	2a00      	cmp	r2, #0
 800108c:	d118      	bne.n	80010c0 <mbus_proto_address+0x90>
 800108e:	f003 0310 	and.w	r3, r3, #16
 8001092:	2b00      	cmp	r3, #0
 8001094:	bf14      	ite	ne
 8001096:	2301      	movne	r3, #1
 8001098:	2300      	moveq	r3, #0
 800109a:	b2db      	uxtb	r3, r3
 800109c:	2b00      	cmp	r3, #0
 800109e:	d107      	bne.n	80010b0 <mbus_proto_address+0x80>
            break;
 80010a0:	e014      	b.n	80010cc <mbus_proto_address+0x9c>
            *r = 0;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
            adr = 40001;
 80010a8:	f649 4341 	movw	r3, #40001	@ 0x9c41
 80010ac:	60fb      	str	r3, [r7, #12]
            break;
 80010ae:	e00e      	b.n	80010ce <mbus_proto_address+0x9e>
            adr = 30001;
 80010b0:	f247 5331 	movw	r3, #30001	@ 0x7531
 80010b4:	60fb      	str	r3, [r7, #12]
            break;
 80010b6:	e00a      	b.n	80010ce <mbus_proto_address+0x9e>
            adr = 10001;
 80010b8:	f242 7311 	movw	r3, #10001	@ 0x2711
 80010bc:	60fb      	str	r3, [r7, #12]
            break;
 80010be:	e006      	b.n	80010ce <mbus_proto_address+0x9e>
            *r = 0;
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
            adr = 0001;
 80010c6:	2301      	movs	r3, #1
 80010c8:	60fb      	str	r3, [r7, #12]
            break;
 80010ca:	e000      	b.n	80010ce <mbus_proto_address+0x9e>
            break;
 80010cc:	bf00      	nop
        }
        return adr;
 80010ce:	68fb      	ldr	r3, [r7, #12]
    }
 80010d0:	4618      	mov	r0, r3
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	00c10040 	.word	0x00c10040

080010e0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80010e4:	f3bf 8f4f 	dsb	sy
}
 80010e8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80010ea:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <__NVIC_SystemReset+0x24>)
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80010f2:	4904      	ldr	r1, [pc, #16]	@ (8001104 <__NVIC_SystemReset+0x24>)
 80010f4:	4b04      	ldr	r3, [pc, #16]	@ (8001108 <__NVIC_SystemReset+0x28>)
 80010f6:	4313      	orrs	r3, r2
 80010f8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80010fa:	f3bf 8f4f 	dsb	sy
}
 80010fe:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001100:	bf00      	nop
 8001102:	e7fd      	b.n	8001100 <__NVIC_SystemReset+0x20>
 8001104:	e000ed00 	.word	0xe000ed00
 8001108:	05fa0004 	.word	0x05fa0004

0800110c <Float_To_ModbusRegister>:
 * @param  value: Float value to convert
 * @param  scale: Scaling factor (e.g., 100 for 2 decimal places)
 * @retval Scaled integer value
 */
static uint16_t Float_To_ModbusRegister(float value, float scale)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	ed87 0a01 	vstr	s0, [r7, #4]
 8001116:	edc7 0a00 	vstr	s1, [r7]
    // Handle invalid values
    if (isnan(value) || isinf(value))
 800111a:	ed97 7a01 	vldr	s14, [r7, #4]
 800111e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001122:	eeb4 7a67 	vcmp.f32	s14, s15
 8001126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112a:	d612      	bvs.n	8001152 <Float_To_ModbusRegister+0x46>
 800112c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001130:	eef0 7ae7 	vabs.f32	s15, s15
 8001134:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001194 <Float_To_ModbusRegister+0x88>
 8001138:	eef4 7a47 	vcmp.f32	s15, s14
 800113c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001140:	bfd4      	ite	le
 8001142:	2301      	movle	r3, #1
 8001144:	2300      	movgt	r3, #0
 8001146:	b2db      	uxtb	r3, r3
 8001148:	f083 0301 	eor.w	r3, r3, #1
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <Float_To_ModbusRegister+0x4a>
        return 0;
 8001152:	2300      	movs	r3, #0
 8001154:	e018      	b.n	8001188 <Float_To_ModbusRegister+0x7c>

    // Scale and clamp to 16-bit range
    int32_t scaled = (int32_t)(value * scale);
 8001156:	ed97 7a01 	vldr	s14, [r7, #4]
 800115a:	edd7 7a00 	vldr	s15, [r7]
 800115e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001162:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001166:	ee17 3a90 	vmov	r3, s15
 800116a:	60fb      	str	r3, [r7, #12]
    if (scaled < 0)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2b00      	cmp	r3, #0
 8001170:	da01      	bge.n	8001176 <Float_To_ModbusRegister+0x6a>
        scaled = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
    if (scaled > 65535)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800117c:	db02      	blt.n	8001184 <Float_To_ModbusRegister+0x78>
        scaled = 65535;
 800117e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001182:	60fb      	str	r3, [r7, #12]

    return (uint16_t)scaled;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	b29b      	uxth	r3, r3
}
 8001188:	4618      	mov	r0, r3
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	7f7fffff 	.word	0x7f7fffff

08001198 <Modbus_Device_Read>:
 * @brief  Modbus device read callback
 * @param  logical_address: Modbus logical address (40001, 40002, etc.)
 * @retval Register value
 */
uint16_t Modbus_Device_Read(uint32_t logical_address)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
    // Simple direct array access like the sample code
    if (logical_address >= 40001 && logical_address <= 40020)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f649 4240 	movw	r2, #40000	@ 0x9c40
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d911      	bls.n	80011ce <Modbus_Device_Read+0x36>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f649 4254 	movw	r2, #40020	@ 0x9c54
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d80c      	bhi.n	80011ce <Modbus_Device_Read+0x36>
    {
        uint16_t index = logical_address - 40001;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	f503 43c7 	add.w	r3, r3, #25472	@ 0x6380
 80011bc:	333f      	adds	r3, #63	@ 0x3f
 80011be:	81fb      	strh	r3, [r7, #14]
        uint16_t value = device_registers[index];
 80011c0:	89fb      	ldrh	r3, [r7, #14]
 80011c2:	4a06      	ldr	r2, [pc, #24]	@ (80011dc <Modbus_Device_Read+0x44>)
 80011c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011c8:	81bb      	strh	r3, [r7, #12]

        // Debug: Show what we're returning for ALL registers
        // printf("READ: addr=%lu, index=%d, returning %d (0x%04X)\n", logical_address, index, value, value); // Removed to prevent timeouts

        return value;
 80011ca:	89bb      	ldrh	r3, [r7, #12]
 80011cc:	e000      	b.n	80011d0 <Modbus_Device_Read+0x38>
    }

    return 0; // Invalid address
 80011ce:	2300      	movs	r3, #0
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	200002bc 	.word	0x200002bc

080011e0 <Modbus_Device_Write>:
 * @param  logical_address: Modbus logical address (40001, 40002, etc.)
 * @param  value: Value to write
 * @retval Written value
 */
uint16_t Modbus_Device_Write(uint32_t logical_address, uint16_t value)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	807b      	strh	r3, [r7, #2]
    // Convert logical address to array index
    if (logical_address >= 40001 && logical_address <= 40020)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f649 4240 	movw	r2, #40000	@ 0x9c40
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d92e      	bls.n	8001254 <Modbus_Device_Write+0x74>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f649 4254 	movw	r2, #40020	@ 0x9c54
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d829      	bhi.n	8001254 <Modbus_Device_Write+0x74>
    {
        uint16_t index = logical_address - 40001;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	b29b      	uxth	r3, r3
 8001204:	f503 43c7 	add.w	r3, r3, #25472	@ 0x6380
 8001208:	333f      	adds	r3, #63	@ 0x3f
 800120a:	81fb      	strh	r3, [r7, #14]

        // Handle special write operations for configuration registers
        switch (logical_address)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f649 4253 	movw	r2, #40019	@ 0x9c53
 8001212:	4293      	cmp	r3, r2
 8001214:	d005      	beq.n	8001222 <Modbus_Device_Write+0x42>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f649 4254 	movw	r2, #40020	@ 0x9c54
 800121c:	4293      	cmp	r3, r2
 800121e:	d007      	beq.n	8001230 <Modbus_Device_Write+0x50>
                Sensors_UpdateAll();
            }
            break;
        default:
            // Store value for other registers (allows testing)
            break;
 8001220:	e011      	b.n	8001246 <Modbus_Device_Write+0x66>
            if (value == 0x1234)
 8001222:	887b      	ldrh	r3, [r7, #2]
 8001224:	f241 2234 	movw	r2, #4660	@ 0x1234
 8001228:	4293      	cmp	r3, r2
 800122a:	d109      	bne.n	8001240 <Modbus_Device_Write+0x60>
                NVIC_SystemReset();
 800122c:	f7ff ff58 	bl	80010e0 <__NVIC_SystemReset>
            if (value == 0x5678)
 8001230:	887b      	ldrh	r3, [r7, #2]
 8001232:	f245 6278 	movw	r2, #22136	@ 0x5678
 8001236:	4293      	cmp	r3, r2
 8001238:	d104      	bne.n	8001244 <Modbus_Device_Write+0x64>
                Sensors_UpdateAll();
 800123a:	f000 fd09 	bl	8001c50 <Sensors_UpdateAll>
            break;
 800123e:	e001      	b.n	8001244 <Modbus_Device_Write+0x64>
            break;
 8001240:	bf00      	nop
 8001242:	e000      	b.n	8001246 <Modbus_Device_Write+0x66>
            break;
 8001244:	bf00      	nop
        }

        // Store the value
        device_registers[index] = value;
 8001246:	89fb      	ldrh	r3, [r7, #14]
 8001248:	4905      	ldr	r1, [pc, #20]	@ (8001260 <Modbus_Device_Write+0x80>)
 800124a:	887a      	ldrh	r2, [r7, #2]
 800124c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        return value;
 8001250:	887b      	ldrh	r3, [r7, #2]
 8001252:	e000      	b.n	8001256 <Modbus_Device_Write+0x76>
    }

    return 0; // Invalid address
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200002bc 	.word	0x200002bc

08001264 <Modbus_Device_UpdateSensors>:
 * @brief  Update sensor values and map to Modbus registers
 * @param  None
 * @retval None
 */
void Modbus_Device_UpdateSensors(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
    // Update all sensor readings
    Sensors_UpdateAll();
 800126a:	f000 fcf1 	bl	8001c50 <Sensors_UpdateAll>

    // Map MQ2 sensor values to registers 40001-40004 (raw ADC values)
    device_registers[0] = Sensors_GetMQ2Value(0); // 40001: MQ2 CH0 ADC
 800126e:	2000      	movs	r0, #0
 8001270:	f000 fcfe 	bl	8001c70 <Sensors_GetMQ2Value>
 8001274:	4603      	mov	r3, r0
 8001276:	461a      	mov	r2, r3
 8001278:	4b64      	ldr	r3, [pc, #400]	@ (800140c <Modbus_Device_UpdateSensors+0x1a8>)
 800127a:	801a      	strh	r2, [r3, #0]
    device_registers[1] = Sensors_GetMQ2Value(1); // 40002: MQ2 CH1 ADC
 800127c:	2001      	movs	r0, #1
 800127e:	f000 fcf7 	bl	8001c70 <Sensors_GetMQ2Value>
 8001282:	4603      	mov	r3, r0
 8001284:	461a      	mov	r2, r3
 8001286:	4b61      	ldr	r3, [pc, #388]	@ (800140c <Modbus_Device_UpdateSensors+0x1a8>)
 8001288:	805a      	strh	r2, [r3, #2]
    device_registers[2] = Sensors_GetMQ2Value(2); // 40003: MQ2 CH2 ADC
 800128a:	2002      	movs	r0, #2
 800128c:	f000 fcf0 	bl	8001c70 <Sensors_GetMQ2Value>
 8001290:	4603      	mov	r3, r0
 8001292:	461a      	mov	r2, r3
 8001294:	4b5d      	ldr	r3, [pc, #372]	@ (800140c <Modbus_Device_UpdateSensors+0x1a8>)
 8001296:	809a      	strh	r2, [r3, #4]
    device_registers[3] = Sensors_GetMQ2Value(3); // 40004: MQ2 CH3 ADC
 8001298:	2003      	movs	r0, #3
 800129a:	f000 fce9 	bl	8001c70 <Sensors_GetMQ2Value>
 800129e:	4603      	mov	r3, r0
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b5a      	ldr	r3, [pc, #360]	@ (800140c <Modbus_Device_UpdateSensors+0x1a8>)
 80012a4:	80da      	strh	r2, [r3, #6]

    // Map MQ2 voltage values to registers 40005-40008 (millivolts)
    device_registers[4] = Sensors_GetMQ2Voltage(0); // 40005: MQ2 CH0 mV
 80012a6:	2000      	movs	r0, #0
 80012a8:	f000 fcf8 	bl	8001c9c <Sensors_GetMQ2Voltage>
 80012ac:	4603      	mov	r3, r0
 80012ae:	461a      	mov	r2, r3
 80012b0:	4b56      	ldr	r3, [pc, #344]	@ (800140c <Modbus_Device_UpdateSensors+0x1a8>)
 80012b2:	811a      	strh	r2, [r3, #8]
    device_registers[5] = Sensors_GetMQ2Voltage(1); // 40006: MQ2 CH1 mV
 80012b4:	2001      	movs	r0, #1
 80012b6:	f000 fcf1 	bl	8001c9c <Sensors_GetMQ2Voltage>
 80012ba:	4603      	mov	r3, r0
 80012bc:	461a      	mov	r2, r3
 80012be:	4b53      	ldr	r3, [pc, #332]	@ (800140c <Modbus_Device_UpdateSensors+0x1a8>)
 80012c0:	815a      	strh	r2, [r3, #10]
    device_registers[6] = Sensors_GetMQ2Voltage(2); // 40007: MQ2 CH2 mV
 80012c2:	2002      	movs	r0, #2
 80012c4:	f000 fcea 	bl	8001c9c <Sensors_GetMQ2Voltage>
 80012c8:	4603      	mov	r3, r0
 80012ca:	461a      	mov	r2, r3
 80012cc:	4b4f      	ldr	r3, [pc, #316]	@ (800140c <Modbus_Device_UpdateSensors+0x1a8>)
 80012ce:	819a      	strh	r2, [r3, #12]
    device_registers[7] = Sensors_GetMQ2Voltage(3); // 40008: MQ2 CH3 mV
 80012d0:	2003      	movs	r0, #3
 80012d2:	f000 fce3 	bl	8001c9c <Sensors_GetMQ2Voltage>
 80012d6:	4603      	mov	r3, r0
 80012d8:	461a      	mov	r2, r3
 80012da:	4b4c      	ldr	r3, [pc, #304]	@ (800140c <Modbus_Device_UpdateSensors+0x1a8>)
 80012dc:	81da      	strh	r2, [r3, #14]

    // Map MQ2 digital gas detection to registers 40009-40012 (individual registers)
    device_registers[8] = Sensors_GetMQ2Digital(0) ? 1 : 0;  // 40009: MQ2 CH0 Gas Detection (1=gas, 0=no gas)
 80012de:	2000      	movs	r0, #0
 80012e0:	f000 fcf4 	bl	8001ccc <Sensors_GetMQ2Digital>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	bf14      	ite	ne
 80012ea:	2301      	movne	r3, #1
 80012ec:	2300      	moveq	r3, #0
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b46      	ldr	r3, [pc, #280]	@ (800140c <Modbus_Device_UpdateSensors+0x1a8>)
 80012f4:	821a      	strh	r2, [r3, #16]
    device_registers[9] = Sensors_GetMQ2Digital(1) ? 1 : 0;  // 40010: MQ2 CH1 Gas Detection (1=gas, 0=no gas)
 80012f6:	2001      	movs	r0, #1
 80012f8:	f000 fce8 	bl	8001ccc <Sensors_GetMQ2Digital>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	bf14      	ite	ne
 8001302:	2301      	movne	r3, #1
 8001304:	2300      	moveq	r3, #0
 8001306:	b2db      	uxtb	r3, r3
 8001308:	461a      	mov	r2, r3
 800130a:	4b40      	ldr	r3, [pc, #256]	@ (800140c <Modbus_Device_UpdateSensors+0x1a8>)
 800130c:	825a      	strh	r2, [r3, #18]
    device_registers[10] = Sensors_GetMQ2Digital(2) ? 1 : 0; // 40011: MQ2 CH2 Gas Detection (1=gas, 0=no gas)
 800130e:	2002      	movs	r0, #2
 8001310:	f000 fcdc 	bl	8001ccc <Sensors_GetMQ2Digital>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	bf14      	ite	ne
 800131a:	2301      	movne	r3, #1
 800131c:	2300      	moveq	r3, #0
 800131e:	b2db      	uxtb	r3, r3
 8001320:	461a      	mov	r2, r3
 8001322:	4b3a      	ldr	r3, [pc, #232]	@ (800140c <Modbus_Device_UpdateSensors+0x1a8>)
 8001324:	829a      	strh	r2, [r3, #20]
    device_registers[11] = Sensors_GetMQ2Digital(3) ? 1 : 0; // 40012: MQ2 CH3 Gas Detection (1=gas, 0=no gas)
 8001326:	2003      	movs	r0, #3
 8001328:	f000 fcd0 	bl	8001ccc <Sensors_GetMQ2Digital>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	bf14      	ite	ne
 8001332:	2301      	movne	r3, #1
 8001334:	2300      	moveq	r3, #0
 8001336:	b2db      	uxtb	r3, r3
 8001338:	461a      	mov	r2, r3
 800133a:	4b34      	ldr	r3, [pc, #208]	@ (800140c <Modbus_Device_UpdateSensors+0x1a8>)
 800133c:	82da      	strh	r2, [r3, #22]

    // Map SCD30 values to registers 40013-40015 (scaled for Modbus)
    // CO2: Scale by 1 (direct ppm values, max 65535 ppm)
    device_registers[12] = Float_To_ModbusRegister(Sensors_GetSCD30_CO2(), 1.0f); // 40013: CO2 ppm
 800133e:	f000 fcdb 	bl	8001cf8 <Sensors_GetSCD30_CO2>
 8001342:	eef0 7a40 	vmov.f32	s15, s0
 8001346:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800134a:	eeb0 0a67 	vmov.f32	s0, s15
 800134e:	f7ff fedd 	bl	800110c <Float_To_ModbusRegister>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b2d      	ldr	r3, [pc, #180]	@ (800140c <Modbus_Device_UpdateSensors+0x1a8>)
 8001358:	831a      	strh	r2, [r3, #24]

    // Temperature: Scale by 100 (2 decimal places) - direct value
    // 24.19°C should show as 2419
    float temperature = Sensors_GetSCD30_Temperature();
 800135a:	f000 fcdb 	bl	8001d14 <Sensors_GetSCD30_Temperature>
 800135e:	ed87 0a01 	vstr	s0, [r7, #4]
    if (temperature < -50.0f || temperature > 85.0f)
 8001362:	edd7 7a01 	vldr	s15, [r7, #4]
 8001366:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001410 <Modbus_Device_UpdateSensors+0x1ac>
 800136a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800136e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001372:	d408      	bmi.n	8001386 <Modbus_Device_UpdateSensors+0x122>
 8001374:	edd7 7a01 	vldr	s15, [r7, #4]
 8001378:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001414 <Modbus_Device_UpdateSensors+0x1b0>
 800137c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001384:	dd04      	ble.n	8001390 <Modbus_Device_UpdateSensors+0x12c>
    {
        // Error condition - use special error value for invalid temperature
        device_registers[13] = 0xFFFF; // 65535 indicates sensor error
 8001386:	4b21      	ldr	r3, [pc, #132]	@ (800140c <Modbus_Device_UpdateSensors+0x1a8>)
 8001388:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800138c:	835a      	strh	r2, [r3, #26]
 800138e:	e00c      	b.n	80013aa <Modbus_Device_UpdateSensors+0x146>
    }
    else
    {
        // Direct temperature × 100 (no stupid offset)
        device_registers[13] = (uint16_t)(temperature * 100.0f); // 40014: Temperature (°C × 100)
 8001390:	edd7 7a01 	vldr	s15, [r7, #4]
 8001394:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001418 <Modbus_Device_UpdateSensors+0x1b4>
 8001398:	ee67 7a87 	vmul.f32	s15, s15, s14
 800139c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013a0:	ee17 3a90 	vmov	r3, s15
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	4b19      	ldr	r3, [pc, #100]	@ (800140c <Modbus_Device_UpdateSensors+0x1a8>)
 80013a8:	835a      	strh	r2, [r3, #26]
    }

    // Humidity: Scale by 100 (2 decimal places, 0.00 to 655.35%)
    device_registers[14] = Float_To_ModbusRegister(Sensors_GetSCD30_Humidity(), 100.0f); // 40015: Humidity (% * 100)
 80013aa:	f000 fcc1 	bl	8001d30 <Sensors_GetSCD30_Humidity>
 80013ae:	eef0 7a40 	vmov.f32	s15, s0
 80013b2:	eddf 0a19 	vldr	s1, [pc, #100]	@ 8001418 <Modbus_Device_UpdateSensors+0x1b4>
 80013b6:	eeb0 0a67 	vmov.f32	s0, s15
 80013ba:	f7ff fea7 	bl	800110c <Float_To_ModbusRegister>
 80013be:	4603      	mov	r3, r0
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b12      	ldr	r3, [pc, #72]	@ (800140c <Modbus_Device_UpdateSensors+0x1a8>)
 80013c4:	839a      	strh	r2, [r3, #28]

    // Status and diagnostic registers
    device_registers[15] = sensor_data.scd30_data_ready ? 1 : 0;       // 40016: SCD30 data ready flag
 80013c6:	4b15      	ldr	r3, [pc, #84]	@ (800141c <Modbus_Device_UpdateSensors+0x1b8>)
 80013c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	bf14      	ite	ne
 80013d0:	2301      	movne	r3, #1
 80013d2:	2300      	moveq	r3, #0
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	461a      	mov	r2, r3
 80013d8:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <Modbus_Device_UpdateSensors+0x1a8>)
 80013da:	83da      	strh	r2, [r3, #30]
    device_registers[16] = (uint16_t)(HAL_GetTick() / 1000);           // 40017: System uptime (seconds)
 80013dc:	f000 ffc2 	bl	8002364 <HAL_GetTick>
 80013e0:	4603      	mov	r3, r0
 80013e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001420 <Modbus_Device_UpdateSensors+0x1bc>)
 80013e4:	fba2 2303 	umull	r2, r3, r2, r3
 80013e8:	099b      	lsrs	r3, r3, #6
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	4b07      	ldr	r3, [pc, #28]	@ (800140c <Modbus_Device_UpdateSensors+0x1a8>)
 80013ee:	841a      	strh	r2, [r3, #32]
    device_registers[17] = (uint16_t)(sensor_data.last_update / 1000); // 40018: Last sensor update (seconds)
 80013f0:	4b0a      	ldr	r3, [pc, #40]	@ (800141c <Modbus_Device_UpdateSensors+0x1b8>)
 80013f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001420 <Modbus_Device_UpdateSensors+0x1bc>)
 80013f6:	fba2 2303 	umull	r2, r3, r2, r3
 80013fa:	099b      	lsrs	r3, r3, #6
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	4b03      	ldr	r3, [pc, #12]	@ (800140c <Modbus_Device_UpdateSensors+0x1a8>)
 8001400:	845a      	strh	r2, [r3, #34]	@ 0x22

    // Configuration/diagnostic registers (40015-40020) are handled by write function
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200002bc 	.word	0x200002bc
 8001410:	c2480000 	.word	0xc2480000
 8001414:	42aa0000 	.word	0x42aa0000
 8001418:	42c80000 	.word	0x42c80000
 800141c:	20000510 	.word	0x20000510
 8001420:	10624dd3 	.word	0x10624dd3

08001424 <Modbus_Init>:
 * @brief  Initialize Modbus RTU slave
 * @param  None
 * @retval None
 */
void Modbus_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
    // printf("Initializing Modbus...\n"); // Removed to prevent timing delays

    // Configure Modbus
    modbus_config.devaddr = 0x01; // Slave address
 8001428:	4b3a      	ldr	r3, [pc, #232]	@ (8001514 <Modbus_Init+0xf0>)
 800142a:	2201      	movs	r2, #1
 800142c:	701a      	strb	r2, [r3, #0]
    modbus_config.coils = 0;      // No internal coil handling
 800142e:	4b39      	ldr	r3, [pc, #228]	@ (8001514 <Modbus_Init+0xf0>)
 8001430:	2200      	movs	r2, #0
 8001432:	805a      	strh	r2, [r3, #2]
    modbus_config.discrete = 0;   // No internal discrete handling
 8001434:	4b37      	ldr	r3, [pc, #220]	@ (8001514 <Modbus_Init+0xf0>)
 8001436:	2200      	movs	r2, #0
 8001438:	809a      	strh	r2, [r3, #4]
    modbus_config.device = NULL;  // No device pointer needed
 800143a:	4b36      	ldr	r3, [pc, #216]	@ (8001514 <Modbus_Init+0xf0>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
    modbus_config.send = Modbus_SendData;
 8001440:	4b34      	ldr	r3, [pc, #208]	@ (8001514 <Modbus_Init+0xf0>)
 8001442:	4a35      	ldr	r2, [pc, #212]	@ (8001518 <Modbus_Init+0xf4>)
 8001444:	60da      	str	r2, [r3, #12]
    modbus_config.read = Modbus_Device_Read;
 8001446:	4b33      	ldr	r3, [pc, #204]	@ (8001514 <Modbus_Init+0xf0>)
 8001448:	4a34      	ldr	r2, [pc, #208]	@ (800151c <Modbus_Init+0xf8>)
 800144a:	611a      	str	r2, [r3, #16]
    modbus_config.write = Modbus_Device_Write;
 800144c:	4b31      	ldr	r3, [pc, #196]	@ (8001514 <Modbus_Init+0xf0>)
 800144e:	4a34      	ldr	r2, [pc, #208]	@ (8001520 <Modbus_Init+0xfc>)
 8001450:	615a      	str	r2, [r3, #20]
    modbus_config.sendbuf = modbus_tx_buffer;
 8001452:	4b30      	ldr	r3, [pc, #192]	@ (8001514 <Modbus_Init+0xf0>)
 8001454:	4a33      	ldr	r2, [pc, #204]	@ (8001524 <Modbus_Init+0x100>)
 8001456:	619a      	str	r2, [r3, #24]
    modbus_config.sendbuf_sz = sizeof(modbus_tx_buffer);
 8001458:	4b2e      	ldr	r3, [pc, #184]	@ (8001514 <Modbus_Init+0xf0>)
 800145a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800145e:	839a      	strh	r2, [r3, #28]
    modbus_config.recvbuf = modbus_rx_buffer;
 8001460:	4b2c      	ldr	r3, [pc, #176]	@ (8001514 <Modbus_Init+0xf0>)
 8001462:	4a31      	ldr	r2, [pc, #196]	@ (8001528 <Modbus_Init+0x104>)
 8001464:	621a      	str	r2, [r3, #32]
    modbus_config.recvbuf_sz = sizeof(modbus_rx_buffer);
 8001466:	4b2b      	ldr	r3, [pc, #172]	@ (8001514 <Modbus_Init+0xf0>)
 8001468:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800146c:	849a      	strh	r2, [r3, #36]	@ 0x24

    // printf("Modbus config: addr=0x%02X, buffers=%d/%d bytes\n",
    //        modbus_config.devaddr, modbus_config.sendbuf_sz, modbus_config.recvbuf_sz); // Removed

    // Initialize Modbus context
    modbus_context = mbus_open(&modbus_config);
 800146e:	4829      	ldr	r0, [pc, #164]	@ (8001514 <Modbus_Init+0xf0>)
 8001470:	f7ff f95a 	bl	8000728 <mbus_open>
 8001474:	4603      	mov	r3, r0
 8001476:	461a      	mov	r2, r3
 8001478:	4b2c      	ldr	r3, [pc, #176]	@ (800152c <Modbus_Init+0x108>)
 800147a:	701a      	strb	r2, [r3, #0]
    // printf("Modbus context opened: %d\n", modbus_context); // Removed

    // Set register values AFTER mbus_open (like sample code does)
    device_registers[0] = 20;  // 40001
 800147c:	4b2c      	ldr	r3, [pc, #176]	@ (8001530 <Modbus_Init+0x10c>)
 800147e:	2214      	movs	r2, #20
 8001480:	801a      	strh	r2, [r3, #0]
    device_registers[1] = 19;  // 40002
 8001482:	4b2b      	ldr	r3, [pc, #172]	@ (8001530 <Modbus_Init+0x10c>)
 8001484:	2213      	movs	r2, #19
 8001486:	805a      	strh	r2, [r3, #2]
    device_registers[2] = 18;  // 40003
 8001488:	4b29      	ldr	r3, [pc, #164]	@ (8001530 <Modbus_Init+0x10c>)
 800148a:	2212      	movs	r2, #18
 800148c:	809a      	strh	r2, [r3, #4]
    device_registers[3] = 17;  // 40004
 800148e:	4b28      	ldr	r3, [pc, #160]	@ (8001530 <Modbus_Init+0x10c>)
 8001490:	2211      	movs	r2, #17
 8001492:	80da      	strh	r2, [r3, #6]
    device_registers[4] = 16;  // 40005
 8001494:	4b26      	ldr	r3, [pc, #152]	@ (8001530 <Modbus_Init+0x10c>)
 8001496:	2210      	movs	r2, #16
 8001498:	811a      	strh	r2, [r3, #8]
    device_registers[5] = 15;  // 40006
 800149a:	4b25      	ldr	r3, [pc, #148]	@ (8001530 <Modbus_Init+0x10c>)
 800149c:	220f      	movs	r2, #15
 800149e:	815a      	strh	r2, [r3, #10]
    device_registers[6] = 14;  // 40007
 80014a0:	4b23      	ldr	r3, [pc, #140]	@ (8001530 <Modbus_Init+0x10c>)
 80014a2:	220e      	movs	r2, #14
 80014a4:	819a      	strh	r2, [r3, #12]
    device_registers[7] = 13;  // 40008
 80014a6:	4b22      	ldr	r3, [pc, #136]	@ (8001530 <Modbus_Init+0x10c>)
 80014a8:	220d      	movs	r2, #13
 80014aa:	81da      	strh	r2, [r3, #14]
    device_registers[8] = 12;  // 40009
 80014ac:	4b20      	ldr	r3, [pc, #128]	@ (8001530 <Modbus_Init+0x10c>)
 80014ae:	220c      	movs	r2, #12
 80014b0:	821a      	strh	r2, [r3, #16]
    device_registers[9] = 11;  // 40010
 80014b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001530 <Modbus_Init+0x10c>)
 80014b4:	220b      	movs	r2, #11
 80014b6:	825a      	strh	r2, [r3, #18]
    device_registers[10] = 10; // 40011
 80014b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001530 <Modbus_Init+0x10c>)
 80014ba:	220a      	movs	r2, #10
 80014bc:	829a      	strh	r2, [r3, #20]
    device_registers[11] = 9;  // 40012
 80014be:	4b1c      	ldr	r3, [pc, #112]	@ (8001530 <Modbus_Init+0x10c>)
 80014c0:	2209      	movs	r2, #9
 80014c2:	82da      	strh	r2, [r3, #22]
    device_registers[12] = 8;  // 40013
 80014c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001530 <Modbus_Init+0x10c>)
 80014c6:	2208      	movs	r2, #8
 80014c8:	831a      	strh	r2, [r3, #24]
    device_registers[13] = 7;  // 40014
 80014ca:	4b19      	ldr	r3, [pc, #100]	@ (8001530 <Modbus_Init+0x10c>)
 80014cc:	2207      	movs	r2, #7
 80014ce:	835a      	strh	r2, [r3, #26]
    device_registers[14] = 6;  // 40015
 80014d0:	4b17      	ldr	r3, [pc, #92]	@ (8001530 <Modbus_Init+0x10c>)
 80014d2:	2206      	movs	r2, #6
 80014d4:	839a      	strh	r2, [r3, #28]
    device_registers[15] = 5;  // 40016
 80014d6:	4b16      	ldr	r3, [pc, #88]	@ (8001530 <Modbus_Init+0x10c>)
 80014d8:	2205      	movs	r2, #5
 80014da:	83da      	strh	r2, [r3, #30]
    device_registers[16] = 4;  // 40017
 80014dc:	4b14      	ldr	r3, [pc, #80]	@ (8001530 <Modbus_Init+0x10c>)
 80014de:	2204      	movs	r2, #4
 80014e0:	841a      	strh	r2, [r3, #32]
    device_registers[17] = 3;  // 40018
 80014e2:	4b13      	ldr	r3, [pc, #76]	@ (8001530 <Modbus_Init+0x10c>)
 80014e4:	2203      	movs	r2, #3
 80014e6:	845a      	strh	r2, [r3, #34]	@ 0x22
    device_registers[18] = 2;  // 40019
 80014e8:	4b11      	ldr	r3, [pc, #68]	@ (8001530 <Modbus_Init+0x10c>)
 80014ea:	2202      	movs	r2, #2
 80014ec:	849a      	strh	r2, [r3, #36]	@ 0x24
    device_registers[19] = 1;  // 40020
 80014ee:	4b10      	ldr	r3, [pc, #64]	@ (8001530 <Modbus_Init+0x10c>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	84da      	strh	r2, [r3, #38]	@ 0x26
    //     printf("Reg[%d] = %d\n", i, device_registers[i]);
    // }
    // printf("Registers initialized. Ready for ModbusPoll connection.\n"); // Removed to prevent timeouts

    // Start UART DMA reception
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, modbus_rx_buffer, sizeof(modbus_rx_buffer));
 80014f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014f8:	490b      	ldr	r1, [pc, #44]	@ (8001528 <Modbus_Init+0x104>)
 80014fa:	480e      	ldr	r0, [pc, #56]	@ (8001534 <Modbus_Init+0x110>)
 80014fc:	f007 f9a8 	bl	8008850 <HAL_UARTEx_ReceiveToIdle_DMA>
    // printf("DMA reception started: %d\n", dma_status); // Removed

    // Enable UART idle line interrupt for Modbus frame detection
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8001500:	4b0c      	ldr	r3, [pc, #48]	@ (8001534 <Modbus_Init+0x110>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	4b0b      	ldr	r3, [pc, #44]	@ (8001534 <Modbus_Init+0x110>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 0210 	orr.w	r2, r2, #16
 800150e:	601a      	str	r2, [r3, #0]
    // printf("UART idle interrupt enabled\n"); // Removed
}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	200002e8 	.word	0x200002e8
 8001518:	08001549 	.word	0x08001549
 800151c:	08001199 	.word	0x08001199
 8001520:	080011e1 	.word	0x080011e1
 8001524:	20000410 	.word	0x20000410
 8001528:	20000310 	.word	0x20000310
 800152c:	200002e4 	.word	0x200002e4
 8001530:	200002bc 	.word	0x200002bc
 8001534:	2000015c 	.word	0x2000015c

08001538 <Modbus_Process>:
 * @brief  Process Modbus communication
 * @param  None
 * @retval None
 */
void Modbus_Process(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
    // This function can be called in main loop if needed
    // Currently, processing is handled in UART callback
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
	...

08001548 <Modbus_SendData>:
 * @param  data: Data to send
 * @param  size: Size of data
 * @retval Number of bytes sent
 */
static int Modbus_SendData(const mbus_t context, const uint8_t *data, const uint16_t size)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	6039      	str	r1, [r7, #0]
 8001552:	71fb      	strb	r3, [r7, #7]
 8001554:	4613      	mov	r3, r2
 8001556:	80bb      	strh	r3, [r7, #4]
    // {
    //     printf("0x%02X ", data[i]);
    // }
    // printf("\n");

    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, (uint8_t *)data, size, 1000);
 8001558:	88ba      	ldrh	r2, [r7, #4]
 800155a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800155e:	6839      	ldr	r1, [r7, #0]
 8001560:	4807      	ldr	r0, [pc, #28]	@ (8001580 <Modbus_SendData+0x38>)
 8001562:	f006 f82d 	bl	80075c0 <HAL_UART_Transmit>
 8001566:	4603      	mov	r3, r0
 8001568:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800156a:	7bfb      	ldrb	r3, [r7, #15]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d101      	bne.n	8001574 <Modbus_SendData+0x2c>
    {
        // printf("TX Success\n"); // Removed to prevent timing delays
        return size;
 8001570:	88bb      	ldrh	r3, [r7, #4]
 8001572:	e000      	b.n	8001576 <Modbus_SendData+0x2e>
    }
    else
    {
        // printf("TX Failed: %d\n", status); // Removed to prevent timing delays
        return 0;
 8001574:	2300      	movs	r3, #0
    }
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	2000015c 	.word	0x2000015c

08001584 <Modbus_GetContext>:
 * @brief  Get Modbus context (for external access)
 * @param  None
 * @retval Modbus context
 */
mbus_t Modbus_GetContext(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
    return modbus_context;
 8001588:	4b03      	ldr	r3, [pc, #12]	@ (8001598 <Modbus_GetContext+0x14>)
 800158a:	f993 3000 	ldrsb.w	r3, [r3]
 800158e:	4618      	mov	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	200002e4 	.word	0x200002e4

0800159c <MQ2_Init>:
 * @brief  Initialize MQ2 sensors
 * @param  None
 * @retval HAL status
 */
HAL_StatusTypeDef MQ2_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
    // ADC is already initialized by CubeMX
    // Just calibrate the ADC
    if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 80015a0:	2100      	movs	r1, #0
 80015a2:	480d      	ldr	r0, [pc, #52]	@ (80015d8 <MQ2_Init+0x3c>)
 80015a4:	f001 fa67 	bl	8002a76 <HAL_ADCEx_Calibration_Start>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MQ2_Init+0x16>
    {
        return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e00f      	b.n	80015d2 <MQ2_Init+0x36>
    }

    // Initialize sensor data
    memset(sensor_data.mq2_values, 0, sizeof(sensor_data.mq2_values));
 80015b2:	2208      	movs	r2, #8
 80015b4:	2100      	movs	r1, #0
 80015b6:	4809      	ldr	r0, [pc, #36]	@ (80015dc <MQ2_Init+0x40>)
 80015b8:	f007 f99e 	bl	80088f8 <memset>
    memset(sensor_data.mq2_voltages, 0, sizeof(sensor_data.mq2_voltages));
 80015bc:	2208      	movs	r2, #8
 80015be:	2100      	movs	r1, #0
 80015c0:	4807      	ldr	r0, [pc, #28]	@ (80015e0 <MQ2_Init+0x44>)
 80015c2:	f007 f999 	bl	80088f8 <memset>
    memset(sensor_data.mq2_digital, 0, sizeof(sensor_data.mq2_digital));
 80015c6:	2204      	movs	r2, #4
 80015c8:	2100      	movs	r1, #0
 80015ca:	4806      	ldr	r0, [pc, #24]	@ (80015e4 <MQ2_Init+0x48>)
 80015cc:	f007 f994 	bl	80088f8 <memset>

    return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000028 	.word	0x20000028
 80015dc:	20000510 	.word	0x20000510
 80015e0:	20000518 	.word	0x20000518
 80015e4:	20000520 	.word	0x20000520

080015e8 <MQ2_ConfigureChannel>:
 * @brief  Configure ADC for specific channel
 * @param  channel: ADC channel to configure
 * @retval HAL status
 */
static HAL_StatusTypeDef MQ2_ConfigureChannel(uint32_t channel)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 80015f0:	f107 0308 	add.w	r3, r7, #8
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
 8001600:	615a      	str	r2, [r3, #20]

    sConfig.Channel = channel;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8001606:	2301      	movs	r3, #1
 8001608:	60fb      	str	r3, [r7, #12]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
    sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 800160e:	2306      	movs	r3, #6
 8001610:	613b      	str	r3, [r7, #16]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001612:	2300      	movs	r3, #0
 8001614:	61bb      	str	r3, [r7, #24]
    sConfig.Offset = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]

    return HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800161a:	f107 0308 	add.w	r3, r7, #8
 800161e:	4619      	mov	r1, r3
 8001620:	4803      	ldr	r0, [pc, #12]	@ (8001630 <MQ2_ConfigureChannel+0x48>)
 8001622:	f001 fa9b 	bl	8002b5c <HAL_ADC_ConfigChannel>
 8001626:	4603      	mov	r3, r0
}
 8001628:	4618      	mov	r0, r3
 800162a:	3720      	adds	r7, #32
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000028 	.word	0x20000028

08001634 <MQ2_ReadChannel>:
 * @param  adc_value: Pointer to store raw ADC value
 * @param  voltage_mv: Pointer to store voltage in millivolts
 * @retval HAL status
 */
HAL_StatusTypeDef MQ2_ReadChannel(uint8_t channel, uint16_t *adc_value, uint16_t *voltage_mv)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
 8001640:	73fb      	strb	r3, [r7, #15]
    if (channel >= MQ2_NUM_CHANNELS)
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	2b03      	cmp	r3, #3
 8001646:	d901      	bls.n	800164c <MQ2_ReadChannel+0x18>
        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e052      	b.n	80016f2 <MQ2_ReadChannel+0xbe>

    uint32_t adc_channel;
    switch (channel)
 800164c:	7bfb      	ldrb	r3, [r7, #15]
 800164e:	2b03      	cmp	r3, #3
 8001650:	d816      	bhi.n	8001680 <MQ2_ReadChannel+0x4c>
 8001652:	a201      	add	r2, pc, #4	@ (adr r2, 8001658 <MQ2_ReadChannel+0x24>)
 8001654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001658:	08001669 	.word	0x08001669
 800165c:	0800166f 	.word	0x0800166f
 8001660:	08001675 	.word	0x08001675
 8001664:	0800167b 	.word	0x0800167b
    {
    case 0:
        adc_channel = MQ2_CH0_CHANNEL;
 8001668:	2301      	movs	r3, #1
 800166a:	617b      	str	r3, [r7, #20]
        break;
 800166c:	e00a      	b.n	8001684 <MQ2_ReadChannel+0x50>
    case 1:
        adc_channel = MQ2_CH1_CHANNEL;
 800166e:	2302      	movs	r3, #2
 8001670:	617b      	str	r3, [r7, #20]
        break;
 8001672:	e007      	b.n	8001684 <MQ2_ReadChannel+0x50>
    case 2:
        adc_channel = MQ2_CH2_CHANNEL;
 8001674:	2303      	movs	r3, #3
 8001676:	617b      	str	r3, [r7, #20]
        break;
 8001678:	e004      	b.n	8001684 <MQ2_ReadChannel+0x50>
    case 3:
        adc_channel = MQ2_CH3_CHANNEL;
 800167a:	2304      	movs	r3, #4
 800167c:	617b      	str	r3, [r7, #20]
        break;
 800167e:	e001      	b.n	8001684 <MQ2_ReadChannel+0x50>
    default:
        return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e036      	b.n	80016f2 <MQ2_ReadChannel+0xbe>
    }

    // Configure ADC for this channel
    if (MQ2_ConfigureChannel(adc_channel) != HAL_OK)
 8001684:	6978      	ldr	r0, [r7, #20]
 8001686:	f7ff ffaf 	bl	80015e8 <MQ2_ConfigureChannel>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MQ2_ReadChannel+0x60>
        return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e02e      	b.n	80016f2 <MQ2_ReadChannel+0xbe>

    // Start ADC conversion
    if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8001694:	4819      	ldr	r0, [pc, #100]	@ (80016fc <MQ2_ReadChannel+0xc8>)
 8001696:	f001 f827 	bl	80026e8 <HAL_ADC_Start>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MQ2_ReadChannel+0x70>
        return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e026      	b.n	80016f2 <MQ2_ReadChannel+0xbe>

    // Wait for conversion to complete
    if (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK)
 80016a4:	2164      	movs	r1, #100	@ 0x64
 80016a6:	4815      	ldr	r0, [pc, #84]	@ (80016fc <MQ2_ReadChannel+0xc8>)
 80016a8:	f001 f90a 	bl	80028c0 <HAL_ADC_PollForConversion>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d004      	beq.n	80016bc <MQ2_ReadChannel+0x88>
    {
        HAL_ADC_Stop(&hadc1);
 80016b2:	4812      	ldr	r0, [pc, #72]	@ (80016fc <MQ2_ReadChannel+0xc8>)
 80016b4:	f001 f8ce 	bl	8002854 <HAL_ADC_Stop>
        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e01a      	b.n	80016f2 <MQ2_ReadChannel+0xbe>
    }

    // Get ADC value
    uint32_t raw_value = HAL_ADC_GetValue(&hadc1);
 80016bc:	480f      	ldr	r0, [pc, #60]	@ (80016fc <MQ2_ReadChannel+0xc8>)
 80016be:	f001 f9cd 	bl	8002a5c <HAL_ADC_GetValue>
 80016c2:	6138      	str	r0, [r7, #16]
    HAL_ADC_Stop(&hadc1);
 80016c4:	480d      	ldr	r0, [pc, #52]	@ (80016fc <MQ2_ReadChannel+0xc8>)
 80016c6:	f001 f8c5 	bl	8002854 <HAL_ADC_Stop>

    // Convert to 16-bit and calculate voltage
    *adc_value = (uint16_t)raw_value;
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	801a      	strh	r2, [r3, #0]
    *voltage_mv = (uint16_t)((raw_value * 3300) / 4095);
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	f640 42e4 	movw	r2, #3300	@ 0xce4
 80016d8:	fb03 f202 	mul.w	r2, r3, r2
 80016dc:	4b08      	ldr	r3, [pc, #32]	@ (8001700 <MQ2_ReadChannel+0xcc>)
 80016de:	fba3 1302 	umull	r1, r3, r3, r2
 80016e2:	1ad2      	subs	r2, r2, r3
 80016e4:	0852      	lsrs	r2, r2, #1
 80016e6:	4413      	add	r3, r2
 80016e8:	0adb      	lsrs	r3, r3, #11
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	801a      	strh	r2, [r3, #0]

    return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3718      	adds	r7, #24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000028 	.word	0x20000028
 8001700:	00100101 	.word	0x00100101

08001704 <MQ2_ReadDigitalChannel>:
 * @param  channel: Channel number (0-3)
 * @param  gas_detected: Pointer to store gas detection status (1=gas, 0=no gas)
 * @retval HAL status
 */
HAL_StatusTypeDef MQ2_ReadDigitalChannel(uint8_t channel, uint8_t *gas_detected)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	6039      	str	r1, [r7, #0]
 800170e:	71fb      	strb	r3, [r7, #7]
    if (channel >= MQ2_NUM_CHANNELS)
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	2b03      	cmp	r3, #3
 8001714:	d901      	bls.n	800171a <MQ2_ReadDigitalChannel+0x16>
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e039      	b.n	800178e <MQ2_ReadDigitalChannel+0x8a>

    GPIO_TypeDef *gpio_port;
    uint16_t gpio_pin;

    // Select the appropriate GPIO port and pin for this channel
    switch (channel)
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	2b03      	cmp	r3, #3
 800171e:	d823      	bhi.n	8001768 <MQ2_ReadDigitalChannel+0x64>
 8001720:	a201      	add	r2, pc, #4	@ (adr r2, 8001728 <MQ2_ReadDigitalChannel+0x24>)
 8001722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001726:	bf00      	nop
 8001728:	08001739 	.word	0x08001739
 800172c:	08001745 	.word	0x08001745
 8001730:	08001751 	.word	0x08001751
 8001734:	0800175d 	.word	0x0800175d
    {
    case 0:
        gpio_port = MQ2_CH0_DOUT_GPIO;
 8001738:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800173c:	60fb      	str	r3, [r7, #12]
        gpio_pin = MQ2_CH0_DOUT_PIN;
 800173e:	2310      	movs	r3, #16
 8001740:	817b      	strh	r3, [r7, #10]
        break;
 8001742:	e013      	b.n	800176c <MQ2_ReadDigitalChannel+0x68>
    case 1:
        gpio_port = MQ2_CH1_DOUT_GPIO;
 8001744:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001748:	60fb      	str	r3, [r7, #12]
        gpio_pin = MQ2_CH1_DOUT_PIN;
 800174a:	2320      	movs	r3, #32
 800174c:	817b      	strh	r3, [r7, #10]
        break;
 800174e:	e00d      	b.n	800176c <MQ2_ReadDigitalChannel+0x68>
    case 2:
        gpio_port = MQ2_CH2_DOUT_GPIO;
 8001750:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001754:	60fb      	str	r3, [r7, #12]
        gpio_pin = MQ2_CH2_DOUT_PIN;
 8001756:	2340      	movs	r3, #64	@ 0x40
 8001758:	817b      	strh	r3, [r7, #10]
        break;
 800175a:	e007      	b.n	800176c <MQ2_ReadDigitalChannel+0x68>
    case 3:
        gpio_port = MQ2_CH3_DOUT_GPIO;
 800175c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001760:	60fb      	str	r3, [r7, #12]
        gpio_pin = MQ2_CH3_DOUT_PIN;
 8001762:	2380      	movs	r3, #128	@ 0x80
 8001764:	817b      	strh	r3, [r7, #10]
        break;
 8001766:	e001      	b.n	800176c <MQ2_ReadDigitalChannel+0x68>
    default:
        return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e010      	b.n	800178e <MQ2_ReadDigitalChannel+0x8a>
    }

    // Read GPIO pin state
    GPIO_PinState pin_state = HAL_GPIO_ReadPin(gpio_port, gpio_pin);
 800176c:	897b      	ldrh	r3, [r7, #10]
 800176e:	4619      	mov	r1, r3
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f002 fb9b 	bl	8003eac <HAL_GPIO_ReadPin>
 8001776:	4603      	mov	r3, r0
 8001778:	727b      	strb	r3, [r7, #9]

    // MQ2 DOUT is typically active LOW (0 = gas detected, 1 = no gas)
    // Convert to logical high = gas detected for easier understanding
    *gas_detected = (pin_state == GPIO_PIN_RESET) ? 1 : 0;
 800177a:	7a7b      	ldrb	r3, [r7, #9]
 800177c:	2b00      	cmp	r3, #0
 800177e:	bf0c      	ite	eq
 8001780:	2301      	moveq	r3, #1
 8001782:	2300      	movne	r3, #0
 8001784:	b2db      	uxtb	r3, r3
 8001786:	461a      	mov	r2, r3
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	701a      	strb	r2, [r3, #0]

    return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop

08001798 <MQ2_ReadAllChannels>:
 * @brief  Read all MQ2 channels (analog + digital) and update sensor data
 * @param  None
 * @retval HAL status
 */
HAL_StatusTypeDef MQ2_ReadAllChannels(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef status = HAL_OK;
 800179e:	2300      	movs	r3, #0
 80017a0:	71fb      	strb	r3, [r7, #7]

    for (uint8_t i = 0; i < MQ2_NUM_CHANNELS; i++)
 80017a2:	2300      	movs	r3, #0
 80017a4:	71bb      	strb	r3, [r7, #6]
 80017a6:	e022      	b.n	80017ee <MQ2_ReadAllChannels+0x56>
    {
        // Read analog values (ADC + voltage)
        if (MQ2_ReadChannel(i, &sensor_data.mq2_values[i], &sensor_data.mq2_voltages[i]) != HAL_OK)
 80017a8:	79bb      	ldrb	r3, [r7, #6]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	4a14      	ldr	r2, [pc, #80]	@ (8001800 <MQ2_ReadAllChannels+0x68>)
 80017ae:	1899      	adds	r1, r3, r2
 80017b0:	79bb      	ldrb	r3, [r7, #6]
 80017b2:	3304      	adds	r3, #4
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	4a12      	ldr	r2, [pc, #72]	@ (8001800 <MQ2_ReadAllChannels+0x68>)
 80017b8:	441a      	add	r2, r3
 80017ba:	79bb      	ldrb	r3, [r7, #6]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff39 	bl	8001634 <MQ2_ReadChannel>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MQ2_ReadAllChannels+0x34>
        {
            status = HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	71fb      	strb	r3, [r7, #7]
        }

        // Read digital gas detection
        if (MQ2_ReadDigitalChannel(i, &sensor_data.mq2_digital[i]) != HAL_OK)
 80017cc:	79bb      	ldrb	r3, [r7, #6]
 80017ce:	3310      	adds	r3, #16
 80017d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001800 <MQ2_ReadAllChannels+0x68>)
 80017d2:	441a      	add	r2, r3
 80017d4:	79bb      	ldrb	r3, [r7, #6]
 80017d6:	4611      	mov	r1, r2
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ff93 	bl	8001704 <MQ2_ReadDigitalChannel>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MQ2_ReadAllChannels+0x50>
        {
            status = HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < MQ2_NUM_CHANNELS; i++)
 80017e8:	79bb      	ldrb	r3, [r7, #6]
 80017ea:	3301      	adds	r3, #1
 80017ec:	71bb      	strb	r3, [r7, #6]
 80017ee:	79bb      	ldrb	r3, [r7, #6]
 80017f0:	2b03      	cmp	r3, #3
 80017f2:	d9d9      	bls.n	80017a8 <MQ2_ReadAllChannels+0x10>
        }
    }

    return status;
 80017f4:	79fb      	ldrb	r3, [r7, #7]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000510 	.word	0x20000510

08001804 <SCD30_CalcCRC>:
 * @param  data: Data bytes
 * @param  len: Number of bytes
 * @retval CRC8 value
 */
uint8_t SCD30_CalcCRC(const uint8_t *data, uint8_t len)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	460b      	mov	r3, r1
 800180e:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0xFF;
 8001810:	23ff      	movs	r3, #255	@ 0xff
 8001812:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < len; i++)
 8001814:	2300      	movs	r3, #0
 8001816:	73bb      	strb	r3, [r7, #14]
 8001818:	e022      	b.n	8001860 <SCD30_CalcCRC+0x5c>
    {
        crc ^= data[i];
 800181a:	7bbb      	ldrb	r3, [r7, #14]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	4413      	add	r3, r2
 8001820:	781a      	ldrb	r2, [r3, #0]
 8001822:	7bfb      	ldrb	r3, [r7, #15]
 8001824:	4053      	eors	r3, r2
 8001826:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++)
 8001828:	2300      	movs	r3, #0
 800182a:	737b      	strb	r3, [r7, #13]
 800182c:	e012      	b.n	8001854 <SCD30_CalcCRC+0x50>
        {
            if (crc & 0x80)
 800182e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001832:	2b00      	cmp	r3, #0
 8001834:	da08      	bge.n	8001848 <SCD30_CalcCRC+0x44>
                crc = (crc << 1) ^ 0x31;
 8001836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	b25b      	sxtb	r3, r3
 800183e:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 8001842:	b25b      	sxtb	r3, r3
 8001844:	73fb      	strb	r3, [r7, #15]
 8001846:	e002      	b.n	800184e <SCD30_CalcCRC+0x4a>
            else
                crc <<= 1;
 8001848:	7bfb      	ldrb	r3, [r7, #15]
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++)
 800184e:	7b7b      	ldrb	r3, [r7, #13]
 8001850:	3301      	adds	r3, #1
 8001852:	737b      	strb	r3, [r7, #13]
 8001854:	7b7b      	ldrb	r3, [r7, #13]
 8001856:	2b07      	cmp	r3, #7
 8001858:	d9e9      	bls.n	800182e <SCD30_CalcCRC+0x2a>
    for (uint8_t i = 0; i < len; i++)
 800185a:	7bbb      	ldrb	r3, [r7, #14]
 800185c:	3301      	adds	r3, #1
 800185e:	73bb      	strb	r3, [r7, #14]
 8001860:	7bba      	ldrb	r2, [r7, #14]
 8001862:	78fb      	ldrb	r3, [r7, #3]
 8001864:	429a      	cmp	r2, r3
 8001866:	d3d8      	bcc.n	800181a <SCD30_CalcCRC+0x16>
        }
    }
    return crc;
 8001868:	7bfb      	ldrb	r3, [r7, #15]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
	...

08001878 <SCD30_Init>:
 * @brief  Initialize SCD30 sensor
 * @param  None
 * @retval HAL status
 */
HAL_StatusTypeDef SCD30_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
    // I2C is already initialized by CubeMX
    // Initialize sensor data
    sensor_data.scd30_co2 = 0.0f;
 800187c:	4b0a      	ldr	r3, [pc, #40]	@ (80018a8 <SCD30_Init+0x30>)
 800187e:	f04f 0200 	mov.w	r2, #0
 8001882:	615a      	str	r2, [r3, #20]
    sensor_data.scd30_temperature = 0.0f;
 8001884:	4b08      	ldr	r3, [pc, #32]	@ (80018a8 <SCD30_Init+0x30>)
 8001886:	f04f 0200 	mov.w	r2, #0
 800188a:	619a      	str	r2, [r3, #24]
    sensor_data.scd30_humidity = 0.0f;
 800188c:	4b06      	ldr	r3, [pc, #24]	@ (80018a8 <SCD30_Init+0x30>)
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	61da      	str	r2, [r3, #28]
    sensor_data.scd30_data_ready = 0;
 8001894:	4b04      	ldr	r3, [pc, #16]	@ (80018a8 <SCD30_Init+0x30>)
 8001896:	2200      	movs	r2, #0
 8001898:	f883 2020 	strb.w	r2, [r3, #32]

    // Start continuous measurement
    return SCD30_StartMeasurement();
 800189c:	f000 f806 	bl	80018ac <SCD30_StartMeasurement>
 80018a0:	4603      	mov	r3, r0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000510 	.word	0x20000510

080018ac <SCD30_StartMeasurement>:
 * @brief  Start SCD30 continuous measurement
 * @param  None
 * @retval HAL status
 */
HAL_StatusTypeDef SCD30_StartMeasurement(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af02      	add	r7, sp, #8
    scd30_tx_buf[0] = (SCD30_CMD_START_MEASUREMENT >> 8) & 0xFF;
 80018b2:	4b10      	ldr	r3, [pc, #64]	@ (80018f4 <SCD30_StartMeasurement+0x48>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	701a      	strb	r2, [r3, #0]
    scd30_tx_buf[1] = SCD30_CMD_START_MEASUREMENT & 0xFF;
 80018b8:	4b0e      	ldr	r3, [pc, #56]	@ (80018f4 <SCD30_StartMeasurement+0x48>)
 80018ba:	2210      	movs	r2, #16
 80018bc:	705a      	strb	r2, [r3, #1]
    scd30_tx_buf[2] = 0x00; // 0x0000: ambient pressure compensation disabled
 80018be:	4b0d      	ldr	r3, [pc, #52]	@ (80018f4 <SCD30_StartMeasurement+0x48>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	709a      	strb	r2, [r3, #2]
    scd30_tx_buf[3] = 0x00;
 80018c4:	4b0b      	ldr	r3, [pc, #44]	@ (80018f4 <SCD30_StartMeasurement+0x48>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	70da      	strb	r2, [r3, #3]
    scd30_tx_buf[4] = SCD30_CalcCRC(&scd30_tx_buf[2], 2);
 80018ca:	2102      	movs	r1, #2
 80018cc:	480a      	ldr	r0, [pc, #40]	@ (80018f8 <SCD30_StartMeasurement+0x4c>)
 80018ce:	f7ff ff99 	bl	8001804 <SCD30_CalcCRC>
 80018d2:	4603      	mov	r3, r0
 80018d4:	461a      	mov	r2, r3
 80018d6:	4b07      	ldr	r3, [pc, #28]	@ (80018f4 <SCD30_StartMeasurement+0x48>)
 80018d8:	711a      	strb	r2, [r3, #4]

    return HAL_I2C_Master_Transmit(&hi2c1, SCD30_I2C_ADDR, scd30_tx_buf, 5, 100);
 80018da:	2364      	movs	r3, #100	@ 0x64
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	2305      	movs	r3, #5
 80018e0:	4a04      	ldr	r2, [pc, #16]	@ (80018f4 <SCD30_StartMeasurement+0x48>)
 80018e2:	21c2      	movs	r1, #194	@ 0xc2
 80018e4:	4805      	ldr	r0, [pc, #20]	@ (80018fc <SCD30_StartMeasurement+0x50>)
 80018e6:	f002 fbaf 	bl	8004048 <HAL_I2C_Master_Transmit>
 80018ea:	4603      	mov	r3, r0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000538 	.word	0x20000538
 80018f8:	2000053a 	.word	0x2000053a
 80018fc:	200000bc 	.word	0x200000bc

08001900 <SCD30_DataReady>:
 * @brief  Check if SCD30 data is ready
 * @param  ready: Pointer to store ready status
 * @retval HAL status
 */
HAL_StatusTypeDef SCD30_DataReady(uint8_t *ready)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af02      	add	r7, sp, #8
 8001906:	6078      	str	r0, [r7, #4]
    uint8_t tx[2] = {(SCD30_CMD_GET_DATA_READY >> 8) & 0xFF, SCD30_CMD_GET_DATA_READY & 0xFF};
 8001908:	f240 2302 	movw	r3, #514	@ 0x202
 800190c:	81bb      	strh	r3, [r7, #12]
    uint8_t rx[3];

    HAL_StatusTypeDef res = HAL_I2C_Master_Transmit(&hi2c1, SCD30_I2C_ADDR, tx, 2, 100);
 800190e:	f107 020c 	add.w	r2, r7, #12
 8001912:	2364      	movs	r3, #100	@ 0x64
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	2302      	movs	r3, #2
 8001918:	21c2      	movs	r1, #194	@ 0xc2
 800191a:	4817      	ldr	r0, [pc, #92]	@ (8001978 <SCD30_DataReady+0x78>)
 800191c:	f002 fb94 	bl	8004048 <HAL_I2C_Master_Transmit>
 8001920:	4603      	mov	r3, r0
 8001922:	73fb      	strb	r3, [r7, #15]
    if (res != HAL_OK)
 8001924:	7bfb      	ldrb	r3, [r7, #15]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <SCD30_DataReady+0x2e>
        return res;
 800192a:	7bfb      	ldrb	r3, [r7, #15]
 800192c:	e020      	b.n	8001970 <SCD30_DataReady+0x70>

    res = HAL_I2C_Master_Receive(&hi2c1, SCD30_I2C_ADDR, rx, 3, 100);
 800192e:	f107 0208 	add.w	r2, r7, #8
 8001932:	2364      	movs	r3, #100	@ 0x64
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	2303      	movs	r3, #3
 8001938:	21c2      	movs	r1, #194	@ 0xc2
 800193a:	480f      	ldr	r0, [pc, #60]	@ (8001978 <SCD30_DataReady+0x78>)
 800193c:	f002 fc9c 	bl	8004278 <HAL_I2C_Master_Receive>
 8001940:	4603      	mov	r3, r0
 8001942:	73fb      	strb	r3, [r7, #15]
    if (res != HAL_OK)
 8001944:	7bfb      	ldrb	r3, [r7, #15]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <SCD30_DataReady+0x4e>
        return res;
 800194a:	7bfb      	ldrb	r3, [r7, #15]
 800194c:	e010      	b.n	8001970 <SCD30_DataReady+0x70>

    // Verify CRC
    if (SCD30_CalcCRC(rx, 2) != rx[2])
 800194e:	f107 0308 	add.w	r3, r7, #8
 8001952:	2102      	movs	r1, #2
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff55 	bl	8001804 <SCD30_CalcCRC>
 800195a:	4603      	mov	r3, r0
 800195c:	461a      	mov	r2, r3
 800195e:	7abb      	ldrb	r3, [r7, #10]
 8001960:	429a      	cmp	r2, r3
 8001962:	d001      	beq.n	8001968 <SCD30_DataReady+0x68>
        return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e003      	b.n	8001970 <SCD30_DataReady+0x70>

    *ready = (rx[0] << 8) | rx[1];
 8001968:	7a7a      	ldrb	r2, [r7, #9]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	701a      	strb	r2, [r3, #0]
    return HAL_OK;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	200000bc 	.word	0x200000bc

0800197c <SCD30_ReadMeasurement>:
 * @param  temperature: Pointer to store temperature (°C)
 * @param  humidity: Pointer to store humidity (%)
 * @retval HAL status
 */
HAL_StatusTypeDef SCD30_ReadMeasurement(float *co2, float *temperature, float *humidity)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b090      	sub	sp, #64	@ 0x40
 8001980:	af02      	add	r7, sp, #8
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
    scd30_tx_buf[0] = (SCD30_CMD_READ_MEASUREMENT >> 8) & 0xFF;
 8001988:	4b59      	ldr	r3, [pc, #356]	@ (8001af0 <SCD30_ReadMeasurement+0x174>)
 800198a:	2203      	movs	r2, #3
 800198c:	701a      	strb	r2, [r3, #0]
    scd30_tx_buf[1] = SCD30_CMD_READ_MEASUREMENT & 0xFF;
 800198e:	4b58      	ldr	r3, [pc, #352]	@ (8001af0 <SCD30_ReadMeasurement+0x174>)
 8001990:	2200      	movs	r2, #0
 8001992:	705a      	strb	r2, [r3, #1]

    HAL_StatusTypeDef res = HAL_I2C_Master_Transmit(&hi2c1, SCD30_I2C_ADDR, scd30_tx_buf, 2, 100);
 8001994:	2364      	movs	r3, #100	@ 0x64
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	2302      	movs	r3, #2
 800199a:	4a55      	ldr	r2, [pc, #340]	@ (8001af0 <SCD30_ReadMeasurement+0x174>)
 800199c:	21c2      	movs	r1, #194	@ 0xc2
 800199e:	4855      	ldr	r0, [pc, #340]	@ (8001af4 <SCD30_ReadMeasurement+0x178>)
 80019a0:	f002 fb52 	bl	8004048 <HAL_I2C_Master_Transmit>
 80019a4:	4603      	mov	r3, r0
 80019a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (res != HAL_OK)
 80019aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d002      	beq.n	80019b8 <SCD30_ReadMeasurement+0x3c>
        return res;
 80019b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80019b6:	e097      	b.n	8001ae8 <SCD30_ReadMeasurement+0x16c>

    res = HAL_I2C_Master_Receive(&hi2c1, SCD30_I2C_ADDR, scd30_rx_buf, 18, 200);
 80019b8:	23c8      	movs	r3, #200	@ 0xc8
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	2312      	movs	r3, #18
 80019be:	4a4e      	ldr	r2, [pc, #312]	@ (8001af8 <SCD30_ReadMeasurement+0x17c>)
 80019c0:	21c2      	movs	r1, #194	@ 0xc2
 80019c2:	484c      	ldr	r0, [pc, #304]	@ (8001af4 <SCD30_ReadMeasurement+0x178>)
 80019c4:	f002 fc58 	bl	8004278 <HAL_I2C_Master_Receive>
 80019c8:	4603      	mov	r3, r0
 80019ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (res != HAL_OK)
 80019ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d002      	beq.n	80019dc <SCD30_ReadMeasurement+0x60>
        return res;
 80019d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80019da:	e085      	b.n	8001ae8 <SCD30_ReadMeasurement+0x16c>

    // Parse 3 float values (each: 4 bytes + CRC per 2 bytes)
    uint8_t data[12];
    for (int i = 0, j = 0; i < 18; i += 6)
 80019dc:	2300      	movs	r3, #0
 80019de:	637b      	str	r3, [r7, #52]	@ 0x34
 80019e0:	2300      	movs	r3, #0
 80019e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80019e4:	e04f      	b.n	8001a86 <SCD30_ReadMeasurement+0x10a>
    {
        // Check CRC for each 2-byte pair
        if (SCD30_CalcCRC(&scd30_rx_buf[i], 2) != scd30_rx_buf[i + 2] ||
 80019e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019e8:	4a43      	ldr	r2, [pc, #268]	@ (8001af8 <SCD30_ReadMeasurement+0x17c>)
 80019ea:	4413      	add	r3, r2
 80019ec:	2102      	movs	r1, #2
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff ff08 	bl	8001804 <SCD30_CalcCRC>
 80019f4:	4603      	mov	r3, r0
 80019f6:	4619      	mov	r1, r3
 80019f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019fa:	3302      	adds	r3, #2
 80019fc:	4a3e      	ldr	r2, [pc, #248]	@ (8001af8 <SCD30_ReadMeasurement+0x17c>)
 80019fe:	5cd3      	ldrb	r3, [r2, r3]
 8001a00:	4299      	cmp	r1, r3
 8001a02:	d10f      	bne.n	8001a24 <SCD30_ReadMeasurement+0xa8>
            SCD30_CalcCRC(&scd30_rx_buf[i + 3], 2) != scd30_rx_buf[i + 5])
 8001a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a06:	3303      	adds	r3, #3
 8001a08:	4a3b      	ldr	r2, [pc, #236]	@ (8001af8 <SCD30_ReadMeasurement+0x17c>)
 8001a0a:	4413      	add	r3, r2
 8001a0c:	2102      	movs	r1, #2
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff fef8 	bl	8001804 <SCD30_CalcCRC>
 8001a14:	4603      	mov	r3, r0
 8001a16:	4619      	mov	r1, r3
 8001a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a1a:	3305      	adds	r3, #5
 8001a1c:	4a36      	ldr	r2, [pc, #216]	@ (8001af8 <SCD30_ReadMeasurement+0x17c>)
 8001a1e:	5cd3      	ldrb	r3, [r2, r3]
        if (SCD30_CalcCRC(&scd30_rx_buf[i], 2) != scd30_rx_buf[i + 2] ||
 8001a20:	4299      	cmp	r1, r3
 8001a22:	d001      	beq.n	8001a28 <SCD30_ReadMeasurement+0xac>
            return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e05f      	b.n	8001ae8 <SCD30_ReadMeasurement+0x16c>

        data[j++] = scd30_rx_buf[i];
 8001a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a2a:	1c5a      	adds	r2, r3, #1
 8001a2c:	633a      	str	r2, [r7, #48]	@ 0x30
 8001a2e:	4932      	ldr	r1, [pc, #200]	@ (8001af8 <SCD30_ReadMeasurement+0x17c>)
 8001a30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a32:	440a      	add	r2, r1
 8001a34:	7812      	ldrb	r2, [r2, #0]
 8001a36:	3338      	adds	r3, #56	@ 0x38
 8001a38:	443b      	add	r3, r7
 8001a3a:	f803 2c18 	strb.w	r2, [r3, #-24]
        data[j++] = scd30_rx_buf[i + 1];
 8001a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a40:	1c5a      	adds	r2, r3, #1
 8001a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a44:	1c59      	adds	r1, r3, #1
 8001a46:	6339      	str	r1, [r7, #48]	@ 0x30
 8001a48:	492b      	ldr	r1, [pc, #172]	@ (8001af8 <SCD30_ReadMeasurement+0x17c>)
 8001a4a:	5c8a      	ldrb	r2, [r1, r2]
 8001a4c:	3338      	adds	r3, #56	@ 0x38
 8001a4e:	443b      	add	r3, r7
 8001a50:	f803 2c18 	strb.w	r2, [r3, #-24]
        data[j++] = scd30_rx_buf[i + 3];
 8001a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a56:	1cda      	adds	r2, r3, #3
 8001a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a5a:	1c59      	adds	r1, r3, #1
 8001a5c:	6339      	str	r1, [r7, #48]	@ 0x30
 8001a5e:	4926      	ldr	r1, [pc, #152]	@ (8001af8 <SCD30_ReadMeasurement+0x17c>)
 8001a60:	5c8a      	ldrb	r2, [r1, r2]
 8001a62:	3338      	adds	r3, #56	@ 0x38
 8001a64:	443b      	add	r3, r7
 8001a66:	f803 2c18 	strb.w	r2, [r3, #-24]
        data[j++] = scd30_rx_buf[i + 4];
 8001a6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a6c:	1d1a      	adds	r2, r3, #4
 8001a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a70:	1c59      	adds	r1, r3, #1
 8001a72:	6339      	str	r1, [r7, #48]	@ 0x30
 8001a74:	4920      	ldr	r1, [pc, #128]	@ (8001af8 <SCD30_ReadMeasurement+0x17c>)
 8001a76:	5c8a      	ldrb	r2, [r1, r2]
 8001a78:	3338      	adds	r3, #56	@ 0x38
 8001a7a:	443b      	add	r3, r7
 8001a7c:	f803 2c18 	strb.w	r2, [r3, #-24]
    for (int i = 0, j = 0; i < 18; i += 6)
 8001a80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a82:	3306      	adds	r3, #6
 8001a84:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a88:	2b11      	cmp	r3, #17
 8001a8a:	ddac      	ble.n	80019e6 <SCD30_ReadMeasurement+0x6a>
    }

    // Convert from big-endian to little-endian and copy to float
    // SCD30 sends data in big-endian format, STM32 uses little-endian
    // Use the exact same method as working SCD30 project
    uint8_t co2_bytes[4] = {data[3], data[2], data[1], data[0]};
 8001a8c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001a90:	773b      	strb	r3, [r7, #28]
 8001a92:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001a96:	777b      	strb	r3, [r7, #29]
 8001a98:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001a9c:	77bb      	strb	r3, [r7, #30]
 8001a9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001aa2:	77fb      	strb	r3, [r7, #31]
    uint8_t temperature_bytes[4] = {data[7], data[6], data[5], data[4]};
 8001aa4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001aa8:	763b      	strb	r3, [r7, #24]
 8001aaa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001aae:	767b      	strb	r3, [r7, #25]
 8001ab0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001ab4:	76bb      	strb	r3, [r7, #26]
 8001ab6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001aba:	76fb      	strb	r3, [r7, #27]
    uint8_t humidity_bytes[4] = {data[11], data[10], data[9], data[8]};
 8001abc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001ac0:	753b      	strb	r3, [r7, #20]
 8001ac2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001ac6:	757b      	strb	r3, [r7, #21]
 8001ac8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001acc:	75bb      	strb	r3, [r7, #22]
 8001ace:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001ad2:	75fb      	strb	r3, [r7, #23]

    memcpy(co2, co2_bytes, 4);
 8001ad4:	69fa      	ldr	r2, [r7, #28]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	601a      	str	r2, [r3, #0]
    memcpy(temperature, temperature_bytes, 4);
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	601a      	str	r2, [r3, #0]
    memcpy(humidity, humidity_bytes, 4);
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3738      	adds	r7, #56	@ 0x38
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000538 	.word	0x20000538
 8001af4:	200000bc 	.word	0x200000bc
 8001af8:	20000540 	.word	0x20000540

08001afc <SCD30_UpdateData>:
 * @brief  Update SCD30 data if ready
 * @param  None
 * @retval HAL status
 */
HAL_StatusTypeDef SCD30_UpdateData(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
    // Check if data is ready
    HAL_StatusTypeDef status = SCD30_DataReady(&sensor_data.scd30_data_ready);
 8001b02:	483f      	ldr	r0, [pc, #252]	@ (8001c00 <SCD30_UpdateData+0x104>)
 8001b04:	f7ff fefc 	bl	8001900 <SCD30_DataReady>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d010      	beq.n	8001b34 <SCD30_UpdateData+0x38>
    {
        // Communication failed, reset values to indicate error
        sensor_data.scd30_co2 = 0.0f;
 8001b12:	4b3c      	ldr	r3, [pc, #240]	@ (8001c04 <SCD30_UpdateData+0x108>)
 8001b14:	f04f 0200 	mov.w	r2, #0
 8001b18:	615a      	str	r2, [r3, #20]
        sensor_data.scd30_temperature = -273.15f; // Absolute zero indicates error
 8001b1a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c04 <SCD30_UpdateData+0x108>)
 8001b1c:	4a3a      	ldr	r2, [pc, #232]	@ (8001c08 <SCD30_UpdateData+0x10c>)
 8001b1e:	619a      	str	r2, [r3, #24]
        sensor_data.scd30_humidity = 0.0f;
 8001b20:	4b38      	ldr	r3, [pc, #224]	@ (8001c04 <SCD30_UpdateData+0x108>)
 8001b22:	f04f 0200 	mov.w	r2, #0
 8001b26:	61da      	str	r2, [r3, #28]
        sensor_data.scd30_data_ready = 0;
 8001b28:	4b36      	ldr	r3, [pc, #216]	@ (8001c04 <SCD30_UpdateData+0x108>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2020 	strb.w	r2, [r3, #32]
        return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e061      	b.n	8001bf8 <SCD30_UpdateData+0xfc>
    }

    // Read measurement if data is ready
    if (sensor_data.scd30_data_ready)
 8001b34:	4b33      	ldr	r3, [pc, #204]	@ (8001c04 <SCD30_UpdateData+0x108>)
 8001b36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d05b      	beq.n	8001bf6 <SCD30_UpdateData+0xfa>
    {
        status = SCD30_ReadMeasurement(&sensor_data.scd30_co2,
 8001b3e:	4a33      	ldr	r2, [pc, #204]	@ (8001c0c <SCD30_UpdateData+0x110>)
 8001b40:	4933      	ldr	r1, [pc, #204]	@ (8001c10 <SCD30_UpdateData+0x114>)
 8001b42:	4834      	ldr	r0, [pc, #208]	@ (8001c14 <SCD30_UpdateData+0x118>)
 8001b44:	f7ff ff1a 	bl	800197c <SCD30_ReadMeasurement>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	71fb      	strb	r3, [r7, #7]
                                       &sensor_data.scd30_temperature,
                                       &sensor_data.scd30_humidity);

        if (status != HAL_OK)
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d00c      	beq.n	8001b6c <SCD30_UpdateData+0x70>
        {
            // Read failed, reset values to indicate error
            sensor_data.scd30_co2 = 0.0f;
 8001b52:	4b2c      	ldr	r3, [pc, #176]	@ (8001c04 <SCD30_UpdateData+0x108>)
 8001b54:	f04f 0200 	mov.w	r2, #0
 8001b58:	615a      	str	r2, [r3, #20]
            sensor_data.scd30_temperature = -273.15f; // Absolute zero indicates error
 8001b5a:	4b2a      	ldr	r3, [pc, #168]	@ (8001c04 <SCD30_UpdateData+0x108>)
 8001b5c:	4a2a      	ldr	r2, [pc, #168]	@ (8001c08 <SCD30_UpdateData+0x10c>)
 8001b5e:	619a      	str	r2, [r3, #24]
            sensor_data.scd30_humidity = 0.0f;
 8001b60:	4b28      	ldr	r3, [pc, #160]	@ (8001c04 <SCD30_UpdateData+0x108>)
 8001b62:	f04f 0200 	mov.w	r2, #0
 8001b66:	61da      	str	r2, [r3, #28]
            return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e045      	b.n	8001bf8 <SCD30_UpdateData+0xfc>
        }

        // Validate readings are reasonable
        if (sensor_data.scd30_temperature < -40.0f || sensor_data.scd30_temperature > 70.0f ||
 8001b6c:	4b25      	ldr	r3, [pc, #148]	@ (8001c04 <SCD30_UpdateData+0x108>)
 8001b6e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001b72:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8001c18 <SCD30_UpdateData+0x11c>
 8001b76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b7e:	d42d      	bmi.n	8001bdc <SCD30_UpdateData+0xe0>
 8001b80:	4b20      	ldr	r3, [pc, #128]	@ (8001c04 <SCD30_UpdateData+0x108>)
 8001b82:	edd3 7a06 	vldr	s15, [r3, #24]
 8001b86:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001c1c <SCD30_UpdateData+0x120>
 8001b8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b92:	dc23      	bgt.n	8001bdc <SCD30_UpdateData+0xe0>
            sensor_data.scd30_humidity < 0.0f || sensor_data.scd30_humidity > 100.0f ||
 8001b94:	4b1b      	ldr	r3, [pc, #108]	@ (8001c04 <SCD30_UpdateData+0x108>)
 8001b96:	edd3 7a07 	vldr	s15, [r3, #28]
        if (sensor_data.scd30_temperature < -40.0f || sensor_data.scd30_temperature > 70.0f ||
 8001b9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba2:	d41b      	bmi.n	8001bdc <SCD30_UpdateData+0xe0>
            sensor_data.scd30_humidity < 0.0f || sensor_data.scd30_humidity > 100.0f ||
 8001ba4:	4b17      	ldr	r3, [pc, #92]	@ (8001c04 <SCD30_UpdateData+0x108>)
 8001ba6:	edd3 7a07 	vldr	s15, [r3, #28]
 8001baa:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001c20 <SCD30_UpdateData+0x124>
 8001bae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb6:	dc11      	bgt.n	8001bdc <SCD30_UpdateData+0xe0>
            sensor_data.scd30_co2 < 0.0f || sensor_data.scd30_co2 > 40000.0f)
 8001bb8:	4b12      	ldr	r3, [pc, #72]	@ (8001c04 <SCD30_UpdateData+0x108>)
 8001bba:	edd3 7a05 	vldr	s15, [r3, #20]
            sensor_data.scd30_humidity < 0.0f || sensor_data.scd30_humidity > 100.0f ||
 8001bbe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc6:	d409      	bmi.n	8001bdc <SCD30_UpdateData+0xe0>
            sensor_data.scd30_co2 < 0.0f || sensor_data.scd30_co2 > 40000.0f)
 8001bc8:	4b0e      	ldr	r3, [pc, #56]	@ (8001c04 <SCD30_UpdateData+0x108>)
 8001bca:	edd3 7a05 	vldr	s15, [r3, #20]
 8001bce:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001c24 <SCD30_UpdateData+0x128>
 8001bd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bda:	dd0c      	ble.n	8001bf6 <SCD30_UpdateData+0xfa>
        {
            // Invalid readings, reset to error values
            sensor_data.scd30_co2 = 0.0f;
 8001bdc:	4b09      	ldr	r3, [pc, #36]	@ (8001c04 <SCD30_UpdateData+0x108>)
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	615a      	str	r2, [r3, #20]
            sensor_data.scd30_temperature = -273.15f; // Absolute zero indicates error
 8001be4:	4b07      	ldr	r3, [pc, #28]	@ (8001c04 <SCD30_UpdateData+0x108>)
 8001be6:	4a08      	ldr	r2, [pc, #32]	@ (8001c08 <SCD30_UpdateData+0x10c>)
 8001be8:	619a      	str	r2, [r3, #24]
            sensor_data.scd30_humidity = 0.0f;
 8001bea:	4b06      	ldr	r3, [pc, #24]	@ (8001c04 <SCD30_UpdateData+0x108>)
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	61da      	str	r2, [r3, #28]
            return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e000      	b.n	8001bf8 <SCD30_UpdateData+0xfc>
        }
    }

    return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000530 	.word	0x20000530
 8001c04:	20000510 	.word	0x20000510
 8001c08:	c3889333 	.word	0xc3889333
 8001c0c:	2000052c 	.word	0x2000052c
 8001c10:	20000528 	.word	0x20000528
 8001c14:	20000524 	.word	0x20000524
 8001c18:	c2200000 	.word	0xc2200000
 8001c1c:	428c0000 	.word	0x428c0000
 8001c20:	42c80000 	.word	0x42c80000
 8001c24:	471c4000 	.word	0x471c4000

08001c28 <Sensors_Init>:
 * @brief  Initialize all sensors
 * @param  None
 * @retval None
 */
void Sensors_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
    // Initialize MQ2 sensors
    MQ2_Init();
 8001c2c:	f7ff fcb6 	bl	800159c <MQ2_Init>

    // Initialize SCD30 sensor (with delay for startup)
    HAL_Delay(1000); // SCD30 needs time to start up
 8001c30:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c34:	f000 fba2 	bl	800237c <HAL_Delay>
    SCD30_Init();
 8001c38:	f7ff fe1e 	bl	8001878 <SCD30_Init>

    // Update timestamp
    sensor_data.last_update = HAL_GetTick();
 8001c3c:	f000 fb92 	bl	8002364 <HAL_GetTick>
 8001c40:	4603      	mov	r3, r0
 8001c42:	4a02      	ldr	r2, [pc, #8]	@ (8001c4c <Sensors_Init+0x24>)
 8001c44:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000510 	.word	0x20000510

08001c50 <Sensors_UpdateAll>:
 * @brief  Update all sensor readings
 * @param  None
 * @retval None
 */
void Sensors_UpdateAll(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
    // Update MQ2 sensors
    MQ2_ReadAllChannels();
 8001c54:	f7ff fda0 	bl	8001798 <MQ2_ReadAllChannels>

    // Update SCD30 sensor
    SCD30_UpdateData();
 8001c58:	f7ff ff50 	bl	8001afc <SCD30_UpdateData>

    // Update timestamp
    sensor_data.last_update = HAL_GetTick();
 8001c5c:	f000 fb82 	bl	8002364 <HAL_GetTick>
 8001c60:	4603      	mov	r3, r0
 8001c62:	4a02      	ldr	r2, [pc, #8]	@ (8001c6c <Sensors_UpdateAll+0x1c>)
 8001c64:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000510 	.word	0x20000510

08001c70 <Sensors_GetMQ2Value>:
 * @brief  Get MQ2 raw ADC value
 * @param  channel: Channel number (0-3)
 * @retval Raw ADC value (0-4095)
 */
uint16_t Sensors_GetMQ2Value(uint8_t channel)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	71fb      	strb	r3, [r7, #7]
    if (channel >= MQ2_NUM_CHANNELS)
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	2b03      	cmp	r3, #3
 8001c7e:	d901      	bls.n	8001c84 <Sensors_GetMQ2Value+0x14>
        return 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	e003      	b.n	8001c8c <Sensors_GetMQ2Value+0x1c>
    return sensor_data.mq2_values[channel];
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	4a04      	ldr	r2, [pc, #16]	@ (8001c98 <Sensors_GetMQ2Value+0x28>)
 8001c88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	20000510 	.word	0x20000510

08001c9c <Sensors_GetMQ2Voltage>:
 * @brief  Get MQ2 voltage in millivolts
 * @param  channel: Channel number (0-3)
 * @retval Voltage in millivolts
 */
uint16_t Sensors_GetMQ2Voltage(uint8_t channel)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	71fb      	strb	r3, [r7, #7]
    if (channel >= MQ2_NUM_CHANNELS)
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	2b03      	cmp	r3, #3
 8001caa:	d901      	bls.n	8001cb0 <Sensors_GetMQ2Voltage+0x14>
        return 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	e004      	b.n	8001cba <Sensors_GetMQ2Voltage+0x1e>
    return sensor_data.mq2_voltages[channel];
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	4a05      	ldr	r2, [pc, #20]	@ (8001cc8 <Sensors_GetMQ2Voltage+0x2c>)
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	20000510 	.word	0x20000510

08001ccc <Sensors_GetMQ2Digital>:
 * @brief  Get MQ2 digital gas detection status
 * @param  channel: Channel number (0-3)
 * @retval Gas detection status (1=gas detected, 0=no gas)
 */
uint8_t Sensors_GetMQ2Digital(uint8_t channel)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]
    if (channel >= MQ2_NUM_CHANNELS)
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	2b03      	cmp	r3, #3
 8001cda:	d901      	bls.n	8001ce0 <Sensors_GetMQ2Digital+0x14>
        return 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	e003      	b.n	8001ce8 <Sensors_GetMQ2Digital+0x1c>
    return sensor_data.mq2_digital[channel];
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	4a04      	ldr	r2, [pc, #16]	@ (8001cf4 <Sensors_GetMQ2Digital+0x28>)
 8001ce4:	4413      	add	r3, r2
 8001ce6:	7c1b      	ldrb	r3, [r3, #16]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	20000510 	.word	0x20000510

08001cf8 <Sensors_GetSCD30_CO2>:
 * @brief  Get SCD30 CO2 concentration
 * @param  None
 * @retval CO2 concentration in ppm
 */
float Sensors_GetSCD30_CO2(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
    return sensor_data.scd30_co2;
 8001cfc:	4b04      	ldr	r3, [pc, #16]	@ (8001d10 <Sensors_GetSCD30_CO2+0x18>)
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	ee07 3a90 	vmov	s15, r3
}
 8001d04:	eeb0 0a67 	vmov.f32	s0, s15
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	20000510 	.word	0x20000510

08001d14 <Sensors_GetSCD30_Temperature>:
 * @brief  Get SCD30 temperature
 * @param  None
 * @retval Temperature in Celsius
 */
float Sensors_GetSCD30_Temperature(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
    return sensor_data.scd30_temperature;
 8001d18:	4b04      	ldr	r3, [pc, #16]	@ (8001d2c <Sensors_GetSCD30_Temperature+0x18>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	ee07 3a90 	vmov	s15, r3
}
 8001d20:	eeb0 0a67 	vmov.f32	s0, s15
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	20000510 	.word	0x20000510

08001d30 <Sensors_GetSCD30_Humidity>:
 * @brief  Get SCD30 humidity
 * @param  None
 * @retval Relative humidity in %
 */
float Sensors_GetSCD30_Humidity(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
    return sensor_data.scd30_humidity;
 8001d34:	4b04      	ldr	r3, [pc, #16]	@ (8001d48 <Sensors_GetSCD30_Humidity+0x18>)
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	ee07 3a90 	vmov	s15, r3
 8001d3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	20000510 	.word	0x20000510

08001d4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d52:	4b0f      	ldr	r3, [pc, #60]	@ (8001d90 <HAL_MspInit+0x44>)
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	4a0e      	ldr	r2, [pc, #56]	@ (8001d90 <HAL_MspInit+0x44>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	6193      	str	r3, [r2, #24]
 8001d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d90 <HAL_MspInit+0x44>)
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	607b      	str	r3, [r7, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d6a:	4b09      	ldr	r3, [pc, #36]	@ (8001d90 <HAL_MspInit+0x44>)
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	4a08      	ldr	r2, [pc, #32]	@ (8001d90 <HAL_MspInit+0x44>)
 8001d70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d74:	61d3      	str	r3, [r2, #28]
 8001d76:	4b06      	ldr	r3, [pc, #24]	@ (8001d90 <HAL_MspInit+0x44>)
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d7e:	603b      	str	r3, [r7, #0]
 8001d80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40021000 	.word	0x40021000

08001d94 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08a      	sub	sp, #40	@ 0x28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001db4:	d14c      	bne.n	8001e50 <HAL_ADC_MspInit+0xbc>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001db6:	4b28      	ldr	r3, [pc, #160]	@ (8001e58 <HAL_ADC_MspInit+0xc4>)
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	4a27      	ldr	r2, [pc, #156]	@ (8001e58 <HAL_ADC_MspInit+0xc4>)
 8001dbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dc0:	6153      	str	r3, [r2, #20]
 8001dc2:	4b25      	ldr	r3, [pc, #148]	@ (8001e58 <HAL_ADC_MspInit+0xc4>)
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dce:	4b22      	ldr	r3, [pc, #136]	@ (8001e58 <HAL_ADC_MspInit+0xc4>)
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	4a21      	ldr	r2, [pc, #132]	@ (8001e58 <HAL_ADC_MspInit+0xc4>)
 8001dd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dd8:	6153      	str	r3, [r2, #20]
 8001dda:	4b1f      	ldr	r3, [pc, #124]	@ (8001e58 <HAL_ADC_MspInit+0xc4>)
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001de6:	230f      	movs	r3, #15
 8001de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dea:	2303      	movs	r3, #3
 8001dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df2:	f107 0314 	add.w	r3, r7, #20
 8001df6:	4619      	mov	r1, r3
 8001df8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dfc:	f001 fee4 	bl	8003bc8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001e00:	4b16      	ldr	r3, [pc, #88]	@ (8001e5c <HAL_ADC_MspInit+0xc8>)
 8001e02:	4a17      	ldr	r2, [pc, #92]	@ (8001e60 <HAL_ADC_MspInit+0xcc>)
 8001e04:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e06:	4b15      	ldr	r3, [pc, #84]	@ (8001e5c <HAL_ADC_MspInit+0xc8>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e0c:	4b13      	ldr	r3, [pc, #76]	@ (8001e5c <HAL_ADC_MspInit+0xc8>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e12:	4b12      	ldr	r3, [pc, #72]	@ (8001e5c <HAL_ADC_MspInit+0xc8>)
 8001e14:	2280      	movs	r2, #128	@ 0x80
 8001e16:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e18:	4b10      	ldr	r3, [pc, #64]	@ (8001e5c <HAL_ADC_MspInit+0xc8>)
 8001e1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e1e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e20:	4b0e      	ldr	r3, [pc, #56]	@ (8001e5c <HAL_ADC_MspInit+0xc8>)
 8001e22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e26:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e28:	4b0c      	ldr	r3, [pc, #48]	@ (8001e5c <HAL_ADC_MspInit+0xc8>)
 8001e2a:	2220      	movs	r2, #32
 8001e2c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e5c <HAL_ADC_MspInit+0xc8>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e34:	4809      	ldr	r0, [pc, #36]	@ (8001e5c <HAL_ADC_MspInit+0xc8>)
 8001e36:	f001 fca6 	bl	8003786 <HAL_DMA_Init>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8001e40:	f7fe fc40 	bl	80006c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a05      	ldr	r2, [pc, #20]	@ (8001e5c <HAL_ADC_MspInit+0xc8>)
 8001e48:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e4a:	4a04      	ldr	r2, [pc, #16]	@ (8001e5c <HAL_ADC_MspInit+0xc8>)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001e50:	bf00      	nop
 8001e52:	3728      	adds	r7, #40	@ 0x28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	20000078 	.word	0x20000078
 8001e60:	40020008 	.word	0x40020008

08001e64 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08a      	sub	sp, #40	@ 0x28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a1b      	ldr	r2, [pc, #108]	@ (8001ef0 <HAL_I2C_MspInit+0x8c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d12f      	bne.n	8001ee6 <HAL_I2C_MspInit+0x82>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e86:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef4 <HAL_I2C_MspInit+0x90>)
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	4a1a      	ldr	r2, [pc, #104]	@ (8001ef4 <HAL_I2C_MspInit+0x90>)
 8001e8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e90:	6153      	str	r3, [r2, #20]
 8001e92:	4b18      	ldr	r3, [pc, #96]	@ (8001ef4 <HAL_I2C_MspInit+0x90>)
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e9e:	23c0      	movs	r3, #192	@ 0xc0
 8001ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ea2:	2312      	movs	r3, #18
 8001ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001eae:	2304      	movs	r3, #4
 8001eb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb2:	f107 0314 	add.w	r3, r7, #20
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	480f      	ldr	r0, [pc, #60]	@ (8001ef8 <HAL_I2C_MspInit+0x94>)
 8001eba:	f001 fe85 	bl	8003bc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef4 <HAL_I2C_MspInit+0x90>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	4a0c      	ldr	r2, [pc, #48]	@ (8001ef4 <HAL_I2C_MspInit+0x90>)
 8001ec4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ec8:	61d3      	str	r3, [r2, #28]
 8001eca:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef4 <HAL_I2C_MspInit+0x90>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2100      	movs	r1, #0
 8001eda:	2020      	movs	r0, #32
 8001edc:	f001 fc1d 	bl	800371a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001ee0:	2020      	movs	r0, #32
 8001ee2:	f001 fc36 	bl	8003752 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001ee6:	bf00      	nop
 8001ee8:	3728      	adds	r7, #40	@ 0x28
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40005400 	.word	0x40005400
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	48000400 	.word	0x48000400

08001efc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a0d      	ldr	r2, [pc, #52]	@ (8001f40 <HAL_TIM_Base_MspInit+0x44>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d113      	bne.n	8001f36 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f44 <HAL_TIM_Base_MspInit+0x48>)
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	4a0c      	ldr	r2, [pc, #48]	@ (8001f44 <HAL_TIM_Base_MspInit+0x48>)
 8001f14:	f043 0302 	orr.w	r3, r3, #2
 8001f18:	61d3      	str	r3, [r2, #28]
 8001f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f44 <HAL_TIM_Base_MspInit+0x48>)
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f26:	2200      	movs	r2, #0
 8001f28:	2100      	movs	r1, #0
 8001f2a:	201d      	movs	r0, #29
 8001f2c:	f001 fbf5 	bl	800371a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f30:	201d      	movs	r0, #29
 8001f32:	f001 fc0e 	bl	8003752 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001f36:	bf00      	nop
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40000400 	.word	0x40000400
 8001f44:	40021000 	.word	0x40021000

08001f48 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08a      	sub	sp, #40	@ 0x28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f50:	f107 0314 	add.w	r3, r7, #20
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a42      	ldr	r2, [pc, #264]	@ (8002070 <HAL_UART_MspInit+0x128>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d17d      	bne.n	8002066 <HAL_UART_MspInit+0x11e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f6a:	4b42      	ldr	r3, [pc, #264]	@ (8002074 <HAL_UART_MspInit+0x12c>)
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	4a41      	ldr	r2, [pc, #260]	@ (8002074 <HAL_UART_MspInit+0x12c>)
 8001f70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f74:	6193      	str	r3, [r2, #24]
 8001f76:	4b3f      	ldr	r3, [pc, #252]	@ (8002074 <HAL_UART_MspInit+0x12c>)
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f82:	4b3c      	ldr	r3, [pc, #240]	@ (8002074 <HAL_UART_MspInit+0x12c>)
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	4a3b      	ldr	r2, [pc, #236]	@ (8002074 <HAL_UART_MspInit+0x12c>)
 8001f88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f8c:	6153      	str	r3, [r2, #20]
 8001f8e:	4b39      	ldr	r3, [pc, #228]	@ (8002074 <HAL_UART_MspInit+0x12c>)
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA12     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8001f9a:	f44f 53b0 	mov.w	r3, #5632	@ 0x1600
 8001f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fac:	2307      	movs	r3, #7
 8001fae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fba:	f001 fe05 	bl	8003bc8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001fbe:	4b2e      	ldr	r3, [pc, #184]	@ (8002078 <HAL_UART_MspInit+0x130>)
 8001fc0:	4a2e      	ldr	r2, [pc, #184]	@ (800207c <HAL_UART_MspInit+0x134>)
 8001fc2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fc4:	4b2c      	ldr	r3, [pc, #176]	@ (8002078 <HAL_UART_MspInit+0x130>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fca:	4b2b      	ldr	r3, [pc, #172]	@ (8002078 <HAL_UART_MspInit+0x130>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fd0:	4b29      	ldr	r3, [pc, #164]	@ (8002078 <HAL_UART_MspInit+0x130>)
 8001fd2:	2280      	movs	r2, #128	@ 0x80
 8001fd4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fd6:	4b28      	ldr	r3, [pc, #160]	@ (8002078 <HAL_UART_MspInit+0x130>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fdc:	4b26      	ldr	r3, [pc, #152]	@ (8002078 <HAL_UART_MspInit+0x130>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001fe2:	4b25      	ldr	r3, [pc, #148]	@ (8002078 <HAL_UART_MspInit+0x130>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fe8:	4b23      	ldr	r3, [pc, #140]	@ (8002078 <HAL_UART_MspInit+0x130>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001fee:	4822      	ldr	r0, [pc, #136]	@ (8002078 <HAL_UART_MspInit+0x130>)
 8001ff0:	f001 fbc9 	bl	8003786 <HAL_DMA_Init>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8001ffa:	f7fe fb63 	bl	80006c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a1d      	ldr	r2, [pc, #116]	@ (8002078 <HAL_UART_MspInit+0x130>)
 8002002:	675a      	str	r2, [r3, #116]	@ 0x74
 8002004:	4a1c      	ldr	r2, [pc, #112]	@ (8002078 <HAL_UART_MspInit+0x130>)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800200a:	4b1d      	ldr	r3, [pc, #116]	@ (8002080 <HAL_UART_MspInit+0x138>)
 800200c:	4a1d      	ldr	r2, [pc, #116]	@ (8002084 <HAL_UART_MspInit+0x13c>)
 800200e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002010:	4b1b      	ldr	r3, [pc, #108]	@ (8002080 <HAL_UART_MspInit+0x138>)
 8002012:	2210      	movs	r2, #16
 8002014:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002016:	4b1a      	ldr	r3, [pc, #104]	@ (8002080 <HAL_UART_MspInit+0x138>)
 8002018:	2200      	movs	r2, #0
 800201a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800201c:	4b18      	ldr	r3, [pc, #96]	@ (8002080 <HAL_UART_MspInit+0x138>)
 800201e:	2280      	movs	r2, #128	@ 0x80
 8002020:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002022:	4b17      	ldr	r3, [pc, #92]	@ (8002080 <HAL_UART_MspInit+0x138>)
 8002024:	2200      	movs	r2, #0
 8002026:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002028:	4b15      	ldr	r3, [pc, #84]	@ (8002080 <HAL_UART_MspInit+0x138>)
 800202a:	2200      	movs	r2, #0
 800202c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800202e:	4b14      	ldr	r3, [pc, #80]	@ (8002080 <HAL_UART_MspInit+0x138>)
 8002030:	2200      	movs	r2, #0
 8002032:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002034:	4b12      	ldr	r3, [pc, #72]	@ (8002080 <HAL_UART_MspInit+0x138>)
 8002036:	2200      	movs	r2, #0
 8002038:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800203a:	4811      	ldr	r0, [pc, #68]	@ (8002080 <HAL_UART_MspInit+0x138>)
 800203c:	f001 fba3 	bl	8003786 <HAL_DMA_Init>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 8002046:	f7fe fb3d 	bl	80006c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a0c      	ldr	r2, [pc, #48]	@ (8002080 <HAL_UART_MspInit+0x138>)
 800204e:	671a      	str	r2, [r3, #112]	@ 0x70
 8002050:	4a0b      	ldr	r2, [pc, #44]	@ (8002080 <HAL_UART_MspInit+0x138>)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002056:	2200      	movs	r2, #0
 8002058:	2100      	movs	r1, #0
 800205a:	2025      	movs	r0, #37	@ 0x25
 800205c:	f001 fb5d 	bl	800371a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002060:	2025      	movs	r0, #37	@ 0x25
 8002062:	f001 fb76 	bl	8003752 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002066:	bf00      	nop
 8002068:	3728      	adds	r7, #40	@ 0x28
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40013800 	.word	0x40013800
 8002074:	40021000 	.word	0x40021000
 8002078:	200001e4 	.word	0x200001e4
 800207c:	40020058 	.word	0x40020058
 8002080:	20000228 	.word	0x20000228
 8002084:	40020044 	.word	0x40020044

08002088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800208c:	bf00      	nop
 800208e:	e7fd      	b.n	800208c <NMI_Handler+0x4>

08002090 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002094:	bf00      	nop
 8002096:	e7fd      	b.n	8002094 <HardFault_Handler+0x4>

08002098 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800209c:	bf00      	nop
 800209e:	e7fd      	b.n	800209c <MemManage_Handler+0x4>

080020a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020a4:	bf00      	nop
 80020a6:	e7fd      	b.n	80020a4 <BusFault_Handler+0x4>

080020a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020ac:	bf00      	nop
 80020ae:	e7fd      	b.n	80020ac <UsageFault_Handler+0x4>

080020b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020be:	b480      	push	{r7}
 80020c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020de:	f000 f92d 	bl	800233c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
	...

080020e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020ec:	4802      	ldr	r0, [pc, #8]	@ (80020f8 <DMA1_Channel1_IRQHandler+0x10>)
 80020ee:	f001 fc6c 	bl	80039ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000078 	.word	0x20000078

080020fc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002100:	4802      	ldr	r0, [pc, #8]	@ (800210c <DMA1_Channel4_IRQHandler+0x10>)
 8002102:	f001 fc62 	bl	80039ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000228 	.word	0x20000228

08002110 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002114:	4802      	ldr	r0, [pc, #8]	@ (8002120 <DMA1_Channel5_IRQHandler+0x10>)
 8002116:	f001 fc58 	bl	80039ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	200001e4 	.word	0x200001e4

08002124 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002128:	4802      	ldr	r0, [pc, #8]	@ (8002134 <TIM3_IRQHandler+0x10>)
 800212a:	f004 feab 	bl	8006e84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000110 	.word	0x20000110

08002138 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800213c:	4802      	ldr	r0, [pc, #8]	@ (8002148 <I2C1_ER_IRQHandler+0x10>)
 800213e:	f002 f991 	bl	8004464 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	200000bc 	.word	0x200000bc

0800214c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002150:	4802      	ldr	r0, [pc, #8]	@ (800215c <USART1_IRQHandler+0x10>)
 8002152:	f005 fabf 	bl	80076d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	2000015c 	.word	0x2000015c

08002160 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002164:	4b06      	ldr	r3, [pc, #24]	@ (8002180 <SystemInit+0x20>)
 8002166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800216a:	4a05      	ldr	r2, [pc, #20]	@ (8002180 <SystemInit+0x20>)
 800216c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002170:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <UART_Callbacks_Init>:
 * @brief  Initialize UART callbacks
 * @param  None
 * @retval None
 */
void UART_Callbacks_Init(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
    // UART callbacks are handled by HAL, this function can be used
    // for any additional initialization if needed
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
	...

08002194 <HAL_UARTEx_RxEventCallback>:
 * @param  huart: UART handle
 * @param  Size: Number of bytes received
 * @retval None
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	460b      	mov	r3, r1
 800219e:	807b      	strh	r3, [r7, #2]
    if (huart == &huart1 && Size > 0)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a1a      	ldr	r2, [pc, #104]	@ (800220c <HAL_UARTEx_RxEventCallback+0x78>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d12c      	bne.n	8002202 <HAL_UARTEx_RxEventCallback+0x6e>
 80021a8:	887b      	ldrh	r3, [r7, #2]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d029      	beq.n	8002202 <HAL_UARTEx_RxEventCallback+0x6e>
    {
        // Get Modbus context
        mbus_t modbus_ctx = Modbus_GetContext();
 80021ae:	f7ff f9e9 	bl	8001584 <Modbus_GetContext>
 80021b2:	4603      	mov	r3, r0
 80021b4:	737b      	strb	r3, [r7, #13]

        // Mark Modbus activity for recovery system
        ModbusRecovery_MarkActivity();
 80021b6:	f7fe f807 	bl	80001c8 <ModbusRecovery_MarkActivity>

        // Validate context before processing
        if (modbus_ctx >= 0)
 80021ba:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	db15      	blt.n	80021ee <HAL_UARTEx_RxEventCallback+0x5a>
        {
            // Process received Modbus data byte by byte
            for (uint16_t i = 0; i < Size && i < sizeof(modbus_rx_buffer); i++)
 80021c2:	2300      	movs	r3, #0
 80021c4:	81fb      	strh	r3, [r7, #14]
 80021c6:	e00b      	b.n	80021e0 <HAL_UARTEx_RxEventCallback+0x4c>
            {
                mbus_poll(modbus_ctx, modbus_rx_buffer[i]);
 80021c8:	89fb      	ldrh	r3, [r7, #14]
 80021ca:	4a11      	ldr	r2, [pc, #68]	@ (8002210 <HAL_UARTEx_RxEventCallback+0x7c>)
 80021cc:	5cd2      	ldrb	r2, [r2, r3]
 80021ce:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80021d2:	4611      	mov	r1, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe fccb 	bl	8000b70 <mbus_poll>
            for (uint16_t i = 0; i < Size && i < sizeof(modbus_rx_buffer); i++)
 80021da:	89fb      	ldrh	r3, [r7, #14]
 80021dc:	3301      	adds	r3, #1
 80021de:	81fb      	strh	r3, [r7, #14]
 80021e0:	89fa      	ldrh	r2, [r7, #14]
 80021e2:	887b      	ldrh	r3, [r7, #2]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d202      	bcs.n	80021ee <HAL_UARTEx_RxEventCallback+0x5a>
 80021e8:	89fb      	ldrh	r3, [r7, #14]
 80021ea:	2bff      	cmp	r3, #255	@ 0xff
 80021ec:	d9ec      	bls.n	80021c8 <HAL_UARTEx_RxEventCallback+0x34>
            }
        } // Clear the UART idle flag
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2210      	movs	r2, #16
 80021f4:	621a      	str	r2, [r3, #32]

        // Restart DMA reception for next frame
        HAL_UARTEx_ReceiveToIdle_DMA(&huart1, modbus_rx_buffer, sizeof(modbus_rx_buffer));
 80021f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021fa:	4905      	ldr	r1, [pc, #20]	@ (8002210 <HAL_UARTEx_RxEventCallback+0x7c>)
 80021fc:	4803      	ldr	r0, [pc, #12]	@ (800220c <HAL_UARTEx_RxEventCallback+0x78>)
 80021fe:	f006 fb27 	bl	8008850 <HAL_UARTEx_ReceiveToIdle_DMA>
    }
}
 8002202:	bf00      	nop
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	2000015c 	.word	0x2000015c
 8002210:	20000310 	.word	0x20000310

08002214 <HAL_UART_ErrorCallback>:
 * @brief  UART error callback
 * @param  huart: UART handle
 * @retval None
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
    if (huart == &huart1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a0d      	ldr	r2, [pc, #52]	@ (8002254 <HAL_UART_ErrorCallback+0x40>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d113      	bne.n	800224c <HAL_UART_ErrorCallback+0x38>
    {
        // Mark error for recovery system
        ModbusRecovery_MarkError();
 8002224:	f7fd ffd7 	bl	80001d6 <ModbusRecovery_MarkError>

        // Handle UART errors
        __HAL_UART_CLEAR_OREFLAG(huart);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2208      	movs	r2, #8
 800222e:	621a      	str	r2, [r3, #32]
        __HAL_UART_CLEAR_NEFLAG(huart);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2204      	movs	r2, #4
 8002236:	621a      	str	r2, [r3, #32]
        __HAL_UART_CLEAR_FEFLAG(huart);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2202      	movs	r2, #2
 800223e:	621a      	str	r2, [r3, #32]

        // Restart DMA reception
        HAL_UARTEx_ReceiveToIdle_DMA(&huart1, modbus_rx_buffer, sizeof(modbus_rx_buffer));
 8002240:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002244:	4904      	ldr	r1, [pc, #16]	@ (8002258 <HAL_UART_ErrorCallback+0x44>)
 8002246:	4803      	ldr	r0, [pc, #12]	@ (8002254 <HAL_UART_ErrorCallback+0x40>)
 8002248:	f006 fb02 	bl	8008850 <HAL_UARTEx_ReceiveToIdle_DMA>
    }
}
 800224c:	bf00      	nop
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	2000015c 	.word	0x2000015c
 8002258:	20000310 	.word	0x20000310

0800225c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800225c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002294 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002260:	f7ff ff7e 	bl	8002160 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002264:	480c      	ldr	r0, [pc, #48]	@ (8002298 <LoopForever+0x6>)
  ldr r1, =_edata
 8002266:	490d      	ldr	r1, [pc, #52]	@ (800229c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002268:	4a0d      	ldr	r2, [pc, #52]	@ (80022a0 <LoopForever+0xe>)
  movs r3, #0
 800226a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800226c:	e002      	b.n	8002274 <LoopCopyDataInit>

0800226e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800226e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002272:	3304      	adds	r3, #4

08002274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002278:	d3f9      	bcc.n	800226e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800227a:	4a0a      	ldr	r2, [pc, #40]	@ (80022a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800227c:	4c0a      	ldr	r4, [pc, #40]	@ (80022a8 <LoopForever+0x16>)
  movs r3, #0
 800227e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002280:	e001      	b.n	8002286 <LoopFillZerobss>

08002282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002284:	3204      	adds	r2, #4

08002286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002288:	d3fb      	bcc.n	8002282 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800228a:	f006 fb3d 	bl	8008908 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800228e:	f7fd ffd1 	bl	8000234 <main>

08002292 <LoopForever>:

LoopForever:
    b LoopForever
 8002292:	e7fe      	b.n	8002292 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002294:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800229c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80022a0:	08008bc4 	.word	0x08008bc4
  ldr r2, =_sbss
 80022a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80022a8:	20000558 	.word	0x20000558

080022ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022ac:	e7fe      	b.n	80022ac <ADC1_2_IRQHandler>
	...

080022b0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022b4:	4b08      	ldr	r3, [pc, #32]	@ (80022d8 <HAL_Init+0x28>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a07      	ldr	r2, [pc, #28]	@ (80022d8 <HAL_Init+0x28>)
 80022ba:	f043 0310 	orr.w	r3, r3, #16
 80022be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022c0:	2003      	movs	r0, #3
 80022c2:	f001 fa1f 	bl	8003704 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022c6:	200f      	movs	r0, #15
 80022c8:	f000 f808 	bl	80022dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022cc:	f7ff fd3e 	bl	8001d4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40022000 	.word	0x40022000

080022dc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022e4:	4b12      	ldr	r3, [pc, #72]	@ (8002330 <HAL_InitTick+0x54>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4b12      	ldr	r3, [pc, #72]	@ (8002334 <HAL_InitTick+0x58>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	4619      	mov	r1, r3
 80022ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fa:	4618      	mov	r0, r3
 80022fc:	f001 fa37 	bl	800376e <HAL_SYSTICK_Config>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e00e      	b.n	8002328 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b0f      	cmp	r3, #15
 800230e:	d80a      	bhi.n	8002326 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002310:	2200      	movs	r2, #0
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	f04f 30ff 	mov.w	r0, #4294967295
 8002318:	f001 f9ff 	bl	800371a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800231c:	4a06      	ldr	r2, [pc, #24]	@ (8002338 <HAL_InitTick+0x5c>)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002322:	2300      	movs	r3, #0
 8002324:	e000      	b.n	8002328 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
}
 8002328:	4618      	mov	r0, r3
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20000000 	.word	0x20000000
 8002334:	20000008 	.word	0x20000008
 8002338:	20000004 	.word	0x20000004

0800233c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002340:	4b06      	ldr	r3, [pc, #24]	@ (800235c <HAL_IncTick+0x20>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	461a      	mov	r2, r3
 8002346:	4b06      	ldr	r3, [pc, #24]	@ (8002360 <HAL_IncTick+0x24>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4413      	add	r3, r2
 800234c:	4a04      	ldr	r2, [pc, #16]	@ (8002360 <HAL_IncTick+0x24>)
 800234e:	6013      	str	r3, [r2, #0]
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	20000008 	.word	0x20000008
 8002360:	20000554 	.word	0x20000554

08002364 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  return uwTick;  
 8002368:	4b03      	ldr	r3, [pc, #12]	@ (8002378 <HAL_GetTick+0x14>)
 800236a:	681b      	ldr	r3, [r3, #0]
}
 800236c:	4618      	mov	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	20000554 	.word	0x20000554

0800237c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002384:	f7ff ffee 	bl	8002364 <HAL_GetTick>
 8002388:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002394:	d005      	beq.n	80023a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002396:	4b0a      	ldr	r3, [pc, #40]	@ (80023c0 <HAL_Delay+0x44>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	461a      	mov	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4413      	add	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80023a2:	bf00      	nop
 80023a4:	f7ff ffde 	bl	8002364 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d8f7      	bhi.n	80023a4 <HAL_Delay+0x28>
  {
  }
}
 80023b4:	bf00      	nop
 80023b6:	bf00      	nop
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000008 	.word	0x20000008

080023c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b09a      	sub	sp, #104	@ 0x68
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023cc:	2300      	movs	r3, #0
 80023ce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e172      	b.n	80026ca <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ee:	f003 0310 	and.w	r3, r3, #16
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d176      	bne.n	80024e4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d152      	bne.n	80024a4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff fcbb 	bl	8001d94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d13b      	bne.n	80024a4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 ff7d 	bl	800332c <ADC_Disable>
 8002432:	4603      	mov	r3, r0
 8002434:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243c:	f003 0310 	and.w	r3, r3, #16
 8002440:	2b00      	cmp	r3, #0
 8002442:	d12f      	bne.n	80024a4 <HAL_ADC_Init+0xe0>
 8002444:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002448:	2b00      	cmp	r3, #0
 800244a:	d12b      	bne.n	80024a4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002450:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002454:	f023 0302 	bic.w	r3, r3, #2
 8002458:	f043 0202 	orr.w	r2, r3, #2
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800246e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800247e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002480:	4b94      	ldr	r3, [pc, #592]	@ (80026d4 <HAL_ADC_Init+0x310>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a94      	ldr	r2, [pc, #592]	@ (80026d8 <HAL_ADC_Init+0x314>)
 8002486:	fba2 2303 	umull	r2, r3, r2, r3
 800248a:	0c9a      	lsrs	r2, r3, #18
 800248c:	4613      	mov	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002496:	e002      	b.n	800249e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	3b01      	subs	r3, #1
 800249c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1f9      	bne.n	8002498 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d007      	beq.n	80024c2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80024bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024c0:	d110      	bne.n	80024e4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c6:	f023 0312 	bic.w	r3, r3, #18
 80024ca:	f043 0210 	orr.w	r2, r3, #16
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d6:	f043 0201 	orr.w	r2, r3, #1
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e8:	f003 0310 	and.w	r3, r3, #16
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f040 80df 	bne.w	80026b0 <HAL_ADC_Init+0x2ec>
 80024f2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f040 80da 	bne.w	80026b0 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002506:	2b00      	cmp	r3, #0
 8002508:	f040 80d2 	bne.w	80026b0 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002510:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002514:	f043 0202 	orr.w	r2, r3, #2
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800251c:	4b6f      	ldr	r3, [pc, #444]	@ (80026dc <HAL_ADC_Init+0x318>)
 800251e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002528:	d102      	bne.n	8002530 <HAL_ADC_Init+0x16c>
 800252a:	4b6d      	ldr	r3, [pc, #436]	@ (80026e0 <HAL_ADC_Init+0x31c>)
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	e002      	b.n	8002536 <HAL_ADC_Init+0x172>
 8002530:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002534:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 0303 	and.w	r3, r3, #3
 8002540:	2b01      	cmp	r3, #1
 8002542:	d108      	bne.n	8002556 <HAL_ADC_Init+0x192>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b01      	cmp	r3, #1
 8002550:	d101      	bne.n	8002556 <HAL_ADC_Init+0x192>
 8002552:	2301      	movs	r3, #1
 8002554:	e000      	b.n	8002558 <HAL_ADC_Init+0x194>
 8002556:	2300      	movs	r3, #0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d11c      	bne.n	8002596 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800255c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800255e:	2b00      	cmp	r3, #0
 8002560:	d010      	beq.n	8002584 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	2b01      	cmp	r3, #1
 800256c:	d107      	bne.n	800257e <HAL_ADC_Init+0x1ba>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b01      	cmp	r3, #1
 8002578:	d101      	bne.n	800257e <HAL_ADC_Init+0x1ba>
 800257a:	2301      	movs	r3, #1
 800257c:	e000      	b.n	8002580 <HAL_ADC_Init+0x1bc>
 800257e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002580:	2b00      	cmp	r3, #0
 8002582:	d108      	bne.n	8002596 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002584:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	431a      	orrs	r2, r3
 8002592:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002594:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	7e5b      	ldrb	r3, [r3, #25]
 800259a:	035b      	lsls	r3, r3, #13
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80025a0:	2a01      	cmp	r2, #1
 80025a2:	d002      	beq.n	80025aa <HAL_ADC_Init+0x1e6>
 80025a4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80025a8:	e000      	b.n	80025ac <HAL_ADC_Init+0x1e8>
 80025aa:	2200      	movs	r2, #0
 80025ac:	431a      	orrs	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80025bc:	4313      	orrs	r3, r2
 80025be:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d11b      	bne.n	8002602 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	7e5b      	ldrb	r3, [r3, #25]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d109      	bne.n	80025e6 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d6:	3b01      	subs	r3, #1
 80025d8:	045a      	lsls	r2, r3, #17
 80025da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025dc:	4313      	orrs	r3, r2
 80025de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025e2:	663b      	str	r3, [r7, #96]	@ 0x60
 80025e4:	e00d      	b.n	8002602 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ea:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80025ee:	f043 0220 	orr.w	r2, r3, #32
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fa:	f043 0201 	orr.w	r2, r3, #1
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002606:	2b01      	cmp	r3, #1
 8002608:	d007      	beq.n	800261a <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002612:	4313      	orrs	r3, r2
 8002614:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002616:	4313      	orrs	r3, r2
 8002618:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 030c 	and.w	r3, r3, #12
 8002624:	2b00      	cmp	r3, #0
 8002626:	d114      	bne.n	8002652 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6812      	ldr	r2, [r2, #0]
 8002632:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002636:	f023 0302 	bic.w	r3, r3, #2
 800263a:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	7e1b      	ldrb	r3, [r3, #24]
 8002640:	039a      	lsls	r2, r3, #14
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	4313      	orrs	r3, r2
 800264c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800264e:	4313      	orrs	r3, r2
 8002650:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68da      	ldr	r2, [r3, #12]
 8002658:	4b22      	ldr	r3, [pc, #136]	@ (80026e4 <HAL_ADC_Init+0x320>)
 800265a:	4013      	ands	r3, r2
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6812      	ldr	r2, [r2, #0]
 8002660:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002662:	430b      	orrs	r3, r1
 8002664:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d10c      	bne.n	8002688 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002674:	f023 010f 	bic.w	r1, r3, #15
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	69db      	ldr	r3, [r3, #28]
 800267c:	1e5a      	subs	r2, r3, #1
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	430a      	orrs	r2, r1
 8002684:	631a      	str	r2, [r3, #48]	@ 0x30
 8002686:	e007      	b.n	8002698 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 020f 	bic.w	r2, r2, #15
 8002696:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a2:	f023 0303 	bic.w	r3, r3, #3
 80026a6:	f043 0201 	orr.w	r2, r3, #1
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	641a      	str	r2, [r3, #64]	@ 0x40
 80026ae:	e00a      	b.n	80026c6 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b4:	f023 0312 	bic.w	r3, r3, #18
 80026b8:	f043 0210 	orr.w	r2, r3, #16
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80026c0:	2301      	movs	r3, #1
 80026c2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80026c6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3768      	adds	r7, #104	@ 0x68
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	20000000 	.word	0x20000000
 80026d8:	431bde83 	.word	0x431bde83
 80026dc:	50000300 	.word	0x50000300
 80026e0:	50000100 	.word	0x50000100
 80026e4:	fff0c007 	.word	0xfff0c007

080026e8 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026f0:	2300      	movs	r3, #0
 80026f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f040 809c 	bne.w	800283c <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800270a:	2b01      	cmp	r3, #1
 800270c:	d101      	bne.n	8002712 <HAL_ADC_Start+0x2a>
 800270e:	2302      	movs	r3, #2
 8002710:	e097      	b.n	8002842 <HAL_ADC_Start+0x15a>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 fda2 	bl	8003264 <ADC_Enable>
 8002720:	4603      	mov	r3, r0
 8002722:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002724:	7bfb      	ldrb	r3, [r7, #15]
 8002726:	2b00      	cmp	r3, #0
 8002728:	f040 8083 	bne.w	8002832 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002730:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002734:	f023 0301 	bic.w	r3, r3, #1
 8002738:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002740:	4b42      	ldr	r3, [pc, #264]	@ (800284c <HAL_ADC_Start+0x164>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 031f 	and.w	r3, r3, #31
 8002748:	2b00      	cmp	r3, #0
 800274a:	d004      	beq.n	8002756 <HAL_ADC_Start+0x6e>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002754:	d115      	bne.n	8002782 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d027      	beq.n	80027c0 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002774:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002778:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002780:	e01e      	b.n	80027c0 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002786:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002796:	d004      	beq.n	80027a2 <HAL_ADC_Start+0xba>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a2c      	ldr	r2, [pc, #176]	@ (8002850 <HAL_ADC_Start+0x168>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d10e      	bne.n	80027c0 <HAL_ADC_Start+0xd8>
 80027a2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d007      	beq.n	80027c0 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80027b8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027cc:	d106      	bne.n	80027dc <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d2:	f023 0206 	bic.w	r2, r3, #6
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	645a      	str	r2, [r3, #68]	@ 0x44
 80027da:	e002      	b.n	80027e2 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	221c      	movs	r2, #28
 80027f0:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80027f2:	4b16      	ldr	r3, [pc, #88]	@ (800284c <HAL_ADC_Start+0x164>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 031f 	and.w	r3, r3, #31
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d010      	beq.n	8002820 <HAL_ADC_Start+0x138>
 80027fe:	4b13      	ldr	r3, [pc, #76]	@ (800284c <HAL_ADC_Start+0x164>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 031f 	and.w	r3, r3, #31
 8002806:	2b05      	cmp	r3, #5
 8002808:	d00a      	beq.n	8002820 <HAL_ADC_Start+0x138>
 800280a:	4b10      	ldr	r3, [pc, #64]	@ (800284c <HAL_ADC_Start+0x164>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 031f 	and.w	r3, r3, #31
 8002812:	2b09      	cmp	r3, #9
 8002814:	d004      	beq.n	8002820 <HAL_ADC_Start+0x138>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800281e:	d10f      	bne.n	8002840 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0204 	orr.w	r2, r2, #4
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	e006      	b.n	8002840 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800283a:	e001      	b.n	8002840 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800283c:	2302      	movs	r3, #2
 800283e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002840:	7bfb      	ldrb	r3, [r7, #15]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	50000300 	.word	0x50000300
 8002850:	50000100 	.word	0x50000100

08002854 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800285c:	2300      	movs	r3, #0
 800285e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002866:	2b01      	cmp	r3, #1
 8002868:	d101      	bne.n	800286e <HAL_ADC_Stop+0x1a>
 800286a:	2302      	movs	r3, #2
 800286c:	e023      	b.n	80028b6 <HAL_ADC_Stop+0x62>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002876:	216c      	movs	r1, #108	@ 0x6c
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 fdbd 	bl	80033f8 <ADC_ConversionStop>
 800287e:	4603      	mov	r3, r0
 8002880:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002882:	7bfb      	ldrb	r3, [r7, #15]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d111      	bne.n	80028ac <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 fd4f 	bl	800332c <ADC_Disable>
 800288e:	4603      	mov	r3, r0
 8002890:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002892:	7bfb      	ldrb	r3, [r7, #15]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d109      	bne.n	80028ac <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80028a0:	f023 0301 	bic.w	r3, r3, #1
 80028a4:	f043 0201 	orr.w	r2, r3, #1
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
	...

080028c0 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80028ca:	2300      	movs	r3, #0
 80028cc:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d102      	bne.n	80028dc <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80028d6:	2308      	movs	r3, #8
 80028d8:	617b      	str	r3, [r7, #20]
 80028da:	e02e      	b.n	800293a <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028dc:	4b5e      	ldr	r3, [pc, #376]	@ (8002a58 <HAL_ADC_PollForConversion+0x198>)
 80028de:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 031f 	and.w	r3, r3, #31
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d112      	bne.n	8002912 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d11d      	bne.n	8002936 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fe:	f043 0220 	orr.w	r2, r3, #32
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e09d      	b.n	8002a4e <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00b      	beq.n	8002936 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002922:	f043 0220 	orr.w	r2, r3, #32
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e08b      	b.n	8002a4e <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002936:	230c      	movs	r3, #12
 8002938:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800293a:	4b47      	ldr	r3, [pc, #284]	@ (8002a58 <HAL_ADC_PollForConversion+0x198>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 031f 	and.w	r3, r3, #31
 8002942:	2b00      	cmp	r3, #0
 8002944:	d004      	beq.n	8002950 <HAL_ADC_PollForConversion+0x90>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800294e:	d104      	bne.n	800295a <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	613b      	str	r3, [r7, #16]
 8002958:	e003      	b.n	8002962 <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800295a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8002962:	f7ff fcff 	bl	8002364 <HAL_GetTick>
 8002966:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002968:	e021      	b.n	80029ae <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002970:	d01d      	beq.n	80029ae <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d007      	beq.n	8002988 <HAL_ADC_PollForConversion+0xc8>
 8002978:	f7ff fcf4 	bl	8002364 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	429a      	cmp	r2, r3
 8002986:	d212      	bcs.n	80029ae <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	4013      	ands	r3, r2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10b      	bne.n	80029ae <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299a:	f043 0204 	orr.w	r2, r3, #4
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e04f      	b.n	8002a4e <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	4013      	ands	r3, r2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d0d6      	beq.n	800296a <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d131      	bne.n	8002a3a <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d12c      	bne.n	8002a3a <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	2b08      	cmp	r3, #8
 80029ec:	d125      	bne.n	8002a3a <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d112      	bne.n	8002a22 <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a00:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d112      	bne.n	8002a3a <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a18:	f043 0201 	orr.w	r2, r3, #1
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a20:	e00b      	b.n	8002a3a <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a26:	f043 0220 	orr.w	r2, r3, #32
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a32:	f043 0201 	orr.w	r2, r3, #1
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d103      	bne.n	8002a4c <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	50000300 	.word	0x50000300

08002a5c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b084      	sub	sp, #16
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
 8002a7e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d101      	bne.n	8002a92 <HAL_ADCEx_Calibration_Start+0x1c>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	e05f      	b.n	8002b52 <HAL_ADCEx_Calibration_Start+0xdc>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 fc46 	bl	800332c <ADC_Disable>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002aa4:	7bfb      	ldrb	r3, [r7, #15]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d14e      	bne.n	8002b48 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689a      	ldr	r2, [r3, #8]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8002abe:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d107      	bne.n	8002ad6 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002ad4:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002ae4:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8002ae6:	f7ff fc3d 	bl	8002364 <HAL_GetTick>
 8002aea:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002aec:	e01c      	b.n	8002b28 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002aee:	f7ff fc39 	bl	8002364 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b0a      	cmp	r3, #10
 8002afa:	d915      	bls.n	8002b28 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002b06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b0a:	d10d      	bne.n	8002b28 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b10:	f023 0312 	bic.w	r3, r3, #18
 8002b14:	f043 0210 	orr.w	r2, r3, #16
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e014      	b.n	8002b52 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002b32:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b36:	d0da      	beq.n	8002aee <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3c:	f023 0303 	bic.w	r3, r3, #3
 8002b40:	f043 0201 	orr.w	r2, r3, #1
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
	...

08002b5c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b09b      	sub	sp, #108	@ 0x6c
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b66:	2300      	movs	r3, #0
 8002b68:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d101      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0x22>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	e2a1      	b.n	80030c2 <HAL_ADC_ConfigChannel+0x566>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 0304 	and.w	r3, r3, #4
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f040 8285 	bne.w	80030a0 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d81c      	bhi.n	8002bd8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	4413      	add	r3, r2
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	231f      	movs	r3, #31
 8002bb4:	4093      	lsls	r3, r2
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	4019      	ands	r1, r3
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	6818      	ldr	r0, [r3, #0]
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	4413      	add	r3, r2
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	fa00 f203 	lsl.w	r2, r0, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bd6:	e063      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2b09      	cmp	r3, #9
 8002bde:	d81e      	bhi.n	8002c1e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	4613      	mov	r3, r2
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	4413      	add	r3, r2
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	3b1e      	subs	r3, #30
 8002bf4:	221f      	movs	r2, #31
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	4019      	ands	r1, r3
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	6818      	ldr	r0, [r3, #0]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	4613      	mov	r3, r2
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	4413      	add	r3, r2
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	3b1e      	subs	r3, #30
 8002c10:	fa00 f203 	lsl.w	r2, r0, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c1c:	e040      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b0e      	cmp	r3, #14
 8002c24:	d81e      	bhi.n	8002c64 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	4613      	mov	r3, r2
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	4413      	add	r3, r2
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	3b3c      	subs	r3, #60	@ 0x3c
 8002c3a:	221f      	movs	r2, #31
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	43db      	mvns	r3, r3
 8002c42:	4019      	ands	r1, r3
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	6818      	ldr	r0, [r3, #0]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	4413      	add	r3, r2
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	3b3c      	subs	r3, #60	@ 0x3c
 8002c56:	fa00 f203 	lsl.w	r2, r0, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c62:	e01d      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	4413      	add	r3, r2
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	3b5a      	subs	r3, #90	@ 0x5a
 8002c78:	221f      	movs	r2, #31
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	4019      	ands	r1, r3
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	6818      	ldr	r0, [r3, #0]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	4413      	add	r3, r2
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	3b5a      	subs	r3, #90	@ 0x5a
 8002c94:	fa00 f203 	lsl.w	r2, r0, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f040 80e5 	bne.w	8002e7a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2b09      	cmp	r3, #9
 8002cb6:	d91c      	bls.n	8002cf2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6999      	ldr	r1, [r3, #24]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	4413      	add	r3, r2
 8002cc8:	3b1e      	subs	r3, #30
 8002cca:	2207      	movs	r2, #7
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	4019      	ands	r1, r3
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	6898      	ldr	r0, [r3, #8]
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3b1e      	subs	r3, #30
 8002ce4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	619a      	str	r2, [r3, #24]
 8002cf0:	e019      	b.n	8002d26 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6959      	ldr	r1, [r3, #20]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	4413      	add	r3, r2
 8002d02:	2207      	movs	r2, #7
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	4019      	ands	r1, r3
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	6898      	ldr	r0, [r3, #8]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	4613      	mov	r3, r2
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	4413      	add	r3, r2
 8002d1a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	695a      	ldr	r2, [r3, #20]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	08db      	lsrs	r3, r3, #3
 8002d32:	f003 0303 	and.w	r3, r3, #3
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	3b01      	subs	r3, #1
 8002d44:	2b03      	cmp	r3, #3
 8002d46:	d84f      	bhi.n	8002de8 <HAL_ADC_ConfigChannel+0x28c>
 8002d48:	a201      	add	r2, pc, #4	@ (adr r2, 8002d50 <HAL_ADC_ConfigChannel+0x1f4>)
 8002d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d4e:	bf00      	nop
 8002d50:	08002d61 	.word	0x08002d61
 8002d54:	08002d83 	.word	0x08002d83
 8002d58:	08002da5 	.word	0x08002da5
 8002d5c:	08002dc7 	.word	0x08002dc7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002d66:	4b9c      	ldr	r3, [pc, #624]	@ (8002fd8 <HAL_ADC_ConfigChannel+0x47c>)
 8002d68:	4013      	ands	r3, r2
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	6812      	ldr	r2, [r2, #0]
 8002d6e:	0691      	lsls	r1, r2, #26
 8002d70:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002d72:	430a      	orrs	r2, r1
 8002d74:	431a      	orrs	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002d7e:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002d80:	e07b      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002d88:	4b93      	ldr	r3, [pc, #588]	@ (8002fd8 <HAL_ADC_ConfigChannel+0x47c>)
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	6812      	ldr	r2, [r2, #0]
 8002d90:	0691      	lsls	r1, r2, #26
 8002d92:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002d94:	430a      	orrs	r2, r1
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002da0:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002da2:	e06a      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002daa:	4b8b      	ldr	r3, [pc, #556]	@ (8002fd8 <HAL_ADC_ConfigChannel+0x47c>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	6812      	ldr	r2, [r2, #0]
 8002db2:	0691      	lsls	r1, r2, #26
 8002db4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002db6:	430a      	orrs	r2, r1
 8002db8:	431a      	orrs	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002dc2:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002dc4:	e059      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002dcc:	4b82      	ldr	r3, [pc, #520]	@ (8002fd8 <HAL_ADC_ConfigChannel+0x47c>)
 8002dce:	4013      	ands	r3, r2
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	6812      	ldr	r2, [r2, #0]
 8002dd4:	0691      	lsls	r1, r2, #26
 8002dd6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002de4:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002de6:	e048      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	069b      	lsls	r3, r3, #26
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d107      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e0a:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e12:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	069b      	lsls	r3, r3, #26
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d107      	bne.n	8002e30 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e2e:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e36:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	069b      	lsls	r3, r3, #26
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d107      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e52:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e5a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	069b      	lsls	r3, r3, #26
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d107      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e76:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8002e78:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f003 0303 	and.w	r3, r3, #3
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d108      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0x33e>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d101      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0x33e>
 8002e96:	2301      	movs	r3, #1
 8002e98:	e000      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x340>
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f040 810a 	bne.w	80030b6 <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d00f      	beq.n	8002eca <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43da      	mvns	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	400a      	ands	r2, r1
 8002ec4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8002ec8:	e049      	b.n	8002f5e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	409a      	lsls	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2b09      	cmp	r3, #9
 8002eea:	d91c      	bls.n	8002f26 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6999      	ldr	r1, [r3, #24]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	4413      	add	r3, r2
 8002efc:	3b1b      	subs	r3, #27
 8002efe:	2207      	movs	r2, #7
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	43db      	mvns	r3, r3
 8002f06:	4019      	ands	r1, r3
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	6898      	ldr	r0, [r3, #8]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	4613      	mov	r3, r2
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	4413      	add	r3, r2
 8002f16:	3b1b      	subs	r3, #27
 8002f18:	fa00 f203 	lsl.w	r2, r0, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	430a      	orrs	r2, r1
 8002f22:	619a      	str	r2, [r3, #24]
 8002f24:	e01b      	b.n	8002f5e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6959      	ldr	r1, [r3, #20]
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	4613      	mov	r3, r2
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	4413      	add	r3, r2
 8002f38:	2207      	movs	r2, #7
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	4019      	ands	r1, r3
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	6898      	ldr	r0, [r3, #8]
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	1c5a      	adds	r2, r3, #1
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	4413      	add	r3, r2
 8002f52:	fa00 f203 	lsl.w	r2, r0, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f5e:	4b1f      	ldr	r3, [pc, #124]	@ (8002fdc <HAL_ADC_ConfigChannel+0x480>)
 8002f60:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2b10      	cmp	r3, #16
 8002f68:	d105      	bne.n	8002f76 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002f6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d015      	beq.n	8002fa2 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002f7a:	2b11      	cmp	r3, #17
 8002f7c:	d105      	bne.n	8002f8a <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002f7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00b      	beq.n	8002fa2 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002f8e:	2b12      	cmp	r3, #18
 8002f90:	f040 8091 	bne.w	80030b6 <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002f94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f040 808a 	bne.w	80030b6 <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002faa:	d102      	bne.n	8002fb2 <HAL_ADC_ConfigChannel+0x456>
 8002fac:	4b0c      	ldr	r3, [pc, #48]	@ (8002fe0 <HAL_ADC_ConfigChannel+0x484>)
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	e002      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x45c>
 8002fb2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002fb6:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 0303 	and.w	r3, r3, #3
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d10e      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x488>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d107      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x488>
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e006      	b.n	8002fe6 <HAL_ADC_ConfigChannel+0x48a>
 8002fd8:	83fff000 	.word	0x83fff000
 8002fdc:	50000300 	.word	0x50000300
 8002fe0:	50000100 	.word	0x50000100
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d150      	bne.n	800308c <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002fea:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d010      	beq.n	8003012 <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 0303 	and.w	r3, r3, #3
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d107      	bne.n	800300c <HAL_ADC_ConfigChannel+0x4b0>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b01      	cmp	r3, #1
 8003006:	d101      	bne.n	800300c <HAL_ADC_ConfigChannel+0x4b0>
 8003008:	2301      	movs	r3, #1
 800300a:	e000      	b.n	800300e <HAL_ADC_ConfigChannel+0x4b2>
 800300c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800300e:	2b00      	cmp	r3, #0
 8003010:	d13c      	bne.n	800308c <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2b10      	cmp	r3, #16
 8003018:	d11d      	bne.n	8003056 <HAL_ADC_ConfigChannel+0x4fa>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003022:	d118      	bne.n	8003056 <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003024:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800302c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800302e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003030:	4b27      	ldr	r3, [pc, #156]	@ (80030d0 <HAL_ADC_ConfigChannel+0x574>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a27      	ldr	r2, [pc, #156]	@ (80030d4 <HAL_ADC_ConfigChannel+0x578>)
 8003036:	fba2 2303 	umull	r2, r3, r2, r3
 800303a:	0c9a      	lsrs	r2, r3, #18
 800303c:	4613      	mov	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003046:	e002      	b.n	800304e <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	3b01      	subs	r3, #1
 800304c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1f9      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003054:	e02e      	b.n	80030b4 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2b11      	cmp	r3, #17
 800305c:	d10b      	bne.n	8003076 <HAL_ADC_ConfigChannel+0x51a>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003066:	d106      	bne.n	8003076 <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003068:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8003070:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003072:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003074:	e01e      	b.n	80030b4 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2b12      	cmp	r3, #18
 800307c:	d11a      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800307e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003086:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003088:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800308a:	e013      	b.n	80030b4 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003090:	f043 0220 	orr.w	r2, r3, #32
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800309e:	e00a      	b.n	80030b6 <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a4:	f043 0220 	orr.w	r2, r3, #32
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80030b2:	e000      	b.n	80030b6 <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80030b4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80030be:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	376c      	adds	r7, #108	@ 0x6c
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	20000000 	.word	0x20000000
 80030d4:	431bde83 	.word	0x431bde83

080030d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80030d8:	b480      	push	{r7}
 80030da:	b099      	sub	sp, #100	@ 0x64
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030e2:	2300      	movs	r3, #0
 80030e4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030f0:	d102      	bne.n	80030f8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80030f2:	4b5a      	ldr	r3, [pc, #360]	@ (800325c <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80030f4:	60bb      	str	r3, [r7, #8]
 80030f6:	e002      	b.n	80030fe <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80030f8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80030fc:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e0a2      	b.n	800324e <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800310e:	2b01      	cmp	r3, #1
 8003110:	d101      	bne.n	8003116 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003112:	2302      	movs	r3, #2
 8003114:	e09b      	b.n	800324e <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	d17f      	bne.n	800322c <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b00      	cmp	r3, #0
 8003136:	d179      	bne.n	800322c <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003138:	4b49      	ldr	r3, [pc, #292]	@ (8003260 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800313a:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d040      	beq.n	80031c6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003144:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	6859      	ldr	r1, [r3, #4]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003156:	035b      	lsls	r3, r3, #13
 8003158:	430b      	orrs	r3, r1
 800315a:	431a      	orrs	r2, r3
 800315c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800315e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 0303 	and.w	r3, r3, #3
 800316a:	2b01      	cmp	r3, #1
 800316c:	d108      	bne.n	8003180 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b01      	cmp	r3, #1
 800317a:	d101      	bne.n	8003180 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800317c:	2301      	movs	r3, #1
 800317e:	e000      	b.n	8003182 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8003180:	2300      	movs	r3, #0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d15c      	bne.n	8003240 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	2b01      	cmp	r3, #1
 8003190:	d107      	bne.n	80031a2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b01      	cmp	r3, #1
 800319c:	d101      	bne.n	80031a2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800319e:	2301      	movs	r3, #1
 80031a0:	e000      	b.n	80031a4 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80031a2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d14b      	bne.n	8003240 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80031a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80031b0:	f023 030f 	bic.w	r3, r3, #15
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	6811      	ldr	r1, [r2, #0]
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	6892      	ldr	r2, [r2, #8]
 80031bc:	430a      	orrs	r2, r1
 80031be:	431a      	orrs	r2, r3
 80031c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031c2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80031c4:	e03c      	b.n	8003240 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80031c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031d0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 0303 	and.w	r3, r3, #3
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d108      	bne.n	80031f2 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d101      	bne.n	80031f2 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80031ee:	2301      	movs	r3, #1
 80031f0:	e000      	b.n	80031f4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80031f2:	2300      	movs	r3, #0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d123      	bne.n	8003240 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 0303 	and.w	r3, r3, #3
 8003200:	2b01      	cmp	r3, #1
 8003202:	d107      	bne.n	8003214 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b01      	cmp	r3, #1
 800320e:	d101      	bne.n	8003214 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8003210:	2301      	movs	r3, #1
 8003212:	e000      	b.n	8003216 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003214:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003216:	2b00      	cmp	r3, #0
 8003218:	d112      	bne.n	8003240 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800321a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003222:	f023 030f 	bic.w	r3, r3, #15
 8003226:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003228:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800322a:	e009      	b.n	8003240 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003230:	f043 0220 	orr.w	r2, r3, #32
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800323e:	e000      	b.n	8003242 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003240:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800324a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 800324e:	4618      	mov	r0, r3
 8003250:	3764      	adds	r7, #100	@ 0x64
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	50000100 	.word	0x50000100
 8003260:	50000300 	.word	0x50000300

08003264 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800326c:	2300      	movs	r3, #0
 800326e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	2b01      	cmp	r3, #1
 800327c:	d108      	bne.n	8003290 <ADC_Enable+0x2c>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <ADC_Enable+0x2c>
 800328c:	2301      	movs	r3, #1
 800328e:	e000      	b.n	8003292 <ADC_Enable+0x2e>
 8003290:	2300      	movs	r3, #0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d143      	bne.n	800331e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	4b22      	ldr	r3, [pc, #136]	@ (8003328 <ADC_Enable+0xc4>)
 800329e:	4013      	ands	r3, r2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00d      	beq.n	80032c0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a8:	f043 0210 	orr.w	r2, r3, #16
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b4:	f043 0201 	orr.w	r2, r3, #1
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e02f      	b.n	8003320 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0201 	orr.w	r2, r2, #1
 80032ce:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80032d0:	f7ff f848 	bl	8002364 <HAL_GetTick>
 80032d4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80032d6:	e01b      	b.n	8003310 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032d8:	f7ff f844 	bl	8002364 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d914      	bls.n	8003310 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d00d      	beq.n	8003310 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f8:	f043 0210 	orr.w	r2, r3, #16
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003304:	f043 0201 	orr.w	r2, r3, #1
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e007      	b.n	8003320 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b01      	cmp	r3, #1
 800331c:	d1dc      	bne.n	80032d8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	8000003f 	.word	0x8000003f

0800332c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003334:	2300      	movs	r3, #0
 8003336:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	2b01      	cmp	r3, #1
 8003344:	d108      	bne.n	8003358 <ADC_Disable+0x2c>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b01      	cmp	r3, #1
 8003352:	d101      	bne.n	8003358 <ADC_Disable+0x2c>
 8003354:	2301      	movs	r3, #1
 8003356:	e000      	b.n	800335a <ADC_Disable+0x2e>
 8003358:	2300      	movs	r3, #0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d047      	beq.n	80033ee <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 030d 	and.w	r3, r3, #13
 8003368:	2b01      	cmp	r3, #1
 800336a:	d10f      	bne.n	800338c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689a      	ldr	r2, [r3, #8]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0202 	orr.w	r2, r2, #2
 800337a:	609a      	str	r2, [r3, #8]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2203      	movs	r2, #3
 8003382:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003384:	f7fe ffee 	bl	8002364 <HAL_GetTick>
 8003388:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800338a:	e029      	b.n	80033e0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003390:	f043 0210 	orr.w	r2, r3, #16
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800339c:	f043 0201 	orr.w	r2, r3, #1
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e023      	b.n	80033f0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80033a8:	f7fe ffdc 	bl	8002364 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d914      	bls.n	80033e0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d10d      	bne.n	80033e0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c8:	f043 0210 	orr.w	r2, r3, #16
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033d4:	f043 0201 	orr.w	r2, r3, #1
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e007      	b.n	80033f0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d0dc      	beq.n	80033a8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8003402:	2300      	movs	r3, #0
 8003404:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003406:	2300      	movs	r3, #0
 8003408:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800340a:	2300      	movs	r3, #0
 800340c:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 030c 	and.w	r3, r3, #12
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 809b 	beq.w	8003554 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003428:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800342c:	d12a      	bne.n	8003484 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8003432:	2b01      	cmp	r3, #1
 8003434:	d126      	bne.n	8003484 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800343a:	2b01      	cmp	r3, #1
 800343c:	d122      	bne.n	8003484 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 800343e:	230c      	movs	r3, #12
 8003440:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8003442:	e014      	b.n	800346e <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	4a46      	ldr	r2, [pc, #280]	@ (8003560 <ADC_ConversionStop+0x168>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d90d      	bls.n	8003468 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003450:	f043 0210 	orr.w	r2, r3, #16
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345c:	f043 0201 	orr.w	r2, r3, #1
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	645a      	str	r2, [r3, #68]	@ 0x44
          
          return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e076      	b.n	8003556 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	3301      	adds	r3, #1
 800346c:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003478:	2b40      	cmp	r3, #64	@ 0x40
 800347a:	d1e3      	bne.n	8003444 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2240      	movs	r2, #64	@ 0x40
 8003482:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	2b60      	cmp	r3, #96	@ 0x60
 8003488:	d015      	beq.n	80034b6 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b04      	cmp	r3, #4
 8003496:	d10e      	bne.n	80034b6 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d107      	bne.n	80034b6 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f042 0210 	orr.w	r2, r2, #16
 80034b4:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	2b0c      	cmp	r3, #12
 80034ba:	d015      	beq.n	80034e8 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d10e      	bne.n	80034e8 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d107      	bne.n	80034e8 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0220 	orr.w	r2, r2, #32
 80034e6:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	2b60      	cmp	r3, #96	@ 0x60
 80034ec:	d005      	beq.n	80034fa <ADC_ConversionStop+0x102>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	2b6c      	cmp	r3, #108	@ 0x6c
 80034f2:	d105      	bne.n	8003500 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80034f4:	230c      	movs	r3, #12
 80034f6:	617b      	str	r3, [r7, #20]
        break;
 80034f8:	e005      	b.n	8003506 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80034fa:	2308      	movs	r3, #8
 80034fc:	617b      	str	r3, [r7, #20]
        break;
 80034fe:	e002      	b.n	8003506 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003500:	2304      	movs	r3, #4
 8003502:	617b      	str	r3, [r7, #20]
        break;
 8003504:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003506:	f7fe ff2d 	bl	8002364 <HAL_GetTick>
 800350a:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800350c:	e01b      	b.n	8003546 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800350e:	f7fe ff29 	bl	8002364 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b0b      	cmp	r3, #11
 800351a:	d914      	bls.n	8003546 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689a      	ldr	r2, [r3, #8]
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	4013      	ands	r3, r2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00d      	beq.n	8003546 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352e:	f043 0210 	orr.w	r2, r3, #16
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800353a:	f043 0201 	orr.w	r2, r3, #1
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	645a      	str	r2, [r3, #68]	@ 0x44
        
        return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e007      	b.n	8003556 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	4013      	ands	r3, r2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1dc      	bne.n	800350e <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3718      	adds	r7, #24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	000993ff 	.word	0x000993ff

08003564 <__NVIC_SetPriorityGrouping>:
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003574:	4b0c      	ldr	r3, [pc, #48]	@ (80035a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003580:	4013      	ands	r3, r2
 8003582:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800358c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003590:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003596:	4a04      	ldr	r2, [pc, #16]	@ (80035a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	60d3      	str	r3, [r2, #12]
}
 800359c:	bf00      	nop
 800359e:	3714      	adds	r7, #20
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	e000ed00 	.word	0xe000ed00

080035ac <__NVIC_GetPriorityGrouping>:
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035b0:	4b04      	ldr	r3, [pc, #16]	@ (80035c4 <__NVIC_GetPriorityGrouping+0x18>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	0a1b      	lsrs	r3, r3, #8
 80035b6:	f003 0307 	and.w	r3, r3, #7
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	e000ed00 	.word	0xe000ed00

080035c8 <__NVIC_EnableIRQ>:
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	4603      	mov	r3, r0
 80035d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	db0b      	blt.n	80035f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035da:	79fb      	ldrb	r3, [r7, #7]
 80035dc:	f003 021f 	and.w	r2, r3, #31
 80035e0:	4907      	ldr	r1, [pc, #28]	@ (8003600 <__NVIC_EnableIRQ+0x38>)
 80035e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e6:	095b      	lsrs	r3, r3, #5
 80035e8:	2001      	movs	r0, #1
 80035ea:	fa00 f202 	lsl.w	r2, r0, r2
 80035ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	e000e100 	.word	0xe000e100

08003604 <__NVIC_SetPriority>:
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	4603      	mov	r3, r0
 800360c:	6039      	str	r1, [r7, #0]
 800360e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003614:	2b00      	cmp	r3, #0
 8003616:	db0a      	blt.n	800362e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	b2da      	uxtb	r2, r3
 800361c:	490c      	ldr	r1, [pc, #48]	@ (8003650 <__NVIC_SetPriority+0x4c>)
 800361e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003622:	0112      	lsls	r2, r2, #4
 8003624:	b2d2      	uxtb	r2, r2
 8003626:	440b      	add	r3, r1
 8003628:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800362c:	e00a      	b.n	8003644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	b2da      	uxtb	r2, r3
 8003632:	4908      	ldr	r1, [pc, #32]	@ (8003654 <__NVIC_SetPriority+0x50>)
 8003634:	79fb      	ldrb	r3, [r7, #7]
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	3b04      	subs	r3, #4
 800363c:	0112      	lsls	r2, r2, #4
 800363e:	b2d2      	uxtb	r2, r2
 8003640:	440b      	add	r3, r1
 8003642:	761a      	strb	r2, [r3, #24]
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	e000e100 	.word	0xe000e100
 8003654:	e000ed00 	.word	0xe000ed00

08003658 <NVIC_EncodePriority>:
{
 8003658:	b480      	push	{r7}
 800365a:	b089      	sub	sp, #36	@ 0x24
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f003 0307 	and.w	r3, r3, #7
 800366a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f1c3 0307 	rsb	r3, r3, #7
 8003672:	2b04      	cmp	r3, #4
 8003674:	bf28      	it	cs
 8003676:	2304      	movcs	r3, #4
 8003678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	3304      	adds	r3, #4
 800367e:	2b06      	cmp	r3, #6
 8003680:	d902      	bls.n	8003688 <NVIC_EncodePriority+0x30>
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	3b03      	subs	r3, #3
 8003686:	e000      	b.n	800368a <NVIC_EncodePriority+0x32>
 8003688:	2300      	movs	r3, #0
 800368a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800368c:	f04f 32ff 	mov.w	r2, #4294967295
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	fa02 f303 	lsl.w	r3, r2, r3
 8003696:	43da      	mvns	r2, r3
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	401a      	ands	r2, r3
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036a0:	f04f 31ff 	mov.w	r1, #4294967295
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	fa01 f303 	lsl.w	r3, r1, r3
 80036aa:	43d9      	mvns	r1, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036b0:	4313      	orrs	r3, r2
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3724      	adds	r7, #36	@ 0x24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
	...

080036c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3b01      	subs	r3, #1
 80036cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036d0:	d301      	bcc.n	80036d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036d2:	2301      	movs	r3, #1
 80036d4:	e00f      	b.n	80036f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003700 <SysTick_Config+0x40>)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3b01      	subs	r3, #1
 80036dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036de:	210f      	movs	r1, #15
 80036e0:	f04f 30ff 	mov.w	r0, #4294967295
 80036e4:	f7ff ff8e 	bl	8003604 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036e8:	4b05      	ldr	r3, [pc, #20]	@ (8003700 <SysTick_Config+0x40>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036ee:	4b04      	ldr	r3, [pc, #16]	@ (8003700 <SysTick_Config+0x40>)
 80036f0:	2207      	movs	r2, #7
 80036f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	e000e010 	.word	0xe000e010

08003704 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f7ff ff29 	bl	8003564 <__NVIC_SetPriorityGrouping>
}
 8003712:	bf00      	nop
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b086      	sub	sp, #24
 800371e:	af00      	add	r7, sp, #0
 8003720:	4603      	mov	r3, r0
 8003722:	60b9      	str	r1, [r7, #8]
 8003724:	607a      	str	r2, [r7, #4]
 8003726:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003728:	2300      	movs	r3, #0
 800372a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800372c:	f7ff ff3e 	bl	80035ac <__NVIC_GetPriorityGrouping>
 8003730:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	68b9      	ldr	r1, [r7, #8]
 8003736:	6978      	ldr	r0, [r7, #20]
 8003738:	f7ff ff8e 	bl	8003658 <NVIC_EncodePriority>
 800373c:	4602      	mov	r2, r0
 800373e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003742:	4611      	mov	r1, r2
 8003744:	4618      	mov	r0, r3
 8003746:	f7ff ff5d 	bl	8003604 <__NVIC_SetPriority>
}
 800374a:	bf00      	nop
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b082      	sub	sp, #8
 8003756:	af00      	add	r7, sp, #0
 8003758:	4603      	mov	r3, r0
 800375a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800375c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff ff31 	bl	80035c8 <__NVIC_EnableIRQ>
}
 8003766:	bf00      	nop
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b082      	sub	sp, #8
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7ff ffa2 	bl	80036c0 <SysTick_Config>
 800377c:	4603      	mov	r3, r0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b084      	sub	sp, #16
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800378e:	2300      	movs	r3, #0
 8003790:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e037      	b.n	800380c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2202      	movs	r2, #2
 80037a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80037b2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80037b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80037c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f9ca 	bl	8003b88 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
 8003820:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003822:	2300      	movs	r3, #0
 8003824:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f893 3020 	ldrb.w	r3, [r3, #32]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d101      	bne.n	8003834 <HAL_DMA_Start_IT+0x20>
 8003830:	2302      	movs	r3, #2
 8003832:	e04a      	b.n	80038ca <HAL_DMA_Start_IT+0xb6>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003842:	2b01      	cmp	r3, #1
 8003844:	d13a      	bne.n	80038bc <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2202      	movs	r2, #2
 800384a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 0201 	bic.w	r2, r2, #1
 8003862:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	68b9      	ldr	r1, [r7, #8]
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f000 f95d 	bl	8003b2a <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003874:	2b00      	cmp	r3, #0
 8003876:	d008      	beq.n	800388a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f042 020e 	orr.w	r2, r2, #14
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	e00f      	b.n	80038aa <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f042 020a 	orr.w	r2, r2, #10
 8003898:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 0204 	bic.w	r2, r2, #4
 80038a8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f042 0201 	orr.w	r2, r2, #1
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	e005      	b.n	80038c8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80038c4:	2302      	movs	r3, #2
 80038c6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80038c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3718      	adds	r7, #24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d101      	bne.n	80038e4 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e02e      	b.n	8003942 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d008      	beq.n	8003900 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2204      	movs	r2, #4
 80038f2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e020      	b.n	8003942 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 020e 	bic.w	r2, r2, #14
 800390e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 0201 	bic.w	r2, r2, #1
 800391e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003928:	2101      	movs	r1, #1
 800392a:	fa01 f202 	lsl.w	r2, r1, r2
 800392e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b084      	sub	sp, #16
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003956:	2300      	movs	r3, #0
 8003958:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003960:	2b02      	cmp	r3, #2
 8003962:	d005      	beq.n	8003970 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2204      	movs	r2, #4
 8003968:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	73fb      	strb	r3, [r7, #15]
 800396e:	e027      	b.n	80039c0 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 020e 	bic.w	r2, r2, #14
 800397e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0201 	bic.w	r2, r2, #1
 800398e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003998:	2101      	movs	r1, #1
 800399a:	fa01 f202 	lsl.w	r2, r1, r2
 800399e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	4798      	blx	r3
    }
  }
  return status;
 80039c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b084      	sub	sp, #16
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e6:	2204      	movs	r2, #4
 80039e8:	409a      	lsls	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	4013      	ands	r3, r2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d024      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x72>
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d01f      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0320 	and.w	r3, r3, #32
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d107      	bne.n	8003a1a <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0204 	bic.w	r2, r2, #4
 8003a18:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a22:	2104      	movs	r1, #4
 8003a24:	fa01 f202 	lsl.w	r2, r1, r2
 8003a28:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d06a      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003a3a:	e065      	b.n	8003b08 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a40:	2202      	movs	r2, #2
 8003a42:	409a      	lsls	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4013      	ands	r3, r2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d02c      	beq.n	8003aa6 <HAL_DMA_IRQHandler+0xdc>
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d027      	beq.n	8003aa6 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0320 	and.w	r3, r3, #32
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10b      	bne.n	8003a7c <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 020a 	bic.w	r2, r2, #10
 8003a72:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a84:	2102      	movs	r1, #2
 8003a86:	fa01 f202 	lsl.w	r2, r1, r2
 8003a8a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d035      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003aa4:	e030      	b.n	8003b08 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aaa:	2208      	movs	r2, #8
 8003aac:	409a      	lsls	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d028      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x13e>
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	f003 0308 	and.w	r3, r3, #8
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d023      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 020e 	bic.w	r2, r2, #14
 8003ace:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad8:	2101      	movs	r1, #1
 8003ada:	fa01 f202 	lsl.w	r2, r1, r2
 8003ade:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d004      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	4798      	blx	r3
    }
  }
}
 8003b06:	e7ff      	b.n	8003b08 <HAL_DMA_IRQHandler+0x13e>
 8003b08:	bf00      	nop
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b085      	sub	sp, #20
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	60f8      	str	r0, [r7, #12]
 8003b32:	60b9      	str	r1, [r7, #8]
 8003b34:	607a      	str	r2, [r7, #4]
 8003b36:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b40:	2101      	movs	r1, #1
 8003b42:	fa01 f202 	lsl.w	r2, r1, r2
 8003b46:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	2b10      	cmp	r3, #16
 8003b56:	d108      	bne.n	8003b6a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b68:	e007      	b.n	8003b7a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	60da      	str	r2, [r3, #12]
}
 8003b7a:	bf00      	nop
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
	...

08003b88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	461a      	mov	r2, r3
 8003b96:	4b09      	ldr	r3, [pc, #36]	@ (8003bbc <DMA_CalcBaseAndBitshift+0x34>)
 8003b98:	4413      	add	r3, r2
 8003b9a:	4a09      	ldr	r2, [pc, #36]	@ (8003bc0 <DMA_CalcBaseAndBitshift+0x38>)
 8003b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba0:	091b      	lsrs	r3, r3, #4
 8003ba2:	009a      	lsls	r2, r3, #2
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a06      	ldr	r2, [pc, #24]	@ (8003bc4 <DMA_CalcBaseAndBitshift+0x3c>)
 8003bac:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	bffdfff8 	.word	0xbffdfff8
 8003bc0:	cccccccd 	.word	0xcccccccd
 8003bc4:	40020000 	.word	0x40020000

08003bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b087      	sub	sp, #28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bd6:	e14e      	b.n	8003e76 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	2101      	movs	r1, #1
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	fa01 f303 	lsl.w	r3, r1, r3
 8003be4:	4013      	ands	r3, r2
 8003be6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 8140 	beq.w	8003e70 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f003 0303 	and.w	r3, r3, #3
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d005      	beq.n	8003c08 <HAL_GPIO_Init+0x40>
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f003 0303 	and.w	r3, r3, #3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d130      	bne.n	8003c6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	2203      	movs	r2, #3
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	68da      	ldr	r2, [r3, #12]
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c3e:	2201      	movs	r2, #1
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	fa02 f303 	lsl.w	r3, r2, r3
 8003c46:	43db      	mvns	r3, r3
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	091b      	lsrs	r3, r3, #4
 8003c54:	f003 0201 	and.w	r2, r3, #1
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f003 0303 	and.w	r3, r3, #3
 8003c72:	2b03      	cmp	r3, #3
 8003c74:	d017      	beq.n	8003ca6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	2203      	movs	r2, #3
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	43db      	mvns	r3, r3
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	689a      	ldr	r2, [r3, #8]
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f003 0303 	and.w	r3, r3, #3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d123      	bne.n	8003cfa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	08da      	lsrs	r2, r3, #3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	3208      	adds	r2, #8
 8003cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f003 0307 	and.w	r3, r3, #7
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	220f      	movs	r2, #15
 8003cca:	fa02 f303 	lsl.w	r3, r2, r3
 8003cce:	43db      	mvns	r3, r3
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	691a      	ldr	r2, [r3, #16]
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f003 0307 	and.w	r3, r3, #7
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	08da      	lsrs	r2, r3, #3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	3208      	adds	r2, #8
 8003cf4:	6939      	ldr	r1, [r7, #16]
 8003cf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	2203      	movs	r2, #3
 8003d06:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f003 0203 	and.w	r2, r3, #3
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f000 809a 	beq.w	8003e70 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d3c:	4b55      	ldr	r3, [pc, #340]	@ (8003e94 <HAL_GPIO_Init+0x2cc>)
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	4a54      	ldr	r2, [pc, #336]	@ (8003e94 <HAL_GPIO_Init+0x2cc>)
 8003d42:	f043 0301 	orr.w	r3, r3, #1
 8003d46:	6193      	str	r3, [r2, #24]
 8003d48:	4b52      	ldr	r3, [pc, #328]	@ (8003e94 <HAL_GPIO_Init+0x2cc>)
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	60bb      	str	r3, [r7, #8]
 8003d52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d54:	4a50      	ldr	r2, [pc, #320]	@ (8003e98 <HAL_GPIO_Init+0x2d0>)
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	089b      	lsrs	r3, r3, #2
 8003d5a:	3302      	adds	r3, #2
 8003d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f003 0303 	and.w	r3, r3, #3
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	220f      	movs	r2, #15
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	43db      	mvns	r3, r3
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	4013      	ands	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003d7e:	d013      	beq.n	8003da8 <HAL_GPIO_Init+0x1e0>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a46      	ldr	r2, [pc, #280]	@ (8003e9c <HAL_GPIO_Init+0x2d4>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d00d      	beq.n	8003da4 <HAL_GPIO_Init+0x1dc>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a45      	ldr	r2, [pc, #276]	@ (8003ea0 <HAL_GPIO_Init+0x2d8>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d007      	beq.n	8003da0 <HAL_GPIO_Init+0x1d8>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a44      	ldr	r2, [pc, #272]	@ (8003ea4 <HAL_GPIO_Init+0x2dc>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d101      	bne.n	8003d9c <HAL_GPIO_Init+0x1d4>
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e006      	b.n	8003daa <HAL_GPIO_Init+0x1e2>
 8003d9c:	2305      	movs	r3, #5
 8003d9e:	e004      	b.n	8003daa <HAL_GPIO_Init+0x1e2>
 8003da0:	2302      	movs	r3, #2
 8003da2:	e002      	b.n	8003daa <HAL_GPIO_Init+0x1e2>
 8003da4:	2301      	movs	r3, #1
 8003da6:	e000      	b.n	8003daa <HAL_GPIO_Init+0x1e2>
 8003da8:	2300      	movs	r3, #0
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	f002 0203 	and.w	r2, r2, #3
 8003db0:	0092      	lsls	r2, r2, #2
 8003db2:	4093      	lsls	r3, r2
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003dba:	4937      	ldr	r1, [pc, #220]	@ (8003e98 <HAL_GPIO_Init+0x2d0>)
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	089b      	lsrs	r3, r3, #2
 8003dc0:	3302      	adds	r3, #2
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dc8:	4b37      	ldr	r3, [pc, #220]	@ (8003ea8 <HAL_GPIO_Init+0x2e0>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003dec:	4a2e      	ldr	r2, [pc, #184]	@ (8003ea8 <HAL_GPIO_Init+0x2e0>)
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003df2:	4b2d      	ldr	r3, [pc, #180]	@ (8003ea8 <HAL_GPIO_Init+0x2e0>)
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	43db      	mvns	r3, r3
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003e16:	4a24      	ldr	r2, [pc, #144]	@ (8003ea8 <HAL_GPIO_Init+0x2e0>)
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e1c:	4b22      	ldr	r3, [pc, #136]	@ (8003ea8 <HAL_GPIO_Init+0x2e0>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	43db      	mvns	r3, r3
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003e40:	4a19      	ldr	r2, [pc, #100]	@ (8003ea8 <HAL_GPIO_Init+0x2e0>)
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e46:	4b18      	ldr	r3, [pc, #96]	@ (8003ea8 <HAL_GPIO_Init+0x2e0>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	43db      	mvns	r3, r3
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	4013      	ands	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003e6a:	4a0f      	ldr	r2, [pc, #60]	@ (8003ea8 <HAL_GPIO_Init+0x2e0>)
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	3301      	adds	r3, #1
 8003e74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f47f aea9 	bne.w	8003bd8 <HAL_GPIO_Init+0x10>
  }
}
 8003e86:	bf00      	nop
 8003e88:	bf00      	nop
 8003e8a:	371c      	adds	r7, #28
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	40021000 	.word	0x40021000
 8003e98:	40010000 	.word	0x40010000
 8003e9c:	48000400 	.word	0x48000400
 8003ea0:	48000800 	.word	0x48000800
 8003ea4:	48000c00 	.word	0x48000c00
 8003ea8:	40010400 	.word	0x40010400

08003eac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	691a      	ldr	r2, [r3, #16]
 8003ebc:	887b      	ldrh	r3, [r7, #2]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d002      	beq.n	8003eca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	73fb      	strb	r3, [r7, #15]
 8003ec8:	e001      	b.n	8003ece <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3714      	adds	r7, #20
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003eee:	887a      	ldrh	r2, [r7, #2]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	041a      	lsls	r2, r3, #16
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	43d9      	mvns	r1, r3
 8003efa:	887b      	ldrh	r3, [r7, #2]
 8003efc:	400b      	ands	r3, r1
 8003efe:	431a      	orrs	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	619a      	str	r2, [r3, #24]
}
 8003f04:	bf00      	nop
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e08d      	b.n	800403e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d106      	bne.n	8003f3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7fd ff94 	bl	8001e64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2224      	movs	r2, #36	@ 0x24
 8003f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0201 	bic.w	r2, r2, #1
 8003f52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d107      	bne.n	8003f8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f86:	609a      	str	r2, [r3, #8]
 8003f88:	e006      	b.n	8003f98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689a      	ldr	r2, [r3, #8]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003f96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d108      	bne.n	8003fb2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685a      	ldr	r2, [r3, #4]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fae:	605a      	str	r2, [r3, #4]
 8003fb0:	e007      	b.n	8003fc2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fc0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6812      	ldr	r2, [r2, #0]
 8003fcc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003fd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fd4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68da      	ldr	r2, [r3, #12]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fe4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	691a      	ldr	r2, [r3, #16]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	69d9      	ldr	r1, [r3, #28]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a1a      	ldr	r2, [r3, #32]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	430a      	orrs	r2, r1
 800400e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0201 	orr.w	r2, r2, #1
 800401e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2220      	movs	r2, #32
 800402a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
	...

08004048 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b088      	sub	sp, #32
 800404c:	af02      	add	r7, sp, #8
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	607a      	str	r2, [r7, #4]
 8004052:	461a      	mov	r2, r3
 8004054:	460b      	mov	r3, r1
 8004056:	817b      	strh	r3, [r7, #10]
 8004058:	4613      	mov	r3, r2
 800405a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b20      	cmp	r3, #32
 8004066:	f040 80fd 	bne.w	8004264 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004070:	2b01      	cmp	r3, #1
 8004072:	d101      	bne.n	8004078 <HAL_I2C_Master_Transmit+0x30>
 8004074:	2302      	movs	r3, #2
 8004076:	e0f6      	b.n	8004266 <HAL_I2C_Master_Transmit+0x21e>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004080:	f7fe f970 	bl	8002364 <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	2319      	movs	r3, #25
 800408c:	2201      	movs	r2, #1
 800408e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f000 ff87 	bl	8004fa6 <I2C_WaitOnFlagUntilTimeout>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e0e1      	b.n	8004266 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2221      	movs	r2, #33	@ 0x21
 80040a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2210      	movs	r2, #16
 80040ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	893a      	ldrh	r2, [r7, #8]
 80040c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	2bff      	cmp	r3, #255	@ 0xff
 80040d2:	d906      	bls.n	80040e2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	22ff      	movs	r2, #255	@ 0xff
 80040d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80040da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040de:	617b      	str	r3, [r7, #20]
 80040e0:	e007      	b.n	80040f2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80040ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80040f0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d024      	beq.n	8004144 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fe:	781a      	ldrb	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410a:	1c5a      	adds	r2, r3, #1
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004114:	b29b      	uxth	r3, r3
 8004116:	3b01      	subs	r3, #1
 8004118:	b29a      	uxth	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004122:	3b01      	subs	r3, #1
 8004124:	b29a      	uxth	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800412e:	b2db      	uxtb	r3, r3
 8004130:	3301      	adds	r3, #1
 8004132:	b2da      	uxtb	r2, r3
 8004134:	8979      	ldrh	r1, [r7, #10]
 8004136:	4b4e      	ldr	r3, [pc, #312]	@ (8004270 <HAL_I2C_Master_Transmit+0x228>)
 8004138:	9300      	str	r3, [sp, #0]
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f001 f981 	bl	8005444 <I2C_TransferConfig>
 8004142:	e066      	b.n	8004212 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004148:	b2da      	uxtb	r2, r3
 800414a:	8979      	ldrh	r1, [r7, #10]
 800414c:	4b48      	ldr	r3, [pc, #288]	@ (8004270 <HAL_I2C_Master_Transmit+0x228>)
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f001 f976 	bl	8005444 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004158:	e05b      	b.n	8004212 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	6a39      	ldr	r1, [r7, #32]
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f000 ff7a 	bl	8005058 <I2C_WaitOnTXISFlagUntilTimeout>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e07b      	b.n	8004266 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004172:	781a      	ldrb	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417e:	1c5a      	adds	r2, r3, #1
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004188:	b29b      	uxth	r3, r3
 800418a:	3b01      	subs	r3, #1
 800418c:	b29a      	uxth	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004196:	3b01      	subs	r3, #1
 8004198:	b29a      	uxth	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d034      	beq.n	8004212 <HAL_I2C_Master_Transmit+0x1ca>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d130      	bne.n	8004212 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	6a3b      	ldr	r3, [r7, #32]
 80041b6:	2200      	movs	r2, #0
 80041b8:	2180      	movs	r1, #128	@ 0x80
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f000 fef3 	bl	8004fa6 <I2C_WaitOnFlagUntilTimeout>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e04d      	b.n	8004266 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	2bff      	cmp	r3, #255	@ 0xff
 80041d2:	d90e      	bls.n	80041f2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	22ff      	movs	r2, #255	@ 0xff
 80041d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	8979      	ldrh	r1, [r7, #10]
 80041e2:	2300      	movs	r3, #0
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f001 f92a 	bl	8005444 <I2C_TransferConfig>
 80041f0:	e00f      	b.n	8004212 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004200:	b2da      	uxtb	r2, r3
 8004202:	8979      	ldrh	r1, [r7, #10]
 8004204:	2300      	movs	r3, #0
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f001 f919 	bl	8005444 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004216:	b29b      	uxth	r3, r3
 8004218:	2b00      	cmp	r3, #0
 800421a:	d19e      	bne.n	800415a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	6a39      	ldr	r1, [r7, #32]
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f000 ff60 	bl	80050e6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e01a      	b.n	8004266 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2220      	movs	r2, #32
 8004236:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6859      	ldr	r1, [r3, #4]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	4b0c      	ldr	r3, [pc, #48]	@ (8004274 <HAL_I2C_Master_Transmit+0x22c>)
 8004244:	400b      	ands	r3, r1
 8004246:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2220      	movs	r2, #32
 800424c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004260:	2300      	movs	r3, #0
 8004262:	e000      	b.n	8004266 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004264:	2302      	movs	r3, #2
  }
}
 8004266:	4618      	mov	r0, r3
 8004268:	3718      	adds	r7, #24
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	80002000 	.word	0x80002000
 8004274:	fe00e800 	.word	0xfe00e800

08004278 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b088      	sub	sp, #32
 800427c:	af02      	add	r7, sp, #8
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	607a      	str	r2, [r7, #4]
 8004282:	461a      	mov	r2, r3
 8004284:	460b      	mov	r3, r1
 8004286:	817b      	strh	r3, [r7, #10]
 8004288:	4613      	mov	r3, r2
 800428a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b20      	cmp	r3, #32
 8004296:	f040 80db 	bne.w	8004450 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d101      	bne.n	80042a8 <HAL_I2C_Master_Receive+0x30>
 80042a4:	2302      	movs	r3, #2
 80042a6:	e0d4      	b.n	8004452 <HAL_I2C_Master_Receive+0x1da>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042b0:	f7fe f858 	bl	8002364 <HAL_GetTick>
 80042b4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	2319      	movs	r3, #25
 80042bc:	2201      	movs	r2, #1
 80042be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f000 fe6f 	bl	8004fa6 <I2C_WaitOnFlagUntilTimeout>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e0bf      	b.n	8004452 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2222      	movs	r2, #34	@ 0x22
 80042d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2210      	movs	r2, #16
 80042de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	893a      	ldrh	r2, [r7, #8]
 80042f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042fe:	b29b      	uxth	r3, r3
 8004300:	2bff      	cmp	r3, #255	@ 0xff
 8004302:	d90e      	bls.n	8004322 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2201      	movs	r2, #1
 8004308:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800430e:	b2da      	uxtb	r2, r3
 8004310:	8979      	ldrh	r1, [r7, #10]
 8004312:	4b52      	ldr	r3, [pc, #328]	@ (800445c <HAL_I2C_Master_Receive+0x1e4>)
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f001 f892 	bl	8005444 <I2C_TransferConfig>
 8004320:	e06d      	b.n	80043fe <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004326:	b29a      	uxth	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004330:	b2da      	uxtb	r2, r3
 8004332:	8979      	ldrh	r1, [r7, #10]
 8004334:	4b49      	ldr	r3, [pc, #292]	@ (800445c <HAL_I2C_Master_Receive+0x1e4>)
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f001 f881 	bl	8005444 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004342:	e05c      	b.n	80043fe <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	6a39      	ldr	r1, [r7, #32]
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f000 ff0f 	bl	800516c <I2C_WaitOnRXNEFlagUntilTimeout>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d001      	beq.n	8004358 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e07c      	b.n	8004452 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004362:	b2d2      	uxtb	r2, r2
 8004364:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436a:	1c5a      	adds	r2, r3, #1
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004374:	3b01      	subs	r3, #1
 8004376:	b29a      	uxth	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004380:	b29b      	uxth	r3, r3
 8004382:	3b01      	subs	r3, #1
 8004384:	b29a      	uxth	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800438e:	b29b      	uxth	r3, r3
 8004390:	2b00      	cmp	r3, #0
 8004392:	d034      	beq.n	80043fe <HAL_I2C_Master_Receive+0x186>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004398:	2b00      	cmp	r3, #0
 800439a:	d130      	bne.n	80043fe <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	2200      	movs	r2, #0
 80043a4:	2180      	movs	r1, #128	@ 0x80
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f000 fdfd 	bl	8004fa6 <I2C_WaitOnFlagUntilTimeout>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e04d      	b.n	8004452 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	2bff      	cmp	r3, #255	@ 0xff
 80043be:	d90e      	bls.n	80043de <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	22ff      	movs	r2, #255	@ 0xff
 80043c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	8979      	ldrh	r1, [r7, #10]
 80043ce:	2300      	movs	r3, #0
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f001 f834 	bl	8005444 <I2C_TransferConfig>
 80043dc:	e00f      	b.n	80043fe <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	8979      	ldrh	r1, [r7, #10]
 80043f0:	2300      	movs	r3, #0
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f001 f823 	bl	8005444 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004402:	b29b      	uxth	r3, r3
 8004404:	2b00      	cmp	r3, #0
 8004406:	d19d      	bne.n	8004344 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	6a39      	ldr	r1, [r7, #32]
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f000 fe6a 	bl	80050e6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d001      	beq.n	800441c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e01a      	b.n	8004452 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2220      	movs	r2, #32
 8004422:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	6859      	ldr	r1, [r3, #4]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	4b0c      	ldr	r3, [pc, #48]	@ (8004460 <HAL_I2C_Master_Receive+0x1e8>)
 8004430:	400b      	ands	r3, r1
 8004432:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2220      	movs	r2, #32
 8004438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800444c:	2300      	movs	r3, #0
 800444e:	e000      	b.n	8004452 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004450:	2302      	movs	r3, #2
  }
}
 8004452:	4618      	mov	r0, r3
 8004454:	3718      	adds	r7, #24
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	80002400 	.word	0x80002400
 8004460:	fe00e800 	.word	0xfe00e800

08004464 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	0a1b      	lsrs	r3, r3, #8
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b00      	cmp	r3, #0
 8004486:	d010      	beq.n	80044aa <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	09db      	lsrs	r3, r3, #7
 800448c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00a      	beq.n	80044aa <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004498:	f043 0201 	orr.w	r2, r3, #1
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80044a8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	0a9b      	lsrs	r3, r3, #10
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d010      	beq.n	80044d8 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	09db      	lsrs	r3, r3, #7
 80044ba:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00a      	beq.n	80044d8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044c6:	f043 0208 	orr.w	r2, r3, #8
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80044d6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	0a5b      	lsrs	r3, r3, #9
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d010      	beq.n	8004506 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	09db      	lsrs	r3, r3, #7
 80044e8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00a      	beq.n	8004506 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044f4:	f043 0202 	orr.w	r2, r3, #2
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004504:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800450a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f003 030b 	and.w	r3, r3, #11
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8004516:	68f9      	ldr	r1, [r7, #12]
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 fbeb 	bl	8004cf4 <I2C_ITError>
  }
}
 800451e:	bf00      	nop
 8004520:	3718      	adds	r7, #24
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004526:	b480      	push	{r7}
 8004528:	b083      	sub	sp, #12
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800452e:	bf00      	nop
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800453a:	b480      	push	{r7}
 800453c:	b083      	sub	sp, #12
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004542:	bf00      	nop
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
 8004556:	460b      	mov	r3, r1
 8004558:	70fb      	strb	r3, [r7, #3]
 800455a:	4613      	mov	r3, r2
 800455c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800455e:	bf00      	nop
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004572:	bf00      	nop
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800457e:	b480      	push	{r7}
 8004580:	b083      	sub	sp, #12
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004592:	b480      	push	{r7}
 8004594:	b083      	sub	sp, #12
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800459a:	bf00      	nop
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b086      	sub	sp, #24
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	60f8      	str	r0, [r7, #12]
 80045ae:	60b9      	str	r1, [r7, #8]
 80045b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d101      	bne.n	80045ca <I2C_Slave_ISR_IT+0x24>
 80045c6:	2302      	movs	r3, #2
 80045c8:	e0ed      	b.n	80047a6 <I2C_Slave_ISR_IT+0x200>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	095b      	lsrs	r3, r3, #5
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00a      	beq.n	80045f4 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	095b      	lsrs	r3, r3, #5
 80045e2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d004      	beq.n	80045f4 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80045ea:	6939      	ldr	r1, [r7, #16]
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f000 f9c1 	bl	8004974 <I2C_ITSlaveCplt>
 80045f2:	e0d3      	b.n	800479c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	091b      	lsrs	r3, r3, #4
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d04d      	beq.n	800469c <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	091b      	lsrs	r3, r3, #4
 8004604:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004608:	2b00      	cmp	r3, #0
 800460a:	d047      	beq.n	800469c <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004610:	b29b      	uxth	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d128      	bne.n	8004668 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b28      	cmp	r3, #40	@ 0x28
 8004620:	d108      	bne.n	8004634 <I2C_Slave_ISR_IT+0x8e>
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004628:	d104      	bne.n	8004634 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800462a:	6939      	ldr	r1, [r7, #16]
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f000 fb0b 	bl	8004c48 <I2C_ITListenCplt>
 8004632:	e032      	b.n	800469a <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b29      	cmp	r3, #41	@ 0x29
 800463e:	d10e      	bne.n	800465e <I2C_Slave_ISR_IT+0xb8>
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004646:	d00a      	beq.n	800465e <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2210      	movs	r2, #16
 800464e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f000 fc66 	bl	8004f22 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f000 f92d 	bl	80048b6 <I2C_ITSlaveSeqCplt>
 800465c:	e01d      	b.n	800469a <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2210      	movs	r2, #16
 8004664:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004666:	e096      	b.n	8004796 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2210      	movs	r2, #16
 800466e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004674:	f043 0204 	orr.w	r2, r3, #4
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d004      	beq.n	800468c <I2C_Slave_ISR_IT+0xe6>
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004688:	f040 8085 	bne.w	8004796 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004690:	4619      	mov	r1, r3
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f000 fb2e 	bl	8004cf4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004698:	e07d      	b.n	8004796 <I2C_Slave_ISR_IT+0x1f0>
 800469a:	e07c      	b.n	8004796 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	089b      	lsrs	r3, r3, #2
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d030      	beq.n	800470a <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	089b      	lsrs	r3, r3, #2
 80046ac:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d02a      	beq.n	800470a <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d018      	beq.n	80046f0 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c8:	b2d2      	uxtb	r2, r2
 80046ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d0:	1c5a      	adds	r2, r3, #1
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046da:	3b01      	subs	r3, #1
 80046dc:	b29a      	uxth	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	3b01      	subs	r3, #1
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d14f      	bne.n	800479a <I2C_Slave_ISR_IT+0x1f4>
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004700:	d04b      	beq.n	800479a <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f000 f8d7 	bl	80048b6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004708:	e047      	b.n	800479a <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	08db      	lsrs	r3, r3, #3
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	08db      	lsrs	r3, r3, #3
 800471a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800471e:	2b00      	cmp	r3, #0
 8004720:	d004      	beq.n	800472c <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004722:	6939      	ldr	r1, [r7, #16]
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 f842 	bl	80047ae <I2C_ITAddrCplt>
 800472a:	e037      	b.n	800479c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	085b      	lsrs	r3, r3, #1
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	2b00      	cmp	r3, #0
 8004736:	d031      	beq.n	800479c <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	085b      	lsrs	r3, r3, #1
 800473c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004740:	2b00      	cmp	r3, #0
 8004742:	d02b      	beq.n	800479c <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004748:	b29b      	uxth	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d018      	beq.n	8004780 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004752:	781a      	ldrb	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475e:	1c5a      	adds	r2, r3, #1
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004768:	b29b      	uxth	r3, r3
 800476a:	3b01      	subs	r3, #1
 800476c:	b29a      	uxth	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004776:	3b01      	subs	r3, #1
 8004778:	b29a      	uxth	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800477e:	e00d      	b.n	800479c <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004786:	d002      	beq.n	800478e <I2C_Slave_ISR_IT+0x1e8>
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d106      	bne.n	800479c <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f000 f891 	bl	80048b6 <I2C_ITSlaveSeqCplt>
 8004794:	e002      	b.n	800479c <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8004796:	bf00      	nop
 8004798:	e000      	b.n	800479c <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800479a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3718      	adds	r7, #24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b084      	sub	sp, #16
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
 80047b6:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80047c4:	2b28      	cmp	r3, #40	@ 0x28
 80047c6:	d16a      	bne.n	800489e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	0c1b      	lsrs	r3, r3, #16
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	0c1b      	lsrs	r3, r3, #16
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80047e6:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047f4:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004802:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	2b02      	cmp	r3, #2
 800480a:	d138      	bne.n	800487e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800480c:	897b      	ldrh	r3, [r7, #10]
 800480e:	09db      	lsrs	r3, r3, #7
 8004810:	b29a      	uxth	r2, r3
 8004812:	89bb      	ldrh	r3, [r7, #12]
 8004814:	4053      	eors	r3, r2
 8004816:	b29b      	uxth	r3, r3
 8004818:	f003 0306 	and.w	r3, r3, #6
 800481c:	2b00      	cmp	r3, #0
 800481e:	d11c      	bne.n	800485a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004820:	897b      	ldrh	r3, [r7, #10]
 8004822:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004828:	1c5a      	adds	r2, r3, #1
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004832:	2b02      	cmp	r3, #2
 8004834:	d13b      	bne.n	80048ae <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2208      	movs	r2, #8
 8004842:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800484c:	89ba      	ldrh	r2, [r7, #12]
 800484e:	7bfb      	ldrb	r3, [r7, #15]
 8004850:	4619      	mov	r1, r3
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7ff fe7b 	bl	800454e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004858:	e029      	b.n	80048ae <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800485a:	893b      	ldrh	r3, [r7, #8]
 800485c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800485e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 fe20 	bl	80054a8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004870:	89ba      	ldrh	r2, [r7, #12]
 8004872:	7bfb      	ldrb	r3, [r7, #15]
 8004874:	4619      	mov	r1, r3
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7ff fe69 	bl	800454e <HAL_I2C_AddrCallback>
}
 800487c:	e017      	b.n	80048ae <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800487e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 fe10 	bl	80054a8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004890:	89ba      	ldrh	r2, [r7, #12]
 8004892:	7bfb      	ldrb	r3, [r7, #15]
 8004894:	4619      	mov	r1, r3
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7ff fe59 	bl	800454e <HAL_I2C_AddrCallback>
}
 800489c:	e007      	b.n	80048ae <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2208      	movs	r2, #8
 80048a4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80048ae:	bf00      	nop
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b084      	sub	sp, #16
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	0b9b      	lsrs	r3, r3, #14
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d008      	beq.n	80048ec <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	e00d      	b.n	8004908 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	0bdb      	lsrs	r3, r3, #15
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d007      	beq.n	8004908 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004906:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b29      	cmp	r3, #41	@ 0x29
 8004912:	d112      	bne.n	800493a <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2228      	movs	r2, #40	@ 0x28
 8004918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2221      	movs	r2, #33	@ 0x21
 8004920:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004922:	2101      	movs	r1, #1
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 fdbf 	bl	80054a8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7ff fdf7 	bl	8004526 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004938:	e017      	b.n	800496a <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b2a      	cmp	r3, #42	@ 0x2a
 8004944:	d111      	bne.n	800496a <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2228      	movs	r2, #40	@ 0x28
 800494a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2222      	movs	r2, #34	@ 0x22
 8004952:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004954:	2102      	movs	r1, #2
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 fda6 	bl	80054a8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f7ff fde8 	bl	800453a <HAL_I2C_SlaveRxCpltCallback>
}
 800496a:	bf00      	nop
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
	...

08004974 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800498e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004996:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2220      	movs	r2, #32
 800499e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80049a0:	7afb      	ldrb	r3, [r7, #11]
 80049a2:	2b21      	cmp	r3, #33	@ 0x21
 80049a4:	d002      	beq.n	80049ac <I2C_ITSlaveCplt+0x38>
 80049a6:	7afb      	ldrb	r3, [r7, #11]
 80049a8:	2b29      	cmp	r3, #41	@ 0x29
 80049aa:	d108      	bne.n	80049be <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80049ac:	f248 0101 	movw	r1, #32769	@ 0x8001
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 fd79 	bl	80054a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2221      	movs	r2, #33	@ 0x21
 80049ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80049bc:	e019      	b.n	80049f2 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80049be:	7afb      	ldrb	r3, [r7, #11]
 80049c0:	2b22      	cmp	r3, #34	@ 0x22
 80049c2:	d002      	beq.n	80049ca <I2C_ITSlaveCplt+0x56>
 80049c4:	7afb      	ldrb	r3, [r7, #11]
 80049c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80049c8:	d108      	bne.n	80049dc <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80049ca:	f248 0102 	movw	r1, #32770	@ 0x8002
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 fd6a 	bl	80054a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2222      	movs	r2, #34	@ 0x22
 80049d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80049da:	e00a      	b.n	80049f2 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80049dc:	7afb      	ldrb	r3, [r7, #11]
 80049de:	2b28      	cmp	r3, #40	@ 0x28
 80049e0:	d107      	bne.n	80049f2 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80049e2:	f248 0103 	movw	r1, #32771	@ 0x8003
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 fd5e 	bl	80054a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	685a      	ldr	r2, [r3, #4]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a00:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6859      	ldr	r1, [r3, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	4b8c      	ldr	r3, [pc, #560]	@ (8004c40 <I2C_ITSlaveCplt+0x2cc>)
 8004a0e:	400b      	ands	r3, r1
 8004a10:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 fa85 	bl	8004f22 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	0b9b      	lsrs	r3, r3, #14
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d013      	beq.n	8004a4c <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004a32:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d020      	beq.n	8004a7e <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004a4a:	e018      	b.n	8004a7e <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	0bdb      	lsrs	r3, r3, #15
 8004a50:	f003 0301 	and.w	r3, r3, #1
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d012      	beq.n	8004a7e <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a66:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d006      	beq.n	8004a7e <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	089b      	lsrs	r3, r3, #2
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d020      	beq.n	8004acc <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f023 0304 	bic.w	r3, r3, #4
 8004a90:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9c:	b2d2      	uxtb	r2, r2
 8004a9e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa4:	1c5a      	adds	r2, r3, #1
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00c      	beq.n	8004acc <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	b29a      	uxth	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d005      	beq.n	8004ae2 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ada:	f043 0204 	orr.w	r2, r3, #4
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	091b      	lsrs	r3, r3, #4
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d04a      	beq.n	8004b84 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	091b      	lsrs	r3, r3, #4
 8004af2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d044      	beq.n	8004b84 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d128      	bne.n	8004b56 <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b28      	cmp	r3, #40	@ 0x28
 8004b0e:	d108      	bne.n	8004b22 <I2C_ITSlaveCplt+0x1ae>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b16:	d104      	bne.n	8004b22 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004b18:	6979      	ldr	r1, [r7, #20]
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f894 	bl	8004c48 <I2C_ITListenCplt>
 8004b20:	e030      	b.n	8004b84 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b29      	cmp	r3, #41	@ 0x29
 8004b2c:	d10e      	bne.n	8004b4c <I2C_ITSlaveCplt+0x1d8>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b34:	d00a      	beq.n	8004b4c <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2210      	movs	r2, #16
 8004b3c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f9ef 	bl	8004f22 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f7ff feb6 	bl	80048b6 <I2C_ITSlaveSeqCplt>
 8004b4a:	e01b      	b.n	8004b84 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2210      	movs	r2, #16
 8004b52:	61da      	str	r2, [r3, #28]
 8004b54:	e016      	b.n	8004b84 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2210      	movs	r2, #16
 8004b5c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b62:	f043 0204 	orr.w	r2, r3, #4
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d003      	beq.n	8004b78 <I2C_ITSlaveCplt+0x204>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b76:	d105      	bne.n	8004b84 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f8b8 	bl	8004cf4 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d010      	beq.n	8004bbc <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 f8a7 	bl	8004cf4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b28      	cmp	r3, #40	@ 0x28
 8004bb0:	d141      	bne.n	8004c36 <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004bb2:	6979      	ldr	r1, [r7, #20]
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f847 	bl	8004c48 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004bba:	e03c      	b.n	8004c36 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004bc4:	d014      	beq.n	8004bf0 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f7ff fe75 	bl	80048b6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a1d      	ldr	r2, [pc, #116]	@ (8004c44 <I2C_ITSlaveCplt+0x2d0>)
 8004bd0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f7ff fcbe 	bl	800456a <HAL_I2C_ListenCpltCallback>
}
 8004bee:	e022      	b.n	8004c36 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b22      	cmp	r3, #34	@ 0x22
 8004bfa:	d10e      	bne.n	8004c1a <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7ff fc91 	bl	800453a <HAL_I2C_SlaveRxCpltCallback>
}
 8004c18:	e00d      	b.n	8004c36 <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f7ff fc78 	bl	8004526 <HAL_I2C_SlaveTxCpltCallback>
}
 8004c36:	bf00      	nop
 8004c38:	3718      	adds	r7, #24
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	fe00e800 	.word	0xfe00e800
 8004c44:	ffff0000 	.word	0xffff0000

08004c48 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a26      	ldr	r2, [pc, #152]	@ (8004cf0 <I2C_ITListenCplt+0xa8>)
 8004c56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2220      	movs	r2, #32
 8004c62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	089b      	lsrs	r3, r3, #2
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d022      	beq.n	8004cc6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8a:	b2d2      	uxtb	r2, r2
 8004c8c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c92:	1c5a      	adds	r2, r3, #1
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d012      	beq.n	8004cc6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cbe:	f043 0204 	orr.w	r2, r3, #4
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004cc6:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 fbec 	bl	80054a8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2210      	movs	r2, #16
 8004cd6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f7ff fc42 	bl	800456a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004ce6:	bf00      	nop
 8004ce8:	3708      	adds	r7, #8
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	ffff0000 	.word	0xffff0000

08004cf4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d04:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a6d      	ldr	r2, [pc, #436]	@ (8004ec8 <I2C_ITError+0x1d4>)
 8004d12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	431a      	orrs	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004d26:	7bfb      	ldrb	r3, [r7, #15]
 8004d28:	2b28      	cmp	r3, #40	@ 0x28
 8004d2a:	d005      	beq.n	8004d38 <I2C_ITError+0x44>
 8004d2c:	7bfb      	ldrb	r3, [r7, #15]
 8004d2e:	2b29      	cmp	r3, #41	@ 0x29
 8004d30:	d002      	beq.n	8004d38 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004d32:	7bfb      	ldrb	r3, [r7, #15]
 8004d34:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d36:	d10b      	bne.n	8004d50 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004d38:	2103      	movs	r1, #3
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 fbb4 	bl	80054a8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2228      	movs	r2, #40	@ 0x28
 8004d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a60      	ldr	r2, [pc, #384]	@ (8004ecc <I2C_ITError+0x1d8>)
 8004d4c:	635a      	str	r2, [r3, #52]	@ 0x34
 8004d4e:	e030      	b.n	8004db2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004d50:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 fba7 	bl	80054a8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f8e1 	bl	8004f22 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b60      	cmp	r3, #96	@ 0x60
 8004d6a:	d01f      	beq.n	8004dac <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	f003 0320 	and.w	r3, r3, #32
 8004d7e:	2b20      	cmp	r3, #32
 8004d80:	d114      	bne.n	8004dac <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	f003 0310 	and.w	r3, r3, #16
 8004d8c:	2b10      	cmp	r3, #16
 8004d8e:	d109      	bne.n	8004da4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2210      	movs	r2, #16
 8004d96:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d9c:	f043 0204 	orr.w	r2, r3, #4
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2220      	movs	r2, #32
 8004daa:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004db6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d039      	beq.n	8004e34 <I2C_ITError+0x140>
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	2b11      	cmp	r3, #17
 8004dc4:	d002      	beq.n	8004dcc <I2C_ITError+0xd8>
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	2b21      	cmp	r3, #33	@ 0x21
 8004dca:	d133      	bne.n	8004e34 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004dd6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004dda:	d107      	bne.n	8004dec <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004dea:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7fe fe8d 	bl	8003b10 <HAL_DMA_GetState>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d017      	beq.n	8004e2c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e00:	4a33      	ldr	r2, [pc, #204]	@ (8004ed0 <I2C_ITError+0x1dc>)
 8004e02:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7fe fd9c 	bl	800394e <HAL_DMA_Abort_IT>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d04d      	beq.n	8004eb8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004e26:	4610      	mov	r0, r2
 8004e28:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e2a:	e045      	b.n	8004eb8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 f851 	bl	8004ed4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e32:	e041      	b.n	8004eb8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d039      	beq.n	8004eb0 <I2C_ITError+0x1bc>
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	2b12      	cmp	r3, #18
 8004e40:	d002      	beq.n	8004e48 <I2C_ITError+0x154>
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2b22      	cmp	r3, #34	@ 0x22
 8004e46:	d133      	bne.n	8004eb0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e56:	d107      	bne.n	8004e68 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e66:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7fe fe4f 	bl	8003b10 <HAL_DMA_GetState>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d017      	beq.n	8004ea8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e7c:	4a14      	ldr	r2, [pc, #80]	@ (8004ed0 <I2C_ITError+0x1dc>)
 8004e7e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7fe fd5e 	bl	800394e <HAL_DMA_Abort_IT>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d011      	beq.n	8004ebc <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004ea2:	4610      	mov	r0, r2
 8004ea4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ea6:	e009      	b.n	8004ebc <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f813 	bl	8004ed4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004eae:	e005      	b.n	8004ebc <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 f80f 	bl	8004ed4 <I2C_TreatErrorCallback>
  }
}
 8004eb6:	e002      	b.n	8004ebe <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004eb8:	bf00      	nop
 8004eba:	e000      	b.n	8004ebe <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ebc:	bf00      	nop
}
 8004ebe:	bf00      	nop
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	ffff0000 	.word	0xffff0000
 8004ecc:	080045a7 	.word	0x080045a7
 8004ed0:	08004f6b 	.word	0x08004f6b

08004ed4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b60      	cmp	r3, #96	@ 0x60
 8004ee6:	d10e      	bne.n	8004f06 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2220      	movs	r2, #32
 8004eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7ff fb47 	bl	8004592 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004f04:	e009      	b.n	8004f1a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f7ff fb32 	bl	800457e <HAL_I2C_ErrorCallback>
}
 8004f1a:	bf00      	nop
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b083      	sub	sp, #12
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d103      	bne.n	8004f40 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d007      	beq.n	8004f5e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	699a      	ldr	r2, [r3, #24]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f042 0201 	orr.w	r2, r2, #1
 8004f5c:	619a      	str	r2, [r3, #24]
  }
}
 8004f5e:	bf00      	nop
 8004f60:	370c      	adds	r7, #12
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr

08004f6a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b084      	sub	sp, #16
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d003      	beq.n	8004f88 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f84:	2200      	movs	r2, #0
 8004f86:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f94:	2200      	movs	r2, #0
 8004f96:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f7ff ff9b 	bl	8004ed4 <I2C_TreatErrorCallback>
}
 8004f9e:	bf00      	nop
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b084      	sub	sp, #16
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	60f8      	str	r0, [r7, #12]
 8004fae:	60b9      	str	r1, [r7, #8]
 8004fb0:	603b      	str	r3, [r7, #0]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fb6:	e03b      	b.n	8005030 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fb8:	69ba      	ldr	r2, [r7, #24]
 8004fba:	6839      	ldr	r1, [r7, #0]
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f000 f961 	bl	8005284 <I2C_IsErrorOccurred>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d001      	beq.n	8004fcc <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e041      	b.n	8005050 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd2:	d02d      	beq.n	8005030 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fd4:	f7fd f9c6 	bl	8002364 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d302      	bcc.n	8004fea <I2C_WaitOnFlagUntilTimeout+0x44>
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d122      	bne.n	8005030 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	699a      	ldr	r2, [r3, #24]
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	68ba      	ldr	r2, [r7, #8]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	bf0c      	ite	eq
 8004ffa:	2301      	moveq	r3, #1
 8004ffc:	2300      	movne	r3, #0
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	461a      	mov	r2, r3
 8005002:	79fb      	ldrb	r3, [r7, #7]
 8005004:	429a      	cmp	r2, r3
 8005006:	d113      	bne.n	8005030 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800500c:	f043 0220 	orr.w	r2, r3, #32
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2220      	movs	r2, #32
 8005018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e00f      	b.n	8005050 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	699a      	ldr	r2, [r3, #24]
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	4013      	ands	r3, r2
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	429a      	cmp	r2, r3
 800503e:	bf0c      	ite	eq
 8005040:	2301      	moveq	r3, #1
 8005042:	2300      	movne	r3, #0
 8005044:	b2db      	uxtb	r3, r3
 8005046:	461a      	mov	r2, r3
 8005048:	79fb      	ldrb	r3, [r7, #7]
 800504a:	429a      	cmp	r2, r3
 800504c:	d0b4      	beq.n	8004fb8 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005064:	e033      	b.n	80050ce <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	68b9      	ldr	r1, [r7, #8]
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f000 f90a 	bl	8005284 <I2C_IsErrorOccurred>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e031      	b.n	80050de <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005080:	d025      	beq.n	80050ce <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005082:	f7fd f96f 	bl	8002364 <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	429a      	cmp	r2, r3
 8005090:	d302      	bcc.n	8005098 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d11a      	bne.n	80050ce <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d013      	beq.n	80050ce <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050aa:	f043 0220 	orr.w	r2, r3, #32
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2220      	movs	r2, #32
 80050b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e007      	b.n	80050de <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	f003 0302 	and.w	r3, r3, #2
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d1c4      	bne.n	8005066 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b084      	sub	sp, #16
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	60f8      	str	r0, [r7, #12]
 80050ee:	60b9      	str	r1, [r7, #8]
 80050f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050f2:	e02f      	b.n	8005154 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	68b9      	ldr	r1, [r7, #8]
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f000 f8c3 	bl	8005284 <I2C_IsErrorOccurred>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e02d      	b.n	8005164 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005108:	f7fd f92c 	bl	8002364 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	429a      	cmp	r2, r3
 8005116:	d302      	bcc.n	800511e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d11a      	bne.n	8005154 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	f003 0320 	and.w	r3, r3, #32
 8005128:	2b20      	cmp	r3, #32
 800512a:	d013      	beq.n	8005154 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005130:	f043 0220 	orr.w	r2, r3, #32
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2220      	movs	r2, #32
 800513c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e007      	b.n	8005164 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	f003 0320 	and.w	r3, r3, #32
 800515e:	2b20      	cmp	r3, #32
 8005160:	d1c8      	bne.n	80050f4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b086      	sub	sp, #24
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005178:	2300      	movs	r3, #0
 800517a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800517c:	e071      	b.n	8005262 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	68b9      	ldr	r1, [r7, #8]
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f000 f87e 	bl	8005284 <I2C_IsErrorOccurred>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d001      	beq.n	8005192 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	f003 0320 	and.w	r3, r3, #32
 800519c:	2b20      	cmp	r3, #32
 800519e:	d13b      	bne.n	8005218 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80051a0:	7dfb      	ldrb	r3, [r7, #23]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d138      	bne.n	8005218 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	f003 0304 	and.w	r3, r3, #4
 80051b0:	2b04      	cmp	r3, #4
 80051b2:	d105      	bne.n	80051c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d001      	beq.n	80051c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80051bc:	2300      	movs	r3, #0
 80051be:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	f003 0310 	and.w	r3, r3, #16
 80051ca:	2b10      	cmp	r3, #16
 80051cc:	d121      	bne.n	8005212 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2210      	movs	r2, #16
 80051d4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2204      	movs	r2, #4
 80051da:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2220      	movs	r2, #32
 80051e2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6859      	ldr	r1, [r3, #4]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	4b24      	ldr	r3, [pc, #144]	@ (8005280 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80051f0:	400b      	ands	r3, r1
 80051f2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2220      	movs	r2, #32
 80051f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	75fb      	strb	r3, [r7, #23]
 8005210:	e002      	b.n	8005218 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8005218:	f7fd f8a4 	bl	8002364 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	429a      	cmp	r2, r3
 8005226:	d302      	bcc.n	800522e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d119      	bne.n	8005262 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800522e:	7dfb      	ldrb	r3, [r7, #23]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d116      	bne.n	8005262 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	f003 0304 	and.w	r3, r3, #4
 800523e:	2b04      	cmp	r3, #4
 8005240:	d00f      	beq.n	8005262 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005246:	f043 0220 	orr.w	r2, r3, #32
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2220      	movs	r2, #32
 8005252:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	f003 0304 	and.w	r3, r3, #4
 800526c:	2b04      	cmp	r3, #4
 800526e:	d002      	beq.n	8005276 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8005270:	7dfb      	ldrb	r3, [r7, #23]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d083      	beq.n	800517e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8005276:	7dfb      	ldrb	r3, [r7, #23]
}
 8005278:	4618      	mov	r0, r3
 800527a:	3718      	adds	r7, #24
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	fe00e800 	.word	0xfe00e800

08005284 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b08a      	sub	sp, #40	@ 0x28
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005290:	2300      	movs	r3, #0
 8005292:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800529e:	2300      	movs	r3, #0
 80052a0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	f003 0310 	and.w	r3, r3, #16
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d068      	beq.n	8005382 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2210      	movs	r2, #16
 80052b6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80052b8:	e049      	b.n	800534e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c0:	d045      	beq.n	800534e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80052c2:	f7fd f84f 	bl	8002364 <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	68ba      	ldr	r2, [r7, #8]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d302      	bcc.n	80052d8 <I2C_IsErrorOccurred+0x54>
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d13a      	bne.n	800534e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052e2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052ea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052fa:	d121      	bne.n	8005340 <I2C_IsErrorOccurred+0xbc>
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005302:	d01d      	beq.n	8005340 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005304:	7cfb      	ldrb	r3, [r7, #19]
 8005306:	2b20      	cmp	r3, #32
 8005308:	d01a      	beq.n	8005340 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	685a      	ldr	r2, [r3, #4]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005318:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800531a:	f7fd f823 	bl	8002364 <HAL_GetTick>
 800531e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005320:	e00e      	b.n	8005340 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005322:	f7fd f81f 	bl	8002364 <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	2b19      	cmp	r3, #25
 800532e:	d907      	bls.n	8005340 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005330:	6a3b      	ldr	r3, [r7, #32]
 8005332:	f043 0320 	orr.w	r3, r3, #32
 8005336:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800533e:	e006      	b.n	800534e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	f003 0320 	and.w	r3, r3, #32
 800534a:	2b20      	cmp	r3, #32
 800534c:	d1e9      	bne.n	8005322 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	f003 0320 	and.w	r3, r3, #32
 8005358:	2b20      	cmp	r3, #32
 800535a:	d003      	beq.n	8005364 <I2C_IsErrorOccurred+0xe0>
 800535c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005360:	2b00      	cmp	r3, #0
 8005362:	d0aa      	beq.n	80052ba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005364:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005368:	2b00      	cmp	r3, #0
 800536a:	d103      	bne.n	8005374 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2220      	movs	r2, #32
 8005372:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005374:	6a3b      	ldr	r3, [r7, #32]
 8005376:	f043 0304 	orr.w	r3, r3, #4
 800537a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00b      	beq.n	80053ac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005394:	6a3b      	ldr	r3, [r7, #32]
 8005396:	f043 0301 	orr.w	r3, r3, #1
 800539a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80053a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00b      	beq.n	80053ce <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80053b6:	6a3b      	ldr	r3, [r7, #32]
 80053b8:	f043 0308 	orr.w	r3, r3, #8
 80053bc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80053c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00b      	beq.n	80053f0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80053d8:	6a3b      	ldr	r3, [r7, #32]
 80053da:	f043 0302 	orr.w	r3, r3, #2
 80053de:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80053f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d01c      	beq.n	8005432 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f7ff fd92 	bl	8004f22 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	6859      	ldr	r1, [r3, #4]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	4b0d      	ldr	r3, [pc, #52]	@ (8005440 <I2C_IsErrorOccurred+0x1bc>)
 800540a:	400b      	ands	r3, r1
 800540c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005412:	6a3b      	ldr	r3, [r7, #32]
 8005414:	431a      	orrs	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2220      	movs	r2, #32
 800541e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005432:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005436:	4618      	mov	r0, r3
 8005438:	3728      	adds	r7, #40	@ 0x28
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	fe00e800 	.word	0xfe00e800

08005444 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005444:	b480      	push	{r7}
 8005446:	b087      	sub	sp, #28
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	607b      	str	r3, [r7, #4]
 800544e:	460b      	mov	r3, r1
 8005450:	817b      	strh	r3, [r7, #10]
 8005452:	4613      	mov	r3, r2
 8005454:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005456:	897b      	ldrh	r3, [r7, #10]
 8005458:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800545c:	7a7b      	ldrb	r3, [r7, #9]
 800545e:	041b      	lsls	r3, r3, #16
 8005460:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005464:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800546a:	6a3b      	ldr	r3, [r7, #32]
 800546c:	4313      	orrs	r3, r2
 800546e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005472:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685a      	ldr	r2, [r3, #4]
 800547a:	6a3b      	ldr	r3, [r7, #32]
 800547c:	0d5b      	lsrs	r3, r3, #21
 800547e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005482:	4b08      	ldr	r3, [pc, #32]	@ (80054a4 <I2C_TransferConfig+0x60>)
 8005484:	430b      	orrs	r3, r1
 8005486:	43db      	mvns	r3, r3
 8005488:	ea02 0103 	and.w	r1, r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	430a      	orrs	r2, r1
 8005494:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005496:	bf00      	nop
 8005498:	371c      	adds	r7, #28
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	03ff63ff 	.word	0x03ff63ff

080054a8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	460b      	mov	r3, r1
 80054b2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80054b4:	2300      	movs	r3, #0
 80054b6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80054b8:	887b      	ldrh	r3, [r7, #2]
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00f      	beq.n	80054e2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80054c8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80054d6:	2b28      	cmp	r3, #40	@ 0x28
 80054d8:	d003      	beq.n	80054e2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80054e0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80054e2:	887b      	ldrh	r3, [r7, #2]
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00f      	beq.n	800550c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80054f2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005500:	2b28      	cmp	r3, #40	@ 0x28
 8005502:	d003      	beq.n	800550c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800550a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800550c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005510:	2b00      	cmp	r3, #0
 8005512:	da03      	bge.n	800551c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800551a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800551c:	887b      	ldrh	r3, [r7, #2]
 800551e:	2b10      	cmp	r3, #16
 8005520:	d103      	bne.n	800552a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005528:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800552a:	887b      	ldrh	r3, [r7, #2]
 800552c:	2b20      	cmp	r3, #32
 800552e:	d103      	bne.n	8005538 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f043 0320 	orr.w	r3, r3, #32
 8005536:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005538:	887b      	ldrh	r3, [r7, #2]
 800553a:	2b40      	cmp	r3, #64	@ 0x40
 800553c:	d103      	bne.n	8005546 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005544:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	6819      	ldr	r1, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	43da      	mvns	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	400a      	ands	r2, r1
 8005556:	601a      	str	r2, [r3, #0]
}
 8005558:	bf00      	nop
 800555a:	3714      	adds	r7, #20
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b20      	cmp	r3, #32
 8005578:	d138      	bne.n	80055ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005580:	2b01      	cmp	r3, #1
 8005582:	d101      	bne.n	8005588 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005584:	2302      	movs	r3, #2
 8005586:	e032      	b.n	80055ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2224      	movs	r2, #36	@ 0x24
 8005594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 0201 	bic.w	r2, r2, #1
 80055a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80055b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6819      	ldr	r1, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	430a      	orrs	r2, r1
 80055c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f042 0201 	orr.w	r2, r2, #1
 80055d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2220      	movs	r2, #32
 80055dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80055e8:	2300      	movs	r3, #0
 80055ea:	e000      	b.n	80055ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80055ec:	2302      	movs	r3, #2
  }
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80055fa:	b480      	push	{r7}
 80055fc:	b085      	sub	sp, #20
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
 8005602:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b20      	cmp	r3, #32
 800560e:	d139      	bne.n	8005684 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005616:	2b01      	cmp	r3, #1
 8005618:	d101      	bne.n	800561e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800561a:	2302      	movs	r3, #2
 800561c:	e033      	b.n	8005686 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2224      	movs	r2, #36	@ 0x24
 800562a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f022 0201 	bic.w	r2, r2, #1
 800563c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800564c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	021b      	lsls	r3, r3, #8
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	4313      	orrs	r3, r2
 8005656:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f042 0201 	orr.w	r2, r2, #1
 800566e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2220      	movs	r2, #32
 8005674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005680:	2300      	movs	r3, #0
 8005682:	e000      	b.n	8005686 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005684:	2302      	movs	r3, #2
  }
}
 8005686:	4618      	mov	r0, r3
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
	...

08005694 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800569a:	af00      	add	r7, sp, #0
 800569c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80056a4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d102      	bne.n	80056ba <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	f000 bff4 	b.w	80066a2 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f000 816d 	beq.w	80059aa <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80056d0:	4bb4      	ldr	r3, [pc, #720]	@ (80059a4 <HAL_RCC_OscConfig+0x310>)
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f003 030c 	and.w	r3, r3, #12
 80056d8:	2b04      	cmp	r3, #4
 80056da:	d00c      	beq.n	80056f6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80056dc:	4bb1      	ldr	r3, [pc, #708]	@ (80059a4 <HAL_RCC_OscConfig+0x310>)
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f003 030c 	and.w	r3, r3, #12
 80056e4:	2b08      	cmp	r3, #8
 80056e6:	d157      	bne.n	8005798 <HAL_RCC_OscConfig+0x104>
 80056e8:	4bae      	ldr	r3, [pc, #696]	@ (80059a4 <HAL_RCC_OscConfig+0x310>)
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056f4:	d150      	bne.n	8005798 <HAL_RCC_OscConfig+0x104>
 80056f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80056fa:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056fe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8005702:	fa93 f3a3 	rbit	r3, r3
 8005706:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800570a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800570e:	fab3 f383 	clz	r3, r3
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b3f      	cmp	r3, #63	@ 0x3f
 8005716:	d802      	bhi.n	800571e <HAL_RCC_OscConfig+0x8a>
 8005718:	4ba2      	ldr	r3, [pc, #648]	@ (80059a4 <HAL_RCC_OscConfig+0x310>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	e015      	b.n	800574a <HAL_RCC_OscConfig+0xb6>
 800571e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005722:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005726:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800572a:	fa93 f3a3 	rbit	r3, r3
 800572e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8005732:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005736:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800573a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800573e:	fa93 f3a3 	rbit	r3, r3
 8005742:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8005746:	4b97      	ldr	r3, [pc, #604]	@ (80059a4 <HAL_RCC_OscConfig+0x310>)
 8005748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800574a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800574e:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8005752:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8005756:	fa92 f2a2 	rbit	r2, r2
 800575a:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800575e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8005762:	fab2 f282 	clz	r2, r2
 8005766:	b2d2      	uxtb	r2, r2
 8005768:	f042 0220 	orr.w	r2, r2, #32
 800576c:	b2d2      	uxtb	r2, r2
 800576e:	f002 021f 	and.w	r2, r2, #31
 8005772:	2101      	movs	r1, #1
 8005774:	fa01 f202 	lsl.w	r2, r1, r2
 8005778:	4013      	ands	r3, r2
 800577a:	2b00      	cmp	r3, #0
 800577c:	f000 8114 	beq.w	80059a8 <HAL_RCC_OscConfig+0x314>
 8005780:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005784:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	f040 810b 	bne.w	80059a8 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	f000 bf85 	b.w	80066a2 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005798:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800579c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057a8:	d106      	bne.n	80057b8 <HAL_RCC_OscConfig+0x124>
 80057aa:	4b7e      	ldr	r3, [pc, #504]	@ (80059a4 <HAL_RCC_OscConfig+0x310>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a7d      	ldr	r2, [pc, #500]	@ (80059a4 <HAL_RCC_OscConfig+0x310>)
 80057b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057b4:	6013      	str	r3, [r2, #0]
 80057b6:	e036      	b.n	8005826 <HAL_RCC_OscConfig+0x192>
 80057b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80057bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10c      	bne.n	80057e2 <HAL_RCC_OscConfig+0x14e>
 80057c8:	4b76      	ldr	r3, [pc, #472]	@ (80059a4 <HAL_RCC_OscConfig+0x310>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a75      	ldr	r2, [pc, #468]	@ (80059a4 <HAL_RCC_OscConfig+0x310>)
 80057ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057d2:	6013      	str	r3, [r2, #0]
 80057d4:	4b73      	ldr	r3, [pc, #460]	@ (80059a4 <HAL_RCC_OscConfig+0x310>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a72      	ldr	r2, [pc, #456]	@ (80059a4 <HAL_RCC_OscConfig+0x310>)
 80057da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057de:	6013      	str	r3, [r2, #0]
 80057e0:	e021      	b.n	8005826 <HAL_RCC_OscConfig+0x192>
 80057e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80057e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80057f2:	d10c      	bne.n	800580e <HAL_RCC_OscConfig+0x17a>
 80057f4:	4b6b      	ldr	r3, [pc, #428]	@ (80059a4 <HAL_RCC_OscConfig+0x310>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a6a      	ldr	r2, [pc, #424]	@ (80059a4 <HAL_RCC_OscConfig+0x310>)
 80057fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80057fe:	6013      	str	r3, [r2, #0]
 8005800:	4b68      	ldr	r3, [pc, #416]	@ (80059a4 <HAL_RCC_OscConfig+0x310>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a67      	ldr	r2, [pc, #412]	@ (80059a4 <HAL_RCC_OscConfig+0x310>)
 8005806:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800580a:	6013      	str	r3, [r2, #0]
 800580c:	e00b      	b.n	8005826 <HAL_RCC_OscConfig+0x192>
 800580e:	4b65      	ldr	r3, [pc, #404]	@ (80059a4 <HAL_RCC_OscConfig+0x310>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a64      	ldr	r2, [pc, #400]	@ (80059a4 <HAL_RCC_OscConfig+0x310>)
 8005814:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005818:	6013      	str	r3, [r2, #0]
 800581a:	4b62      	ldr	r3, [pc, #392]	@ (80059a4 <HAL_RCC_OscConfig+0x310>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a61      	ldr	r2, [pc, #388]	@ (80059a4 <HAL_RCC_OscConfig+0x310>)
 8005820:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005824:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005826:	4b5f      	ldr	r3, [pc, #380]	@ (80059a4 <HAL_RCC_OscConfig+0x310>)
 8005828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800582a:	f023 020f 	bic.w	r2, r3, #15
 800582e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005832:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	495a      	ldr	r1, [pc, #360]	@ (80059a4 <HAL_RCC_OscConfig+0x310>)
 800583c:	4313      	orrs	r3, r2
 800583e:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005840:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005844:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d054      	beq.n	80058fa <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005850:	f7fc fd88 	bl	8002364 <HAL_GetTick>
 8005854:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005858:	e00a      	b.n	8005870 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800585a:	f7fc fd83 	bl	8002364 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	2b64      	cmp	r3, #100	@ 0x64
 8005868:	d902      	bls.n	8005870 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	f000 bf19 	b.w	80066a2 <HAL_RCC_OscConfig+0x100e>
 8005870:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005874:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005878:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800587c:	fa93 f3a3 	rbit	r3, r3
 8005880:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8005884:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005888:	fab3 f383 	clz	r3, r3
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b3f      	cmp	r3, #63	@ 0x3f
 8005890:	d802      	bhi.n	8005898 <HAL_RCC_OscConfig+0x204>
 8005892:	4b44      	ldr	r3, [pc, #272]	@ (80059a4 <HAL_RCC_OscConfig+0x310>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	e015      	b.n	80058c4 <HAL_RCC_OscConfig+0x230>
 8005898:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800589c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058a0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80058a4:	fa93 f3a3 	rbit	r3, r3
 80058a8:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80058ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80058b0:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80058b4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80058b8:	fa93 f3a3 	rbit	r3, r3
 80058bc:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80058c0:	4b38      	ldr	r3, [pc, #224]	@ (80059a4 <HAL_RCC_OscConfig+0x310>)
 80058c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80058c8:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80058cc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80058d0:	fa92 f2a2 	rbit	r2, r2
 80058d4:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80058d8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80058dc:	fab2 f282 	clz	r2, r2
 80058e0:	b2d2      	uxtb	r2, r2
 80058e2:	f042 0220 	orr.w	r2, r2, #32
 80058e6:	b2d2      	uxtb	r2, r2
 80058e8:	f002 021f 	and.w	r2, r2, #31
 80058ec:	2101      	movs	r1, #1
 80058ee:	fa01 f202 	lsl.w	r2, r1, r2
 80058f2:	4013      	ands	r3, r2
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d0b0      	beq.n	800585a <HAL_RCC_OscConfig+0x1c6>
 80058f8:	e057      	b.n	80059aa <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058fa:	f7fc fd33 	bl	8002364 <HAL_GetTick>
 80058fe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005902:	e00a      	b.n	800591a <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005904:	f7fc fd2e 	bl	8002364 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	2b64      	cmp	r3, #100	@ 0x64
 8005912:	d902      	bls.n	800591a <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	f000 bec4 	b.w	80066a2 <HAL_RCC_OscConfig+0x100e>
 800591a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800591e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005922:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8005926:	fa93 f3a3 	rbit	r3, r3
 800592a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800592e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005932:	fab3 f383 	clz	r3, r3
 8005936:	b2db      	uxtb	r3, r3
 8005938:	2b3f      	cmp	r3, #63	@ 0x3f
 800593a:	d802      	bhi.n	8005942 <HAL_RCC_OscConfig+0x2ae>
 800593c:	4b19      	ldr	r3, [pc, #100]	@ (80059a4 <HAL_RCC_OscConfig+0x310>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	e015      	b.n	800596e <HAL_RCC_OscConfig+0x2da>
 8005942:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005946:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800594a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800594e:	fa93 f3a3 	rbit	r3, r3
 8005952:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8005956:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800595a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800595e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8005962:	fa93 f3a3 	rbit	r3, r3
 8005966:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800596a:	4b0e      	ldr	r3, [pc, #56]	@ (80059a4 <HAL_RCC_OscConfig+0x310>)
 800596c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005972:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8005976:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800597a:	fa92 f2a2 	rbit	r2, r2
 800597e:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8005982:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8005986:	fab2 f282 	clz	r2, r2
 800598a:	b2d2      	uxtb	r2, r2
 800598c:	f042 0220 	orr.w	r2, r2, #32
 8005990:	b2d2      	uxtb	r2, r2
 8005992:	f002 021f 	and.w	r2, r2, #31
 8005996:	2101      	movs	r1, #1
 8005998:	fa01 f202 	lsl.w	r2, r1, r2
 800599c:	4013      	ands	r3, r2
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1b0      	bne.n	8005904 <HAL_RCC_OscConfig+0x270>
 80059a2:	e002      	b.n	80059aa <HAL_RCC_OscConfig+0x316>
 80059a4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0302 	and.w	r3, r3, #2
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f000 816c 	beq.w	8005c98 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80059c0:	4bcc      	ldr	r3, [pc, #816]	@ (8005cf4 <HAL_RCC_OscConfig+0x660>)
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f003 030c 	and.w	r3, r3, #12
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00b      	beq.n	80059e4 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80059cc:	4bc9      	ldr	r3, [pc, #804]	@ (8005cf4 <HAL_RCC_OscConfig+0x660>)
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f003 030c 	and.w	r3, r3, #12
 80059d4:	2b08      	cmp	r3, #8
 80059d6:	d16d      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x420>
 80059d8:	4bc6      	ldr	r3, [pc, #792]	@ (8005cf4 <HAL_RCC_OscConfig+0x660>)
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d167      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x420>
 80059e4:	2302      	movs	r3, #2
 80059e6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ea:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80059ee:	fa93 f3a3 	rbit	r3, r3
 80059f2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80059f6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059fa:	fab3 f383 	clz	r3, r3
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b3f      	cmp	r3, #63	@ 0x3f
 8005a02:	d802      	bhi.n	8005a0a <HAL_RCC_OscConfig+0x376>
 8005a04:	4bbb      	ldr	r3, [pc, #748]	@ (8005cf4 <HAL_RCC_OscConfig+0x660>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	e013      	b.n	8005a32 <HAL_RCC_OscConfig+0x39e>
 8005a0a:	2302      	movs	r3, #2
 8005a0c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a10:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8005a14:	fa93 f3a3 	rbit	r3, r3
 8005a18:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8005a22:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005a26:	fa93 f3a3 	rbit	r3, r3
 8005a2a:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8005a2e:	4bb1      	ldr	r3, [pc, #708]	@ (8005cf4 <HAL_RCC_OscConfig+0x660>)
 8005a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a32:	2202      	movs	r2, #2
 8005a34:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8005a38:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8005a3c:	fa92 f2a2 	rbit	r2, r2
 8005a40:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8005a44:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8005a48:	fab2 f282 	clz	r2, r2
 8005a4c:	b2d2      	uxtb	r2, r2
 8005a4e:	f042 0220 	orr.w	r2, r2, #32
 8005a52:	b2d2      	uxtb	r2, r2
 8005a54:	f002 021f 	and.w	r2, r2, #31
 8005a58:	2101      	movs	r1, #1
 8005a5a:	fa01 f202 	lsl.w	r2, r1, r2
 8005a5e:	4013      	ands	r3, r2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00a      	beq.n	8005a7a <HAL_RCC_OscConfig+0x3e6>
 8005a64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a68:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d002      	beq.n	8005a7a <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	f000 be14 	b.w	80066a2 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a7a:	4b9e      	ldr	r3, [pc, #632]	@ (8005cf4 <HAL_RCC_OscConfig+0x660>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	21f8      	movs	r1, #248	@ 0xf8
 8005a90:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a94:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8005a98:	fa91 f1a1 	rbit	r1, r1
 8005a9c:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8005aa0:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8005aa4:	fab1 f181 	clz	r1, r1
 8005aa8:	b2c9      	uxtb	r1, r1
 8005aaa:	408b      	lsls	r3, r1
 8005aac:	4991      	ldr	r1, [pc, #580]	@ (8005cf4 <HAL_RCC_OscConfig+0x660>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ab2:	e0f1      	b.n	8005c98 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ab4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ab8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 8083 	beq.w	8005bcc <HAL_RCC_OscConfig+0x538>
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005acc:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8005ad0:	fa93 f3a3 	rbit	r3, r3
 8005ad4:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8005ad8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005adc:	fab3 f383 	clz	r3, r3
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005ae6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	461a      	mov	r2, r3
 8005aee:	2301      	movs	r3, #1
 8005af0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005af2:	f7fc fc37 	bl	8002364 <HAL_GetTick>
 8005af6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005afa:	e00a      	b.n	8005b12 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005afc:	f7fc fc32 	bl	8002364 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d902      	bls.n	8005b12 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	f000 bdc8 	b.w	80066a2 <HAL_RCC_OscConfig+0x100e>
 8005b12:	2302      	movs	r3, #2
 8005b14:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b18:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8005b1c:	fa93 f3a3 	rbit	r3, r3
 8005b20:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8005b24:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b28:	fab3 f383 	clz	r3, r3
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2b3f      	cmp	r3, #63	@ 0x3f
 8005b30:	d802      	bhi.n	8005b38 <HAL_RCC_OscConfig+0x4a4>
 8005b32:	4b70      	ldr	r3, [pc, #448]	@ (8005cf4 <HAL_RCC_OscConfig+0x660>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	e013      	b.n	8005b60 <HAL_RCC_OscConfig+0x4cc>
 8005b38:	2302      	movs	r3, #2
 8005b3a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b3e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8005b42:	fa93 f3a3 	rbit	r3, r3
 8005b46:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8005b4a:	2302      	movs	r3, #2
 8005b4c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8005b50:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8005b54:	fa93 f3a3 	rbit	r3, r3
 8005b58:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8005b5c:	4b65      	ldr	r3, [pc, #404]	@ (8005cf4 <HAL_RCC_OscConfig+0x660>)
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b60:	2202      	movs	r2, #2
 8005b62:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8005b66:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8005b6a:	fa92 f2a2 	rbit	r2, r2
 8005b6e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8005b72:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8005b76:	fab2 f282 	clz	r2, r2
 8005b7a:	b2d2      	uxtb	r2, r2
 8005b7c:	f042 0220 	orr.w	r2, r2, #32
 8005b80:	b2d2      	uxtb	r2, r2
 8005b82:	f002 021f 	and.w	r2, r2, #31
 8005b86:	2101      	movs	r1, #1
 8005b88:	fa01 f202 	lsl.w	r2, r1, r2
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d0b4      	beq.n	8005afc <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b92:	4b58      	ldr	r3, [pc, #352]	@ (8005cf4 <HAL_RCC_OscConfig+0x660>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	21f8      	movs	r1, #248	@ 0xf8
 8005ba8:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bac:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8005bb0:	fa91 f1a1 	rbit	r1, r1
 8005bb4:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8005bb8:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8005bbc:	fab1 f181 	clz	r1, r1
 8005bc0:	b2c9      	uxtb	r1, r1
 8005bc2:	408b      	lsls	r3, r1
 8005bc4:	494b      	ldr	r1, [pc, #300]	@ (8005cf4 <HAL_RCC_OscConfig+0x660>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	600b      	str	r3, [r1, #0]
 8005bca:	e065      	b.n	8005c98 <HAL_RCC_OscConfig+0x604>
 8005bcc:	2301      	movs	r3, #1
 8005bce:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bd2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005bd6:	fa93 f3a3 	rbit	r3, r3
 8005bda:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8005bde:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005be2:	fab3 f383 	clz	r3, r3
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005bec:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bf8:	f7fc fbb4 	bl	8002364 <HAL_GetTick>
 8005bfc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c00:	e00a      	b.n	8005c18 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c02:	f7fc fbaf 	bl	8002364 <HAL_GetTick>
 8005c06:	4602      	mov	r2, r0
 8005c08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d902      	bls.n	8005c18 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	f000 bd45 	b.w	80066a2 <HAL_RCC_OscConfig+0x100e>
 8005c18:	2302      	movs	r3, #2
 8005c1a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c1e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005c22:	fa93 f3a3 	rbit	r3, r3
 8005c26:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8005c2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c2e:	fab3 f383 	clz	r3, r3
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	2b3f      	cmp	r3, #63	@ 0x3f
 8005c36:	d802      	bhi.n	8005c3e <HAL_RCC_OscConfig+0x5aa>
 8005c38:	4b2e      	ldr	r3, [pc, #184]	@ (8005cf4 <HAL_RCC_OscConfig+0x660>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	e013      	b.n	8005c66 <HAL_RCC_OscConfig+0x5d2>
 8005c3e:	2302      	movs	r3, #2
 8005c40:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c44:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005c48:	fa93 f3a3 	rbit	r3, r3
 8005c4c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8005c50:	2302      	movs	r3, #2
 8005c52:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8005c56:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005c5a:	fa93 f3a3 	rbit	r3, r3
 8005c5e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8005c62:	4b24      	ldr	r3, [pc, #144]	@ (8005cf4 <HAL_RCC_OscConfig+0x660>)
 8005c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c66:	2202      	movs	r2, #2
 8005c68:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8005c6c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005c70:	fa92 f2a2 	rbit	r2, r2
 8005c74:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8005c78:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8005c7c:	fab2 f282 	clz	r2, r2
 8005c80:	b2d2      	uxtb	r2, r2
 8005c82:	f042 0220 	orr.w	r2, r2, #32
 8005c86:	b2d2      	uxtb	r2, r2
 8005c88:	f002 021f 	and.w	r2, r2, #31
 8005c8c:	2101      	movs	r1, #1
 8005c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8005c92:	4013      	ands	r3, r2
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1b4      	bne.n	8005c02 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c9c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0308 	and.w	r3, r3, #8
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f000 8115 	beq.w	8005ed8 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005cae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005cb2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d07e      	beq.n	8005dbc <HAL_RCC_OscConfig+0x728>
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cc4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005cc8:	fa93 f3a3 	rbit	r3, r3
 8005ccc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8005cd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cd4:	fab3 f383 	clz	r3, r3
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	461a      	mov	r2, r3
 8005cdc:	4b06      	ldr	r3, [pc, #24]	@ (8005cf8 <HAL_RCC_OscConfig+0x664>)
 8005cde:	4413      	add	r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ce8:	f7fc fb3c 	bl	8002364 <HAL_GetTick>
 8005cec:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cf0:	e00f      	b.n	8005d12 <HAL_RCC_OscConfig+0x67e>
 8005cf2:	bf00      	nop
 8005cf4:	40021000 	.word	0x40021000
 8005cf8:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cfc:	f7fc fb32 	bl	8002364 <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d902      	bls.n	8005d12 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	f000 bcc8 	b.w	80066a2 <HAL_RCC_OscConfig+0x100e>
 8005d12:	2302      	movs	r3, #2
 8005d14:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d18:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8005d1c:	fa93 f3a3 	rbit	r3, r3
 8005d20:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005d24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d28:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8005d2c:	2202      	movs	r2, #2
 8005d2e:	601a      	str	r2, [r3, #0]
 8005d30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d34:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	fa93 f2a3 	rbit	r2, r3
 8005d3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d46:	601a      	str	r2, [r3, #0]
 8005d48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d50:	2202      	movs	r2, #2
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	fa93 f2a3 	rbit	r2, r3
 8005d62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d66:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005d6a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d6c:	4bb0      	ldr	r3, [pc, #704]	@ (8006030 <HAL_RCC_OscConfig+0x99c>)
 8005d6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d74:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8005d78:	2102      	movs	r1, #2
 8005d7a:	6019      	str	r1, [r3, #0]
 8005d7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d80:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	fa93 f1a3 	rbit	r1, r3
 8005d8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d8e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005d92:	6019      	str	r1, [r3, #0]
  return result;
 8005d94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d98:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	fab3 f383 	clz	r3, r3
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	f003 031f 	and.w	r3, r3, #31
 8005dae:	2101      	movs	r1, #1
 8005db0:	fa01 f303 	lsl.w	r3, r1, r3
 8005db4:	4013      	ands	r3, r2
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d0a0      	beq.n	8005cfc <HAL_RCC_OscConfig+0x668>
 8005dba:	e08d      	b.n	8005ed8 <HAL_RCC_OscConfig+0x844>
 8005dbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005dc0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005dcc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	fa93 f2a3 	rbit	r2, r3
 8005dd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005dda:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005dde:	601a      	str	r2, [r3, #0]
  return result;
 8005de0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005de4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005de8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005dea:	fab3 f383 	clz	r3, r3
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	461a      	mov	r2, r3
 8005df2:	4b90      	ldr	r3, [pc, #576]	@ (8006034 <HAL_RCC_OscConfig+0x9a0>)
 8005df4:	4413      	add	r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	461a      	mov	r2, r3
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dfe:	f7fc fab1 	bl	8002364 <HAL_GetTick>
 8005e02:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e06:	e00a      	b.n	8005e1e <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e08:	f7fc faac 	bl	8002364 <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005e12:	1ad3      	subs	r3, r2, r3
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d902      	bls.n	8005e1e <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	f000 bc42 	b.w	80066a2 <HAL_RCC_OscConfig+0x100e>
 8005e1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e22:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8005e26:	2202      	movs	r2, #2
 8005e28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e2e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	fa93 f2a3 	rbit	r2, r3
 8005e38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e3c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005e40:	601a      	str	r2, [r3, #0]
 8005e42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e46:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	601a      	str	r2, [r3, #0]
 8005e4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e52:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	fa93 f2a3 	rbit	r2, r3
 8005e5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e60:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005e64:	601a      	str	r2, [r3, #0]
 8005e66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e6a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005e6e:	2202      	movs	r2, #2
 8005e70:	601a      	str	r2, [r3, #0]
 8005e72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e76:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	fa93 f2a3 	rbit	r2, r3
 8005e80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e84:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8005e88:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e8a:	4b69      	ldr	r3, [pc, #420]	@ (8006030 <HAL_RCC_OscConfig+0x99c>)
 8005e8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e92:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005e96:	2102      	movs	r1, #2
 8005e98:	6019      	str	r1, [r3, #0]
 8005e9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e9e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	fa93 f1a3 	rbit	r1, r3
 8005ea8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005eac:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005eb0:	6019      	str	r1, [r3, #0]
  return result;
 8005eb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005eb6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	fab3 f383 	clz	r3, r3
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	f003 031f 	and.w	r3, r3, #31
 8005ecc:	2101      	movs	r1, #1
 8005ece:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d197      	bne.n	8005e08 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ed8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005edc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0304 	and.w	r3, r3, #4
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f000 819e 	beq.w	800622a <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ef4:	4b4e      	ldr	r3, [pc, #312]	@ (8006030 <HAL_RCC_OscConfig+0x99c>)
 8005ef6:	69db      	ldr	r3, [r3, #28]
 8005ef8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d116      	bne.n	8005f2e <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f00:	4b4b      	ldr	r3, [pc, #300]	@ (8006030 <HAL_RCC_OscConfig+0x99c>)
 8005f02:	69db      	ldr	r3, [r3, #28]
 8005f04:	4a4a      	ldr	r2, [pc, #296]	@ (8006030 <HAL_RCC_OscConfig+0x99c>)
 8005f06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f0a:	61d3      	str	r3, [r2, #28]
 8005f0c:	4b48      	ldr	r3, [pc, #288]	@ (8006030 <HAL_RCC_OscConfig+0x99c>)
 8005f0e:	69db      	ldr	r3, [r3, #28]
 8005f10:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8005f14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f18:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8005f1c:	601a      	str	r2, [r3, #0]
 8005f1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f22:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8005f26:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f2e:	4b42      	ldr	r3, [pc, #264]	@ (8006038 <HAL_RCC_OscConfig+0x9a4>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d11a      	bne.n	8005f70 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f3a:	4b3f      	ldr	r3, [pc, #252]	@ (8006038 <HAL_RCC_OscConfig+0x9a4>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a3e      	ldr	r2, [pc, #248]	@ (8006038 <HAL_RCC_OscConfig+0x9a4>)
 8005f40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f44:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f46:	f7fc fa0d 	bl	8002364 <HAL_GetTick>
 8005f4a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f4e:	e009      	b.n	8005f64 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f50:	f7fc fa08 	bl	8002364 <HAL_GetTick>
 8005f54:	4602      	mov	r2, r0
 8005f56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	2b64      	cmp	r3, #100	@ 0x64
 8005f5e:	d901      	bls.n	8005f64 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e39e      	b.n	80066a2 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f64:	4b34      	ldr	r3, [pc, #208]	@ (8006038 <HAL_RCC_OscConfig+0x9a4>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d0ef      	beq.n	8005f50 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f74:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d106      	bne.n	8005f8e <HAL_RCC_OscConfig+0x8fa>
 8005f80:	4b2b      	ldr	r3, [pc, #172]	@ (8006030 <HAL_RCC_OscConfig+0x99c>)
 8005f82:	6a1b      	ldr	r3, [r3, #32]
 8005f84:	4a2a      	ldr	r2, [pc, #168]	@ (8006030 <HAL_RCC_OscConfig+0x99c>)
 8005f86:	f043 0301 	orr.w	r3, r3, #1
 8005f8a:	6213      	str	r3, [r2, #32]
 8005f8c:	e035      	b.n	8005ffa <HAL_RCC_OscConfig+0x966>
 8005f8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f92:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10c      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x924>
 8005f9e:	4b24      	ldr	r3, [pc, #144]	@ (8006030 <HAL_RCC_OscConfig+0x99c>)
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	4a23      	ldr	r2, [pc, #140]	@ (8006030 <HAL_RCC_OscConfig+0x99c>)
 8005fa4:	f023 0301 	bic.w	r3, r3, #1
 8005fa8:	6213      	str	r3, [r2, #32]
 8005faa:	4b21      	ldr	r3, [pc, #132]	@ (8006030 <HAL_RCC_OscConfig+0x99c>)
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	4a20      	ldr	r2, [pc, #128]	@ (8006030 <HAL_RCC_OscConfig+0x99c>)
 8005fb0:	f023 0304 	bic.w	r3, r3, #4
 8005fb4:	6213      	str	r3, [r2, #32]
 8005fb6:	e020      	b.n	8005ffa <HAL_RCC_OscConfig+0x966>
 8005fb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005fbc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	2b05      	cmp	r3, #5
 8005fc6:	d10c      	bne.n	8005fe2 <HAL_RCC_OscConfig+0x94e>
 8005fc8:	4b19      	ldr	r3, [pc, #100]	@ (8006030 <HAL_RCC_OscConfig+0x99c>)
 8005fca:	6a1b      	ldr	r3, [r3, #32]
 8005fcc:	4a18      	ldr	r2, [pc, #96]	@ (8006030 <HAL_RCC_OscConfig+0x99c>)
 8005fce:	f043 0304 	orr.w	r3, r3, #4
 8005fd2:	6213      	str	r3, [r2, #32]
 8005fd4:	4b16      	ldr	r3, [pc, #88]	@ (8006030 <HAL_RCC_OscConfig+0x99c>)
 8005fd6:	6a1b      	ldr	r3, [r3, #32]
 8005fd8:	4a15      	ldr	r2, [pc, #84]	@ (8006030 <HAL_RCC_OscConfig+0x99c>)
 8005fda:	f043 0301 	orr.w	r3, r3, #1
 8005fde:	6213      	str	r3, [r2, #32]
 8005fe0:	e00b      	b.n	8005ffa <HAL_RCC_OscConfig+0x966>
 8005fe2:	4b13      	ldr	r3, [pc, #76]	@ (8006030 <HAL_RCC_OscConfig+0x99c>)
 8005fe4:	6a1b      	ldr	r3, [r3, #32]
 8005fe6:	4a12      	ldr	r2, [pc, #72]	@ (8006030 <HAL_RCC_OscConfig+0x99c>)
 8005fe8:	f023 0301 	bic.w	r3, r3, #1
 8005fec:	6213      	str	r3, [r2, #32]
 8005fee:	4b10      	ldr	r3, [pc, #64]	@ (8006030 <HAL_RCC_OscConfig+0x99c>)
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	4a0f      	ldr	r2, [pc, #60]	@ (8006030 <HAL_RCC_OscConfig+0x99c>)
 8005ff4:	f023 0304 	bic.w	r3, r3, #4
 8005ff8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ffa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ffe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	2b00      	cmp	r3, #0
 8006008:	f000 8087 	beq.w	800611a <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800600c:	f7fc f9aa 	bl	8002364 <HAL_GetTick>
 8006010:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006014:	e012      	b.n	800603c <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006016:	f7fc f9a5 	bl	8002364 <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006026:	4293      	cmp	r3, r2
 8006028:	d908      	bls.n	800603c <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e339      	b.n	80066a2 <HAL_RCC_OscConfig+0x100e>
 800602e:	bf00      	nop
 8006030:	40021000 	.word	0x40021000
 8006034:	10908120 	.word	0x10908120
 8006038:	40007000 	.word	0x40007000
 800603c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006040:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8006044:	2202      	movs	r2, #2
 8006046:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006048:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800604c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	fa93 f2a3 	rbit	r2, r3
 8006056:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800605a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800605e:	601a      	str	r2, [r3, #0]
 8006060:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006064:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006068:	2202      	movs	r2, #2
 800606a:	601a      	str	r2, [r3, #0]
 800606c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006070:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	fa93 f2a3 	rbit	r2, r3
 800607a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800607e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006082:	601a      	str	r2, [r3, #0]
  return result;
 8006084:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006088:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800608c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800608e:	fab3 f383 	clz	r3, r3
 8006092:	b2db      	uxtb	r3, r3
 8006094:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d102      	bne.n	80060a4 <HAL_RCC_OscConfig+0xa10>
 800609e:	4b98      	ldr	r3, [pc, #608]	@ (8006300 <HAL_RCC_OscConfig+0xc6c>)
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	e013      	b.n	80060cc <HAL_RCC_OscConfig+0xa38>
 80060a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060a8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80060ac:	2202      	movs	r2, #2
 80060ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060b4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	fa93 f2a3 	rbit	r2, r3
 80060be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060c2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80060c6:	601a      	str	r2, [r3, #0]
 80060c8:	4b8d      	ldr	r3, [pc, #564]	@ (8006300 <HAL_RCC_OscConfig+0xc6c>)
 80060ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060cc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80060d0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80060d4:	2102      	movs	r1, #2
 80060d6:	6011      	str	r1, [r2, #0]
 80060d8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80060dc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80060e0:	6812      	ldr	r2, [r2, #0]
 80060e2:	fa92 f1a2 	rbit	r1, r2
 80060e6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80060ea:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80060ee:	6011      	str	r1, [r2, #0]
  return result;
 80060f0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80060f4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80060f8:	6812      	ldr	r2, [r2, #0]
 80060fa:	fab2 f282 	clz	r2, r2
 80060fe:	b2d2      	uxtb	r2, r2
 8006100:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006104:	b2d2      	uxtb	r2, r2
 8006106:	f002 021f 	and.w	r2, r2, #31
 800610a:	2101      	movs	r1, #1
 800610c:	fa01 f202 	lsl.w	r2, r1, r2
 8006110:	4013      	ands	r3, r2
 8006112:	2b00      	cmp	r3, #0
 8006114:	f43f af7f 	beq.w	8006016 <HAL_RCC_OscConfig+0x982>
 8006118:	e07d      	b.n	8006216 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800611a:	f7fc f923 	bl	8002364 <HAL_GetTick>
 800611e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006122:	e00b      	b.n	800613c <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006124:	f7fc f91e 	bl	8002364 <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006134:	4293      	cmp	r3, r2
 8006136:	d901      	bls.n	800613c <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	e2b2      	b.n	80066a2 <HAL_RCC_OscConfig+0x100e>
 800613c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006140:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8006144:	2202      	movs	r2, #2
 8006146:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006148:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800614c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	fa93 f2a3 	rbit	r2, r3
 8006156:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800615a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800615e:	601a      	str	r2, [r3, #0]
 8006160:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006164:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8006168:	2202      	movs	r2, #2
 800616a:	601a      	str	r2, [r3, #0]
 800616c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006170:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	fa93 f2a3 	rbit	r2, r3
 800617a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800617e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8006182:	601a      	str	r2, [r3, #0]
  return result;
 8006184:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006188:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800618c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800618e:	fab3 f383 	clz	r3, r3
 8006192:	b2db      	uxtb	r3, r3
 8006194:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8006198:	b2db      	uxtb	r3, r3
 800619a:	2b00      	cmp	r3, #0
 800619c:	d102      	bne.n	80061a4 <HAL_RCC_OscConfig+0xb10>
 800619e:	4b58      	ldr	r3, [pc, #352]	@ (8006300 <HAL_RCC_OscConfig+0xc6c>)
 80061a0:	6a1b      	ldr	r3, [r3, #32]
 80061a2:	e013      	b.n	80061cc <HAL_RCC_OscConfig+0xb38>
 80061a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80061a8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80061ac:	2202      	movs	r2, #2
 80061ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80061b4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	fa93 f2a3 	rbit	r2, r3
 80061be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80061c2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80061c6:	601a      	str	r2, [r3, #0]
 80061c8:	4b4d      	ldr	r3, [pc, #308]	@ (8006300 <HAL_RCC_OscConfig+0xc6c>)
 80061ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061cc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80061d0:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80061d4:	2102      	movs	r1, #2
 80061d6:	6011      	str	r1, [r2, #0]
 80061d8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80061dc:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80061e0:	6812      	ldr	r2, [r2, #0]
 80061e2:	fa92 f1a2 	rbit	r1, r2
 80061e6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80061ea:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80061ee:	6011      	str	r1, [r2, #0]
  return result;
 80061f0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80061f4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80061f8:	6812      	ldr	r2, [r2, #0]
 80061fa:	fab2 f282 	clz	r2, r2
 80061fe:	b2d2      	uxtb	r2, r2
 8006200:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006204:	b2d2      	uxtb	r2, r2
 8006206:	f002 021f 	and.w	r2, r2, #31
 800620a:	2101      	movs	r1, #1
 800620c:	fa01 f202 	lsl.w	r2, r1, r2
 8006210:	4013      	ands	r3, r2
 8006212:	2b00      	cmp	r3, #0
 8006214:	d186      	bne.n	8006124 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006216:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800621a:	2b01      	cmp	r3, #1
 800621c:	d105      	bne.n	800622a <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800621e:	4b38      	ldr	r3, [pc, #224]	@ (8006300 <HAL_RCC_OscConfig+0xc6c>)
 8006220:	69db      	ldr	r3, [r3, #28]
 8006222:	4a37      	ldr	r2, [pc, #220]	@ (8006300 <HAL_RCC_OscConfig+0xc6c>)
 8006224:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006228:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800622a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800622e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	69db      	ldr	r3, [r3, #28]
 8006236:	2b00      	cmp	r3, #0
 8006238:	f000 8232 	beq.w	80066a0 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800623c:	4b30      	ldr	r3, [pc, #192]	@ (8006300 <HAL_RCC_OscConfig+0xc6c>)
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	f003 030c 	and.w	r3, r3, #12
 8006244:	2b08      	cmp	r3, #8
 8006246:	f000 8201 	beq.w	800664c <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800624a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800624e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	69db      	ldr	r3, [r3, #28]
 8006256:	2b02      	cmp	r3, #2
 8006258:	f040 8157 	bne.w	800650a <HAL_RCC_OscConfig+0xe76>
 800625c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006260:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8006264:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006268:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800626a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800626e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	fa93 f2a3 	rbit	r2, r3
 8006278:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800627c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8006280:	601a      	str	r2, [r3, #0]
  return result;
 8006282:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006286:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800628a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800628c:	fab3 f383 	clz	r3, r3
 8006290:	b2db      	uxtb	r3, r3
 8006292:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006296:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	461a      	mov	r2, r3
 800629e:	2300      	movs	r3, #0
 80062a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062a2:	f7fc f85f 	bl	8002364 <HAL_GetTick>
 80062a6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062aa:	e009      	b.n	80062c0 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062ac:	f7fc f85a 	bl	8002364 <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d901      	bls.n	80062c0 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	e1f0      	b.n	80066a2 <HAL_RCC_OscConfig+0x100e>
 80062c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062c4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80062c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80062cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062d2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	fa93 f2a3 	rbit	r2, r3
 80062dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062e0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80062e4:	601a      	str	r2, [r3, #0]
  return result;
 80062e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062ea:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80062ee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062f0:	fab3 f383 	clz	r3, r3
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b3f      	cmp	r3, #63	@ 0x3f
 80062f8:	d804      	bhi.n	8006304 <HAL_RCC_OscConfig+0xc70>
 80062fa:	4b01      	ldr	r3, [pc, #4]	@ (8006300 <HAL_RCC_OscConfig+0xc6c>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	e029      	b.n	8006354 <HAL_RCC_OscConfig+0xcc0>
 8006300:	40021000 	.word	0x40021000
 8006304:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006308:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800630c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006310:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006312:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006316:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	fa93 f2a3 	rbit	r2, r3
 8006320:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006324:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8006328:	601a      	str	r2, [r3, #0]
 800632a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800632e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8006332:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006336:	601a      	str	r2, [r3, #0]
 8006338:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800633c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	fa93 f2a3 	rbit	r2, r3
 8006346:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800634a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800634e:	601a      	str	r2, [r3, #0]
 8006350:	4bc3      	ldr	r3, [pc, #780]	@ (8006660 <HAL_RCC_OscConfig+0xfcc>)
 8006352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006354:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006358:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800635c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006360:	6011      	str	r1, [r2, #0]
 8006362:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006366:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800636a:	6812      	ldr	r2, [r2, #0]
 800636c:	fa92 f1a2 	rbit	r1, r2
 8006370:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006374:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8006378:	6011      	str	r1, [r2, #0]
  return result;
 800637a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800637e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8006382:	6812      	ldr	r2, [r2, #0]
 8006384:	fab2 f282 	clz	r2, r2
 8006388:	b2d2      	uxtb	r2, r2
 800638a:	f042 0220 	orr.w	r2, r2, #32
 800638e:	b2d2      	uxtb	r2, r2
 8006390:	f002 021f 	and.w	r2, r2, #31
 8006394:	2101      	movs	r1, #1
 8006396:	fa01 f202 	lsl.w	r2, r1, r2
 800639a:	4013      	ands	r3, r2
 800639c:	2b00      	cmp	r3, #0
 800639e:	d185      	bne.n	80062ac <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063a0:	4baf      	ldr	r3, [pc, #700]	@ (8006660 <HAL_RCC_OscConfig+0xfcc>)
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80063a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80063b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	6a1b      	ldr	r3, [r3, #32]
 80063c0:	430b      	orrs	r3, r1
 80063c2:	49a7      	ldr	r1, [pc, #668]	@ (8006660 <HAL_RCC_OscConfig+0xfcc>)
 80063c4:	4313      	orrs	r3, r2
 80063c6:	604b      	str	r3, [r1, #4]
 80063c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063cc:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80063d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80063d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063da:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	fa93 f2a3 	rbit	r2, r3
 80063e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063e8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80063ec:	601a      	str	r2, [r3, #0]
  return result;
 80063ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063f2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80063f6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063f8:	fab3 f383 	clz	r3, r3
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006402:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	461a      	mov	r2, r3
 800640a:	2301      	movs	r3, #1
 800640c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800640e:	f7fb ffa9 	bl	8002364 <HAL_GetTick>
 8006412:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006416:	e009      	b.n	800642c <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006418:	f7fb ffa4 	bl	8002364 <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	2b02      	cmp	r3, #2
 8006426:	d901      	bls.n	800642c <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	e13a      	b.n	80066a2 <HAL_RCC_OscConfig+0x100e>
 800642c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006430:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8006434:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006438:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800643a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800643e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	fa93 f2a3 	rbit	r2, r3
 8006448:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800644c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8006450:	601a      	str	r2, [r3, #0]
  return result;
 8006452:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006456:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800645a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800645c:	fab3 f383 	clz	r3, r3
 8006460:	b2db      	uxtb	r3, r3
 8006462:	2b3f      	cmp	r3, #63	@ 0x3f
 8006464:	d802      	bhi.n	800646c <HAL_RCC_OscConfig+0xdd8>
 8006466:	4b7e      	ldr	r3, [pc, #504]	@ (8006660 <HAL_RCC_OscConfig+0xfcc>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	e027      	b.n	80064bc <HAL_RCC_OscConfig+0xe28>
 800646c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006470:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8006474:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006478:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800647a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800647e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	fa93 f2a3 	rbit	r2, r3
 8006488:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800648c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8006490:	601a      	str	r2, [r3, #0]
 8006492:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006496:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800649a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800649e:	601a      	str	r2, [r3, #0]
 80064a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064a4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	fa93 f2a3 	rbit	r2, r3
 80064ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064b2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80064b6:	601a      	str	r2, [r3, #0]
 80064b8:	4b69      	ldr	r3, [pc, #420]	@ (8006660 <HAL_RCC_OscConfig+0xfcc>)
 80064ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064bc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80064c0:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80064c4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80064c8:	6011      	str	r1, [r2, #0]
 80064ca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80064ce:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80064d2:	6812      	ldr	r2, [r2, #0]
 80064d4:	fa92 f1a2 	rbit	r1, r2
 80064d8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80064dc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80064e0:	6011      	str	r1, [r2, #0]
  return result;
 80064e2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80064e6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80064ea:	6812      	ldr	r2, [r2, #0]
 80064ec:	fab2 f282 	clz	r2, r2
 80064f0:	b2d2      	uxtb	r2, r2
 80064f2:	f042 0220 	orr.w	r2, r2, #32
 80064f6:	b2d2      	uxtb	r2, r2
 80064f8:	f002 021f 	and.w	r2, r2, #31
 80064fc:	2101      	movs	r1, #1
 80064fe:	fa01 f202 	lsl.w	r2, r1, r2
 8006502:	4013      	ands	r3, r2
 8006504:	2b00      	cmp	r3, #0
 8006506:	d087      	beq.n	8006418 <HAL_RCC_OscConfig+0xd84>
 8006508:	e0ca      	b.n	80066a0 <HAL_RCC_OscConfig+0x100c>
 800650a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800650e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006512:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006516:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006518:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800651c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	fa93 f2a3 	rbit	r2, r3
 8006526:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800652a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800652e:	601a      	str	r2, [r3, #0]
  return result;
 8006530:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006534:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8006538:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800653a:	fab3 f383 	clz	r3, r3
 800653e:	b2db      	uxtb	r3, r3
 8006540:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006544:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	461a      	mov	r2, r3
 800654c:	2300      	movs	r3, #0
 800654e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006550:	f7fb ff08 	bl	8002364 <HAL_GetTick>
 8006554:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006558:	e009      	b.n	800656e <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800655a:	f7fb ff03 	bl	8002364 <HAL_GetTick>
 800655e:	4602      	mov	r2, r0
 8006560:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	2b02      	cmp	r3, #2
 8006568:	d901      	bls.n	800656e <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e099      	b.n	80066a2 <HAL_RCC_OscConfig+0x100e>
 800656e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006572:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8006576:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800657a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800657c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006580:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	fa93 f2a3 	rbit	r2, r3
 800658a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800658e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8006592:	601a      	str	r2, [r3, #0]
  return result;
 8006594:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006598:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800659c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800659e:	fab3 f383 	clz	r3, r3
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	2b3f      	cmp	r3, #63	@ 0x3f
 80065a6:	d802      	bhi.n	80065ae <HAL_RCC_OscConfig+0xf1a>
 80065a8:	4b2d      	ldr	r3, [pc, #180]	@ (8006660 <HAL_RCC_OscConfig+0xfcc>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	e027      	b.n	80065fe <HAL_RCC_OscConfig+0xf6a>
 80065ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065b2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80065b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80065ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065c0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	fa93 f2a3 	rbit	r2, r3
 80065ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065ce:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80065d2:	601a      	str	r2, [r3, #0]
 80065d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065d8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80065dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80065e0:	601a      	str	r2, [r3, #0]
 80065e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065e6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	fa93 f2a3 	rbit	r2, r3
 80065f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065f4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80065f8:	601a      	str	r2, [r3, #0]
 80065fa:	4b19      	ldr	r3, [pc, #100]	@ (8006660 <HAL_RCC_OscConfig+0xfcc>)
 80065fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065fe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006602:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8006606:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800660a:	6011      	str	r1, [r2, #0]
 800660c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006610:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8006614:	6812      	ldr	r2, [r2, #0]
 8006616:	fa92 f1a2 	rbit	r1, r2
 800661a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800661e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8006622:	6011      	str	r1, [r2, #0]
  return result;
 8006624:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006628:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800662c:	6812      	ldr	r2, [r2, #0]
 800662e:	fab2 f282 	clz	r2, r2
 8006632:	b2d2      	uxtb	r2, r2
 8006634:	f042 0220 	orr.w	r2, r2, #32
 8006638:	b2d2      	uxtb	r2, r2
 800663a:	f002 021f 	and.w	r2, r2, #31
 800663e:	2101      	movs	r1, #1
 8006640:	fa01 f202 	lsl.w	r2, r1, r2
 8006644:	4013      	ands	r3, r2
 8006646:	2b00      	cmp	r3, #0
 8006648:	d187      	bne.n	800655a <HAL_RCC_OscConfig+0xec6>
 800664a:	e029      	b.n	80066a0 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800664c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006650:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	69db      	ldr	r3, [r3, #28]
 8006658:	2b01      	cmp	r3, #1
 800665a:	d103      	bne.n	8006664 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e020      	b.n	80066a2 <HAL_RCC_OscConfig+0x100e>
 8006660:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006664:	4b11      	ldr	r3, [pc, #68]	@ (80066ac <HAL_RCC_OscConfig+0x1018>)
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800666c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8006670:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006674:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006678:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	6a1b      	ldr	r3, [r3, #32]
 8006680:	429a      	cmp	r2, r3
 8006682:	d10b      	bne.n	800669c <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006684:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8006688:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800668c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006690:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006698:	429a      	cmp	r2, r3
 800669a:	d001      	beq.n	80066a0 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e000      	b.n	80066a2 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	40021000 	.word	0x40021000

080066b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b09e      	sub	sp, #120	@ 0x78
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80066ba:	2300      	movs	r3, #0
 80066bc:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d101      	bne.n	80066c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e154      	b.n	8006972 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066c8:	4b89      	ldr	r3, [pc, #548]	@ (80068f0 <HAL_RCC_ClockConfig+0x240>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0307 	and.w	r3, r3, #7
 80066d0:	683a      	ldr	r2, [r7, #0]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d910      	bls.n	80066f8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066d6:	4b86      	ldr	r3, [pc, #536]	@ (80068f0 <HAL_RCC_ClockConfig+0x240>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f023 0207 	bic.w	r2, r3, #7
 80066de:	4984      	ldr	r1, [pc, #528]	@ (80068f0 <HAL_RCC_ClockConfig+0x240>)
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066e6:	4b82      	ldr	r3, [pc, #520]	@ (80068f0 <HAL_RCC_ClockConfig+0x240>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 0307 	and.w	r3, r3, #7
 80066ee:	683a      	ldr	r2, [r7, #0]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d001      	beq.n	80066f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e13c      	b.n	8006972 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0302 	and.w	r3, r3, #2
 8006700:	2b00      	cmp	r3, #0
 8006702:	d008      	beq.n	8006716 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006704:	4b7b      	ldr	r3, [pc, #492]	@ (80068f4 <HAL_RCC_ClockConfig+0x244>)
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	4978      	ldr	r1, [pc, #480]	@ (80068f4 <HAL_RCC_ClockConfig+0x244>)
 8006712:	4313      	orrs	r3, r2
 8006714:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 0301 	and.w	r3, r3, #1
 800671e:	2b00      	cmp	r3, #0
 8006720:	f000 80cd 	beq.w	80068be <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	2b01      	cmp	r3, #1
 800672a:	d137      	bne.n	800679c <HAL_RCC_ClockConfig+0xec>
 800672c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006730:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006732:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006734:	fa93 f3a3 	rbit	r3, r3
 8006738:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800673a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800673c:	fab3 f383 	clz	r3, r3
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b3f      	cmp	r3, #63	@ 0x3f
 8006744:	d802      	bhi.n	800674c <HAL_RCC_ClockConfig+0x9c>
 8006746:	4b6b      	ldr	r3, [pc, #428]	@ (80068f4 <HAL_RCC_ClockConfig+0x244>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	e00f      	b.n	800676c <HAL_RCC_ClockConfig+0xbc>
 800674c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006750:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006752:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006754:	fa93 f3a3 	rbit	r3, r3
 8006758:	667b      	str	r3, [r7, #100]	@ 0x64
 800675a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800675e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006760:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006762:	fa93 f3a3 	rbit	r3, r3
 8006766:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006768:	4b62      	ldr	r3, [pc, #392]	@ (80068f4 <HAL_RCC_ClockConfig+0x244>)
 800676a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800676c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006770:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006772:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006774:	fa92 f2a2 	rbit	r2, r2
 8006778:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800677a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800677c:	fab2 f282 	clz	r2, r2
 8006780:	b2d2      	uxtb	r2, r2
 8006782:	f042 0220 	orr.w	r2, r2, #32
 8006786:	b2d2      	uxtb	r2, r2
 8006788:	f002 021f 	and.w	r2, r2, #31
 800678c:	2101      	movs	r1, #1
 800678e:	fa01 f202 	lsl.w	r2, r1, r2
 8006792:	4013      	ands	r3, r2
 8006794:	2b00      	cmp	r3, #0
 8006796:	d171      	bne.n	800687c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	e0ea      	b.n	8006972 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d137      	bne.n	8006814 <HAL_RCC_ClockConfig+0x164>
 80067a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80067a8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067ac:	fa93 f3a3 	rbit	r3, r3
 80067b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80067b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067b4:	fab3 f383 	clz	r3, r3
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80067bc:	d802      	bhi.n	80067c4 <HAL_RCC_ClockConfig+0x114>
 80067be:	4b4d      	ldr	r3, [pc, #308]	@ (80068f4 <HAL_RCC_ClockConfig+0x244>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	e00f      	b.n	80067e4 <HAL_RCC_ClockConfig+0x134>
 80067c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80067c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067cc:	fa93 f3a3 	rbit	r3, r3
 80067d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80067d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80067d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80067d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067da:	fa93 f3a3 	rbit	r3, r3
 80067de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067e0:	4b44      	ldr	r3, [pc, #272]	@ (80068f4 <HAL_RCC_ClockConfig+0x244>)
 80067e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80067e8:	63ba      	str	r2, [r7, #56]	@ 0x38
 80067ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80067ec:	fa92 f2a2 	rbit	r2, r2
 80067f0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80067f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80067f4:	fab2 f282 	clz	r2, r2
 80067f8:	b2d2      	uxtb	r2, r2
 80067fa:	f042 0220 	orr.w	r2, r2, #32
 80067fe:	b2d2      	uxtb	r2, r2
 8006800:	f002 021f 	and.w	r2, r2, #31
 8006804:	2101      	movs	r1, #1
 8006806:	fa01 f202 	lsl.w	r2, r1, r2
 800680a:	4013      	ands	r3, r2
 800680c:	2b00      	cmp	r3, #0
 800680e:	d135      	bne.n	800687c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e0ae      	b.n	8006972 <HAL_RCC_ClockConfig+0x2c2>
 8006814:	2302      	movs	r3, #2
 8006816:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800681a:	fa93 f3a3 	rbit	r3, r3
 800681e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8006820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006822:	fab3 f383 	clz	r3, r3
 8006826:	b2db      	uxtb	r3, r3
 8006828:	2b3f      	cmp	r3, #63	@ 0x3f
 800682a:	d802      	bhi.n	8006832 <HAL_RCC_ClockConfig+0x182>
 800682c:	4b31      	ldr	r3, [pc, #196]	@ (80068f4 <HAL_RCC_ClockConfig+0x244>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	e00d      	b.n	800684e <HAL_RCC_ClockConfig+0x19e>
 8006832:	2302      	movs	r3, #2
 8006834:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006838:	fa93 f3a3 	rbit	r3, r3
 800683c:	627b      	str	r3, [r7, #36]	@ 0x24
 800683e:	2302      	movs	r3, #2
 8006840:	623b      	str	r3, [r7, #32]
 8006842:	6a3b      	ldr	r3, [r7, #32]
 8006844:	fa93 f3a3 	rbit	r3, r3
 8006848:	61fb      	str	r3, [r7, #28]
 800684a:	4b2a      	ldr	r3, [pc, #168]	@ (80068f4 <HAL_RCC_ClockConfig+0x244>)
 800684c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800684e:	2202      	movs	r2, #2
 8006850:	61ba      	str	r2, [r7, #24]
 8006852:	69ba      	ldr	r2, [r7, #24]
 8006854:	fa92 f2a2 	rbit	r2, r2
 8006858:	617a      	str	r2, [r7, #20]
  return result;
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	fab2 f282 	clz	r2, r2
 8006860:	b2d2      	uxtb	r2, r2
 8006862:	f042 0220 	orr.w	r2, r2, #32
 8006866:	b2d2      	uxtb	r2, r2
 8006868:	f002 021f 	and.w	r2, r2, #31
 800686c:	2101      	movs	r1, #1
 800686e:	fa01 f202 	lsl.w	r2, r1, r2
 8006872:	4013      	ands	r3, r2
 8006874:	2b00      	cmp	r3, #0
 8006876:	d101      	bne.n	800687c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e07a      	b.n	8006972 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800687c:	4b1d      	ldr	r3, [pc, #116]	@ (80068f4 <HAL_RCC_ClockConfig+0x244>)
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f023 0203 	bic.w	r2, r3, #3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	491a      	ldr	r1, [pc, #104]	@ (80068f4 <HAL_RCC_ClockConfig+0x244>)
 800688a:	4313      	orrs	r3, r2
 800688c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800688e:	f7fb fd69 	bl	8002364 <HAL_GetTick>
 8006892:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006894:	e00a      	b.n	80068ac <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006896:	f7fb fd65 	bl	8002364 <HAL_GetTick>
 800689a:	4602      	mov	r2, r0
 800689c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d901      	bls.n	80068ac <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80068a8:	2303      	movs	r3, #3
 80068aa:	e062      	b.n	8006972 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068ac:	4b11      	ldr	r3, [pc, #68]	@ (80068f4 <HAL_RCC_ClockConfig+0x244>)
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	f003 020c 	and.w	r2, r3, #12
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d1eb      	bne.n	8006896 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80068be:	4b0c      	ldr	r3, [pc, #48]	@ (80068f0 <HAL_RCC_ClockConfig+0x240>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0307 	and.w	r3, r3, #7
 80068c6:	683a      	ldr	r2, [r7, #0]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d215      	bcs.n	80068f8 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068cc:	4b08      	ldr	r3, [pc, #32]	@ (80068f0 <HAL_RCC_ClockConfig+0x240>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f023 0207 	bic.w	r2, r3, #7
 80068d4:	4906      	ldr	r1, [pc, #24]	@ (80068f0 <HAL_RCC_ClockConfig+0x240>)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	4313      	orrs	r3, r2
 80068da:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068dc:	4b04      	ldr	r3, [pc, #16]	@ (80068f0 <HAL_RCC_ClockConfig+0x240>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0307 	and.w	r3, r3, #7
 80068e4:	683a      	ldr	r2, [r7, #0]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d006      	beq.n	80068f8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e041      	b.n	8006972 <HAL_RCC_ClockConfig+0x2c2>
 80068ee:	bf00      	nop
 80068f0:	40022000 	.word	0x40022000
 80068f4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 0304 	and.w	r3, r3, #4
 8006900:	2b00      	cmp	r3, #0
 8006902:	d008      	beq.n	8006916 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006904:	4b1d      	ldr	r3, [pc, #116]	@ (800697c <HAL_RCC_ClockConfig+0x2cc>)
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	491a      	ldr	r1, [pc, #104]	@ (800697c <HAL_RCC_ClockConfig+0x2cc>)
 8006912:	4313      	orrs	r3, r2
 8006914:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 0308 	and.w	r3, r3, #8
 800691e:	2b00      	cmp	r3, #0
 8006920:	d009      	beq.n	8006936 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006922:	4b16      	ldr	r3, [pc, #88]	@ (800697c <HAL_RCC_ClockConfig+0x2cc>)
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	00db      	lsls	r3, r3, #3
 8006930:	4912      	ldr	r1, [pc, #72]	@ (800697c <HAL_RCC_ClockConfig+0x2cc>)
 8006932:	4313      	orrs	r3, r2
 8006934:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006936:	f000 f829 	bl	800698c <HAL_RCC_GetSysClockFreq>
 800693a:	4601      	mov	r1, r0
 800693c:	4b0f      	ldr	r3, [pc, #60]	@ (800697c <HAL_RCC_ClockConfig+0x2cc>)
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006944:	22f0      	movs	r2, #240	@ 0xf0
 8006946:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	fa92 f2a2 	rbit	r2, r2
 800694e:	60fa      	str	r2, [r7, #12]
  return result;
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	fab2 f282 	clz	r2, r2
 8006956:	b2d2      	uxtb	r2, r2
 8006958:	40d3      	lsrs	r3, r2
 800695a:	4a09      	ldr	r2, [pc, #36]	@ (8006980 <HAL_RCC_ClockConfig+0x2d0>)
 800695c:	5cd3      	ldrb	r3, [r2, r3]
 800695e:	fa21 f303 	lsr.w	r3, r1, r3
 8006962:	4a08      	ldr	r2, [pc, #32]	@ (8006984 <HAL_RCC_ClockConfig+0x2d4>)
 8006964:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006966:	4b08      	ldr	r3, [pc, #32]	@ (8006988 <HAL_RCC_ClockConfig+0x2d8>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4618      	mov	r0, r3
 800696c:	f7fb fcb6 	bl	80022dc <HAL_InitTick>
  
  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3778      	adds	r7, #120	@ 0x78
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	40021000 	.word	0x40021000
 8006980:	08008b84 	.word	0x08008b84
 8006984:	20000000 	.word	0x20000000
 8006988:	20000004 	.word	0x20000004

0800698c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800698c:	b480      	push	{r7}
 800698e:	b087      	sub	sp, #28
 8006990:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006992:	2300      	movs	r3, #0
 8006994:	60fb      	str	r3, [r7, #12]
 8006996:	2300      	movs	r3, #0
 8006998:	60bb      	str	r3, [r7, #8]
 800699a:	2300      	movs	r3, #0
 800699c:	617b      	str	r3, [r7, #20]
 800699e:	2300      	movs	r3, #0
 80069a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80069a2:	2300      	movs	r3, #0
 80069a4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80069a6:	4b1e      	ldr	r3, [pc, #120]	@ (8006a20 <HAL_RCC_GetSysClockFreq+0x94>)
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f003 030c 	and.w	r3, r3, #12
 80069b2:	2b04      	cmp	r3, #4
 80069b4:	d002      	beq.n	80069bc <HAL_RCC_GetSysClockFreq+0x30>
 80069b6:	2b08      	cmp	r3, #8
 80069b8:	d003      	beq.n	80069c2 <HAL_RCC_GetSysClockFreq+0x36>
 80069ba:	e026      	b.n	8006a0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80069bc:	4b19      	ldr	r3, [pc, #100]	@ (8006a24 <HAL_RCC_GetSysClockFreq+0x98>)
 80069be:	613b      	str	r3, [r7, #16]
      break;
 80069c0:	e026      	b.n	8006a10 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	0c9b      	lsrs	r3, r3, #18
 80069c6:	f003 030f 	and.w	r3, r3, #15
 80069ca:	4a17      	ldr	r2, [pc, #92]	@ (8006a28 <HAL_RCC_GetSysClockFreq+0x9c>)
 80069cc:	5cd3      	ldrb	r3, [r2, r3]
 80069ce:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80069d0:	4b13      	ldr	r3, [pc, #76]	@ (8006a20 <HAL_RCC_GetSysClockFreq+0x94>)
 80069d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069d4:	f003 030f 	and.w	r3, r3, #15
 80069d8:	4a14      	ldr	r2, [pc, #80]	@ (8006a2c <HAL_RCC_GetSysClockFreq+0xa0>)
 80069da:	5cd3      	ldrb	r3, [r2, r3]
 80069dc:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d008      	beq.n	80069fa <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80069e8:	4a0e      	ldr	r2, [pc, #56]	@ (8006a24 <HAL_RCC_GetSysClockFreq+0x98>)
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	fb02 f303 	mul.w	r3, r2, r3
 80069f6:	617b      	str	r3, [r7, #20]
 80069f8:	e004      	b.n	8006a04 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a0c      	ldr	r2, [pc, #48]	@ (8006a30 <HAL_RCC_GetSysClockFreq+0xa4>)
 80069fe:	fb02 f303 	mul.w	r3, r2, r3
 8006a02:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	613b      	str	r3, [r7, #16]
      break;
 8006a08:	e002      	b.n	8006a10 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006a0a:	4b06      	ldr	r3, [pc, #24]	@ (8006a24 <HAL_RCC_GetSysClockFreq+0x98>)
 8006a0c:	613b      	str	r3, [r7, #16]
      break;
 8006a0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a10:	693b      	ldr	r3, [r7, #16]
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	371c      	adds	r7, #28
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	40021000 	.word	0x40021000
 8006a24:	007a1200 	.word	0x007a1200
 8006a28:	08008b9c 	.word	0x08008b9c
 8006a2c:	08008bac 	.word	0x08008bac
 8006a30:	003d0900 	.word	0x003d0900

08006a34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a34:	b480      	push	{r7}
 8006a36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a38:	4b03      	ldr	r3, [pc, #12]	@ (8006a48 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	20000000 	.word	0x20000000

08006a4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006a52:	f7ff ffef 	bl	8006a34 <HAL_RCC_GetHCLKFreq>
 8006a56:	4601      	mov	r1, r0
 8006a58:	4b0b      	ldr	r3, [pc, #44]	@ (8006a88 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006a60:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8006a64:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	fa92 f2a2 	rbit	r2, r2
 8006a6c:	603a      	str	r2, [r7, #0]
  return result;
 8006a6e:	683a      	ldr	r2, [r7, #0]
 8006a70:	fab2 f282 	clz	r2, r2
 8006a74:	b2d2      	uxtb	r2, r2
 8006a76:	40d3      	lsrs	r3, r2
 8006a78:	4a04      	ldr	r2, [pc, #16]	@ (8006a8c <HAL_RCC_GetPCLK1Freq+0x40>)
 8006a7a:	5cd3      	ldrb	r3, [r2, r3]
 8006a7c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006a80:	4618      	mov	r0, r3
 8006a82:	3708      	adds	r7, #8
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	40021000 	.word	0x40021000
 8006a8c:	08008b94 	.word	0x08008b94

08006a90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006a96:	f7ff ffcd 	bl	8006a34 <HAL_RCC_GetHCLKFreq>
 8006a9a:	4601      	mov	r1, r0
 8006a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8006acc <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8006aa4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8006aa8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	fa92 f2a2 	rbit	r2, r2
 8006ab0:	603a      	str	r2, [r7, #0]
  return result;
 8006ab2:	683a      	ldr	r2, [r7, #0]
 8006ab4:	fab2 f282 	clz	r2, r2
 8006ab8:	b2d2      	uxtb	r2, r2
 8006aba:	40d3      	lsrs	r3, r2
 8006abc:	4a04      	ldr	r2, [pc, #16]	@ (8006ad0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8006abe:	5cd3      	ldrb	r3, [r2, r3]
 8006ac0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3708      	adds	r7, #8
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	40021000 	.word	0x40021000
 8006ad0:	08008b94 	.word	0x08008b94

08006ad4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b092      	sub	sp, #72	@ 0x48
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006adc:	2300      	movs	r3, #0
 8006ade:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f000 80cb 	beq.w	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x1ba>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006af8:	4b85      	ldr	r3, [pc, #532]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8006afa:	69db      	ldr	r3, [r3, #28]
 8006afc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d10e      	bne.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b04:	4b82      	ldr	r3, [pc, #520]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8006b06:	69db      	ldr	r3, [r3, #28]
 8006b08:	4a81      	ldr	r2, [pc, #516]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8006b0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b0e:	61d3      	str	r3, [r2, #28]
 8006b10:	4b7f      	ldr	r3, [pc, #508]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8006b12:	69db      	ldr	r3, [r3, #28]
 8006b14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b18:	60bb      	str	r3, [r7, #8]
 8006b1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b22:	4b7c      	ldr	r3, [pc, #496]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d118      	bne.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b2e:	4b79      	ldr	r3, [pc, #484]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a78      	ldr	r2, [pc, #480]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006b34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b38:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b3a:	f7fb fc13 	bl	8002364 <HAL_GetTick>
 8006b3e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b40:	e008      	b.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b42:	f7fb fc0f 	bl	8002364 <HAL_GetTick>
 8006b46:	4602      	mov	r2, r0
 8006b48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	2b64      	cmp	r3, #100	@ 0x64
 8006b4e:	d901      	bls.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e0d9      	b.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x234>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b54:	4b6f      	ldr	r3, [pc, #444]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d0f0      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b60:	4b6b      	ldr	r3, [pc, #428]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8006b62:	6a1b      	ldr	r3, [r3, #32]
 8006b64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d07b      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b78:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d074      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b7e:	4b64      	ldr	r3, [pc, #400]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8006b80:	6a1b      	ldr	r3, [r3, #32]
 8006b82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b88:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006b8c:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b90:	fa93 f3a3 	rbit	r3, r3
 8006b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8006b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b98:	fab3 f383 	clz	r3, r3
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	4b5d      	ldr	r3, [pc, #372]	@ (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006ba2:	4413      	add	r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	2301      	movs	r3, #1
 8006baa:	6013      	str	r3, [r2, #0]
 8006bac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006bb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb4:	fa93 f3a3 	rbit	r3, r3
 8006bb8:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8006bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006bbc:	fab3 f383 	clz	r3, r3
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	4b54      	ldr	r3, [pc, #336]	@ (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006bc6:	4413      	add	r3, r2
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	461a      	mov	r2, r3
 8006bcc:	2300      	movs	r3, #0
 8006bce:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006bd0:	4a4f      	ldr	r2, [pc, #316]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8006bd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bd4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006bd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bd8:	f003 0301 	and.w	r3, r3, #1
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d043      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006be0:	f7fb fbc0 	bl	8002364 <HAL_GetTick>
 8006be4:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006be6:	e00a      	b.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006be8:	f7fb fbbc 	bl	8002364 <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d901      	bls.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e084      	b.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006bfe:	2302      	movs	r3, #2
 8006c00:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c04:	fa93 f3a3 	rbit	r3, r3
 8006c08:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c0a:	2302      	movs	r3, #2
 8006c0c:	623b      	str	r3, [r7, #32]
 8006c0e:	6a3b      	ldr	r3, [r7, #32]
 8006c10:	fa93 f3a3 	rbit	r3, r3
 8006c14:	61fb      	str	r3, [r7, #28]
  return result;
 8006c16:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c18:	fab3 f383 	clz	r3, r3
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d102      	bne.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006c28:	4b39      	ldr	r3, [pc, #228]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8006c2a:	6a1b      	ldr	r3, [r3, #32]
 8006c2c:	e007      	b.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8006c2e:	2302      	movs	r3, #2
 8006c30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	fa93 f3a3 	rbit	r3, r3
 8006c38:	617b      	str	r3, [r7, #20]
 8006c3a:	4b35      	ldr	r3, [pc, #212]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8006c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c3e:	2202      	movs	r2, #2
 8006c40:	613a      	str	r2, [r7, #16]
 8006c42:	693a      	ldr	r2, [r7, #16]
 8006c44:	fa92 f2a2 	rbit	r2, r2
 8006c48:	60fa      	str	r2, [r7, #12]
  return result;
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	fab2 f282 	clz	r2, r2
 8006c50:	b2d2      	uxtb	r2, r2
 8006c52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c56:	b2d2      	uxtb	r2, r2
 8006c58:	f002 021f 	and.w	r2, r2, #31
 8006c5c:	2101      	movs	r1, #1
 8006c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8006c62:	4013      	ands	r3, r2
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d0bf      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006c68:	4b29      	ldr	r3, [pc, #164]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8006c6a:	6a1b      	ldr	r3, [r3, #32]
 8006c6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	4926      	ldr	r1, [pc, #152]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8006c76:	4313      	orrs	r3, r2
 8006c78:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006c7a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d105      	bne.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c82:	4b23      	ldr	r3, [pc, #140]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8006c84:	69db      	ldr	r3, [r3, #28]
 8006c86:	4a22      	ldr	r2, [pc, #136]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8006c88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c8c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0301 	and.w	r3, r3, #1
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d008      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8006c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c9e:	f023 0203 	bic.w	r2, r3, #3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	491a      	ldr	r1, [pc, #104]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0320 	and.w	r3, r3, #32
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d008      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006cb8:	4b15      	ldr	r3, [pc, #84]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8006cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cbc:	f023 0210 	bic.w	r2, r3, #16
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	4912      	ldr	r1, [pc, #72]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d008      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8006cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cda:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	490b      	ldr	r1, [pc, #44]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d008      	beq.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006cf4:	4b06      	ldr	r3, [pc, #24]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8006cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cf8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	695b      	ldr	r3, [r3, #20]
 8006d00:	4903      	ldr	r1, [pc, #12]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8006d02:	4313      	orrs	r3, r2
 8006d04:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3748      	adds	r7, #72	@ 0x48
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	40021000 	.word	0x40021000
 8006d14:	40007000 	.word	0x40007000
 8006d18:	10908100 	.word	0x10908100

08006d1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d101      	bne.n	8006d2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e049      	b.n	8006dc2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d106      	bne.n	8006d48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f7fb f8da 	bl	8001efc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	3304      	adds	r3, #4
 8006d58:	4619      	mov	r1, r3
 8006d5a:	4610      	mov	r0, r2
 8006d5c:	f000 fa86 	bl	800726c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3708      	adds	r7, #8
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
	...

08006dcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b085      	sub	sp, #20
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d001      	beq.n	8006de4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e040      	b.n	8006e66 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2202      	movs	r2, #2
 8006de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68da      	ldr	r2, [r3, #12]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f042 0201 	orr.w	r2, r2, #1
 8006dfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a1c      	ldr	r2, [pc, #112]	@ (8006e74 <HAL_TIM_Base_Start_IT+0xa8>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d00e      	beq.n	8006e24 <HAL_TIM_Base_Start_IT+0x58>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e0e:	d009      	beq.n	8006e24 <HAL_TIM_Base_Start_IT+0x58>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a18      	ldr	r2, [pc, #96]	@ (8006e78 <HAL_TIM_Base_Start_IT+0xac>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d004      	beq.n	8006e24 <HAL_TIM_Base_Start_IT+0x58>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a17      	ldr	r2, [pc, #92]	@ (8006e7c <HAL_TIM_Base_Start_IT+0xb0>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d115      	bne.n	8006e50 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	689a      	ldr	r2, [r3, #8]
 8006e2a:	4b15      	ldr	r3, [pc, #84]	@ (8006e80 <HAL_TIM_Base_Start_IT+0xb4>)
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2b06      	cmp	r3, #6
 8006e34:	d015      	beq.n	8006e62 <HAL_TIM_Base_Start_IT+0x96>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e3c:	d011      	beq.n	8006e62 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f042 0201 	orr.w	r2, r2, #1
 8006e4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e4e:	e008      	b.n	8006e62 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f042 0201 	orr.w	r2, r2, #1
 8006e5e:	601a      	str	r2, [r3, #0]
 8006e60:	e000      	b.n	8006e64 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	40012c00 	.word	0x40012c00
 8006e78:	40000400 	.word	0x40000400
 8006e7c:	40014000 	.word	0x40014000
 8006e80:	00010007 	.word	0x00010007

08006e84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	f003 0302 	and.w	r3, r3, #2
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d020      	beq.n	8006ee8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f003 0302 	and.w	r3, r3, #2
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d01b      	beq.n	8006ee8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f06f 0202 	mvn.w	r2, #2
 8006eb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	f003 0303 	and.w	r3, r3, #3
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d003      	beq.n	8006ed6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 f9ad 	bl	800722e <HAL_TIM_IC_CaptureCallback>
 8006ed4:	e005      	b.n	8006ee2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f99f 	bl	800721a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 f9b0 	bl	8007242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	f003 0304 	and.w	r3, r3, #4
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d020      	beq.n	8006f34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f003 0304 	and.w	r3, r3, #4
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d01b      	beq.n	8006f34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f06f 0204 	mvn.w	r2, #4
 8006f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2202      	movs	r2, #2
 8006f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d003      	beq.n	8006f22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 f987 	bl	800722e <HAL_TIM_IC_CaptureCallback>
 8006f20:	e005      	b.n	8006f2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 f979 	bl	800721a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 f98a 	bl	8007242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	f003 0308 	and.w	r3, r3, #8
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d020      	beq.n	8006f80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f003 0308 	and.w	r3, r3, #8
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d01b      	beq.n	8006f80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f06f 0208 	mvn.w	r2, #8
 8006f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2204      	movs	r2, #4
 8006f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	69db      	ldr	r3, [r3, #28]
 8006f5e:	f003 0303 	and.w	r3, r3, #3
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d003      	beq.n	8006f6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 f961 	bl	800722e <HAL_TIM_IC_CaptureCallback>
 8006f6c:	e005      	b.n	8006f7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 f953 	bl	800721a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 f964 	bl	8007242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	f003 0310 	and.w	r3, r3, #16
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d020      	beq.n	8006fcc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f003 0310 	and.w	r3, r3, #16
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d01b      	beq.n	8006fcc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f06f 0210 	mvn.w	r2, #16
 8006f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2208      	movs	r2, #8
 8006fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	69db      	ldr	r3, [r3, #28]
 8006faa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d003      	beq.n	8006fba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 f93b 	bl	800722e <HAL_TIM_IC_CaptureCallback>
 8006fb8:	e005      	b.n	8006fc6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 f92d 	bl	800721a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 f93e 	bl	8007242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00c      	beq.n	8006ff0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f003 0301 	and.w	r3, r3, #1
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d007      	beq.n	8006ff0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f06f 0201 	mvn.w	r2, #1
 8006fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f7f9 f902 	bl	80001f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00c      	beq.n	8007014 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007000:	2b00      	cmp	r3, #0
 8007002:	d007      	beq.n	8007014 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800700c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 fac2 	bl	8007598 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00c      	beq.n	8007038 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007024:	2b00      	cmp	r3, #0
 8007026:	d007      	beq.n	8007038 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 faba 	bl	80075ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00c      	beq.n	800705c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007048:	2b00      	cmp	r3, #0
 800704a:	d007      	beq.n	800705c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 f8fd 	bl	8007256 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	f003 0320 	and.w	r3, r3, #32
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00c      	beq.n	8007080 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f003 0320 	and.w	r3, r3, #32
 800706c:	2b00      	cmp	r3, #0
 800706e:	d007      	beq.n	8007080 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f06f 0220 	mvn.w	r2, #32
 8007078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 fa82 	bl	8007584 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007080:	bf00      	nop
 8007082:	3710      	adds	r7, #16
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007092:	2300      	movs	r3, #0
 8007094:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800709c:	2b01      	cmp	r3, #1
 800709e:	d101      	bne.n	80070a4 <HAL_TIM_ConfigClockSource+0x1c>
 80070a0:	2302      	movs	r3, #2
 80070a2:	e0b6      	b.n	8007212 <HAL_TIM_ConfigClockSource+0x18a>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2202      	movs	r2, #2
 80070b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80070c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80070ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	68ba      	ldr	r2, [r7, #8]
 80070d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070e0:	d03e      	beq.n	8007160 <HAL_TIM_ConfigClockSource+0xd8>
 80070e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070e6:	f200 8087 	bhi.w	80071f8 <HAL_TIM_ConfigClockSource+0x170>
 80070ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070ee:	f000 8086 	beq.w	80071fe <HAL_TIM_ConfigClockSource+0x176>
 80070f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070f6:	d87f      	bhi.n	80071f8 <HAL_TIM_ConfigClockSource+0x170>
 80070f8:	2b70      	cmp	r3, #112	@ 0x70
 80070fa:	d01a      	beq.n	8007132 <HAL_TIM_ConfigClockSource+0xaa>
 80070fc:	2b70      	cmp	r3, #112	@ 0x70
 80070fe:	d87b      	bhi.n	80071f8 <HAL_TIM_ConfigClockSource+0x170>
 8007100:	2b60      	cmp	r3, #96	@ 0x60
 8007102:	d050      	beq.n	80071a6 <HAL_TIM_ConfigClockSource+0x11e>
 8007104:	2b60      	cmp	r3, #96	@ 0x60
 8007106:	d877      	bhi.n	80071f8 <HAL_TIM_ConfigClockSource+0x170>
 8007108:	2b50      	cmp	r3, #80	@ 0x50
 800710a:	d03c      	beq.n	8007186 <HAL_TIM_ConfigClockSource+0xfe>
 800710c:	2b50      	cmp	r3, #80	@ 0x50
 800710e:	d873      	bhi.n	80071f8 <HAL_TIM_ConfigClockSource+0x170>
 8007110:	2b40      	cmp	r3, #64	@ 0x40
 8007112:	d058      	beq.n	80071c6 <HAL_TIM_ConfigClockSource+0x13e>
 8007114:	2b40      	cmp	r3, #64	@ 0x40
 8007116:	d86f      	bhi.n	80071f8 <HAL_TIM_ConfigClockSource+0x170>
 8007118:	2b30      	cmp	r3, #48	@ 0x30
 800711a:	d064      	beq.n	80071e6 <HAL_TIM_ConfigClockSource+0x15e>
 800711c:	2b30      	cmp	r3, #48	@ 0x30
 800711e:	d86b      	bhi.n	80071f8 <HAL_TIM_ConfigClockSource+0x170>
 8007120:	2b20      	cmp	r3, #32
 8007122:	d060      	beq.n	80071e6 <HAL_TIM_ConfigClockSource+0x15e>
 8007124:	2b20      	cmp	r3, #32
 8007126:	d867      	bhi.n	80071f8 <HAL_TIM_ConfigClockSource+0x170>
 8007128:	2b00      	cmp	r3, #0
 800712a:	d05c      	beq.n	80071e6 <HAL_TIM_ConfigClockSource+0x15e>
 800712c:	2b10      	cmp	r3, #16
 800712e:	d05a      	beq.n	80071e6 <HAL_TIM_ConfigClockSource+0x15e>
 8007130:	e062      	b.n	80071f8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007142:	f000 f991 	bl	8007468 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007154:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	609a      	str	r2, [r3, #8]
      break;
 800715e:	e04f      	b.n	8007200 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007170:	f000 f97a 	bl	8007468 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	689a      	ldr	r2, [r3, #8]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007182:	609a      	str	r2, [r3, #8]
      break;
 8007184:	e03c      	b.n	8007200 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007192:	461a      	mov	r2, r3
 8007194:	f000 f8ee 	bl	8007374 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2150      	movs	r1, #80	@ 0x50
 800719e:	4618      	mov	r0, r3
 80071a0:	f000 f947 	bl	8007432 <TIM_ITRx_SetConfig>
      break;
 80071a4:	e02c      	b.n	8007200 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80071b2:	461a      	mov	r2, r3
 80071b4:	f000 f90d 	bl	80073d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2160      	movs	r1, #96	@ 0x60
 80071be:	4618      	mov	r0, r3
 80071c0:	f000 f937 	bl	8007432 <TIM_ITRx_SetConfig>
      break;
 80071c4:	e01c      	b.n	8007200 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071d2:	461a      	mov	r2, r3
 80071d4:	f000 f8ce 	bl	8007374 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2140      	movs	r1, #64	@ 0x40
 80071de:	4618      	mov	r0, r3
 80071e0:	f000 f927 	bl	8007432 <TIM_ITRx_SetConfig>
      break;
 80071e4:	e00c      	b.n	8007200 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4619      	mov	r1, r3
 80071f0:	4610      	mov	r0, r2
 80071f2:	f000 f91e 	bl	8007432 <TIM_ITRx_SetConfig>
      break;
 80071f6:	e003      	b.n	8007200 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	73fb      	strb	r3, [r7, #15]
      break;
 80071fc:	e000      	b.n	8007200 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80071fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007210:	7bfb      	ldrb	r3, [r7, #15]
}
 8007212:	4618      	mov	r0, r3
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800721a:	b480      	push	{r7}
 800721c:	b083      	sub	sp, #12
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007222:	bf00      	nop
 8007224:	370c      	adds	r7, #12
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr

0800722e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800722e:	b480      	push	{r7}
 8007230:	b083      	sub	sp, #12
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007236:	bf00      	nop
 8007238:	370c      	adds	r7, #12
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr

08007242 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007242:	b480      	push	{r7}
 8007244:	b083      	sub	sp, #12
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800724a:	bf00      	nop
 800724c:	370c      	adds	r7, #12
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr

08007256 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007256:	b480      	push	{r7}
 8007258:	b083      	sub	sp, #12
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800725e:	bf00      	nop
 8007260:	370c      	adds	r7, #12
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr
	...

0800726c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800726c:	b480      	push	{r7}
 800726e:	b085      	sub	sp, #20
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a38      	ldr	r2, [pc, #224]	@ (8007360 <TIM_Base_SetConfig+0xf4>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d007      	beq.n	8007294 <TIM_Base_SetConfig+0x28>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800728a:	d003      	beq.n	8007294 <TIM_Base_SetConfig+0x28>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a35      	ldr	r2, [pc, #212]	@ (8007364 <TIM_Base_SetConfig+0xf8>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d108      	bne.n	80072a6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800729a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	68fa      	ldr	r2, [r7, #12]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a2d      	ldr	r2, [pc, #180]	@ (8007360 <TIM_Base_SetConfig+0xf4>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d013      	beq.n	80072d6 <TIM_Base_SetConfig+0x6a>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072b4:	d00f      	beq.n	80072d6 <TIM_Base_SetConfig+0x6a>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a2a      	ldr	r2, [pc, #168]	@ (8007364 <TIM_Base_SetConfig+0xf8>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d00b      	beq.n	80072d6 <TIM_Base_SetConfig+0x6a>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a29      	ldr	r2, [pc, #164]	@ (8007368 <TIM_Base_SetConfig+0xfc>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d007      	beq.n	80072d6 <TIM_Base_SetConfig+0x6a>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a28      	ldr	r2, [pc, #160]	@ (800736c <TIM_Base_SetConfig+0x100>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d003      	beq.n	80072d6 <TIM_Base_SetConfig+0x6a>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a27      	ldr	r2, [pc, #156]	@ (8007370 <TIM_Base_SetConfig+0x104>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d108      	bne.n	80072e8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	4313      	orrs	r3, r2
 80072e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	695b      	ldr	r3, [r3, #20]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	689a      	ldr	r2, [r3, #8]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a14      	ldr	r2, [pc, #80]	@ (8007360 <TIM_Base_SetConfig+0xf4>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d00b      	beq.n	800732c <TIM_Base_SetConfig+0xc0>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a14      	ldr	r2, [pc, #80]	@ (8007368 <TIM_Base_SetConfig+0xfc>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d007      	beq.n	800732c <TIM_Base_SetConfig+0xc0>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a13      	ldr	r2, [pc, #76]	@ (800736c <TIM_Base_SetConfig+0x100>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d003      	beq.n	800732c <TIM_Base_SetConfig+0xc0>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a12      	ldr	r2, [pc, #72]	@ (8007370 <TIM_Base_SetConfig+0x104>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d103      	bne.n	8007334 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	691a      	ldr	r2, [r3, #16]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	f003 0301 	and.w	r3, r3, #1
 8007342:	2b01      	cmp	r3, #1
 8007344:	d105      	bne.n	8007352 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	f023 0201 	bic.w	r2, r3, #1
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	611a      	str	r2, [r3, #16]
  }
}
 8007352:	bf00      	nop
 8007354:	3714      	adds	r7, #20
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	40012c00 	.word	0x40012c00
 8007364:	40000400 	.word	0x40000400
 8007368:	40014000 	.word	0x40014000
 800736c:	40014400 	.word	0x40014400
 8007370:	40014800 	.word	0x40014800

08007374 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007374:	b480      	push	{r7}
 8007376:	b087      	sub	sp, #28
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6a1b      	ldr	r3, [r3, #32]
 8007384:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6a1b      	ldr	r3, [r3, #32]
 800738a:	f023 0201 	bic.w	r2, r3, #1
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	699b      	ldr	r3, [r3, #24]
 8007396:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800739e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	011b      	lsls	r3, r3, #4
 80073a4:	693a      	ldr	r2, [r7, #16]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	f023 030a 	bic.w	r3, r3, #10
 80073b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	693a      	ldr	r2, [r7, #16]
 80073be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	697a      	ldr	r2, [r7, #20]
 80073c4:	621a      	str	r2, [r3, #32]
}
 80073c6:	bf00      	nop
 80073c8:	371c      	adds	r7, #28
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr

080073d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073d2:	b480      	push	{r7}
 80073d4:	b087      	sub	sp, #28
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	60f8      	str	r0, [r7, #12]
 80073da:	60b9      	str	r1, [r7, #8]
 80073dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6a1b      	ldr	r3, [r3, #32]
 80073e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6a1b      	ldr	r3, [r3, #32]
 80073e8:	f023 0210 	bic.w	r2, r3, #16
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80073fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	031b      	lsls	r3, r3, #12
 8007402:	693a      	ldr	r2, [r7, #16]
 8007404:	4313      	orrs	r3, r2
 8007406:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800740e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	011b      	lsls	r3, r3, #4
 8007414:	697a      	ldr	r2, [r7, #20]
 8007416:	4313      	orrs	r3, r2
 8007418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	693a      	ldr	r2, [r7, #16]
 800741e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	697a      	ldr	r2, [r7, #20]
 8007424:	621a      	str	r2, [r3, #32]
}
 8007426:	bf00      	nop
 8007428:	371c      	adds	r7, #28
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr

08007432 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007432:	b480      	push	{r7}
 8007434:	b085      	sub	sp, #20
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
 800743a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007448:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800744a:	683a      	ldr	r2, [r7, #0]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	4313      	orrs	r3, r2
 8007450:	f043 0307 	orr.w	r3, r3, #7
 8007454:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	609a      	str	r2, [r3, #8]
}
 800745c:	bf00      	nop
 800745e:	3714      	adds	r7, #20
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007468:	b480      	push	{r7}
 800746a:	b087      	sub	sp, #28
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	607a      	str	r2, [r7, #4]
 8007474:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007482:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	021a      	lsls	r2, r3, #8
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	431a      	orrs	r2, r3
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	4313      	orrs	r3, r2
 8007490:	697a      	ldr	r2, [r7, #20]
 8007492:	4313      	orrs	r3, r2
 8007494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	697a      	ldr	r2, [r7, #20]
 800749a:	609a      	str	r2, [r3, #8]
}
 800749c:	bf00      	nop
 800749e:	371c      	adds	r7, #28
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d101      	bne.n	80074c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074bc:	2302      	movs	r3, #2
 80074be:	e054      	b.n	800756a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2202      	movs	r2, #2
 80074cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a24      	ldr	r2, [pc, #144]	@ (8007578 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d108      	bne.n	80074fc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80074f0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007502:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	4313      	orrs	r3, r2
 800750c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a17      	ldr	r2, [pc, #92]	@ (8007578 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d00e      	beq.n	800753e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007528:	d009      	beq.n	800753e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a13      	ldr	r2, [pc, #76]	@ (800757c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d004      	beq.n	800753e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a11      	ldr	r2, [pc, #68]	@ (8007580 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d10c      	bne.n	8007558 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007544:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	68ba      	ldr	r2, [r7, #8]
 800754c:	4313      	orrs	r3, r2
 800754e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68ba      	ldr	r2, [r7, #8]
 8007556:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3714      	adds	r7, #20
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr
 8007576:	bf00      	nop
 8007578:	40012c00 	.word	0x40012c00
 800757c:	40000400 	.word	0x40000400
 8007580:	40014000 	.word	0x40014000

08007584 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800758c:	bf00      	nop
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075a0:	bf00      	nop
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80075b4:	bf00      	nop
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b08a      	sub	sp, #40	@ 0x28
 80075c4:	af02      	add	r7, sp, #8
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	603b      	str	r3, [r7, #0]
 80075cc:	4613      	mov	r3, r2
 80075ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80075d4:	2b20      	cmp	r3, #32
 80075d6:	d177      	bne.n	80076c8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d002      	beq.n	80075e4 <HAL_UART_Transmit+0x24>
 80075de:	88fb      	ldrh	r3, [r7, #6]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d101      	bne.n	80075e8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	e070      	b.n	80076ca <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2221      	movs	r2, #33	@ 0x21
 80075f4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075f6:	f7fa feb5 	bl	8002364 <HAL_GetTick>
 80075fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	88fa      	ldrh	r2, [r7, #6]
 8007600:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	88fa      	ldrh	r2, [r7, #6]
 8007608:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007614:	d108      	bne.n	8007628 <HAL_UART_Transmit+0x68>
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d104      	bne.n	8007628 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800761e:	2300      	movs	r3, #0
 8007620:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	61bb      	str	r3, [r7, #24]
 8007626:	e003      	b.n	8007630 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800762c:	2300      	movs	r3, #0
 800762e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007630:	e02f      	b.n	8007692 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	9300      	str	r3, [sp, #0]
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	2200      	movs	r2, #0
 800763a:	2180      	movs	r1, #128	@ 0x80
 800763c:	68f8      	ldr	r0, [r7, #12]
 800763e:	f000 fdcd 	bl	80081dc <UART_WaitOnFlagUntilTimeout>
 8007642:	4603      	mov	r3, r0
 8007644:	2b00      	cmp	r3, #0
 8007646:	d004      	beq.n	8007652 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2220      	movs	r2, #32
 800764c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800764e:	2303      	movs	r3, #3
 8007650:	e03b      	b.n	80076ca <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d10b      	bne.n	8007670 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	881a      	ldrh	r2, [r3, #0]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007664:	b292      	uxth	r2, r2
 8007666:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	3302      	adds	r3, #2
 800766c:	61bb      	str	r3, [r7, #24]
 800766e:	e007      	b.n	8007680 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	781a      	ldrb	r2, [r3, #0]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	3301      	adds	r3, #1
 800767e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007686:	b29b      	uxth	r3, r3
 8007688:	3b01      	subs	r3, #1
 800768a:	b29a      	uxth	r2, r3
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007698:	b29b      	uxth	r3, r3
 800769a:	2b00      	cmp	r3, #0
 800769c:	d1c9      	bne.n	8007632 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	9300      	str	r3, [sp, #0]
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	2200      	movs	r2, #0
 80076a6:	2140      	movs	r1, #64	@ 0x40
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f000 fd97 	bl	80081dc <UART_WaitOnFlagUntilTimeout>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d004      	beq.n	80076be <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2220      	movs	r2, #32
 80076b8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e005      	b.n	80076ca <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2220      	movs	r2, #32
 80076c2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80076c4:	2300      	movs	r3, #0
 80076c6:	e000      	b.n	80076ca <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80076c8:	2302      	movs	r3, #2
  }
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3720      	adds	r7, #32
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
	...

080076d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b0ba      	sub	sp, #232	@ 0xe8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	69db      	ldr	r3, [r3, #28]
 80076e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80076fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80076fe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007702:	4013      	ands	r3, r2
 8007704:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007708:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800770c:	2b00      	cmp	r3, #0
 800770e:	d115      	bne.n	800773c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007714:	f003 0320 	and.w	r3, r3, #32
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00f      	beq.n	800773c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800771c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007720:	f003 0320 	and.w	r3, r3, #32
 8007724:	2b00      	cmp	r3, #0
 8007726:	d009      	beq.n	800773c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800772c:	2b00      	cmp	r3, #0
 800772e:	f000 82ab 	beq.w	8007c88 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	4798      	blx	r3
      }
      return;
 800773a:	e2a5      	b.n	8007c88 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800773c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007740:	2b00      	cmp	r3, #0
 8007742:	f000 8117 	beq.w	8007974 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800774a:	f003 0301 	and.w	r3, r3, #1
 800774e:	2b00      	cmp	r3, #0
 8007750:	d106      	bne.n	8007760 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007752:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007756:	4b85      	ldr	r3, [pc, #532]	@ (800796c <HAL_UART_IRQHandler+0x298>)
 8007758:	4013      	ands	r3, r2
 800775a:	2b00      	cmp	r3, #0
 800775c:	f000 810a 	beq.w	8007974 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007764:	f003 0301 	and.w	r3, r3, #1
 8007768:	2b00      	cmp	r3, #0
 800776a:	d011      	beq.n	8007790 <HAL_UART_IRQHandler+0xbc>
 800776c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00b      	beq.n	8007790 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2201      	movs	r2, #1
 800777e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007786:	f043 0201 	orr.w	r2, r3, #1
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007794:	f003 0302 	and.w	r3, r3, #2
 8007798:	2b00      	cmp	r3, #0
 800779a:	d011      	beq.n	80077c0 <HAL_UART_IRQHandler+0xec>
 800779c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077a0:	f003 0301 	and.w	r3, r3, #1
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00b      	beq.n	80077c0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2202      	movs	r2, #2
 80077ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077b6:	f043 0204 	orr.w	r2, r3, #4
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077c4:	f003 0304 	and.w	r3, r3, #4
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d011      	beq.n	80077f0 <HAL_UART_IRQHandler+0x11c>
 80077cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077d0:	f003 0301 	and.w	r3, r3, #1
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00b      	beq.n	80077f0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2204      	movs	r2, #4
 80077de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077e6:	f043 0202 	orr.w	r2, r3, #2
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80077f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077f4:	f003 0308 	and.w	r3, r3, #8
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d017      	beq.n	800782c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80077fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007800:	f003 0320 	and.w	r3, r3, #32
 8007804:	2b00      	cmp	r3, #0
 8007806:	d105      	bne.n	8007814 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007808:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800780c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007810:	2b00      	cmp	r3, #0
 8007812:	d00b      	beq.n	800782c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2208      	movs	r2, #8
 800781a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007822:	f043 0208 	orr.w	r2, r3, #8
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800782c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007830:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007834:	2b00      	cmp	r3, #0
 8007836:	d012      	beq.n	800785e <HAL_UART_IRQHandler+0x18a>
 8007838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800783c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00c      	beq.n	800785e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800784c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007854:	f043 0220 	orr.w	r2, r3, #32
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007864:	2b00      	cmp	r3, #0
 8007866:	f000 8211 	beq.w	8007c8c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800786a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800786e:	f003 0320 	and.w	r3, r3, #32
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00d      	beq.n	8007892 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800787a:	f003 0320 	and.w	r3, r3, #32
 800787e:	2b00      	cmp	r3, #0
 8007880:	d007      	beq.n	8007892 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007886:	2b00      	cmp	r3, #0
 8007888:	d003      	beq.n	8007892 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007898:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078a6:	2b40      	cmp	r3, #64	@ 0x40
 80078a8:	d005      	beq.n	80078b6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80078aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078ae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d04f      	beq.n	8007956 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 fdc4 	bl	8008444 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078c6:	2b40      	cmp	r3, #64	@ 0x40
 80078c8:	d141      	bne.n	800794e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	3308      	adds	r3, #8
 80078d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80078d8:	e853 3f00 	ldrex	r3, [r3]
 80078dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80078e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80078e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3308      	adds	r3, #8
 80078f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80078f6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80078fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007902:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007906:	e841 2300 	strex	r3, r2, [r1]
 800790a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800790e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d1d9      	bne.n	80078ca <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800791a:	2b00      	cmp	r3, #0
 800791c:	d013      	beq.n	8007946 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007922:	4a13      	ldr	r2, [pc, #76]	@ (8007970 <HAL_UART_IRQHandler+0x29c>)
 8007924:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800792a:	4618      	mov	r0, r3
 800792c:	f7fc f80f 	bl	800394e <HAL_DMA_Abort_IT>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d017      	beq.n	8007966 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800793a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007940:	4610      	mov	r0, r2
 8007942:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007944:	e00f      	b.n	8007966 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f7fa fc64 	bl	8002214 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800794c:	e00b      	b.n	8007966 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f7fa fc60 	bl	8002214 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007954:	e007      	b.n	8007966 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f7fa fc5c 	bl	8002214 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007964:	e192      	b.n	8007c8c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007966:	bf00      	nop
    return;
 8007968:	e190      	b.n	8007c8c <HAL_UART_IRQHandler+0x5b8>
 800796a:	bf00      	nop
 800796c:	04000120 	.word	0x04000120
 8007970:	080086ef 	.word	0x080086ef

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007978:	2b01      	cmp	r3, #1
 800797a:	f040 814b 	bne.w	8007c14 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800797e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007982:	f003 0310 	and.w	r3, r3, #16
 8007986:	2b00      	cmp	r3, #0
 8007988:	f000 8144 	beq.w	8007c14 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800798c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007990:	f003 0310 	and.w	r3, r3, #16
 8007994:	2b00      	cmp	r3, #0
 8007996:	f000 813d 	beq.w	8007c14 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2210      	movs	r2, #16
 80079a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079ac:	2b40      	cmp	r3, #64	@ 0x40
 80079ae:	f040 80b5 	bne.w	8007b1c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80079be:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f000 8164 	beq.w	8007c90 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80079ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80079d2:	429a      	cmp	r2, r3
 80079d4:	f080 815c 	bcs.w	8007c90 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80079de:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079e6:	699b      	ldr	r3, [r3, #24]
 80079e8:	2b20      	cmp	r3, #32
 80079ea:	f000 8086 	beq.w	8007afa <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80079fa:	e853 3f00 	ldrex	r3, [r3]
 80079fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007a02:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a06:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a0a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	461a      	mov	r2, r3
 8007a14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007a18:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007a1c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a20:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007a24:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007a28:	e841 2300 	strex	r3, r2, [r1]
 8007a2c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007a30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d1da      	bne.n	80079ee <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	3308      	adds	r3, #8
 8007a3e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a42:	e853 3f00 	ldrex	r3, [r3]
 8007a46:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007a48:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a4a:	f023 0301 	bic.w	r3, r3, #1
 8007a4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	3308      	adds	r3, #8
 8007a58:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007a5c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007a60:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a62:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007a64:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007a68:	e841 2300 	strex	r3, r2, [r1]
 8007a6c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007a6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1e1      	bne.n	8007a38 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	3308      	adds	r3, #8
 8007a7a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a7e:	e853 3f00 	ldrex	r3, [r3]
 8007a82:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007a84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	3308      	adds	r3, #8
 8007a94:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007a98:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007a9a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007a9e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007aa0:	e841 2300 	strex	r3, r2, [r1]
 8007aa4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007aa6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d1e3      	bne.n	8007a74 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2220      	movs	r2, #32
 8007ab0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ac2:	e853 3f00 	ldrex	r3, [r3]
 8007ac6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007ac8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007aca:	f023 0310 	bic.w	r3, r3, #16
 8007ace:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007adc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ade:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ae2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ae4:	e841 2300 	strex	r3, r2, [r1]
 8007ae8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007aea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d1e4      	bne.n	8007aba <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7fb feec 	bl	80038d2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2202      	movs	r2, #2
 8007afe:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	4619      	mov	r1, r3
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f7fa fb3d 	bl	8002194 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b1a:	e0b9      	b.n	8007c90 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	1ad3      	subs	r3, r2, r3
 8007b2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	f000 80ab 	beq.w	8007c94 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8007b3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	f000 80a6 	beq.w	8007c94 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b50:	e853 3f00 	ldrex	r3, [r3]
 8007b54:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b5c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	461a      	mov	r2, r3
 8007b66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007b6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b6c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b72:	e841 2300 	strex	r3, r2, [r1]
 8007b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d1e4      	bne.n	8007b48 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	3308      	adds	r3, #8
 8007b84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b88:	e853 3f00 	ldrex	r3, [r3]
 8007b8c:	623b      	str	r3, [r7, #32]
   return(result);
 8007b8e:	6a3b      	ldr	r3, [r7, #32]
 8007b90:	f023 0301 	bic.w	r3, r3, #1
 8007b94:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	3308      	adds	r3, #8
 8007b9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007ba2:	633a      	str	r2, [r7, #48]	@ 0x30
 8007ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ba8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007baa:	e841 2300 	strex	r3, r2, [r1]
 8007bae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1e3      	bne.n	8007b7e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2220      	movs	r2, #32
 8007bba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	e853 3f00 	ldrex	r3, [r3]
 8007bd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f023 0310 	bic.w	r3, r3, #16
 8007bde:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	461a      	mov	r2, r3
 8007be8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007bec:	61fb      	str	r3, [r7, #28]
 8007bee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf0:	69b9      	ldr	r1, [r7, #24]
 8007bf2:	69fa      	ldr	r2, [r7, #28]
 8007bf4:	e841 2300 	strex	r3, r2, [r1]
 8007bf8:	617b      	str	r3, [r7, #20]
   return(result);
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d1e4      	bne.n	8007bca <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2202      	movs	r2, #2
 8007c04:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f7fa fac1 	bl	8002194 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c12:	e03f      	b.n	8007c94 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00e      	beq.n	8007c3e <HAL_UART_IRQHandler+0x56a>
 8007c20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d008      	beq.n	8007c3e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007c34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 fe00 	bl	800883c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c3c:	e02d      	b.n	8007c9a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00e      	beq.n	8007c68 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007c4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d008      	beq.n	8007c68 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d01c      	beq.n	8007c98 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	4798      	blx	r3
    }
    return;
 8007c66:	e017      	b.n	8007c98 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d012      	beq.n	8007c9a <HAL_UART_IRQHandler+0x5c6>
 8007c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00c      	beq.n	8007c9a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 fd4a 	bl	800871a <UART_EndTransmit_IT>
    return;
 8007c86:	e008      	b.n	8007c9a <HAL_UART_IRQHandler+0x5c6>
      return;
 8007c88:	bf00      	nop
 8007c8a:	e006      	b.n	8007c9a <HAL_UART_IRQHandler+0x5c6>
    return;
 8007c8c:	bf00      	nop
 8007c8e:	e004      	b.n	8007c9a <HAL_UART_IRQHandler+0x5c6>
      return;
 8007c90:	bf00      	nop
 8007c92:	e002      	b.n	8007c9a <HAL_UART_IRQHandler+0x5c6>
      return;
 8007c94:	bf00      	nop
 8007c96:	e000      	b.n	8007c9a <HAL_UART_IRQHandler+0x5c6>
    return;
 8007c98:	bf00      	nop
  }

}
 8007c9a:	37e8      	adds	r7, #232	@ 0xe8
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007ca8:	bf00      	nop
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007cbc:	bf00      	nop
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007cd0:	bf00      	nop
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b088      	sub	sp, #32
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	689a      	ldr	r2, [r3, #8]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	431a      	orrs	r2, r3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	431a      	orrs	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	69db      	ldr	r3, [r3, #28]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	4b8a      	ldr	r3, [pc, #552]	@ (8007f30 <UART_SetConfig+0x254>)
 8007d08:	4013      	ands	r3, r2
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	6812      	ldr	r2, [r2, #0]
 8007d0e:	6979      	ldr	r1, [r7, #20]
 8007d10:	430b      	orrs	r3, r1
 8007d12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	68da      	ldr	r2, [r3, #12]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	430a      	orrs	r2, r1
 8007d28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	699b      	ldr	r3, [r3, #24]
 8007d2e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6a1b      	ldr	r3, [r3, #32]
 8007d34:	697a      	ldr	r2, [r7, #20]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	697a      	ldr	r2, [r7, #20]
 8007d4a:	430a      	orrs	r2, r1
 8007d4c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a78      	ldr	r2, [pc, #480]	@ (8007f34 <UART_SetConfig+0x258>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d120      	bne.n	8007d9a <UART_SetConfig+0xbe>
 8007d58:	4b77      	ldr	r3, [pc, #476]	@ (8007f38 <UART_SetConfig+0x25c>)
 8007d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d5c:	f003 0303 	and.w	r3, r3, #3
 8007d60:	2b03      	cmp	r3, #3
 8007d62:	d817      	bhi.n	8007d94 <UART_SetConfig+0xb8>
 8007d64:	a201      	add	r2, pc, #4	@ (adr r2, 8007d6c <UART_SetConfig+0x90>)
 8007d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6a:	bf00      	nop
 8007d6c:	08007d7d 	.word	0x08007d7d
 8007d70:	08007d89 	.word	0x08007d89
 8007d74:	08007d8f 	.word	0x08007d8f
 8007d78:	08007d83 	.word	0x08007d83
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	77fb      	strb	r3, [r7, #31]
 8007d80:	e01d      	b.n	8007dbe <UART_SetConfig+0xe2>
 8007d82:	2302      	movs	r3, #2
 8007d84:	77fb      	strb	r3, [r7, #31]
 8007d86:	e01a      	b.n	8007dbe <UART_SetConfig+0xe2>
 8007d88:	2304      	movs	r3, #4
 8007d8a:	77fb      	strb	r3, [r7, #31]
 8007d8c:	e017      	b.n	8007dbe <UART_SetConfig+0xe2>
 8007d8e:	2308      	movs	r3, #8
 8007d90:	77fb      	strb	r3, [r7, #31]
 8007d92:	e014      	b.n	8007dbe <UART_SetConfig+0xe2>
 8007d94:	2310      	movs	r3, #16
 8007d96:	77fb      	strb	r3, [r7, #31]
 8007d98:	e011      	b.n	8007dbe <UART_SetConfig+0xe2>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a67      	ldr	r2, [pc, #412]	@ (8007f3c <UART_SetConfig+0x260>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d102      	bne.n	8007daa <UART_SetConfig+0xce>
 8007da4:	2300      	movs	r3, #0
 8007da6:	77fb      	strb	r3, [r7, #31]
 8007da8:	e009      	b.n	8007dbe <UART_SetConfig+0xe2>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a64      	ldr	r2, [pc, #400]	@ (8007f40 <UART_SetConfig+0x264>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d102      	bne.n	8007dba <UART_SetConfig+0xde>
 8007db4:	2300      	movs	r3, #0
 8007db6:	77fb      	strb	r3, [r7, #31]
 8007db8:	e001      	b.n	8007dbe <UART_SetConfig+0xe2>
 8007dba:	2310      	movs	r3, #16
 8007dbc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	69db      	ldr	r3, [r3, #28]
 8007dc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007dc6:	d15a      	bne.n	8007e7e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8007dc8:	7ffb      	ldrb	r3, [r7, #31]
 8007dca:	2b08      	cmp	r3, #8
 8007dcc:	d827      	bhi.n	8007e1e <UART_SetConfig+0x142>
 8007dce:	a201      	add	r2, pc, #4	@ (adr r2, 8007dd4 <UART_SetConfig+0xf8>)
 8007dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd4:	08007df9 	.word	0x08007df9
 8007dd8:	08007e01 	.word	0x08007e01
 8007ddc:	08007e09 	.word	0x08007e09
 8007de0:	08007e1f 	.word	0x08007e1f
 8007de4:	08007e0f 	.word	0x08007e0f
 8007de8:	08007e1f 	.word	0x08007e1f
 8007dec:	08007e1f 	.word	0x08007e1f
 8007df0:	08007e1f 	.word	0x08007e1f
 8007df4:	08007e17 	.word	0x08007e17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007df8:	f7fe fe28 	bl	8006a4c <HAL_RCC_GetPCLK1Freq>
 8007dfc:	61b8      	str	r0, [r7, #24]
        break;
 8007dfe:	e013      	b.n	8007e28 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e00:	f7fe fe46 	bl	8006a90 <HAL_RCC_GetPCLK2Freq>
 8007e04:	61b8      	str	r0, [r7, #24]
        break;
 8007e06:	e00f      	b.n	8007e28 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e08:	4b4e      	ldr	r3, [pc, #312]	@ (8007f44 <UART_SetConfig+0x268>)
 8007e0a:	61bb      	str	r3, [r7, #24]
        break;
 8007e0c:	e00c      	b.n	8007e28 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e0e:	f7fe fdbd 	bl	800698c <HAL_RCC_GetSysClockFreq>
 8007e12:	61b8      	str	r0, [r7, #24]
        break;
 8007e14:	e008      	b.n	8007e28 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e1a:	61bb      	str	r3, [r7, #24]
        break;
 8007e1c:	e004      	b.n	8007e28 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	77bb      	strb	r3, [r7, #30]
        break;
 8007e26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d074      	beq.n	8007f18 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	005a      	lsls	r2, r3, #1
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	085b      	lsrs	r3, r3, #1
 8007e38:	441a      	add	r2, r3
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	2b0f      	cmp	r3, #15
 8007e48:	d916      	bls.n	8007e78 <UART_SetConfig+0x19c>
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e50:	d212      	bcs.n	8007e78 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	f023 030f 	bic.w	r3, r3, #15
 8007e5a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	085b      	lsrs	r3, r3, #1
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	f003 0307 	and.w	r3, r3, #7
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	89fb      	ldrh	r3, [r7, #14]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	89fa      	ldrh	r2, [r7, #14]
 8007e74:	60da      	str	r2, [r3, #12]
 8007e76:	e04f      	b.n	8007f18 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	77bb      	strb	r3, [r7, #30]
 8007e7c:	e04c      	b.n	8007f18 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e7e:	7ffb      	ldrb	r3, [r7, #31]
 8007e80:	2b08      	cmp	r3, #8
 8007e82:	d828      	bhi.n	8007ed6 <UART_SetConfig+0x1fa>
 8007e84:	a201      	add	r2, pc, #4	@ (adr r2, 8007e8c <UART_SetConfig+0x1b0>)
 8007e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8a:	bf00      	nop
 8007e8c:	08007eb1 	.word	0x08007eb1
 8007e90:	08007eb9 	.word	0x08007eb9
 8007e94:	08007ec1 	.word	0x08007ec1
 8007e98:	08007ed7 	.word	0x08007ed7
 8007e9c:	08007ec7 	.word	0x08007ec7
 8007ea0:	08007ed7 	.word	0x08007ed7
 8007ea4:	08007ed7 	.word	0x08007ed7
 8007ea8:	08007ed7 	.word	0x08007ed7
 8007eac:	08007ecf 	.word	0x08007ecf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007eb0:	f7fe fdcc 	bl	8006a4c <HAL_RCC_GetPCLK1Freq>
 8007eb4:	61b8      	str	r0, [r7, #24]
        break;
 8007eb6:	e013      	b.n	8007ee0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007eb8:	f7fe fdea 	bl	8006a90 <HAL_RCC_GetPCLK2Freq>
 8007ebc:	61b8      	str	r0, [r7, #24]
        break;
 8007ebe:	e00f      	b.n	8007ee0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ec0:	4b20      	ldr	r3, [pc, #128]	@ (8007f44 <UART_SetConfig+0x268>)
 8007ec2:	61bb      	str	r3, [r7, #24]
        break;
 8007ec4:	e00c      	b.n	8007ee0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ec6:	f7fe fd61 	bl	800698c <HAL_RCC_GetSysClockFreq>
 8007eca:	61b8      	str	r0, [r7, #24]
        break;
 8007ecc:	e008      	b.n	8007ee0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ece:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ed2:	61bb      	str	r3, [r7, #24]
        break;
 8007ed4:	e004      	b.n	8007ee0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	77bb      	strb	r3, [r7, #30]
        break;
 8007ede:	bf00      	nop
    }

    if (pclk != 0U)
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d018      	beq.n	8007f18 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	085a      	lsrs	r2, r3, #1
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	441a      	add	r2, r3
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ef8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	2b0f      	cmp	r3, #15
 8007efe:	d909      	bls.n	8007f14 <UART_SetConfig+0x238>
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f06:	d205      	bcs.n	8007f14 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	60da      	str	r2, [r3, #12]
 8007f12:	e001      	b.n	8007f18 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8007f14:	2301      	movs	r3, #1
 8007f16:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007f24:	7fbb      	ldrb	r3, [r7, #30]
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3720      	adds	r7, #32
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	efff69f3 	.word	0xefff69f3
 8007f34:	40013800 	.word	0x40013800
 8007f38:	40021000 	.word	0x40021000
 8007f3c:	40004400 	.word	0x40004400
 8007f40:	40004800 	.word	0x40004800
 8007f44:	007a1200 	.word	0x007a1200

08007f48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f54:	f003 0308 	and.w	r3, r3, #8
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00a      	beq.n	8007f72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	430a      	orrs	r2, r1
 8007f70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f76:	f003 0301 	and.w	r3, r3, #1
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00a      	beq.n	8007f94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	430a      	orrs	r2, r1
 8007f92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f98:	f003 0302 	and.w	r3, r3, #2
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d00a      	beq.n	8007fb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	430a      	orrs	r2, r1
 8007fb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fba:	f003 0304 	and.w	r3, r3, #4
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d00a      	beq.n	8007fd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	430a      	orrs	r2, r1
 8007fd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fdc:	f003 0310 	and.w	r3, r3, #16
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d00a      	beq.n	8007ffa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	430a      	orrs	r2, r1
 8007ff8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ffe:	f003 0320 	and.w	r3, r3, #32
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00a      	beq.n	800801c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	430a      	orrs	r2, r1
 800801a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008024:	2b00      	cmp	r3, #0
 8008026:	d01a      	beq.n	800805e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	430a      	orrs	r2, r1
 800803c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008042:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008046:	d10a      	bne.n	800805e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	430a      	orrs	r2, r1
 800805c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008066:	2b00      	cmp	r3, #0
 8008068:	d00a      	beq.n	8008080 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	430a      	orrs	r2, r1
 800807e:	605a      	str	r2, [r3, #4]
  }
}
 8008080:	bf00      	nop
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b098      	sub	sp, #96	@ 0x60
 8008090:	af02      	add	r7, sp, #8
 8008092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800809c:	f7fa f962 	bl	8002364 <HAL_GetTick>
 80080a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 0308 	and.w	r3, r3, #8
 80080ac:	2b08      	cmp	r3, #8
 80080ae:	d12e      	bne.n	800810e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80080b4:	9300      	str	r3, [sp, #0]
 80080b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080b8:	2200      	movs	r2, #0
 80080ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 f88c 	bl	80081dc <UART_WaitOnFlagUntilTimeout>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d021      	beq.n	800810e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d2:	e853 3f00 	ldrex	r3, [r3]
 80080d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80080d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080de:	653b      	str	r3, [r7, #80]	@ 0x50
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	461a      	mov	r2, r3
 80080e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80080ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80080ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080f0:	e841 2300 	strex	r3, r2, [r1]
 80080f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80080f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d1e6      	bne.n	80080ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2220      	movs	r2, #32
 8008100:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800810a:	2303      	movs	r3, #3
 800810c:	e062      	b.n	80081d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f003 0304 	and.w	r3, r3, #4
 8008118:	2b04      	cmp	r3, #4
 800811a:	d149      	bne.n	80081b0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800811c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008120:	9300      	str	r3, [sp, #0]
 8008122:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008124:	2200      	movs	r2, #0
 8008126:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 f856 	bl	80081dc <UART_WaitOnFlagUntilTimeout>
 8008130:	4603      	mov	r3, r0
 8008132:	2b00      	cmp	r3, #0
 8008134:	d03c      	beq.n	80081b0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800813e:	e853 3f00 	ldrex	r3, [r3]
 8008142:	623b      	str	r3, [r7, #32]
   return(result);
 8008144:	6a3b      	ldr	r3, [r7, #32]
 8008146:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800814a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	461a      	mov	r2, r3
 8008152:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008154:	633b      	str	r3, [r7, #48]	@ 0x30
 8008156:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008158:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800815a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800815c:	e841 2300 	strex	r3, r2, [r1]
 8008160:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008164:	2b00      	cmp	r3, #0
 8008166:	d1e6      	bne.n	8008136 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	3308      	adds	r3, #8
 800816e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	e853 3f00 	ldrex	r3, [r3]
 8008176:	60fb      	str	r3, [r7, #12]
   return(result);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f023 0301 	bic.w	r3, r3, #1
 800817e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	3308      	adds	r3, #8
 8008186:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008188:	61fa      	str	r2, [r7, #28]
 800818a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818c:	69b9      	ldr	r1, [r7, #24]
 800818e:	69fa      	ldr	r2, [r7, #28]
 8008190:	e841 2300 	strex	r3, r2, [r1]
 8008194:	617b      	str	r3, [r7, #20]
   return(result);
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d1e5      	bne.n	8008168 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2220      	movs	r2, #32
 80081a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081ac:	2303      	movs	r3, #3
 80081ae:	e011      	b.n	80081d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2220      	movs	r2, #32
 80081b4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2220      	movs	r2, #32
 80081ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3758      	adds	r7, #88	@ 0x58
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	603b      	str	r3, [r7, #0]
 80081e8:	4613      	mov	r3, r2
 80081ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081ec:	e04f      	b.n	800828e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081ee:	69bb      	ldr	r3, [r7, #24]
 80081f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081f4:	d04b      	beq.n	800828e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081f6:	f7fa f8b5 	bl	8002364 <HAL_GetTick>
 80081fa:	4602      	mov	r2, r0
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	1ad3      	subs	r3, r2, r3
 8008200:	69ba      	ldr	r2, [r7, #24]
 8008202:	429a      	cmp	r2, r3
 8008204:	d302      	bcc.n	800820c <UART_WaitOnFlagUntilTimeout+0x30>
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d101      	bne.n	8008210 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800820c:	2303      	movs	r3, #3
 800820e:	e04e      	b.n	80082ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f003 0304 	and.w	r3, r3, #4
 800821a:	2b00      	cmp	r3, #0
 800821c:	d037      	beq.n	800828e <UART_WaitOnFlagUntilTimeout+0xb2>
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	2b80      	cmp	r3, #128	@ 0x80
 8008222:	d034      	beq.n	800828e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	2b40      	cmp	r3, #64	@ 0x40
 8008228:	d031      	beq.n	800828e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	69db      	ldr	r3, [r3, #28]
 8008230:	f003 0308 	and.w	r3, r3, #8
 8008234:	2b08      	cmp	r3, #8
 8008236:	d110      	bne.n	800825a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2208      	movs	r2, #8
 800823e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008240:	68f8      	ldr	r0, [r7, #12]
 8008242:	f000 f8ff 	bl	8008444 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2208      	movs	r2, #8
 800824a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2200      	movs	r2, #0
 8008252:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008256:	2301      	movs	r3, #1
 8008258:	e029      	b.n	80082ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	69db      	ldr	r3, [r3, #28]
 8008260:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008264:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008268:	d111      	bne.n	800828e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008272:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f000 f8e5 	bl	8008444 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2220      	movs	r2, #32
 800827e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2200      	movs	r2, #0
 8008286:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800828a:	2303      	movs	r3, #3
 800828c:	e00f      	b.n	80082ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	69da      	ldr	r2, [r3, #28]
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	4013      	ands	r3, r2
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	429a      	cmp	r2, r3
 800829c:	bf0c      	ite	eq
 800829e:	2301      	moveq	r3, #1
 80082a0:	2300      	movne	r3, #0
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	461a      	mov	r2, r3
 80082a6:	79fb      	ldrb	r3, [r7, #7]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d0a0      	beq.n	80081ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
	...

080082b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b096      	sub	sp, #88	@ 0x58
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	4613      	mov	r3, r2
 80082c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	68ba      	ldr	r2, [r7, #8]
 80082ca:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	88fa      	ldrh	r2, [r7, #6]
 80082d0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2200      	movs	r2, #0
 80082d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2222      	movs	r2, #34	@ 0x22
 80082e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d028      	beq.n	800833e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082f0:	4a3e      	ldr	r2, [pc, #248]	@ (80083ec <UART_Start_Receive_DMA+0x134>)
 80082f2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082f8:	4a3d      	ldr	r2, [pc, #244]	@ (80083f0 <UART_Start_Receive_DMA+0x138>)
 80082fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008300:	4a3c      	ldr	r2, [pc, #240]	@ (80083f4 <UART_Start_Receive_DMA+0x13c>)
 8008302:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008308:	2200      	movs	r2, #0
 800830a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	3324      	adds	r3, #36	@ 0x24
 8008316:	4619      	mov	r1, r3
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800831c:	461a      	mov	r2, r3
 800831e:	88fb      	ldrh	r3, [r7, #6]
 8008320:	f7fb fa78 	bl	8003814 <HAL_DMA_Start_IT>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d009      	beq.n	800833e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2210      	movs	r2, #16
 800832e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2220      	movs	r2, #32
 8008336:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	e051      	b.n	80083e2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d018      	beq.n	8008378 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800834e:	e853 3f00 	ldrex	r3, [r3]
 8008352:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008356:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800835a:	657b      	str	r3, [r7, #84]	@ 0x54
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	461a      	mov	r2, r3
 8008362:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008364:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008366:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008368:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800836a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800836c:	e841 2300 	strex	r3, r2, [r1]
 8008370:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008372:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008374:	2b00      	cmp	r3, #0
 8008376:	d1e6      	bne.n	8008346 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	3308      	adds	r3, #8
 800837e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008382:	e853 3f00 	ldrex	r3, [r3]
 8008386:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800838a:	f043 0301 	orr.w	r3, r3, #1
 800838e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	3308      	adds	r3, #8
 8008396:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008398:	637a      	str	r2, [r7, #52]	@ 0x34
 800839a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800839e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80083a0:	e841 2300 	strex	r3, r2, [r1]
 80083a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80083a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d1e5      	bne.n	8008378 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	3308      	adds	r3, #8
 80083b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	e853 3f00 	ldrex	r3, [r3]
 80083ba:	613b      	str	r3, [r7, #16]
   return(result);
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	3308      	adds	r3, #8
 80083ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80083cc:	623a      	str	r2, [r7, #32]
 80083ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d0:	69f9      	ldr	r1, [r7, #28]
 80083d2:	6a3a      	ldr	r2, [r7, #32]
 80083d4:	e841 2300 	strex	r3, r2, [r1]
 80083d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d1e5      	bne.n	80083ac <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3758      	adds	r7, #88	@ 0x58
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	0800850d 	.word	0x0800850d
 80083f0:	08008633 	.word	0x08008633
 80083f4:	08008671 	.word	0x08008671

080083f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b089      	sub	sp, #36	@ 0x24
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	e853 3f00 	ldrex	r3, [r3]
 800840c:	60bb      	str	r3, [r7, #8]
   return(result);
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008414:	61fb      	str	r3, [r7, #28]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	461a      	mov	r2, r3
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	61bb      	str	r3, [r7, #24]
 8008420:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008422:	6979      	ldr	r1, [r7, #20]
 8008424:	69ba      	ldr	r2, [r7, #24]
 8008426:	e841 2300 	strex	r3, r2, [r1]
 800842a:	613b      	str	r3, [r7, #16]
   return(result);
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d1e6      	bne.n	8008400 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2220      	movs	r2, #32
 8008436:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8008438:	bf00      	nop
 800843a:	3724      	adds	r7, #36	@ 0x24
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008444:	b480      	push	{r7}
 8008446:	b095      	sub	sp, #84	@ 0x54
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008454:	e853 3f00 	ldrex	r3, [r3]
 8008458:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800845a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800845c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008460:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	461a      	mov	r2, r3
 8008468:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800846a:	643b      	str	r3, [r7, #64]	@ 0x40
 800846c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008470:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008472:	e841 2300 	strex	r3, r2, [r1]
 8008476:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1e6      	bne.n	800844c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	3308      	adds	r3, #8
 8008484:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008486:	6a3b      	ldr	r3, [r7, #32]
 8008488:	e853 3f00 	ldrex	r3, [r3]
 800848c:	61fb      	str	r3, [r7, #28]
   return(result);
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	f023 0301 	bic.w	r3, r3, #1
 8008494:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	3308      	adds	r3, #8
 800849c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800849e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80084a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80084a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084a6:	e841 2300 	strex	r3, r2, [r1]
 80084aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80084ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d1e5      	bne.n	800847e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	d118      	bne.n	80084ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	e853 3f00 	ldrex	r3, [r3]
 80084c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	f023 0310 	bic.w	r3, r3, #16
 80084ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	461a      	mov	r2, r3
 80084d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084d8:	61bb      	str	r3, [r7, #24]
 80084da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084dc:	6979      	ldr	r1, [r7, #20]
 80084de:	69ba      	ldr	r2, [r7, #24]
 80084e0:	e841 2300 	strex	r3, r2, [r1]
 80084e4:	613b      	str	r3, [r7, #16]
   return(result);
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d1e6      	bne.n	80084ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2220      	movs	r2, #32
 80084f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008500:	bf00      	nop
 8008502:	3754      	adds	r7, #84	@ 0x54
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b09c      	sub	sp, #112	@ 0x70
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008518:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	699b      	ldr	r3, [r3, #24]
 800851e:	2b20      	cmp	r3, #32
 8008520:	d071      	beq.n	8008606 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8008522:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008524:	2200      	movs	r2, #0
 8008526:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800852a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008530:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008532:	e853 3f00 	ldrex	r3, [r3]
 8008536:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008538:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800853a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800853e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008540:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	461a      	mov	r2, r3
 8008546:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008548:	65bb      	str	r3, [r7, #88]	@ 0x58
 800854a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800854e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008550:	e841 2300 	strex	r3, r2, [r1]
 8008554:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008556:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008558:	2b00      	cmp	r3, #0
 800855a:	d1e6      	bne.n	800852a <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800855c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	3308      	adds	r3, #8
 8008562:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008566:	e853 3f00 	ldrex	r3, [r3]
 800856a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800856c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800856e:	f023 0301 	bic.w	r3, r3, #1
 8008572:	667b      	str	r3, [r7, #100]	@ 0x64
 8008574:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	3308      	adds	r3, #8
 800857a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800857c:	647a      	str	r2, [r7, #68]	@ 0x44
 800857e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008580:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008582:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008584:	e841 2300 	strex	r3, r2, [r1]
 8008588:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800858a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800858c:	2b00      	cmp	r3, #0
 800858e:	d1e5      	bne.n	800855c <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008590:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	3308      	adds	r3, #8
 8008596:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800859a:	e853 3f00 	ldrex	r3, [r3]
 800859e:	623b      	str	r3, [r7, #32]
   return(result);
 80085a0:	6a3b      	ldr	r3, [r7, #32]
 80085a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80085a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	3308      	adds	r3, #8
 80085ae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80085b0:	633a      	str	r2, [r7, #48]	@ 0x30
 80085b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80085b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085b8:	e841 2300 	strex	r3, r2, [r1]
 80085bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80085be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d1e5      	bne.n	8008590 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80085c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085c6:	2220      	movs	r2, #32
 80085c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d118      	bne.n	8008606 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	e853 3f00 	ldrex	r3, [r3]
 80085e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f023 0310 	bic.w	r3, r3, #16
 80085e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80085ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	461a      	mov	r2, r3
 80085f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80085f2:	61fb      	str	r3, [r7, #28]
 80085f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f6:	69b9      	ldr	r1, [r7, #24]
 80085f8:	69fa      	ldr	r2, [r7, #28]
 80085fa:	e841 2300 	strex	r3, r2, [r1]
 80085fe:	617b      	str	r3, [r7, #20]
   return(result);
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d1e6      	bne.n	80085d4 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008606:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008608:	2200      	movs	r2, #0
 800860a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800860c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800860e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008610:	2b01      	cmp	r3, #1
 8008612:	d107      	bne.n	8008624 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008614:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008616:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800861a:	4619      	mov	r1, r3
 800861c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800861e:	f7f9 fdb9 	bl	8002194 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008622:	e002      	b.n	800862a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008624:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008626:	f7ff fb45 	bl	8007cb4 <HAL_UART_RxCpltCallback>
}
 800862a:	bf00      	nop
 800862c:	3770      	adds	r7, #112	@ 0x70
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008632:	b580      	push	{r7, lr}
 8008634:	b084      	sub	sp, #16
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800863e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2201      	movs	r2, #1
 8008644:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800864a:	2b01      	cmp	r3, #1
 800864c:	d109      	bne.n	8008662 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008654:	085b      	lsrs	r3, r3, #1
 8008656:	b29b      	uxth	r3, r3
 8008658:	4619      	mov	r1, r3
 800865a:	68f8      	ldr	r0, [r7, #12]
 800865c:	f7f9 fd9a 	bl	8002194 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008660:	e002      	b.n	8008668 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008662:	68f8      	ldr	r0, [r7, #12]
 8008664:	f7ff fb30 	bl	8007cc8 <HAL_UART_RxHalfCpltCallback>
}
 8008668:	bf00      	nop
 800866a:	3710      	adds	r7, #16
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b086      	sub	sp, #24
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800867c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008682:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800868a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008696:	2b80      	cmp	r3, #128	@ 0x80
 8008698:	d109      	bne.n	80086ae <UART_DMAError+0x3e>
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	2b21      	cmp	r3, #33	@ 0x21
 800869e:	d106      	bne.n	80086ae <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80086a8:	6978      	ldr	r0, [r7, #20]
 80086aa:	f7ff fea5 	bl	80083f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086b8:	2b40      	cmp	r3, #64	@ 0x40
 80086ba:	d109      	bne.n	80086d0 <UART_DMAError+0x60>
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2b22      	cmp	r3, #34	@ 0x22
 80086c0:	d106      	bne.n	80086d0 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80086ca:	6978      	ldr	r0, [r7, #20]
 80086cc:	f7ff feba 	bl	8008444 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086d6:	f043 0210 	orr.w	r2, r3, #16
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80086e0:	6978      	ldr	r0, [r7, #20]
 80086e2:	f7f9 fd97 	bl	8002214 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086e6:	bf00      	nop
 80086e8:	3718      	adds	r7, #24
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}

080086ee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80086ee:	b580      	push	{r7, lr}
 80086f0:	b084      	sub	sp, #16
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2200      	movs	r2, #0
 8008700:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2200      	movs	r2, #0
 8008708:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800870c:	68f8      	ldr	r0, [r7, #12]
 800870e:	f7f9 fd81 	bl	8002214 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008712:	bf00      	nop
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800871a:	b580      	push	{r7, lr}
 800871c:	b088      	sub	sp, #32
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	e853 3f00 	ldrex	r3, [r3]
 800872e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008736:	61fb      	str	r3, [r7, #28]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	461a      	mov	r2, r3
 800873e:	69fb      	ldr	r3, [r7, #28]
 8008740:	61bb      	str	r3, [r7, #24]
 8008742:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008744:	6979      	ldr	r1, [r7, #20]
 8008746:	69ba      	ldr	r2, [r7, #24]
 8008748:	e841 2300 	strex	r3, r2, [r1]
 800874c:	613b      	str	r3, [r7, #16]
   return(result);
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d1e6      	bne.n	8008722 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2220      	movs	r2, #32
 8008758:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f7ff fa9d 	bl	8007ca0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008766:	bf00      	nop
 8008768:	3720      	adds	r7, #32
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}

0800876e <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800876e:	b580      	push	{r7, lr}
 8008770:	b086      	sub	sp, #24
 8008772:	af00      	add	r7, sp, #0
 8008774:	60f8      	str	r0, [r7, #12]
 8008776:	60b9      	str	r1, [r7, #8]
 8008778:	607a      	str	r2, [r7, #4]
 800877a:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d101      	bne.n	8008786 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8008782:	2301      	movs	r3, #1
 8008784:	e056      	b.n	8008834 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800878a:	2b00      	cmp	r3, #0
 800878c:	d106      	bne.n	800879c <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2200      	movs	r2, #0
 8008792:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8008796:	68f8      	ldr	r0, [r7, #12]
 8008798:	f7f9 fbd6 	bl	8001f48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2224      	movs	r2, #36	@ 0x24
 80087a0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f022 0201 	bic.w	r2, r2, #1
 80087b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d002      	beq.n	80087c0 <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 80087ba:	68f8      	ldr	r0, [r7, #12]
 80087bc:	f7ff fbc4 	bl	8007f48 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80087c0:	68f8      	ldr	r0, [r7, #12]
 80087c2:	f7ff fa8b 	bl	8007cdc <UART_SetConfig>
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d101      	bne.n	80087d0 <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	e031      	b.n	8008834 <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	689a      	ldr	r2, [r3, #8]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80087de:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	68ba      	ldr	r2, [r7, #8]
 80087f0:	430a      	orrs	r2, r1
 80087f2:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	055b      	lsls	r3, r3, #21
 80087f8:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	041b      	lsls	r3, r3, #16
 80087fe:	697a      	ldr	r2, [r7, #20]
 8008800:	4313      	orrs	r3, r2
 8008802:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 800880e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	6812      	ldr	r2, [r2, #0]
 8008816:	6979      	ldr	r1, [r7, #20]
 8008818:	430b      	orrs	r3, r1
 800881a:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f042 0201 	orr.w	r2, r2, #1
 800882a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800882c:	68f8      	ldr	r0, [r7, #12]
 800882e:	f7ff fc2d 	bl	800808c <UART_CheckIdleState>
 8008832:	4603      	mov	r3, r0
}
 8008834:	4618      	mov	r0, r3
 8008836:	3718      	adds	r7, #24
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008844:	bf00      	nop
 8008846:	370c      	adds	r7, #12
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b08c      	sub	sp, #48	@ 0x30
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	4613      	mov	r3, r2
 800885c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008864:	2b20      	cmp	r3, #32
 8008866:	d142      	bne.n	80088ee <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d002      	beq.n	8008874 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800886e:	88fb      	ldrh	r3, [r7, #6]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d101      	bne.n	8008878 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8008874:	2301      	movs	r3, #1
 8008876:	e03b      	b.n	80088f0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2201      	movs	r2, #1
 800887c:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2200      	movs	r2, #0
 8008882:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008884:	88fb      	ldrh	r3, [r7, #6]
 8008886:	461a      	mov	r2, r3
 8008888:	68b9      	ldr	r1, [r7, #8]
 800888a:	68f8      	ldr	r0, [r7, #12]
 800888c:	f7ff fd14 	bl	80082b8 <UART_Start_Receive_DMA>
 8008890:	4603      	mov	r3, r0
 8008892:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008896:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800889a:	2b00      	cmp	r3, #0
 800889c:	d124      	bne.n	80088e8 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d11d      	bne.n	80088e2 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2210      	movs	r2, #16
 80088ac:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b4:	69bb      	ldr	r3, [r7, #24]
 80088b6:	e853 3f00 	ldrex	r3, [r3]
 80088ba:	617b      	str	r3, [r7, #20]
   return(result);
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	f043 0310 	orr.w	r3, r3, #16
 80088c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	461a      	mov	r2, r3
 80088ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80088ce:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d0:	6a39      	ldr	r1, [r7, #32]
 80088d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088d4:	e841 2300 	strex	r3, r2, [r1]
 80088d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d1e6      	bne.n	80088ae <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80088e0:	e002      	b.n	80088e8 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
 80088e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80088e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80088ec:	e000      	b.n	80088f0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80088ee:	2302      	movs	r3, #2
  }
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3730      	adds	r7, #48	@ 0x30
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <memset>:
 80088f8:	4402      	add	r2, r0
 80088fa:	4603      	mov	r3, r0
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d100      	bne.n	8008902 <memset+0xa>
 8008900:	4770      	bx	lr
 8008902:	f803 1b01 	strb.w	r1, [r3], #1
 8008906:	e7f9      	b.n	80088fc <memset+0x4>

08008908 <__libc_init_array>:
 8008908:	b570      	push	{r4, r5, r6, lr}
 800890a:	4d0d      	ldr	r5, [pc, #52]	@ (8008940 <__libc_init_array+0x38>)
 800890c:	4c0d      	ldr	r4, [pc, #52]	@ (8008944 <__libc_init_array+0x3c>)
 800890e:	1b64      	subs	r4, r4, r5
 8008910:	10a4      	asrs	r4, r4, #2
 8008912:	2600      	movs	r6, #0
 8008914:	42a6      	cmp	r6, r4
 8008916:	d109      	bne.n	800892c <__libc_init_array+0x24>
 8008918:	4d0b      	ldr	r5, [pc, #44]	@ (8008948 <__libc_init_array+0x40>)
 800891a:	4c0c      	ldr	r4, [pc, #48]	@ (800894c <__libc_init_array+0x44>)
 800891c:	f000 f826 	bl	800896c <_init>
 8008920:	1b64      	subs	r4, r4, r5
 8008922:	10a4      	asrs	r4, r4, #2
 8008924:	2600      	movs	r6, #0
 8008926:	42a6      	cmp	r6, r4
 8008928:	d105      	bne.n	8008936 <__libc_init_array+0x2e>
 800892a:	bd70      	pop	{r4, r5, r6, pc}
 800892c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008930:	4798      	blx	r3
 8008932:	3601      	adds	r6, #1
 8008934:	e7ee      	b.n	8008914 <__libc_init_array+0xc>
 8008936:	f855 3b04 	ldr.w	r3, [r5], #4
 800893a:	4798      	blx	r3
 800893c:	3601      	adds	r6, #1
 800893e:	e7f2      	b.n	8008926 <__libc_init_array+0x1e>
 8008940:	08008bbc 	.word	0x08008bbc
 8008944:	08008bbc 	.word	0x08008bbc
 8008948:	08008bbc 	.word	0x08008bbc
 800894c:	08008bc0 	.word	0x08008bc0

08008950 <memcpy>:
 8008950:	440a      	add	r2, r1
 8008952:	4291      	cmp	r1, r2
 8008954:	f100 33ff 	add.w	r3, r0, #4294967295
 8008958:	d100      	bne.n	800895c <memcpy+0xc>
 800895a:	4770      	bx	lr
 800895c:	b510      	push	{r4, lr}
 800895e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008962:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008966:	4291      	cmp	r1, r2
 8008968:	d1f9      	bne.n	800895e <memcpy+0xe>
 800896a:	bd10      	pop	{r4, pc}

0800896c <_init>:
 800896c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800896e:	bf00      	nop
 8008970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008972:	bc08      	pop	{r3}
 8008974:	469e      	mov	lr, r3
 8008976:	4770      	bx	lr

08008978 <_fini>:
 8008978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800897a:	bf00      	nop
 800897c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800897e:	bc08      	pop	{r3}
 8008980:	469e      	mov	lr, r3
 8008982:	4770      	bx	lr
