
SCD30.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006aac  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  08006c40  08006c40  00007c40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070bc  080070bc  000091dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080070bc  080070bc  000080bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070c4  080070c4  000091dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070c4  080070c4  000080c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080070c8  080070c8  000080c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  080070cc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091dc  2**0
                  CONTENTS
 10 .bss          0000028c  200001dc  200001dc  000091dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000468  20000468  000091dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000091dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007ec9  00000000  00000000  0000920c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018b0  00000000  00000000  000110d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000760  00000000  00000000  00012988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000058a  00000000  00000000  000130e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a64f  00000000  00000000  00013672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000af91  00000000  00000000  0002dcc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009753c  00000000  00000000  00038c52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d018e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003110  00000000  00000000  000d01d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  000d32e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006c24 	.word	0x08006c24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08006c24 	.word	0x08006c24

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <I2C_Scan>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void I2C_Scan(I2C_HandleTypeDef *hi2c)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  printf("Scanning I2C bus...\r\n");
 8000bb0:	4810      	ldr	r0, [pc, #64]	@ (8000bf4 <I2C_Scan+0x4c>)
 8000bb2:	f003 fdf1 	bl	8004798 <puts>
  for (uint8_t addr = 1; addr < 127; addr++)
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	73fb      	strb	r3, [r7, #15]
 8000bba:	e013      	b.n	8000be4 <I2C_Scan+0x3c>
  {
    if (HAL_I2C_IsDeviceReady(hi2c, addr << 1, 1, 10) == HAL_OK)
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	b299      	uxth	r1, r3
 8000bc4:	230a      	movs	r3, #10
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f001 f947 	bl	8001e5c <HAL_I2C_IsDeviceReady>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d104      	bne.n	8000bde <I2C_Scan+0x36>
    {
      printf("Device found at 0x%02X\r\n", addr);
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4807      	ldr	r0, [pc, #28]	@ (8000bf8 <I2C_Scan+0x50>)
 8000bda:	f003 fd75 	bl	80046c8 <iprintf>
  for (uint8_t addr = 1; addr < 127; addr++)
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
 8000be0:	3301      	adds	r3, #1
 8000be2:	73fb      	strb	r3, [r7, #15]
 8000be4:	7bfb      	ldrb	r3, [r7, #15]
 8000be6:	2b7e      	cmp	r3, #126	@ 0x7e
 8000be8:	d9e8      	bls.n	8000bbc <I2C_Scan+0x14>
    }
  }
}
 8000bea:	bf00      	nop
 8000bec:	bf00      	nop
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	08006c40 	.word	0x08006c40
 8000bf8:	08006c58 	.word	0x08006c58

08000bfc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000bfc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000c00:	b088      	sub	sp, #32
 8000c02:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c04:	f000 fb9e 	bl	8001344 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c08:	f000 f85e 	bl	8000cc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c0c:	f000 f8ee 	bl	8000dec <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c10:	f000 f8ac 	bl	8000d6c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  initialise_monitor_handles();
 8000c14:	f005 ff88 	bl	8006b28 <initialise_monitor_handles>

  // Scan I2C bus for devices
  I2C_Scan(&hi2c1);
 8000c18:	4827      	ldr	r0, [pc, #156]	@ (8000cb8 <main+0xbc>)
 8000c1a:	f7ff ffc5 	bl	8000ba8 <I2C_Scan>

  // Start SCD30 measurement
  if (SCD30_StartMeasurement(&hi2c1) == HAL_OK)
 8000c1e:	4826      	ldr	r0, [pc, #152]	@ (8000cb8 <main+0xbc>)
 8000c20:	f000 f984 	bl	8000f2c <SCD30_StartMeasurement>
  else
  {
    // Error starting measurement
  }

  float co2 = 0, temperature = 0, humidity = 0;
 8000c24:	f04f 0300 	mov.w	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	f04f 0300 	mov.w	r3, #0
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]

  uint8_t data_ready = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	70fb      	strb	r3, [r7, #3]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    // Poll data ready status
    if (SCD30_DataReady(&hi2c1, &data_ready) == HAL_OK && data_ready)
 8000c3a:	1cfb      	adds	r3, r7, #3
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	481e      	ldr	r0, [pc, #120]	@ (8000cb8 <main+0xbc>)
 8000c40:	f000 f937 	bl	8000eb2 <SCD30_DataReady>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d12d      	bne.n	8000ca6 <main+0xaa>
 8000c4a:	78fb      	ldrb	r3, [r7, #3]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d02a      	beq.n	8000ca6 <main+0xaa>
    {
      if (SCD30_ReadMeasurement(&hi2c1, &co2, &temperature, &humidity) == HAL_OK)
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	f107 0208 	add.w	r2, r7, #8
 8000c56:	f107 010c 	add.w	r1, r7, #12
 8000c5a:	4817      	ldr	r0, [pc, #92]	@ (8000cb8 <main+0xbc>)
 8000c5c:	f000 f990 	bl	8000f80 <SCD30_ReadMeasurement>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d11b      	bne.n	8000c9e <main+0xa2>
      {
        printf("CO2: %.2f ppm, Temp: %.2f C, Humidity: %.2f %%\r\n", co2, temperature, humidity);
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fc6d 	bl	8000548 <__aeabi_f2d>
 8000c6e:	4680      	mov	r8, r0
 8000c70:	4689      	mov	r9, r1
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fc67 	bl	8000548 <__aeabi_f2d>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	460d      	mov	r5, r1
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fc61 	bl	8000548 <__aeabi_f2d>
 8000c86:	4602      	mov	r2, r0
 8000c88:	460b      	mov	r3, r1
 8000c8a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000c8e:	e9cd 4500 	strd	r4, r5, [sp]
 8000c92:	4642      	mov	r2, r8
 8000c94:	464b      	mov	r3, r9
 8000c96:	4809      	ldr	r0, [pc, #36]	@ (8000cbc <main+0xc0>)
 8000c98:	f003 fd16 	bl	80046c8 <iprintf>
      if (SCD30_ReadMeasurement(&hi2c1, &co2, &temperature, &humidity) == HAL_OK)
 8000c9c:	e006      	b.n	8000cac <main+0xb0>
      }
      else
      {
        printf("Error reading measurement\r\n");
 8000c9e:	4808      	ldr	r0, [pc, #32]	@ (8000cc0 <main+0xc4>)
 8000ca0:	f003 fd7a 	bl	8004798 <puts>
      if (SCD30_ReadMeasurement(&hi2c1, &co2, &temperature, &humidity) == HAL_OK)
 8000ca4:	e002      	b.n	8000cac <main+0xb0>
      }
    }
    else
    {
      printf("Waiting for data...\r\n");
 8000ca6:	4807      	ldr	r0, [pc, #28]	@ (8000cc4 <main+0xc8>)
 8000ca8:	f003 fd76 	bl	8004798 <puts>
    }
    HAL_Delay(2000);
 8000cac:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000cb0:	f000 fbae 	bl	8001410 <HAL_Delay>
    if (SCD30_DataReady(&hi2c1, &data_ready) == HAL_OK && data_ready)
 8000cb4:	e7c1      	b.n	8000c3a <main+0x3e>
 8000cb6:	bf00      	nop
 8000cb8:	200001f8 	.word	0x200001f8
 8000cbc:	08006c74 	.word	0x08006c74
 8000cc0:	08006ca8 	.word	0x08006ca8
 8000cc4:	08006cc4 	.word	0x08006cc4

08000cc8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b096      	sub	sp, #88	@ 0x58
 8000ccc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cce:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cd2:	2228      	movs	r2, #40	@ 0x28
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f003 fe3e 	bl	8004958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cdc:	f107 031c 	add.w	r3, r7, #28
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	611a      	str	r2, [r3, #16]
 8000cfa:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d00:	2301      	movs	r3, #1
 8000d02:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d04:	2310      	movs	r3, #16
 8000d06:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d0c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d10:	4618      	mov	r0, r3
 8000d12:	f001 fccd 	bl	80026b0 <HAL_RCC_OscConfig>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d1c:	f000 f88a 	bl	8000e34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000d20:	230f      	movs	r3, #15
 8000d22:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d24:	2300      	movs	r3, #0
 8000d26:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d34:	f107 031c 	add.w	r3, r7, #28
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f002 fcc6 	bl	80036cc <HAL_RCC_ClockConfig>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d46:	f000 f875 	bl	8000e34 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d4a:	2320      	movs	r3, #32
 8000d4c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	4618      	mov	r0, r3
 8000d56:	f002 fe7b 	bl	8003a50 <HAL_RCCEx_PeriphCLKConfig>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000d60:	f000 f868 	bl	8000e34 <Error_Handler>
  }
}
 8000d64:	bf00      	nop
 8000d66:	3758      	adds	r7, #88	@ 0x58
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d70:	4b1b      	ldr	r3, [pc, #108]	@ (8000de0 <MX_I2C1_Init+0x74>)
 8000d72:	4a1c      	ldr	r2, [pc, #112]	@ (8000de4 <MX_I2C1_Init+0x78>)
 8000d74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000d76:	4b1a      	ldr	r3, [pc, #104]	@ (8000de0 <MX_I2C1_Init+0x74>)
 8000d78:	4a1b      	ldr	r2, [pc, #108]	@ (8000de8 <MX_I2C1_Init+0x7c>)
 8000d7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d7c:	4b18      	ldr	r3, [pc, #96]	@ (8000de0 <MX_I2C1_Init+0x74>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d82:	4b17      	ldr	r3, [pc, #92]	@ (8000de0 <MX_I2C1_Init+0x74>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d88:	4b15      	ldr	r3, [pc, #84]	@ (8000de0 <MX_I2C1_Init+0x74>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d8e:	4b14      	ldr	r3, [pc, #80]	@ (8000de0 <MX_I2C1_Init+0x74>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d94:	4b12      	ldr	r3, [pc, #72]	@ (8000de0 <MX_I2C1_Init+0x74>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d9a:	4b11      	ldr	r3, [pc, #68]	@ (8000de0 <MX_I2C1_Init+0x74>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000da0:	4b0f      	ldr	r3, [pc, #60]	@ (8000de0 <MX_I2C1_Init+0x74>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000da6:	480e      	ldr	r0, [pc, #56]	@ (8000de0 <MX_I2C1_Init+0x74>)
 8000da8:	f000 fdae 	bl	8001908 <HAL_I2C_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000db2:	f000 f83f 	bl	8000e34 <Error_Handler>
  }

  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000db6:	2100      	movs	r1, #0
 8000db8:	4809      	ldr	r0, [pc, #36]	@ (8000de0 <MX_I2C1_Init+0x74>)
 8000dba:	f001 fbe1 	bl	8002580 <HAL_I2CEx_ConfigAnalogFilter>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000dc4:	f000 f836 	bl	8000e34 <Error_Handler>
  }

  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4805      	ldr	r0, [pc, #20]	@ (8000de0 <MX_I2C1_Init+0x74>)
 8000dcc:	f001 fc23 	bl	8002616 <HAL_I2CEx_ConfigDigitalFilter>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dd6:	f000 f82d 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	200001f8 	.word	0x200001f8
 8000de4:	40005400 	.word	0x40005400
 8000de8:	00201d2b 	.word	0x00201d2b

08000dec <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e30 <MX_GPIO_Init+0x44>)
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	4a0e      	ldr	r2, [pc, #56]	@ (8000e30 <MX_GPIO_Init+0x44>)
 8000df8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dfc:	6153      	str	r3, [r2, #20]
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000e30 <MX_GPIO_Init+0x44>)
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0a:	4b09      	ldr	r3, [pc, #36]	@ (8000e30 <MX_GPIO_Init+0x44>)
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	4a08      	ldr	r2, [pc, #32]	@ (8000e30 <MX_GPIO_Init+0x44>)
 8000e10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e14:	6153      	str	r3, [r2, #20]
 8000e16:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <MX_GPIO_Init+0x44>)
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e1e:	603b      	str	r3, [r7, #0]
 8000e20:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	40021000 	.word	0x40021000

08000e34 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e38:	b672      	cpsid	i
}
 8000e3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <Error_Handler+0x8>

08000e40 <SCD30_CalcCRC>:
static uint8_t rx_buf[18];

// Helper: CRC8 for SCD30

static uint8_t SCD30_CalcCRC(const uint8_t *data, uint8_t len)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0xFF;
 8000e4c:	23ff      	movs	r3, #255	@ 0xff
 8000e4e:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < len; i++)
 8000e50:	2300      	movs	r3, #0
 8000e52:	73bb      	strb	r3, [r7, #14]
 8000e54:	e022      	b.n	8000e9c <SCD30_CalcCRC+0x5c>
    {
        crc ^= data[i];
 8000e56:	7bbb      	ldrb	r3, [r7, #14]
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	781a      	ldrb	r2, [r3, #0]
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
 8000e60:	4053      	eors	r3, r2
 8000e62:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++)
 8000e64:	2300      	movs	r3, #0
 8000e66:	737b      	strb	r3, [r7, #13]
 8000e68:	e012      	b.n	8000e90 <SCD30_CalcCRC+0x50>
        {
            if (crc & 0x80)
 8000e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	da08      	bge.n	8000e84 <SCD30_CalcCRC+0x44>
                crc = (crc << 1) ^ 0x31;
 8000e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	b25b      	sxtb	r3, r3
 8000e7a:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 8000e7e:	b25b      	sxtb	r3, r3
 8000e80:	73fb      	strb	r3, [r7, #15]
 8000e82:	e002      	b.n	8000e8a <SCD30_CalcCRC+0x4a>
            else
                crc <<= 1;
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++)
 8000e8a:	7b7b      	ldrb	r3, [r7, #13]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	737b      	strb	r3, [r7, #13]
 8000e90:	7b7b      	ldrb	r3, [r7, #13]
 8000e92:	2b07      	cmp	r3, #7
 8000e94:	d9e9      	bls.n	8000e6a <SCD30_CalcCRC+0x2a>
    for (uint8_t i = 0; i < len; i++)
 8000e96:	7bbb      	ldrb	r3, [r7, #14]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	73bb      	strb	r3, [r7, #14]
 8000e9c:	7bba      	ldrb	r2, [r7, #14]
 8000e9e:	78fb      	ldrb	r3, [r7, #3]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d3d8      	bcc.n	8000e56 <SCD30_CalcCRC+0x16>
        }
    }
    return crc;
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3714      	adds	r7, #20
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <SCD30_DataReady>:

// Poll SCD30 data ready status
HAL_StatusTypeDef SCD30_DataReady(I2C_HandleTypeDef *hi2c, uint8_t *ready)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b086      	sub	sp, #24
 8000eb6:	af02      	add	r7, sp, #8
 8000eb8:	6078      	str	r0, [r7, #4]
 8000eba:	6039      	str	r1, [r7, #0]
    uint8_t tx[2] = {(SCD30_CMD_GET_DATA_READY >> 8) & 0xFF, SCD30_CMD_GET_DATA_READY & 0xFF};
 8000ebc:	f240 2302 	movw	r3, #514	@ 0x202
 8000ec0:	81bb      	strh	r3, [r7, #12]
    uint8_t rx[3];
    HAL_StatusTypeDef res = HAL_I2C_Master_Transmit(hi2c, SCD30_I2C_ADDR, tx, 2, 100);
 8000ec2:	f107 020c 	add.w	r2, r7, #12
 8000ec6:	2364      	movs	r3, #100	@ 0x64
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	2302      	movs	r3, #2
 8000ecc:	21c2      	movs	r1, #194	@ 0xc2
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f000 fdb6 	bl	8001a40 <HAL_I2C_Master_Transmit>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	73fb      	strb	r3, [r7, #15]
    if (res != HAL_OK)
 8000ed8:	7bfb      	ldrb	r3, [r7, #15]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <SCD30_DataReady+0x30>
        return res;
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	e020      	b.n	8000f24 <SCD30_DataReady+0x72>
    res = HAL_I2C_Master_Receive(hi2c, SCD30_I2C_ADDR, rx, 3, 100);
 8000ee2:	f107 0208 	add.w	r2, r7, #8
 8000ee6:	2364      	movs	r3, #100	@ 0x64
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	2303      	movs	r3, #3
 8000eec:	21c2      	movs	r1, #194	@ 0xc2
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f000 febe 	bl	8001c70 <HAL_I2C_Master_Receive>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	73fb      	strb	r3, [r7, #15]
    if (res != HAL_OK)
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <SCD30_DataReady+0x50>
        return res;
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	e010      	b.n	8000f24 <SCD30_DataReady+0x72>
    // rx[0] and rx[1] are the status, rx[2] is CRC
    if (SCD30_CalcCRC(rx, 2) != rx[2])
 8000f02:	f107 0308 	add.w	r3, r7, #8
 8000f06:	2102      	movs	r1, #2
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff ff99 	bl	8000e40 <SCD30_CalcCRC>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	461a      	mov	r2, r3
 8000f12:	7abb      	ldrb	r3, [r7, #10]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d001      	beq.n	8000f1c <SCD30_DataReady+0x6a>
        return HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e003      	b.n	8000f24 <SCD30_DataReady+0x72>
    *ready = (rx[0] << 8) | rx[1];
 8000f1c:	7a7a      	ldrb	r2, [r7, #9]
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	701a      	strb	r2, [r3, #0]
    return HAL_OK;
 8000f22:	2300      	movs	r3, #0
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <SCD30_StartMeasurement>:

HAL_StatusTypeDef SCD30_StartMeasurement(I2C_HandleTypeDef *hi2c)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af02      	add	r7, sp, #8
 8000f32:	6078      	str	r0, [r7, #4]
    tx_buf[0] = (SCD30_CMD_START_MEASUREMENT >> 8) & 0xFF;
 8000f34:	4b10      	ldr	r3, [pc, #64]	@ (8000f78 <SCD30_StartMeasurement+0x4c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	701a      	strb	r2, [r3, #0]
    tx_buf[1] = SCD30_CMD_START_MEASUREMENT & 0xFF;
 8000f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f78 <SCD30_StartMeasurement+0x4c>)
 8000f3c:	2210      	movs	r2, #16
 8000f3e:	705a      	strb	r2, [r3, #1]
    tx_buf[2] = 0x00; // 0x0000: ambient pressure
 8000f40:	4b0d      	ldr	r3, [pc, #52]	@ (8000f78 <SCD30_StartMeasurement+0x4c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	709a      	strb	r2, [r3, #2]
    tx_buf[3] = 0x00;
 8000f46:	4b0c      	ldr	r3, [pc, #48]	@ (8000f78 <SCD30_StartMeasurement+0x4c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	70da      	strb	r2, [r3, #3]
    tx_buf[4] = SCD30_CalcCRC(&tx_buf[2], 2);
 8000f4c:	2102      	movs	r1, #2
 8000f4e:	480b      	ldr	r0, [pc, #44]	@ (8000f7c <SCD30_StartMeasurement+0x50>)
 8000f50:	f7ff ff76 	bl	8000e40 <SCD30_CalcCRC>
 8000f54:	4603      	mov	r3, r0
 8000f56:	461a      	mov	r2, r3
 8000f58:	4b07      	ldr	r3, [pc, #28]	@ (8000f78 <SCD30_StartMeasurement+0x4c>)
 8000f5a:	711a      	strb	r2, [r3, #4]
    return HAL_I2C_Master_Transmit(hi2c, SCD30_I2C_ADDR, tx_buf, 5, 100);
 8000f5c:	2364      	movs	r3, #100	@ 0x64
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	2305      	movs	r3, #5
 8000f62:	4a05      	ldr	r2, [pc, #20]	@ (8000f78 <SCD30_StartMeasurement+0x4c>)
 8000f64:	21c2      	movs	r1, #194	@ 0xc2
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f000 fd6a 	bl	8001a40 <HAL_I2C_Master_Transmit>
 8000f6c:	4603      	mov	r3, r0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	2000024c 	.word	0x2000024c
 8000f7c:	2000024e 	.word	0x2000024e

08000f80 <SCD30_ReadMeasurement>:

HAL_StatusTypeDef SCD30_ReadMeasurement(I2C_HandleTypeDef *hi2c, float *co2, float *temperature, float *humidity)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b090      	sub	sp, #64	@ 0x40
 8000f84:	af02      	add	r7, sp, #8
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
 8000f8c:	603b      	str	r3, [r7, #0]
    tx_buf[0] = (SCD30_CMD_READ_MEASUREMENT >> 8) & 0xFF;
 8000f8e:	4b63      	ldr	r3, [pc, #396]	@ (800111c <SCD30_ReadMeasurement+0x19c>)
 8000f90:	2203      	movs	r2, #3
 8000f92:	701a      	strb	r2, [r3, #0]
    tx_buf[1] = SCD30_CMD_READ_MEASUREMENT & 0xFF;
 8000f94:	4b61      	ldr	r3, [pc, #388]	@ (800111c <SCD30_ReadMeasurement+0x19c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	705a      	strb	r2, [r3, #1]
    HAL_StatusTypeDef res = HAL_I2C_Master_Transmit(hi2c, SCD30_I2C_ADDR, tx_buf, 2, 100);
 8000f9a:	2364      	movs	r3, #100	@ 0x64
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	4a5e      	ldr	r2, [pc, #376]	@ (800111c <SCD30_ReadMeasurement+0x19c>)
 8000fa2:	21c2      	movs	r1, #194	@ 0xc2
 8000fa4:	68f8      	ldr	r0, [r7, #12]
 8000fa6:	f000 fd4b 	bl	8001a40 <HAL_I2C_Master_Transmit>
 8000faa:	4603      	mov	r3, r0
 8000fac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (res != HAL_OK)
 8000fb0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d002      	beq.n	8000fbe <SCD30_ReadMeasurement+0x3e>
        return res;
 8000fb8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000fbc:	e0aa      	b.n	8001114 <SCD30_ReadMeasurement+0x194>
    res = HAL_I2C_Master_Receive(hi2c, SCD30_I2C_ADDR, rx_buf, 18, 200);
 8000fbe:	23c8      	movs	r3, #200	@ 0xc8
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	2312      	movs	r3, #18
 8000fc4:	4a56      	ldr	r2, [pc, #344]	@ (8001120 <SCD30_ReadMeasurement+0x1a0>)
 8000fc6:	21c2      	movs	r1, #194	@ 0xc2
 8000fc8:	68f8      	ldr	r0, [r7, #12]
 8000fca:	f000 fe51 	bl	8001c70 <HAL_I2C_Master_Receive>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (res != HAL_OK)
 8000fd4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d002      	beq.n	8000fe2 <SCD30_ReadMeasurement+0x62>
        return res;
 8000fdc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000fe0:	e098      	b.n	8001114 <SCD30_ReadMeasurement+0x194>
    // Debug: print raw received bytes
    printf("Raw SCD30 bytes: ");
 8000fe2:	4850      	ldr	r0, [pc, #320]	@ (8001124 <SCD30_ReadMeasurement+0x1a4>)
 8000fe4:	f003 fb70 	bl	80046c8 <iprintf>
    for (int k = 0; k < 18; k++)
 8000fe8:	2300      	movs	r3, #0
 8000fea:	637b      	str	r3, [r7, #52]	@ 0x34
 8000fec:	e00a      	b.n	8001004 <SCD30_ReadMeasurement+0x84>
        printf("%02X ", rx_buf[k]);
 8000fee:	4a4c      	ldr	r2, [pc, #304]	@ (8001120 <SCD30_ReadMeasurement+0x1a0>)
 8000ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ff2:	4413      	add	r3, r2
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	484b      	ldr	r0, [pc, #300]	@ (8001128 <SCD30_ReadMeasurement+0x1a8>)
 8000ffa:	f003 fb65 	bl	80046c8 <iprintf>
    for (int k = 0; k < 18; k++)
 8000ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001000:	3301      	adds	r3, #1
 8001002:	637b      	str	r3, [r7, #52]	@ 0x34
 8001004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001006:	2b11      	cmp	r3, #17
 8001008:	ddf1      	ble.n	8000fee <SCD30_ReadMeasurement+0x6e>
    printf("\r\n");
 800100a:	4848      	ldr	r0, [pc, #288]	@ (800112c <SCD30_ReadMeasurement+0x1ac>)
 800100c:	f003 fbc4 	bl	8004798 <puts>
    // Parse 3 float values (each: 4 bytes + CRC per 2 bytes)
    uint8_t data[12];
    for (int i = 0, j = 0; i < 18; i += 6)
 8001010:	2300      	movs	r3, #0
 8001012:	633b      	str	r3, [r7, #48]	@ 0x30
 8001014:	2300      	movs	r3, #0
 8001016:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001018:	e04f      	b.n	80010ba <SCD30_ReadMeasurement+0x13a>
    {
        // Check CRC for each 2 bytes
        if (SCD30_CalcCRC(&rx_buf[i], 2) != rx_buf[i + 2] || SCD30_CalcCRC(&rx_buf[i + 3], 2) != rx_buf[i + 5])
 800101a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800101c:	4a40      	ldr	r2, [pc, #256]	@ (8001120 <SCD30_ReadMeasurement+0x1a0>)
 800101e:	4413      	add	r3, r2
 8001020:	2102      	movs	r1, #2
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff ff0c 	bl	8000e40 <SCD30_CalcCRC>
 8001028:	4603      	mov	r3, r0
 800102a:	4619      	mov	r1, r3
 800102c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800102e:	3302      	adds	r3, #2
 8001030:	4a3b      	ldr	r2, [pc, #236]	@ (8001120 <SCD30_ReadMeasurement+0x1a0>)
 8001032:	5cd3      	ldrb	r3, [r2, r3]
 8001034:	4299      	cmp	r1, r3
 8001036:	d10f      	bne.n	8001058 <SCD30_ReadMeasurement+0xd8>
 8001038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800103a:	3303      	adds	r3, #3
 800103c:	4a38      	ldr	r2, [pc, #224]	@ (8001120 <SCD30_ReadMeasurement+0x1a0>)
 800103e:	4413      	add	r3, r2
 8001040:	2102      	movs	r1, #2
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fefc 	bl	8000e40 <SCD30_CalcCRC>
 8001048:	4603      	mov	r3, r0
 800104a:	4619      	mov	r1, r3
 800104c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800104e:	3305      	adds	r3, #5
 8001050:	4a33      	ldr	r2, [pc, #204]	@ (8001120 <SCD30_ReadMeasurement+0x1a0>)
 8001052:	5cd3      	ldrb	r3, [r2, r3]
 8001054:	4299      	cmp	r1, r3
 8001056:	d001      	beq.n	800105c <SCD30_ReadMeasurement+0xdc>
            return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e05b      	b.n	8001114 <SCD30_ReadMeasurement+0x194>
        data[j++] = rx_buf[i];
 800105c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800105e:	1c5a      	adds	r2, r3, #1
 8001060:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001062:	492f      	ldr	r1, [pc, #188]	@ (8001120 <SCD30_ReadMeasurement+0x1a0>)
 8001064:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001066:	440a      	add	r2, r1
 8001068:	7812      	ldrb	r2, [r2, #0]
 800106a:	3338      	adds	r3, #56	@ 0x38
 800106c:	443b      	add	r3, r7
 800106e:	f803 2c1c 	strb.w	r2, [r3, #-28]
        data[j++] = rx_buf[i + 1];
 8001072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001074:	1c5a      	adds	r2, r3, #1
 8001076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001078:	1c59      	adds	r1, r3, #1
 800107a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800107c:	4928      	ldr	r1, [pc, #160]	@ (8001120 <SCD30_ReadMeasurement+0x1a0>)
 800107e:	5c8a      	ldrb	r2, [r1, r2]
 8001080:	3338      	adds	r3, #56	@ 0x38
 8001082:	443b      	add	r3, r7
 8001084:	f803 2c1c 	strb.w	r2, [r3, #-28]
        data[j++] = rx_buf[i + 3];
 8001088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800108a:	1cda      	adds	r2, r3, #3
 800108c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800108e:	1c59      	adds	r1, r3, #1
 8001090:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8001092:	4923      	ldr	r1, [pc, #140]	@ (8001120 <SCD30_ReadMeasurement+0x1a0>)
 8001094:	5c8a      	ldrb	r2, [r1, r2]
 8001096:	3338      	adds	r3, #56	@ 0x38
 8001098:	443b      	add	r3, r7
 800109a:	f803 2c1c 	strb.w	r2, [r3, #-28]
        data[j++] = rx_buf[i + 4];
 800109e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010a0:	1d1a      	adds	r2, r3, #4
 80010a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010a4:	1c59      	adds	r1, r3, #1
 80010a6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80010a8:	491d      	ldr	r1, [pc, #116]	@ (8001120 <SCD30_ReadMeasurement+0x1a0>)
 80010aa:	5c8a      	ldrb	r2, [r1, r2]
 80010ac:	3338      	adds	r3, #56	@ 0x38
 80010ae:	443b      	add	r3, r7
 80010b0:	f803 2c1c 	strb.w	r2, [r3, #-28]
    for (int i = 0, j = 0; i < 18; i += 6)
 80010b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010b6:	3306      	adds	r3, #6
 80010b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80010ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010bc:	2b11      	cmp	r3, #17
 80010be:	ddac      	ble.n	800101a <SCD30_ReadMeasurement+0x9a>
    }
    // Convert to float
    // SCD30 sends big-endian, STM32 uses little-endian
    uint8_t co2_bytes[4] = {data[3], data[2], data[1], data[0]};
 80010c0:	7ffb      	ldrb	r3, [r7, #31]
 80010c2:	763b      	strb	r3, [r7, #24]
 80010c4:	7fbb      	ldrb	r3, [r7, #30]
 80010c6:	767b      	strb	r3, [r7, #25]
 80010c8:	7f7b      	ldrb	r3, [r7, #29]
 80010ca:	76bb      	strb	r3, [r7, #26]
 80010cc:	7f3b      	ldrb	r3, [r7, #28]
 80010ce:	76fb      	strb	r3, [r7, #27]
    uint8_t temperature_bytes[4] = {data[7], data[6], data[5], data[4]};
 80010d0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80010d4:	753b      	strb	r3, [r7, #20]
 80010d6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80010da:	757b      	strb	r3, [r7, #21]
 80010dc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80010e0:	75bb      	strb	r3, [r7, #22]
 80010e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010e6:	75fb      	strb	r3, [r7, #23]
    uint8_t humidity_bytes[4] = {data[11], data[10], data[9], data[8]};
 80010e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80010ec:	743b      	strb	r3, [r7, #16]
 80010ee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80010f2:	747b      	strb	r3, [r7, #17]
 80010f4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80010f8:	74bb      	strb	r3, [r7, #18]
 80010fa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80010fe:	74fb      	strb	r3, [r7, #19]

    memcpy(co2, co2_bytes, 4);
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	601a      	str	r2, [r3, #0]
    memcpy(temperature, temperature_bytes, 4);
 8001106:	697a      	ldr	r2, [r7, #20]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	601a      	str	r2, [r3, #0]
    memcpy(humidity, humidity_bytes, 4);
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	601a      	str	r2, [r3, #0]
    return HAL_OK;
 8001112:	2300      	movs	r3, #0
}
 8001114:	4618      	mov	r0, r3
 8001116:	3738      	adds	r7, #56	@ 0x38
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	2000024c 	.word	0x2000024c
 8001120:	20000254 	.word	0x20000254
 8001124:	08006cdc 	.word	0x08006cdc
 8001128:	08006cf0 	.word	0x08006cf0
 800112c:	08006cf8 	.word	0x08006cf8

08001130 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001136:	4b0f      	ldr	r3, [pc, #60]	@ (8001174 <HAL_MspInit+0x44>)
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	4a0e      	ldr	r2, [pc, #56]	@ (8001174 <HAL_MspInit+0x44>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6193      	str	r3, [r2, #24]
 8001142:	4b0c      	ldr	r3, [pc, #48]	@ (8001174 <HAL_MspInit+0x44>)
 8001144:	699b      	ldr	r3, [r3, #24]
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800114e:	4b09      	ldr	r3, [pc, #36]	@ (8001174 <HAL_MspInit+0x44>)
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	4a08      	ldr	r2, [pc, #32]	@ (8001174 <HAL_MspInit+0x44>)
 8001154:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001158:	61d3      	str	r3, [r2, #28]
 800115a:	4b06      	ldr	r3, [pc, #24]	@ (8001174 <HAL_MspInit+0x44>)
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	40021000 	.word	0x40021000

08001178 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08a      	sub	sp, #40	@ 0x28
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a17      	ldr	r2, [pc, #92]	@ (80011f4 <HAL_I2C_MspInit+0x7c>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d127      	bne.n	80011ea <HAL_I2C_MspInit+0x72>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800119a:	4b17      	ldr	r3, [pc, #92]	@ (80011f8 <HAL_I2C_MspInit+0x80>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	4a16      	ldr	r2, [pc, #88]	@ (80011f8 <HAL_I2C_MspInit+0x80>)
 80011a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011a4:	6153      	str	r3, [r2, #20]
 80011a6:	4b14      	ldr	r3, [pc, #80]	@ (80011f8 <HAL_I2C_MspInit+0x80>)
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011b2:	23c0      	movs	r3, #192	@ 0xc0
 80011b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011b6:	2312      	movs	r3, #18
 80011b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011be:	2303      	movs	r3, #3
 80011c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011c2:	2304      	movs	r3, #4
 80011c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	4619      	mov	r1, r3
 80011cc:	480b      	ldr	r0, [pc, #44]	@ (80011fc <HAL_I2C_MspInit+0x84>)
 80011ce:	f000 fa29 	bl	8001624 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011d2:	4b09      	ldr	r3, [pc, #36]	@ (80011f8 <HAL_I2C_MspInit+0x80>)
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	4a08      	ldr	r2, [pc, #32]	@ (80011f8 <HAL_I2C_MspInit+0x80>)
 80011d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011dc:	61d3      	str	r3, [r2, #28]
 80011de:	4b06      	ldr	r3, [pc, #24]	@ (80011f8 <HAL_I2C_MspInit+0x80>)
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80011ea:	bf00      	nop
 80011ec:	3728      	adds	r7, #40	@ 0x28
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40005400 	.word	0x40005400
 80011f8:	40021000 	.word	0x40021000
 80011fc:	48000400 	.word	0x48000400

08001200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <NMI_Handler+0x4>

08001208 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800120c:	bf00      	nop
 800120e:	e7fd      	b.n	800120c <HardFault_Handler+0x4>

08001210 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001214:	bf00      	nop
 8001216:	e7fd      	b.n	8001214 <MemManage_Handler+0x4>

08001218 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <BusFault_Handler+0x4>

08001220 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001224:	bf00      	nop
 8001226:	e7fd      	b.n	8001224 <UsageFault_Handler+0x4>

08001228 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001256:	f000 f8bb 	bl	80013d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001268:	4a14      	ldr	r2, [pc, #80]	@ (80012bc <_sbrk+0x5c>)
 800126a:	4b15      	ldr	r3, [pc, #84]	@ (80012c0 <_sbrk+0x60>)
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001274:	4b13      	ldr	r3, [pc, #76]	@ (80012c4 <_sbrk+0x64>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d102      	bne.n	8001282 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800127c:	4b11      	ldr	r3, [pc, #68]	@ (80012c4 <_sbrk+0x64>)
 800127e:	4a12      	ldr	r2, [pc, #72]	@ (80012c8 <_sbrk+0x68>)
 8001280:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001282:	4b10      	ldr	r3, [pc, #64]	@ (80012c4 <_sbrk+0x64>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	429a      	cmp	r2, r3
 800128e:	d207      	bcs.n	80012a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001290:	f003 fbb4 	bl	80049fc <__errno>
 8001294:	4603      	mov	r3, r0
 8001296:	220c      	movs	r2, #12
 8001298:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
 800129e:	e009      	b.n	80012b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a0:	4b08      	ldr	r3, [pc, #32]	@ (80012c4 <_sbrk+0x64>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012a6:	4b07      	ldr	r3, [pc, #28]	@ (80012c4 <_sbrk+0x64>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	4a05      	ldr	r2, [pc, #20]	@ (80012c4 <_sbrk+0x64>)
 80012b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012b2:	68fb      	ldr	r3, [r7, #12]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20003000 	.word	0x20003000
 80012c0:	00000400 	.word	0x00000400
 80012c4:	20000268 	.word	0x20000268
 80012c8:	20000468 	.word	0x20000468

080012cc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012d0:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <SystemInit+0x20>)
 80012d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012d6:	4a05      	ldr	r2, [pc, #20]	@ (80012ec <SystemInit+0x20>)
 80012d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001328 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80012f4:	f7ff ffea 	bl	80012cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012f8:	480c      	ldr	r0, [pc, #48]	@ (800132c <LoopForever+0x6>)
  ldr r1, =_edata
 80012fa:	490d      	ldr	r1, [pc, #52]	@ (8001330 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001334 <LoopForever+0xe>)
  movs r3, #0
 80012fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001300:	e002      	b.n	8001308 <LoopCopyDataInit>

08001302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001306:	3304      	adds	r3, #4

08001308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800130a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800130c:	d3f9      	bcc.n	8001302 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800130e:	4a0a      	ldr	r2, [pc, #40]	@ (8001338 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001310:	4c0a      	ldr	r4, [pc, #40]	@ (800133c <LoopForever+0x16>)
  movs r3, #0
 8001312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001314:	e001      	b.n	800131a <LoopFillZerobss>

08001316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001318:	3204      	adds	r2, #4

0800131a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800131a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800131c:	d3fb      	bcc.n	8001316 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800131e:	f003 fb73 	bl	8004a08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001322:	f7ff fc6b 	bl	8000bfc <main>

08001326 <LoopForever>:

LoopForever:
    b LoopForever
 8001326:	e7fe      	b.n	8001326 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001328:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800132c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001330:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001334:	080070cc 	.word	0x080070cc
  ldr r2, =_sbss
 8001338:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800133c:	20000468 	.word	0x20000468

08001340 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001340:	e7fe      	b.n	8001340 <ADC1_2_IRQHandler>
	...

08001344 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001348:	4b08      	ldr	r3, [pc, #32]	@ (800136c <HAL_Init+0x28>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a07      	ldr	r2, [pc, #28]	@ (800136c <HAL_Init+0x28>)
 800134e:	f043 0310 	orr.w	r3, r3, #16
 8001352:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001354:	2003      	movs	r0, #3
 8001356:	f000 f931 	bl	80015bc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800135a:	200f      	movs	r0, #15
 800135c:	f000 f808 	bl	8001370 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001360:	f7ff fee6 	bl	8001130 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40022000 	.word	0x40022000

08001370 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001378:	4b12      	ldr	r3, [pc, #72]	@ (80013c4 <HAL_InitTick+0x54>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4b12      	ldr	r3, [pc, #72]	@ (80013c8 <HAL_InitTick+0x58>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	4619      	mov	r1, r3
 8001382:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001386:	fbb3 f3f1 	udiv	r3, r3, r1
 800138a:	fbb2 f3f3 	udiv	r3, r2, r3
 800138e:	4618      	mov	r0, r3
 8001390:	f000 f93b 	bl	800160a <HAL_SYSTICK_Config>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e00e      	b.n	80013bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b0f      	cmp	r3, #15
 80013a2:	d80a      	bhi.n	80013ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a4:	2200      	movs	r2, #0
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ac:	f000 f911 	bl	80015d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b0:	4a06      	ldr	r2, [pc, #24]	@ (80013cc <HAL_InitTick+0x5c>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80013b6:	2300      	movs	r3, #0
 80013b8:	e000      	b.n	80013bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000000 	.word	0x20000000
 80013c8:	20000008 	.word	0x20000008
 80013cc:	20000004 	.word	0x20000004

080013d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013d4:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <HAL_IncTick+0x20>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	461a      	mov	r2, r3
 80013da:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <HAL_IncTick+0x24>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4413      	add	r3, r2
 80013e0:	4a04      	ldr	r2, [pc, #16]	@ (80013f4 <HAL_IncTick+0x24>)
 80013e2:	6013      	str	r3, [r2, #0]
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20000008 	.word	0x20000008
 80013f4:	2000026c 	.word	0x2000026c

080013f8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return uwTick;  
 80013fc:	4b03      	ldr	r3, [pc, #12]	@ (800140c <HAL_GetTick+0x14>)
 80013fe:	681b      	ldr	r3, [r3, #0]
}
 8001400:	4618      	mov	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	2000026c 	.word	0x2000026c

08001410 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001418:	f7ff ffee 	bl	80013f8 <HAL_GetTick>
 800141c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001428:	d005      	beq.n	8001436 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800142a:	4b0a      	ldr	r3, [pc, #40]	@ (8001454 <HAL_Delay+0x44>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	461a      	mov	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4413      	add	r3, r2
 8001434:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001436:	bf00      	nop
 8001438:	f7ff ffde 	bl	80013f8 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	429a      	cmp	r2, r3
 8001446:	d8f7      	bhi.n	8001438 <HAL_Delay+0x28>
  {
  }
}
 8001448:	bf00      	nop
 800144a:	bf00      	nop
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000008 	.word	0x20000008

08001458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001468:	4b0c      	ldr	r3, [pc, #48]	@ (800149c <__NVIC_SetPriorityGrouping+0x44>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001474:	4013      	ands	r3, r2
 8001476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001480:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001484:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800148a:	4a04      	ldr	r2, [pc, #16]	@ (800149c <__NVIC_SetPriorityGrouping+0x44>)
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	60d3      	str	r3, [r2, #12]
}
 8001490:	bf00      	nop
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a4:	4b04      	ldr	r3, [pc, #16]	@ (80014b8 <__NVIC_GetPriorityGrouping+0x18>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	0a1b      	lsrs	r3, r3, #8
 80014aa:	f003 0307 	and.w	r3, r3, #7
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	6039      	str	r1, [r7, #0]
 80014c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	db0a      	blt.n	80014e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	490c      	ldr	r1, [pc, #48]	@ (8001508 <__NVIC_SetPriority+0x4c>)
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	0112      	lsls	r2, r2, #4
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	440b      	add	r3, r1
 80014e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e4:	e00a      	b.n	80014fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	4908      	ldr	r1, [pc, #32]	@ (800150c <__NVIC_SetPriority+0x50>)
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	f003 030f 	and.w	r3, r3, #15
 80014f2:	3b04      	subs	r3, #4
 80014f4:	0112      	lsls	r2, r2, #4
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	440b      	add	r3, r1
 80014fa:	761a      	strb	r2, [r3, #24]
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000e100 	.word	0xe000e100
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001510:	b480      	push	{r7}
 8001512:	b089      	sub	sp, #36	@ 0x24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	f1c3 0307 	rsb	r3, r3, #7
 800152a:	2b04      	cmp	r3, #4
 800152c:	bf28      	it	cs
 800152e:	2304      	movcs	r3, #4
 8001530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	3304      	adds	r3, #4
 8001536:	2b06      	cmp	r3, #6
 8001538:	d902      	bls.n	8001540 <NVIC_EncodePriority+0x30>
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3b03      	subs	r3, #3
 800153e:	e000      	b.n	8001542 <NVIC_EncodePriority+0x32>
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001544:	f04f 32ff 	mov.w	r2, #4294967295
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43da      	mvns	r2, r3
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	401a      	ands	r2, r3
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001558:	f04f 31ff 	mov.w	r1, #4294967295
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	fa01 f303 	lsl.w	r3, r1, r3
 8001562:	43d9      	mvns	r1, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001568:	4313      	orrs	r3, r2
         );
}
 800156a:	4618      	mov	r0, r3
 800156c:	3724      	adds	r7, #36	@ 0x24
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
	...

08001578 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3b01      	subs	r3, #1
 8001584:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001588:	d301      	bcc.n	800158e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800158a:	2301      	movs	r3, #1
 800158c:	e00f      	b.n	80015ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800158e:	4a0a      	ldr	r2, [pc, #40]	@ (80015b8 <SysTick_Config+0x40>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3b01      	subs	r3, #1
 8001594:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001596:	210f      	movs	r1, #15
 8001598:	f04f 30ff 	mov.w	r0, #4294967295
 800159c:	f7ff ff8e 	bl	80014bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a0:	4b05      	ldr	r3, [pc, #20]	@ (80015b8 <SysTick_Config+0x40>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a6:	4b04      	ldr	r3, [pc, #16]	@ (80015b8 <SysTick_Config+0x40>)
 80015a8:	2207      	movs	r2, #7
 80015aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	e000e010 	.word	0xe000e010

080015bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff ff47 	bl	8001458 <__NVIC_SetPriorityGrouping>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b086      	sub	sp, #24
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	4603      	mov	r3, r0
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
 80015de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015e4:	f7ff ff5c 	bl	80014a0 <__NVIC_GetPriorityGrouping>
 80015e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	68b9      	ldr	r1, [r7, #8]
 80015ee:	6978      	ldr	r0, [r7, #20]
 80015f0:	f7ff ff8e 	bl	8001510 <NVIC_EncodePriority>
 80015f4:	4602      	mov	r2, r0
 80015f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015fa:	4611      	mov	r1, r2
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff ff5d 	bl	80014bc <__NVIC_SetPriority>
}
 8001602:	bf00      	nop
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff ffb0 	bl	8001578 <SysTick_Config>
 8001618:	4603      	mov	r3, r0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001624:	b480      	push	{r7}
 8001626:	b087      	sub	sp, #28
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001632:	e14e      	b.n	80018d2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	2101      	movs	r1, #1
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	fa01 f303 	lsl.w	r3, r1, r3
 8001640:	4013      	ands	r3, r2
 8001642:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2b00      	cmp	r3, #0
 8001648:	f000 8140 	beq.w	80018cc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f003 0303 	and.w	r3, r3, #3
 8001654:	2b01      	cmp	r3, #1
 8001656:	d005      	beq.n	8001664 <HAL_GPIO_Init+0x40>
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 0303 	and.w	r3, r3, #3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d130      	bne.n	80016c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	2203      	movs	r2, #3
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	4013      	ands	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	68da      	ldr	r2, [r3, #12]
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	4313      	orrs	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800169a:	2201      	movs	r2, #1
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43db      	mvns	r3, r3
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	4013      	ands	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	091b      	lsrs	r3, r3, #4
 80016b0:	f003 0201 	and.w	r2, r3, #1
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	4313      	orrs	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f003 0303 	and.w	r3, r3, #3
 80016ce:	2b03      	cmp	r3, #3
 80016d0:	d017      	beq.n	8001702 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	2203      	movs	r2, #3
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43db      	mvns	r3, r3
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	4013      	ands	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	689a      	ldr	r2, [r3, #8]
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f003 0303 	and.w	r3, r3, #3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d123      	bne.n	8001756 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	08da      	lsrs	r2, r3, #3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3208      	adds	r2, #8
 8001716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800171a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	220f      	movs	r2, #15
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43db      	mvns	r3, r3
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	4013      	ands	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	691a      	ldr	r2, [r3, #16]
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	f003 0307 	and.w	r3, r3, #7
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	4313      	orrs	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	08da      	lsrs	r2, r3, #3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3208      	adds	r2, #8
 8001750:	6939      	ldr	r1, [r7, #16]
 8001752:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	2203      	movs	r2, #3
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4013      	ands	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f003 0203 	and.w	r2, r3, #3
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4313      	orrs	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 809a 	beq.w	80018cc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001798:	4b55      	ldr	r3, [pc, #340]	@ (80018f0 <HAL_GPIO_Init+0x2cc>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	4a54      	ldr	r2, [pc, #336]	@ (80018f0 <HAL_GPIO_Init+0x2cc>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	6193      	str	r3, [r2, #24]
 80017a4:	4b52      	ldr	r3, [pc, #328]	@ (80018f0 <HAL_GPIO_Init+0x2cc>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017b0:	4a50      	ldr	r2, [pc, #320]	@ (80018f4 <HAL_GPIO_Init+0x2d0>)
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	089b      	lsrs	r3, r3, #2
 80017b6:	3302      	adds	r3, #2
 80017b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	f003 0303 	and.w	r3, r3, #3
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	220f      	movs	r2, #15
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4013      	ands	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80017da:	d013      	beq.n	8001804 <HAL_GPIO_Init+0x1e0>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4a46      	ldr	r2, [pc, #280]	@ (80018f8 <HAL_GPIO_Init+0x2d4>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d00d      	beq.n	8001800 <HAL_GPIO_Init+0x1dc>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a45      	ldr	r2, [pc, #276]	@ (80018fc <HAL_GPIO_Init+0x2d8>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d007      	beq.n	80017fc <HAL_GPIO_Init+0x1d8>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a44      	ldr	r2, [pc, #272]	@ (8001900 <HAL_GPIO_Init+0x2dc>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d101      	bne.n	80017f8 <HAL_GPIO_Init+0x1d4>
 80017f4:	2303      	movs	r3, #3
 80017f6:	e006      	b.n	8001806 <HAL_GPIO_Init+0x1e2>
 80017f8:	2305      	movs	r3, #5
 80017fa:	e004      	b.n	8001806 <HAL_GPIO_Init+0x1e2>
 80017fc:	2302      	movs	r3, #2
 80017fe:	e002      	b.n	8001806 <HAL_GPIO_Init+0x1e2>
 8001800:	2301      	movs	r3, #1
 8001802:	e000      	b.n	8001806 <HAL_GPIO_Init+0x1e2>
 8001804:	2300      	movs	r3, #0
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	f002 0203 	and.w	r2, r2, #3
 800180c:	0092      	lsls	r2, r2, #2
 800180e:	4093      	lsls	r3, r2
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4313      	orrs	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001816:	4937      	ldr	r1, [pc, #220]	@ (80018f4 <HAL_GPIO_Init+0x2d0>)
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	089b      	lsrs	r3, r3, #2
 800181c:	3302      	adds	r3, #2
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001824:	4b37      	ldr	r3, [pc, #220]	@ (8001904 <HAL_GPIO_Init+0x2e0>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	43db      	mvns	r3, r3
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4013      	ands	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	4313      	orrs	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001848:	4a2e      	ldr	r2, [pc, #184]	@ (8001904 <HAL_GPIO_Init+0x2e0>)
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800184e:	4b2d      	ldr	r3, [pc, #180]	@ (8001904 <HAL_GPIO_Init+0x2e0>)
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	43db      	mvns	r3, r3
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	4013      	ands	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4313      	orrs	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001872:	4a24      	ldr	r2, [pc, #144]	@ (8001904 <HAL_GPIO_Init+0x2e0>)
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001878:	4b22      	ldr	r3, [pc, #136]	@ (8001904 <HAL_GPIO_Init+0x2e0>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	43db      	mvns	r3, r3
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	4013      	ands	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800189c:	4a19      	ldr	r2, [pc, #100]	@ (8001904 <HAL_GPIO_Init+0x2e0>)
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018a2:	4b18      	ldr	r3, [pc, #96]	@ (8001904 <HAL_GPIO_Init+0x2e0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	43db      	mvns	r3, r3
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	4013      	ands	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001904 <HAL_GPIO_Init+0x2e0>)
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	3301      	adds	r3, #1
 80018d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	fa22 f303 	lsr.w	r3, r2, r3
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f47f aea9 	bne.w	8001634 <HAL_GPIO_Init+0x10>
  }
}
 80018e2:	bf00      	nop
 80018e4:	bf00      	nop
 80018e6:	371c      	adds	r7, #28
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40010000 	.word	0x40010000
 80018f8:	48000400 	.word	0x48000400
 80018fc:	48000800 	.word	0x48000800
 8001900:	48000c00 	.word	0x48000c00
 8001904:	40010400 	.word	0x40010400

08001908 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e08d      	b.n	8001a36 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d106      	bne.n	8001934 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff fc22 	bl	8001178 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2224      	movs	r2, #36	@ 0x24
 8001938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 0201 	bic.w	r2, r2, #1
 800194a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001958:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001968:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d107      	bne.n	8001982 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689a      	ldr	r2, [r3, #8]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	e006      	b.n	8001990 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689a      	ldr	r2, [r3, #8]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800198e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	2b02      	cmp	r3, #2
 8001996:	d108      	bne.n	80019aa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	685a      	ldr	r2, [r3, #4]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	e007      	b.n	80019ba <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	6812      	ldr	r2, [r2, #0]
 80019c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80019c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68da      	ldr	r2, [r3, #12]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80019dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	691a      	ldr	r2, [r3, #16]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	430a      	orrs	r2, r1
 80019f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	69d9      	ldr	r1, [r3, #28]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a1a      	ldr	r2, [r3, #32]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	430a      	orrs	r2, r1
 8001a06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f042 0201 	orr.w	r2, r2, #1
 8001a16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2220      	movs	r2, #32
 8001a22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b088      	sub	sp, #32
 8001a44:	af02      	add	r7, sp, #8
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	607a      	str	r2, [r7, #4]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	817b      	strh	r3, [r7, #10]
 8001a50:	4613      	mov	r3, r2
 8001a52:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b20      	cmp	r3, #32
 8001a5e:	f040 80fd 	bne.w	8001c5c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d101      	bne.n	8001a70 <HAL_I2C_Master_Transmit+0x30>
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	e0f6      	b.n	8001c5e <HAL_I2C_Master_Transmit+0x21e>
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a78:	f7ff fcbe 	bl	80013f8 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	2319      	movs	r3, #25
 8001a84:	2201      	movs	r2, #1
 8001a86:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a8a:	68f8      	ldr	r0, [r7, #12]
 8001a8c:	f000 faf6 	bl	800207c <I2C_WaitOnFlagUntilTimeout>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e0e1      	b.n	8001c5e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2221      	movs	r2, #33	@ 0x21
 8001a9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2210      	movs	r2, #16
 8001aa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2200      	movs	r2, #0
 8001aae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	893a      	ldrh	r2, [r7, #8]
 8001aba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	2bff      	cmp	r3, #255	@ 0xff
 8001aca:	d906      	bls.n	8001ada <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	22ff      	movs	r2, #255	@ 0xff
 8001ad0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001ad2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ad6:	617b      	str	r3, [r7, #20]
 8001ad8:	e007      	b.n	8001aea <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001ae4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ae8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d024      	beq.n	8001b3c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af6:	781a      	ldrb	r2, [r3, #0]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b02:	1c5a      	adds	r2, r3, #1
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	3301      	adds	r3, #1
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	8979      	ldrh	r1, [r7, #10]
 8001b2e:	4b4e      	ldr	r3, [pc, #312]	@ (8001c68 <HAL_I2C_Master_Transmit+0x228>)
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f000 fcf1 	bl	800251c <I2C_TransferConfig>
 8001b3a:	e066      	b.n	8001c0a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	8979      	ldrh	r1, [r7, #10]
 8001b44:	4b48      	ldr	r3, [pc, #288]	@ (8001c68 <HAL_I2C_Master_Transmit+0x228>)
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f000 fce6 	bl	800251c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001b50:	e05b      	b.n	8001c0a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	6a39      	ldr	r1, [r7, #32]
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f000 fae9 	bl	800212e <I2C_WaitOnTXISFlagUntilTimeout>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e07b      	b.n	8001c5e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b6a:	781a      	ldrb	r2, [r3, #0]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b76:	1c5a      	adds	r2, r3, #1
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	3b01      	subs	r3, #1
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d034      	beq.n	8001c0a <HAL_I2C_Master_Transmit+0x1ca>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d130      	bne.n	8001c0a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	6a3b      	ldr	r3, [r7, #32]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2180      	movs	r1, #128	@ 0x80
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f000 fa62 	bl	800207c <I2C_WaitOnFlagUntilTimeout>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e04d      	b.n	8001c5e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	2bff      	cmp	r3, #255	@ 0xff
 8001bca:	d90e      	bls.n	8001bea <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	22ff      	movs	r2, #255	@ 0xff
 8001bd0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	8979      	ldrh	r1, [r7, #10]
 8001bda:	2300      	movs	r3, #0
 8001bdc:	9300      	str	r3, [sp, #0]
 8001bde:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f000 fc9a 	bl	800251c <I2C_TransferConfig>
 8001be8:	e00f      	b.n	8001c0a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	8979      	ldrh	r1, [r7, #10]
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c04:	68f8      	ldr	r0, [r7, #12]
 8001c06:	f000 fc89 	bl	800251c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d19e      	bne.n	8001b52 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	6a39      	ldr	r1, [r7, #32]
 8001c18:	68f8      	ldr	r0, [r7, #12]
 8001c1a:	f000 facf 	bl	80021bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e01a      	b.n	8001c5e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6859      	ldr	r1, [r3, #4]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c6c <HAL_I2C_Master_Transmit+0x22c>)
 8001c3c:	400b      	ands	r3, r1
 8001c3e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2220      	movs	r2, #32
 8001c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	e000      	b.n	8001c5e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001c5c:	2302      	movs	r3, #2
  }
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3718      	adds	r7, #24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	80002000 	.word	0x80002000
 8001c6c:	fe00e800 	.word	0xfe00e800

08001c70 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b088      	sub	sp, #32
 8001c74:	af02      	add	r7, sp, #8
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	607a      	str	r2, [r7, #4]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	817b      	strh	r3, [r7, #10]
 8001c80:	4613      	mov	r3, r2
 8001c82:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b20      	cmp	r3, #32
 8001c8e:	f040 80db 	bne.w	8001e48 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d101      	bne.n	8001ca0 <HAL_I2C_Master_Receive+0x30>
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	e0d4      	b.n	8001e4a <HAL_I2C_Master_Receive+0x1da>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ca8:	f7ff fba6 	bl	80013f8 <HAL_GetTick>
 8001cac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	2319      	movs	r3, #25
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001cba:	68f8      	ldr	r0, [r7, #12]
 8001cbc:	f000 f9de 	bl	800207c <I2C_WaitOnFlagUntilTimeout>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e0bf      	b.n	8001e4a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2222      	movs	r2, #34	@ 0x22
 8001cce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2210      	movs	r2, #16
 8001cd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	893a      	ldrh	r2, [r7, #8]
 8001cea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	2bff      	cmp	r3, #255	@ 0xff
 8001cfa:	d90e      	bls.n	8001d1a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	8979      	ldrh	r1, [r7, #10]
 8001d0a:	4b52      	ldr	r3, [pc, #328]	@ (8001e54 <HAL_I2C_Master_Receive+0x1e4>)
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	f000 fc02 	bl	800251c <I2C_TransferConfig>
 8001d18:	e06d      	b.n	8001df6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	8979      	ldrh	r1, [r7, #10]
 8001d2c:	4b49      	ldr	r3, [pc, #292]	@ (8001e54 <HAL_I2C_Master_Receive+0x1e4>)
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d34:	68f8      	ldr	r0, [r7, #12]
 8001d36:	f000 fbf1 	bl	800251c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001d3a:	e05c      	b.n	8001df6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	6a39      	ldr	r1, [r7, #32]
 8001d40:	68f8      	ldr	r0, [r7, #12]
 8001d42:	f000 fa7f 	bl	8002244 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e07c      	b.n	8001e4a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d62:	1c5a      	adds	r2, r3, #1
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d034      	beq.n	8001df6 <HAL_I2C_Master_Receive+0x186>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d130      	bne.n	8001df6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2180      	movs	r1, #128	@ 0x80
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f000 f96c 	bl	800207c <I2C_WaitOnFlagUntilTimeout>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e04d      	b.n	8001e4a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	2bff      	cmp	r3, #255	@ 0xff
 8001db6:	d90e      	bls.n	8001dd6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	22ff      	movs	r2, #255	@ 0xff
 8001dbc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	8979      	ldrh	r1, [r7, #10]
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	9300      	str	r3, [sp, #0]
 8001dca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f000 fba4 	bl	800251c <I2C_TransferConfig>
 8001dd4:	e00f      	b.n	8001df6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	8979      	ldrh	r1, [r7, #10]
 8001de8:	2300      	movs	r3, #0
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f000 fb93 	bl	800251c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d19d      	bne.n	8001d3c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e00:	697a      	ldr	r2, [r7, #20]
 8001e02:	6a39      	ldr	r1, [r7, #32]
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	f000 f9d9 	bl	80021bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e01a      	b.n	8001e4a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2220      	movs	r2, #32
 8001e1a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6859      	ldr	r1, [r3, #4]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	4b0c      	ldr	r3, [pc, #48]	@ (8001e58 <HAL_I2C_Master_Receive+0x1e8>)
 8001e28:	400b      	ands	r3, r1
 8001e2a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2220      	movs	r2, #32
 8001e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e44:	2300      	movs	r3, #0
 8001e46:	e000      	b.n	8001e4a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001e48:	2302      	movs	r3, #2
  }
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	80002400 	.word	0x80002400
 8001e58:	fe00e800 	.word	0xfe00e800

08001e5c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08a      	sub	sp, #40	@ 0x28
 8001e60:	af02      	add	r7, sp, #8
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	603b      	str	r3, [r7, #0]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b20      	cmp	r3, #32
 8001e7a:	f040 80d6 	bne.w	800202a <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e8c:	d101      	bne.n	8001e92 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e0cc      	b.n	800202c <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d101      	bne.n	8001ea0 <HAL_I2C_IsDeviceReady+0x44>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	e0c5      	b.n	800202c <HAL_I2C_IsDeviceReady+0x1d0>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2224      	movs	r2, #36	@ 0x24
 8001eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d107      	bne.n	8001ece <HAL_I2C_IsDeviceReady+0x72>
 8001ebe:	897b      	ldrh	r3, [r7, #10]
 8001ec0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ec4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ec8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ecc:	e006      	b.n	8001edc <HAL_I2C_IsDeviceReady+0x80>
 8001ece:	897b      	ldrh	r3, [r7, #10]
 8001ed0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ed4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ed8:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	6812      	ldr	r2, [r2, #0]
 8001ee0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001ee2:	f7ff fa89 	bl	80013f8 <HAL_GetTick>
 8001ee6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	f003 0320 	and.w	r3, r3, #32
 8001ef2:	2b20      	cmp	r3, #32
 8001ef4:	bf0c      	ite	eq
 8001ef6:	2301      	moveq	r3, #1
 8001ef8:	2300      	movne	r3, #0
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	f003 0310 	and.w	r3, r3, #16
 8001f08:	2b10      	cmp	r3, #16
 8001f0a:	bf0c      	ite	eq
 8001f0c:	2301      	moveq	r3, #1
 8001f0e:	2300      	movne	r3, #0
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001f14:	e034      	b.n	8001f80 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f1c:	d01a      	beq.n	8001f54 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f1e:	f7ff fa6b 	bl	80013f8 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d302      	bcc.n	8001f34 <HAL_I2C_IsDeviceReady+0xd8>
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d10f      	bne.n	8001f54 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2220      	movs	r2, #32
 8001f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f40:	f043 0220 	orr.w	r2, r3, #32
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e06b      	b.n	800202c <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	f003 0320 	and.w	r3, r3, #32
 8001f5e:	2b20      	cmp	r3, #32
 8001f60:	bf0c      	ite	eq
 8001f62:	2301      	moveq	r3, #1
 8001f64:	2300      	movne	r3, #0
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	f003 0310 	and.w	r3, r3, #16
 8001f74:	2b10      	cmp	r3, #16
 8001f76:	bf0c      	ite	eq
 8001f78:	2301      	moveq	r3, #1
 8001f7a:	2300      	movne	r3, #0
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001f80:	7ffb      	ldrb	r3, [r7, #31]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d102      	bne.n	8001f8c <HAL_I2C_IsDeviceReady+0x130>
 8001f86:	7fbb      	ldrb	r3, [r7, #30]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0c4      	beq.n	8001f16 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	f003 0310 	and.w	r3, r3, #16
 8001f96:	2b10      	cmp	r3, #16
 8001f98:	d01a      	beq.n	8001fd0 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	9300      	str	r3, [sp, #0]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	2120      	movs	r1, #32
 8001fa4:	68f8      	ldr	r0, [r7, #12]
 8001fa6:	f000 f869 	bl	800207c <I2C_WaitOnFlagUntilTimeout>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e03b      	b.n	800202c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2220      	movs	r2, #32
 8001fba:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2220      	movs	r2, #32
 8001fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	e02d      	b.n	800202c <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2120      	movs	r1, #32
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f000 f84e 	bl	800207c <I2C_WaitOnFlagUntilTimeout>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e020      	b.n	800202c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2210      	movs	r2, #16
 8001ff0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	429a      	cmp	r2, r3
 8002006:	f63f af56 	bhi.w	8001eb6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2220      	movs	r2, #32
 800200e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002016:	f043 0220 	orr.w	r2, r3, #32
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800202a:	2302      	movs	r3, #2
  }
}
 800202c:	4618      	mov	r0, r3
 800202e:	3720      	adds	r7, #32
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b02      	cmp	r3, #2
 8002048:	d103      	bne.n	8002052 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2200      	movs	r2, #0
 8002050:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b01      	cmp	r3, #1
 800205e:	d007      	beq.n	8002070 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	699a      	ldr	r2, [r3, #24]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f042 0201 	orr.w	r2, r2, #1
 800206e:	619a      	str	r2, [r3, #24]
  }
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	603b      	str	r3, [r7, #0]
 8002088:	4613      	mov	r3, r2
 800208a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800208c:	e03b      	b.n	8002106 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	6839      	ldr	r1, [r7, #0]
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 f962 	bl	800235c <I2C_IsErrorOccurred>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e041      	b.n	8002126 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a8:	d02d      	beq.n	8002106 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020aa:	f7ff f9a5 	bl	80013f8 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d302      	bcc.n	80020c0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d122      	bne.n	8002106 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	699a      	ldr	r2, [r3, #24]
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	4013      	ands	r3, r2
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	bf0c      	ite	eq
 80020d0:	2301      	moveq	r3, #1
 80020d2:	2300      	movne	r3, #0
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	461a      	mov	r2, r3
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d113      	bne.n	8002106 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e2:	f043 0220 	orr.w	r2, r3, #32
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2220      	movs	r2, #32
 80020ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e00f      	b.n	8002126 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	699a      	ldr	r2, [r3, #24]
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	4013      	ands	r3, r2
 8002110:	68ba      	ldr	r2, [r7, #8]
 8002112:	429a      	cmp	r2, r3
 8002114:	bf0c      	ite	eq
 8002116:	2301      	moveq	r3, #1
 8002118:	2300      	movne	r3, #0
 800211a:	b2db      	uxtb	r3, r3
 800211c:	461a      	mov	r2, r3
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	429a      	cmp	r2, r3
 8002122:	d0b4      	beq.n	800208e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b084      	sub	sp, #16
 8002132:	af00      	add	r7, sp, #0
 8002134:	60f8      	str	r0, [r7, #12]
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800213a:	e033      	b.n	80021a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	68b9      	ldr	r1, [r7, #8]
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f000 f90b 	bl	800235c <I2C_IsErrorOccurred>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e031      	b.n	80021b4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002156:	d025      	beq.n	80021a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002158:	f7ff f94e 	bl	80013f8 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	429a      	cmp	r2, r3
 8002166:	d302      	bcc.n	800216e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d11a      	bne.n	80021a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b02      	cmp	r3, #2
 800217a:	d013      	beq.n	80021a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002180:	f043 0220 	orr.w	r2, r3, #32
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2220      	movs	r2, #32
 800218c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e007      	b.n	80021b4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d1c4      	bne.n	800213c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021c8:	e02f      	b.n	800222a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68b9      	ldr	r1, [r7, #8]
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 f8c4 	bl	800235c <I2C_IsErrorOccurred>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e02d      	b.n	800223a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021de:	f7ff f90b 	bl	80013f8 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	68ba      	ldr	r2, [r7, #8]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d302      	bcc.n	80021f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d11a      	bne.n	800222a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	f003 0320 	and.w	r3, r3, #32
 80021fe:	2b20      	cmp	r3, #32
 8002200:	d013      	beq.n	800222a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002206:	f043 0220 	orr.w	r2, r3, #32
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2220      	movs	r2, #32
 8002212:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e007      	b.n	800223a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	f003 0320 	and.w	r3, r3, #32
 8002234:	2b20      	cmp	r3, #32
 8002236:	d1c8      	bne.n	80021ca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
	...

08002244 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002250:	2300      	movs	r3, #0
 8002252:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002254:	e071      	b.n	800233a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	68b9      	ldr	r1, [r7, #8]
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f000 f87e 	bl	800235c <I2C_IsErrorOccurred>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	f003 0320 	and.w	r3, r3, #32
 8002274:	2b20      	cmp	r3, #32
 8002276:	d13b      	bne.n	80022f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002278:	7dfb      	ldrb	r3, [r7, #23]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d138      	bne.n	80022f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b04      	cmp	r3, #4
 800228a:	d105      	bne.n	8002298 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002294:	2300      	movs	r3, #0
 8002296:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	f003 0310 	and.w	r3, r3, #16
 80022a2:	2b10      	cmp	r3, #16
 80022a4:	d121      	bne.n	80022ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2210      	movs	r2, #16
 80022ac:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2204      	movs	r2, #4
 80022b2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2220      	movs	r2, #32
 80022ba:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6859      	ldr	r1, [r3, #4]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	4b24      	ldr	r3, [pc, #144]	@ (8002358 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80022c8:	400b      	ands	r3, r1
 80022ca:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2220      	movs	r2, #32
 80022d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	75fb      	strb	r3, [r7, #23]
 80022e8:	e002      	b.n	80022f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80022f0:	f7ff f882 	bl	80013f8 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d302      	bcc.n	8002306 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d119      	bne.n	800233a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8002306:	7dfb      	ldrb	r3, [r7, #23]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d116      	bne.n	800233a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	f003 0304 	and.w	r3, r3, #4
 8002316:	2b04      	cmp	r3, #4
 8002318:	d00f      	beq.n	800233a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231e:	f043 0220 	orr.w	r2, r3, #32
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2220      	movs	r2, #32
 800232a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b04      	cmp	r3, #4
 8002346:	d002      	beq.n	800234e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8002348:	7dfb      	ldrb	r3, [r7, #23]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d083      	beq.n	8002256 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800234e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	fe00e800 	.word	0xfe00e800

0800235c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08a      	sub	sp, #40	@ 0x28
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002368:	2300      	movs	r3, #0
 800236a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002376:	2300      	movs	r3, #0
 8002378:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	f003 0310 	and.w	r3, r3, #16
 8002384:	2b00      	cmp	r3, #0
 8002386:	d068      	beq.n	800245a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2210      	movs	r2, #16
 800238e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002390:	e049      	b.n	8002426 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002398:	d045      	beq.n	8002426 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800239a:	f7ff f82d 	bl	80013f8 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d302      	bcc.n	80023b0 <I2C_IsErrorOccurred+0x54>
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d13a      	bne.n	8002426 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023ba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80023c2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023d2:	d121      	bne.n	8002418 <I2C_IsErrorOccurred+0xbc>
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80023da:	d01d      	beq.n	8002418 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80023dc:	7cfb      	ldrb	r3, [r7, #19]
 80023de:	2b20      	cmp	r3, #32
 80023e0:	d01a      	beq.n	8002418 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80023f0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80023f2:	f7ff f801 	bl	80013f8 <HAL_GetTick>
 80023f6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023f8:	e00e      	b.n	8002418 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80023fa:	f7fe fffd 	bl	80013f8 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b19      	cmp	r3, #25
 8002406:	d907      	bls.n	8002418 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	f043 0320 	orr.w	r3, r3, #32
 800240e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002416:	e006      	b.n	8002426 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	f003 0320 	and.w	r3, r3, #32
 8002422:	2b20      	cmp	r3, #32
 8002424:	d1e9      	bne.n	80023fa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	f003 0320 	and.w	r3, r3, #32
 8002430:	2b20      	cmp	r3, #32
 8002432:	d003      	beq.n	800243c <I2C_IsErrorOccurred+0xe0>
 8002434:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0aa      	beq.n	8002392 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800243c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002440:	2b00      	cmp	r3, #0
 8002442:	d103      	bne.n	800244c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2220      	movs	r2, #32
 800244a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800244c:	6a3b      	ldr	r3, [r7, #32]
 800244e:	f043 0304 	orr.w	r3, r3, #4
 8002452:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00b      	beq.n	8002484 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800246c:	6a3b      	ldr	r3, [r7, #32]
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800247c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00b      	beq.n	80024a6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	f043 0308 	orr.w	r3, r3, #8
 8002494:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800249e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00b      	beq.n	80024c8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80024b0:	6a3b      	ldr	r3, [r7, #32]
 80024b2:	f043 0302 	orr.w	r3, r3, #2
 80024b6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80024c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d01c      	beq.n	800250a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f7ff fdaf 	bl	8002034 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6859      	ldr	r1, [r3, #4]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002518 <I2C_IsErrorOccurred+0x1bc>)
 80024e2:	400b      	ands	r3, r1
 80024e4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80024ea:	6a3b      	ldr	r3, [r7, #32]
 80024ec:	431a      	orrs	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2220      	movs	r2, #32
 80024f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800250a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800250e:	4618      	mov	r0, r3
 8002510:	3728      	adds	r7, #40	@ 0x28
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	fe00e800 	.word	0xfe00e800

0800251c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800251c:	b480      	push	{r7}
 800251e:	b087      	sub	sp, #28
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	607b      	str	r3, [r7, #4]
 8002526:	460b      	mov	r3, r1
 8002528:	817b      	strh	r3, [r7, #10]
 800252a:	4613      	mov	r3, r2
 800252c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800252e:	897b      	ldrh	r3, [r7, #10]
 8002530:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002534:	7a7b      	ldrb	r3, [r7, #9]
 8002536:	041b      	lsls	r3, r3, #16
 8002538:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800253c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002542:	6a3b      	ldr	r3, [r7, #32]
 8002544:	4313      	orrs	r3, r2
 8002546:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800254a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	6a3b      	ldr	r3, [r7, #32]
 8002554:	0d5b      	lsrs	r3, r3, #21
 8002556:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800255a:	4b08      	ldr	r3, [pc, #32]	@ (800257c <I2C_TransferConfig+0x60>)
 800255c:	430b      	orrs	r3, r1
 800255e:	43db      	mvns	r3, r3
 8002560:	ea02 0103 	and.w	r1, r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	430a      	orrs	r2, r1
 800256c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800256e:	bf00      	nop
 8002570:	371c      	adds	r7, #28
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	03ff63ff 	.word	0x03ff63ff

08002580 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b20      	cmp	r3, #32
 8002594:	d138      	bne.n	8002608 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800259c:	2b01      	cmp	r3, #1
 800259e:	d101      	bne.n	80025a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80025a0:	2302      	movs	r3, #2
 80025a2:	e032      	b.n	800260a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2224      	movs	r2, #36	@ 0x24
 80025b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 0201 	bic.w	r2, r2, #1
 80025c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80025d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6819      	ldr	r1, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f042 0201 	orr.w	r2, r2, #1
 80025f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2220      	movs	r2, #32
 80025f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002604:	2300      	movs	r3, #0
 8002606:	e000      	b.n	800260a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002608:	2302      	movs	r3, #2
  }
}
 800260a:	4618      	mov	r0, r3
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002616:	b480      	push	{r7}
 8002618:	b085      	sub	sp, #20
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
 800261e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b20      	cmp	r3, #32
 800262a:	d139      	bne.n	80026a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002632:	2b01      	cmp	r3, #1
 8002634:	d101      	bne.n	800263a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002636:	2302      	movs	r3, #2
 8002638:	e033      	b.n	80026a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2224      	movs	r2, #36	@ 0x24
 8002646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0201 	bic.w	r2, r2, #1
 8002658:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002668:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	021b      	lsls	r3, r3, #8
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	4313      	orrs	r3, r2
 8002672:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 0201 	orr.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2220      	movs	r2, #32
 8002690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800269c:	2300      	movs	r3, #0
 800269e:	e000      	b.n	80026a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80026a0:	2302      	movs	r3, #2
  }
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026c0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d102      	bne.n	80026d6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	f000 bff4 	b.w	80036be <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 816d 	beq.w	80029c6 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80026ec:	4bb4      	ldr	r3, [pc, #720]	@ (80029c0 <HAL_RCC_OscConfig+0x310>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f003 030c 	and.w	r3, r3, #12
 80026f4:	2b04      	cmp	r3, #4
 80026f6:	d00c      	beq.n	8002712 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026f8:	4bb1      	ldr	r3, [pc, #708]	@ (80029c0 <HAL_RCC_OscConfig+0x310>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 030c 	and.w	r3, r3, #12
 8002700:	2b08      	cmp	r3, #8
 8002702:	d157      	bne.n	80027b4 <HAL_RCC_OscConfig+0x104>
 8002704:	4bae      	ldr	r3, [pc, #696]	@ (80029c0 <HAL_RCC_OscConfig+0x310>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800270c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002710:	d150      	bne.n	80027b4 <HAL_RCC_OscConfig+0x104>
 8002712:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002716:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800271e:	fa93 f3a3 	rbit	r3, r3
 8002722:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002726:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800272a:	fab3 f383 	clz	r3, r3
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b3f      	cmp	r3, #63	@ 0x3f
 8002732:	d802      	bhi.n	800273a <HAL_RCC_OscConfig+0x8a>
 8002734:	4ba2      	ldr	r3, [pc, #648]	@ (80029c0 <HAL_RCC_OscConfig+0x310>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	e015      	b.n	8002766 <HAL_RCC_OscConfig+0xb6>
 800273a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800273e:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002742:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002746:	fa93 f3a3 	rbit	r3, r3
 800274a:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800274e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002752:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002756:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800275a:	fa93 f3a3 	rbit	r3, r3
 800275e:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002762:	4b97      	ldr	r3, [pc, #604]	@ (80029c0 <HAL_RCC_OscConfig+0x310>)
 8002764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002766:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800276a:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800276e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002772:	fa92 f2a2 	rbit	r2, r2
 8002776:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800277a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800277e:	fab2 f282 	clz	r2, r2
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	f042 0220 	orr.w	r2, r2, #32
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	f002 021f 	and.w	r2, r2, #31
 800278e:	2101      	movs	r1, #1
 8002790:	fa01 f202 	lsl.w	r2, r1, r2
 8002794:	4013      	ands	r3, r2
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 8114 	beq.w	80029c4 <HAL_RCC_OscConfig+0x314>
 800279c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f040 810b 	bne.w	80029c4 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	f000 bf85 	b.w	80036be <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027c4:	d106      	bne.n	80027d4 <HAL_RCC_OscConfig+0x124>
 80027c6:	4b7e      	ldr	r3, [pc, #504]	@ (80029c0 <HAL_RCC_OscConfig+0x310>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a7d      	ldr	r2, [pc, #500]	@ (80029c0 <HAL_RCC_OscConfig+0x310>)
 80027cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027d0:	6013      	str	r3, [r2, #0]
 80027d2:	e036      	b.n	8002842 <HAL_RCC_OscConfig+0x192>
 80027d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10c      	bne.n	80027fe <HAL_RCC_OscConfig+0x14e>
 80027e4:	4b76      	ldr	r3, [pc, #472]	@ (80029c0 <HAL_RCC_OscConfig+0x310>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a75      	ldr	r2, [pc, #468]	@ (80029c0 <HAL_RCC_OscConfig+0x310>)
 80027ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027ee:	6013      	str	r3, [r2, #0]
 80027f0:	4b73      	ldr	r3, [pc, #460]	@ (80029c0 <HAL_RCC_OscConfig+0x310>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a72      	ldr	r2, [pc, #456]	@ (80029c0 <HAL_RCC_OscConfig+0x310>)
 80027f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027fa:	6013      	str	r3, [r2, #0]
 80027fc:	e021      	b.n	8002842 <HAL_RCC_OscConfig+0x192>
 80027fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002802:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800280e:	d10c      	bne.n	800282a <HAL_RCC_OscConfig+0x17a>
 8002810:	4b6b      	ldr	r3, [pc, #428]	@ (80029c0 <HAL_RCC_OscConfig+0x310>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a6a      	ldr	r2, [pc, #424]	@ (80029c0 <HAL_RCC_OscConfig+0x310>)
 8002816:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800281a:	6013      	str	r3, [r2, #0]
 800281c:	4b68      	ldr	r3, [pc, #416]	@ (80029c0 <HAL_RCC_OscConfig+0x310>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a67      	ldr	r2, [pc, #412]	@ (80029c0 <HAL_RCC_OscConfig+0x310>)
 8002822:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002826:	6013      	str	r3, [r2, #0]
 8002828:	e00b      	b.n	8002842 <HAL_RCC_OscConfig+0x192>
 800282a:	4b65      	ldr	r3, [pc, #404]	@ (80029c0 <HAL_RCC_OscConfig+0x310>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a64      	ldr	r2, [pc, #400]	@ (80029c0 <HAL_RCC_OscConfig+0x310>)
 8002830:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	4b62      	ldr	r3, [pc, #392]	@ (80029c0 <HAL_RCC_OscConfig+0x310>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a61      	ldr	r2, [pc, #388]	@ (80029c0 <HAL_RCC_OscConfig+0x310>)
 800283c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002840:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002842:	4b5f      	ldr	r3, [pc, #380]	@ (80029c0 <HAL_RCC_OscConfig+0x310>)
 8002844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002846:	f023 020f 	bic.w	r2, r3, #15
 800284a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800284e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	495a      	ldr	r1, [pc, #360]	@ (80029c0 <HAL_RCC_OscConfig+0x310>)
 8002858:	4313      	orrs	r3, r2
 800285a:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800285c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002860:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d054      	beq.n	8002916 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286c:	f7fe fdc4 	bl	80013f8 <HAL_GetTick>
 8002870:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002874:	e00a      	b.n	800288c <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002876:	f7fe fdbf 	bl	80013f8 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b64      	cmp	r3, #100	@ 0x64
 8002884:	d902      	bls.n	800288c <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	f000 bf19 	b.w	80036be <HAL_RCC_OscConfig+0x100e>
 800288c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002890:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002894:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002898:	fa93 f3a3 	rbit	r3, r3
 800289c:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80028a0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a4:	fab3 f383 	clz	r3, r3
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80028ac:	d802      	bhi.n	80028b4 <HAL_RCC_OscConfig+0x204>
 80028ae:	4b44      	ldr	r3, [pc, #272]	@ (80029c0 <HAL_RCC_OscConfig+0x310>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	e015      	b.n	80028e0 <HAL_RCC_OscConfig+0x230>
 80028b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028b8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80028c0:	fa93 f3a3 	rbit	r3, r3
 80028c4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80028c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028cc:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80028d0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80028d4:	fa93 f3a3 	rbit	r3, r3
 80028d8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80028dc:	4b38      	ldr	r3, [pc, #224]	@ (80029c0 <HAL_RCC_OscConfig+0x310>)
 80028de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80028e4:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80028e8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80028ec:	fa92 f2a2 	rbit	r2, r2
 80028f0:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80028f4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80028f8:	fab2 f282 	clz	r2, r2
 80028fc:	b2d2      	uxtb	r2, r2
 80028fe:	f042 0220 	orr.w	r2, r2, #32
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	f002 021f 	and.w	r2, r2, #31
 8002908:	2101      	movs	r1, #1
 800290a:	fa01 f202 	lsl.w	r2, r1, r2
 800290e:	4013      	ands	r3, r2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0b0      	beq.n	8002876 <HAL_RCC_OscConfig+0x1c6>
 8002914:	e057      	b.n	80029c6 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002916:	f7fe fd6f 	bl	80013f8 <HAL_GetTick>
 800291a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800291e:	e00a      	b.n	8002936 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002920:	f7fe fd6a 	bl	80013f8 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b64      	cmp	r3, #100	@ 0x64
 800292e:	d902      	bls.n	8002936 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	f000 bec4 	b.w	80036be <HAL_RCC_OscConfig+0x100e>
 8002936:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800293a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002942:	fa93 f3a3 	rbit	r3, r3
 8002946:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800294a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800294e:	fab3 f383 	clz	r3, r3
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b3f      	cmp	r3, #63	@ 0x3f
 8002956:	d802      	bhi.n	800295e <HAL_RCC_OscConfig+0x2ae>
 8002958:	4b19      	ldr	r3, [pc, #100]	@ (80029c0 <HAL_RCC_OscConfig+0x310>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	e015      	b.n	800298a <HAL_RCC_OscConfig+0x2da>
 800295e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002962:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002966:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800296a:	fa93 f3a3 	rbit	r3, r3
 800296e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002972:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002976:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800297a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800297e:	fa93 f3a3 	rbit	r3, r3
 8002982:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002986:	4b0e      	ldr	r3, [pc, #56]	@ (80029c0 <HAL_RCC_OscConfig+0x310>)
 8002988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800298e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002992:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002996:	fa92 f2a2 	rbit	r2, r2
 800299a:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800299e:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80029a2:	fab2 f282 	clz	r2, r2
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	f042 0220 	orr.w	r2, r2, #32
 80029ac:	b2d2      	uxtb	r2, r2
 80029ae:	f002 021f 	and.w	r2, r2, #31
 80029b2:	2101      	movs	r1, #1
 80029b4:	fa01 f202 	lsl.w	r2, r1, r2
 80029b8:	4013      	ands	r3, r2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1b0      	bne.n	8002920 <HAL_RCC_OscConfig+0x270>
 80029be:	e002      	b.n	80029c6 <HAL_RCC_OscConfig+0x316>
 80029c0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 816c 	beq.w	8002cb4 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80029dc:	4bcc      	ldr	r3, [pc, #816]	@ (8002d10 <HAL_RCC_OscConfig+0x660>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 030c 	and.w	r3, r3, #12
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00b      	beq.n	8002a00 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80029e8:	4bc9      	ldr	r3, [pc, #804]	@ (8002d10 <HAL_RCC_OscConfig+0x660>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 030c 	and.w	r3, r3, #12
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	d16d      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x420>
 80029f4:	4bc6      	ldr	r3, [pc, #792]	@ (8002d10 <HAL_RCC_OscConfig+0x660>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d167      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x420>
 8002a00:	2302      	movs	r3, #2
 8002a02:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a06:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002a0a:	fa93 f3a3 	rbit	r3, r3
 8002a0e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002a12:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a16:	fab3 f383 	clz	r3, r3
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a1e:	d802      	bhi.n	8002a26 <HAL_RCC_OscConfig+0x376>
 8002a20:	4bbb      	ldr	r3, [pc, #748]	@ (8002d10 <HAL_RCC_OscConfig+0x660>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	e013      	b.n	8002a4e <HAL_RCC_OscConfig+0x39e>
 8002a26:	2302      	movs	r3, #2
 8002a28:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002a30:	fa93 f3a3 	rbit	r3, r3
 8002a34:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002a38:	2302      	movs	r3, #2
 8002a3a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002a3e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002a42:	fa93 f3a3 	rbit	r3, r3
 8002a46:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002a4a:	4bb1      	ldr	r3, [pc, #708]	@ (8002d10 <HAL_RCC_OscConfig+0x660>)
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4e:	2202      	movs	r2, #2
 8002a50:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002a54:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002a58:	fa92 f2a2 	rbit	r2, r2
 8002a5c:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002a60:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002a64:	fab2 f282 	clz	r2, r2
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	f042 0220 	orr.w	r2, r2, #32
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	f002 021f 	and.w	r2, r2, #31
 8002a74:	2101      	movs	r1, #1
 8002a76:	fa01 f202 	lsl.w	r2, r1, r2
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00a      	beq.n	8002a96 <HAL_RCC_OscConfig+0x3e6>
 8002a80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a84:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d002      	beq.n	8002a96 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	f000 be14 	b.w	80036be <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a96:	4b9e      	ldr	r3, [pc, #632]	@ (8002d10 <HAL_RCC_OscConfig+0x660>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	21f8      	movs	r1, #248	@ 0xf8
 8002aac:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab0:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002ab4:	fa91 f1a1 	rbit	r1, r1
 8002ab8:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002abc:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002ac0:	fab1 f181 	clz	r1, r1
 8002ac4:	b2c9      	uxtb	r1, r1
 8002ac6:	408b      	lsls	r3, r1
 8002ac8:	4991      	ldr	r1, [pc, #580]	@ (8002d10 <HAL_RCC_OscConfig+0x660>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ace:	e0f1      	b.n	8002cb4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ad0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 8083 	beq.w	8002be8 <HAL_RCC_OscConfig+0x538>
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae8:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002aec:	fa93 f3a3 	rbit	r3, r3
 8002af0:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002af4:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002af8:	fab3 f383 	clz	r3, r3
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b02:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	461a      	mov	r2, r3
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0e:	f7fe fc73 	bl	80013f8 <HAL_GetTick>
 8002b12:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b16:	e00a      	b.n	8002b2e <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b18:	f7fe fc6e 	bl	80013f8 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d902      	bls.n	8002b2e <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	f000 bdc8 	b.w	80036be <HAL_RCC_OscConfig+0x100e>
 8002b2e:	2302      	movs	r3, #2
 8002b30:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b34:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002b38:	fa93 f3a3 	rbit	r3, r3
 8002b3c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002b40:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b44:	fab3 f383 	clz	r3, r3
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b4c:	d802      	bhi.n	8002b54 <HAL_RCC_OscConfig+0x4a4>
 8002b4e:	4b70      	ldr	r3, [pc, #448]	@ (8002d10 <HAL_RCC_OscConfig+0x660>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	e013      	b.n	8002b7c <HAL_RCC_OscConfig+0x4cc>
 8002b54:	2302      	movs	r3, #2
 8002b56:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002b5e:	fa93 f3a3 	rbit	r3, r3
 8002b62:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002b66:	2302      	movs	r3, #2
 8002b68:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002b6c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002b70:	fa93 f3a3 	rbit	r3, r3
 8002b74:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002b78:	4b65      	ldr	r3, [pc, #404]	@ (8002d10 <HAL_RCC_OscConfig+0x660>)
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002b82:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002b86:	fa92 f2a2 	rbit	r2, r2
 8002b8a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002b8e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002b92:	fab2 f282 	clz	r2, r2
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	f042 0220 	orr.w	r2, r2, #32
 8002b9c:	b2d2      	uxtb	r2, r2
 8002b9e:	f002 021f 	and.w	r2, r2, #31
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba8:	4013      	ands	r3, r2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0b4      	beq.n	8002b18 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bae:	4b58      	ldr	r3, [pc, #352]	@ (8002d10 <HAL_RCC_OscConfig+0x660>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	21f8      	movs	r1, #248	@ 0xf8
 8002bc4:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002bcc:	fa91 f1a1 	rbit	r1, r1
 8002bd0:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002bd4:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002bd8:	fab1 f181 	clz	r1, r1
 8002bdc:	b2c9      	uxtb	r1, r1
 8002bde:	408b      	lsls	r3, r1
 8002be0:	494b      	ldr	r1, [pc, #300]	@ (8002d10 <HAL_RCC_OscConfig+0x660>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	600b      	str	r3, [r1, #0]
 8002be6:	e065      	b.n	8002cb4 <HAL_RCC_OscConfig+0x604>
 8002be8:	2301      	movs	r3, #1
 8002bea:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002bf2:	fa93 f3a3 	rbit	r3, r3
 8002bf6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002bfa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bfe:	fab3 f383 	clz	r3, r3
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002c08:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	461a      	mov	r2, r3
 8002c10:	2300      	movs	r3, #0
 8002c12:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7fe fbf0 	bl	80013f8 <HAL_GetTick>
 8002c18:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c1c:	e00a      	b.n	8002c34 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c1e:	f7fe fbeb 	bl	80013f8 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d902      	bls.n	8002c34 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	f000 bd45 	b.w	80036be <HAL_RCC_OscConfig+0x100e>
 8002c34:	2302      	movs	r3, #2
 8002c36:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002c3e:	fa93 f3a3 	rbit	r3, r3
 8002c42:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002c46:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c4a:	fab3 f383 	clz	r3, r3
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b3f      	cmp	r3, #63	@ 0x3f
 8002c52:	d802      	bhi.n	8002c5a <HAL_RCC_OscConfig+0x5aa>
 8002c54:	4b2e      	ldr	r3, [pc, #184]	@ (8002d10 <HAL_RCC_OscConfig+0x660>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	e013      	b.n	8002c82 <HAL_RCC_OscConfig+0x5d2>
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c60:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002c64:	fa93 f3a3 	rbit	r3, r3
 8002c68:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002c72:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002c76:	fa93 f3a3 	rbit	r3, r3
 8002c7a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002c7e:	4b24      	ldr	r3, [pc, #144]	@ (8002d10 <HAL_RCC_OscConfig+0x660>)
 8002c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c82:	2202      	movs	r2, #2
 8002c84:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002c88:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002c8c:	fa92 f2a2 	rbit	r2, r2
 8002c90:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002c94:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002c98:	fab2 f282 	clz	r2, r2
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	f042 0220 	orr.w	r2, r2, #32
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	f002 021f 	and.w	r2, r2, #31
 8002ca8:	2101      	movs	r1, #1
 8002caa:	fa01 f202 	lsl.w	r2, r1, r2
 8002cae:	4013      	ands	r3, r2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1b4      	bne.n	8002c1e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cb8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0308 	and.w	r3, r3, #8
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 8115 	beq.w	8002ef4 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d07e      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x728>
 8002cda:	2301      	movs	r3, #1
 8002cdc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002ce4:	fa93 f3a3 	rbit	r3, r3
 8002ce8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002cec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cf0:	fab3 f383 	clz	r3, r3
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	4b06      	ldr	r3, [pc, #24]	@ (8002d14 <HAL_RCC_OscConfig+0x664>)
 8002cfa:	4413      	add	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	461a      	mov	r2, r3
 8002d00:	2301      	movs	r3, #1
 8002d02:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d04:	f7fe fb78 	bl	80013f8 <HAL_GetTick>
 8002d08:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d0c:	e00f      	b.n	8002d2e <HAL_RCC_OscConfig+0x67e>
 8002d0e:	bf00      	nop
 8002d10:	40021000 	.word	0x40021000
 8002d14:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d18:	f7fe fb6e 	bl	80013f8 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d902      	bls.n	8002d2e <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	f000 bcc8 	b.w	80036be <HAL_RCC_OscConfig+0x100e>
 8002d2e:	2302      	movs	r3, #2
 8002d30:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d34:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002d38:	fa93 f3a3 	rbit	r3, r3
 8002d3c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002d40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d44:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002d48:	2202      	movs	r2, #2
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d50:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	fa93 f2a3 	rbit	r2, r3
 8002d5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	fa93 f2a3 	rbit	r2, r3
 8002d7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d82:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002d86:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d88:	4bb0      	ldr	r3, [pc, #704]	@ (800304c <HAL_RCC_OscConfig+0x99c>)
 8002d8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d90:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002d94:	2102      	movs	r1, #2
 8002d96:	6019      	str	r1, [r3, #0]
 8002d98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d9c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	fa93 f1a3 	rbit	r1, r3
 8002da6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002daa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002dae:	6019      	str	r1, [r3, #0]
  return result;
 8002db0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002db4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	fab3 f383 	clz	r3, r3
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	f003 031f 	and.w	r3, r3, #31
 8002dca:	2101      	movs	r1, #1
 8002dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0a0      	beq.n	8002d18 <HAL_RCC_OscConfig+0x668>
 8002dd6:	e08d      	b.n	8002ef4 <HAL_RCC_OscConfig+0x844>
 8002dd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ddc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002de0:	2201      	movs	r2, #1
 8002de2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	fa93 f2a3 	rbit	r2, r3
 8002df2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002df6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002dfa:	601a      	str	r2, [r3, #0]
  return result;
 8002dfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e00:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002e04:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e06:	fab3 f383 	clz	r3, r3
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	4b90      	ldr	r3, [pc, #576]	@ (8003050 <HAL_RCC_OscConfig+0x9a0>)
 8002e10:	4413      	add	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	461a      	mov	r2, r3
 8002e16:	2300      	movs	r3, #0
 8002e18:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e1a:	f7fe faed 	bl	80013f8 <HAL_GetTick>
 8002e1e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e22:	e00a      	b.n	8002e3a <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e24:	f7fe fae8 	bl	80013f8 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d902      	bls.n	8002e3a <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	f000 bc42 	b.w	80036be <HAL_RCC_OscConfig+0x100e>
 8002e3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e3e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002e42:	2202      	movs	r2, #2
 8002e44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e4a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	fa93 f2a3 	rbit	r2, r3
 8002e54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e58:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e62:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002e66:	2202      	movs	r2, #2
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e6e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	fa93 f2a3 	rbit	r2, r3
 8002e78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e7c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e86:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e92:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	fa93 f2a3 	rbit	r2, r3
 8002e9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ea0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002ea4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ea6:	4b69      	ldr	r3, [pc, #420]	@ (800304c <HAL_RCC_OscConfig+0x99c>)
 8002ea8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002eaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eae:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002eb2:	2102      	movs	r1, #2
 8002eb4:	6019      	str	r1, [r3, #0]
 8002eb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eba:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	fa93 f1a3 	rbit	r1, r3
 8002ec4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ec8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ecc:	6019      	str	r1, [r3, #0]
  return result;
 8002ece:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ed2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	fab3 f383 	clz	r3, r3
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	f003 031f 	and.w	r3, r3, #31
 8002ee8:	2101      	movs	r1, #1
 8002eea:	fa01 f303 	lsl.w	r3, r1, r3
 8002eee:	4013      	ands	r3, r2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d197      	bne.n	8002e24 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ef4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 819e 	beq.w	8003246 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f10:	4b4e      	ldr	r3, [pc, #312]	@ (800304c <HAL_RCC_OscConfig+0x99c>)
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d116      	bne.n	8002f4a <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f1c:	4b4b      	ldr	r3, [pc, #300]	@ (800304c <HAL_RCC_OscConfig+0x99c>)
 8002f1e:	69db      	ldr	r3, [r3, #28]
 8002f20:	4a4a      	ldr	r2, [pc, #296]	@ (800304c <HAL_RCC_OscConfig+0x99c>)
 8002f22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f26:	61d3      	str	r3, [r2, #28]
 8002f28:	4b48      	ldr	r3, [pc, #288]	@ (800304c <HAL_RCC_OscConfig+0x99c>)
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002f30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f34:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f3e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002f42:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002f44:	2301      	movs	r3, #1
 8002f46:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f4a:	4b42      	ldr	r3, [pc, #264]	@ (8003054 <HAL_RCC_OscConfig+0x9a4>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d11a      	bne.n	8002f8c <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f56:	4b3f      	ldr	r3, [pc, #252]	@ (8003054 <HAL_RCC_OscConfig+0x9a4>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a3e      	ldr	r2, [pc, #248]	@ (8003054 <HAL_RCC_OscConfig+0x9a4>)
 8002f5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f60:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f62:	f7fe fa49 	bl	80013f8 <HAL_GetTick>
 8002f66:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f6a:	e009      	b.n	8002f80 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f6c:	f7fe fa44 	bl	80013f8 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b64      	cmp	r3, #100	@ 0x64
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e39e      	b.n	80036be <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f80:	4b34      	ldr	r3, [pc, #208]	@ (8003054 <HAL_RCC_OscConfig+0x9a4>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0ef      	beq.n	8002f6c <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f90:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d106      	bne.n	8002faa <HAL_RCC_OscConfig+0x8fa>
 8002f9c:	4b2b      	ldr	r3, [pc, #172]	@ (800304c <HAL_RCC_OscConfig+0x99c>)
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	4a2a      	ldr	r2, [pc, #168]	@ (800304c <HAL_RCC_OscConfig+0x99c>)
 8002fa2:	f043 0301 	orr.w	r3, r3, #1
 8002fa6:	6213      	str	r3, [r2, #32]
 8002fa8:	e035      	b.n	8003016 <HAL_RCC_OscConfig+0x966>
 8002faa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10c      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x924>
 8002fba:	4b24      	ldr	r3, [pc, #144]	@ (800304c <HAL_RCC_OscConfig+0x99c>)
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	4a23      	ldr	r2, [pc, #140]	@ (800304c <HAL_RCC_OscConfig+0x99c>)
 8002fc0:	f023 0301 	bic.w	r3, r3, #1
 8002fc4:	6213      	str	r3, [r2, #32]
 8002fc6:	4b21      	ldr	r3, [pc, #132]	@ (800304c <HAL_RCC_OscConfig+0x99c>)
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	4a20      	ldr	r2, [pc, #128]	@ (800304c <HAL_RCC_OscConfig+0x99c>)
 8002fcc:	f023 0304 	bic.w	r3, r3, #4
 8002fd0:	6213      	str	r3, [r2, #32]
 8002fd2:	e020      	b.n	8003016 <HAL_RCC_OscConfig+0x966>
 8002fd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fd8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	2b05      	cmp	r3, #5
 8002fe2:	d10c      	bne.n	8002ffe <HAL_RCC_OscConfig+0x94e>
 8002fe4:	4b19      	ldr	r3, [pc, #100]	@ (800304c <HAL_RCC_OscConfig+0x99c>)
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	4a18      	ldr	r2, [pc, #96]	@ (800304c <HAL_RCC_OscConfig+0x99c>)
 8002fea:	f043 0304 	orr.w	r3, r3, #4
 8002fee:	6213      	str	r3, [r2, #32]
 8002ff0:	4b16      	ldr	r3, [pc, #88]	@ (800304c <HAL_RCC_OscConfig+0x99c>)
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	4a15      	ldr	r2, [pc, #84]	@ (800304c <HAL_RCC_OscConfig+0x99c>)
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	6213      	str	r3, [r2, #32]
 8002ffc:	e00b      	b.n	8003016 <HAL_RCC_OscConfig+0x966>
 8002ffe:	4b13      	ldr	r3, [pc, #76]	@ (800304c <HAL_RCC_OscConfig+0x99c>)
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	4a12      	ldr	r2, [pc, #72]	@ (800304c <HAL_RCC_OscConfig+0x99c>)
 8003004:	f023 0301 	bic.w	r3, r3, #1
 8003008:	6213      	str	r3, [r2, #32]
 800300a:	4b10      	ldr	r3, [pc, #64]	@ (800304c <HAL_RCC_OscConfig+0x99c>)
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	4a0f      	ldr	r2, [pc, #60]	@ (800304c <HAL_RCC_OscConfig+0x99c>)
 8003010:	f023 0304 	bic.w	r3, r3, #4
 8003014:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003016:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800301a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	2b00      	cmp	r3, #0
 8003024:	f000 8087 	beq.w	8003136 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003028:	f7fe f9e6 	bl	80013f8 <HAL_GetTick>
 800302c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003030:	e012      	b.n	8003058 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003032:	f7fe f9e1 	bl	80013f8 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003042:	4293      	cmp	r3, r2
 8003044:	d908      	bls.n	8003058 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e339      	b.n	80036be <HAL_RCC_OscConfig+0x100e>
 800304a:	bf00      	nop
 800304c:	40021000 	.word	0x40021000
 8003050:	10908120 	.word	0x10908120
 8003054:	40007000 	.word	0x40007000
 8003058:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800305c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003060:	2202      	movs	r2, #2
 8003062:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003064:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003068:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	fa93 f2a3 	rbit	r2, r3
 8003072:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003076:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003080:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003084:	2202      	movs	r2, #2
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800308c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	fa93 f2a3 	rbit	r2, r3
 8003096:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800309a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800309e:	601a      	str	r2, [r3, #0]
  return result;
 80030a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030a4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80030a8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030aa:	fab3 f383 	clz	r3, r3
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d102      	bne.n	80030c0 <HAL_RCC_OscConfig+0xa10>
 80030ba:	4b98      	ldr	r3, [pc, #608]	@ (800331c <HAL_RCC_OscConfig+0xc6c>)
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	e013      	b.n	80030e8 <HAL_RCC_OscConfig+0xa38>
 80030c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030c4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80030c8:	2202      	movs	r2, #2
 80030ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030d0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	fa93 f2a3 	rbit	r2, r3
 80030da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030de:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	4b8d      	ldr	r3, [pc, #564]	@ (800331c <HAL_RCC_OscConfig+0xc6c>)
 80030e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030ec:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80030f0:	2102      	movs	r1, #2
 80030f2:	6011      	str	r1, [r2, #0]
 80030f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030f8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80030fc:	6812      	ldr	r2, [r2, #0]
 80030fe:	fa92 f1a2 	rbit	r1, r2
 8003102:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003106:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800310a:	6011      	str	r1, [r2, #0]
  return result;
 800310c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003110:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003114:	6812      	ldr	r2, [r2, #0]
 8003116:	fab2 f282 	clz	r2, r2
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003120:	b2d2      	uxtb	r2, r2
 8003122:	f002 021f 	and.w	r2, r2, #31
 8003126:	2101      	movs	r1, #1
 8003128:	fa01 f202 	lsl.w	r2, r1, r2
 800312c:	4013      	ands	r3, r2
 800312e:	2b00      	cmp	r3, #0
 8003130:	f43f af7f 	beq.w	8003032 <HAL_RCC_OscConfig+0x982>
 8003134:	e07d      	b.n	8003232 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003136:	f7fe f95f 	bl	80013f8 <HAL_GetTick>
 800313a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800313e:	e00b      	b.n	8003158 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003140:	f7fe f95a 	bl	80013f8 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003150:	4293      	cmp	r3, r2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e2b2      	b.n	80036be <HAL_RCC_OscConfig+0x100e>
 8003158:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800315c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003160:	2202      	movs	r2, #2
 8003162:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003164:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003168:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	fa93 f2a3 	rbit	r2, r3
 8003172:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003176:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003180:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003184:	2202      	movs	r2, #2
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800318c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	fa93 f2a3 	rbit	r2, r3
 8003196:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800319a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800319e:	601a      	str	r2, [r3, #0]
  return result;
 80031a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031a4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80031a8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031aa:	fab3 f383 	clz	r3, r3
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d102      	bne.n	80031c0 <HAL_RCC_OscConfig+0xb10>
 80031ba:	4b58      	ldr	r3, [pc, #352]	@ (800331c <HAL_RCC_OscConfig+0xc6c>)
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	e013      	b.n	80031e8 <HAL_RCC_OscConfig+0xb38>
 80031c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031c4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80031c8:	2202      	movs	r2, #2
 80031ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031d0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	fa93 f2a3 	rbit	r2, r3
 80031da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031de:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	4b4d      	ldr	r3, [pc, #308]	@ (800331c <HAL_RCC_OscConfig+0xc6c>)
 80031e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031ec:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80031f0:	2102      	movs	r1, #2
 80031f2:	6011      	str	r1, [r2, #0]
 80031f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031f8:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80031fc:	6812      	ldr	r2, [r2, #0]
 80031fe:	fa92 f1a2 	rbit	r1, r2
 8003202:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003206:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800320a:	6011      	str	r1, [r2, #0]
  return result;
 800320c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003210:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003214:	6812      	ldr	r2, [r2, #0]
 8003216:	fab2 f282 	clz	r2, r2
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003220:	b2d2      	uxtb	r2, r2
 8003222:	f002 021f 	and.w	r2, r2, #31
 8003226:	2101      	movs	r1, #1
 8003228:	fa01 f202 	lsl.w	r2, r1, r2
 800322c:	4013      	ands	r3, r2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d186      	bne.n	8003140 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003232:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003236:	2b01      	cmp	r3, #1
 8003238:	d105      	bne.n	8003246 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800323a:	4b38      	ldr	r3, [pc, #224]	@ (800331c <HAL_RCC_OscConfig+0xc6c>)
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	4a37      	ldr	r2, [pc, #220]	@ (800331c <HAL_RCC_OscConfig+0xc6c>)
 8003240:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003244:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003246:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800324a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 8232 	beq.w	80036bc <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003258:	4b30      	ldr	r3, [pc, #192]	@ (800331c <HAL_RCC_OscConfig+0xc6c>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f003 030c 	and.w	r3, r3, #12
 8003260:	2b08      	cmp	r3, #8
 8003262:	f000 8201 	beq.w	8003668 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003266:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800326a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	2b02      	cmp	r3, #2
 8003274:	f040 8157 	bne.w	8003526 <HAL_RCC_OscConfig+0xe76>
 8003278:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800327c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003280:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003284:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003286:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800328a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	fa93 f2a3 	rbit	r2, r3
 8003294:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003298:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800329c:	601a      	str	r2, [r3, #0]
  return result;
 800329e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032a2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80032a6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a8:	fab3 f383 	clz	r3, r3
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80032b2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	461a      	mov	r2, r3
 80032ba:	2300      	movs	r3, #0
 80032bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032be:	f7fe f89b 	bl	80013f8 <HAL_GetTick>
 80032c2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032c6:	e009      	b.n	80032dc <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c8:	f7fe f896 	bl	80013f8 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e1f0      	b.n	80036be <HAL_RCC_OscConfig+0x100e>
 80032dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032e0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80032e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ee:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	fa93 f2a3 	rbit	r2, r3
 80032f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032fc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003300:	601a      	str	r2, [r3, #0]
  return result;
 8003302:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003306:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800330a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800330c:	fab3 f383 	clz	r3, r3
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b3f      	cmp	r3, #63	@ 0x3f
 8003314:	d804      	bhi.n	8003320 <HAL_RCC_OscConfig+0xc70>
 8003316:	4b01      	ldr	r3, [pc, #4]	@ (800331c <HAL_RCC_OscConfig+0xc6c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	e029      	b.n	8003370 <HAL_RCC_OscConfig+0xcc0>
 800331c:	40021000 	.word	0x40021000
 8003320:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003324:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003328:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800332c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003332:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	fa93 f2a3 	rbit	r2, r3
 800333c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003340:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800334a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800334e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003358:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	fa93 f2a3 	rbit	r2, r3
 8003362:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003366:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	4bc3      	ldr	r3, [pc, #780]	@ (800367c <HAL_RCC_OscConfig+0xfcc>)
 800336e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003370:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003374:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003378:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800337c:	6011      	str	r1, [r2, #0]
 800337e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003382:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003386:	6812      	ldr	r2, [r2, #0]
 8003388:	fa92 f1a2 	rbit	r1, r2
 800338c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003390:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003394:	6011      	str	r1, [r2, #0]
  return result;
 8003396:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800339a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800339e:	6812      	ldr	r2, [r2, #0]
 80033a0:	fab2 f282 	clz	r2, r2
 80033a4:	b2d2      	uxtb	r2, r2
 80033a6:	f042 0220 	orr.w	r2, r2, #32
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	f002 021f 	and.w	r2, r2, #31
 80033b0:	2101      	movs	r1, #1
 80033b2:	fa01 f202 	lsl.w	r2, r1, r2
 80033b6:	4013      	ands	r3, r2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d185      	bne.n	80032c8 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033bc:	4baf      	ldr	r3, [pc, #700]	@ (800367c <HAL_RCC_OscConfig+0xfcc>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80033c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80033d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	430b      	orrs	r3, r1
 80033de:	49a7      	ldr	r1, [pc, #668]	@ (800367c <HAL_RCC_OscConfig+0xfcc>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	604b      	str	r3, [r1, #4]
 80033e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033e8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80033ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80033f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033f6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	fa93 f2a3 	rbit	r2, r3
 8003400:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003404:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003408:	601a      	str	r2, [r3, #0]
  return result;
 800340a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800340e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003412:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003414:	fab3 f383 	clz	r3, r3
 8003418:	b2db      	uxtb	r3, r3
 800341a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800341e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	461a      	mov	r2, r3
 8003426:	2301      	movs	r3, #1
 8003428:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342a:	f7fd ffe5 	bl	80013f8 <HAL_GetTick>
 800342e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003432:	e009      	b.n	8003448 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003434:	f7fd ffe0 	bl	80013f8 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d901      	bls.n	8003448 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e13a      	b.n	80036be <HAL_RCC_OscConfig+0x100e>
 8003448:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800344c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003450:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003454:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003456:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800345a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	fa93 f2a3 	rbit	r2, r3
 8003464:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003468:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800346c:	601a      	str	r2, [r3, #0]
  return result;
 800346e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003472:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003476:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003478:	fab3 f383 	clz	r3, r3
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003480:	d802      	bhi.n	8003488 <HAL_RCC_OscConfig+0xdd8>
 8003482:	4b7e      	ldr	r3, [pc, #504]	@ (800367c <HAL_RCC_OscConfig+0xfcc>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	e027      	b.n	80034d8 <HAL_RCC_OscConfig+0xe28>
 8003488:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800348c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003490:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003494:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003496:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800349a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	fa93 f2a3 	rbit	r2, r3
 80034a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034a8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034b2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80034b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034c0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	fa93 f2a3 	rbit	r2, r3
 80034ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ce:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	4b69      	ldr	r3, [pc, #420]	@ (800367c <HAL_RCC_OscConfig+0xfcc>)
 80034d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034dc:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80034e0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80034e4:	6011      	str	r1, [r2, #0]
 80034e6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034ea:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80034ee:	6812      	ldr	r2, [r2, #0]
 80034f0:	fa92 f1a2 	rbit	r1, r2
 80034f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034f8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80034fc:	6011      	str	r1, [r2, #0]
  return result;
 80034fe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003502:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003506:	6812      	ldr	r2, [r2, #0]
 8003508:	fab2 f282 	clz	r2, r2
 800350c:	b2d2      	uxtb	r2, r2
 800350e:	f042 0220 	orr.w	r2, r2, #32
 8003512:	b2d2      	uxtb	r2, r2
 8003514:	f002 021f 	and.w	r2, r2, #31
 8003518:	2101      	movs	r1, #1
 800351a:	fa01 f202 	lsl.w	r2, r1, r2
 800351e:	4013      	ands	r3, r2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d087      	beq.n	8003434 <HAL_RCC_OscConfig+0xd84>
 8003524:	e0ca      	b.n	80036bc <HAL_RCC_OscConfig+0x100c>
 8003526:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800352a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800352e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003532:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003534:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003538:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	fa93 f2a3 	rbit	r2, r3
 8003542:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003546:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800354a:	601a      	str	r2, [r3, #0]
  return result;
 800354c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003550:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003554:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003556:	fab3 f383 	clz	r3, r3
 800355a:	b2db      	uxtb	r3, r3
 800355c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003560:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	461a      	mov	r2, r3
 8003568:	2300      	movs	r3, #0
 800356a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356c:	f7fd ff44 	bl	80013f8 <HAL_GetTick>
 8003570:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003574:	e009      	b.n	800358a <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003576:	f7fd ff3f 	bl	80013f8 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e099      	b.n	80036be <HAL_RCC_OscConfig+0x100e>
 800358a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800358e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003592:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003596:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003598:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800359c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	fa93 f2a3 	rbit	r2, r3
 80035a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035aa:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80035ae:	601a      	str	r2, [r3, #0]
  return result;
 80035b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035b4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80035b8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035ba:	fab3 f383 	clz	r3, r3
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b3f      	cmp	r3, #63	@ 0x3f
 80035c2:	d802      	bhi.n	80035ca <HAL_RCC_OscConfig+0xf1a>
 80035c4:	4b2d      	ldr	r3, [pc, #180]	@ (800367c <HAL_RCC_OscConfig+0xfcc>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	e027      	b.n	800361a <HAL_RCC_OscConfig+0xf6a>
 80035ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ce:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80035d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035dc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	fa93 f2a3 	rbit	r2, r3
 80035e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ea:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035f4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80035f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003602:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	fa93 f2a3 	rbit	r2, r3
 800360c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003610:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	4b19      	ldr	r3, [pc, #100]	@ (800367c <HAL_RCC_OscConfig+0xfcc>)
 8003618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800361e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003622:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003626:	6011      	str	r1, [r2, #0]
 8003628:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800362c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003630:	6812      	ldr	r2, [r2, #0]
 8003632:	fa92 f1a2 	rbit	r1, r2
 8003636:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800363a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800363e:	6011      	str	r1, [r2, #0]
  return result;
 8003640:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003644:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003648:	6812      	ldr	r2, [r2, #0]
 800364a:	fab2 f282 	clz	r2, r2
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	f042 0220 	orr.w	r2, r2, #32
 8003654:	b2d2      	uxtb	r2, r2
 8003656:	f002 021f 	and.w	r2, r2, #31
 800365a:	2101      	movs	r1, #1
 800365c:	fa01 f202 	lsl.w	r2, r1, r2
 8003660:	4013      	ands	r3, r2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d187      	bne.n	8003576 <HAL_RCC_OscConfig+0xec6>
 8003666:	e029      	b.n	80036bc <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003668:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800366c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	69db      	ldr	r3, [r3, #28]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d103      	bne.n	8003680 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e020      	b.n	80036be <HAL_RCC_OscConfig+0x100e>
 800367c:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003680:	4b11      	ldr	r3, [pc, #68]	@ (80036c8 <HAL_RCC_OscConfig+0x1018>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003688:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800368c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003690:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003694:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	429a      	cmp	r2, r3
 800369e:	d10b      	bne.n	80036b8 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80036a0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80036a4:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80036a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d001      	beq.n	80036bc <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e000      	b.n	80036be <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40021000 	.word	0x40021000

080036cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b09e      	sub	sp, #120	@ 0x78
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e154      	b.n	800398e <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036e4:	4b89      	ldr	r3, [pc, #548]	@ (800390c <HAL_RCC_ClockConfig+0x240>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d910      	bls.n	8003714 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f2:	4b86      	ldr	r3, [pc, #536]	@ (800390c <HAL_RCC_ClockConfig+0x240>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f023 0207 	bic.w	r2, r3, #7
 80036fa:	4984      	ldr	r1, [pc, #528]	@ (800390c <HAL_RCC_ClockConfig+0x240>)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	4313      	orrs	r3, r2
 8003700:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003702:	4b82      	ldr	r3, [pc, #520]	@ (800390c <HAL_RCC_ClockConfig+0x240>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d001      	beq.n	8003714 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e13c      	b.n	800398e <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d008      	beq.n	8003732 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003720:	4b7b      	ldr	r3, [pc, #492]	@ (8003910 <HAL_RCC_ClockConfig+0x244>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	4978      	ldr	r1, [pc, #480]	@ (8003910 <HAL_RCC_ClockConfig+0x244>)
 800372e:	4313      	orrs	r3, r2
 8003730:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	f000 80cd 	beq.w	80038da <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d137      	bne.n	80037b8 <HAL_RCC_ClockConfig+0xec>
 8003748:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800374c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003750:	fa93 f3a3 	rbit	r3, r3
 8003754:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003756:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003758:	fab3 f383 	clz	r3, r3
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003760:	d802      	bhi.n	8003768 <HAL_RCC_ClockConfig+0x9c>
 8003762:	4b6b      	ldr	r3, [pc, #428]	@ (8003910 <HAL_RCC_ClockConfig+0x244>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	e00f      	b.n	8003788 <HAL_RCC_ClockConfig+0xbc>
 8003768:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800376c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003770:	fa93 f3a3 	rbit	r3, r3
 8003774:	667b      	str	r3, [r7, #100]	@ 0x64
 8003776:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800377a:	663b      	str	r3, [r7, #96]	@ 0x60
 800377c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800377e:	fa93 f3a3 	rbit	r3, r3
 8003782:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003784:	4b62      	ldr	r3, [pc, #392]	@ (8003910 <HAL_RCC_ClockConfig+0x244>)
 8003786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003788:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800378c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800378e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003790:	fa92 f2a2 	rbit	r2, r2
 8003794:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003796:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003798:	fab2 f282 	clz	r2, r2
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	f042 0220 	orr.w	r2, r2, #32
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	f002 021f 	and.w	r2, r2, #31
 80037a8:	2101      	movs	r1, #1
 80037aa:	fa01 f202 	lsl.w	r2, r1, r2
 80037ae:	4013      	ands	r3, r2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d171      	bne.n	8003898 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0ea      	b.n	800398e <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d137      	bne.n	8003830 <HAL_RCC_ClockConfig+0x164>
 80037c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037c4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037c8:	fa93 f3a3 	rbit	r3, r3
 80037cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80037ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d0:	fab3 f383 	clz	r3, r3
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80037d8:	d802      	bhi.n	80037e0 <HAL_RCC_ClockConfig+0x114>
 80037da:	4b4d      	ldr	r3, [pc, #308]	@ (8003910 <HAL_RCC_ClockConfig+0x244>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	e00f      	b.n	8003800 <HAL_RCC_ClockConfig+0x134>
 80037e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037e8:	fa93 f3a3 	rbit	r3, r3
 80037ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80037ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80037f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037f6:	fa93 f3a3 	rbit	r3, r3
 80037fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037fc:	4b44      	ldr	r3, [pc, #272]	@ (8003910 <HAL_RCC_ClockConfig+0x244>)
 80037fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003800:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003804:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003806:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003808:	fa92 f2a2 	rbit	r2, r2
 800380c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800380e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003810:	fab2 f282 	clz	r2, r2
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	f042 0220 	orr.w	r2, r2, #32
 800381a:	b2d2      	uxtb	r2, r2
 800381c:	f002 021f 	and.w	r2, r2, #31
 8003820:	2101      	movs	r1, #1
 8003822:	fa01 f202 	lsl.w	r2, r1, r2
 8003826:	4013      	ands	r3, r2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d135      	bne.n	8003898 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e0ae      	b.n	800398e <HAL_RCC_ClockConfig+0x2c2>
 8003830:	2302      	movs	r3, #2
 8003832:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003836:	fa93 f3a3 	rbit	r3, r3
 800383a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800383c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800383e:	fab3 f383 	clz	r3, r3
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b3f      	cmp	r3, #63	@ 0x3f
 8003846:	d802      	bhi.n	800384e <HAL_RCC_ClockConfig+0x182>
 8003848:	4b31      	ldr	r3, [pc, #196]	@ (8003910 <HAL_RCC_ClockConfig+0x244>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	e00d      	b.n	800386a <HAL_RCC_ClockConfig+0x19e>
 800384e:	2302      	movs	r3, #2
 8003850:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003854:	fa93 f3a3 	rbit	r3, r3
 8003858:	627b      	str	r3, [r7, #36]	@ 0x24
 800385a:	2302      	movs	r3, #2
 800385c:	623b      	str	r3, [r7, #32]
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	fa93 f3a3 	rbit	r3, r3
 8003864:	61fb      	str	r3, [r7, #28]
 8003866:	4b2a      	ldr	r3, [pc, #168]	@ (8003910 <HAL_RCC_ClockConfig+0x244>)
 8003868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386a:	2202      	movs	r2, #2
 800386c:	61ba      	str	r2, [r7, #24]
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	fa92 f2a2 	rbit	r2, r2
 8003874:	617a      	str	r2, [r7, #20]
  return result;
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	fab2 f282 	clz	r2, r2
 800387c:	b2d2      	uxtb	r2, r2
 800387e:	f042 0220 	orr.w	r2, r2, #32
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	f002 021f 	and.w	r2, r2, #31
 8003888:	2101      	movs	r1, #1
 800388a:	fa01 f202 	lsl.w	r2, r1, r2
 800388e:	4013      	ands	r3, r2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e07a      	b.n	800398e <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003898:	4b1d      	ldr	r3, [pc, #116]	@ (8003910 <HAL_RCC_ClockConfig+0x244>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f023 0203 	bic.w	r2, r3, #3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	491a      	ldr	r1, [pc, #104]	@ (8003910 <HAL_RCC_ClockConfig+0x244>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038aa:	f7fd fda5 	bl	80013f8 <HAL_GetTick>
 80038ae:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b0:	e00a      	b.n	80038c8 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038b2:	f7fd fda1 	bl	80013f8 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e062      	b.n	800398e <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038c8:	4b11      	ldr	r3, [pc, #68]	@ (8003910 <HAL_RCC_ClockConfig+0x244>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f003 020c 	and.w	r2, r3, #12
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d1eb      	bne.n	80038b2 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038da:	4b0c      	ldr	r3, [pc, #48]	@ (800390c <HAL_RCC_ClockConfig+0x240>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0307 	and.w	r3, r3, #7
 80038e2:	683a      	ldr	r2, [r7, #0]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d215      	bcs.n	8003914 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e8:	4b08      	ldr	r3, [pc, #32]	@ (800390c <HAL_RCC_ClockConfig+0x240>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f023 0207 	bic.w	r2, r3, #7
 80038f0:	4906      	ldr	r1, [pc, #24]	@ (800390c <HAL_RCC_ClockConfig+0x240>)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f8:	4b04      	ldr	r3, [pc, #16]	@ (800390c <HAL_RCC_ClockConfig+0x240>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d006      	beq.n	8003914 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e041      	b.n	800398e <HAL_RCC_ClockConfig+0x2c2>
 800390a:	bf00      	nop
 800390c:	40022000 	.word	0x40022000
 8003910:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b00      	cmp	r3, #0
 800391e:	d008      	beq.n	8003932 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003920:	4b1d      	ldr	r3, [pc, #116]	@ (8003998 <HAL_RCC_ClockConfig+0x2cc>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	491a      	ldr	r1, [pc, #104]	@ (8003998 <HAL_RCC_ClockConfig+0x2cc>)
 800392e:	4313      	orrs	r3, r2
 8003930:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	2b00      	cmp	r3, #0
 800393c:	d009      	beq.n	8003952 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800393e:	4b16      	ldr	r3, [pc, #88]	@ (8003998 <HAL_RCC_ClockConfig+0x2cc>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	4912      	ldr	r1, [pc, #72]	@ (8003998 <HAL_RCC_ClockConfig+0x2cc>)
 800394e:	4313      	orrs	r3, r2
 8003950:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003952:	f000 f829 	bl	80039a8 <HAL_RCC_GetSysClockFreq>
 8003956:	4601      	mov	r1, r0
 8003958:	4b0f      	ldr	r3, [pc, #60]	@ (8003998 <HAL_RCC_ClockConfig+0x2cc>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003960:	22f0      	movs	r2, #240	@ 0xf0
 8003962:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	fa92 f2a2 	rbit	r2, r2
 800396a:	60fa      	str	r2, [r7, #12]
  return result;
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	fab2 f282 	clz	r2, r2
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	40d3      	lsrs	r3, r2
 8003976:	4a09      	ldr	r2, [pc, #36]	@ (800399c <HAL_RCC_ClockConfig+0x2d0>)
 8003978:	5cd3      	ldrb	r3, [r2, r3]
 800397a:	fa21 f303 	lsr.w	r3, r1, r3
 800397e:	4a08      	ldr	r2, [pc, #32]	@ (80039a0 <HAL_RCC_ClockConfig+0x2d4>)
 8003980:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003982:	4b08      	ldr	r3, [pc, #32]	@ (80039a4 <HAL_RCC_ClockConfig+0x2d8>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f7fd fcf2 	bl	8001370 <HAL_InitTick>
  
  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3778      	adds	r7, #120	@ 0x78
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40021000 	.word	0x40021000
 800399c:	08006cfc 	.word	0x08006cfc
 80039a0:	20000000 	.word	0x20000000
 80039a4:	20000004 	.word	0x20000004

080039a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b087      	sub	sp, #28
 80039ac:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	60fb      	str	r3, [r7, #12]
 80039b2:	2300      	movs	r3, #0
 80039b4:	60bb      	str	r3, [r7, #8]
 80039b6:	2300      	movs	r3, #0
 80039b8:	617b      	str	r3, [r7, #20]
 80039ba:	2300      	movs	r3, #0
 80039bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80039be:	2300      	movs	r3, #0
 80039c0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80039c2:	4b1e      	ldr	r3, [pc, #120]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x94>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f003 030c 	and.w	r3, r3, #12
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d002      	beq.n	80039d8 <HAL_RCC_GetSysClockFreq+0x30>
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d003      	beq.n	80039de <HAL_RCC_GetSysClockFreq+0x36>
 80039d6:	e026      	b.n	8003a26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039d8:	4b19      	ldr	r3, [pc, #100]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0x98>)
 80039da:	613b      	str	r3, [r7, #16]
      break;
 80039dc:	e026      	b.n	8003a2c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	0c9b      	lsrs	r3, r3, #18
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	4a17      	ldr	r2, [pc, #92]	@ (8003a44 <HAL_RCC_GetSysClockFreq+0x9c>)
 80039e8:	5cd3      	ldrb	r3, [r2, r3]
 80039ea:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80039ec:	4b13      	ldr	r3, [pc, #76]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x94>)
 80039ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f0:	f003 030f 	and.w	r3, r3, #15
 80039f4:	4a14      	ldr	r2, [pc, #80]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0xa0>)
 80039f6:	5cd3      	ldrb	r3, [r2, r3]
 80039f8:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d008      	beq.n	8003a16 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a04:	4a0e      	ldr	r2, [pc, #56]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	fb02 f303 	mul.w	r3, r2, r3
 8003a12:	617b      	str	r3, [r7, #20]
 8003a14:	e004      	b.n	8003a20 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a0c      	ldr	r2, [pc, #48]	@ (8003a4c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a1a:	fb02 f303 	mul.w	r3, r2, r3
 8003a1e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	613b      	str	r3, [r7, #16]
      break;
 8003a24:	e002      	b.n	8003a2c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a26:	4b06      	ldr	r3, [pc, #24]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a28:	613b      	str	r3, [r7, #16]
      break;
 8003a2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a2c:	693b      	ldr	r3, [r7, #16]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	371c      	adds	r7, #28
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	007a1200 	.word	0x007a1200
 8003a44:	08006d0c 	.word	0x08006d0c
 8003a48:	08006d1c 	.word	0x08006d1c
 8003a4c:	003d0900 	.word	0x003d0900

08003a50 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b092      	sub	sp, #72	@ 0x48
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003a60:	2300      	movs	r3, #0
 8003a62:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f000 80cb 	beq.w	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x1ba>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a74:	4b85      	ldr	r3, [pc, #532]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10e      	bne.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a80:	4b82      	ldr	r3, [pc, #520]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	4a81      	ldr	r2, [pc, #516]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003a86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a8a:	61d3      	str	r3, [r2, #28]
 8003a8c:	4b7f      	ldr	r3, [pc, #508]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a94:	60bb      	str	r3, [r7, #8]
 8003a96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a9e:	4b7c      	ldr	r3, [pc, #496]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d118      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aaa:	4b79      	ldr	r3, [pc, #484]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a78      	ldr	r2, [pc, #480]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ab0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ab4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ab6:	f7fd fc9f 	bl	80013f8 <HAL_GetTick>
 8003aba:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003abc:	e008      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003abe:	f7fd fc9b 	bl	80013f8 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b64      	cmp	r3, #100	@ 0x64
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e0d9      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x234>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad0:	4b6f      	ldr	r3, [pc, #444]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0f0      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003adc:	4b6b      	ldr	r3, [pc, #428]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d07b      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003af4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d074      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003afa:	4b64      	ldr	r3, [pc, #400]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b04:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b08:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b0c:	fa93 f3a3 	rbit	r3, r3
 8003b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b14:	fab3 f383 	clz	r3, r3
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	4b5d      	ldr	r3, [pc, #372]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003b1e:	4413      	add	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	461a      	mov	r2, r3
 8003b24:	2301      	movs	r3, #1
 8003b26:	6013      	str	r3, [r2, #0]
 8003b28:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b30:	fa93 f3a3 	rbit	r3, r3
 8003b34:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b38:	fab3 f383 	clz	r3, r3
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	461a      	mov	r2, r3
 8003b40:	4b54      	ldr	r3, [pc, #336]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003b42:	4413      	add	r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	461a      	mov	r2, r3
 8003b48:	2300      	movs	r3, #0
 8003b4a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b4c:	4a4f      	ldr	r2, [pc, #316]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003b4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b50:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d043      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5c:	f7fd fc4c 	bl	80013f8 <HAL_GetTick>
 8003b60:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b62:	e00a      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b64:	f7fd fc48 	bl	80013f8 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e084      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b80:	fa93 f3a3 	rbit	r3, r3
 8003b84:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b86:	2302      	movs	r3, #2
 8003b88:	623b      	str	r3, [r7, #32]
 8003b8a:	6a3b      	ldr	r3, [r7, #32]
 8003b8c:	fa93 f3a3 	rbit	r3, r3
 8003b90:	61fb      	str	r3, [r7, #28]
  return result;
 8003b92:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b94:	fab3 f383 	clz	r3, r3
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d102      	bne.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003ba4:	4b39      	ldr	r3, [pc, #228]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	e007      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8003baa:	2302      	movs	r3, #2
 8003bac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	fa93 f3a3 	rbit	r3, r3
 8003bb4:	617b      	str	r3, [r7, #20]
 8003bb6:	4b35      	ldr	r3, [pc, #212]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bba:	2202      	movs	r2, #2
 8003bbc:	613a      	str	r2, [r7, #16]
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	fa92 f2a2 	rbit	r2, r2
 8003bc4:	60fa      	str	r2, [r7, #12]
  return result;
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	fab2 f282 	clz	r2, r2
 8003bcc:	b2d2      	uxtb	r2, r2
 8003bce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003bd2:	b2d2      	uxtb	r2, r2
 8003bd4:	f002 021f 	and.w	r2, r2, #31
 8003bd8:	2101      	movs	r1, #1
 8003bda:	fa01 f202 	lsl.w	r2, r1, r2
 8003bde:	4013      	ands	r3, r2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0bf      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003be4:	4b29      	ldr	r3, [pc, #164]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	4926      	ldr	r1, [pc, #152]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003bf6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d105      	bne.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bfe:	4b23      	ldr	r3, [pc, #140]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	4a22      	ldr	r2, [pc, #136]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003c04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c08:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d008      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c16:	4b1d      	ldr	r3, [pc, #116]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c1a:	f023 0203 	bic.w	r2, r3, #3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	491a      	ldr	r1, [pc, #104]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0320 	and.w	r3, r3, #32
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d008      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c34:	4b15      	ldr	r3, [pc, #84]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c38:	f023 0210 	bic.w	r2, r3, #16
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	4912      	ldr	r1, [pc, #72]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d008      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003c52:	4b0e      	ldr	r3, [pc, #56]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c56:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	490b      	ldr	r1, [pc, #44]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d008      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003c70:	4b06      	ldr	r3, [pc, #24]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c74:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	4903      	ldr	r1, [pc, #12]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3748      	adds	r7, #72	@ 0x48
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	40007000 	.word	0x40007000
 8003c94:	10908100 	.word	0x10908100

08003c98 <__cvt>:
 8003c98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c9c:	ec57 6b10 	vmov	r6, r7, d0
 8003ca0:	2f00      	cmp	r7, #0
 8003ca2:	460c      	mov	r4, r1
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	463b      	mov	r3, r7
 8003ca8:	bfbb      	ittet	lt
 8003caa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003cae:	461f      	movlt	r7, r3
 8003cb0:	2300      	movge	r3, #0
 8003cb2:	232d      	movlt	r3, #45	@ 0x2d
 8003cb4:	700b      	strb	r3, [r1, #0]
 8003cb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003cb8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003cbc:	4691      	mov	r9, r2
 8003cbe:	f023 0820 	bic.w	r8, r3, #32
 8003cc2:	bfbc      	itt	lt
 8003cc4:	4632      	movlt	r2, r6
 8003cc6:	4616      	movlt	r6, r2
 8003cc8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003ccc:	d005      	beq.n	8003cda <__cvt+0x42>
 8003cce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003cd2:	d100      	bne.n	8003cd6 <__cvt+0x3e>
 8003cd4:	3401      	adds	r4, #1
 8003cd6:	2102      	movs	r1, #2
 8003cd8:	e000      	b.n	8003cdc <__cvt+0x44>
 8003cda:	2103      	movs	r1, #3
 8003cdc:	ab03      	add	r3, sp, #12
 8003cde:	9301      	str	r3, [sp, #4]
 8003ce0:	ab02      	add	r3, sp, #8
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	ec47 6b10 	vmov	d0, r6, r7
 8003ce8:	4653      	mov	r3, sl
 8003cea:	4622      	mov	r2, r4
 8003cec:	f000 ff3c 	bl	8004b68 <_dtoa_r>
 8003cf0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003cf4:	4605      	mov	r5, r0
 8003cf6:	d119      	bne.n	8003d2c <__cvt+0x94>
 8003cf8:	f019 0f01 	tst.w	r9, #1
 8003cfc:	d00e      	beq.n	8003d1c <__cvt+0x84>
 8003cfe:	eb00 0904 	add.w	r9, r0, r4
 8003d02:	2200      	movs	r2, #0
 8003d04:	2300      	movs	r3, #0
 8003d06:	4630      	mov	r0, r6
 8003d08:	4639      	mov	r1, r7
 8003d0a:	f7fc fedd 	bl	8000ac8 <__aeabi_dcmpeq>
 8003d0e:	b108      	cbz	r0, 8003d14 <__cvt+0x7c>
 8003d10:	f8cd 900c 	str.w	r9, [sp, #12]
 8003d14:	2230      	movs	r2, #48	@ 0x30
 8003d16:	9b03      	ldr	r3, [sp, #12]
 8003d18:	454b      	cmp	r3, r9
 8003d1a:	d31e      	bcc.n	8003d5a <__cvt+0xc2>
 8003d1c:	9b03      	ldr	r3, [sp, #12]
 8003d1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003d20:	1b5b      	subs	r3, r3, r5
 8003d22:	4628      	mov	r0, r5
 8003d24:	6013      	str	r3, [r2, #0]
 8003d26:	b004      	add	sp, #16
 8003d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d2c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003d30:	eb00 0904 	add.w	r9, r0, r4
 8003d34:	d1e5      	bne.n	8003d02 <__cvt+0x6a>
 8003d36:	7803      	ldrb	r3, [r0, #0]
 8003d38:	2b30      	cmp	r3, #48	@ 0x30
 8003d3a:	d10a      	bne.n	8003d52 <__cvt+0xba>
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	2300      	movs	r3, #0
 8003d40:	4630      	mov	r0, r6
 8003d42:	4639      	mov	r1, r7
 8003d44:	f7fc fec0 	bl	8000ac8 <__aeabi_dcmpeq>
 8003d48:	b918      	cbnz	r0, 8003d52 <__cvt+0xba>
 8003d4a:	f1c4 0401 	rsb	r4, r4, #1
 8003d4e:	f8ca 4000 	str.w	r4, [sl]
 8003d52:	f8da 3000 	ldr.w	r3, [sl]
 8003d56:	4499      	add	r9, r3
 8003d58:	e7d3      	b.n	8003d02 <__cvt+0x6a>
 8003d5a:	1c59      	adds	r1, r3, #1
 8003d5c:	9103      	str	r1, [sp, #12]
 8003d5e:	701a      	strb	r2, [r3, #0]
 8003d60:	e7d9      	b.n	8003d16 <__cvt+0x7e>

08003d62 <__exponent>:
 8003d62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d64:	2900      	cmp	r1, #0
 8003d66:	bfba      	itte	lt
 8003d68:	4249      	neglt	r1, r1
 8003d6a:	232d      	movlt	r3, #45	@ 0x2d
 8003d6c:	232b      	movge	r3, #43	@ 0x2b
 8003d6e:	2909      	cmp	r1, #9
 8003d70:	7002      	strb	r2, [r0, #0]
 8003d72:	7043      	strb	r3, [r0, #1]
 8003d74:	dd29      	ble.n	8003dca <__exponent+0x68>
 8003d76:	f10d 0307 	add.w	r3, sp, #7
 8003d7a:	461d      	mov	r5, r3
 8003d7c:	270a      	movs	r7, #10
 8003d7e:	461a      	mov	r2, r3
 8003d80:	fbb1 f6f7 	udiv	r6, r1, r7
 8003d84:	fb07 1416 	mls	r4, r7, r6, r1
 8003d88:	3430      	adds	r4, #48	@ 0x30
 8003d8a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003d8e:	460c      	mov	r4, r1
 8003d90:	2c63      	cmp	r4, #99	@ 0x63
 8003d92:	f103 33ff 	add.w	r3, r3, #4294967295
 8003d96:	4631      	mov	r1, r6
 8003d98:	dcf1      	bgt.n	8003d7e <__exponent+0x1c>
 8003d9a:	3130      	adds	r1, #48	@ 0x30
 8003d9c:	1e94      	subs	r4, r2, #2
 8003d9e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003da2:	1c41      	adds	r1, r0, #1
 8003da4:	4623      	mov	r3, r4
 8003da6:	42ab      	cmp	r3, r5
 8003da8:	d30a      	bcc.n	8003dc0 <__exponent+0x5e>
 8003daa:	f10d 0309 	add.w	r3, sp, #9
 8003dae:	1a9b      	subs	r3, r3, r2
 8003db0:	42ac      	cmp	r4, r5
 8003db2:	bf88      	it	hi
 8003db4:	2300      	movhi	r3, #0
 8003db6:	3302      	adds	r3, #2
 8003db8:	4403      	add	r3, r0
 8003dba:	1a18      	subs	r0, r3, r0
 8003dbc:	b003      	add	sp, #12
 8003dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dc0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003dc4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003dc8:	e7ed      	b.n	8003da6 <__exponent+0x44>
 8003dca:	2330      	movs	r3, #48	@ 0x30
 8003dcc:	3130      	adds	r1, #48	@ 0x30
 8003dce:	7083      	strb	r3, [r0, #2]
 8003dd0:	70c1      	strb	r1, [r0, #3]
 8003dd2:	1d03      	adds	r3, r0, #4
 8003dd4:	e7f1      	b.n	8003dba <__exponent+0x58>
	...

08003dd8 <_printf_float>:
 8003dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ddc:	b08d      	sub	sp, #52	@ 0x34
 8003dde:	460c      	mov	r4, r1
 8003de0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003de4:	4616      	mov	r6, r2
 8003de6:	461f      	mov	r7, r3
 8003de8:	4605      	mov	r5, r0
 8003dea:	f000 fdbd 	bl	8004968 <_localeconv_r>
 8003dee:	6803      	ldr	r3, [r0, #0]
 8003df0:	9304      	str	r3, [sp, #16]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7fc fa3c 	bl	8000270 <strlen>
 8003df8:	2300      	movs	r3, #0
 8003dfa:	930a      	str	r3, [sp, #40]	@ 0x28
 8003dfc:	f8d8 3000 	ldr.w	r3, [r8]
 8003e00:	9005      	str	r0, [sp, #20]
 8003e02:	3307      	adds	r3, #7
 8003e04:	f023 0307 	bic.w	r3, r3, #7
 8003e08:	f103 0208 	add.w	r2, r3, #8
 8003e0c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003e10:	f8d4 b000 	ldr.w	fp, [r4]
 8003e14:	f8c8 2000 	str.w	r2, [r8]
 8003e18:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003e1c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003e20:	9307      	str	r3, [sp, #28]
 8003e22:	f8cd 8018 	str.w	r8, [sp, #24]
 8003e26:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003e2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003e2e:	4b9c      	ldr	r3, [pc, #624]	@ (80040a0 <_printf_float+0x2c8>)
 8003e30:	f04f 32ff 	mov.w	r2, #4294967295
 8003e34:	f7fc fe7a 	bl	8000b2c <__aeabi_dcmpun>
 8003e38:	bb70      	cbnz	r0, 8003e98 <_printf_float+0xc0>
 8003e3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003e3e:	4b98      	ldr	r3, [pc, #608]	@ (80040a0 <_printf_float+0x2c8>)
 8003e40:	f04f 32ff 	mov.w	r2, #4294967295
 8003e44:	f7fc fe54 	bl	8000af0 <__aeabi_dcmple>
 8003e48:	bb30      	cbnz	r0, 8003e98 <_printf_float+0xc0>
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	4640      	mov	r0, r8
 8003e50:	4649      	mov	r1, r9
 8003e52:	f7fc fe43 	bl	8000adc <__aeabi_dcmplt>
 8003e56:	b110      	cbz	r0, 8003e5e <_printf_float+0x86>
 8003e58:	232d      	movs	r3, #45	@ 0x2d
 8003e5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e5e:	4a91      	ldr	r2, [pc, #580]	@ (80040a4 <_printf_float+0x2cc>)
 8003e60:	4b91      	ldr	r3, [pc, #580]	@ (80040a8 <_printf_float+0x2d0>)
 8003e62:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003e66:	bf8c      	ite	hi
 8003e68:	4690      	movhi	r8, r2
 8003e6a:	4698      	movls	r8, r3
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	6123      	str	r3, [r4, #16]
 8003e70:	f02b 0304 	bic.w	r3, fp, #4
 8003e74:	6023      	str	r3, [r4, #0]
 8003e76:	f04f 0900 	mov.w	r9, #0
 8003e7a:	9700      	str	r7, [sp, #0]
 8003e7c:	4633      	mov	r3, r6
 8003e7e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003e80:	4621      	mov	r1, r4
 8003e82:	4628      	mov	r0, r5
 8003e84:	f000 f9d2 	bl	800422c <_printf_common>
 8003e88:	3001      	adds	r0, #1
 8003e8a:	f040 808d 	bne.w	8003fa8 <_printf_float+0x1d0>
 8003e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8003e92:	b00d      	add	sp, #52	@ 0x34
 8003e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e98:	4642      	mov	r2, r8
 8003e9a:	464b      	mov	r3, r9
 8003e9c:	4640      	mov	r0, r8
 8003e9e:	4649      	mov	r1, r9
 8003ea0:	f7fc fe44 	bl	8000b2c <__aeabi_dcmpun>
 8003ea4:	b140      	cbz	r0, 8003eb8 <_printf_float+0xe0>
 8003ea6:	464b      	mov	r3, r9
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	bfbc      	itt	lt
 8003eac:	232d      	movlt	r3, #45	@ 0x2d
 8003eae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003eb2:	4a7e      	ldr	r2, [pc, #504]	@ (80040ac <_printf_float+0x2d4>)
 8003eb4:	4b7e      	ldr	r3, [pc, #504]	@ (80040b0 <_printf_float+0x2d8>)
 8003eb6:	e7d4      	b.n	8003e62 <_printf_float+0x8a>
 8003eb8:	6863      	ldr	r3, [r4, #4]
 8003eba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003ebe:	9206      	str	r2, [sp, #24]
 8003ec0:	1c5a      	adds	r2, r3, #1
 8003ec2:	d13b      	bne.n	8003f3c <_printf_float+0x164>
 8003ec4:	2306      	movs	r3, #6
 8003ec6:	6063      	str	r3, [r4, #4]
 8003ec8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003ecc:	2300      	movs	r3, #0
 8003ece:	6022      	str	r2, [r4, #0]
 8003ed0:	9303      	str	r3, [sp, #12]
 8003ed2:	ab0a      	add	r3, sp, #40	@ 0x28
 8003ed4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003ed8:	ab09      	add	r3, sp, #36	@ 0x24
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	6861      	ldr	r1, [r4, #4]
 8003ede:	ec49 8b10 	vmov	d0, r8, r9
 8003ee2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003ee6:	4628      	mov	r0, r5
 8003ee8:	f7ff fed6 	bl	8003c98 <__cvt>
 8003eec:	9b06      	ldr	r3, [sp, #24]
 8003eee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003ef0:	2b47      	cmp	r3, #71	@ 0x47
 8003ef2:	4680      	mov	r8, r0
 8003ef4:	d129      	bne.n	8003f4a <_printf_float+0x172>
 8003ef6:	1cc8      	adds	r0, r1, #3
 8003ef8:	db02      	blt.n	8003f00 <_printf_float+0x128>
 8003efa:	6863      	ldr	r3, [r4, #4]
 8003efc:	4299      	cmp	r1, r3
 8003efe:	dd41      	ble.n	8003f84 <_printf_float+0x1ac>
 8003f00:	f1aa 0a02 	sub.w	sl, sl, #2
 8003f04:	fa5f fa8a 	uxtb.w	sl, sl
 8003f08:	3901      	subs	r1, #1
 8003f0a:	4652      	mov	r2, sl
 8003f0c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003f10:	9109      	str	r1, [sp, #36]	@ 0x24
 8003f12:	f7ff ff26 	bl	8003d62 <__exponent>
 8003f16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003f18:	1813      	adds	r3, r2, r0
 8003f1a:	2a01      	cmp	r2, #1
 8003f1c:	4681      	mov	r9, r0
 8003f1e:	6123      	str	r3, [r4, #16]
 8003f20:	dc02      	bgt.n	8003f28 <_printf_float+0x150>
 8003f22:	6822      	ldr	r2, [r4, #0]
 8003f24:	07d2      	lsls	r2, r2, #31
 8003f26:	d501      	bpl.n	8003f2c <_printf_float+0x154>
 8003f28:	3301      	adds	r3, #1
 8003f2a:	6123      	str	r3, [r4, #16]
 8003f2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0a2      	beq.n	8003e7a <_printf_float+0xa2>
 8003f34:	232d      	movs	r3, #45	@ 0x2d
 8003f36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f3a:	e79e      	b.n	8003e7a <_printf_float+0xa2>
 8003f3c:	9a06      	ldr	r2, [sp, #24]
 8003f3e:	2a47      	cmp	r2, #71	@ 0x47
 8003f40:	d1c2      	bne.n	8003ec8 <_printf_float+0xf0>
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1c0      	bne.n	8003ec8 <_printf_float+0xf0>
 8003f46:	2301      	movs	r3, #1
 8003f48:	e7bd      	b.n	8003ec6 <_printf_float+0xee>
 8003f4a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003f4e:	d9db      	bls.n	8003f08 <_printf_float+0x130>
 8003f50:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003f54:	d118      	bne.n	8003f88 <_printf_float+0x1b0>
 8003f56:	2900      	cmp	r1, #0
 8003f58:	6863      	ldr	r3, [r4, #4]
 8003f5a:	dd0b      	ble.n	8003f74 <_printf_float+0x19c>
 8003f5c:	6121      	str	r1, [r4, #16]
 8003f5e:	b913      	cbnz	r3, 8003f66 <_printf_float+0x18e>
 8003f60:	6822      	ldr	r2, [r4, #0]
 8003f62:	07d0      	lsls	r0, r2, #31
 8003f64:	d502      	bpl.n	8003f6c <_printf_float+0x194>
 8003f66:	3301      	adds	r3, #1
 8003f68:	440b      	add	r3, r1
 8003f6a:	6123      	str	r3, [r4, #16]
 8003f6c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003f6e:	f04f 0900 	mov.w	r9, #0
 8003f72:	e7db      	b.n	8003f2c <_printf_float+0x154>
 8003f74:	b913      	cbnz	r3, 8003f7c <_printf_float+0x1a4>
 8003f76:	6822      	ldr	r2, [r4, #0]
 8003f78:	07d2      	lsls	r2, r2, #31
 8003f7a:	d501      	bpl.n	8003f80 <_printf_float+0x1a8>
 8003f7c:	3302      	adds	r3, #2
 8003f7e:	e7f4      	b.n	8003f6a <_printf_float+0x192>
 8003f80:	2301      	movs	r3, #1
 8003f82:	e7f2      	b.n	8003f6a <_printf_float+0x192>
 8003f84:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003f88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003f8a:	4299      	cmp	r1, r3
 8003f8c:	db05      	blt.n	8003f9a <_printf_float+0x1c2>
 8003f8e:	6823      	ldr	r3, [r4, #0]
 8003f90:	6121      	str	r1, [r4, #16]
 8003f92:	07d8      	lsls	r0, r3, #31
 8003f94:	d5ea      	bpl.n	8003f6c <_printf_float+0x194>
 8003f96:	1c4b      	adds	r3, r1, #1
 8003f98:	e7e7      	b.n	8003f6a <_printf_float+0x192>
 8003f9a:	2900      	cmp	r1, #0
 8003f9c:	bfd4      	ite	le
 8003f9e:	f1c1 0202 	rsble	r2, r1, #2
 8003fa2:	2201      	movgt	r2, #1
 8003fa4:	4413      	add	r3, r2
 8003fa6:	e7e0      	b.n	8003f6a <_printf_float+0x192>
 8003fa8:	6823      	ldr	r3, [r4, #0]
 8003faa:	055a      	lsls	r2, r3, #21
 8003fac:	d407      	bmi.n	8003fbe <_printf_float+0x1e6>
 8003fae:	6923      	ldr	r3, [r4, #16]
 8003fb0:	4642      	mov	r2, r8
 8003fb2:	4631      	mov	r1, r6
 8003fb4:	4628      	mov	r0, r5
 8003fb6:	47b8      	blx	r7
 8003fb8:	3001      	adds	r0, #1
 8003fba:	d12b      	bne.n	8004014 <_printf_float+0x23c>
 8003fbc:	e767      	b.n	8003e8e <_printf_float+0xb6>
 8003fbe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003fc2:	f240 80dd 	bls.w	8004180 <_printf_float+0x3a8>
 8003fc6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003fca:	2200      	movs	r2, #0
 8003fcc:	2300      	movs	r3, #0
 8003fce:	f7fc fd7b 	bl	8000ac8 <__aeabi_dcmpeq>
 8003fd2:	2800      	cmp	r0, #0
 8003fd4:	d033      	beq.n	800403e <_printf_float+0x266>
 8003fd6:	4a37      	ldr	r2, [pc, #220]	@ (80040b4 <_printf_float+0x2dc>)
 8003fd8:	2301      	movs	r3, #1
 8003fda:	4631      	mov	r1, r6
 8003fdc:	4628      	mov	r0, r5
 8003fde:	47b8      	blx	r7
 8003fe0:	3001      	adds	r0, #1
 8003fe2:	f43f af54 	beq.w	8003e8e <_printf_float+0xb6>
 8003fe6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003fea:	4543      	cmp	r3, r8
 8003fec:	db02      	blt.n	8003ff4 <_printf_float+0x21c>
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	07d8      	lsls	r0, r3, #31
 8003ff2:	d50f      	bpl.n	8004014 <_printf_float+0x23c>
 8003ff4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ff8:	4631      	mov	r1, r6
 8003ffa:	4628      	mov	r0, r5
 8003ffc:	47b8      	blx	r7
 8003ffe:	3001      	adds	r0, #1
 8004000:	f43f af45 	beq.w	8003e8e <_printf_float+0xb6>
 8004004:	f04f 0900 	mov.w	r9, #0
 8004008:	f108 38ff 	add.w	r8, r8, #4294967295
 800400c:	f104 0a1a 	add.w	sl, r4, #26
 8004010:	45c8      	cmp	r8, r9
 8004012:	dc09      	bgt.n	8004028 <_printf_float+0x250>
 8004014:	6823      	ldr	r3, [r4, #0]
 8004016:	079b      	lsls	r3, r3, #30
 8004018:	f100 8103 	bmi.w	8004222 <_printf_float+0x44a>
 800401c:	68e0      	ldr	r0, [r4, #12]
 800401e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004020:	4298      	cmp	r0, r3
 8004022:	bfb8      	it	lt
 8004024:	4618      	movlt	r0, r3
 8004026:	e734      	b.n	8003e92 <_printf_float+0xba>
 8004028:	2301      	movs	r3, #1
 800402a:	4652      	mov	r2, sl
 800402c:	4631      	mov	r1, r6
 800402e:	4628      	mov	r0, r5
 8004030:	47b8      	blx	r7
 8004032:	3001      	adds	r0, #1
 8004034:	f43f af2b 	beq.w	8003e8e <_printf_float+0xb6>
 8004038:	f109 0901 	add.w	r9, r9, #1
 800403c:	e7e8      	b.n	8004010 <_printf_float+0x238>
 800403e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004040:	2b00      	cmp	r3, #0
 8004042:	dc39      	bgt.n	80040b8 <_printf_float+0x2e0>
 8004044:	4a1b      	ldr	r2, [pc, #108]	@ (80040b4 <_printf_float+0x2dc>)
 8004046:	2301      	movs	r3, #1
 8004048:	4631      	mov	r1, r6
 800404a:	4628      	mov	r0, r5
 800404c:	47b8      	blx	r7
 800404e:	3001      	adds	r0, #1
 8004050:	f43f af1d 	beq.w	8003e8e <_printf_float+0xb6>
 8004054:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004058:	ea59 0303 	orrs.w	r3, r9, r3
 800405c:	d102      	bne.n	8004064 <_printf_float+0x28c>
 800405e:	6823      	ldr	r3, [r4, #0]
 8004060:	07d9      	lsls	r1, r3, #31
 8004062:	d5d7      	bpl.n	8004014 <_printf_float+0x23c>
 8004064:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004068:	4631      	mov	r1, r6
 800406a:	4628      	mov	r0, r5
 800406c:	47b8      	blx	r7
 800406e:	3001      	adds	r0, #1
 8004070:	f43f af0d 	beq.w	8003e8e <_printf_float+0xb6>
 8004074:	f04f 0a00 	mov.w	sl, #0
 8004078:	f104 0b1a 	add.w	fp, r4, #26
 800407c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800407e:	425b      	negs	r3, r3
 8004080:	4553      	cmp	r3, sl
 8004082:	dc01      	bgt.n	8004088 <_printf_float+0x2b0>
 8004084:	464b      	mov	r3, r9
 8004086:	e793      	b.n	8003fb0 <_printf_float+0x1d8>
 8004088:	2301      	movs	r3, #1
 800408a:	465a      	mov	r2, fp
 800408c:	4631      	mov	r1, r6
 800408e:	4628      	mov	r0, r5
 8004090:	47b8      	blx	r7
 8004092:	3001      	adds	r0, #1
 8004094:	f43f aefb 	beq.w	8003e8e <_printf_float+0xb6>
 8004098:	f10a 0a01 	add.w	sl, sl, #1
 800409c:	e7ee      	b.n	800407c <_printf_float+0x2a4>
 800409e:	bf00      	nop
 80040a0:	7fefffff 	.word	0x7fefffff
 80040a4:	08006d30 	.word	0x08006d30
 80040a8:	08006d2c 	.word	0x08006d2c
 80040ac:	08006d38 	.word	0x08006d38
 80040b0:	08006d34 	.word	0x08006d34
 80040b4:	08006d3c 	.word	0x08006d3c
 80040b8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80040ba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80040be:	4553      	cmp	r3, sl
 80040c0:	bfa8      	it	ge
 80040c2:	4653      	movge	r3, sl
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	4699      	mov	r9, r3
 80040c8:	dc36      	bgt.n	8004138 <_printf_float+0x360>
 80040ca:	f04f 0b00 	mov.w	fp, #0
 80040ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80040d2:	f104 021a 	add.w	r2, r4, #26
 80040d6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80040d8:	9306      	str	r3, [sp, #24]
 80040da:	eba3 0309 	sub.w	r3, r3, r9
 80040de:	455b      	cmp	r3, fp
 80040e0:	dc31      	bgt.n	8004146 <_printf_float+0x36e>
 80040e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040e4:	459a      	cmp	sl, r3
 80040e6:	dc3a      	bgt.n	800415e <_printf_float+0x386>
 80040e8:	6823      	ldr	r3, [r4, #0]
 80040ea:	07da      	lsls	r2, r3, #31
 80040ec:	d437      	bmi.n	800415e <_printf_float+0x386>
 80040ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040f0:	ebaa 0903 	sub.w	r9, sl, r3
 80040f4:	9b06      	ldr	r3, [sp, #24]
 80040f6:	ebaa 0303 	sub.w	r3, sl, r3
 80040fa:	4599      	cmp	r9, r3
 80040fc:	bfa8      	it	ge
 80040fe:	4699      	movge	r9, r3
 8004100:	f1b9 0f00 	cmp.w	r9, #0
 8004104:	dc33      	bgt.n	800416e <_printf_float+0x396>
 8004106:	f04f 0800 	mov.w	r8, #0
 800410a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800410e:	f104 0b1a 	add.w	fp, r4, #26
 8004112:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004114:	ebaa 0303 	sub.w	r3, sl, r3
 8004118:	eba3 0309 	sub.w	r3, r3, r9
 800411c:	4543      	cmp	r3, r8
 800411e:	f77f af79 	ble.w	8004014 <_printf_float+0x23c>
 8004122:	2301      	movs	r3, #1
 8004124:	465a      	mov	r2, fp
 8004126:	4631      	mov	r1, r6
 8004128:	4628      	mov	r0, r5
 800412a:	47b8      	blx	r7
 800412c:	3001      	adds	r0, #1
 800412e:	f43f aeae 	beq.w	8003e8e <_printf_float+0xb6>
 8004132:	f108 0801 	add.w	r8, r8, #1
 8004136:	e7ec      	b.n	8004112 <_printf_float+0x33a>
 8004138:	4642      	mov	r2, r8
 800413a:	4631      	mov	r1, r6
 800413c:	4628      	mov	r0, r5
 800413e:	47b8      	blx	r7
 8004140:	3001      	adds	r0, #1
 8004142:	d1c2      	bne.n	80040ca <_printf_float+0x2f2>
 8004144:	e6a3      	b.n	8003e8e <_printf_float+0xb6>
 8004146:	2301      	movs	r3, #1
 8004148:	4631      	mov	r1, r6
 800414a:	4628      	mov	r0, r5
 800414c:	9206      	str	r2, [sp, #24]
 800414e:	47b8      	blx	r7
 8004150:	3001      	adds	r0, #1
 8004152:	f43f ae9c 	beq.w	8003e8e <_printf_float+0xb6>
 8004156:	9a06      	ldr	r2, [sp, #24]
 8004158:	f10b 0b01 	add.w	fp, fp, #1
 800415c:	e7bb      	b.n	80040d6 <_printf_float+0x2fe>
 800415e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004162:	4631      	mov	r1, r6
 8004164:	4628      	mov	r0, r5
 8004166:	47b8      	blx	r7
 8004168:	3001      	adds	r0, #1
 800416a:	d1c0      	bne.n	80040ee <_printf_float+0x316>
 800416c:	e68f      	b.n	8003e8e <_printf_float+0xb6>
 800416e:	9a06      	ldr	r2, [sp, #24]
 8004170:	464b      	mov	r3, r9
 8004172:	4442      	add	r2, r8
 8004174:	4631      	mov	r1, r6
 8004176:	4628      	mov	r0, r5
 8004178:	47b8      	blx	r7
 800417a:	3001      	adds	r0, #1
 800417c:	d1c3      	bne.n	8004106 <_printf_float+0x32e>
 800417e:	e686      	b.n	8003e8e <_printf_float+0xb6>
 8004180:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004184:	f1ba 0f01 	cmp.w	sl, #1
 8004188:	dc01      	bgt.n	800418e <_printf_float+0x3b6>
 800418a:	07db      	lsls	r3, r3, #31
 800418c:	d536      	bpl.n	80041fc <_printf_float+0x424>
 800418e:	2301      	movs	r3, #1
 8004190:	4642      	mov	r2, r8
 8004192:	4631      	mov	r1, r6
 8004194:	4628      	mov	r0, r5
 8004196:	47b8      	blx	r7
 8004198:	3001      	adds	r0, #1
 800419a:	f43f ae78 	beq.w	8003e8e <_printf_float+0xb6>
 800419e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80041a2:	4631      	mov	r1, r6
 80041a4:	4628      	mov	r0, r5
 80041a6:	47b8      	blx	r7
 80041a8:	3001      	adds	r0, #1
 80041aa:	f43f ae70 	beq.w	8003e8e <_printf_float+0xb6>
 80041ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80041b2:	2200      	movs	r2, #0
 80041b4:	2300      	movs	r3, #0
 80041b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80041ba:	f7fc fc85 	bl	8000ac8 <__aeabi_dcmpeq>
 80041be:	b9c0      	cbnz	r0, 80041f2 <_printf_float+0x41a>
 80041c0:	4653      	mov	r3, sl
 80041c2:	f108 0201 	add.w	r2, r8, #1
 80041c6:	4631      	mov	r1, r6
 80041c8:	4628      	mov	r0, r5
 80041ca:	47b8      	blx	r7
 80041cc:	3001      	adds	r0, #1
 80041ce:	d10c      	bne.n	80041ea <_printf_float+0x412>
 80041d0:	e65d      	b.n	8003e8e <_printf_float+0xb6>
 80041d2:	2301      	movs	r3, #1
 80041d4:	465a      	mov	r2, fp
 80041d6:	4631      	mov	r1, r6
 80041d8:	4628      	mov	r0, r5
 80041da:	47b8      	blx	r7
 80041dc:	3001      	adds	r0, #1
 80041de:	f43f ae56 	beq.w	8003e8e <_printf_float+0xb6>
 80041e2:	f108 0801 	add.w	r8, r8, #1
 80041e6:	45d0      	cmp	r8, sl
 80041e8:	dbf3      	blt.n	80041d2 <_printf_float+0x3fa>
 80041ea:	464b      	mov	r3, r9
 80041ec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80041f0:	e6df      	b.n	8003fb2 <_printf_float+0x1da>
 80041f2:	f04f 0800 	mov.w	r8, #0
 80041f6:	f104 0b1a 	add.w	fp, r4, #26
 80041fa:	e7f4      	b.n	80041e6 <_printf_float+0x40e>
 80041fc:	2301      	movs	r3, #1
 80041fe:	4642      	mov	r2, r8
 8004200:	e7e1      	b.n	80041c6 <_printf_float+0x3ee>
 8004202:	2301      	movs	r3, #1
 8004204:	464a      	mov	r2, r9
 8004206:	4631      	mov	r1, r6
 8004208:	4628      	mov	r0, r5
 800420a:	47b8      	blx	r7
 800420c:	3001      	adds	r0, #1
 800420e:	f43f ae3e 	beq.w	8003e8e <_printf_float+0xb6>
 8004212:	f108 0801 	add.w	r8, r8, #1
 8004216:	68e3      	ldr	r3, [r4, #12]
 8004218:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800421a:	1a5b      	subs	r3, r3, r1
 800421c:	4543      	cmp	r3, r8
 800421e:	dcf0      	bgt.n	8004202 <_printf_float+0x42a>
 8004220:	e6fc      	b.n	800401c <_printf_float+0x244>
 8004222:	f04f 0800 	mov.w	r8, #0
 8004226:	f104 0919 	add.w	r9, r4, #25
 800422a:	e7f4      	b.n	8004216 <_printf_float+0x43e>

0800422c <_printf_common>:
 800422c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004230:	4616      	mov	r6, r2
 8004232:	4698      	mov	r8, r3
 8004234:	688a      	ldr	r2, [r1, #8]
 8004236:	690b      	ldr	r3, [r1, #16]
 8004238:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800423c:	4293      	cmp	r3, r2
 800423e:	bfb8      	it	lt
 8004240:	4613      	movlt	r3, r2
 8004242:	6033      	str	r3, [r6, #0]
 8004244:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004248:	4607      	mov	r7, r0
 800424a:	460c      	mov	r4, r1
 800424c:	b10a      	cbz	r2, 8004252 <_printf_common+0x26>
 800424e:	3301      	adds	r3, #1
 8004250:	6033      	str	r3, [r6, #0]
 8004252:	6823      	ldr	r3, [r4, #0]
 8004254:	0699      	lsls	r1, r3, #26
 8004256:	bf42      	ittt	mi
 8004258:	6833      	ldrmi	r3, [r6, #0]
 800425a:	3302      	addmi	r3, #2
 800425c:	6033      	strmi	r3, [r6, #0]
 800425e:	6825      	ldr	r5, [r4, #0]
 8004260:	f015 0506 	ands.w	r5, r5, #6
 8004264:	d106      	bne.n	8004274 <_printf_common+0x48>
 8004266:	f104 0a19 	add.w	sl, r4, #25
 800426a:	68e3      	ldr	r3, [r4, #12]
 800426c:	6832      	ldr	r2, [r6, #0]
 800426e:	1a9b      	subs	r3, r3, r2
 8004270:	42ab      	cmp	r3, r5
 8004272:	dc26      	bgt.n	80042c2 <_printf_common+0x96>
 8004274:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004278:	6822      	ldr	r2, [r4, #0]
 800427a:	3b00      	subs	r3, #0
 800427c:	bf18      	it	ne
 800427e:	2301      	movne	r3, #1
 8004280:	0692      	lsls	r2, r2, #26
 8004282:	d42b      	bmi.n	80042dc <_printf_common+0xb0>
 8004284:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004288:	4641      	mov	r1, r8
 800428a:	4638      	mov	r0, r7
 800428c:	47c8      	blx	r9
 800428e:	3001      	adds	r0, #1
 8004290:	d01e      	beq.n	80042d0 <_printf_common+0xa4>
 8004292:	6823      	ldr	r3, [r4, #0]
 8004294:	6922      	ldr	r2, [r4, #16]
 8004296:	f003 0306 	and.w	r3, r3, #6
 800429a:	2b04      	cmp	r3, #4
 800429c:	bf02      	ittt	eq
 800429e:	68e5      	ldreq	r5, [r4, #12]
 80042a0:	6833      	ldreq	r3, [r6, #0]
 80042a2:	1aed      	subeq	r5, r5, r3
 80042a4:	68a3      	ldr	r3, [r4, #8]
 80042a6:	bf0c      	ite	eq
 80042a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042ac:	2500      	movne	r5, #0
 80042ae:	4293      	cmp	r3, r2
 80042b0:	bfc4      	itt	gt
 80042b2:	1a9b      	subgt	r3, r3, r2
 80042b4:	18ed      	addgt	r5, r5, r3
 80042b6:	2600      	movs	r6, #0
 80042b8:	341a      	adds	r4, #26
 80042ba:	42b5      	cmp	r5, r6
 80042bc:	d11a      	bne.n	80042f4 <_printf_common+0xc8>
 80042be:	2000      	movs	r0, #0
 80042c0:	e008      	b.n	80042d4 <_printf_common+0xa8>
 80042c2:	2301      	movs	r3, #1
 80042c4:	4652      	mov	r2, sl
 80042c6:	4641      	mov	r1, r8
 80042c8:	4638      	mov	r0, r7
 80042ca:	47c8      	blx	r9
 80042cc:	3001      	adds	r0, #1
 80042ce:	d103      	bne.n	80042d8 <_printf_common+0xac>
 80042d0:	f04f 30ff 	mov.w	r0, #4294967295
 80042d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042d8:	3501      	adds	r5, #1
 80042da:	e7c6      	b.n	800426a <_printf_common+0x3e>
 80042dc:	18e1      	adds	r1, r4, r3
 80042de:	1c5a      	adds	r2, r3, #1
 80042e0:	2030      	movs	r0, #48	@ 0x30
 80042e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80042e6:	4422      	add	r2, r4
 80042e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80042ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80042f0:	3302      	adds	r3, #2
 80042f2:	e7c7      	b.n	8004284 <_printf_common+0x58>
 80042f4:	2301      	movs	r3, #1
 80042f6:	4622      	mov	r2, r4
 80042f8:	4641      	mov	r1, r8
 80042fa:	4638      	mov	r0, r7
 80042fc:	47c8      	blx	r9
 80042fe:	3001      	adds	r0, #1
 8004300:	d0e6      	beq.n	80042d0 <_printf_common+0xa4>
 8004302:	3601      	adds	r6, #1
 8004304:	e7d9      	b.n	80042ba <_printf_common+0x8e>
	...

08004308 <_printf_i>:
 8004308:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800430c:	7e0f      	ldrb	r7, [r1, #24]
 800430e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004310:	2f78      	cmp	r7, #120	@ 0x78
 8004312:	4691      	mov	r9, r2
 8004314:	4680      	mov	r8, r0
 8004316:	460c      	mov	r4, r1
 8004318:	469a      	mov	sl, r3
 800431a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800431e:	d807      	bhi.n	8004330 <_printf_i+0x28>
 8004320:	2f62      	cmp	r7, #98	@ 0x62
 8004322:	d80a      	bhi.n	800433a <_printf_i+0x32>
 8004324:	2f00      	cmp	r7, #0
 8004326:	f000 80d1 	beq.w	80044cc <_printf_i+0x1c4>
 800432a:	2f58      	cmp	r7, #88	@ 0x58
 800432c:	f000 80b8 	beq.w	80044a0 <_printf_i+0x198>
 8004330:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004334:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004338:	e03a      	b.n	80043b0 <_printf_i+0xa8>
 800433a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800433e:	2b15      	cmp	r3, #21
 8004340:	d8f6      	bhi.n	8004330 <_printf_i+0x28>
 8004342:	a101      	add	r1, pc, #4	@ (adr r1, 8004348 <_printf_i+0x40>)
 8004344:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004348:	080043a1 	.word	0x080043a1
 800434c:	080043b5 	.word	0x080043b5
 8004350:	08004331 	.word	0x08004331
 8004354:	08004331 	.word	0x08004331
 8004358:	08004331 	.word	0x08004331
 800435c:	08004331 	.word	0x08004331
 8004360:	080043b5 	.word	0x080043b5
 8004364:	08004331 	.word	0x08004331
 8004368:	08004331 	.word	0x08004331
 800436c:	08004331 	.word	0x08004331
 8004370:	08004331 	.word	0x08004331
 8004374:	080044b3 	.word	0x080044b3
 8004378:	080043df 	.word	0x080043df
 800437c:	0800446d 	.word	0x0800446d
 8004380:	08004331 	.word	0x08004331
 8004384:	08004331 	.word	0x08004331
 8004388:	080044d5 	.word	0x080044d5
 800438c:	08004331 	.word	0x08004331
 8004390:	080043df 	.word	0x080043df
 8004394:	08004331 	.word	0x08004331
 8004398:	08004331 	.word	0x08004331
 800439c:	08004475 	.word	0x08004475
 80043a0:	6833      	ldr	r3, [r6, #0]
 80043a2:	1d1a      	adds	r2, r3, #4
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6032      	str	r2, [r6, #0]
 80043a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80043ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80043b0:	2301      	movs	r3, #1
 80043b2:	e09c      	b.n	80044ee <_printf_i+0x1e6>
 80043b4:	6833      	ldr	r3, [r6, #0]
 80043b6:	6820      	ldr	r0, [r4, #0]
 80043b8:	1d19      	adds	r1, r3, #4
 80043ba:	6031      	str	r1, [r6, #0]
 80043bc:	0606      	lsls	r6, r0, #24
 80043be:	d501      	bpl.n	80043c4 <_printf_i+0xbc>
 80043c0:	681d      	ldr	r5, [r3, #0]
 80043c2:	e003      	b.n	80043cc <_printf_i+0xc4>
 80043c4:	0645      	lsls	r5, r0, #25
 80043c6:	d5fb      	bpl.n	80043c0 <_printf_i+0xb8>
 80043c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80043cc:	2d00      	cmp	r5, #0
 80043ce:	da03      	bge.n	80043d8 <_printf_i+0xd0>
 80043d0:	232d      	movs	r3, #45	@ 0x2d
 80043d2:	426d      	negs	r5, r5
 80043d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043d8:	4858      	ldr	r0, [pc, #352]	@ (800453c <_printf_i+0x234>)
 80043da:	230a      	movs	r3, #10
 80043dc:	e011      	b.n	8004402 <_printf_i+0xfa>
 80043de:	6821      	ldr	r1, [r4, #0]
 80043e0:	6833      	ldr	r3, [r6, #0]
 80043e2:	0608      	lsls	r0, r1, #24
 80043e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80043e8:	d402      	bmi.n	80043f0 <_printf_i+0xe8>
 80043ea:	0649      	lsls	r1, r1, #25
 80043ec:	bf48      	it	mi
 80043ee:	b2ad      	uxthmi	r5, r5
 80043f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80043f2:	4852      	ldr	r0, [pc, #328]	@ (800453c <_printf_i+0x234>)
 80043f4:	6033      	str	r3, [r6, #0]
 80043f6:	bf14      	ite	ne
 80043f8:	230a      	movne	r3, #10
 80043fa:	2308      	moveq	r3, #8
 80043fc:	2100      	movs	r1, #0
 80043fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004402:	6866      	ldr	r6, [r4, #4]
 8004404:	60a6      	str	r6, [r4, #8]
 8004406:	2e00      	cmp	r6, #0
 8004408:	db05      	blt.n	8004416 <_printf_i+0x10e>
 800440a:	6821      	ldr	r1, [r4, #0]
 800440c:	432e      	orrs	r6, r5
 800440e:	f021 0104 	bic.w	r1, r1, #4
 8004412:	6021      	str	r1, [r4, #0]
 8004414:	d04b      	beq.n	80044ae <_printf_i+0x1a6>
 8004416:	4616      	mov	r6, r2
 8004418:	fbb5 f1f3 	udiv	r1, r5, r3
 800441c:	fb03 5711 	mls	r7, r3, r1, r5
 8004420:	5dc7      	ldrb	r7, [r0, r7]
 8004422:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004426:	462f      	mov	r7, r5
 8004428:	42bb      	cmp	r3, r7
 800442a:	460d      	mov	r5, r1
 800442c:	d9f4      	bls.n	8004418 <_printf_i+0x110>
 800442e:	2b08      	cmp	r3, #8
 8004430:	d10b      	bne.n	800444a <_printf_i+0x142>
 8004432:	6823      	ldr	r3, [r4, #0]
 8004434:	07df      	lsls	r7, r3, #31
 8004436:	d508      	bpl.n	800444a <_printf_i+0x142>
 8004438:	6923      	ldr	r3, [r4, #16]
 800443a:	6861      	ldr	r1, [r4, #4]
 800443c:	4299      	cmp	r1, r3
 800443e:	bfde      	ittt	le
 8004440:	2330      	movle	r3, #48	@ 0x30
 8004442:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004446:	f106 36ff 	addle.w	r6, r6, #4294967295
 800444a:	1b92      	subs	r2, r2, r6
 800444c:	6122      	str	r2, [r4, #16]
 800444e:	f8cd a000 	str.w	sl, [sp]
 8004452:	464b      	mov	r3, r9
 8004454:	aa03      	add	r2, sp, #12
 8004456:	4621      	mov	r1, r4
 8004458:	4640      	mov	r0, r8
 800445a:	f7ff fee7 	bl	800422c <_printf_common>
 800445e:	3001      	adds	r0, #1
 8004460:	d14a      	bne.n	80044f8 <_printf_i+0x1f0>
 8004462:	f04f 30ff 	mov.w	r0, #4294967295
 8004466:	b004      	add	sp, #16
 8004468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800446c:	6823      	ldr	r3, [r4, #0]
 800446e:	f043 0320 	orr.w	r3, r3, #32
 8004472:	6023      	str	r3, [r4, #0]
 8004474:	4832      	ldr	r0, [pc, #200]	@ (8004540 <_printf_i+0x238>)
 8004476:	2778      	movs	r7, #120	@ 0x78
 8004478:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800447c:	6823      	ldr	r3, [r4, #0]
 800447e:	6831      	ldr	r1, [r6, #0]
 8004480:	061f      	lsls	r7, r3, #24
 8004482:	f851 5b04 	ldr.w	r5, [r1], #4
 8004486:	d402      	bmi.n	800448e <_printf_i+0x186>
 8004488:	065f      	lsls	r7, r3, #25
 800448a:	bf48      	it	mi
 800448c:	b2ad      	uxthmi	r5, r5
 800448e:	6031      	str	r1, [r6, #0]
 8004490:	07d9      	lsls	r1, r3, #31
 8004492:	bf44      	itt	mi
 8004494:	f043 0320 	orrmi.w	r3, r3, #32
 8004498:	6023      	strmi	r3, [r4, #0]
 800449a:	b11d      	cbz	r5, 80044a4 <_printf_i+0x19c>
 800449c:	2310      	movs	r3, #16
 800449e:	e7ad      	b.n	80043fc <_printf_i+0xf4>
 80044a0:	4826      	ldr	r0, [pc, #152]	@ (800453c <_printf_i+0x234>)
 80044a2:	e7e9      	b.n	8004478 <_printf_i+0x170>
 80044a4:	6823      	ldr	r3, [r4, #0]
 80044a6:	f023 0320 	bic.w	r3, r3, #32
 80044aa:	6023      	str	r3, [r4, #0]
 80044ac:	e7f6      	b.n	800449c <_printf_i+0x194>
 80044ae:	4616      	mov	r6, r2
 80044b0:	e7bd      	b.n	800442e <_printf_i+0x126>
 80044b2:	6833      	ldr	r3, [r6, #0]
 80044b4:	6825      	ldr	r5, [r4, #0]
 80044b6:	6961      	ldr	r1, [r4, #20]
 80044b8:	1d18      	adds	r0, r3, #4
 80044ba:	6030      	str	r0, [r6, #0]
 80044bc:	062e      	lsls	r6, r5, #24
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	d501      	bpl.n	80044c6 <_printf_i+0x1be>
 80044c2:	6019      	str	r1, [r3, #0]
 80044c4:	e002      	b.n	80044cc <_printf_i+0x1c4>
 80044c6:	0668      	lsls	r0, r5, #25
 80044c8:	d5fb      	bpl.n	80044c2 <_printf_i+0x1ba>
 80044ca:	8019      	strh	r1, [r3, #0]
 80044cc:	2300      	movs	r3, #0
 80044ce:	6123      	str	r3, [r4, #16]
 80044d0:	4616      	mov	r6, r2
 80044d2:	e7bc      	b.n	800444e <_printf_i+0x146>
 80044d4:	6833      	ldr	r3, [r6, #0]
 80044d6:	1d1a      	adds	r2, r3, #4
 80044d8:	6032      	str	r2, [r6, #0]
 80044da:	681e      	ldr	r6, [r3, #0]
 80044dc:	6862      	ldr	r2, [r4, #4]
 80044de:	2100      	movs	r1, #0
 80044e0:	4630      	mov	r0, r6
 80044e2:	f7fb fe75 	bl	80001d0 <memchr>
 80044e6:	b108      	cbz	r0, 80044ec <_printf_i+0x1e4>
 80044e8:	1b80      	subs	r0, r0, r6
 80044ea:	6060      	str	r0, [r4, #4]
 80044ec:	6863      	ldr	r3, [r4, #4]
 80044ee:	6123      	str	r3, [r4, #16]
 80044f0:	2300      	movs	r3, #0
 80044f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044f6:	e7aa      	b.n	800444e <_printf_i+0x146>
 80044f8:	6923      	ldr	r3, [r4, #16]
 80044fa:	4632      	mov	r2, r6
 80044fc:	4649      	mov	r1, r9
 80044fe:	4640      	mov	r0, r8
 8004500:	47d0      	blx	sl
 8004502:	3001      	adds	r0, #1
 8004504:	d0ad      	beq.n	8004462 <_printf_i+0x15a>
 8004506:	6823      	ldr	r3, [r4, #0]
 8004508:	079b      	lsls	r3, r3, #30
 800450a:	d413      	bmi.n	8004534 <_printf_i+0x22c>
 800450c:	68e0      	ldr	r0, [r4, #12]
 800450e:	9b03      	ldr	r3, [sp, #12]
 8004510:	4298      	cmp	r0, r3
 8004512:	bfb8      	it	lt
 8004514:	4618      	movlt	r0, r3
 8004516:	e7a6      	b.n	8004466 <_printf_i+0x15e>
 8004518:	2301      	movs	r3, #1
 800451a:	4632      	mov	r2, r6
 800451c:	4649      	mov	r1, r9
 800451e:	4640      	mov	r0, r8
 8004520:	47d0      	blx	sl
 8004522:	3001      	adds	r0, #1
 8004524:	d09d      	beq.n	8004462 <_printf_i+0x15a>
 8004526:	3501      	adds	r5, #1
 8004528:	68e3      	ldr	r3, [r4, #12]
 800452a:	9903      	ldr	r1, [sp, #12]
 800452c:	1a5b      	subs	r3, r3, r1
 800452e:	42ab      	cmp	r3, r5
 8004530:	dcf2      	bgt.n	8004518 <_printf_i+0x210>
 8004532:	e7eb      	b.n	800450c <_printf_i+0x204>
 8004534:	2500      	movs	r5, #0
 8004536:	f104 0619 	add.w	r6, r4, #25
 800453a:	e7f5      	b.n	8004528 <_printf_i+0x220>
 800453c:	08006d3e 	.word	0x08006d3e
 8004540:	08006d4f 	.word	0x08006d4f

08004544 <std>:
 8004544:	2300      	movs	r3, #0
 8004546:	b510      	push	{r4, lr}
 8004548:	4604      	mov	r4, r0
 800454a:	e9c0 3300 	strd	r3, r3, [r0]
 800454e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004552:	6083      	str	r3, [r0, #8]
 8004554:	8181      	strh	r1, [r0, #12]
 8004556:	6643      	str	r3, [r0, #100]	@ 0x64
 8004558:	81c2      	strh	r2, [r0, #14]
 800455a:	6183      	str	r3, [r0, #24]
 800455c:	4619      	mov	r1, r3
 800455e:	2208      	movs	r2, #8
 8004560:	305c      	adds	r0, #92	@ 0x5c
 8004562:	f000 f9f9 	bl	8004958 <memset>
 8004566:	4b0d      	ldr	r3, [pc, #52]	@ (800459c <std+0x58>)
 8004568:	6263      	str	r3, [r4, #36]	@ 0x24
 800456a:	4b0d      	ldr	r3, [pc, #52]	@ (80045a0 <std+0x5c>)
 800456c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800456e:	4b0d      	ldr	r3, [pc, #52]	@ (80045a4 <std+0x60>)
 8004570:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004572:	4b0d      	ldr	r3, [pc, #52]	@ (80045a8 <std+0x64>)
 8004574:	6323      	str	r3, [r4, #48]	@ 0x30
 8004576:	4b0d      	ldr	r3, [pc, #52]	@ (80045ac <std+0x68>)
 8004578:	6224      	str	r4, [r4, #32]
 800457a:	429c      	cmp	r4, r3
 800457c:	d006      	beq.n	800458c <std+0x48>
 800457e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004582:	4294      	cmp	r4, r2
 8004584:	d002      	beq.n	800458c <std+0x48>
 8004586:	33d0      	adds	r3, #208	@ 0xd0
 8004588:	429c      	cmp	r4, r3
 800458a:	d105      	bne.n	8004598 <std+0x54>
 800458c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004594:	f000 ba5c 	b.w	8004a50 <__retarget_lock_init_recursive>
 8004598:	bd10      	pop	{r4, pc}
 800459a:	bf00      	nop
 800459c:	080047a9 	.word	0x080047a9
 80045a0:	080047cb 	.word	0x080047cb
 80045a4:	08004803 	.word	0x08004803
 80045a8:	08004827 	.word	0x08004827
 80045ac:	20000270 	.word	0x20000270

080045b0 <stdio_exit_handler>:
 80045b0:	4a02      	ldr	r2, [pc, #8]	@ (80045bc <stdio_exit_handler+0xc>)
 80045b2:	4903      	ldr	r1, [pc, #12]	@ (80045c0 <stdio_exit_handler+0x10>)
 80045b4:	4803      	ldr	r0, [pc, #12]	@ (80045c4 <stdio_exit_handler+0x14>)
 80045b6:	f000 b869 	b.w	800468c <_fwalk_sglue>
 80045ba:	bf00      	nop
 80045bc:	2000000c 	.word	0x2000000c
 80045c0:	08006389 	.word	0x08006389
 80045c4:	2000001c 	.word	0x2000001c

080045c8 <cleanup_stdio>:
 80045c8:	6841      	ldr	r1, [r0, #4]
 80045ca:	4b0c      	ldr	r3, [pc, #48]	@ (80045fc <cleanup_stdio+0x34>)
 80045cc:	4299      	cmp	r1, r3
 80045ce:	b510      	push	{r4, lr}
 80045d0:	4604      	mov	r4, r0
 80045d2:	d001      	beq.n	80045d8 <cleanup_stdio+0x10>
 80045d4:	f001 fed8 	bl	8006388 <_fflush_r>
 80045d8:	68a1      	ldr	r1, [r4, #8]
 80045da:	4b09      	ldr	r3, [pc, #36]	@ (8004600 <cleanup_stdio+0x38>)
 80045dc:	4299      	cmp	r1, r3
 80045de:	d002      	beq.n	80045e6 <cleanup_stdio+0x1e>
 80045e0:	4620      	mov	r0, r4
 80045e2:	f001 fed1 	bl	8006388 <_fflush_r>
 80045e6:	68e1      	ldr	r1, [r4, #12]
 80045e8:	4b06      	ldr	r3, [pc, #24]	@ (8004604 <cleanup_stdio+0x3c>)
 80045ea:	4299      	cmp	r1, r3
 80045ec:	d004      	beq.n	80045f8 <cleanup_stdio+0x30>
 80045ee:	4620      	mov	r0, r4
 80045f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045f4:	f001 bec8 	b.w	8006388 <_fflush_r>
 80045f8:	bd10      	pop	{r4, pc}
 80045fa:	bf00      	nop
 80045fc:	20000270 	.word	0x20000270
 8004600:	200002d8 	.word	0x200002d8
 8004604:	20000340 	.word	0x20000340

08004608 <global_stdio_init.part.0>:
 8004608:	b510      	push	{r4, lr}
 800460a:	4b0b      	ldr	r3, [pc, #44]	@ (8004638 <global_stdio_init.part.0+0x30>)
 800460c:	4c0b      	ldr	r4, [pc, #44]	@ (800463c <global_stdio_init.part.0+0x34>)
 800460e:	4a0c      	ldr	r2, [pc, #48]	@ (8004640 <global_stdio_init.part.0+0x38>)
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	4620      	mov	r0, r4
 8004614:	2200      	movs	r2, #0
 8004616:	2104      	movs	r1, #4
 8004618:	f7ff ff94 	bl	8004544 <std>
 800461c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004620:	2201      	movs	r2, #1
 8004622:	2109      	movs	r1, #9
 8004624:	f7ff ff8e 	bl	8004544 <std>
 8004628:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800462c:	2202      	movs	r2, #2
 800462e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004632:	2112      	movs	r1, #18
 8004634:	f7ff bf86 	b.w	8004544 <std>
 8004638:	200003a8 	.word	0x200003a8
 800463c:	20000270 	.word	0x20000270
 8004640:	080045b1 	.word	0x080045b1

08004644 <__sfp_lock_acquire>:
 8004644:	4801      	ldr	r0, [pc, #4]	@ (800464c <__sfp_lock_acquire+0x8>)
 8004646:	f000 ba04 	b.w	8004a52 <__retarget_lock_acquire_recursive>
 800464a:	bf00      	nop
 800464c:	200003b1 	.word	0x200003b1

08004650 <__sfp_lock_release>:
 8004650:	4801      	ldr	r0, [pc, #4]	@ (8004658 <__sfp_lock_release+0x8>)
 8004652:	f000 b9ff 	b.w	8004a54 <__retarget_lock_release_recursive>
 8004656:	bf00      	nop
 8004658:	200003b1 	.word	0x200003b1

0800465c <__sinit>:
 800465c:	b510      	push	{r4, lr}
 800465e:	4604      	mov	r4, r0
 8004660:	f7ff fff0 	bl	8004644 <__sfp_lock_acquire>
 8004664:	6a23      	ldr	r3, [r4, #32]
 8004666:	b11b      	cbz	r3, 8004670 <__sinit+0x14>
 8004668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800466c:	f7ff bff0 	b.w	8004650 <__sfp_lock_release>
 8004670:	4b04      	ldr	r3, [pc, #16]	@ (8004684 <__sinit+0x28>)
 8004672:	6223      	str	r3, [r4, #32]
 8004674:	4b04      	ldr	r3, [pc, #16]	@ (8004688 <__sinit+0x2c>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1f5      	bne.n	8004668 <__sinit+0xc>
 800467c:	f7ff ffc4 	bl	8004608 <global_stdio_init.part.0>
 8004680:	e7f2      	b.n	8004668 <__sinit+0xc>
 8004682:	bf00      	nop
 8004684:	080045c9 	.word	0x080045c9
 8004688:	200003a8 	.word	0x200003a8

0800468c <_fwalk_sglue>:
 800468c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004690:	4607      	mov	r7, r0
 8004692:	4688      	mov	r8, r1
 8004694:	4614      	mov	r4, r2
 8004696:	2600      	movs	r6, #0
 8004698:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800469c:	f1b9 0901 	subs.w	r9, r9, #1
 80046a0:	d505      	bpl.n	80046ae <_fwalk_sglue+0x22>
 80046a2:	6824      	ldr	r4, [r4, #0]
 80046a4:	2c00      	cmp	r4, #0
 80046a6:	d1f7      	bne.n	8004698 <_fwalk_sglue+0xc>
 80046a8:	4630      	mov	r0, r6
 80046aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046ae:	89ab      	ldrh	r3, [r5, #12]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d907      	bls.n	80046c4 <_fwalk_sglue+0x38>
 80046b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80046b8:	3301      	adds	r3, #1
 80046ba:	d003      	beq.n	80046c4 <_fwalk_sglue+0x38>
 80046bc:	4629      	mov	r1, r5
 80046be:	4638      	mov	r0, r7
 80046c0:	47c0      	blx	r8
 80046c2:	4306      	orrs	r6, r0
 80046c4:	3568      	adds	r5, #104	@ 0x68
 80046c6:	e7e9      	b.n	800469c <_fwalk_sglue+0x10>

080046c8 <iprintf>:
 80046c8:	b40f      	push	{r0, r1, r2, r3}
 80046ca:	b507      	push	{r0, r1, r2, lr}
 80046cc:	4906      	ldr	r1, [pc, #24]	@ (80046e8 <iprintf+0x20>)
 80046ce:	ab04      	add	r3, sp, #16
 80046d0:	6808      	ldr	r0, [r1, #0]
 80046d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80046d6:	6881      	ldr	r1, [r0, #8]
 80046d8:	9301      	str	r3, [sp, #4]
 80046da:	f001 fcb9 	bl	8006050 <_vfiprintf_r>
 80046de:	b003      	add	sp, #12
 80046e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80046e4:	b004      	add	sp, #16
 80046e6:	4770      	bx	lr
 80046e8:	20000018 	.word	0x20000018

080046ec <_puts_r>:
 80046ec:	6a03      	ldr	r3, [r0, #32]
 80046ee:	b570      	push	{r4, r5, r6, lr}
 80046f0:	6884      	ldr	r4, [r0, #8]
 80046f2:	4605      	mov	r5, r0
 80046f4:	460e      	mov	r6, r1
 80046f6:	b90b      	cbnz	r3, 80046fc <_puts_r+0x10>
 80046f8:	f7ff ffb0 	bl	800465c <__sinit>
 80046fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80046fe:	07db      	lsls	r3, r3, #31
 8004700:	d405      	bmi.n	800470e <_puts_r+0x22>
 8004702:	89a3      	ldrh	r3, [r4, #12]
 8004704:	0598      	lsls	r0, r3, #22
 8004706:	d402      	bmi.n	800470e <_puts_r+0x22>
 8004708:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800470a:	f000 f9a2 	bl	8004a52 <__retarget_lock_acquire_recursive>
 800470e:	89a3      	ldrh	r3, [r4, #12]
 8004710:	0719      	lsls	r1, r3, #28
 8004712:	d502      	bpl.n	800471a <_puts_r+0x2e>
 8004714:	6923      	ldr	r3, [r4, #16]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d135      	bne.n	8004786 <_puts_r+0x9a>
 800471a:	4621      	mov	r1, r4
 800471c:	4628      	mov	r0, r5
 800471e:	f000 f8c5 	bl	80048ac <__swsetup_r>
 8004722:	b380      	cbz	r0, 8004786 <_puts_r+0x9a>
 8004724:	f04f 35ff 	mov.w	r5, #4294967295
 8004728:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800472a:	07da      	lsls	r2, r3, #31
 800472c:	d405      	bmi.n	800473a <_puts_r+0x4e>
 800472e:	89a3      	ldrh	r3, [r4, #12]
 8004730:	059b      	lsls	r3, r3, #22
 8004732:	d402      	bmi.n	800473a <_puts_r+0x4e>
 8004734:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004736:	f000 f98d 	bl	8004a54 <__retarget_lock_release_recursive>
 800473a:	4628      	mov	r0, r5
 800473c:	bd70      	pop	{r4, r5, r6, pc}
 800473e:	2b00      	cmp	r3, #0
 8004740:	da04      	bge.n	800474c <_puts_r+0x60>
 8004742:	69a2      	ldr	r2, [r4, #24]
 8004744:	429a      	cmp	r2, r3
 8004746:	dc17      	bgt.n	8004778 <_puts_r+0x8c>
 8004748:	290a      	cmp	r1, #10
 800474a:	d015      	beq.n	8004778 <_puts_r+0x8c>
 800474c:	6823      	ldr	r3, [r4, #0]
 800474e:	1c5a      	adds	r2, r3, #1
 8004750:	6022      	str	r2, [r4, #0]
 8004752:	7019      	strb	r1, [r3, #0]
 8004754:	68a3      	ldr	r3, [r4, #8]
 8004756:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800475a:	3b01      	subs	r3, #1
 800475c:	60a3      	str	r3, [r4, #8]
 800475e:	2900      	cmp	r1, #0
 8004760:	d1ed      	bne.n	800473e <_puts_r+0x52>
 8004762:	2b00      	cmp	r3, #0
 8004764:	da11      	bge.n	800478a <_puts_r+0x9e>
 8004766:	4622      	mov	r2, r4
 8004768:	210a      	movs	r1, #10
 800476a:	4628      	mov	r0, r5
 800476c:	f000 f85f 	bl	800482e <__swbuf_r>
 8004770:	3001      	adds	r0, #1
 8004772:	d0d7      	beq.n	8004724 <_puts_r+0x38>
 8004774:	250a      	movs	r5, #10
 8004776:	e7d7      	b.n	8004728 <_puts_r+0x3c>
 8004778:	4622      	mov	r2, r4
 800477a:	4628      	mov	r0, r5
 800477c:	f000 f857 	bl	800482e <__swbuf_r>
 8004780:	3001      	adds	r0, #1
 8004782:	d1e7      	bne.n	8004754 <_puts_r+0x68>
 8004784:	e7ce      	b.n	8004724 <_puts_r+0x38>
 8004786:	3e01      	subs	r6, #1
 8004788:	e7e4      	b.n	8004754 <_puts_r+0x68>
 800478a:	6823      	ldr	r3, [r4, #0]
 800478c:	1c5a      	adds	r2, r3, #1
 800478e:	6022      	str	r2, [r4, #0]
 8004790:	220a      	movs	r2, #10
 8004792:	701a      	strb	r2, [r3, #0]
 8004794:	e7ee      	b.n	8004774 <_puts_r+0x88>
	...

08004798 <puts>:
 8004798:	4b02      	ldr	r3, [pc, #8]	@ (80047a4 <puts+0xc>)
 800479a:	4601      	mov	r1, r0
 800479c:	6818      	ldr	r0, [r3, #0]
 800479e:	f7ff bfa5 	b.w	80046ec <_puts_r>
 80047a2:	bf00      	nop
 80047a4:	20000018 	.word	0x20000018

080047a8 <__sread>:
 80047a8:	b510      	push	{r4, lr}
 80047aa:	460c      	mov	r4, r1
 80047ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047b0:	f000 f900 	bl	80049b4 <_read_r>
 80047b4:	2800      	cmp	r0, #0
 80047b6:	bfab      	itete	ge
 80047b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80047ba:	89a3      	ldrhlt	r3, [r4, #12]
 80047bc:	181b      	addge	r3, r3, r0
 80047be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80047c2:	bfac      	ite	ge
 80047c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80047c6:	81a3      	strhlt	r3, [r4, #12]
 80047c8:	bd10      	pop	{r4, pc}

080047ca <__swrite>:
 80047ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047ce:	461f      	mov	r7, r3
 80047d0:	898b      	ldrh	r3, [r1, #12]
 80047d2:	05db      	lsls	r3, r3, #23
 80047d4:	4605      	mov	r5, r0
 80047d6:	460c      	mov	r4, r1
 80047d8:	4616      	mov	r6, r2
 80047da:	d505      	bpl.n	80047e8 <__swrite+0x1e>
 80047dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047e0:	2302      	movs	r3, #2
 80047e2:	2200      	movs	r2, #0
 80047e4:	f000 f8d4 	bl	8004990 <_lseek_r>
 80047e8:	89a3      	ldrh	r3, [r4, #12]
 80047ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80047f2:	81a3      	strh	r3, [r4, #12]
 80047f4:	4632      	mov	r2, r6
 80047f6:	463b      	mov	r3, r7
 80047f8:	4628      	mov	r0, r5
 80047fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047fe:	f000 b8eb 	b.w	80049d8 <_write_r>

08004802 <__sseek>:
 8004802:	b510      	push	{r4, lr}
 8004804:	460c      	mov	r4, r1
 8004806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800480a:	f000 f8c1 	bl	8004990 <_lseek_r>
 800480e:	1c43      	adds	r3, r0, #1
 8004810:	89a3      	ldrh	r3, [r4, #12]
 8004812:	bf15      	itete	ne
 8004814:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004816:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800481a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800481e:	81a3      	strheq	r3, [r4, #12]
 8004820:	bf18      	it	ne
 8004822:	81a3      	strhne	r3, [r4, #12]
 8004824:	bd10      	pop	{r4, pc}

08004826 <__sclose>:
 8004826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800482a:	f000 b8a1 	b.w	8004970 <_close_r>

0800482e <__swbuf_r>:
 800482e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004830:	460e      	mov	r6, r1
 8004832:	4614      	mov	r4, r2
 8004834:	4605      	mov	r5, r0
 8004836:	b118      	cbz	r0, 8004840 <__swbuf_r+0x12>
 8004838:	6a03      	ldr	r3, [r0, #32]
 800483a:	b90b      	cbnz	r3, 8004840 <__swbuf_r+0x12>
 800483c:	f7ff ff0e 	bl	800465c <__sinit>
 8004840:	69a3      	ldr	r3, [r4, #24]
 8004842:	60a3      	str	r3, [r4, #8]
 8004844:	89a3      	ldrh	r3, [r4, #12]
 8004846:	071a      	lsls	r2, r3, #28
 8004848:	d501      	bpl.n	800484e <__swbuf_r+0x20>
 800484a:	6923      	ldr	r3, [r4, #16]
 800484c:	b943      	cbnz	r3, 8004860 <__swbuf_r+0x32>
 800484e:	4621      	mov	r1, r4
 8004850:	4628      	mov	r0, r5
 8004852:	f000 f82b 	bl	80048ac <__swsetup_r>
 8004856:	b118      	cbz	r0, 8004860 <__swbuf_r+0x32>
 8004858:	f04f 37ff 	mov.w	r7, #4294967295
 800485c:	4638      	mov	r0, r7
 800485e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004860:	6823      	ldr	r3, [r4, #0]
 8004862:	6922      	ldr	r2, [r4, #16]
 8004864:	1a98      	subs	r0, r3, r2
 8004866:	6963      	ldr	r3, [r4, #20]
 8004868:	b2f6      	uxtb	r6, r6
 800486a:	4283      	cmp	r3, r0
 800486c:	4637      	mov	r7, r6
 800486e:	dc05      	bgt.n	800487c <__swbuf_r+0x4e>
 8004870:	4621      	mov	r1, r4
 8004872:	4628      	mov	r0, r5
 8004874:	f001 fd88 	bl	8006388 <_fflush_r>
 8004878:	2800      	cmp	r0, #0
 800487a:	d1ed      	bne.n	8004858 <__swbuf_r+0x2a>
 800487c:	68a3      	ldr	r3, [r4, #8]
 800487e:	3b01      	subs	r3, #1
 8004880:	60a3      	str	r3, [r4, #8]
 8004882:	6823      	ldr	r3, [r4, #0]
 8004884:	1c5a      	adds	r2, r3, #1
 8004886:	6022      	str	r2, [r4, #0]
 8004888:	701e      	strb	r6, [r3, #0]
 800488a:	6962      	ldr	r2, [r4, #20]
 800488c:	1c43      	adds	r3, r0, #1
 800488e:	429a      	cmp	r2, r3
 8004890:	d004      	beq.n	800489c <__swbuf_r+0x6e>
 8004892:	89a3      	ldrh	r3, [r4, #12]
 8004894:	07db      	lsls	r3, r3, #31
 8004896:	d5e1      	bpl.n	800485c <__swbuf_r+0x2e>
 8004898:	2e0a      	cmp	r6, #10
 800489a:	d1df      	bne.n	800485c <__swbuf_r+0x2e>
 800489c:	4621      	mov	r1, r4
 800489e:	4628      	mov	r0, r5
 80048a0:	f001 fd72 	bl	8006388 <_fflush_r>
 80048a4:	2800      	cmp	r0, #0
 80048a6:	d0d9      	beq.n	800485c <__swbuf_r+0x2e>
 80048a8:	e7d6      	b.n	8004858 <__swbuf_r+0x2a>
	...

080048ac <__swsetup_r>:
 80048ac:	b538      	push	{r3, r4, r5, lr}
 80048ae:	4b29      	ldr	r3, [pc, #164]	@ (8004954 <__swsetup_r+0xa8>)
 80048b0:	4605      	mov	r5, r0
 80048b2:	6818      	ldr	r0, [r3, #0]
 80048b4:	460c      	mov	r4, r1
 80048b6:	b118      	cbz	r0, 80048c0 <__swsetup_r+0x14>
 80048b8:	6a03      	ldr	r3, [r0, #32]
 80048ba:	b90b      	cbnz	r3, 80048c0 <__swsetup_r+0x14>
 80048bc:	f7ff fece 	bl	800465c <__sinit>
 80048c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048c4:	0719      	lsls	r1, r3, #28
 80048c6:	d422      	bmi.n	800490e <__swsetup_r+0x62>
 80048c8:	06da      	lsls	r2, r3, #27
 80048ca:	d407      	bmi.n	80048dc <__swsetup_r+0x30>
 80048cc:	2209      	movs	r2, #9
 80048ce:	602a      	str	r2, [r5, #0]
 80048d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048d4:	81a3      	strh	r3, [r4, #12]
 80048d6:	f04f 30ff 	mov.w	r0, #4294967295
 80048da:	e033      	b.n	8004944 <__swsetup_r+0x98>
 80048dc:	0758      	lsls	r0, r3, #29
 80048de:	d512      	bpl.n	8004906 <__swsetup_r+0x5a>
 80048e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80048e2:	b141      	cbz	r1, 80048f6 <__swsetup_r+0x4a>
 80048e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80048e8:	4299      	cmp	r1, r3
 80048ea:	d002      	beq.n	80048f2 <__swsetup_r+0x46>
 80048ec:	4628      	mov	r0, r5
 80048ee:	f000 ff0b 	bl	8005708 <_free_r>
 80048f2:	2300      	movs	r3, #0
 80048f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80048f6:	89a3      	ldrh	r3, [r4, #12]
 80048f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80048fc:	81a3      	strh	r3, [r4, #12]
 80048fe:	2300      	movs	r3, #0
 8004900:	6063      	str	r3, [r4, #4]
 8004902:	6923      	ldr	r3, [r4, #16]
 8004904:	6023      	str	r3, [r4, #0]
 8004906:	89a3      	ldrh	r3, [r4, #12]
 8004908:	f043 0308 	orr.w	r3, r3, #8
 800490c:	81a3      	strh	r3, [r4, #12]
 800490e:	6923      	ldr	r3, [r4, #16]
 8004910:	b94b      	cbnz	r3, 8004926 <__swsetup_r+0x7a>
 8004912:	89a3      	ldrh	r3, [r4, #12]
 8004914:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004918:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800491c:	d003      	beq.n	8004926 <__swsetup_r+0x7a>
 800491e:	4621      	mov	r1, r4
 8004920:	4628      	mov	r0, r5
 8004922:	f001 fd7f 	bl	8006424 <__smakebuf_r>
 8004926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800492a:	f013 0201 	ands.w	r2, r3, #1
 800492e:	d00a      	beq.n	8004946 <__swsetup_r+0x9a>
 8004930:	2200      	movs	r2, #0
 8004932:	60a2      	str	r2, [r4, #8]
 8004934:	6962      	ldr	r2, [r4, #20]
 8004936:	4252      	negs	r2, r2
 8004938:	61a2      	str	r2, [r4, #24]
 800493a:	6922      	ldr	r2, [r4, #16]
 800493c:	b942      	cbnz	r2, 8004950 <__swsetup_r+0xa4>
 800493e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004942:	d1c5      	bne.n	80048d0 <__swsetup_r+0x24>
 8004944:	bd38      	pop	{r3, r4, r5, pc}
 8004946:	0799      	lsls	r1, r3, #30
 8004948:	bf58      	it	pl
 800494a:	6962      	ldrpl	r2, [r4, #20]
 800494c:	60a2      	str	r2, [r4, #8]
 800494e:	e7f4      	b.n	800493a <__swsetup_r+0x8e>
 8004950:	2000      	movs	r0, #0
 8004952:	e7f7      	b.n	8004944 <__swsetup_r+0x98>
 8004954:	20000018 	.word	0x20000018

08004958 <memset>:
 8004958:	4402      	add	r2, r0
 800495a:	4603      	mov	r3, r0
 800495c:	4293      	cmp	r3, r2
 800495e:	d100      	bne.n	8004962 <memset+0xa>
 8004960:	4770      	bx	lr
 8004962:	f803 1b01 	strb.w	r1, [r3], #1
 8004966:	e7f9      	b.n	800495c <memset+0x4>

08004968 <_localeconv_r>:
 8004968:	4800      	ldr	r0, [pc, #0]	@ (800496c <_localeconv_r+0x4>)
 800496a:	4770      	bx	lr
 800496c:	20000158 	.word	0x20000158

08004970 <_close_r>:
 8004970:	b538      	push	{r3, r4, r5, lr}
 8004972:	4d06      	ldr	r5, [pc, #24]	@ (800498c <_close_r+0x1c>)
 8004974:	2300      	movs	r3, #0
 8004976:	4604      	mov	r4, r0
 8004978:	4608      	mov	r0, r1
 800497a:	602b      	str	r3, [r5, #0]
 800497c:	f001 ff7a 	bl	8006874 <_close>
 8004980:	1c43      	adds	r3, r0, #1
 8004982:	d102      	bne.n	800498a <_close_r+0x1a>
 8004984:	682b      	ldr	r3, [r5, #0]
 8004986:	b103      	cbz	r3, 800498a <_close_r+0x1a>
 8004988:	6023      	str	r3, [r4, #0]
 800498a:	bd38      	pop	{r3, r4, r5, pc}
 800498c:	200003ac 	.word	0x200003ac

08004990 <_lseek_r>:
 8004990:	b538      	push	{r3, r4, r5, lr}
 8004992:	4d07      	ldr	r5, [pc, #28]	@ (80049b0 <_lseek_r+0x20>)
 8004994:	4604      	mov	r4, r0
 8004996:	4608      	mov	r0, r1
 8004998:	4611      	mov	r1, r2
 800499a:	2200      	movs	r2, #0
 800499c:	602a      	str	r2, [r5, #0]
 800499e:	461a      	mov	r2, r3
 80049a0:	f001 ff29 	bl	80067f6 <_lseek>
 80049a4:	1c43      	adds	r3, r0, #1
 80049a6:	d102      	bne.n	80049ae <_lseek_r+0x1e>
 80049a8:	682b      	ldr	r3, [r5, #0]
 80049aa:	b103      	cbz	r3, 80049ae <_lseek_r+0x1e>
 80049ac:	6023      	str	r3, [r4, #0]
 80049ae:	bd38      	pop	{r3, r4, r5, pc}
 80049b0:	200003ac 	.word	0x200003ac

080049b4 <_read_r>:
 80049b4:	b538      	push	{r3, r4, r5, lr}
 80049b6:	4d07      	ldr	r5, [pc, #28]	@ (80049d4 <_read_r+0x20>)
 80049b8:	4604      	mov	r4, r0
 80049ba:	4608      	mov	r0, r1
 80049bc:	4611      	mov	r1, r2
 80049be:	2200      	movs	r2, #0
 80049c0:	602a      	str	r2, [r5, #0]
 80049c2:	461a      	mov	r2, r3
 80049c4:	f001 fec1 	bl	800674a <_read>
 80049c8:	1c43      	adds	r3, r0, #1
 80049ca:	d102      	bne.n	80049d2 <_read_r+0x1e>
 80049cc:	682b      	ldr	r3, [r5, #0]
 80049ce:	b103      	cbz	r3, 80049d2 <_read_r+0x1e>
 80049d0:	6023      	str	r3, [r4, #0]
 80049d2:	bd38      	pop	{r3, r4, r5, pc}
 80049d4:	200003ac 	.word	0x200003ac

080049d8 <_write_r>:
 80049d8:	b538      	push	{r3, r4, r5, lr}
 80049da:	4d07      	ldr	r5, [pc, #28]	@ (80049f8 <_write_r+0x20>)
 80049dc:	4604      	mov	r4, r0
 80049de:	4608      	mov	r0, r1
 80049e0:	4611      	mov	r1, r2
 80049e2:	2200      	movs	r2, #0
 80049e4:	602a      	str	r2, [r5, #0]
 80049e6:	461a      	mov	r2, r3
 80049e8:	f001 ff17 	bl	800681a <_write>
 80049ec:	1c43      	adds	r3, r0, #1
 80049ee:	d102      	bne.n	80049f6 <_write_r+0x1e>
 80049f0:	682b      	ldr	r3, [r5, #0]
 80049f2:	b103      	cbz	r3, 80049f6 <_write_r+0x1e>
 80049f4:	6023      	str	r3, [r4, #0]
 80049f6:	bd38      	pop	{r3, r4, r5, pc}
 80049f8:	200003ac 	.word	0x200003ac

080049fc <__errno>:
 80049fc:	4b01      	ldr	r3, [pc, #4]	@ (8004a04 <__errno+0x8>)
 80049fe:	6818      	ldr	r0, [r3, #0]
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	20000018 	.word	0x20000018

08004a08 <__libc_init_array>:
 8004a08:	b570      	push	{r4, r5, r6, lr}
 8004a0a:	4d0d      	ldr	r5, [pc, #52]	@ (8004a40 <__libc_init_array+0x38>)
 8004a0c:	4c0d      	ldr	r4, [pc, #52]	@ (8004a44 <__libc_init_array+0x3c>)
 8004a0e:	1b64      	subs	r4, r4, r5
 8004a10:	10a4      	asrs	r4, r4, #2
 8004a12:	2600      	movs	r6, #0
 8004a14:	42a6      	cmp	r6, r4
 8004a16:	d109      	bne.n	8004a2c <__libc_init_array+0x24>
 8004a18:	4d0b      	ldr	r5, [pc, #44]	@ (8004a48 <__libc_init_array+0x40>)
 8004a1a:	4c0c      	ldr	r4, [pc, #48]	@ (8004a4c <__libc_init_array+0x44>)
 8004a1c:	f002 f902 	bl	8006c24 <_init>
 8004a20:	1b64      	subs	r4, r4, r5
 8004a22:	10a4      	asrs	r4, r4, #2
 8004a24:	2600      	movs	r6, #0
 8004a26:	42a6      	cmp	r6, r4
 8004a28:	d105      	bne.n	8004a36 <__libc_init_array+0x2e>
 8004a2a:	bd70      	pop	{r4, r5, r6, pc}
 8004a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a30:	4798      	blx	r3
 8004a32:	3601      	adds	r6, #1
 8004a34:	e7ee      	b.n	8004a14 <__libc_init_array+0xc>
 8004a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a3a:	4798      	blx	r3
 8004a3c:	3601      	adds	r6, #1
 8004a3e:	e7f2      	b.n	8004a26 <__libc_init_array+0x1e>
 8004a40:	080070c4 	.word	0x080070c4
 8004a44:	080070c4 	.word	0x080070c4
 8004a48:	080070c4 	.word	0x080070c4
 8004a4c:	080070c8 	.word	0x080070c8

08004a50 <__retarget_lock_init_recursive>:
 8004a50:	4770      	bx	lr

08004a52 <__retarget_lock_acquire_recursive>:
 8004a52:	4770      	bx	lr

08004a54 <__retarget_lock_release_recursive>:
 8004a54:	4770      	bx	lr

08004a56 <quorem>:
 8004a56:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a5a:	6903      	ldr	r3, [r0, #16]
 8004a5c:	690c      	ldr	r4, [r1, #16]
 8004a5e:	42a3      	cmp	r3, r4
 8004a60:	4607      	mov	r7, r0
 8004a62:	db7e      	blt.n	8004b62 <quorem+0x10c>
 8004a64:	3c01      	subs	r4, #1
 8004a66:	f101 0814 	add.w	r8, r1, #20
 8004a6a:	00a3      	lsls	r3, r4, #2
 8004a6c:	f100 0514 	add.w	r5, r0, #20
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a76:	9301      	str	r3, [sp, #4]
 8004a78:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004a7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a80:	3301      	adds	r3, #1
 8004a82:	429a      	cmp	r2, r3
 8004a84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004a88:	fbb2 f6f3 	udiv	r6, r2, r3
 8004a8c:	d32e      	bcc.n	8004aec <quorem+0x96>
 8004a8e:	f04f 0a00 	mov.w	sl, #0
 8004a92:	46c4      	mov	ip, r8
 8004a94:	46ae      	mov	lr, r5
 8004a96:	46d3      	mov	fp, sl
 8004a98:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004a9c:	b298      	uxth	r0, r3
 8004a9e:	fb06 a000 	mla	r0, r6, r0, sl
 8004aa2:	0c02      	lsrs	r2, r0, #16
 8004aa4:	0c1b      	lsrs	r3, r3, #16
 8004aa6:	fb06 2303 	mla	r3, r6, r3, r2
 8004aaa:	f8de 2000 	ldr.w	r2, [lr]
 8004aae:	b280      	uxth	r0, r0
 8004ab0:	b292      	uxth	r2, r2
 8004ab2:	1a12      	subs	r2, r2, r0
 8004ab4:	445a      	add	r2, fp
 8004ab6:	f8de 0000 	ldr.w	r0, [lr]
 8004aba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004ac4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004ac8:	b292      	uxth	r2, r2
 8004aca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004ace:	45e1      	cmp	r9, ip
 8004ad0:	f84e 2b04 	str.w	r2, [lr], #4
 8004ad4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004ad8:	d2de      	bcs.n	8004a98 <quorem+0x42>
 8004ada:	9b00      	ldr	r3, [sp, #0]
 8004adc:	58eb      	ldr	r3, [r5, r3]
 8004ade:	b92b      	cbnz	r3, 8004aec <quorem+0x96>
 8004ae0:	9b01      	ldr	r3, [sp, #4]
 8004ae2:	3b04      	subs	r3, #4
 8004ae4:	429d      	cmp	r5, r3
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	d32f      	bcc.n	8004b4a <quorem+0xf4>
 8004aea:	613c      	str	r4, [r7, #16]
 8004aec:	4638      	mov	r0, r7
 8004aee:	f001 f97d 	bl	8005dec <__mcmp>
 8004af2:	2800      	cmp	r0, #0
 8004af4:	db25      	blt.n	8004b42 <quorem+0xec>
 8004af6:	4629      	mov	r1, r5
 8004af8:	2000      	movs	r0, #0
 8004afa:	f858 2b04 	ldr.w	r2, [r8], #4
 8004afe:	f8d1 c000 	ldr.w	ip, [r1]
 8004b02:	fa1f fe82 	uxth.w	lr, r2
 8004b06:	fa1f f38c 	uxth.w	r3, ip
 8004b0a:	eba3 030e 	sub.w	r3, r3, lr
 8004b0e:	4403      	add	r3, r0
 8004b10:	0c12      	lsrs	r2, r2, #16
 8004b12:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004b16:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b20:	45c1      	cmp	r9, r8
 8004b22:	f841 3b04 	str.w	r3, [r1], #4
 8004b26:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004b2a:	d2e6      	bcs.n	8004afa <quorem+0xa4>
 8004b2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b34:	b922      	cbnz	r2, 8004b40 <quorem+0xea>
 8004b36:	3b04      	subs	r3, #4
 8004b38:	429d      	cmp	r5, r3
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	d30b      	bcc.n	8004b56 <quorem+0x100>
 8004b3e:	613c      	str	r4, [r7, #16]
 8004b40:	3601      	adds	r6, #1
 8004b42:	4630      	mov	r0, r6
 8004b44:	b003      	add	sp, #12
 8004b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b4a:	6812      	ldr	r2, [r2, #0]
 8004b4c:	3b04      	subs	r3, #4
 8004b4e:	2a00      	cmp	r2, #0
 8004b50:	d1cb      	bne.n	8004aea <quorem+0x94>
 8004b52:	3c01      	subs	r4, #1
 8004b54:	e7c6      	b.n	8004ae4 <quorem+0x8e>
 8004b56:	6812      	ldr	r2, [r2, #0]
 8004b58:	3b04      	subs	r3, #4
 8004b5a:	2a00      	cmp	r2, #0
 8004b5c:	d1ef      	bne.n	8004b3e <quorem+0xe8>
 8004b5e:	3c01      	subs	r4, #1
 8004b60:	e7ea      	b.n	8004b38 <quorem+0xe2>
 8004b62:	2000      	movs	r0, #0
 8004b64:	e7ee      	b.n	8004b44 <quorem+0xee>
	...

08004b68 <_dtoa_r>:
 8004b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b6c:	69c7      	ldr	r7, [r0, #28]
 8004b6e:	b097      	sub	sp, #92	@ 0x5c
 8004b70:	ed8d 0b04 	vstr	d0, [sp, #16]
 8004b74:	ec55 4b10 	vmov	r4, r5, d0
 8004b78:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8004b7a:	9107      	str	r1, [sp, #28]
 8004b7c:	4681      	mov	r9, r0
 8004b7e:	920c      	str	r2, [sp, #48]	@ 0x30
 8004b80:	9311      	str	r3, [sp, #68]	@ 0x44
 8004b82:	b97f      	cbnz	r7, 8004ba4 <_dtoa_r+0x3c>
 8004b84:	2010      	movs	r0, #16
 8004b86:	f000 fe09 	bl	800579c <malloc>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	f8c9 001c 	str.w	r0, [r9, #28]
 8004b90:	b920      	cbnz	r0, 8004b9c <_dtoa_r+0x34>
 8004b92:	4ba9      	ldr	r3, [pc, #676]	@ (8004e38 <_dtoa_r+0x2d0>)
 8004b94:	21ef      	movs	r1, #239	@ 0xef
 8004b96:	48a9      	ldr	r0, [pc, #676]	@ (8004e3c <_dtoa_r+0x2d4>)
 8004b98:	f001 fcc0 	bl	800651c <__assert_func>
 8004b9c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004ba0:	6007      	str	r7, [r0, #0]
 8004ba2:	60c7      	str	r7, [r0, #12]
 8004ba4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004ba8:	6819      	ldr	r1, [r3, #0]
 8004baa:	b159      	cbz	r1, 8004bc4 <_dtoa_r+0x5c>
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	604a      	str	r2, [r1, #4]
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	4093      	lsls	r3, r2
 8004bb4:	608b      	str	r3, [r1, #8]
 8004bb6:	4648      	mov	r0, r9
 8004bb8:	f000 fee6 	bl	8005988 <_Bfree>
 8004bbc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	601a      	str	r2, [r3, #0]
 8004bc4:	1e2b      	subs	r3, r5, #0
 8004bc6:	bfb9      	ittee	lt
 8004bc8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004bcc:	9305      	strlt	r3, [sp, #20]
 8004bce:	2300      	movge	r3, #0
 8004bd0:	6033      	strge	r3, [r6, #0]
 8004bd2:	9f05      	ldr	r7, [sp, #20]
 8004bd4:	4b9a      	ldr	r3, [pc, #616]	@ (8004e40 <_dtoa_r+0x2d8>)
 8004bd6:	bfbc      	itt	lt
 8004bd8:	2201      	movlt	r2, #1
 8004bda:	6032      	strlt	r2, [r6, #0]
 8004bdc:	43bb      	bics	r3, r7
 8004bde:	d112      	bne.n	8004c06 <_dtoa_r+0x9e>
 8004be0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004be2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004be6:	6013      	str	r3, [r2, #0]
 8004be8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004bec:	4323      	orrs	r3, r4
 8004bee:	f000 855a 	beq.w	80056a6 <_dtoa_r+0xb3e>
 8004bf2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004bf4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8004e54 <_dtoa_r+0x2ec>
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f000 855c 	beq.w	80056b6 <_dtoa_r+0xb4e>
 8004bfe:	f10a 0303 	add.w	r3, sl, #3
 8004c02:	f000 bd56 	b.w	80056b2 <_dtoa_r+0xb4a>
 8004c06:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	ec51 0b17 	vmov	r0, r1, d7
 8004c10:	2300      	movs	r3, #0
 8004c12:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8004c16:	f7fb ff57 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c1a:	4680      	mov	r8, r0
 8004c1c:	b158      	cbz	r0, 8004c36 <_dtoa_r+0xce>
 8004c1e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004c20:	2301      	movs	r3, #1
 8004c22:	6013      	str	r3, [r2, #0]
 8004c24:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004c26:	b113      	cbz	r3, 8004c2e <_dtoa_r+0xc6>
 8004c28:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8004c2a:	4b86      	ldr	r3, [pc, #536]	@ (8004e44 <_dtoa_r+0x2dc>)
 8004c2c:	6013      	str	r3, [r2, #0]
 8004c2e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8004e58 <_dtoa_r+0x2f0>
 8004c32:	f000 bd40 	b.w	80056b6 <_dtoa_r+0xb4e>
 8004c36:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8004c3a:	aa14      	add	r2, sp, #80	@ 0x50
 8004c3c:	a915      	add	r1, sp, #84	@ 0x54
 8004c3e:	4648      	mov	r0, r9
 8004c40:	f001 f984 	bl	8005f4c <__d2b>
 8004c44:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004c48:	9002      	str	r0, [sp, #8]
 8004c4a:	2e00      	cmp	r6, #0
 8004c4c:	d078      	beq.n	8004d40 <_dtoa_r+0x1d8>
 8004c4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c50:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8004c54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004c5c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004c60:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004c64:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004c68:	4619      	mov	r1, r3
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	4b76      	ldr	r3, [pc, #472]	@ (8004e48 <_dtoa_r+0x2e0>)
 8004c6e:	f7fb fb0b 	bl	8000288 <__aeabi_dsub>
 8004c72:	a36b      	add	r3, pc, #428	@ (adr r3, 8004e20 <_dtoa_r+0x2b8>)
 8004c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c78:	f7fb fcbe 	bl	80005f8 <__aeabi_dmul>
 8004c7c:	a36a      	add	r3, pc, #424	@ (adr r3, 8004e28 <_dtoa_r+0x2c0>)
 8004c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c82:	f7fb fb03 	bl	800028c <__adddf3>
 8004c86:	4604      	mov	r4, r0
 8004c88:	4630      	mov	r0, r6
 8004c8a:	460d      	mov	r5, r1
 8004c8c:	f7fb fc4a 	bl	8000524 <__aeabi_i2d>
 8004c90:	a367      	add	r3, pc, #412	@ (adr r3, 8004e30 <_dtoa_r+0x2c8>)
 8004c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c96:	f7fb fcaf 	bl	80005f8 <__aeabi_dmul>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	4620      	mov	r0, r4
 8004ca0:	4629      	mov	r1, r5
 8004ca2:	f7fb faf3 	bl	800028c <__adddf3>
 8004ca6:	4604      	mov	r4, r0
 8004ca8:	460d      	mov	r5, r1
 8004caa:	f7fb ff55 	bl	8000b58 <__aeabi_d2iz>
 8004cae:	2200      	movs	r2, #0
 8004cb0:	4607      	mov	r7, r0
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	4629      	mov	r1, r5
 8004cb8:	f7fb ff10 	bl	8000adc <__aeabi_dcmplt>
 8004cbc:	b140      	cbz	r0, 8004cd0 <_dtoa_r+0x168>
 8004cbe:	4638      	mov	r0, r7
 8004cc0:	f7fb fc30 	bl	8000524 <__aeabi_i2d>
 8004cc4:	4622      	mov	r2, r4
 8004cc6:	462b      	mov	r3, r5
 8004cc8:	f7fb fefe 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ccc:	b900      	cbnz	r0, 8004cd0 <_dtoa_r+0x168>
 8004cce:	3f01      	subs	r7, #1
 8004cd0:	2f16      	cmp	r7, #22
 8004cd2:	d852      	bhi.n	8004d7a <_dtoa_r+0x212>
 8004cd4:	4b5d      	ldr	r3, [pc, #372]	@ (8004e4c <_dtoa_r+0x2e4>)
 8004cd6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cde:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004ce2:	f7fb fefb 	bl	8000adc <__aeabi_dcmplt>
 8004ce6:	2800      	cmp	r0, #0
 8004ce8:	d049      	beq.n	8004d7e <_dtoa_r+0x216>
 8004cea:	3f01      	subs	r7, #1
 8004cec:	2300      	movs	r3, #0
 8004cee:	9310      	str	r3, [sp, #64]	@ 0x40
 8004cf0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004cf2:	1b9b      	subs	r3, r3, r6
 8004cf4:	1e5a      	subs	r2, r3, #1
 8004cf6:	bf45      	ittet	mi
 8004cf8:	f1c3 0301 	rsbmi	r3, r3, #1
 8004cfc:	9300      	strmi	r3, [sp, #0]
 8004cfe:	2300      	movpl	r3, #0
 8004d00:	2300      	movmi	r3, #0
 8004d02:	9206      	str	r2, [sp, #24]
 8004d04:	bf54      	ite	pl
 8004d06:	9300      	strpl	r3, [sp, #0]
 8004d08:	9306      	strmi	r3, [sp, #24]
 8004d0a:	2f00      	cmp	r7, #0
 8004d0c:	db39      	blt.n	8004d82 <_dtoa_r+0x21a>
 8004d0e:	9b06      	ldr	r3, [sp, #24]
 8004d10:	970d      	str	r7, [sp, #52]	@ 0x34
 8004d12:	443b      	add	r3, r7
 8004d14:	9306      	str	r3, [sp, #24]
 8004d16:	2300      	movs	r3, #0
 8004d18:	9308      	str	r3, [sp, #32]
 8004d1a:	9b07      	ldr	r3, [sp, #28]
 8004d1c:	2b09      	cmp	r3, #9
 8004d1e:	d863      	bhi.n	8004de8 <_dtoa_r+0x280>
 8004d20:	2b05      	cmp	r3, #5
 8004d22:	bfc4      	itt	gt
 8004d24:	3b04      	subgt	r3, #4
 8004d26:	9307      	strgt	r3, [sp, #28]
 8004d28:	9b07      	ldr	r3, [sp, #28]
 8004d2a:	f1a3 0302 	sub.w	r3, r3, #2
 8004d2e:	bfcc      	ite	gt
 8004d30:	2400      	movgt	r4, #0
 8004d32:	2401      	movle	r4, #1
 8004d34:	2b03      	cmp	r3, #3
 8004d36:	d863      	bhi.n	8004e00 <_dtoa_r+0x298>
 8004d38:	e8df f003 	tbb	[pc, r3]
 8004d3c:	2b375452 	.word	0x2b375452
 8004d40:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004d44:	441e      	add	r6, r3
 8004d46:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004d4a:	2b20      	cmp	r3, #32
 8004d4c:	bfc1      	itttt	gt
 8004d4e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004d52:	409f      	lslgt	r7, r3
 8004d54:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004d58:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004d5c:	bfd6      	itet	le
 8004d5e:	f1c3 0320 	rsble	r3, r3, #32
 8004d62:	ea47 0003 	orrgt.w	r0, r7, r3
 8004d66:	fa04 f003 	lslle.w	r0, r4, r3
 8004d6a:	f7fb fbcb 	bl	8000504 <__aeabi_ui2d>
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004d74:	3e01      	subs	r6, #1
 8004d76:	9212      	str	r2, [sp, #72]	@ 0x48
 8004d78:	e776      	b.n	8004c68 <_dtoa_r+0x100>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e7b7      	b.n	8004cee <_dtoa_r+0x186>
 8004d7e:	9010      	str	r0, [sp, #64]	@ 0x40
 8004d80:	e7b6      	b.n	8004cf0 <_dtoa_r+0x188>
 8004d82:	9b00      	ldr	r3, [sp, #0]
 8004d84:	1bdb      	subs	r3, r3, r7
 8004d86:	9300      	str	r3, [sp, #0]
 8004d88:	427b      	negs	r3, r7
 8004d8a:	9308      	str	r3, [sp, #32]
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	930d      	str	r3, [sp, #52]	@ 0x34
 8004d90:	e7c3      	b.n	8004d1a <_dtoa_r+0x1b2>
 8004d92:	2301      	movs	r3, #1
 8004d94:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004d98:	eb07 0b03 	add.w	fp, r7, r3
 8004d9c:	f10b 0301 	add.w	r3, fp, #1
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	9303      	str	r3, [sp, #12]
 8004da4:	bfb8      	it	lt
 8004da6:	2301      	movlt	r3, #1
 8004da8:	e006      	b.n	8004db8 <_dtoa_r+0x250>
 8004daa:	2301      	movs	r3, #1
 8004dac:	9309      	str	r3, [sp, #36]	@ 0x24
 8004dae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	dd28      	ble.n	8004e06 <_dtoa_r+0x29e>
 8004db4:	469b      	mov	fp, r3
 8004db6:	9303      	str	r3, [sp, #12]
 8004db8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8004dbc:	2100      	movs	r1, #0
 8004dbe:	2204      	movs	r2, #4
 8004dc0:	f102 0514 	add.w	r5, r2, #20
 8004dc4:	429d      	cmp	r5, r3
 8004dc6:	d926      	bls.n	8004e16 <_dtoa_r+0x2ae>
 8004dc8:	6041      	str	r1, [r0, #4]
 8004dca:	4648      	mov	r0, r9
 8004dcc:	f000 fd9c 	bl	8005908 <_Balloc>
 8004dd0:	4682      	mov	sl, r0
 8004dd2:	2800      	cmp	r0, #0
 8004dd4:	d142      	bne.n	8004e5c <_dtoa_r+0x2f4>
 8004dd6:	4b1e      	ldr	r3, [pc, #120]	@ (8004e50 <_dtoa_r+0x2e8>)
 8004dd8:	4602      	mov	r2, r0
 8004dda:	f240 11af 	movw	r1, #431	@ 0x1af
 8004dde:	e6da      	b.n	8004b96 <_dtoa_r+0x2e>
 8004de0:	2300      	movs	r3, #0
 8004de2:	e7e3      	b.n	8004dac <_dtoa_r+0x244>
 8004de4:	2300      	movs	r3, #0
 8004de6:	e7d5      	b.n	8004d94 <_dtoa_r+0x22c>
 8004de8:	2401      	movs	r4, #1
 8004dea:	2300      	movs	r3, #0
 8004dec:	9307      	str	r3, [sp, #28]
 8004dee:	9409      	str	r4, [sp, #36]	@ 0x24
 8004df0:	f04f 3bff 	mov.w	fp, #4294967295
 8004df4:	2200      	movs	r2, #0
 8004df6:	f8cd b00c 	str.w	fp, [sp, #12]
 8004dfa:	2312      	movs	r3, #18
 8004dfc:	920c      	str	r2, [sp, #48]	@ 0x30
 8004dfe:	e7db      	b.n	8004db8 <_dtoa_r+0x250>
 8004e00:	2301      	movs	r3, #1
 8004e02:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e04:	e7f4      	b.n	8004df0 <_dtoa_r+0x288>
 8004e06:	f04f 0b01 	mov.w	fp, #1
 8004e0a:	f8cd b00c 	str.w	fp, [sp, #12]
 8004e0e:	465b      	mov	r3, fp
 8004e10:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8004e14:	e7d0      	b.n	8004db8 <_dtoa_r+0x250>
 8004e16:	3101      	adds	r1, #1
 8004e18:	0052      	lsls	r2, r2, #1
 8004e1a:	e7d1      	b.n	8004dc0 <_dtoa_r+0x258>
 8004e1c:	f3af 8000 	nop.w
 8004e20:	636f4361 	.word	0x636f4361
 8004e24:	3fd287a7 	.word	0x3fd287a7
 8004e28:	8b60c8b3 	.word	0x8b60c8b3
 8004e2c:	3fc68a28 	.word	0x3fc68a28
 8004e30:	509f79fb 	.word	0x509f79fb
 8004e34:	3fd34413 	.word	0x3fd34413
 8004e38:	08006d6d 	.word	0x08006d6d
 8004e3c:	08006d84 	.word	0x08006d84
 8004e40:	7ff00000 	.word	0x7ff00000
 8004e44:	08006d3d 	.word	0x08006d3d
 8004e48:	3ff80000 	.word	0x3ff80000
 8004e4c:	08006ef0 	.word	0x08006ef0
 8004e50:	08006ddc 	.word	0x08006ddc
 8004e54:	08006d69 	.word	0x08006d69
 8004e58:	08006d3c 	.word	0x08006d3c
 8004e5c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004e60:	6018      	str	r0, [r3, #0]
 8004e62:	9b03      	ldr	r3, [sp, #12]
 8004e64:	2b0e      	cmp	r3, #14
 8004e66:	f200 80a1 	bhi.w	8004fac <_dtoa_r+0x444>
 8004e6a:	2c00      	cmp	r4, #0
 8004e6c:	f000 809e 	beq.w	8004fac <_dtoa_r+0x444>
 8004e70:	2f00      	cmp	r7, #0
 8004e72:	dd33      	ble.n	8004edc <_dtoa_r+0x374>
 8004e74:	4b9c      	ldr	r3, [pc, #624]	@ (80050e8 <_dtoa_r+0x580>)
 8004e76:	f007 020f 	and.w	r2, r7, #15
 8004e7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e7e:	ed93 7b00 	vldr	d7, [r3]
 8004e82:	05f8      	lsls	r0, r7, #23
 8004e84:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8004e88:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004e8c:	d516      	bpl.n	8004ebc <_dtoa_r+0x354>
 8004e8e:	4b97      	ldr	r3, [pc, #604]	@ (80050ec <_dtoa_r+0x584>)
 8004e90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004e94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004e98:	f7fb fcd8 	bl	800084c <__aeabi_ddiv>
 8004e9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ea0:	f004 040f 	and.w	r4, r4, #15
 8004ea4:	2603      	movs	r6, #3
 8004ea6:	4d91      	ldr	r5, [pc, #580]	@ (80050ec <_dtoa_r+0x584>)
 8004ea8:	b954      	cbnz	r4, 8004ec0 <_dtoa_r+0x358>
 8004eaa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004eae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004eb2:	f7fb fccb 	bl	800084c <__aeabi_ddiv>
 8004eb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004eba:	e028      	b.n	8004f0e <_dtoa_r+0x3a6>
 8004ebc:	2602      	movs	r6, #2
 8004ebe:	e7f2      	b.n	8004ea6 <_dtoa_r+0x33e>
 8004ec0:	07e1      	lsls	r1, r4, #31
 8004ec2:	d508      	bpl.n	8004ed6 <_dtoa_r+0x36e>
 8004ec4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004ec8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004ecc:	f7fb fb94 	bl	80005f8 <__aeabi_dmul>
 8004ed0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004ed4:	3601      	adds	r6, #1
 8004ed6:	1064      	asrs	r4, r4, #1
 8004ed8:	3508      	adds	r5, #8
 8004eda:	e7e5      	b.n	8004ea8 <_dtoa_r+0x340>
 8004edc:	f000 80af 	beq.w	800503e <_dtoa_r+0x4d6>
 8004ee0:	427c      	negs	r4, r7
 8004ee2:	4b81      	ldr	r3, [pc, #516]	@ (80050e8 <_dtoa_r+0x580>)
 8004ee4:	4d81      	ldr	r5, [pc, #516]	@ (80050ec <_dtoa_r+0x584>)
 8004ee6:	f004 020f 	and.w	r2, r4, #15
 8004eea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004ef6:	f7fb fb7f 	bl	80005f8 <__aeabi_dmul>
 8004efa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004efe:	1124      	asrs	r4, r4, #4
 8004f00:	2300      	movs	r3, #0
 8004f02:	2602      	movs	r6, #2
 8004f04:	2c00      	cmp	r4, #0
 8004f06:	f040 808f 	bne.w	8005028 <_dtoa_r+0x4c0>
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1d3      	bne.n	8004eb6 <_dtoa_r+0x34e>
 8004f0e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004f10:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f000 8094 	beq.w	8005042 <_dtoa_r+0x4da>
 8004f1a:	4b75      	ldr	r3, [pc, #468]	@ (80050f0 <_dtoa_r+0x588>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	4620      	mov	r0, r4
 8004f20:	4629      	mov	r1, r5
 8004f22:	f7fb fddb 	bl	8000adc <__aeabi_dcmplt>
 8004f26:	2800      	cmp	r0, #0
 8004f28:	f000 808b 	beq.w	8005042 <_dtoa_r+0x4da>
 8004f2c:	9b03      	ldr	r3, [sp, #12]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f000 8087 	beq.w	8005042 <_dtoa_r+0x4da>
 8004f34:	f1bb 0f00 	cmp.w	fp, #0
 8004f38:	dd34      	ble.n	8004fa4 <_dtoa_r+0x43c>
 8004f3a:	4620      	mov	r0, r4
 8004f3c:	4b6d      	ldr	r3, [pc, #436]	@ (80050f4 <_dtoa_r+0x58c>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	4629      	mov	r1, r5
 8004f42:	f7fb fb59 	bl	80005f8 <__aeabi_dmul>
 8004f46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f4a:	f107 38ff 	add.w	r8, r7, #4294967295
 8004f4e:	3601      	adds	r6, #1
 8004f50:	465c      	mov	r4, fp
 8004f52:	4630      	mov	r0, r6
 8004f54:	f7fb fae6 	bl	8000524 <__aeabi_i2d>
 8004f58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f5c:	f7fb fb4c 	bl	80005f8 <__aeabi_dmul>
 8004f60:	4b65      	ldr	r3, [pc, #404]	@ (80050f8 <_dtoa_r+0x590>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	f7fb f992 	bl	800028c <__adddf3>
 8004f68:	4605      	mov	r5, r0
 8004f6a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004f6e:	2c00      	cmp	r4, #0
 8004f70:	d16a      	bne.n	8005048 <_dtoa_r+0x4e0>
 8004f72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f76:	4b61      	ldr	r3, [pc, #388]	@ (80050fc <_dtoa_r+0x594>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f7fb f985 	bl	8000288 <__aeabi_dsub>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	460b      	mov	r3, r1
 8004f82:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004f86:	462a      	mov	r2, r5
 8004f88:	4633      	mov	r3, r6
 8004f8a:	f7fb fdc5 	bl	8000b18 <__aeabi_dcmpgt>
 8004f8e:	2800      	cmp	r0, #0
 8004f90:	f040 8298 	bne.w	80054c4 <_dtoa_r+0x95c>
 8004f94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f98:	462a      	mov	r2, r5
 8004f9a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004f9e:	f7fb fd9d 	bl	8000adc <__aeabi_dcmplt>
 8004fa2:	bb38      	cbnz	r0, 8004ff4 <_dtoa_r+0x48c>
 8004fa4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8004fa8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004fac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f2c0 8157 	blt.w	8005262 <_dtoa_r+0x6fa>
 8004fb4:	2f0e      	cmp	r7, #14
 8004fb6:	f300 8154 	bgt.w	8005262 <_dtoa_r+0x6fa>
 8004fba:	4b4b      	ldr	r3, [pc, #300]	@ (80050e8 <_dtoa_r+0x580>)
 8004fbc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004fc0:	ed93 7b00 	vldr	d7, [r3]
 8004fc4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	ed8d 7b00 	vstr	d7, [sp]
 8004fcc:	f280 80e5 	bge.w	800519a <_dtoa_r+0x632>
 8004fd0:	9b03      	ldr	r3, [sp, #12]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f300 80e1 	bgt.w	800519a <_dtoa_r+0x632>
 8004fd8:	d10c      	bne.n	8004ff4 <_dtoa_r+0x48c>
 8004fda:	4b48      	ldr	r3, [pc, #288]	@ (80050fc <_dtoa_r+0x594>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	ec51 0b17 	vmov	r0, r1, d7
 8004fe2:	f7fb fb09 	bl	80005f8 <__aeabi_dmul>
 8004fe6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fea:	f7fb fd8b 	bl	8000b04 <__aeabi_dcmpge>
 8004fee:	2800      	cmp	r0, #0
 8004ff0:	f000 8266 	beq.w	80054c0 <_dtoa_r+0x958>
 8004ff4:	2400      	movs	r4, #0
 8004ff6:	4625      	mov	r5, r4
 8004ff8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004ffa:	4656      	mov	r6, sl
 8004ffc:	ea6f 0803 	mvn.w	r8, r3
 8005000:	2700      	movs	r7, #0
 8005002:	4621      	mov	r1, r4
 8005004:	4648      	mov	r0, r9
 8005006:	f000 fcbf 	bl	8005988 <_Bfree>
 800500a:	2d00      	cmp	r5, #0
 800500c:	f000 80bd 	beq.w	800518a <_dtoa_r+0x622>
 8005010:	b12f      	cbz	r7, 800501e <_dtoa_r+0x4b6>
 8005012:	42af      	cmp	r7, r5
 8005014:	d003      	beq.n	800501e <_dtoa_r+0x4b6>
 8005016:	4639      	mov	r1, r7
 8005018:	4648      	mov	r0, r9
 800501a:	f000 fcb5 	bl	8005988 <_Bfree>
 800501e:	4629      	mov	r1, r5
 8005020:	4648      	mov	r0, r9
 8005022:	f000 fcb1 	bl	8005988 <_Bfree>
 8005026:	e0b0      	b.n	800518a <_dtoa_r+0x622>
 8005028:	07e2      	lsls	r2, r4, #31
 800502a:	d505      	bpl.n	8005038 <_dtoa_r+0x4d0>
 800502c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005030:	f7fb fae2 	bl	80005f8 <__aeabi_dmul>
 8005034:	3601      	adds	r6, #1
 8005036:	2301      	movs	r3, #1
 8005038:	1064      	asrs	r4, r4, #1
 800503a:	3508      	adds	r5, #8
 800503c:	e762      	b.n	8004f04 <_dtoa_r+0x39c>
 800503e:	2602      	movs	r6, #2
 8005040:	e765      	b.n	8004f0e <_dtoa_r+0x3a6>
 8005042:	9c03      	ldr	r4, [sp, #12]
 8005044:	46b8      	mov	r8, r7
 8005046:	e784      	b.n	8004f52 <_dtoa_r+0x3ea>
 8005048:	4b27      	ldr	r3, [pc, #156]	@ (80050e8 <_dtoa_r+0x580>)
 800504a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800504c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005050:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005054:	4454      	add	r4, sl
 8005056:	2900      	cmp	r1, #0
 8005058:	d054      	beq.n	8005104 <_dtoa_r+0x59c>
 800505a:	4929      	ldr	r1, [pc, #164]	@ (8005100 <_dtoa_r+0x598>)
 800505c:	2000      	movs	r0, #0
 800505e:	f7fb fbf5 	bl	800084c <__aeabi_ddiv>
 8005062:	4633      	mov	r3, r6
 8005064:	462a      	mov	r2, r5
 8005066:	f7fb f90f 	bl	8000288 <__aeabi_dsub>
 800506a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800506e:	4656      	mov	r6, sl
 8005070:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005074:	f7fb fd70 	bl	8000b58 <__aeabi_d2iz>
 8005078:	4605      	mov	r5, r0
 800507a:	f7fb fa53 	bl	8000524 <__aeabi_i2d>
 800507e:	4602      	mov	r2, r0
 8005080:	460b      	mov	r3, r1
 8005082:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005086:	f7fb f8ff 	bl	8000288 <__aeabi_dsub>
 800508a:	3530      	adds	r5, #48	@ 0x30
 800508c:	4602      	mov	r2, r0
 800508e:	460b      	mov	r3, r1
 8005090:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005094:	f806 5b01 	strb.w	r5, [r6], #1
 8005098:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800509c:	f7fb fd1e 	bl	8000adc <__aeabi_dcmplt>
 80050a0:	2800      	cmp	r0, #0
 80050a2:	d172      	bne.n	800518a <_dtoa_r+0x622>
 80050a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050a8:	4911      	ldr	r1, [pc, #68]	@ (80050f0 <_dtoa_r+0x588>)
 80050aa:	2000      	movs	r0, #0
 80050ac:	f7fb f8ec 	bl	8000288 <__aeabi_dsub>
 80050b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80050b4:	f7fb fd12 	bl	8000adc <__aeabi_dcmplt>
 80050b8:	2800      	cmp	r0, #0
 80050ba:	f040 80b4 	bne.w	8005226 <_dtoa_r+0x6be>
 80050be:	42a6      	cmp	r6, r4
 80050c0:	f43f af70 	beq.w	8004fa4 <_dtoa_r+0x43c>
 80050c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80050c8:	4b0a      	ldr	r3, [pc, #40]	@ (80050f4 <_dtoa_r+0x58c>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	f7fb fa94 	bl	80005f8 <__aeabi_dmul>
 80050d0:	4b08      	ldr	r3, [pc, #32]	@ (80050f4 <_dtoa_r+0x58c>)
 80050d2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80050d6:	2200      	movs	r2, #0
 80050d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050dc:	f7fb fa8c 	bl	80005f8 <__aeabi_dmul>
 80050e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050e4:	e7c4      	b.n	8005070 <_dtoa_r+0x508>
 80050e6:	bf00      	nop
 80050e8:	08006ef0 	.word	0x08006ef0
 80050ec:	08006ec8 	.word	0x08006ec8
 80050f0:	3ff00000 	.word	0x3ff00000
 80050f4:	40240000 	.word	0x40240000
 80050f8:	401c0000 	.word	0x401c0000
 80050fc:	40140000 	.word	0x40140000
 8005100:	3fe00000 	.word	0x3fe00000
 8005104:	4631      	mov	r1, r6
 8005106:	4628      	mov	r0, r5
 8005108:	f7fb fa76 	bl	80005f8 <__aeabi_dmul>
 800510c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005110:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005112:	4656      	mov	r6, sl
 8005114:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005118:	f7fb fd1e 	bl	8000b58 <__aeabi_d2iz>
 800511c:	4605      	mov	r5, r0
 800511e:	f7fb fa01 	bl	8000524 <__aeabi_i2d>
 8005122:	4602      	mov	r2, r0
 8005124:	460b      	mov	r3, r1
 8005126:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800512a:	f7fb f8ad 	bl	8000288 <__aeabi_dsub>
 800512e:	3530      	adds	r5, #48	@ 0x30
 8005130:	f806 5b01 	strb.w	r5, [r6], #1
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	42a6      	cmp	r6, r4
 800513a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800513e:	f04f 0200 	mov.w	r2, #0
 8005142:	d124      	bne.n	800518e <_dtoa_r+0x626>
 8005144:	4baf      	ldr	r3, [pc, #700]	@ (8005404 <_dtoa_r+0x89c>)
 8005146:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800514a:	f7fb f89f 	bl	800028c <__adddf3>
 800514e:	4602      	mov	r2, r0
 8005150:	460b      	mov	r3, r1
 8005152:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005156:	f7fb fcdf 	bl	8000b18 <__aeabi_dcmpgt>
 800515a:	2800      	cmp	r0, #0
 800515c:	d163      	bne.n	8005226 <_dtoa_r+0x6be>
 800515e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005162:	49a8      	ldr	r1, [pc, #672]	@ (8005404 <_dtoa_r+0x89c>)
 8005164:	2000      	movs	r0, #0
 8005166:	f7fb f88f 	bl	8000288 <__aeabi_dsub>
 800516a:	4602      	mov	r2, r0
 800516c:	460b      	mov	r3, r1
 800516e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005172:	f7fb fcb3 	bl	8000adc <__aeabi_dcmplt>
 8005176:	2800      	cmp	r0, #0
 8005178:	f43f af14 	beq.w	8004fa4 <_dtoa_r+0x43c>
 800517c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800517e:	1e73      	subs	r3, r6, #1
 8005180:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005182:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005186:	2b30      	cmp	r3, #48	@ 0x30
 8005188:	d0f8      	beq.n	800517c <_dtoa_r+0x614>
 800518a:	4647      	mov	r7, r8
 800518c:	e03b      	b.n	8005206 <_dtoa_r+0x69e>
 800518e:	4b9e      	ldr	r3, [pc, #632]	@ (8005408 <_dtoa_r+0x8a0>)
 8005190:	f7fb fa32 	bl	80005f8 <__aeabi_dmul>
 8005194:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005198:	e7bc      	b.n	8005114 <_dtoa_r+0x5ac>
 800519a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800519e:	4656      	mov	r6, sl
 80051a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051a4:	4620      	mov	r0, r4
 80051a6:	4629      	mov	r1, r5
 80051a8:	f7fb fb50 	bl	800084c <__aeabi_ddiv>
 80051ac:	f7fb fcd4 	bl	8000b58 <__aeabi_d2iz>
 80051b0:	4680      	mov	r8, r0
 80051b2:	f7fb f9b7 	bl	8000524 <__aeabi_i2d>
 80051b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051ba:	f7fb fa1d 	bl	80005f8 <__aeabi_dmul>
 80051be:	4602      	mov	r2, r0
 80051c0:	460b      	mov	r3, r1
 80051c2:	4620      	mov	r0, r4
 80051c4:	4629      	mov	r1, r5
 80051c6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80051ca:	f7fb f85d 	bl	8000288 <__aeabi_dsub>
 80051ce:	f806 4b01 	strb.w	r4, [r6], #1
 80051d2:	9d03      	ldr	r5, [sp, #12]
 80051d4:	eba6 040a 	sub.w	r4, r6, sl
 80051d8:	42a5      	cmp	r5, r4
 80051da:	4602      	mov	r2, r0
 80051dc:	460b      	mov	r3, r1
 80051de:	d133      	bne.n	8005248 <_dtoa_r+0x6e0>
 80051e0:	f7fb f854 	bl	800028c <__adddf3>
 80051e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051e8:	4604      	mov	r4, r0
 80051ea:	460d      	mov	r5, r1
 80051ec:	f7fb fc94 	bl	8000b18 <__aeabi_dcmpgt>
 80051f0:	b9c0      	cbnz	r0, 8005224 <_dtoa_r+0x6bc>
 80051f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051f6:	4620      	mov	r0, r4
 80051f8:	4629      	mov	r1, r5
 80051fa:	f7fb fc65 	bl	8000ac8 <__aeabi_dcmpeq>
 80051fe:	b110      	cbz	r0, 8005206 <_dtoa_r+0x69e>
 8005200:	f018 0f01 	tst.w	r8, #1
 8005204:	d10e      	bne.n	8005224 <_dtoa_r+0x6bc>
 8005206:	9902      	ldr	r1, [sp, #8]
 8005208:	4648      	mov	r0, r9
 800520a:	f000 fbbd 	bl	8005988 <_Bfree>
 800520e:	2300      	movs	r3, #0
 8005210:	7033      	strb	r3, [r6, #0]
 8005212:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005214:	3701      	adds	r7, #1
 8005216:	601f      	str	r7, [r3, #0]
 8005218:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800521a:	2b00      	cmp	r3, #0
 800521c:	f000 824b 	beq.w	80056b6 <_dtoa_r+0xb4e>
 8005220:	601e      	str	r6, [r3, #0]
 8005222:	e248      	b.n	80056b6 <_dtoa_r+0xb4e>
 8005224:	46b8      	mov	r8, r7
 8005226:	4633      	mov	r3, r6
 8005228:	461e      	mov	r6, r3
 800522a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800522e:	2a39      	cmp	r2, #57	@ 0x39
 8005230:	d106      	bne.n	8005240 <_dtoa_r+0x6d8>
 8005232:	459a      	cmp	sl, r3
 8005234:	d1f8      	bne.n	8005228 <_dtoa_r+0x6c0>
 8005236:	2230      	movs	r2, #48	@ 0x30
 8005238:	f108 0801 	add.w	r8, r8, #1
 800523c:	f88a 2000 	strb.w	r2, [sl]
 8005240:	781a      	ldrb	r2, [r3, #0]
 8005242:	3201      	adds	r2, #1
 8005244:	701a      	strb	r2, [r3, #0]
 8005246:	e7a0      	b.n	800518a <_dtoa_r+0x622>
 8005248:	4b6f      	ldr	r3, [pc, #444]	@ (8005408 <_dtoa_r+0x8a0>)
 800524a:	2200      	movs	r2, #0
 800524c:	f7fb f9d4 	bl	80005f8 <__aeabi_dmul>
 8005250:	2200      	movs	r2, #0
 8005252:	2300      	movs	r3, #0
 8005254:	4604      	mov	r4, r0
 8005256:	460d      	mov	r5, r1
 8005258:	f7fb fc36 	bl	8000ac8 <__aeabi_dcmpeq>
 800525c:	2800      	cmp	r0, #0
 800525e:	d09f      	beq.n	80051a0 <_dtoa_r+0x638>
 8005260:	e7d1      	b.n	8005206 <_dtoa_r+0x69e>
 8005262:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005264:	2a00      	cmp	r2, #0
 8005266:	f000 80ea 	beq.w	800543e <_dtoa_r+0x8d6>
 800526a:	9a07      	ldr	r2, [sp, #28]
 800526c:	2a01      	cmp	r2, #1
 800526e:	f300 80cd 	bgt.w	800540c <_dtoa_r+0x8a4>
 8005272:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005274:	2a00      	cmp	r2, #0
 8005276:	f000 80c1 	beq.w	80053fc <_dtoa_r+0x894>
 800527a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800527e:	9c08      	ldr	r4, [sp, #32]
 8005280:	9e00      	ldr	r6, [sp, #0]
 8005282:	9a00      	ldr	r2, [sp, #0]
 8005284:	441a      	add	r2, r3
 8005286:	9200      	str	r2, [sp, #0]
 8005288:	9a06      	ldr	r2, [sp, #24]
 800528a:	2101      	movs	r1, #1
 800528c:	441a      	add	r2, r3
 800528e:	4648      	mov	r0, r9
 8005290:	9206      	str	r2, [sp, #24]
 8005292:	f000 fc2d 	bl	8005af0 <__i2b>
 8005296:	4605      	mov	r5, r0
 8005298:	b166      	cbz	r6, 80052b4 <_dtoa_r+0x74c>
 800529a:	9b06      	ldr	r3, [sp, #24]
 800529c:	2b00      	cmp	r3, #0
 800529e:	dd09      	ble.n	80052b4 <_dtoa_r+0x74c>
 80052a0:	42b3      	cmp	r3, r6
 80052a2:	9a00      	ldr	r2, [sp, #0]
 80052a4:	bfa8      	it	ge
 80052a6:	4633      	movge	r3, r6
 80052a8:	1ad2      	subs	r2, r2, r3
 80052aa:	9200      	str	r2, [sp, #0]
 80052ac:	9a06      	ldr	r2, [sp, #24]
 80052ae:	1af6      	subs	r6, r6, r3
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	9306      	str	r3, [sp, #24]
 80052b4:	9b08      	ldr	r3, [sp, #32]
 80052b6:	b30b      	cbz	r3, 80052fc <_dtoa_r+0x794>
 80052b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f000 80c6 	beq.w	800544c <_dtoa_r+0x8e4>
 80052c0:	2c00      	cmp	r4, #0
 80052c2:	f000 80c0 	beq.w	8005446 <_dtoa_r+0x8de>
 80052c6:	4629      	mov	r1, r5
 80052c8:	4622      	mov	r2, r4
 80052ca:	4648      	mov	r0, r9
 80052cc:	f000 fcc8 	bl	8005c60 <__pow5mult>
 80052d0:	9a02      	ldr	r2, [sp, #8]
 80052d2:	4601      	mov	r1, r0
 80052d4:	4605      	mov	r5, r0
 80052d6:	4648      	mov	r0, r9
 80052d8:	f000 fc20 	bl	8005b1c <__multiply>
 80052dc:	9902      	ldr	r1, [sp, #8]
 80052de:	4680      	mov	r8, r0
 80052e0:	4648      	mov	r0, r9
 80052e2:	f000 fb51 	bl	8005988 <_Bfree>
 80052e6:	9b08      	ldr	r3, [sp, #32]
 80052e8:	1b1b      	subs	r3, r3, r4
 80052ea:	9308      	str	r3, [sp, #32]
 80052ec:	f000 80b1 	beq.w	8005452 <_dtoa_r+0x8ea>
 80052f0:	9a08      	ldr	r2, [sp, #32]
 80052f2:	4641      	mov	r1, r8
 80052f4:	4648      	mov	r0, r9
 80052f6:	f000 fcb3 	bl	8005c60 <__pow5mult>
 80052fa:	9002      	str	r0, [sp, #8]
 80052fc:	2101      	movs	r1, #1
 80052fe:	4648      	mov	r0, r9
 8005300:	f000 fbf6 	bl	8005af0 <__i2b>
 8005304:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005306:	4604      	mov	r4, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 81d8 	beq.w	80056be <_dtoa_r+0xb56>
 800530e:	461a      	mov	r2, r3
 8005310:	4601      	mov	r1, r0
 8005312:	4648      	mov	r0, r9
 8005314:	f000 fca4 	bl	8005c60 <__pow5mult>
 8005318:	9b07      	ldr	r3, [sp, #28]
 800531a:	2b01      	cmp	r3, #1
 800531c:	4604      	mov	r4, r0
 800531e:	f300 809f 	bgt.w	8005460 <_dtoa_r+0x8f8>
 8005322:	9b04      	ldr	r3, [sp, #16]
 8005324:	2b00      	cmp	r3, #0
 8005326:	f040 8097 	bne.w	8005458 <_dtoa_r+0x8f0>
 800532a:	9b05      	ldr	r3, [sp, #20]
 800532c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005330:	2b00      	cmp	r3, #0
 8005332:	f040 8093 	bne.w	800545c <_dtoa_r+0x8f4>
 8005336:	9b05      	ldr	r3, [sp, #20]
 8005338:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800533c:	0d1b      	lsrs	r3, r3, #20
 800533e:	051b      	lsls	r3, r3, #20
 8005340:	b133      	cbz	r3, 8005350 <_dtoa_r+0x7e8>
 8005342:	9b00      	ldr	r3, [sp, #0]
 8005344:	3301      	adds	r3, #1
 8005346:	9300      	str	r3, [sp, #0]
 8005348:	9b06      	ldr	r3, [sp, #24]
 800534a:	3301      	adds	r3, #1
 800534c:	9306      	str	r3, [sp, #24]
 800534e:	2301      	movs	r3, #1
 8005350:	9308      	str	r3, [sp, #32]
 8005352:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005354:	2b00      	cmp	r3, #0
 8005356:	f000 81b8 	beq.w	80056ca <_dtoa_r+0xb62>
 800535a:	6923      	ldr	r3, [r4, #16]
 800535c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005360:	6918      	ldr	r0, [r3, #16]
 8005362:	f000 fb79 	bl	8005a58 <__hi0bits>
 8005366:	f1c0 0020 	rsb	r0, r0, #32
 800536a:	9b06      	ldr	r3, [sp, #24]
 800536c:	4418      	add	r0, r3
 800536e:	f010 001f 	ands.w	r0, r0, #31
 8005372:	f000 8082 	beq.w	800547a <_dtoa_r+0x912>
 8005376:	f1c0 0320 	rsb	r3, r0, #32
 800537a:	2b04      	cmp	r3, #4
 800537c:	dd73      	ble.n	8005466 <_dtoa_r+0x8fe>
 800537e:	9b00      	ldr	r3, [sp, #0]
 8005380:	f1c0 001c 	rsb	r0, r0, #28
 8005384:	4403      	add	r3, r0
 8005386:	9300      	str	r3, [sp, #0]
 8005388:	9b06      	ldr	r3, [sp, #24]
 800538a:	4403      	add	r3, r0
 800538c:	4406      	add	r6, r0
 800538e:	9306      	str	r3, [sp, #24]
 8005390:	9b00      	ldr	r3, [sp, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	dd05      	ble.n	80053a2 <_dtoa_r+0x83a>
 8005396:	9902      	ldr	r1, [sp, #8]
 8005398:	461a      	mov	r2, r3
 800539a:	4648      	mov	r0, r9
 800539c:	f000 fcba 	bl	8005d14 <__lshift>
 80053a0:	9002      	str	r0, [sp, #8]
 80053a2:	9b06      	ldr	r3, [sp, #24]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	dd05      	ble.n	80053b4 <_dtoa_r+0x84c>
 80053a8:	4621      	mov	r1, r4
 80053aa:	461a      	mov	r2, r3
 80053ac:	4648      	mov	r0, r9
 80053ae:	f000 fcb1 	bl	8005d14 <__lshift>
 80053b2:	4604      	mov	r4, r0
 80053b4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d061      	beq.n	800547e <_dtoa_r+0x916>
 80053ba:	9802      	ldr	r0, [sp, #8]
 80053bc:	4621      	mov	r1, r4
 80053be:	f000 fd15 	bl	8005dec <__mcmp>
 80053c2:	2800      	cmp	r0, #0
 80053c4:	da5b      	bge.n	800547e <_dtoa_r+0x916>
 80053c6:	2300      	movs	r3, #0
 80053c8:	9902      	ldr	r1, [sp, #8]
 80053ca:	220a      	movs	r2, #10
 80053cc:	4648      	mov	r0, r9
 80053ce:	f000 fafd 	bl	80059cc <__multadd>
 80053d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053d4:	9002      	str	r0, [sp, #8]
 80053d6:	f107 38ff 	add.w	r8, r7, #4294967295
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f000 8177 	beq.w	80056ce <_dtoa_r+0xb66>
 80053e0:	4629      	mov	r1, r5
 80053e2:	2300      	movs	r3, #0
 80053e4:	220a      	movs	r2, #10
 80053e6:	4648      	mov	r0, r9
 80053e8:	f000 faf0 	bl	80059cc <__multadd>
 80053ec:	f1bb 0f00 	cmp.w	fp, #0
 80053f0:	4605      	mov	r5, r0
 80053f2:	dc6f      	bgt.n	80054d4 <_dtoa_r+0x96c>
 80053f4:	9b07      	ldr	r3, [sp, #28]
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	dc49      	bgt.n	800548e <_dtoa_r+0x926>
 80053fa:	e06b      	b.n	80054d4 <_dtoa_r+0x96c>
 80053fc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80053fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005402:	e73c      	b.n	800527e <_dtoa_r+0x716>
 8005404:	3fe00000 	.word	0x3fe00000
 8005408:	40240000 	.word	0x40240000
 800540c:	9b03      	ldr	r3, [sp, #12]
 800540e:	1e5c      	subs	r4, r3, #1
 8005410:	9b08      	ldr	r3, [sp, #32]
 8005412:	42a3      	cmp	r3, r4
 8005414:	db09      	blt.n	800542a <_dtoa_r+0x8c2>
 8005416:	1b1c      	subs	r4, r3, r4
 8005418:	9b03      	ldr	r3, [sp, #12]
 800541a:	2b00      	cmp	r3, #0
 800541c:	f6bf af30 	bge.w	8005280 <_dtoa_r+0x718>
 8005420:	9b00      	ldr	r3, [sp, #0]
 8005422:	9a03      	ldr	r2, [sp, #12]
 8005424:	1a9e      	subs	r6, r3, r2
 8005426:	2300      	movs	r3, #0
 8005428:	e72b      	b.n	8005282 <_dtoa_r+0x71a>
 800542a:	9b08      	ldr	r3, [sp, #32]
 800542c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800542e:	9408      	str	r4, [sp, #32]
 8005430:	1ae3      	subs	r3, r4, r3
 8005432:	441a      	add	r2, r3
 8005434:	9e00      	ldr	r6, [sp, #0]
 8005436:	9b03      	ldr	r3, [sp, #12]
 8005438:	920d      	str	r2, [sp, #52]	@ 0x34
 800543a:	2400      	movs	r4, #0
 800543c:	e721      	b.n	8005282 <_dtoa_r+0x71a>
 800543e:	9c08      	ldr	r4, [sp, #32]
 8005440:	9e00      	ldr	r6, [sp, #0]
 8005442:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005444:	e728      	b.n	8005298 <_dtoa_r+0x730>
 8005446:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800544a:	e751      	b.n	80052f0 <_dtoa_r+0x788>
 800544c:	9a08      	ldr	r2, [sp, #32]
 800544e:	9902      	ldr	r1, [sp, #8]
 8005450:	e750      	b.n	80052f4 <_dtoa_r+0x78c>
 8005452:	f8cd 8008 	str.w	r8, [sp, #8]
 8005456:	e751      	b.n	80052fc <_dtoa_r+0x794>
 8005458:	2300      	movs	r3, #0
 800545a:	e779      	b.n	8005350 <_dtoa_r+0x7e8>
 800545c:	9b04      	ldr	r3, [sp, #16]
 800545e:	e777      	b.n	8005350 <_dtoa_r+0x7e8>
 8005460:	2300      	movs	r3, #0
 8005462:	9308      	str	r3, [sp, #32]
 8005464:	e779      	b.n	800535a <_dtoa_r+0x7f2>
 8005466:	d093      	beq.n	8005390 <_dtoa_r+0x828>
 8005468:	9a00      	ldr	r2, [sp, #0]
 800546a:	331c      	adds	r3, #28
 800546c:	441a      	add	r2, r3
 800546e:	9200      	str	r2, [sp, #0]
 8005470:	9a06      	ldr	r2, [sp, #24]
 8005472:	441a      	add	r2, r3
 8005474:	441e      	add	r6, r3
 8005476:	9206      	str	r2, [sp, #24]
 8005478:	e78a      	b.n	8005390 <_dtoa_r+0x828>
 800547a:	4603      	mov	r3, r0
 800547c:	e7f4      	b.n	8005468 <_dtoa_r+0x900>
 800547e:	9b03      	ldr	r3, [sp, #12]
 8005480:	2b00      	cmp	r3, #0
 8005482:	46b8      	mov	r8, r7
 8005484:	dc20      	bgt.n	80054c8 <_dtoa_r+0x960>
 8005486:	469b      	mov	fp, r3
 8005488:	9b07      	ldr	r3, [sp, #28]
 800548a:	2b02      	cmp	r3, #2
 800548c:	dd1e      	ble.n	80054cc <_dtoa_r+0x964>
 800548e:	f1bb 0f00 	cmp.w	fp, #0
 8005492:	f47f adb1 	bne.w	8004ff8 <_dtoa_r+0x490>
 8005496:	4621      	mov	r1, r4
 8005498:	465b      	mov	r3, fp
 800549a:	2205      	movs	r2, #5
 800549c:	4648      	mov	r0, r9
 800549e:	f000 fa95 	bl	80059cc <__multadd>
 80054a2:	4601      	mov	r1, r0
 80054a4:	4604      	mov	r4, r0
 80054a6:	9802      	ldr	r0, [sp, #8]
 80054a8:	f000 fca0 	bl	8005dec <__mcmp>
 80054ac:	2800      	cmp	r0, #0
 80054ae:	f77f ada3 	ble.w	8004ff8 <_dtoa_r+0x490>
 80054b2:	4656      	mov	r6, sl
 80054b4:	2331      	movs	r3, #49	@ 0x31
 80054b6:	f806 3b01 	strb.w	r3, [r6], #1
 80054ba:	f108 0801 	add.w	r8, r8, #1
 80054be:	e59f      	b.n	8005000 <_dtoa_r+0x498>
 80054c0:	9c03      	ldr	r4, [sp, #12]
 80054c2:	46b8      	mov	r8, r7
 80054c4:	4625      	mov	r5, r4
 80054c6:	e7f4      	b.n	80054b2 <_dtoa_r+0x94a>
 80054c8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80054cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	f000 8101 	beq.w	80056d6 <_dtoa_r+0xb6e>
 80054d4:	2e00      	cmp	r6, #0
 80054d6:	dd05      	ble.n	80054e4 <_dtoa_r+0x97c>
 80054d8:	4629      	mov	r1, r5
 80054da:	4632      	mov	r2, r6
 80054dc:	4648      	mov	r0, r9
 80054de:	f000 fc19 	bl	8005d14 <__lshift>
 80054e2:	4605      	mov	r5, r0
 80054e4:	9b08      	ldr	r3, [sp, #32]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d05c      	beq.n	80055a4 <_dtoa_r+0xa3c>
 80054ea:	6869      	ldr	r1, [r5, #4]
 80054ec:	4648      	mov	r0, r9
 80054ee:	f000 fa0b 	bl	8005908 <_Balloc>
 80054f2:	4606      	mov	r6, r0
 80054f4:	b928      	cbnz	r0, 8005502 <_dtoa_r+0x99a>
 80054f6:	4b82      	ldr	r3, [pc, #520]	@ (8005700 <_dtoa_r+0xb98>)
 80054f8:	4602      	mov	r2, r0
 80054fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80054fe:	f7ff bb4a 	b.w	8004b96 <_dtoa_r+0x2e>
 8005502:	692a      	ldr	r2, [r5, #16]
 8005504:	3202      	adds	r2, #2
 8005506:	0092      	lsls	r2, r2, #2
 8005508:	f105 010c 	add.w	r1, r5, #12
 800550c:	300c      	adds	r0, #12
 800550e:	f000 fff7 	bl	8006500 <memcpy>
 8005512:	2201      	movs	r2, #1
 8005514:	4631      	mov	r1, r6
 8005516:	4648      	mov	r0, r9
 8005518:	f000 fbfc 	bl	8005d14 <__lshift>
 800551c:	f10a 0301 	add.w	r3, sl, #1
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	eb0a 030b 	add.w	r3, sl, fp
 8005526:	9308      	str	r3, [sp, #32]
 8005528:	9b04      	ldr	r3, [sp, #16]
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	462f      	mov	r7, r5
 8005530:	9306      	str	r3, [sp, #24]
 8005532:	4605      	mov	r5, r0
 8005534:	9b00      	ldr	r3, [sp, #0]
 8005536:	9802      	ldr	r0, [sp, #8]
 8005538:	4621      	mov	r1, r4
 800553a:	f103 3bff 	add.w	fp, r3, #4294967295
 800553e:	f7ff fa8a 	bl	8004a56 <quorem>
 8005542:	4603      	mov	r3, r0
 8005544:	3330      	adds	r3, #48	@ 0x30
 8005546:	9003      	str	r0, [sp, #12]
 8005548:	4639      	mov	r1, r7
 800554a:	9802      	ldr	r0, [sp, #8]
 800554c:	9309      	str	r3, [sp, #36]	@ 0x24
 800554e:	f000 fc4d 	bl	8005dec <__mcmp>
 8005552:	462a      	mov	r2, r5
 8005554:	9004      	str	r0, [sp, #16]
 8005556:	4621      	mov	r1, r4
 8005558:	4648      	mov	r0, r9
 800555a:	f000 fc63 	bl	8005e24 <__mdiff>
 800555e:	68c2      	ldr	r2, [r0, #12]
 8005560:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005562:	4606      	mov	r6, r0
 8005564:	bb02      	cbnz	r2, 80055a8 <_dtoa_r+0xa40>
 8005566:	4601      	mov	r1, r0
 8005568:	9802      	ldr	r0, [sp, #8]
 800556a:	f000 fc3f 	bl	8005dec <__mcmp>
 800556e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005570:	4602      	mov	r2, r0
 8005572:	4631      	mov	r1, r6
 8005574:	4648      	mov	r0, r9
 8005576:	920c      	str	r2, [sp, #48]	@ 0x30
 8005578:	9309      	str	r3, [sp, #36]	@ 0x24
 800557a:	f000 fa05 	bl	8005988 <_Bfree>
 800557e:	9b07      	ldr	r3, [sp, #28]
 8005580:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005582:	9e00      	ldr	r6, [sp, #0]
 8005584:	ea42 0103 	orr.w	r1, r2, r3
 8005588:	9b06      	ldr	r3, [sp, #24]
 800558a:	4319      	orrs	r1, r3
 800558c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800558e:	d10d      	bne.n	80055ac <_dtoa_r+0xa44>
 8005590:	2b39      	cmp	r3, #57	@ 0x39
 8005592:	d027      	beq.n	80055e4 <_dtoa_r+0xa7c>
 8005594:	9a04      	ldr	r2, [sp, #16]
 8005596:	2a00      	cmp	r2, #0
 8005598:	dd01      	ble.n	800559e <_dtoa_r+0xa36>
 800559a:	9b03      	ldr	r3, [sp, #12]
 800559c:	3331      	adds	r3, #49	@ 0x31
 800559e:	f88b 3000 	strb.w	r3, [fp]
 80055a2:	e52e      	b.n	8005002 <_dtoa_r+0x49a>
 80055a4:	4628      	mov	r0, r5
 80055a6:	e7b9      	b.n	800551c <_dtoa_r+0x9b4>
 80055a8:	2201      	movs	r2, #1
 80055aa:	e7e2      	b.n	8005572 <_dtoa_r+0xa0a>
 80055ac:	9904      	ldr	r1, [sp, #16]
 80055ae:	2900      	cmp	r1, #0
 80055b0:	db04      	blt.n	80055bc <_dtoa_r+0xa54>
 80055b2:	9807      	ldr	r0, [sp, #28]
 80055b4:	4301      	orrs	r1, r0
 80055b6:	9806      	ldr	r0, [sp, #24]
 80055b8:	4301      	orrs	r1, r0
 80055ba:	d120      	bne.n	80055fe <_dtoa_r+0xa96>
 80055bc:	2a00      	cmp	r2, #0
 80055be:	ddee      	ble.n	800559e <_dtoa_r+0xa36>
 80055c0:	9902      	ldr	r1, [sp, #8]
 80055c2:	9300      	str	r3, [sp, #0]
 80055c4:	2201      	movs	r2, #1
 80055c6:	4648      	mov	r0, r9
 80055c8:	f000 fba4 	bl	8005d14 <__lshift>
 80055cc:	4621      	mov	r1, r4
 80055ce:	9002      	str	r0, [sp, #8]
 80055d0:	f000 fc0c 	bl	8005dec <__mcmp>
 80055d4:	2800      	cmp	r0, #0
 80055d6:	9b00      	ldr	r3, [sp, #0]
 80055d8:	dc02      	bgt.n	80055e0 <_dtoa_r+0xa78>
 80055da:	d1e0      	bne.n	800559e <_dtoa_r+0xa36>
 80055dc:	07da      	lsls	r2, r3, #31
 80055de:	d5de      	bpl.n	800559e <_dtoa_r+0xa36>
 80055e0:	2b39      	cmp	r3, #57	@ 0x39
 80055e2:	d1da      	bne.n	800559a <_dtoa_r+0xa32>
 80055e4:	2339      	movs	r3, #57	@ 0x39
 80055e6:	f88b 3000 	strb.w	r3, [fp]
 80055ea:	4633      	mov	r3, r6
 80055ec:	461e      	mov	r6, r3
 80055ee:	3b01      	subs	r3, #1
 80055f0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80055f4:	2a39      	cmp	r2, #57	@ 0x39
 80055f6:	d04e      	beq.n	8005696 <_dtoa_r+0xb2e>
 80055f8:	3201      	adds	r2, #1
 80055fa:	701a      	strb	r2, [r3, #0]
 80055fc:	e501      	b.n	8005002 <_dtoa_r+0x49a>
 80055fe:	2a00      	cmp	r2, #0
 8005600:	dd03      	ble.n	800560a <_dtoa_r+0xaa2>
 8005602:	2b39      	cmp	r3, #57	@ 0x39
 8005604:	d0ee      	beq.n	80055e4 <_dtoa_r+0xa7c>
 8005606:	3301      	adds	r3, #1
 8005608:	e7c9      	b.n	800559e <_dtoa_r+0xa36>
 800560a:	9a00      	ldr	r2, [sp, #0]
 800560c:	9908      	ldr	r1, [sp, #32]
 800560e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005612:	428a      	cmp	r2, r1
 8005614:	d028      	beq.n	8005668 <_dtoa_r+0xb00>
 8005616:	9902      	ldr	r1, [sp, #8]
 8005618:	2300      	movs	r3, #0
 800561a:	220a      	movs	r2, #10
 800561c:	4648      	mov	r0, r9
 800561e:	f000 f9d5 	bl	80059cc <__multadd>
 8005622:	42af      	cmp	r7, r5
 8005624:	9002      	str	r0, [sp, #8]
 8005626:	f04f 0300 	mov.w	r3, #0
 800562a:	f04f 020a 	mov.w	r2, #10
 800562e:	4639      	mov	r1, r7
 8005630:	4648      	mov	r0, r9
 8005632:	d107      	bne.n	8005644 <_dtoa_r+0xadc>
 8005634:	f000 f9ca 	bl	80059cc <__multadd>
 8005638:	4607      	mov	r7, r0
 800563a:	4605      	mov	r5, r0
 800563c:	9b00      	ldr	r3, [sp, #0]
 800563e:	3301      	adds	r3, #1
 8005640:	9300      	str	r3, [sp, #0]
 8005642:	e777      	b.n	8005534 <_dtoa_r+0x9cc>
 8005644:	f000 f9c2 	bl	80059cc <__multadd>
 8005648:	4629      	mov	r1, r5
 800564a:	4607      	mov	r7, r0
 800564c:	2300      	movs	r3, #0
 800564e:	220a      	movs	r2, #10
 8005650:	4648      	mov	r0, r9
 8005652:	f000 f9bb 	bl	80059cc <__multadd>
 8005656:	4605      	mov	r5, r0
 8005658:	e7f0      	b.n	800563c <_dtoa_r+0xad4>
 800565a:	f1bb 0f00 	cmp.w	fp, #0
 800565e:	bfcc      	ite	gt
 8005660:	465e      	movgt	r6, fp
 8005662:	2601      	movle	r6, #1
 8005664:	4456      	add	r6, sl
 8005666:	2700      	movs	r7, #0
 8005668:	9902      	ldr	r1, [sp, #8]
 800566a:	9300      	str	r3, [sp, #0]
 800566c:	2201      	movs	r2, #1
 800566e:	4648      	mov	r0, r9
 8005670:	f000 fb50 	bl	8005d14 <__lshift>
 8005674:	4621      	mov	r1, r4
 8005676:	9002      	str	r0, [sp, #8]
 8005678:	f000 fbb8 	bl	8005dec <__mcmp>
 800567c:	2800      	cmp	r0, #0
 800567e:	dcb4      	bgt.n	80055ea <_dtoa_r+0xa82>
 8005680:	d102      	bne.n	8005688 <_dtoa_r+0xb20>
 8005682:	9b00      	ldr	r3, [sp, #0]
 8005684:	07db      	lsls	r3, r3, #31
 8005686:	d4b0      	bmi.n	80055ea <_dtoa_r+0xa82>
 8005688:	4633      	mov	r3, r6
 800568a:	461e      	mov	r6, r3
 800568c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005690:	2a30      	cmp	r2, #48	@ 0x30
 8005692:	d0fa      	beq.n	800568a <_dtoa_r+0xb22>
 8005694:	e4b5      	b.n	8005002 <_dtoa_r+0x49a>
 8005696:	459a      	cmp	sl, r3
 8005698:	d1a8      	bne.n	80055ec <_dtoa_r+0xa84>
 800569a:	2331      	movs	r3, #49	@ 0x31
 800569c:	f108 0801 	add.w	r8, r8, #1
 80056a0:	f88a 3000 	strb.w	r3, [sl]
 80056a4:	e4ad      	b.n	8005002 <_dtoa_r+0x49a>
 80056a6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80056a8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005704 <_dtoa_r+0xb9c>
 80056ac:	b11b      	cbz	r3, 80056b6 <_dtoa_r+0xb4e>
 80056ae:	f10a 0308 	add.w	r3, sl, #8
 80056b2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80056b4:	6013      	str	r3, [r2, #0]
 80056b6:	4650      	mov	r0, sl
 80056b8:	b017      	add	sp, #92	@ 0x5c
 80056ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056be:	9b07      	ldr	r3, [sp, #28]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	f77f ae2e 	ble.w	8005322 <_dtoa_r+0x7ba>
 80056c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80056c8:	9308      	str	r3, [sp, #32]
 80056ca:	2001      	movs	r0, #1
 80056cc:	e64d      	b.n	800536a <_dtoa_r+0x802>
 80056ce:	f1bb 0f00 	cmp.w	fp, #0
 80056d2:	f77f aed9 	ble.w	8005488 <_dtoa_r+0x920>
 80056d6:	4656      	mov	r6, sl
 80056d8:	9802      	ldr	r0, [sp, #8]
 80056da:	4621      	mov	r1, r4
 80056dc:	f7ff f9bb 	bl	8004a56 <quorem>
 80056e0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80056e4:	f806 3b01 	strb.w	r3, [r6], #1
 80056e8:	eba6 020a 	sub.w	r2, r6, sl
 80056ec:	4593      	cmp	fp, r2
 80056ee:	ddb4      	ble.n	800565a <_dtoa_r+0xaf2>
 80056f0:	9902      	ldr	r1, [sp, #8]
 80056f2:	2300      	movs	r3, #0
 80056f4:	220a      	movs	r2, #10
 80056f6:	4648      	mov	r0, r9
 80056f8:	f000 f968 	bl	80059cc <__multadd>
 80056fc:	9002      	str	r0, [sp, #8]
 80056fe:	e7eb      	b.n	80056d8 <_dtoa_r+0xb70>
 8005700:	08006ddc 	.word	0x08006ddc
 8005704:	08006d60 	.word	0x08006d60

08005708 <_free_r>:
 8005708:	b538      	push	{r3, r4, r5, lr}
 800570a:	4605      	mov	r5, r0
 800570c:	2900      	cmp	r1, #0
 800570e:	d041      	beq.n	8005794 <_free_r+0x8c>
 8005710:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005714:	1f0c      	subs	r4, r1, #4
 8005716:	2b00      	cmp	r3, #0
 8005718:	bfb8      	it	lt
 800571a:	18e4      	addlt	r4, r4, r3
 800571c:	f000 f8e8 	bl	80058f0 <__malloc_lock>
 8005720:	4a1d      	ldr	r2, [pc, #116]	@ (8005798 <_free_r+0x90>)
 8005722:	6813      	ldr	r3, [r2, #0]
 8005724:	b933      	cbnz	r3, 8005734 <_free_r+0x2c>
 8005726:	6063      	str	r3, [r4, #4]
 8005728:	6014      	str	r4, [r2, #0]
 800572a:	4628      	mov	r0, r5
 800572c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005730:	f000 b8e4 	b.w	80058fc <__malloc_unlock>
 8005734:	42a3      	cmp	r3, r4
 8005736:	d908      	bls.n	800574a <_free_r+0x42>
 8005738:	6820      	ldr	r0, [r4, #0]
 800573a:	1821      	adds	r1, r4, r0
 800573c:	428b      	cmp	r3, r1
 800573e:	bf01      	itttt	eq
 8005740:	6819      	ldreq	r1, [r3, #0]
 8005742:	685b      	ldreq	r3, [r3, #4]
 8005744:	1809      	addeq	r1, r1, r0
 8005746:	6021      	streq	r1, [r4, #0]
 8005748:	e7ed      	b.n	8005726 <_free_r+0x1e>
 800574a:	461a      	mov	r2, r3
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	b10b      	cbz	r3, 8005754 <_free_r+0x4c>
 8005750:	42a3      	cmp	r3, r4
 8005752:	d9fa      	bls.n	800574a <_free_r+0x42>
 8005754:	6811      	ldr	r1, [r2, #0]
 8005756:	1850      	adds	r0, r2, r1
 8005758:	42a0      	cmp	r0, r4
 800575a:	d10b      	bne.n	8005774 <_free_r+0x6c>
 800575c:	6820      	ldr	r0, [r4, #0]
 800575e:	4401      	add	r1, r0
 8005760:	1850      	adds	r0, r2, r1
 8005762:	4283      	cmp	r3, r0
 8005764:	6011      	str	r1, [r2, #0]
 8005766:	d1e0      	bne.n	800572a <_free_r+0x22>
 8005768:	6818      	ldr	r0, [r3, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	6053      	str	r3, [r2, #4]
 800576e:	4408      	add	r0, r1
 8005770:	6010      	str	r0, [r2, #0]
 8005772:	e7da      	b.n	800572a <_free_r+0x22>
 8005774:	d902      	bls.n	800577c <_free_r+0x74>
 8005776:	230c      	movs	r3, #12
 8005778:	602b      	str	r3, [r5, #0]
 800577a:	e7d6      	b.n	800572a <_free_r+0x22>
 800577c:	6820      	ldr	r0, [r4, #0]
 800577e:	1821      	adds	r1, r4, r0
 8005780:	428b      	cmp	r3, r1
 8005782:	bf04      	itt	eq
 8005784:	6819      	ldreq	r1, [r3, #0]
 8005786:	685b      	ldreq	r3, [r3, #4]
 8005788:	6063      	str	r3, [r4, #4]
 800578a:	bf04      	itt	eq
 800578c:	1809      	addeq	r1, r1, r0
 800578e:	6021      	streq	r1, [r4, #0]
 8005790:	6054      	str	r4, [r2, #4]
 8005792:	e7ca      	b.n	800572a <_free_r+0x22>
 8005794:	bd38      	pop	{r3, r4, r5, pc}
 8005796:	bf00      	nop
 8005798:	200003b8 	.word	0x200003b8

0800579c <malloc>:
 800579c:	4b02      	ldr	r3, [pc, #8]	@ (80057a8 <malloc+0xc>)
 800579e:	4601      	mov	r1, r0
 80057a0:	6818      	ldr	r0, [r3, #0]
 80057a2:	f000 b825 	b.w	80057f0 <_malloc_r>
 80057a6:	bf00      	nop
 80057a8:	20000018 	.word	0x20000018

080057ac <sbrk_aligned>:
 80057ac:	b570      	push	{r4, r5, r6, lr}
 80057ae:	4e0f      	ldr	r6, [pc, #60]	@ (80057ec <sbrk_aligned+0x40>)
 80057b0:	460c      	mov	r4, r1
 80057b2:	6831      	ldr	r1, [r6, #0]
 80057b4:	4605      	mov	r5, r0
 80057b6:	b911      	cbnz	r1, 80057be <sbrk_aligned+0x12>
 80057b8:	f000 fe92 	bl	80064e0 <_sbrk_r>
 80057bc:	6030      	str	r0, [r6, #0]
 80057be:	4621      	mov	r1, r4
 80057c0:	4628      	mov	r0, r5
 80057c2:	f000 fe8d 	bl	80064e0 <_sbrk_r>
 80057c6:	1c43      	adds	r3, r0, #1
 80057c8:	d103      	bne.n	80057d2 <sbrk_aligned+0x26>
 80057ca:	f04f 34ff 	mov.w	r4, #4294967295
 80057ce:	4620      	mov	r0, r4
 80057d0:	bd70      	pop	{r4, r5, r6, pc}
 80057d2:	1cc4      	adds	r4, r0, #3
 80057d4:	f024 0403 	bic.w	r4, r4, #3
 80057d8:	42a0      	cmp	r0, r4
 80057da:	d0f8      	beq.n	80057ce <sbrk_aligned+0x22>
 80057dc:	1a21      	subs	r1, r4, r0
 80057de:	4628      	mov	r0, r5
 80057e0:	f000 fe7e 	bl	80064e0 <_sbrk_r>
 80057e4:	3001      	adds	r0, #1
 80057e6:	d1f2      	bne.n	80057ce <sbrk_aligned+0x22>
 80057e8:	e7ef      	b.n	80057ca <sbrk_aligned+0x1e>
 80057ea:	bf00      	nop
 80057ec:	200003b4 	.word	0x200003b4

080057f0 <_malloc_r>:
 80057f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057f4:	1ccd      	adds	r5, r1, #3
 80057f6:	f025 0503 	bic.w	r5, r5, #3
 80057fa:	3508      	adds	r5, #8
 80057fc:	2d0c      	cmp	r5, #12
 80057fe:	bf38      	it	cc
 8005800:	250c      	movcc	r5, #12
 8005802:	2d00      	cmp	r5, #0
 8005804:	4606      	mov	r6, r0
 8005806:	db01      	blt.n	800580c <_malloc_r+0x1c>
 8005808:	42a9      	cmp	r1, r5
 800580a:	d904      	bls.n	8005816 <_malloc_r+0x26>
 800580c:	230c      	movs	r3, #12
 800580e:	6033      	str	r3, [r6, #0]
 8005810:	2000      	movs	r0, #0
 8005812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005816:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80058ec <_malloc_r+0xfc>
 800581a:	f000 f869 	bl	80058f0 <__malloc_lock>
 800581e:	f8d8 3000 	ldr.w	r3, [r8]
 8005822:	461c      	mov	r4, r3
 8005824:	bb44      	cbnz	r4, 8005878 <_malloc_r+0x88>
 8005826:	4629      	mov	r1, r5
 8005828:	4630      	mov	r0, r6
 800582a:	f7ff ffbf 	bl	80057ac <sbrk_aligned>
 800582e:	1c43      	adds	r3, r0, #1
 8005830:	4604      	mov	r4, r0
 8005832:	d158      	bne.n	80058e6 <_malloc_r+0xf6>
 8005834:	f8d8 4000 	ldr.w	r4, [r8]
 8005838:	4627      	mov	r7, r4
 800583a:	2f00      	cmp	r7, #0
 800583c:	d143      	bne.n	80058c6 <_malloc_r+0xd6>
 800583e:	2c00      	cmp	r4, #0
 8005840:	d04b      	beq.n	80058da <_malloc_r+0xea>
 8005842:	6823      	ldr	r3, [r4, #0]
 8005844:	4639      	mov	r1, r7
 8005846:	4630      	mov	r0, r6
 8005848:	eb04 0903 	add.w	r9, r4, r3
 800584c:	f000 fe48 	bl	80064e0 <_sbrk_r>
 8005850:	4581      	cmp	r9, r0
 8005852:	d142      	bne.n	80058da <_malloc_r+0xea>
 8005854:	6821      	ldr	r1, [r4, #0]
 8005856:	1a6d      	subs	r5, r5, r1
 8005858:	4629      	mov	r1, r5
 800585a:	4630      	mov	r0, r6
 800585c:	f7ff ffa6 	bl	80057ac <sbrk_aligned>
 8005860:	3001      	adds	r0, #1
 8005862:	d03a      	beq.n	80058da <_malloc_r+0xea>
 8005864:	6823      	ldr	r3, [r4, #0]
 8005866:	442b      	add	r3, r5
 8005868:	6023      	str	r3, [r4, #0]
 800586a:	f8d8 3000 	ldr.w	r3, [r8]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	bb62      	cbnz	r2, 80058cc <_malloc_r+0xdc>
 8005872:	f8c8 7000 	str.w	r7, [r8]
 8005876:	e00f      	b.n	8005898 <_malloc_r+0xa8>
 8005878:	6822      	ldr	r2, [r4, #0]
 800587a:	1b52      	subs	r2, r2, r5
 800587c:	d420      	bmi.n	80058c0 <_malloc_r+0xd0>
 800587e:	2a0b      	cmp	r2, #11
 8005880:	d917      	bls.n	80058b2 <_malloc_r+0xc2>
 8005882:	1961      	adds	r1, r4, r5
 8005884:	42a3      	cmp	r3, r4
 8005886:	6025      	str	r5, [r4, #0]
 8005888:	bf18      	it	ne
 800588a:	6059      	strne	r1, [r3, #4]
 800588c:	6863      	ldr	r3, [r4, #4]
 800588e:	bf08      	it	eq
 8005890:	f8c8 1000 	streq.w	r1, [r8]
 8005894:	5162      	str	r2, [r4, r5]
 8005896:	604b      	str	r3, [r1, #4]
 8005898:	4630      	mov	r0, r6
 800589a:	f000 f82f 	bl	80058fc <__malloc_unlock>
 800589e:	f104 000b 	add.w	r0, r4, #11
 80058a2:	1d23      	adds	r3, r4, #4
 80058a4:	f020 0007 	bic.w	r0, r0, #7
 80058a8:	1ac2      	subs	r2, r0, r3
 80058aa:	bf1c      	itt	ne
 80058ac:	1a1b      	subne	r3, r3, r0
 80058ae:	50a3      	strne	r3, [r4, r2]
 80058b0:	e7af      	b.n	8005812 <_malloc_r+0x22>
 80058b2:	6862      	ldr	r2, [r4, #4]
 80058b4:	42a3      	cmp	r3, r4
 80058b6:	bf0c      	ite	eq
 80058b8:	f8c8 2000 	streq.w	r2, [r8]
 80058bc:	605a      	strne	r2, [r3, #4]
 80058be:	e7eb      	b.n	8005898 <_malloc_r+0xa8>
 80058c0:	4623      	mov	r3, r4
 80058c2:	6864      	ldr	r4, [r4, #4]
 80058c4:	e7ae      	b.n	8005824 <_malloc_r+0x34>
 80058c6:	463c      	mov	r4, r7
 80058c8:	687f      	ldr	r7, [r7, #4]
 80058ca:	e7b6      	b.n	800583a <_malloc_r+0x4a>
 80058cc:	461a      	mov	r2, r3
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	42a3      	cmp	r3, r4
 80058d2:	d1fb      	bne.n	80058cc <_malloc_r+0xdc>
 80058d4:	2300      	movs	r3, #0
 80058d6:	6053      	str	r3, [r2, #4]
 80058d8:	e7de      	b.n	8005898 <_malloc_r+0xa8>
 80058da:	230c      	movs	r3, #12
 80058dc:	6033      	str	r3, [r6, #0]
 80058de:	4630      	mov	r0, r6
 80058e0:	f000 f80c 	bl	80058fc <__malloc_unlock>
 80058e4:	e794      	b.n	8005810 <_malloc_r+0x20>
 80058e6:	6005      	str	r5, [r0, #0]
 80058e8:	e7d6      	b.n	8005898 <_malloc_r+0xa8>
 80058ea:	bf00      	nop
 80058ec:	200003b8 	.word	0x200003b8

080058f0 <__malloc_lock>:
 80058f0:	4801      	ldr	r0, [pc, #4]	@ (80058f8 <__malloc_lock+0x8>)
 80058f2:	f7ff b8ae 	b.w	8004a52 <__retarget_lock_acquire_recursive>
 80058f6:	bf00      	nop
 80058f8:	200003b0 	.word	0x200003b0

080058fc <__malloc_unlock>:
 80058fc:	4801      	ldr	r0, [pc, #4]	@ (8005904 <__malloc_unlock+0x8>)
 80058fe:	f7ff b8a9 	b.w	8004a54 <__retarget_lock_release_recursive>
 8005902:	bf00      	nop
 8005904:	200003b0 	.word	0x200003b0

08005908 <_Balloc>:
 8005908:	b570      	push	{r4, r5, r6, lr}
 800590a:	69c6      	ldr	r6, [r0, #28]
 800590c:	4604      	mov	r4, r0
 800590e:	460d      	mov	r5, r1
 8005910:	b976      	cbnz	r6, 8005930 <_Balloc+0x28>
 8005912:	2010      	movs	r0, #16
 8005914:	f7ff ff42 	bl	800579c <malloc>
 8005918:	4602      	mov	r2, r0
 800591a:	61e0      	str	r0, [r4, #28]
 800591c:	b920      	cbnz	r0, 8005928 <_Balloc+0x20>
 800591e:	4b18      	ldr	r3, [pc, #96]	@ (8005980 <_Balloc+0x78>)
 8005920:	4818      	ldr	r0, [pc, #96]	@ (8005984 <_Balloc+0x7c>)
 8005922:	216b      	movs	r1, #107	@ 0x6b
 8005924:	f000 fdfa 	bl	800651c <__assert_func>
 8005928:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800592c:	6006      	str	r6, [r0, #0]
 800592e:	60c6      	str	r6, [r0, #12]
 8005930:	69e6      	ldr	r6, [r4, #28]
 8005932:	68f3      	ldr	r3, [r6, #12]
 8005934:	b183      	cbz	r3, 8005958 <_Balloc+0x50>
 8005936:	69e3      	ldr	r3, [r4, #28]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800593e:	b9b8      	cbnz	r0, 8005970 <_Balloc+0x68>
 8005940:	2101      	movs	r1, #1
 8005942:	fa01 f605 	lsl.w	r6, r1, r5
 8005946:	1d72      	adds	r2, r6, #5
 8005948:	0092      	lsls	r2, r2, #2
 800594a:	4620      	mov	r0, r4
 800594c:	f000 fe04 	bl	8006558 <_calloc_r>
 8005950:	b160      	cbz	r0, 800596c <_Balloc+0x64>
 8005952:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005956:	e00e      	b.n	8005976 <_Balloc+0x6e>
 8005958:	2221      	movs	r2, #33	@ 0x21
 800595a:	2104      	movs	r1, #4
 800595c:	4620      	mov	r0, r4
 800595e:	f000 fdfb 	bl	8006558 <_calloc_r>
 8005962:	69e3      	ldr	r3, [r4, #28]
 8005964:	60f0      	str	r0, [r6, #12]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1e4      	bne.n	8005936 <_Balloc+0x2e>
 800596c:	2000      	movs	r0, #0
 800596e:	bd70      	pop	{r4, r5, r6, pc}
 8005970:	6802      	ldr	r2, [r0, #0]
 8005972:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005976:	2300      	movs	r3, #0
 8005978:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800597c:	e7f7      	b.n	800596e <_Balloc+0x66>
 800597e:	bf00      	nop
 8005980:	08006d6d 	.word	0x08006d6d
 8005984:	08006ded 	.word	0x08006ded

08005988 <_Bfree>:
 8005988:	b570      	push	{r4, r5, r6, lr}
 800598a:	69c6      	ldr	r6, [r0, #28]
 800598c:	4605      	mov	r5, r0
 800598e:	460c      	mov	r4, r1
 8005990:	b976      	cbnz	r6, 80059b0 <_Bfree+0x28>
 8005992:	2010      	movs	r0, #16
 8005994:	f7ff ff02 	bl	800579c <malloc>
 8005998:	4602      	mov	r2, r0
 800599a:	61e8      	str	r0, [r5, #28]
 800599c:	b920      	cbnz	r0, 80059a8 <_Bfree+0x20>
 800599e:	4b09      	ldr	r3, [pc, #36]	@ (80059c4 <_Bfree+0x3c>)
 80059a0:	4809      	ldr	r0, [pc, #36]	@ (80059c8 <_Bfree+0x40>)
 80059a2:	218f      	movs	r1, #143	@ 0x8f
 80059a4:	f000 fdba 	bl	800651c <__assert_func>
 80059a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80059ac:	6006      	str	r6, [r0, #0]
 80059ae:	60c6      	str	r6, [r0, #12]
 80059b0:	b13c      	cbz	r4, 80059c2 <_Bfree+0x3a>
 80059b2:	69eb      	ldr	r3, [r5, #28]
 80059b4:	6862      	ldr	r2, [r4, #4]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80059bc:	6021      	str	r1, [r4, #0]
 80059be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80059c2:	bd70      	pop	{r4, r5, r6, pc}
 80059c4:	08006d6d 	.word	0x08006d6d
 80059c8:	08006ded 	.word	0x08006ded

080059cc <__multadd>:
 80059cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059d0:	690d      	ldr	r5, [r1, #16]
 80059d2:	4607      	mov	r7, r0
 80059d4:	460c      	mov	r4, r1
 80059d6:	461e      	mov	r6, r3
 80059d8:	f101 0c14 	add.w	ip, r1, #20
 80059dc:	2000      	movs	r0, #0
 80059de:	f8dc 3000 	ldr.w	r3, [ip]
 80059e2:	b299      	uxth	r1, r3
 80059e4:	fb02 6101 	mla	r1, r2, r1, r6
 80059e8:	0c1e      	lsrs	r6, r3, #16
 80059ea:	0c0b      	lsrs	r3, r1, #16
 80059ec:	fb02 3306 	mla	r3, r2, r6, r3
 80059f0:	b289      	uxth	r1, r1
 80059f2:	3001      	adds	r0, #1
 80059f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80059f8:	4285      	cmp	r5, r0
 80059fa:	f84c 1b04 	str.w	r1, [ip], #4
 80059fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005a02:	dcec      	bgt.n	80059de <__multadd+0x12>
 8005a04:	b30e      	cbz	r6, 8005a4a <__multadd+0x7e>
 8005a06:	68a3      	ldr	r3, [r4, #8]
 8005a08:	42ab      	cmp	r3, r5
 8005a0a:	dc19      	bgt.n	8005a40 <__multadd+0x74>
 8005a0c:	6861      	ldr	r1, [r4, #4]
 8005a0e:	4638      	mov	r0, r7
 8005a10:	3101      	adds	r1, #1
 8005a12:	f7ff ff79 	bl	8005908 <_Balloc>
 8005a16:	4680      	mov	r8, r0
 8005a18:	b928      	cbnz	r0, 8005a26 <__multadd+0x5a>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8005a50 <__multadd+0x84>)
 8005a1e:	480d      	ldr	r0, [pc, #52]	@ (8005a54 <__multadd+0x88>)
 8005a20:	21ba      	movs	r1, #186	@ 0xba
 8005a22:	f000 fd7b 	bl	800651c <__assert_func>
 8005a26:	6922      	ldr	r2, [r4, #16]
 8005a28:	3202      	adds	r2, #2
 8005a2a:	f104 010c 	add.w	r1, r4, #12
 8005a2e:	0092      	lsls	r2, r2, #2
 8005a30:	300c      	adds	r0, #12
 8005a32:	f000 fd65 	bl	8006500 <memcpy>
 8005a36:	4621      	mov	r1, r4
 8005a38:	4638      	mov	r0, r7
 8005a3a:	f7ff ffa5 	bl	8005988 <_Bfree>
 8005a3e:	4644      	mov	r4, r8
 8005a40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005a44:	3501      	adds	r5, #1
 8005a46:	615e      	str	r6, [r3, #20]
 8005a48:	6125      	str	r5, [r4, #16]
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a50:	08006ddc 	.word	0x08006ddc
 8005a54:	08006ded 	.word	0x08006ded

08005a58 <__hi0bits>:
 8005a58:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	bf36      	itet	cc
 8005a60:	0403      	lslcc	r3, r0, #16
 8005a62:	2000      	movcs	r0, #0
 8005a64:	2010      	movcc	r0, #16
 8005a66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a6a:	bf3c      	itt	cc
 8005a6c:	021b      	lslcc	r3, r3, #8
 8005a6e:	3008      	addcc	r0, #8
 8005a70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a74:	bf3c      	itt	cc
 8005a76:	011b      	lslcc	r3, r3, #4
 8005a78:	3004      	addcc	r0, #4
 8005a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a7e:	bf3c      	itt	cc
 8005a80:	009b      	lslcc	r3, r3, #2
 8005a82:	3002      	addcc	r0, #2
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	db05      	blt.n	8005a94 <__hi0bits+0x3c>
 8005a88:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005a8c:	f100 0001 	add.w	r0, r0, #1
 8005a90:	bf08      	it	eq
 8005a92:	2020      	moveq	r0, #32
 8005a94:	4770      	bx	lr

08005a96 <__lo0bits>:
 8005a96:	6803      	ldr	r3, [r0, #0]
 8005a98:	4602      	mov	r2, r0
 8005a9a:	f013 0007 	ands.w	r0, r3, #7
 8005a9e:	d00b      	beq.n	8005ab8 <__lo0bits+0x22>
 8005aa0:	07d9      	lsls	r1, r3, #31
 8005aa2:	d421      	bmi.n	8005ae8 <__lo0bits+0x52>
 8005aa4:	0798      	lsls	r0, r3, #30
 8005aa6:	bf49      	itett	mi
 8005aa8:	085b      	lsrmi	r3, r3, #1
 8005aaa:	089b      	lsrpl	r3, r3, #2
 8005aac:	2001      	movmi	r0, #1
 8005aae:	6013      	strmi	r3, [r2, #0]
 8005ab0:	bf5c      	itt	pl
 8005ab2:	6013      	strpl	r3, [r2, #0]
 8005ab4:	2002      	movpl	r0, #2
 8005ab6:	4770      	bx	lr
 8005ab8:	b299      	uxth	r1, r3
 8005aba:	b909      	cbnz	r1, 8005ac0 <__lo0bits+0x2a>
 8005abc:	0c1b      	lsrs	r3, r3, #16
 8005abe:	2010      	movs	r0, #16
 8005ac0:	b2d9      	uxtb	r1, r3
 8005ac2:	b909      	cbnz	r1, 8005ac8 <__lo0bits+0x32>
 8005ac4:	3008      	adds	r0, #8
 8005ac6:	0a1b      	lsrs	r3, r3, #8
 8005ac8:	0719      	lsls	r1, r3, #28
 8005aca:	bf04      	itt	eq
 8005acc:	091b      	lsreq	r3, r3, #4
 8005ace:	3004      	addeq	r0, #4
 8005ad0:	0799      	lsls	r1, r3, #30
 8005ad2:	bf04      	itt	eq
 8005ad4:	089b      	lsreq	r3, r3, #2
 8005ad6:	3002      	addeq	r0, #2
 8005ad8:	07d9      	lsls	r1, r3, #31
 8005ada:	d403      	bmi.n	8005ae4 <__lo0bits+0x4e>
 8005adc:	085b      	lsrs	r3, r3, #1
 8005ade:	f100 0001 	add.w	r0, r0, #1
 8005ae2:	d003      	beq.n	8005aec <__lo0bits+0x56>
 8005ae4:	6013      	str	r3, [r2, #0]
 8005ae6:	4770      	bx	lr
 8005ae8:	2000      	movs	r0, #0
 8005aea:	4770      	bx	lr
 8005aec:	2020      	movs	r0, #32
 8005aee:	4770      	bx	lr

08005af0 <__i2b>:
 8005af0:	b510      	push	{r4, lr}
 8005af2:	460c      	mov	r4, r1
 8005af4:	2101      	movs	r1, #1
 8005af6:	f7ff ff07 	bl	8005908 <_Balloc>
 8005afa:	4602      	mov	r2, r0
 8005afc:	b928      	cbnz	r0, 8005b0a <__i2b+0x1a>
 8005afe:	4b05      	ldr	r3, [pc, #20]	@ (8005b14 <__i2b+0x24>)
 8005b00:	4805      	ldr	r0, [pc, #20]	@ (8005b18 <__i2b+0x28>)
 8005b02:	f240 1145 	movw	r1, #325	@ 0x145
 8005b06:	f000 fd09 	bl	800651c <__assert_func>
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	6144      	str	r4, [r0, #20]
 8005b0e:	6103      	str	r3, [r0, #16]
 8005b10:	bd10      	pop	{r4, pc}
 8005b12:	bf00      	nop
 8005b14:	08006ddc 	.word	0x08006ddc
 8005b18:	08006ded 	.word	0x08006ded

08005b1c <__multiply>:
 8005b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b20:	4617      	mov	r7, r2
 8005b22:	690a      	ldr	r2, [r1, #16]
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	bfa8      	it	ge
 8005b2a:	463b      	movge	r3, r7
 8005b2c:	4689      	mov	r9, r1
 8005b2e:	bfa4      	itt	ge
 8005b30:	460f      	movge	r7, r1
 8005b32:	4699      	movge	r9, r3
 8005b34:	693d      	ldr	r5, [r7, #16]
 8005b36:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	6879      	ldr	r1, [r7, #4]
 8005b3e:	eb05 060a 	add.w	r6, r5, sl
 8005b42:	42b3      	cmp	r3, r6
 8005b44:	b085      	sub	sp, #20
 8005b46:	bfb8      	it	lt
 8005b48:	3101      	addlt	r1, #1
 8005b4a:	f7ff fedd 	bl	8005908 <_Balloc>
 8005b4e:	b930      	cbnz	r0, 8005b5e <__multiply+0x42>
 8005b50:	4602      	mov	r2, r0
 8005b52:	4b41      	ldr	r3, [pc, #260]	@ (8005c58 <__multiply+0x13c>)
 8005b54:	4841      	ldr	r0, [pc, #260]	@ (8005c5c <__multiply+0x140>)
 8005b56:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005b5a:	f000 fcdf 	bl	800651c <__assert_func>
 8005b5e:	f100 0414 	add.w	r4, r0, #20
 8005b62:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8005b66:	4623      	mov	r3, r4
 8005b68:	2200      	movs	r2, #0
 8005b6a:	4573      	cmp	r3, lr
 8005b6c:	d320      	bcc.n	8005bb0 <__multiply+0x94>
 8005b6e:	f107 0814 	add.w	r8, r7, #20
 8005b72:	f109 0114 	add.w	r1, r9, #20
 8005b76:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8005b7a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8005b7e:	9302      	str	r3, [sp, #8]
 8005b80:	1beb      	subs	r3, r5, r7
 8005b82:	3b15      	subs	r3, #21
 8005b84:	f023 0303 	bic.w	r3, r3, #3
 8005b88:	3304      	adds	r3, #4
 8005b8a:	3715      	adds	r7, #21
 8005b8c:	42bd      	cmp	r5, r7
 8005b8e:	bf38      	it	cc
 8005b90:	2304      	movcc	r3, #4
 8005b92:	9301      	str	r3, [sp, #4]
 8005b94:	9b02      	ldr	r3, [sp, #8]
 8005b96:	9103      	str	r1, [sp, #12]
 8005b98:	428b      	cmp	r3, r1
 8005b9a:	d80c      	bhi.n	8005bb6 <__multiply+0x9a>
 8005b9c:	2e00      	cmp	r6, #0
 8005b9e:	dd03      	ble.n	8005ba8 <__multiply+0x8c>
 8005ba0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d055      	beq.n	8005c54 <__multiply+0x138>
 8005ba8:	6106      	str	r6, [r0, #16]
 8005baa:	b005      	add	sp, #20
 8005bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bb0:	f843 2b04 	str.w	r2, [r3], #4
 8005bb4:	e7d9      	b.n	8005b6a <__multiply+0x4e>
 8005bb6:	f8b1 a000 	ldrh.w	sl, [r1]
 8005bba:	f1ba 0f00 	cmp.w	sl, #0
 8005bbe:	d01f      	beq.n	8005c00 <__multiply+0xe4>
 8005bc0:	46c4      	mov	ip, r8
 8005bc2:	46a1      	mov	r9, r4
 8005bc4:	2700      	movs	r7, #0
 8005bc6:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005bca:	f8d9 3000 	ldr.w	r3, [r9]
 8005bce:	fa1f fb82 	uxth.w	fp, r2
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	fb0a 330b 	mla	r3, sl, fp, r3
 8005bd8:	443b      	add	r3, r7
 8005bda:	f8d9 7000 	ldr.w	r7, [r9]
 8005bde:	0c12      	lsrs	r2, r2, #16
 8005be0:	0c3f      	lsrs	r7, r7, #16
 8005be2:	fb0a 7202 	mla	r2, sl, r2, r7
 8005be6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bf0:	4565      	cmp	r5, ip
 8005bf2:	f849 3b04 	str.w	r3, [r9], #4
 8005bf6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8005bfa:	d8e4      	bhi.n	8005bc6 <__multiply+0xaa>
 8005bfc:	9b01      	ldr	r3, [sp, #4]
 8005bfe:	50e7      	str	r7, [r4, r3]
 8005c00:	9b03      	ldr	r3, [sp, #12]
 8005c02:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005c06:	3104      	adds	r1, #4
 8005c08:	f1b9 0f00 	cmp.w	r9, #0
 8005c0c:	d020      	beq.n	8005c50 <__multiply+0x134>
 8005c0e:	6823      	ldr	r3, [r4, #0]
 8005c10:	4647      	mov	r7, r8
 8005c12:	46a4      	mov	ip, r4
 8005c14:	f04f 0a00 	mov.w	sl, #0
 8005c18:	f8b7 b000 	ldrh.w	fp, [r7]
 8005c1c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8005c20:	fb09 220b 	mla	r2, r9, fp, r2
 8005c24:	4452      	add	r2, sl
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c2c:	f84c 3b04 	str.w	r3, [ip], #4
 8005c30:	f857 3b04 	ldr.w	r3, [r7], #4
 8005c34:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005c38:	f8bc 3000 	ldrh.w	r3, [ip]
 8005c3c:	fb09 330a 	mla	r3, r9, sl, r3
 8005c40:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005c44:	42bd      	cmp	r5, r7
 8005c46:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005c4a:	d8e5      	bhi.n	8005c18 <__multiply+0xfc>
 8005c4c:	9a01      	ldr	r2, [sp, #4]
 8005c4e:	50a3      	str	r3, [r4, r2]
 8005c50:	3404      	adds	r4, #4
 8005c52:	e79f      	b.n	8005b94 <__multiply+0x78>
 8005c54:	3e01      	subs	r6, #1
 8005c56:	e7a1      	b.n	8005b9c <__multiply+0x80>
 8005c58:	08006ddc 	.word	0x08006ddc
 8005c5c:	08006ded 	.word	0x08006ded

08005c60 <__pow5mult>:
 8005c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c64:	4615      	mov	r5, r2
 8005c66:	f012 0203 	ands.w	r2, r2, #3
 8005c6a:	4607      	mov	r7, r0
 8005c6c:	460e      	mov	r6, r1
 8005c6e:	d007      	beq.n	8005c80 <__pow5mult+0x20>
 8005c70:	4c25      	ldr	r4, [pc, #148]	@ (8005d08 <__pow5mult+0xa8>)
 8005c72:	3a01      	subs	r2, #1
 8005c74:	2300      	movs	r3, #0
 8005c76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005c7a:	f7ff fea7 	bl	80059cc <__multadd>
 8005c7e:	4606      	mov	r6, r0
 8005c80:	10ad      	asrs	r5, r5, #2
 8005c82:	d03d      	beq.n	8005d00 <__pow5mult+0xa0>
 8005c84:	69fc      	ldr	r4, [r7, #28]
 8005c86:	b97c      	cbnz	r4, 8005ca8 <__pow5mult+0x48>
 8005c88:	2010      	movs	r0, #16
 8005c8a:	f7ff fd87 	bl	800579c <malloc>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	61f8      	str	r0, [r7, #28]
 8005c92:	b928      	cbnz	r0, 8005ca0 <__pow5mult+0x40>
 8005c94:	4b1d      	ldr	r3, [pc, #116]	@ (8005d0c <__pow5mult+0xac>)
 8005c96:	481e      	ldr	r0, [pc, #120]	@ (8005d10 <__pow5mult+0xb0>)
 8005c98:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005c9c:	f000 fc3e 	bl	800651c <__assert_func>
 8005ca0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ca4:	6004      	str	r4, [r0, #0]
 8005ca6:	60c4      	str	r4, [r0, #12]
 8005ca8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005cac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005cb0:	b94c      	cbnz	r4, 8005cc6 <__pow5mult+0x66>
 8005cb2:	f240 2171 	movw	r1, #625	@ 0x271
 8005cb6:	4638      	mov	r0, r7
 8005cb8:	f7ff ff1a 	bl	8005af0 <__i2b>
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	f8c8 0008 	str.w	r0, [r8, #8]
 8005cc2:	4604      	mov	r4, r0
 8005cc4:	6003      	str	r3, [r0, #0]
 8005cc6:	f04f 0900 	mov.w	r9, #0
 8005cca:	07eb      	lsls	r3, r5, #31
 8005ccc:	d50a      	bpl.n	8005ce4 <__pow5mult+0x84>
 8005cce:	4631      	mov	r1, r6
 8005cd0:	4622      	mov	r2, r4
 8005cd2:	4638      	mov	r0, r7
 8005cd4:	f7ff ff22 	bl	8005b1c <__multiply>
 8005cd8:	4631      	mov	r1, r6
 8005cda:	4680      	mov	r8, r0
 8005cdc:	4638      	mov	r0, r7
 8005cde:	f7ff fe53 	bl	8005988 <_Bfree>
 8005ce2:	4646      	mov	r6, r8
 8005ce4:	106d      	asrs	r5, r5, #1
 8005ce6:	d00b      	beq.n	8005d00 <__pow5mult+0xa0>
 8005ce8:	6820      	ldr	r0, [r4, #0]
 8005cea:	b938      	cbnz	r0, 8005cfc <__pow5mult+0x9c>
 8005cec:	4622      	mov	r2, r4
 8005cee:	4621      	mov	r1, r4
 8005cf0:	4638      	mov	r0, r7
 8005cf2:	f7ff ff13 	bl	8005b1c <__multiply>
 8005cf6:	6020      	str	r0, [r4, #0]
 8005cf8:	f8c0 9000 	str.w	r9, [r0]
 8005cfc:	4604      	mov	r4, r0
 8005cfe:	e7e4      	b.n	8005cca <__pow5mult+0x6a>
 8005d00:	4630      	mov	r0, r6
 8005d02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d06:	bf00      	nop
 8005d08:	08006eb8 	.word	0x08006eb8
 8005d0c:	08006d6d 	.word	0x08006d6d
 8005d10:	08006ded 	.word	0x08006ded

08005d14 <__lshift>:
 8005d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d18:	460c      	mov	r4, r1
 8005d1a:	6849      	ldr	r1, [r1, #4]
 8005d1c:	6923      	ldr	r3, [r4, #16]
 8005d1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005d22:	68a3      	ldr	r3, [r4, #8]
 8005d24:	4607      	mov	r7, r0
 8005d26:	4691      	mov	r9, r2
 8005d28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005d2c:	f108 0601 	add.w	r6, r8, #1
 8005d30:	42b3      	cmp	r3, r6
 8005d32:	db0b      	blt.n	8005d4c <__lshift+0x38>
 8005d34:	4638      	mov	r0, r7
 8005d36:	f7ff fde7 	bl	8005908 <_Balloc>
 8005d3a:	4605      	mov	r5, r0
 8005d3c:	b948      	cbnz	r0, 8005d52 <__lshift+0x3e>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	4b28      	ldr	r3, [pc, #160]	@ (8005de4 <__lshift+0xd0>)
 8005d42:	4829      	ldr	r0, [pc, #164]	@ (8005de8 <__lshift+0xd4>)
 8005d44:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005d48:	f000 fbe8 	bl	800651c <__assert_func>
 8005d4c:	3101      	adds	r1, #1
 8005d4e:	005b      	lsls	r3, r3, #1
 8005d50:	e7ee      	b.n	8005d30 <__lshift+0x1c>
 8005d52:	2300      	movs	r3, #0
 8005d54:	f100 0114 	add.w	r1, r0, #20
 8005d58:	f100 0210 	add.w	r2, r0, #16
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	4553      	cmp	r3, sl
 8005d60:	db33      	blt.n	8005dca <__lshift+0xb6>
 8005d62:	6920      	ldr	r0, [r4, #16]
 8005d64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005d68:	f104 0314 	add.w	r3, r4, #20
 8005d6c:	f019 091f 	ands.w	r9, r9, #31
 8005d70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005d74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005d78:	d02b      	beq.n	8005dd2 <__lshift+0xbe>
 8005d7a:	f1c9 0e20 	rsb	lr, r9, #32
 8005d7e:	468a      	mov	sl, r1
 8005d80:	2200      	movs	r2, #0
 8005d82:	6818      	ldr	r0, [r3, #0]
 8005d84:	fa00 f009 	lsl.w	r0, r0, r9
 8005d88:	4310      	orrs	r0, r2
 8005d8a:	f84a 0b04 	str.w	r0, [sl], #4
 8005d8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d92:	459c      	cmp	ip, r3
 8005d94:	fa22 f20e 	lsr.w	r2, r2, lr
 8005d98:	d8f3      	bhi.n	8005d82 <__lshift+0x6e>
 8005d9a:	ebac 0304 	sub.w	r3, ip, r4
 8005d9e:	3b15      	subs	r3, #21
 8005da0:	f023 0303 	bic.w	r3, r3, #3
 8005da4:	3304      	adds	r3, #4
 8005da6:	f104 0015 	add.w	r0, r4, #21
 8005daa:	4560      	cmp	r0, ip
 8005dac:	bf88      	it	hi
 8005dae:	2304      	movhi	r3, #4
 8005db0:	50ca      	str	r2, [r1, r3]
 8005db2:	b10a      	cbz	r2, 8005db8 <__lshift+0xa4>
 8005db4:	f108 0602 	add.w	r6, r8, #2
 8005db8:	3e01      	subs	r6, #1
 8005dba:	4638      	mov	r0, r7
 8005dbc:	612e      	str	r6, [r5, #16]
 8005dbe:	4621      	mov	r1, r4
 8005dc0:	f7ff fde2 	bl	8005988 <_Bfree>
 8005dc4:	4628      	mov	r0, r5
 8005dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dca:	f842 0f04 	str.w	r0, [r2, #4]!
 8005dce:	3301      	adds	r3, #1
 8005dd0:	e7c5      	b.n	8005d5e <__lshift+0x4a>
 8005dd2:	3904      	subs	r1, #4
 8005dd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dd8:	f841 2f04 	str.w	r2, [r1, #4]!
 8005ddc:	459c      	cmp	ip, r3
 8005dde:	d8f9      	bhi.n	8005dd4 <__lshift+0xc0>
 8005de0:	e7ea      	b.n	8005db8 <__lshift+0xa4>
 8005de2:	bf00      	nop
 8005de4:	08006ddc 	.word	0x08006ddc
 8005de8:	08006ded 	.word	0x08006ded

08005dec <__mcmp>:
 8005dec:	690a      	ldr	r2, [r1, #16]
 8005dee:	4603      	mov	r3, r0
 8005df0:	6900      	ldr	r0, [r0, #16]
 8005df2:	1a80      	subs	r0, r0, r2
 8005df4:	b530      	push	{r4, r5, lr}
 8005df6:	d10e      	bne.n	8005e16 <__mcmp+0x2a>
 8005df8:	3314      	adds	r3, #20
 8005dfa:	3114      	adds	r1, #20
 8005dfc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005e00:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005e04:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005e08:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005e0c:	4295      	cmp	r5, r2
 8005e0e:	d003      	beq.n	8005e18 <__mcmp+0x2c>
 8005e10:	d205      	bcs.n	8005e1e <__mcmp+0x32>
 8005e12:	f04f 30ff 	mov.w	r0, #4294967295
 8005e16:	bd30      	pop	{r4, r5, pc}
 8005e18:	42a3      	cmp	r3, r4
 8005e1a:	d3f3      	bcc.n	8005e04 <__mcmp+0x18>
 8005e1c:	e7fb      	b.n	8005e16 <__mcmp+0x2a>
 8005e1e:	2001      	movs	r0, #1
 8005e20:	e7f9      	b.n	8005e16 <__mcmp+0x2a>
	...

08005e24 <__mdiff>:
 8005e24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e28:	4689      	mov	r9, r1
 8005e2a:	4606      	mov	r6, r0
 8005e2c:	4611      	mov	r1, r2
 8005e2e:	4648      	mov	r0, r9
 8005e30:	4614      	mov	r4, r2
 8005e32:	f7ff ffdb 	bl	8005dec <__mcmp>
 8005e36:	1e05      	subs	r5, r0, #0
 8005e38:	d112      	bne.n	8005e60 <__mdiff+0x3c>
 8005e3a:	4629      	mov	r1, r5
 8005e3c:	4630      	mov	r0, r6
 8005e3e:	f7ff fd63 	bl	8005908 <_Balloc>
 8005e42:	4602      	mov	r2, r0
 8005e44:	b928      	cbnz	r0, 8005e52 <__mdiff+0x2e>
 8005e46:	4b3f      	ldr	r3, [pc, #252]	@ (8005f44 <__mdiff+0x120>)
 8005e48:	f240 2137 	movw	r1, #567	@ 0x237
 8005e4c:	483e      	ldr	r0, [pc, #248]	@ (8005f48 <__mdiff+0x124>)
 8005e4e:	f000 fb65 	bl	800651c <__assert_func>
 8005e52:	2301      	movs	r3, #1
 8005e54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005e58:	4610      	mov	r0, r2
 8005e5a:	b003      	add	sp, #12
 8005e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e60:	bfbc      	itt	lt
 8005e62:	464b      	movlt	r3, r9
 8005e64:	46a1      	movlt	r9, r4
 8005e66:	4630      	mov	r0, r6
 8005e68:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005e6c:	bfba      	itte	lt
 8005e6e:	461c      	movlt	r4, r3
 8005e70:	2501      	movlt	r5, #1
 8005e72:	2500      	movge	r5, #0
 8005e74:	f7ff fd48 	bl	8005908 <_Balloc>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	b918      	cbnz	r0, 8005e84 <__mdiff+0x60>
 8005e7c:	4b31      	ldr	r3, [pc, #196]	@ (8005f44 <__mdiff+0x120>)
 8005e7e:	f240 2145 	movw	r1, #581	@ 0x245
 8005e82:	e7e3      	b.n	8005e4c <__mdiff+0x28>
 8005e84:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005e88:	6926      	ldr	r6, [r4, #16]
 8005e8a:	60c5      	str	r5, [r0, #12]
 8005e8c:	f109 0310 	add.w	r3, r9, #16
 8005e90:	f109 0514 	add.w	r5, r9, #20
 8005e94:	f104 0e14 	add.w	lr, r4, #20
 8005e98:	f100 0b14 	add.w	fp, r0, #20
 8005e9c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005ea0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005ea4:	9301      	str	r3, [sp, #4]
 8005ea6:	46d9      	mov	r9, fp
 8005ea8:	f04f 0c00 	mov.w	ip, #0
 8005eac:	9b01      	ldr	r3, [sp, #4]
 8005eae:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005eb2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005eb6:	9301      	str	r3, [sp, #4]
 8005eb8:	fa1f f38a 	uxth.w	r3, sl
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	b283      	uxth	r3, r0
 8005ec0:	1acb      	subs	r3, r1, r3
 8005ec2:	0c00      	lsrs	r0, r0, #16
 8005ec4:	4463      	add	r3, ip
 8005ec6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005eca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005ed4:	4576      	cmp	r6, lr
 8005ed6:	f849 3b04 	str.w	r3, [r9], #4
 8005eda:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005ede:	d8e5      	bhi.n	8005eac <__mdiff+0x88>
 8005ee0:	1b33      	subs	r3, r6, r4
 8005ee2:	3b15      	subs	r3, #21
 8005ee4:	f023 0303 	bic.w	r3, r3, #3
 8005ee8:	3415      	adds	r4, #21
 8005eea:	3304      	adds	r3, #4
 8005eec:	42a6      	cmp	r6, r4
 8005eee:	bf38      	it	cc
 8005ef0:	2304      	movcc	r3, #4
 8005ef2:	441d      	add	r5, r3
 8005ef4:	445b      	add	r3, fp
 8005ef6:	461e      	mov	r6, r3
 8005ef8:	462c      	mov	r4, r5
 8005efa:	4544      	cmp	r4, r8
 8005efc:	d30e      	bcc.n	8005f1c <__mdiff+0xf8>
 8005efe:	f108 0103 	add.w	r1, r8, #3
 8005f02:	1b49      	subs	r1, r1, r5
 8005f04:	f021 0103 	bic.w	r1, r1, #3
 8005f08:	3d03      	subs	r5, #3
 8005f0a:	45a8      	cmp	r8, r5
 8005f0c:	bf38      	it	cc
 8005f0e:	2100      	movcc	r1, #0
 8005f10:	440b      	add	r3, r1
 8005f12:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005f16:	b191      	cbz	r1, 8005f3e <__mdiff+0x11a>
 8005f18:	6117      	str	r7, [r2, #16]
 8005f1a:	e79d      	b.n	8005e58 <__mdiff+0x34>
 8005f1c:	f854 1b04 	ldr.w	r1, [r4], #4
 8005f20:	46e6      	mov	lr, ip
 8005f22:	0c08      	lsrs	r0, r1, #16
 8005f24:	fa1c fc81 	uxtah	ip, ip, r1
 8005f28:	4471      	add	r1, lr
 8005f2a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005f2e:	b289      	uxth	r1, r1
 8005f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005f34:	f846 1b04 	str.w	r1, [r6], #4
 8005f38:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005f3c:	e7dd      	b.n	8005efa <__mdiff+0xd6>
 8005f3e:	3f01      	subs	r7, #1
 8005f40:	e7e7      	b.n	8005f12 <__mdiff+0xee>
 8005f42:	bf00      	nop
 8005f44:	08006ddc 	.word	0x08006ddc
 8005f48:	08006ded 	.word	0x08006ded

08005f4c <__d2b>:
 8005f4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005f50:	460f      	mov	r7, r1
 8005f52:	2101      	movs	r1, #1
 8005f54:	ec59 8b10 	vmov	r8, r9, d0
 8005f58:	4616      	mov	r6, r2
 8005f5a:	f7ff fcd5 	bl	8005908 <_Balloc>
 8005f5e:	4604      	mov	r4, r0
 8005f60:	b930      	cbnz	r0, 8005f70 <__d2b+0x24>
 8005f62:	4602      	mov	r2, r0
 8005f64:	4b23      	ldr	r3, [pc, #140]	@ (8005ff4 <__d2b+0xa8>)
 8005f66:	4824      	ldr	r0, [pc, #144]	@ (8005ff8 <__d2b+0xac>)
 8005f68:	f240 310f 	movw	r1, #783	@ 0x30f
 8005f6c:	f000 fad6 	bl	800651c <__assert_func>
 8005f70:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005f74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005f78:	b10d      	cbz	r5, 8005f7e <__d2b+0x32>
 8005f7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f7e:	9301      	str	r3, [sp, #4]
 8005f80:	f1b8 0300 	subs.w	r3, r8, #0
 8005f84:	d023      	beq.n	8005fce <__d2b+0x82>
 8005f86:	4668      	mov	r0, sp
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	f7ff fd84 	bl	8005a96 <__lo0bits>
 8005f8e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005f92:	b1d0      	cbz	r0, 8005fca <__d2b+0x7e>
 8005f94:	f1c0 0320 	rsb	r3, r0, #32
 8005f98:	fa02 f303 	lsl.w	r3, r2, r3
 8005f9c:	430b      	orrs	r3, r1
 8005f9e:	40c2      	lsrs	r2, r0
 8005fa0:	6163      	str	r3, [r4, #20]
 8005fa2:	9201      	str	r2, [sp, #4]
 8005fa4:	9b01      	ldr	r3, [sp, #4]
 8005fa6:	61a3      	str	r3, [r4, #24]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	bf0c      	ite	eq
 8005fac:	2201      	moveq	r2, #1
 8005fae:	2202      	movne	r2, #2
 8005fb0:	6122      	str	r2, [r4, #16]
 8005fb2:	b1a5      	cbz	r5, 8005fde <__d2b+0x92>
 8005fb4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005fb8:	4405      	add	r5, r0
 8005fba:	603d      	str	r5, [r7, #0]
 8005fbc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005fc0:	6030      	str	r0, [r6, #0]
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	b003      	add	sp, #12
 8005fc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005fca:	6161      	str	r1, [r4, #20]
 8005fcc:	e7ea      	b.n	8005fa4 <__d2b+0x58>
 8005fce:	a801      	add	r0, sp, #4
 8005fd0:	f7ff fd61 	bl	8005a96 <__lo0bits>
 8005fd4:	9b01      	ldr	r3, [sp, #4]
 8005fd6:	6163      	str	r3, [r4, #20]
 8005fd8:	3020      	adds	r0, #32
 8005fda:	2201      	movs	r2, #1
 8005fdc:	e7e8      	b.n	8005fb0 <__d2b+0x64>
 8005fde:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005fe2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005fe6:	6038      	str	r0, [r7, #0]
 8005fe8:	6918      	ldr	r0, [r3, #16]
 8005fea:	f7ff fd35 	bl	8005a58 <__hi0bits>
 8005fee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005ff2:	e7e5      	b.n	8005fc0 <__d2b+0x74>
 8005ff4:	08006ddc 	.word	0x08006ddc
 8005ff8:	08006ded 	.word	0x08006ded

08005ffc <__sfputc_r>:
 8005ffc:	6893      	ldr	r3, [r2, #8]
 8005ffe:	3b01      	subs	r3, #1
 8006000:	2b00      	cmp	r3, #0
 8006002:	b410      	push	{r4}
 8006004:	6093      	str	r3, [r2, #8]
 8006006:	da08      	bge.n	800601a <__sfputc_r+0x1e>
 8006008:	6994      	ldr	r4, [r2, #24]
 800600a:	42a3      	cmp	r3, r4
 800600c:	db01      	blt.n	8006012 <__sfputc_r+0x16>
 800600e:	290a      	cmp	r1, #10
 8006010:	d103      	bne.n	800601a <__sfputc_r+0x1e>
 8006012:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006016:	f7fe bc0a 	b.w	800482e <__swbuf_r>
 800601a:	6813      	ldr	r3, [r2, #0]
 800601c:	1c58      	adds	r0, r3, #1
 800601e:	6010      	str	r0, [r2, #0]
 8006020:	7019      	strb	r1, [r3, #0]
 8006022:	4608      	mov	r0, r1
 8006024:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006028:	4770      	bx	lr

0800602a <__sfputs_r>:
 800602a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800602c:	4606      	mov	r6, r0
 800602e:	460f      	mov	r7, r1
 8006030:	4614      	mov	r4, r2
 8006032:	18d5      	adds	r5, r2, r3
 8006034:	42ac      	cmp	r4, r5
 8006036:	d101      	bne.n	800603c <__sfputs_r+0x12>
 8006038:	2000      	movs	r0, #0
 800603a:	e007      	b.n	800604c <__sfputs_r+0x22>
 800603c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006040:	463a      	mov	r2, r7
 8006042:	4630      	mov	r0, r6
 8006044:	f7ff ffda 	bl	8005ffc <__sfputc_r>
 8006048:	1c43      	adds	r3, r0, #1
 800604a:	d1f3      	bne.n	8006034 <__sfputs_r+0xa>
 800604c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006050 <_vfiprintf_r>:
 8006050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006054:	460d      	mov	r5, r1
 8006056:	b09d      	sub	sp, #116	@ 0x74
 8006058:	4614      	mov	r4, r2
 800605a:	4698      	mov	r8, r3
 800605c:	4606      	mov	r6, r0
 800605e:	b118      	cbz	r0, 8006068 <_vfiprintf_r+0x18>
 8006060:	6a03      	ldr	r3, [r0, #32]
 8006062:	b90b      	cbnz	r3, 8006068 <_vfiprintf_r+0x18>
 8006064:	f7fe fafa 	bl	800465c <__sinit>
 8006068:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800606a:	07d9      	lsls	r1, r3, #31
 800606c:	d405      	bmi.n	800607a <_vfiprintf_r+0x2a>
 800606e:	89ab      	ldrh	r3, [r5, #12]
 8006070:	059a      	lsls	r2, r3, #22
 8006072:	d402      	bmi.n	800607a <_vfiprintf_r+0x2a>
 8006074:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006076:	f7fe fcec 	bl	8004a52 <__retarget_lock_acquire_recursive>
 800607a:	89ab      	ldrh	r3, [r5, #12]
 800607c:	071b      	lsls	r3, r3, #28
 800607e:	d501      	bpl.n	8006084 <_vfiprintf_r+0x34>
 8006080:	692b      	ldr	r3, [r5, #16]
 8006082:	b99b      	cbnz	r3, 80060ac <_vfiprintf_r+0x5c>
 8006084:	4629      	mov	r1, r5
 8006086:	4630      	mov	r0, r6
 8006088:	f7fe fc10 	bl	80048ac <__swsetup_r>
 800608c:	b170      	cbz	r0, 80060ac <_vfiprintf_r+0x5c>
 800608e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006090:	07dc      	lsls	r4, r3, #31
 8006092:	d504      	bpl.n	800609e <_vfiprintf_r+0x4e>
 8006094:	f04f 30ff 	mov.w	r0, #4294967295
 8006098:	b01d      	add	sp, #116	@ 0x74
 800609a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800609e:	89ab      	ldrh	r3, [r5, #12]
 80060a0:	0598      	lsls	r0, r3, #22
 80060a2:	d4f7      	bmi.n	8006094 <_vfiprintf_r+0x44>
 80060a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060a6:	f7fe fcd5 	bl	8004a54 <__retarget_lock_release_recursive>
 80060aa:	e7f3      	b.n	8006094 <_vfiprintf_r+0x44>
 80060ac:	2300      	movs	r3, #0
 80060ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80060b0:	2320      	movs	r3, #32
 80060b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80060b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80060ba:	2330      	movs	r3, #48	@ 0x30
 80060bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800626c <_vfiprintf_r+0x21c>
 80060c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80060c4:	f04f 0901 	mov.w	r9, #1
 80060c8:	4623      	mov	r3, r4
 80060ca:	469a      	mov	sl, r3
 80060cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060d0:	b10a      	cbz	r2, 80060d6 <_vfiprintf_r+0x86>
 80060d2:	2a25      	cmp	r2, #37	@ 0x25
 80060d4:	d1f9      	bne.n	80060ca <_vfiprintf_r+0x7a>
 80060d6:	ebba 0b04 	subs.w	fp, sl, r4
 80060da:	d00b      	beq.n	80060f4 <_vfiprintf_r+0xa4>
 80060dc:	465b      	mov	r3, fp
 80060de:	4622      	mov	r2, r4
 80060e0:	4629      	mov	r1, r5
 80060e2:	4630      	mov	r0, r6
 80060e4:	f7ff ffa1 	bl	800602a <__sfputs_r>
 80060e8:	3001      	adds	r0, #1
 80060ea:	f000 80a7 	beq.w	800623c <_vfiprintf_r+0x1ec>
 80060ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060f0:	445a      	add	r2, fp
 80060f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80060f4:	f89a 3000 	ldrb.w	r3, [sl]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f000 809f 	beq.w	800623c <_vfiprintf_r+0x1ec>
 80060fe:	2300      	movs	r3, #0
 8006100:	f04f 32ff 	mov.w	r2, #4294967295
 8006104:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006108:	f10a 0a01 	add.w	sl, sl, #1
 800610c:	9304      	str	r3, [sp, #16]
 800610e:	9307      	str	r3, [sp, #28]
 8006110:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006114:	931a      	str	r3, [sp, #104]	@ 0x68
 8006116:	4654      	mov	r4, sl
 8006118:	2205      	movs	r2, #5
 800611a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800611e:	4853      	ldr	r0, [pc, #332]	@ (800626c <_vfiprintf_r+0x21c>)
 8006120:	f7fa f856 	bl	80001d0 <memchr>
 8006124:	9a04      	ldr	r2, [sp, #16]
 8006126:	b9d8      	cbnz	r0, 8006160 <_vfiprintf_r+0x110>
 8006128:	06d1      	lsls	r1, r2, #27
 800612a:	bf44      	itt	mi
 800612c:	2320      	movmi	r3, #32
 800612e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006132:	0713      	lsls	r3, r2, #28
 8006134:	bf44      	itt	mi
 8006136:	232b      	movmi	r3, #43	@ 0x2b
 8006138:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800613c:	f89a 3000 	ldrb.w	r3, [sl]
 8006140:	2b2a      	cmp	r3, #42	@ 0x2a
 8006142:	d015      	beq.n	8006170 <_vfiprintf_r+0x120>
 8006144:	9a07      	ldr	r2, [sp, #28]
 8006146:	4654      	mov	r4, sl
 8006148:	2000      	movs	r0, #0
 800614a:	f04f 0c0a 	mov.w	ip, #10
 800614e:	4621      	mov	r1, r4
 8006150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006154:	3b30      	subs	r3, #48	@ 0x30
 8006156:	2b09      	cmp	r3, #9
 8006158:	d94b      	bls.n	80061f2 <_vfiprintf_r+0x1a2>
 800615a:	b1b0      	cbz	r0, 800618a <_vfiprintf_r+0x13a>
 800615c:	9207      	str	r2, [sp, #28]
 800615e:	e014      	b.n	800618a <_vfiprintf_r+0x13a>
 8006160:	eba0 0308 	sub.w	r3, r0, r8
 8006164:	fa09 f303 	lsl.w	r3, r9, r3
 8006168:	4313      	orrs	r3, r2
 800616a:	9304      	str	r3, [sp, #16]
 800616c:	46a2      	mov	sl, r4
 800616e:	e7d2      	b.n	8006116 <_vfiprintf_r+0xc6>
 8006170:	9b03      	ldr	r3, [sp, #12]
 8006172:	1d19      	adds	r1, r3, #4
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	9103      	str	r1, [sp, #12]
 8006178:	2b00      	cmp	r3, #0
 800617a:	bfbb      	ittet	lt
 800617c:	425b      	neglt	r3, r3
 800617e:	f042 0202 	orrlt.w	r2, r2, #2
 8006182:	9307      	strge	r3, [sp, #28]
 8006184:	9307      	strlt	r3, [sp, #28]
 8006186:	bfb8      	it	lt
 8006188:	9204      	strlt	r2, [sp, #16]
 800618a:	7823      	ldrb	r3, [r4, #0]
 800618c:	2b2e      	cmp	r3, #46	@ 0x2e
 800618e:	d10a      	bne.n	80061a6 <_vfiprintf_r+0x156>
 8006190:	7863      	ldrb	r3, [r4, #1]
 8006192:	2b2a      	cmp	r3, #42	@ 0x2a
 8006194:	d132      	bne.n	80061fc <_vfiprintf_r+0x1ac>
 8006196:	9b03      	ldr	r3, [sp, #12]
 8006198:	1d1a      	adds	r2, r3, #4
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	9203      	str	r2, [sp, #12]
 800619e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80061a2:	3402      	adds	r4, #2
 80061a4:	9305      	str	r3, [sp, #20]
 80061a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800627c <_vfiprintf_r+0x22c>
 80061aa:	7821      	ldrb	r1, [r4, #0]
 80061ac:	2203      	movs	r2, #3
 80061ae:	4650      	mov	r0, sl
 80061b0:	f7fa f80e 	bl	80001d0 <memchr>
 80061b4:	b138      	cbz	r0, 80061c6 <_vfiprintf_r+0x176>
 80061b6:	9b04      	ldr	r3, [sp, #16]
 80061b8:	eba0 000a 	sub.w	r0, r0, sl
 80061bc:	2240      	movs	r2, #64	@ 0x40
 80061be:	4082      	lsls	r2, r0
 80061c0:	4313      	orrs	r3, r2
 80061c2:	3401      	adds	r4, #1
 80061c4:	9304      	str	r3, [sp, #16]
 80061c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061ca:	4829      	ldr	r0, [pc, #164]	@ (8006270 <_vfiprintf_r+0x220>)
 80061cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80061d0:	2206      	movs	r2, #6
 80061d2:	f7f9 fffd 	bl	80001d0 <memchr>
 80061d6:	2800      	cmp	r0, #0
 80061d8:	d03f      	beq.n	800625a <_vfiprintf_r+0x20a>
 80061da:	4b26      	ldr	r3, [pc, #152]	@ (8006274 <_vfiprintf_r+0x224>)
 80061dc:	bb1b      	cbnz	r3, 8006226 <_vfiprintf_r+0x1d6>
 80061de:	9b03      	ldr	r3, [sp, #12]
 80061e0:	3307      	adds	r3, #7
 80061e2:	f023 0307 	bic.w	r3, r3, #7
 80061e6:	3308      	adds	r3, #8
 80061e8:	9303      	str	r3, [sp, #12]
 80061ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061ec:	443b      	add	r3, r7
 80061ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80061f0:	e76a      	b.n	80060c8 <_vfiprintf_r+0x78>
 80061f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80061f6:	460c      	mov	r4, r1
 80061f8:	2001      	movs	r0, #1
 80061fa:	e7a8      	b.n	800614e <_vfiprintf_r+0xfe>
 80061fc:	2300      	movs	r3, #0
 80061fe:	3401      	adds	r4, #1
 8006200:	9305      	str	r3, [sp, #20]
 8006202:	4619      	mov	r1, r3
 8006204:	f04f 0c0a 	mov.w	ip, #10
 8006208:	4620      	mov	r0, r4
 800620a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800620e:	3a30      	subs	r2, #48	@ 0x30
 8006210:	2a09      	cmp	r2, #9
 8006212:	d903      	bls.n	800621c <_vfiprintf_r+0x1cc>
 8006214:	2b00      	cmp	r3, #0
 8006216:	d0c6      	beq.n	80061a6 <_vfiprintf_r+0x156>
 8006218:	9105      	str	r1, [sp, #20]
 800621a:	e7c4      	b.n	80061a6 <_vfiprintf_r+0x156>
 800621c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006220:	4604      	mov	r4, r0
 8006222:	2301      	movs	r3, #1
 8006224:	e7f0      	b.n	8006208 <_vfiprintf_r+0x1b8>
 8006226:	ab03      	add	r3, sp, #12
 8006228:	9300      	str	r3, [sp, #0]
 800622a:	462a      	mov	r2, r5
 800622c:	4b12      	ldr	r3, [pc, #72]	@ (8006278 <_vfiprintf_r+0x228>)
 800622e:	a904      	add	r1, sp, #16
 8006230:	4630      	mov	r0, r6
 8006232:	f7fd fdd1 	bl	8003dd8 <_printf_float>
 8006236:	4607      	mov	r7, r0
 8006238:	1c78      	adds	r0, r7, #1
 800623a:	d1d6      	bne.n	80061ea <_vfiprintf_r+0x19a>
 800623c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800623e:	07d9      	lsls	r1, r3, #31
 8006240:	d405      	bmi.n	800624e <_vfiprintf_r+0x1fe>
 8006242:	89ab      	ldrh	r3, [r5, #12]
 8006244:	059a      	lsls	r2, r3, #22
 8006246:	d402      	bmi.n	800624e <_vfiprintf_r+0x1fe>
 8006248:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800624a:	f7fe fc03 	bl	8004a54 <__retarget_lock_release_recursive>
 800624e:	89ab      	ldrh	r3, [r5, #12]
 8006250:	065b      	lsls	r3, r3, #25
 8006252:	f53f af1f 	bmi.w	8006094 <_vfiprintf_r+0x44>
 8006256:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006258:	e71e      	b.n	8006098 <_vfiprintf_r+0x48>
 800625a:	ab03      	add	r3, sp, #12
 800625c:	9300      	str	r3, [sp, #0]
 800625e:	462a      	mov	r2, r5
 8006260:	4b05      	ldr	r3, [pc, #20]	@ (8006278 <_vfiprintf_r+0x228>)
 8006262:	a904      	add	r1, sp, #16
 8006264:	4630      	mov	r0, r6
 8006266:	f7fe f84f 	bl	8004308 <_printf_i>
 800626a:	e7e4      	b.n	8006236 <_vfiprintf_r+0x1e6>
 800626c:	08006e46 	.word	0x08006e46
 8006270:	08006e50 	.word	0x08006e50
 8006274:	08003dd9 	.word	0x08003dd9
 8006278:	0800602b 	.word	0x0800602b
 800627c:	08006e4c 	.word	0x08006e4c

08006280 <__sflush_r>:
 8006280:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006288:	0716      	lsls	r6, r2, #28
 800628a:	4605      	mov	r5, r0
 800628c:	460c      	mov	r4, r1
 800628e:	d454      	bmi.n	800633a <__sflush_r+0xba>
 8006290:	684b      	ldr	r3, [r1, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	dc02      	bgt.n	800629c <__sflush_r+0x1c>
 8006296:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006298:	2b00      	cmp	r3, #0
 800629a:	dd48      	ble.n	800632e <__sflush_r+0xae>
 800629c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800629e:	2e00      	cmp	r6, #0
 80062a0:	d045      	beq.n	800632e <__sflush_r+0xae>
 80062a2:	2300      	movs	r3, #0
 80062a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80062a8:	682f      	ldr	r7, [r5, #0]
 80062aa:	6a21      	ldr	r1, [r4, #32]
 80062ac:	602b      	str	r3, [r5, #0]
 80062ae:	d030      	beq.n	8006312 <__sflush_r+0x92>
 80062b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80062b2:	89a3      	ldrh	r3, [r4, #12]
 80062b4:	0759      	lsls	r1, r3, #29
 80062b6:	d505      	bpl.n	80062c4 <__sflush_r+0x44>
 80062b8:	6863      	ldr	r3, [r4, #4]
 80062ba:	1ad2      	subs	r2, r2, r3
 80062bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80062be:	b10b      	cbz	r3, 80062c4 <__sflush_r+0x44>
 80062c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80062c2:	1ad2      	subs	r2, r2, r3
 80062c4:	2300      	movs	r3, #0
 80062c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80062c8:	6a21      	ldr	r1, [r4, #32]
 80062ca:	4628      	mov	r0, r5
 80062cc:	47b0      	blx	r6
 80062ce:	1c43      	adds	r3, r0, #1
 80062d0:	89a3      	ldrh	r3, [r4, #12]
 80062d2:	d106      	bne.n	80062e2 <__sflush_r+0x62>
 80062d4:	6829      	ldr	r1, [r5, #0]
 80062d6:	291d      	cmp	r1, #29
 80062d8:	d82b      	bhi.n	8006332 <__sflush_r+0xb2>
 80062da:	4a2a      	ldr	r2, [pc, #168]	@ (8006384 <__sflush_r+0x104>)
 80062dc:	40ca      	lsrs	r2, r1
 80062de:	07d6      	lsls	r6, r2, #31
 80062e0:	d527      	bpl.n	8006332 <__sflush_r+0xb2>
 80062e2:	2200      	movs	r2, #0
 80062e4:	6062      	str	r2, [r4, #4]
 80062e6:	04d9      	lsls	r1, r3, #19
 80062e8:	6922      	ldr	r2, [r4, #16]
 80062ea:	6022      	str	r2, [r4, #0]
 80062ec:	d504      	bpl.n	80062f8 <__sflush_r+0x78>
 80062ee:	1c42      	adds	r2, r0, #1
 80062f0:	d101      	bne.n	80062f6 <__sflush_r+0x76>
 80062f2:	682b      	ldr	r3, [r5, #0]
 80062f4:	b903      	cbnz	r3, 80062f8 <__sflush_r+0x78>
 80062f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80062f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80062fa:	602f      	str	r7, [r5, #0]
 80062fc:	b1b9      	cbz	r1, 800632e <__sflush_r+0xae>
 80062fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006302:	4299      	cmp	r1, r3
 8006304:	d002      	beq.n	800630c <__sflush_r+0x8c>
 8006306:	4628      	mov	r0, r5
 8006308:	f7ff f9fe 	bl	8005708 <_free_r>
 800630c:	2300      	movs	r3, #0
 800630e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006310:	e00d      	b.n	800632e <__sflush_r+0xae>
 8006312:	2301      	movs	r3, #1
 8006314:	4628      	mov	r0, r5
 8006316:	47b0      	blx	r6
 8006318:	4602      	mov	r2, r0
 800631a:	1c50      	adds	r0, r2, #1
 800631c:	d1c9      	bne.n	80062b2 <__sflush_r+0x32>
 800631e:	682b      	ldr	r3, [r5, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d0c6      	beq.n	80062b2 <__sflush_r+0x32>
 8006324:	2b1d      	cmp	r3, #29
 8006326:	d001      	beq.n	800632c <__sflush_r+0xac>
 8006328:	2b16      	cmp	r3, #22
 800632a:	d11e      	bne.n	800636a <__sflush_r+0xea>
 800632c:	602f      	str	r7, [r5, #0]
 800632e:	2000      	movs	r0, #0
 8006330:	e022      	b.n	8006378 <__sflush_r+0xf8>
 8006332:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006336:	b21b      	sxth	r3, r3
 8006338:	e01b      	b.n	8006372 <__sflush_r+0xf2>
 800633a:	690f      	ldr	r7, [r1, #16]
 800633c:	2f00      	cmp	r7, #0
 800633e:	d0f6      	beq.n	800632e <__sflush_r+0xae>
 8006340:	0793      	lsls	r3, r2, #30
 8006342:	680e      	ldr	r6, [r1, #0]
 8006344:	bf08      	it	eq
 8006346:	694b      	ldreq	r3, [r1, #20]
 8006348:	600f      	str	r7, [r1, #0]
 800634a:	bf18      	it	ne
 800634c:	2300      	movne	r3, #0
 800634e:	eba6 0807 	sub.w	r8, r6, r7
 8006352:	608b      	str	r3, [r1, #8]
 8006354:	f1b8 0f00 	cmp.w	r8, #0
 8006358:	dde9      	ble.n	800632e <__sflush_r+0xae>
 800635a:	6a21      	ldr	r1, [r4, #32]
 800635c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800635e:	4643      	mov	r3, r8
 8006360:	463a      	mov	r2, r7
 8006362:	4628      	mov	r0, r5
 8006364:	47b0      	blx	r6
 8006366:	2800      	cmp	r0, #0
 8006368:	dc08      	bgt.n	800637c <__sflush_r+0xfc>
 800636a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800636e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006372:	81a3      	strh	r3, [r4, #12]
 8006374:	f04f 30ff 	mov.w	r0, #4294967295
 8006378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800637c:	4407      	add	r7, r0
 800637e:	eba8 0800 	sub.w	r8, r8, r0
 8006382:	e7e7      	b.n	8006354 <__sflush_r+0xd4>
 8006384:	20400001 	.word	0x20400001

08006388 <_fflush_r>:
 8006388:	b538      	push	{r3, r4, r5, lr}
 800638a:	690b      	ldr	r3, [r1, #16]
 800638c:	4605      	mov	r5, r0
 800638e:	460c      	mov	r4, r1
 8006390:	b913      	cbnz	r3, 8006398 <_fflush_r+0x10>
 8006392:	2500      	movs	r5, #0
 8006394:	4628      	mov	r0, r5
 8006396:	bd38      	pop	{r3, r4, r5, pc}
 8006398:	b118      	cbz	r0, 80063a2 <_fflush_r+0x1a>
 800639a:	6a03      	ldr	r3, [r0, #32]
 800639c:	b90b      	cbnz	r3, 80063a2 <_fflush_r+0x1a>
 800639e:	f7fe f95d 	bl	800465c <__sinit>
 80063a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d0f3      	beq.n	8006392 <_fflush_r+0xa>
 80063aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80063ac:	07d0      	lsls	r0, r2, #31
 80063ae:	d404      	bmi.n	80063ba <_fflush_r+0x32>
 80063b0:	0599      	lsls	r1, r3, #22
 80063b2:	d402      	bmi.n	80063ba <_fflush_r+0x32>
 80063b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063b6:	f7fe fb4c 	bl	8004a52 <__retarget_lock_acquire_recursive>
 80063ba:	4628      	mov	r0, r5
 80063bc:	4621      	mov	r1, r4
 80063be:	f7ff ff5f 	bl	8006280 <__sflush_r>
 80063c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063c4:	07da      	lsls	r2, r3, #31
 80063c6:	4605      	mov	r5, r0
 80063c8:	d4e4      	bmi.n	8006394 <_fflush_r+0xc>
 80063ca:	89a3      	ldrh	r3, [r4, #12]
 80063cc:	059b      	lsls	r3, r3, #22
 80063ce:	d4e1      	bmi.n	8006394 <_fflush_r+0xc>
 80063d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063d2:	f7fe fb3f 	bl	8004a54 <__retarget_lock_release_recursive>
 80063d6:	e7dd      	b.n	8006394 <_fflush_r+0xc>

080063d8 <__swhatbuf_r>:
 80063d8:	b570      	push	{r4, r5, r6, lr}
 80063da:	460c      	mov	r4, r1
 80063dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063e0:	2900      	cmp	r1, #0
 80063e2:	b096      	sub	sp, #88	@ 0x58
 80063e4:	4615      	mov	r5, r2
 80063e6:	461e      	mov	r6, r3
 80063e8:	da0d      	bge.n	8006406 <__swhatbuf_r+0x2e>
 80063ea:	89a3      	ldrh	r3, [r4, #12]
 80063ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80063f0:	f04f 0100 	mov.w	r1, #0
 80063f4:	bf14      	ite	ne
 80063f6:	2340      	movne	r3, #64	@ 0x40
 80063f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80063fc:	2000      	movs	r0, #0
 80063fe:	6031      	str	r1, [r6, #0]
 8006400:	602b      	str	r3, [r5, #0]
 8006402:	b016      	add	sp, #88	@ 0x58
 8006404:	bd70      	pop	{r4, r5, r6, pc}
 8006406:	466a      	mov	r2, sp
 8006408:	f000 f848 	bl	800649c <_fstat_r>
 800640c:	2800      	cmp	r0, #0
 800640e:	dbec      	blt.n	80063ea <__swhatbuf_r+0x12>
 8006410:	9901      	ldr	r1, [sp, #4]
 8006412:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006416:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800641a:	4259      	negs	r1, r3
 800641c:	4159      	adcs	r1, r3
 800641e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006422:	e7eb      	b.n	80063fc <__swhatbuf_r+0x24>

08006424 <__smakebuf_r>:
 8006424:	898b      	ldrh	r3, [r1, #12]
 8006426:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006428:	079d      	lsls	r5, r3, #30
 800642a:	4606      	mov	r6, r0
 800642c:	460c      	mov	r4, r1
 800642e:	d507      	bpl.n	8006440 <__smakebuf_r+0x1c>
 8006430:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006434:	6023      	str	r3, [r4, #0]
 8006436:	6123      	str	r3, [r4, #16]
 8006438:	2301      	movs	r3, #1
 800643a:	6163      	str	r3, [r4, #20]
 800643c:	b003      	add	sp, #12
 800643e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006440:	ab01      	add	r3, sp, #4
 8006442:	466a      	mov	r2, sp
 8006444:	f7ff ffc8 	bl	80063d8 <__swhatbuf_r>
 8006448:	9f00      	ldr	r7, [sp, #0]
 800644a:	4605      	mov	r5, r0
 800644c:	4639      	mov	r1, r7
 800644e:	4630      	mov	r0, r6
 8006450:	f7ff f9ce 	bl	80057f0 <_malloc_r>
 8006454:	b948      	cbnz	r0, 800646a <__smakebuf_r+0x46>
 8006456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800645a:	059a      	lsls	r2, r3, #22
 800645c:	d4ee      	bmi.n	800643c <__smakebuf_r+0x18>
 800645e:	f023 0303 	bic.w	r3, r3, #3
 8006462:	f043 0302 	orr.w	r3, r3, #2
 8006466:	81a3      	strh	r3, [r4, #12]
 8006468:	e7e2      	b.n	8006430 <__smakebuf_r+0xc>
 800646a:	89a3      	ldrh	r3, [r4, #12]
 800646c:	6020      	str	r0, [r4, #0]
 800646e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006472:	81a3      	strh	r3, [r4, #12]
 8006474:	9b01      	ldr	r3, [sp, #4]
 8006476:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800647a:	b15b      	cbz	r3, 8006494 <__smakebuf_r+0x70>
 800647c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006480:	4630      	mov	r0, r6
 8006482:	f000 f81d 	bl	80064c0 <_isatty_r>
 8006486:	b128      	cbz	r0, 8006494 <__smakebuf_r+0x70>
 8006488:	89a3      	ldrh	r3, [r4, #12]
 800648a:	f023 0303 	bic.w	r3, r3, #3
 800648e:	f043 0301 	orr.w	r3, r3, #1
 8006492:	81a3      	strh	r3, [r4, #12]
 8006494:	89a3      	ldrh	r3, [r4, #12]
 8006496:	431d      	orrs	r5, r3
 8006498:	81a5      	strh	r5, [r4, #12]
 800649a:	e7cf      	b.n	800643c <__smakebuf_r+0x18>

0800649c <_fstat_r>:
 800649c:	b538      	push	{r3, r4, r5, lr}
 800649e:	4d07      	ldr	r5, [pc, #28]	@ (80064bc <_fstat_r+0x20>)
 80064a0:	2300      	movs	r3, #0
 80064a2:	4604      	mov	r4, r0
 80064a4:	4608      	mov	r0, r1
 80064a6:	4611      	mov	r1, r2
 80064a8:	602b      	str	r3, [r5, #0]
 80064aa:	f000 fa2c 	bl	8006906 <_fstat>
 80064ae:	1c43      	adds	r3, r0, #1
 80064b0:	d102      	bne.n	80064b8 <_fstat_r+0x1c>
 80064b2:	682b      	ldr	r3, [r5, #0]
 80064b4:	b103      	cbz	r3, 80064b8 <_fstat_r+0x1c>
 80064b6:	6023      	str	r3, [r4, #0]
 80064b8:	bd38      	pop	{r3, r4, r5, pc}
 80064ba:	bf00      	nop
 80064bc:	200003ac 	.word	0x200003ac

080064c0 <_isatty_r>:
 80064c0:	b538      	push	{r3, r4, r5, lr}
 80064c2:	4d06      	ldr	r5, [pc, #24]	@ (80064dc <_isatty_r+0x1c>)
 80064c4:	2300      	movs	r3, #0
 80064c6:	4604      	mov	r4, r0
 80064c8:	4608      	mov	r0, r1
 80064ca:	602b      	str	r3, [r5, #0]
 80064cc:	f000 fb8c 	bl	8006be8 <_isatty>
 80064d0:	1c43      	adds	r3, r0, #1
 80064d2:	d102      	bne.n	80064da <_isatty_r+0x1a>
 80064d4:	682b      	ldr	r3, [r5, #0]
 80064d6:	b103      	cbz	r3, 80064da <_isatty_r+0x1a>
 80064d8:	6023      	str	r3, [r4, #0]
 80064da:	bd38      	pop	{r3, r4, r5, pc}
 80064dc:	200003ac 	.word	0x200003ac

080064e0 <_sbrk_r>:
 80064e0:	b538      	push	{r3, r4, r5, lr}
 80064e2:	4d06      	ldr	r5, [pc, #24]	@ (80064fc <_sbrk_r+0x1c>)
 80064e4:	2300      	movs	r3, #0
 80064e6:	4604      	mov	r4, r0
 80064e8:	4608      	mov	r0, r1
 80064ea:	602b      	str	r3, [r5, #0]
 80064ec:	f7fa feb8 	bl	8001260 <_sbrk>
 80064f0:	1c43      	adds	r3, r0, #1
 80064f2:	d102      	bne.n	80064fa <_sbrk_r+0x1a>
 80064f4:	682b      	ldr	r3, [r5, #0]
 80064f6:	b103      	cbz	r3, 80064fa <_sbrk_r+0x1a>
 80064f8:	6023      	str	r3, [r4, #0]
 80064fa:	bd38      	pop	{r3, r4, r5, pc}
 80064fc:	200003ac 	.word	0x200003ac

08006500 <memcpy>:
 8006500:	440a      	add	r2, r1
 8006502:	4291      	cmp	r1, r2
 8006504:	f100 33ff 	add.w	r3, r0, #4294967295
 8006508:	d100      	bne.n	800650c <memcpy+0xc>
 800650a:	4770      	bx	lr
 800650c:	b510      	push	{r4, lr}
 800650e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006512:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006516:	4291      	cmp	r1, r2
 8006518:	d1f9      	bne.n	800650e <memcpy+0xe>
 800651a:	bd10      	pop	{r4, pc}

0800651c <__assert_func>:
 800651c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800651e:	4614      	mov	r4, r2
 8006520:	461a      	mov	r2, r3
 8006522:	4b09      	ldr	r3, [pc, #36]	@ (8006548 <__assert_func+0x2c>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4605      	mov	r5, r0
 8006528:	68d8      	ldr	r0, [r3, #12]
 800652a:	b14c      	cbz	r4, 8006540 <__assert_func+0x24>
 800652c:	4b07      	ldr	r3, [pc, #28]	@ (800654c <__assert_func+0x30>)
 800652e:	9100      	str	r1, [sp, #0]
 8006530:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006534:	4906      	ldr	r1, [pc, #24]	@ (8006550 <__assert_func+0x34>)
 8006536:	462b      	mov	r3, r5
 8006538:	f000 f842 	bl	80065c0 <fiprintf>
 800653c:	f000 f852 	bl	80065e4 <abort>
 8006540:	4b04      	ldr	r3, [pc, #16]	@ (8006554 <__assert_func+0x38>)
 8006542:	461c      	mov	r4, r3
 8006544:	e7f3      	b.n	800652e <__assert_func+0x12>
 8006546:	bf00      	nop
 8006548:	20000018 	.word	0x20000018
 800654c:	08006e61 	.word	0x08006e61
 8006550:	08006e6e 	.word	0x08006e6e
 8006554:	08006e9c 	.word	0x08006e9c

08006558 <_calloc_r>:
 8006558:	b570      	push	{r4, r5, r6, lr}
 800655a:	fba1 5402 	umull	r5, r4, r1, r2
 800655e:	b934      	cbnz	r4, 800656e <_calloc_r+0x16>
 8006560:	4629      	mov	r1, r5
 8006562:	f7ff f945 	bl	80057f0 <_malloc_r>
 8006566:	4606      	mov	r6, r0
 8006568:	b928      	cbnz	r0, 8006576 <_calloc_r+0x1e>
 800656a:	4630      	mov	r0, r6
 800656c:	bd70      	pop	{r4, r5, r6, pc}
 800656e:	220c      	movs	r2, #12
 8006570:	6002      	str	r2, [r0, #0]
 8006572:	2600      	movs	r6, #0
 8006574:	e7f9      	b.n	800656a <_calloc_r+0x12>
 8006576:	462a      	mov	r2, r5
 8006578:	4621      	mov	r1, r4
 800657a:	f7fe f9ed 	bl	8004958 <memset>
 800657e:	e7f4      	b.n	800656a <_calloc_r+0x12>

08006580 <__ascii_mbtowc>:
 8006580:	b082      	sub	sp, #8
 8006582:	b901      	cbnz	r1, 8006586 <__ascii_mbtowc+0x6>
 8006584:	a901      	add	r1, sp, #4
 8006586:	b142      	cbz	r2, 800659a <__ascii_mbtowc+0x1a>
 8006588:	b14b      	cbz	r3, 800659e <__ascii_mbtowc+0x1e>
 800658a:	7813      	ldrb	r3, [r2, #0]
 800658c:	600b      	str	r3, [r1, #0]
 800658e:	7812      	ldrb	r2, [r2, #0]
 8006590:	1e10      	subs	r0, r2, #0
 8006592:	bf18      	it	ne
 8006594:	2001      	movne	r0, #1
 8006596:	b002      	add	sp, #8
 8006598:	4770      	bx	lr
 800659a:	4610      	mov	r0, r2
 800659c:	e7fb      	b.n	8006596 <__ascii_mbtowc+0x16>
 800659e:	f06f 0001 	mvn.w	r0, #1
 80065a2:	e7f8      	b.n	8006596 <__ascii_mbtowc+0x16>

080065a4 <__ascii_wctomb>:
 80065a4:	4603      	mov	r3, r0
 80065a6:	4608      	mov	r0, r1
 80065a8:	b141      	cbz	r1, 80065bc <__ascii_wctomb+0x18>
 80065aa:	2aff      	cmp	r2, #255	@ 0xff
 80065ac:	d904      	bls.n	80065b8 <__ascii_wctomb+0x14>
 80065ae:	228a      	movs	r2, #138	@ 0x8a
 80065b0:	601a      	str	r2, [r3, #0]
 80065b2:	f04f 30ff 	mov.w	r0, #4294967295
 80065b6:	4770      	bx	lr
 80065b8:	700a      	strb	r2, [r1, #0]
 80065ba:	2001      	movs	r0, #1
 80065bc:	4770      	bx	lr
	...

080065c0 <fiprintf>:
 80065c0:	b40e      	push	{r1, r2, r3}
 80065c2:	b503      	push	{r0, r1, lr}
 80065c4:	4601      	mov	r1, r0
 80065c6:	ab03      	add	r3, sp, #12
 80065c8:	4805      	ldr	r0, [pc, #20]	@ (80065e0 <fiprintf+0x20>)
 80065ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80065ce:	6800      	ldr	r0, [r0, #0]
 80065d0:	9301      	str	r3, [sp, #4]
 80065d2:	f7ff fd3d 	bl	8006050 <_vfiprintf_r>
 80065d6:	b002      	add	sp, #8
 80065d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80065dc:	b003      	add	sp, #12
 80065de:	4770      	bx	lr
 80065e0:	20000018 	.word	0x20000018

080065e4 <abort>:
 80065e4:	b508      	push	{r3, lr}
 80065e6:	2006      	movs	r0, #6
 80065e8:	f000 f82c 	bl	8006644 <raise>
 80065ec:	2001      	movs	r0, #1
 80065ee:	f000 f845 	bl	800667c <_exit>

080065f2 <_raise_r>:
 80065f2:	291f      	cmp	r1, #31
 80065f4:	b538      	push	{r3, r4, r5, lr}
 80065f6:	4605      	mov	r5, r0
 80065f8:	460c      	mov	r4, r1
 80065fa:	d904      	bls.n	8006606 <_raise_r+0x14>
 80065fc:	2316      	movs	r3, #22
 80065fe:	6003      	str	r3, [r0, #0]
 8006600:	f04f 30ff 	mov.w	r0, #4294967295
 8006604:	bd38      	pop	{r3, r4, r5, pc}
 8006606:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006608:	b112      	cbz	r2, 8006610 <_raise_r+0x1e>
 800660a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800660e:	b94b      	cbnz	r3, 8006624 <_raise_r+0x32>
 8006610:	4628      	mov	r0, r5
 8006612:	f000 f831 	bl	8006678 <_getpid_r>
 8006616:	4622      	mov	r2, r4
 8006618:	4601      	mov	r1, r0
 800661a:	4628      	mov	r0, r5
 800661c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006620:	f000 b818 	b.w	8006654 <_kill_r>
 8006624:	2b01      	cmp	r3, #1
 8006626:	d00a      	beq.n	800663e <_raise_r+0x4c>
 8006628:	1c59      	adds	r1, r3, #1
 800662a:	d103      	bne.n	8006634 <_raise_r+0x42>
 800662c:	2316      	movs	r3, #22
 800662e:	6003      	str	r3, [r0, #0]
 8006630:	2001      	movs	r0, #1
 8006632:	e7e7      	b.n	8006604 <_raise_r+0x12>
 8006634:	2100      	movs	r1, #0
 8006636:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800663a:	4620      	mov	r0, r4
 800663c:	4798      	blx	r3
 800663e:	2000      	movs	r0, #0
 8006640:	e7e0      	b.n	8006604 <_raise_r+0x12>
	...

08006644 <raise>:
 8006644:	4b02      	ldr	r3, [pc, #8]	@ (8006650 <raise+0xc>)
 8006646:	4601      	mov	r1, r0
 8006648:	6818      	ldr	r0, [r3, #0]
 800664a:	f7ff bfd2 	b.w	80065f2 <_raise_r>
 800664e:	bf00      	nop
 8006650:	20000018 	.word	0x20000018

08006654 <_kill_r>:
 8006654:	b538      	push	{r3, r4, r5, lr}
 8006656:	4d07      	ldr	r5, [pc, #28]	@ (8006674 <_kill_r+0x20>)
 8006658:	2300      	movs	r3, #0
 800665a:	4604      	mov	r4, r0
 800665c:	4608      	mov	r0, r1
 800665e:	4611      	mov	r1, r2
 8006660:	602b      	str	r3, [r5, #0]
 8006662:	f000 f829 	bl	80066b8 <_kill>
 8006666:	1c43      	adds	r3, r0, #1
 8006668:	d102      	bne.n	8006670 <_kill_r+0x1c>
 800666a:	682b      	ldr	r3, [r5, #0]
 800666c:	b103      	cbz	r3, 8006670 <_kill_r+0x1c>
 800666e:	6023      	str	r3, [r4, #0]
 8006670:	bd38      	pop	{r3, r4, r5, pc}
 8006672:	bf00      	nop
 8006674:	200003ac 	.word	0x200003ac

08006678 <_getpid_r>:
 8006678:	f000 b922 	b.w	80068c0 <_getpid>

0800667c <_exit>:
 800667c:	4601      	mov	r1, r0
 800667e:	b508      	push	{r3, lr}
 8006680:	4a02      	ldr	r2, [pc, #8]	@ (800668c <_exit+0x10>)
 8006682:	f04f 30ff 	mov.w	r0, #4294967295
 8006686:	f000 f803 	bl	8006690 <_kill_shared>
 800668a:	bf00      	nop
 800668c:	00020026 	.word	0x00020026

08006690 <_kill_shared>:
 8006690:	b507      	push	{r0, r1, r2, lr}
 8006692:	e9cd 2100 	strd	r2, r1, [sp]
 8006696:	f000 fa2f 	bl	8006af8 <_has_ext_exit_extended>
 800669a:	2800      	cmp	r0, #0
 800669c:	bf0c      	ite	eq
 800669e:	2418      	moveq	r4, #24
 80066a0:	2420      	movne	r4, #32
 80066a2:	f000 fa29 	bl	8006af8 <_has_ext_exit_extended>
 80066a6:	b120      	cbz	r0, 80066b2 <_kill_shared+0x22>
 80066a8:	466d      	mov	r5, sp
 80066aa:	4620      	mov	r0, r4
 80066ac:	4629      	mov	r1, r5
 80066ae:	beab      	bkpt	0x00ab
 80066b0:	4604      	mov	r4, r0
 80066b2:	9d00      	ldr	r5, [sp, #0]
 80066b4:	e7f9      	b.n	80066aa <_kill_shared+0x1a>
	...

080066b8 <_kill>:
 80066b8:	2906      	cmp	r1, #6
 80066ba:	b508      	push	{r3, lr}
 80066bc:	bf0c      	ite	eq
 80066be:	4a02      	ldreq	r2, [pc, #8]	@ (80066c8 <_kill+0x10>)
 80066c0:	4a02      	ldrne	r2, [pc, #8]	@ (80066cc <_kill+0x14>)
 80066c2:	f7ff ffe5 	bl	8006690 <_kill_shared>
 80066c6:	bf00      	nop
 80066c8:	00020023 	.word	0x00020023
 80066cc:	00020026 	.word	0x00020026

080066d0 <findslot>:
 80066d0:	4b0a      	ldr	r3, [pc, #40]	@ (80066fc <findslot+0x2c>)
 80066d2:	b510      	push	{r4, lr}
 80066d4:	4604      	mov	r4, r0
 80066d6:	6818      	ldr	r0, [r3, #0]
 80066d8:	b118      	cbz	r0, 80066e2 <findslot+0x12>
 80066da:	6a03      	ldr	r3, [r0, #32]
 80066dc:	b90b      	cbnz	r3, 80066e2 <findslot+0x12>
 80066de:	f7fd ffbd 	bl	800465c <__sinit>
 80066e2:	2c13      	cmp	r4, #19
 80066e4:	d807      	bhi.n	80066f6 <findslot+0x26>
 80066e6:	4806      	ldr	r0, [pc, #24]	@ (8006700 <findslot+0x30>)
 80066e8:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80066ec:	3201      	adds	r2, #1
 80066ee:	d002      	beq.n	80066f6 <findslot+0x26>
 80066f0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80066f4:	bd10      	pop	{r4, pc}
 80066f6:	2000      	movs	r0, #0
 80066f8:	e7fc      	b.n	80066f4 <findslot+0x24>
 80066fa:	bf00      	nop
 80066fc:	20000018 	.word	0x20000018
 8006700:	200003c8 	.word	0x200003c8

08006704 <error>:
 8006704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006706:	4604      	mov	r4, r0
 8006708:	f7fe f978 	bl	80049fc <__errno>
 800670c:	2613      	movs	r6, #19
 800670e:	4605      	mov	r5, r0
 8006710:	2700      	movs	r7, #0
 8006712:	4630      	mov	r0, r6
 8006714:	4639      	mov	r1, r7
 8006716:	beab      	bkpt	0x00ab
 8006718:	4606      	mov	r6, r0
 800671a:	602e      	str	r6, [r5, #0]
 800671c:	4620      	mov	r0, r4
 800671e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006720 <checkerror>:
 8006720:	1c43      	adds	r3, r0, #1
 8006722:	d101      	bne.n	8006728 <checkerror+0x8>
 8006724:	f7ff bfee 	b.w	8006704 <error>
 8006728:	4770      	bx	lr

0800672a <_swiread>:
 800672a:	b530      	push	{r4, r5, lr}
 800672c:	b085      	sub	sp, #20
 800672e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8006732:	9203      	str	r2, [sp, #12]
 8006734:	2406      	movs	r4, #6
 8006736:	ad01      	add	r5, sp, #4
 8006738:	4620      	mov	r0, r4
 800673a:	4629      	mov	r1, r5
 800673c:	beab      	bkpt	0x00ab
 800673e:	4604      	mov	r4, r0
 8006740:	4620      	mov	r0, r4
 8006742:	f7ff ffed 	bl	8006720 <checkerror>
 8006746:	b005      	add	sp, #20
 8006748:	bd30      	pop	{r4, r5, pc}

0800674a <_read>:
 800674a:	b570      	push	{r4, r5, r6, lr}
 800674c:	460e      	mov	r6, r1
 800674e:	4614      	mov	r4, r2
 8006750:	f7ff ffbe 	bl	80066d0 <findslot>
 8006754:	4605      	mov	r5, r0
 8006756:	b930      	cbnz	r0, 8006766 <_read+0x1c>
 8006758:	f7fe f950 	bl	80049fc <__errno>
 800675c:	2309      	movs	r3, #9
 800675e:	6003      	str	r3, [r0, #0]
 8006760:	f04f 30ff 	mov.w	r0, #4294967295
 8006764:	bd70      	pop	{r4, r5, r6, pc}
 8006766:	6800      	ldr	r0, [r0, #0]
 8006768:	4622      	mov	r2, r4
 800676a:	4631      	mov	r1, r6
 800676c:	f7ff ffdd 	bl	800672a <_swiread>
 8006770:	1c43      	adds	r3, r0, #1
 8006772:	d0f5      	beq.n	8006760 <_read+0x16>
 8006774:	686b      	ldr	r3, [r5, #4]
 8006776:	1a20      	subs	r0, r4, r0
 8006778:	4403      	add	r3, r0
 800677a:	606b      	str	r3, [r5, #4]
 800677c:	e7f2      	b.n	8006764 <_read+0x1a>

0800677e <_swilseek>:
 800677e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006780:	460c      	mov	r4, r1
 8006782:	4616      	mov	r6, r2
 8006784:	f7ff ffa4 	bl	80066d0 <findslot>
 8006788:	4605      	mov	r5, r0
 800678a:	b940      	cbnz	r0, 800679e <_swilseek+0x20>
 800678c:	f7fe f936 	bl	80049fc <__errno>
 8006790:	2309      	movs	r3, #9
 8006792:	6003      	str	r3, [r0, #0]
 8006794:	f04f 34ff 	mov.w	r4, #4294967295
 8006798:	4620      	mov	r0, r4
 800679a:	b003      	add	sp, #12
 800679c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800679e:	2e02      	cmp	r6, #2
 80067a0:	d903      	bls.n	80067aa <_swilseek+0x2c>
 80067a2:	f7fe f92b 	bl	80049fc <__errno>
 80067a6:	2316      	movs	r3, #22
 80067a8:	e7f3      	b.n	8006792 <_swilseek+0x14>
 80067aa:	2e01      	cmp	r6, #1
 80067ac:	d112      	bne.n	80067d4 <_swilseek+0x56>
 80067ae:	6843      	ldr	r3, [r0, #4]
 80067b0:	18e4      	adds	r4, r4, r3
 80067b2:	d4f6      	bmi.n	80067a2 <_swilseek+0x24>
 80067b4:	682b      	ldr	r3, [r5, #0]
 80067b6:	260a      	movs	r6, #10
 80067b8:	e9cd 3400 	strd	r3, r4, [sp]
 80067bc:	466f      	mov	r7, sp
 80067be:	4630      	mov	r0, r6
 80067c0:	4639      	mov	r1, r7
 80067c2:	beab      	bkpt	0x00ab
 80067c4:	4606      	mov	r6, r0
 80067c6:	4630      	mov	r0, r6
 80067c8:	f7ff ffaa 	bl	8006720 <checkerror>
 80067cc:	2800      	cmp	r0, #0
 80067ce:	dbe1      	blt.n	8006794 <_swilseek+0x16>
 80067d0:	606c      	str	r4, [r5, #4]
 80067d2:	e7e1      	b.n	8006798 <_swilseek+0x1a>
 80067d4:	2e02      	cmp	r6, #2
 80067d6:	6803      	ldr	r3, [r0, #0]
 80067d8:	d1ec      	bne.n	80067b4 <_swilseek+0x36>
 80067da:	9300      	str	r3, [sp, #0]
 80067dc:	260c      	movs	r6, #12
 80067de:	466f      	mov	r7, sp
 80067e0:	4630      	mov	r0, r6
 80067e2:	4639      	mov	r1, r7
 80067e4:	beab      	bkpt	0x00ab
 80067e6:	4606      	mov	r6, r0
 80067e8:	4630      	mov	r0, r6
 80067ea:	f7ff ff99 	bl	8006720 <checkerror>
 80067ee:	1c43      	adds	r3, r0, #1
 80067f0:	d0d0      	beq.n	8006794 <_swilseek+0x16>
 80067f2:	4404      	add	r4, r0
 80067f4:	e7de      	b.n	80067b4 <_swilseek+0x36>

080067f6 <_lseek>:
 80067f6:	f7ff bfc2 	b.w	800677e <_swilseek>

080067fa <_swiwrite>:
 80067fa:	b530      	push	{r4, r5, lr}
 80067fc:	b085      	sub	sp, #20
 80067fe:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8006802:	9203      	str	r2, [sp, #12]
 8006804:	2405      	movs	r4, #5
 8006806:	ad01      	add	r5, sp, #4
 8006808:	4620      	mov	r0, r4
 800680a:	4629      	mov	r1, r5
 800680c:	beab      	bkpt	0x00ab
 800680e:	4604      	mov	r4, r0
 8006810:	4620      	mov	r0, r4
 8006812:	f7ff ff85 	bl	8006720 <checkerror>
 8006816:	b005      	add	sp, #20
 8006818:	bd30      	pop	{r4, r5, pc}

0800681a <_write>:
 800681a:	b570      	push	{r4, r5, r6, lr}
 800681c:	460e      	mov	r6, r1
 800681e:	4615      	mov	r5, r2
 8006820:	f7ff ff56 	bl	80066d0 <findslot>
 8006824:	4604      	mov	r4, r0
 8006826:	b930      	cbnz	r0, 8006836 <_write+0x1c>
 8006828:	f7fe f8e8 	bl	80049fc <__errno>
 800682c:	2309      	movs	r3, #9
 800682e:	6003      	str	r3, [r0, #0]
 8006830:	f04f 30ff 	mov.w	r0, #4294967295
 8006834:	bd70      	pop	{r4, r5, r6, pc}
 8006836:	6800      	ldr	r0, [r0, #0]
 8006838:	462a      	mov	r2, r5
 800683a:	4631      	mov	r1, r6
 800683c:	f7ff ffdd 	bl	80067fa <_swiwrite>
 8006840:	1e03      	subs	r3, r0, #0
 8006842:	dbf5      	blt.n	8006830 <_write+0x16>
 8006844:	6862      	ldr	r2, [r4, #4]
 8006846:	1ae8      	subs	r0, r5, r3
 8006848:	4402      	add	r2, r0
 800684a:	42ab      	cmp	r3, r5
 800684c:	6062      	str	r2, [r4, #4]
 800684e:	d1f1      	bne.n	8006834 <_write+0x1a>
 8006850:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006854:	2000      	movs	r0, #0
 8006856:	f7ff bf55 	b.w	8006704 <error>

0800685a <_swiclose>:
 800685a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800685c:	2402      	movs	r4, #2
 800685e:	9001      	str	r0, [sp, #4]
 8006860:	ad01      	add	r5, sp, #4
 8006862:	4620      	mov	r0, r4
 8006864:	4629      	mov	r1, r5
 8006866:	beab      	bkpt	0x00ab
 8006868:	4604      	mov	r4, r0
 800686a:	4620      	mov	r0, r4
 800686c:	f7ff ff58 	bl	8006720 <checkerror>
 8006870:	b003      	add	sp, #12
 8006872:	bd30      	pop	{r4, r5, pc}

08006874 <_close>:
 8006874:	b538      	push	{r3, r4, r5, lr}
 8006876:	4605      	mov	r5, r0
 8006878:	f7ff ff2a 	bl	80066d0 <findslot>
 800687c:	4604      	mov	r4, r0
 800687e:	b930      	cbnz	r0, 800688e <_close+0x1a>
 8006880:	f7fe f8bc 	bl	80049fc <__errno>
 8006884:	2309      	movs	r3, #9
 8006886:	6003      	str	r3, [r0, #0]
 8006888:	f04f 30ff 	mov.w	r0, #4294967295
 800688c:	bd38      	pop	{r3, r4, r5, pc}
 800688e:	3d01      	subs	r5, #1
 8006890:	2d01      	cmp	r5, #1
 8006892:	d809      	bhi.n	80068a8 <_close+0x34>
 8006894:	4b09      	ldr	r3, [pc, #36]	@ (80068bc <_close+0x48>)
 8006896:	689a      	ldr	r2, [r3, #8]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	429a      	cmp	r2, r3
 800689c:	d104      	bne.n	80068a8 <_close+0x34>
 800689e:	f04f 33ff 	mov.w	r3, #4294967295
 80068a2:	6003      	str	r3, [r0, #0]
 80068a4:	2000      	movs	r0, #0
 80068a6:	e7f1      	b.n	800688c <_close+0x18>
 80068a8:	6820      	ldr	r0, [r4, #0]
 80068aa:	f7ff ffd6 	bl	800685a <_swiclose>
 80068ae:	2800      	cmp	r0, #0
 80068b0:	d1ec      	bne.n	800688c <_close+0x18>
 80068b2:	f04f 33ff 	mov.w	r3, #4294967295
 80068b6:	6023      	str	r3, [r4, #0]
 80068b8:	e7e8      	b.n	800688c <_close+0x18>
 80068ba:	bf00      	nop
 80068bc:	200003c8 	.word	0x200003c8

080068c0 <_getpid>:
 80068c0:	2001      	movs	r0, #1
 80068c2:	4770      	bx	lr

080068c4 <_swistat>:
 80068c4:	b570      	push	{r4, r5, r6, lr}
 80068c6:	460c      	mov	r4, r1
 80068c8:	f7ff ff02 	bl	80066d0 <findslot>
 80068cc:	4605      	mov	r5, r0
 80068ce:	b930      	cbnz	r0, 80068de <_swistat+0x1a>
 80068d0:	f7fe f894 	bl	80049fc <__errno>
 80068d4:	2309      	movs	r3, #9
 80068d6:	6003      	str	r3, [r0, #0]
 80068d8:	f04f 30ff 	mov.w	r0, #4294967295
 80068dc:	bd70      	pop	{r4, r5, r6, pc}
 80068de:	6863      	ldr	r3, [r4, #4]
 80068e0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80068e4:	6063      	str	r3, [r4, #4]
 80068e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80068ea:	64a3      	str	r3, [r4, #72]	@ 0x48
 80068ec:	260c      	movs	r6, #12
 80068ee:	4630      	mov	r0, r6
 80068f0:	4629      	mov	r1, r5
 80068f2:	beab      	bkpt	0x00ab
 80068f4:	4605      	mov	r5, r0
 80068f6:	4628      	mov	r0, r5
 80068f8:	f7ff ff12 	bl	8006720 <checkerror>
 80068fc:	1c43      	adds	r3, r0, #1
 80068fe:	d0eb      	beq.n	80068d8 <_swistat+0x14>
 8006900:	6120      	str	r0, [r4, #16]
 8006902:	2000      	movs	r0, #0
 8006904:	e7ea      	b.n	80068dc <_swistat+0x18>

08006906 <_fstat>:
 8006906:	460b      	mov	r3, r1
 8006908:	b510      	push	{r4, lr}
 800690a:	2100      	movs	r1, #0
 800690c:	4604      	mov	r4, r0
 800690e:	2258      	movs	r2, #88	@ 0x58
 8006910:	4618      	mov	r0, r3
 8006912:	f7fe f821 	bl	8004958 <memset>
 8006916:	4601      	mov	r1, r0
 8006918:	4620      	mov	r0, r4
 800691a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800691e:	f7ff bfd1 	b.w	80068c4 <_swistat>

08006922 <_stat>:
 8006922:	b538      	push	{r3, r4, r5, lr}
 8006924:	460d      	mov	r5, r1
 8006926:	4604      	mov	r4, r0
 8006928:	2258      	movs	r2, #88	@ 0x58
 800692a:	2100      	movs	r1, #0
 800692c:	4628      	mov	r0, r5
 800692e:	f7fe f813 	bl	8004958 <memset>
 8006932:	4620      	mov	r0, r4
 8006934:	2100      	movs	r1, #0
 8006936:	f000 f811 	bl	800695c <_swiopen>
 800693a:	1c43      	adds	r3, r0, #1
 800693c:	4604      	mov	r4, r0
 800693e:	d00b      	beq.n	8006958 <_stat+0x36>
 8006940:	686b      	ldr	r3, [r5, #4]
 8006942:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006946:	606b      	str	r3, [r5, #4]
 8006948:	4629      	mov	r1, r5
 800694a:	f7ff ffbb 	bl	80068c4 <_swistat>
 800694e:	4605      	mov	r5, r0
 8006950:	4620      	mov	r0, r4
 8006952:	f7ff ff8f 	bl	8006874 <_close>
 8006956:	462c      	mov	r4, r5
 8006958:	4620      	mov	r0, r4
 800695a:	bd38      	pop	{r3, r4, r5, pc}

0800695c <_swiopen>:
 800695c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006960:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 8006a0c <_swiopen+0xb0>
 8006964:	b096      	sub	sp, #88	@ 0x58
 8006966:	4607      	mov	r7, r0
 8006968:	460e      	mov	r6, r1
 800696a:	2400      	movs	r4, #0
 800696c:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 8006970:	3301      	adds	r3, #1
 8006972:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8006976:	d032      	beq.n	80069de <_swiopen+0x82>
 8006978:	3401      	adds	r4, #1
 800697a:	2c14      	cmp	r4, #20
 800697c:	d1f6      	bne.n	800696c <_swiopen+0x10>
 800697e:	f7fe f83d 	bl	80049fc <__errno>
 8006982:	2318      	movs	r3, #24
 8006984:	e03a      	b.n	80069fc <_swiopen+0xa0>
 8006986:	f3c6 4500 	ubfx	r5, r6, #16, #1
 800698a:	f240 6301 	movw	r3, #1537	@ 0x601
 800698e:	07b2      	lsls	r2, r6, #30
 8006990:	bf48      	it	mi
 8006992:	f045 0502 	orrmi.w	r5, r5, #2
 8006996:	421e      	tst	r6, r3
 8006998:	bf18      	it	ne
 800699a:	f045 0504 	orrne.w	r5, r5, #4
 800699e:	0733      	lsls	r3, r6, #28
 80069a0:	bf48      	it	mi
 80069a2:	f025 0504 	bicmi.w	r5, r5, #4
 80069a6:	4638      	mov	r0, r7
 80069a8:	bf48      	it	mi
 80069aa:	f045 0508 	orrmi.w	r5, r5, #8
 80069ae:	9700      	str	r7, [sp, #0]
 80069b0:	f7f9 fc5e 	bl	8000270 <strlen>
 80069b4:	e9cd 5001 	strd	r5, r0, [sp, #4]
 80069b8:	2501      	movs	r5, #1
 80069ba:	4628      	mov	r0, r5
 80069bc:	4651      	mov	r1, sl
 80069be:	beab      	bkpt	0x00ab
 80069c0:	4605      	mov	r5, r0
 80069c2:	2d00      	cmp	r5, #0
 80069c4:	db06      	blt.n	80069d4 <_swiopen+0x78>
 80069c6:	44c8      	add	r8, r9
 80069c8:	2300      	movs	r3, #0
 80069ca:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 80069ce:	f8c8 3004 	str.w	r3, [r8, #4]
 80069d2:	e016      	b.n	8006a02 <_swiopen+0xa6>
 80069d4:	4628      	mov	r0, r5
 80069d6:	f7ff fe95 	bl	8006704 <error>
 80069da:	4604      	mov	r4, r0
 80069dc:	e011      	b.n	8006a02 <_swiopen+0xa6>
 80069de:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 80069e2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80069e6:	46ea      	mov	sl, sp
 80069e8:	d1cd      	bne.n	8006986 <_swiopen+0x2a>
 80069ea:	4651      	mov	r1, sl
 80069ec:	4638      	mov	r0, r7
 80069ee:	f7ff ff98 	bl	8006922 <_stat>
 80069f2:	3001      	adds	r0, #1
 80069f4:	d0c7      	beq.n	8006986 <_swiopen+0x2a>
 80069f6:	f7fe f801 	bl	80049fc <__errno>
 80069fa:	2311      	movs	r3, #17
 80069fc:	6003      	str	r3, [r0, #0]
 80069fe:	f04f 34ff 	mov.w	r4, #4294967295
 8006a02:	4620      	mov	r0, r4
 8006a04:	b016      	add	sp, #88	@ 0x58
 8006a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a0a:	bf00      	nop
 8006a0c:	200003c8 	.word	0x200003c8

08006a10 <_get_semihosting_exts>:
 8006a10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006a14:	4606      	mov	r6, r0
 8006a16:	460f      	mov	r7, r1
 8006a18:	4829      	ldr	r0, [pc, #164]	@ (8006ac0 <_get_semihosting_exts+0xb0>)
 8006a1a:	2100      	movs	r1, #0
 8006a1c:	4615      	mov	r5, r2
 8006a1e:	f7ff ff9d 	bl	800695c <_swiopen>
 8006a22:	462a      	mov	r2, r5
 8006a24:	4604      	mov	r4, r0
 8006a26:	2100      	movs	r1, #0
 8006a28:	4630      	mov	r0, r6
 8006a2a:	f7fd ff95 	bl	8004958 <memset>
 8006a2e:	1c63      	adds	r3, r4, #1
 8006a30:	d014      	beq.n	8006a5c <_get_semihosting_exts+0x4c>
 8006a32:	4620      	mov	r0, r4
 8006a34:	f7ff fe4c 	bl	80066d0 <findslot>
 8006a38:	f04f 080c 	mov.w	r8, #12
 8006a3c:	4681      	mov	r9, r0
 8006a3e:	4640      	mov	r0, r8
 8006a40:	4649      	mov	r1, r9
 8006a42:	beab      	bkpt	0x00ab
 8006a44:	4680      	mov	r8, r0
 8006a46:	4640      	mov	r0, r8
 8006a48:	f7ff fe6a 	bl	8006720 <checkerror>
 8006a4c:	2803      	cmp	r0, #3
 8006a4e:	dd02      	ble.n	8006a56 <_get_semihosting_exts+0x46>
 8006a50:	1ec3      	subs	r3, r0, #3
 8006a52:	42ab      	cmp	r3, r5
 8006a54:	dc07      	bgt.n	8006a66 <_get_semihosting_exts+0x56>
 8006a56:	4620      	mov	r0, r4
 8006a58:	f7ff ff0c 	bl	8006874 <_close>
 8006a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a60:	b003      	add	sp, #12
 8006a62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a66:	2204      	movs	r2, #4
 8006a68:	eb0d 0102 	add.w	r1, sp, r2
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	f7ff fe6c 	bl	800674a <_read>
 8006a72:	2803      	cmp	r0, #3
 8006a74:	ddef      	ble.n	8006a56 <_get_semihosting_exts+0x46>
 8006a76:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006a7a:	2b53      	cmp	r3, #83	@ 0x53
 8006a7c:	d1eb      	bne.n	8006a56 <_get_semihosting_exts+0x46>
 8006a7e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006a82:	2b48      	cmp	r3, #72	@ 0x48
 8006a84:	d1e7      	bne.n	8006a56 <_get_semihosting_exts+0x46>
 8006a86:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006a8a:	2b46      	cmp	r3, #70	@ 0x46
 8006a8c:	d1e3      	bne.n	8006a56 <_get_semihosting_exts+0x46>
 8006a8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006a92:	2b42      	cmp	r3, #66	@ 0x42
 8006a94:	d1df      	bne.n	8006a56 <_get_semihosting_exts+0x46>
 8006a96:	2201      	movs	r2, #1
 8006a98:	4639      	mov	r1, r7
 8006a9a:	4620      	mov	r0, r4
 8006a9c:	f7ff fe6f 	bl	800677e <_swilseek>
 8006aa0:	2800      	cmp	r0, #0
 8006aa2:	dbd8      	blt.n	8006a56 <_get_semihosting_exts+0x46>
 8006aa4:	462a      	mov	r2, r5
 8006aa6:	4631      	mov	r1, r6
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	f7ff fe4e 	bl	800674a <_read>
 8006aae:	4605      	mov	r5, r0
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	f7ff fedf 	bl	8006874 <_close>
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	f7ff fe32 	bl	8006720 <checkerror>
 8006abc:	e7d0      	b.n	8006a60 <_get_semihosting_exts+0x50>
 8006abe:	bf00      	nop
 8006ac0:	08006e9d 	.word	0x08006e9d

08006ac4 <initialise_semihosting_exts>:
 8006ac4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ac6:	4d0a      	ldr	r5, [pc, #40]	@ (8006af0 <initialise_semihosting_exts+0x2c>)
 8006ac8:	4c0a      	ldr	r4, [pc, #40]	@ (8006af4 <initialise_semihosting_exts+0x30>)
 8006aca:	2100      	movs	r1, #0
 8006acc:	2201      	movs	r2, #1
 8006ace:	a801      	add	r0, sp, #4
 8006ad0:	6029      	str	r1, [r5, #0]
 8006ad2:	6022      	str	r2, [r4, #0]
 8006ad4:	f7ff ff9c 	bl	8006a10 <_get_semihosting_exts>
 8006ad8:	2800      	cmp	r0, #0
 8006ada:	dd07      	ble.n	8006aec <initialise_semihosting_exts+0x28>
 8006adc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006ae0:	f003 0201 	and.w	r2, r3, #1
 8006ae4:	f003 0302 	and.w	r3, r3, #2
 8006ae8:	602a      	str	r2, [r5, #0]
 8006aea:	6023      	str	r3, [r4, #0]
 8006aec:	b003      	add	sp, #12
 8006aee:	bd30      	pop	{r4, r5, pc}
 8006af0:	200001d8 	.word	0x200001d8
 8006af4:	200001d4 	.word	0x200001d4

08006af8 <_has_ext_exit_extended>:
 8006af8:	b510      	push	{r4, lr}
 8006afa:	4c04      	ldr	r4, [pc, #16]	@ (8006b0c <_has_ext_exit_extended+0x14>)
 8006afc:	6823      	ldr	r3, [r4, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	da01      	bge.n	8006b06 <_has_ext_exit_extended+0xe>
 8006b02:	f7ff ffdf 	bl	8006ac4 <initialise_semihosting_exts>
 8006b06:	6820      	ldr	r0, [r4, #0]
 8006b08:	bd10      	pop	{r4, pc}
 8006b0a:	bf00      	nop
 8006b0c:	200001d8 	.word	0x200001d8

08006b10 <_has_ext_stdout_stderr>:
 8006b10:	b510      	push	{r4, lr}
 8006b12:	4c04      	ldr	r4, [pc, #16]	@ (8006b24 <_has_ext_stdout_stderr+0x14>)
 8006b14:	6823      	ldr	r3, [r4, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	da01      	bge.n	8006b1e <_has_ext_stdout_stderr+0xe>
 8006b1a:	f7ff ffd3 	bl	8006ac4 <initialise_semihosting_exts>
 8006b1e:	6820      	ldr	r0, [r4, #0]
 8006b20:	bd10      	pop	{r4, pc}
 8006b22:	bf00      	nop
 8006b24:	200001d4 	.word	0x200001d4

08006b28 <initialise_monitor_handles>:
 8006b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b2c:	b085      	sub	sp, #20
 8006b2e:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8006be0 <initialise_monitor_handles+0xb8>
 8006b32:	f8cd 9004 	str.w	r9, [sp, #4]
 8006b36:	2303      	movs	r3, #3
 8006b38:	2400      	movs	r4, #0
 8006b3a:	9303      	str	r3, [sp, #12]
 8006b3c:	af01      	add	r7, sp, #4
 8006b3e:	9402      	str	r4, [sp, #8]
 8006b40:	2501      	movs	r5, #1
 8006b42:	4628      	mov	r0, r5
 8006b44:	4639      	mov	r1, r7
 8006b46:	beab      	bkpt	0x00ab
 8006b48:	4605      	mov	r5, r0
 8006b4a:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8006be4 <initialise_monitor_handles+0xbc>
 8006b4e:	4623      	mov	r3, r4
 8006b50:	4c20      	ldr	r4, [pc, #128]	@ (8006bd4 <initialise_monitor_handles+0xac>)
 8006b52:	f8c8 5000 	str.w	r5, [r8]
 8006b56:	f04f 32ff 	mov.w	r2, #4294967295
 8006b5a:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	2b14      	cmp	r3, #20
 8006b62:	d1fa      	bne.n	8006b5a <initialise_monitor_handles+0x32>
 8006b64:	f7ff ffd4 	bl	8006b10 <_has_ext_stdout_stderr>
 8006b68:	4d1b      	ldr	r5, [pc, #108]	@ (8006bd8 <initialise_monitor_handles+0xb0>)
 8006b6a:	b1d0      	cbz	r0, 8006ba2 <initialise_monitor_handles+0x7a>
 8006b6c:	f04f 0a03 	mov.w	sl, #3
 8006b70:	2304      	movs	r3, #4
 8006b72:	f8cd 9004 	str.w	r9, [sp, #4]
 8006b76:	2601      	movs	r6, #1
 8006b78:	f8cd a00c 	str.w	sl, [sp, #12]
 8006b7c:	9302      	str	r3, [sp, #8]
 8006b7e:	4630      	mov	r0, r6
 8006b80:	4639      	mov	r1, r7
 8006b82:	beab      	bkpt	0x00ab
 8006b84:	4683      	mov	fp, r0
 8006b86:	4b15      	ldr	r3, [pc, #84]	@ (8006bdc <initialise_monitor_handles+0xb4>)
 8006b88:	f8cd 9004 	str.w	r9, [sp, #4]
 8006b8c:	f8c3 b000 	str.w	fp, [r3]
 8006b90:	2308      	movs	r3, #8
 8006b92:	f8cd a00c 	str.w	sl, [sp, #12]
 8006b96:	9302      	str	r3, [sp, #8]
 8006b98:	4630      	mov	r0, r6
 8006b9a:	4639      	mov	r1, r7
 8006b9c:	beab      	bkpt	0x00ab
 8006b9e:	4606      	mov	r6, r0
 8006ba0:	602e      	str	r6, [r5, #0]
 8006ba2:	682b      	ldr	r3, [r5, #0]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	bf02      	ittt	eq
 8006ba8:	4b0c      	ldreq	r3, [pc, #48]	@ (8006bdc <initialise_monitor_handles+0xb4>)
 8006baa:	681b      	ldreq	r3, [r3, #0]
 8006bac:	602b      	streq	r3, [r5, #0]
 8006bae:	2600      	movs	r6, #0
 8006bb0:	f8d8 3000 	ldr.w	r3, [r8]
 8006bb4:	6023      	str	r3, [r4, #0]
 8006bb6:	6066      	str	r6, [r4, #4]
 8006bb8:	f7ff ffaa 	bl	8006b10 <_has_ext_stdout_stderr>
 8006bbc:	b130      	cbz	r0, 8006bcc <initialise_monitor_handles+0xa4>
 8006bbe:	4b07      	ldr	r3, [pc, #28]	@ (8006bdc <initialise_monitor_handles+0xb4>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8006bc6:	682b      	ldr	r3, [r5, #0]
 8006bc8:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8006bcc:	b005      	add	sp, #20
 8006bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bd2:	bf00      	nop
 8006bd4:	200003c8 	.word	0x200003c8
 8006bd8:	200003bc 	.word	0x200003bc
 8006bdc:	200003c0 	.word	0x200003c0
 8006be0:	08006eb3 	.word	0x08006eb3
 8006be4:	200003c4 	.word	0x200003c4

08006be8 <_isatty>:
 8006be8:	b570      	push	{r4, r5, r6, lr}
 8006bea:	f7ff fd71 	bl	80066d0 <findslot>
 8006bee:	2409      	movs	r4, #9
 8006bf0:	4605      	mov	r5, r0
 8006bf2:	b920      	cbnz	r0, 8006bfe <_isatty+0x16>
 8006bf4:	f7fd ff02 	bl	80049fc <__errno>
 8006bf8:	6004      	str	r4, [r0, #0]
 8006bfa:	2000      	movs	r0, #0
 8006bfc:	bd70      	pop	{r4, r5, r6, pc}
 8006bfe:	4620      	mov	r0, r4
 8006c00:	4629      	mov	r1, r5
 8006c02:	beab      	bkpt	0x00ab
 8006c04:	4604      	mov	r4, r0
 8006c06:	2c01      	cmp	r4, #1
 8006c08:	4620      	mov	r0, r4
 8006c0a:	d0f7      	beq.n	8006bfc <_isatty+0x14>
 8006c0c:	f7fd fef6 	bl	80049fc <__errno>
 8006c10:	2513      	movs	r5, #19
 8006c12:	4604      	mov	r4, r0
 8006c14:	2600      	movs	r6, #0
 8006c16:	4628      	mov	r0, r5
 8006c18:	4631      	mov	r1, r6
 8006c1a:	beab      	bkpt	0x00ab
 8006c1c:	4605      	mov	r5, r0
 8006c1e:	6025      	str	r5, [r4, #0]
 8006c20:	e7eb      	b.n	8006bfa <_isatty+0x12>
	...

08006c24 <_init>:
 8006c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c26:	bf00      	nop
 8006c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c2a:	bc08      	pop	{r3}
 8006c2c:	469e      	mov	lr, r3
 8006c2e:	4770      	bx	lr

08006c30 <_fini>:
 8006c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c32:	bf00      	nop
 8006c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c36:	bc08      	pop	{r3}
 8006c38:	469e      	mov	lr, r3
 8006c3a:	4770      	bx	lr
