
ledBlinking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c84  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001e0c  08001e0c  00002e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e3c  08001e3c  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001e3c  08001e3c  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001e3c  08001e3c  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e3c  08001e3c  00002e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001e40  08001e40  00002e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001e44  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000300c  2**0
                  CONTENTS
 10 .bss          00000020  2000000c  2000000c  0000300c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  0000300c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000391e  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000e30  00000000  00000000  0000695a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003c8  00000000  00000000  00007790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002b1  00000000  00000000  00007b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018e7d  00000000  00000000  00007e09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000535e  00000000  00000000  00020c86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009223b  00000000  00000000  00025fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000b821f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000d28  00000000  00000000  000b8264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  000b8f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001df4 	.word	0x08001df4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001df4 	.word	0x08001df4

080001c8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f91c 	bl	8000408 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f818 	bl	8000204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f852 	bl	800027c <MX_GPIO_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Turn LED ON
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80001d8:	2201      	movs	r2, #1
 80001da:	2140      	movs	r1, #64	@ 0x40
 80001dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80001e0:	f000 fbf4 	bl	80009cc <HAL_GPIO_WritePin>
    HAL_Delay(500); // Wait 500ms
 80001e4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80001e8:	f000 f974 	bl	80004d4 <HAL_Delay>

    // Turn LED OFF
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80001ec:	2200      	movs	r2, #0
 80001ee:	2140      	movs	r1, #64	@ 0x40
 80001f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80001f4:	f000 fbea 	bl	80009cc <HAL_GPIO_WritePin>
    HAL_Delay(500); // Wait 500ms
 80001f8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80001fc:	f000 f96a 	bl	80004d4 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000200:	bf00      	nop
 8000202:	e7e9      	b.n	80001d8 <main+0x10>

08000204 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b090      	sub	sp, #64	@ 0x40
 8000208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020a:	f107 0318 	add.w	r3, r7, #24
 800020e:	2228      	movs	r2, #40	@ 0x28
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f001 fdc2 	bl	8001d9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000218:	1d3b      	adds	r3, r7, #4
 800021a:	2200      	movs	r2, #0
 800021c:	601a      	str	r2, [r3, #0]
 800021e:	605a      	str	r2, [r3, #4]
 8000220:	609a      	str	r2, [r3, #8]
 8000222:	60da      	str	r2, [r3, #12]
 8000224:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000226:	2302      	movs	r3, #2
 8000228:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022a:	2301      	movs	r3, #1
 800022c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800022e:	2310      	movs	r3, #16
 8000230:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000232:	2300      	movs	r3, #0
 8000234:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000236:	f107 0318 	add.w	r3, r7, #24
 800023a:	4618      	mov	r0, r3
 800023c:	f000 fbde 	bl	80009fc <HAL_RCC_OscConfig>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000246:	f000 f849 	bl	80002dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800024a:	230f      	movs	r3, #15
 800024c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800024e:	2300      	movs	r3, #0
 8000250:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000252:	2300      	movs	r3, #0
 8000254:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000256:	2300      	movs	r3, #0
 8000258:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	2100      	movs	r1, #0
 8000262:	4618      	mov	r0, r3
 8000264:	f001 fbd8 	bl	8001a18 <HAL_RCC_ClockConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800026e:	f000 f835 	bl	80002dc <Error_Handler>
  }
}
 8000272:	bf00      	nop
 8000274:	3740      	adds	r7, #64	@ 0x40
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
	...

0800027c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b086      	sub	sp, #24
 8000280:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	2200      	movs	r2, #0
 8000286:	601a      	str	r2, [r3, #0]
 8000288:	605a      	str	r2, [r3, #4]
 800028a:	609a      	str	r2, [r3, #8]
 800028c:	60da      	str	r2, [r3, #12]
 800028e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000290:	4b11      	ldr	r3, [pc, #68]	@ (80002d8 <MX_GPIO_Init+0x5c>)
 8000292:	695b      	ldr	r3, [r3, #20]
 8000294:	4a10      	ldr	r2, [pc, #64]	@ (80002d8 <MX_GPIO_Init+0x5c>)
 8000296:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800029a:	6153      	str	r3, [r2, #20]
 800029c:	4b0e      	ldr	r3, [pc, #56]	@ (80002d8 <MX_GPIO_Init+0x5c>)
 800029e:	695b      	ldr	r3, [r3, #20]
 80002a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80002a4:	603b      	str	r3, [r7, #0]
 80002a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80002a8:	2200      	movs	r2, #0
 80002aa:	2140      	movs	r1, #64	@ 0x40
 80002ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002b0:	f000 fb8c 	bl	80009cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80002b4:	2340      	movs	r3, #64	@ 0x40
 80002b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b8:	2301      	movs	r3, #1
 80002ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002bc:	2300      	movs	r3, #0
 80002be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002c0:	2300      	movs	r3, #0
 80002c2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	4619      	mov	r1, r3
 80002c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002cc:	f000 fa0c 	bl	80006e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80002d0:	bf00      	nop
 80002d2:	3718      	adds	r7, #24
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	40021000 	.word	0x40021000

080002dc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002e0:	b672      	cpsid	i
}
 80002e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002e4:	bf00      	nop
 80002e6:	e7fd      	b.n	80002e4 <Error_Handler+0x8>

080002e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002ee:	4b0f      	ldr	r3, [pc, #60]	@ (800032c <HAL_MspInit+0x44>)
 80002f0:	699b      	ldr	r3, [r3, #24]
 80002f2:	4a0e      	ldr	r2, [pc, #56]	@ (800032c <HAL_MspInit+0x44>)
 80002f4:	f043 0301 	orr.w	r3, r3, #1
 80002f8:	6193      	str	r3, [r2, #24]
 80002fa:	4b0c      	ldr	r3, [pc, #48]	@ (800032c <HAL_MspInit+0x44>)
 80002fc:	699b      	ldr	r3, [r3, #24]
 80002fe:	f003 0301 	and.w	r3, r3, #1
 8000302:	607b      	str	r3, [r7, #4]
 8000304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000306:	4b09      	ldr	r3, [pc, #36]	@ (800032c <HAL_MspInit+0x44>)
 8000308:	69db      	ldr	r3, [r3, #28]
 800030a:	4a08      	ldr	r2, [pc, #32]	@ (800032c <HAL_MspInit+0x44>)
 800030c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000310:	61d3      	str	r3, [r2, #28]
 8000312:	4b06      	ldr	r3, [pc, #24]	@ (800032c <HAL_MspInit+0x44>)
 8000314:	69db      	ldr	r3, [r3, #28]
 8000316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800031a:	603b      	str	r3, [r7, #0]
 800031c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800031e:	bf00      	nop
 8000320:	370c      	adds	r7, #12
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	40021000 	.word	0x40021000

08000330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000334:	bf00      	nop
 8000336:	e7fd      	b.n	8000334 <NMI_Handler+0x4>

08000338 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800033c:	bf00      	nop
 800033e:	e7fd      	b.n	800033c <HardFault_Handler+0x4>

08000340 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000344:	bf00      	nop
 8000346:	e7fd      	b.n	8000344 <MemManage_Handler+0x4>

08000348 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800034c:	bf00      	nop
 800034e:	e7fd      	b.n	800034c <BusFault_Handler+0x4>

08000350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000354:	bf00      	nop
 8000356:	e7fd      	b.n	8000354 <UsageFault_Handler+0x4>

08000358 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800035c:	bf00      	nop
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr

08000366 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000366:	b480      	push	{r7}
 8000368:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800036a:	bf00      	nop
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr

08000374 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000378:	bf00      	nop
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr

08000382 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000382:	b580      	push	{r7, lr}
 8000384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000386:	f000 f885 	bl	8000494 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800038a:	bf00      	nop
 800038c:	bd80      	pop	{r7, pc}
	...

08000390 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000394:	4b06      	ldr	r3, [pc, #24]	@ (80003b0 <SystemInit+0x20>)
 8000396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800039a:	4a05      	ldr	r2, [pc, #20]	@ (80003b0 <SystemInit+0x20>)
 800039c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003a4:	bf00      	nop
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	e000ed00 	.word	0xe000ed00

080003b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80003ec <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80003b8:	f7ff ffea 	bl	8000390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003bc:	480c      	ldr	r0, [pc, #48]	@ (80003f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80003be:	490d      	ldr	r1, [pc, #52]	@ (80003f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003c0:	4a0d      	ldr	r2, [pc, #52]	@ (80003f8 <LoopForever+0xe>)
  movs r3, #0
 80003c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003c4:	e002      	b.n	80003cc <LoopCopyDataInit>

080003c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ca:	3304      	adds	r3, #4

080003cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003d0:	d3f9      	bcc.n	80003c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003d2:	4a0a      	ldr	r2, [pc, #40]	@ (80003fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80003d4:	4c0a      	ldr	r4, [pc, #40]	@ (8000400 <LoopForever+0x16>)
  movs r3, #0
 80003d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003d8:	e001      	b.n	80003de <LoopFillZerobss>

080003da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003dc:	3204      	adds	r2, #4

080003de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003e0:	d3fb      	bcc.n	80003da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003e2:	f001 fce3 	bl	8001dac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80003e6:	f7ff feef 	bl	80001c8 <main>

080003ea <LoopForever>:

LoopForever:
    b LoopForever
 80003ea:	e7fe      	b.n	80003ea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003ec:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80003f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80003f8:	08001e44 	.word	0x08001e44
  ldr r2, =_sbss
 80003fc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000400:	2000002c 	.word	0x2000002c

08000404 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000404:	e7fe      	b.n	8000404 <ADC1_2_IRQHandler>
	...

08000408 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800040c:	4b08      	ldr	r3, [pc, #32]	@ (8000430 <HAL_Init+0x28>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a07      	ldr	r2, [pc, #28]	@ (8000430 <HAL_Init+0x28>)
 8000412:	f043 0310 	orr.w	r3, r3, #16
 8000416:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000418:	2003      	movs	r0, #3
 800041a:	f000 f931 	bl	8000680 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800041e:	200f      	movs	r0, #15
 8000420:	f000 f808 	bl	8000434 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000424:	f7ff ff60 	bl	80002e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000428:	2300      	movs	r3, #0
}
 800042a:	4618      	mov	r0, r3
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	40022000 	.word	0x40022000

08000434 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800043c:	4b12      	ldr	r3, [pc, #72]	@ (8000488 <HAL_InitTick+0x54>)
 800043e:	681a      	ldr	r2, [r3, #0]
 8000440:	4b12      	ldr	r3, [pc, #72]	@ (800048c <HAL_InitTick+0x58>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	4619      	mov	r1, r3
 8000446:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800044a:	fbb3 f3f1 	udiv	r3, r3, r1
 800044e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000452:	4618      	mov	r0, r3
 8000454:	f000 f93b 	bl	80006ce <HAL_SYSTICK_Config>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800045e:	2301      	movs	r3, #1
 8000460:	e00e      	b.n	8000480 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	2b0f      	cmp	r3, #15
 8000466:	d80a      	bhi.n	800047e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000468:	2200      	movs	r2, #0
 800046a:	6879      	ldr	r1, [r7, #4]
 800046c:	f04f 30ff 	mov.w	r0, #4294967295
 8000470:	f000 f911 	bl	8000696 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000474:	4a06      	ldr	r2, [pc, #24]	@ (8000490 <HAL_InitTick+0x5c>)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800047a:	2300      	movs	r3, #0
 800047c:	e000      	b.n	8000480 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800047e:	2301      	movs	r3, #1
}
 8000480:	4618      	mov	r0, r3
 8000482:	3708      	adds	r7, #8
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	20000000 	.word	0x20000000
 800048c:	20000008 	.word	0x20000008
 8000490:	20000004 	.word	0x20000004

08000494 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000498:	4b06      	ldr	r3, [pc, #24]	@ (80004b4 <HAL_IncTick+0x20>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	461a      	mov	r2, r3
 800049e:	4b06      	ldr	r3, [pc, #24]	@ (80004b8 <HAL_IncTick+0x24>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4413      	add	r3, r2
 80004a4:	4a04      	ldr	r2, [pc, #16]	@ (80004b8 <HAL_IncTick+0x24>)
 80004a6:	6013      	str	r3, [r2, #0]
}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	20000008 	.word	0x20000008
 80004b8:	20000028 	.word	0x20000028

080004bc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  return uwTick;  
 80004c0:	4b03      	ldr	r3, [pc, #12]	@ (80004d0 <HAL_GetTick+0x14>)
 80004c2:	681b      	ldr	r3, [r3, #0]
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	20000028 	.word	0x20000028

080004d4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80004dc:	f7ff ffee 	bl	80004bc <HAL_GetTick>
 80004e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004ec:	d005      	beq.n	80004fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80004ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000518 <HAL_Delay+0x44>)
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	461a      	mov	r2, r3
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	4413      	add	r3, r2
 80004f8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80004fa:	bf00      	nop
 80004fc:	f7ff ffde 	bl	80004bc <HAL_GetTick>
 8000500:	4602      	mov	r2, r0
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	1ad3      	subs	r3, r2, r3
 8000506:	68fa      	ldr	r2, [r7, #12]
 8000508:	429a      	cmp	r2, r3
 800050a:	d8f7      	bhi.n	80004fc <HAL_Delay+0x28>
  {
  }
}
 800050c:	bf00      	nop
 800050e:	bf00      	nop
 8000510:	3710      	adds	r7, #16
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	20000008 	.word	0x20000008

0800051c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	f003 0307 	and.w	r3, r3, #7
 800052a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800052c:	4b0c      	ldr	r3, [pc, #48]	@ (8000560 <__NVIC_SetPriorityGrouping+0x44>)
 800052e:	68db      	ldr	r3, [r3, #12]
 8000530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000532:	68ba      	ldr	r2, [r7, #8]
 8000534:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000538:	4013      	ands	r3, r2
 800053a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000544:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000548:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800054c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800054e:	4a04      	ldr	r2, [pc, #16]	@ (8000560 <__NVIC_SetPriorityGrouping+0x44>)
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	60d3      	str	r3, [r2, #12]
}
 8000554:	bf00      	nop
 8000556:	3714      	adds	r7, #20
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	e000ed00 	.word	0xe000ed00

08000564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000568:	4b04      	ldr	r3, [pc, #16]	@ (800057c <__NVIC_GetPriorityGrouping+0x18>)
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	0a1b      	lsrs	r3, r3, #8
 800056e:	f003 0307 	and.w	r3, r3, #7
}
 8000572:	4618      	mov	r0, r3
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	e000ed00 	.word	0xe000ed00

08000580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	6039      	str	r1, [r7, #0]
 800058a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800058c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000590:	2b00      	cmp	r3, #0
 8000592:	db0a      	blt.n	80005aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	b2da      	uxtb	r2, r3
 8000598:	490c      	ldr	r1, [pc, #48]	@ (80005cc <__NVIC_SetPriority+0x4c>)
 800059a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059e:	0112      	lsls	r2, r2, #4
 80005a0:	b2d2      	uxtb	r2, r2
 80005a2:	440b      	add	r3, r1
 80005a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005a8:	e00a      	b.n	80005c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	4908      	ldr	r1, [pc, #32]	@ (80005d0 <__NVIC_SetPriority+0x50>)
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	f003 030f 	and.w	r3, r3, #15
 80005b6:	3b04      	subs	r3, #4
 80005b8:	0112      	lsls	r2, r2, #4
 80005ba:	b2d2      	uxtb	r2, r2
 80005bc:	440b      	add	r3, r1
 80005be:	761a      	strb	r2, [r3, #24]
}
 80005c0:	bf00      	nop
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr
 80005cc:	e000e100 	.word	0xe000e100
 80005d0:	e000ed00 	.word	0xe000ed00

080005d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b089      	sub	sp, #36	@ 0x24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	f003 0307 	and.w	r3, r3, #7
 80005e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005e8:	69fb      	ldr	r3, [r7, #28]
 80005ea:	f1c3 0307 	rsb	r3, r3, #7
 80005ee:	2b04      	cmp	r3, #4
 80005f0:	bf28      	it	cs
 80005f2:	2304      	movcs	r3, #4
 80005f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f6:	69fb      	ldr	r3, [r7, #28]
 80005f8:	3304      	adds	r3, #4
 80005fa:	2b06      	cmp	r3, #6
 80005fc:	d902      	bls.n	8000604 <NVIC_EncodePriority+0x30>
 80005fe:	69fb      	ldr	r3, [r7, #28]
 8000600:	3b03      	subs	r3, #3
 8000602:	e000      	b.n	8000606 <NVIC_EncodePriority+0x32>
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000608:	f04f 32ff 	mov.w	r2, #4294967295
 800060c:	69bb      	ldr	r3, [r7, #24]
 800060e:	fa02 f303 	lsl.w	r3, r2, r3
 8000612:	43da      	mvns	r2, r3
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	401a      	ands	r2, r3
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800061c:	f04f 31ff 	mov.w	r1, #4294967295
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	fa01 f303 	lsl.w	r3, r1, r3
 8000626:	43d9      	mvns	r1, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800062c:	4313      	orrs	r3, r2
         );
}
 800062e:	4618      	mov	r0, r3
 8000630:	3724      	adds	r7, #36	@ 0x24
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
	...

0800063c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	3b01      	subs	r3, #1
 8000648:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800064c:	d301      	bcc.n	8000652 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800064e:	2301      	movs	r3, #1
 8000650:	e00f      	b.n	8000672 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000652:	4a0a      	ldr	r2, [pc, #40]	@ (800067c <SysTick_Config+0x40>)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	3b01      	subs	r3, #1
 8000658:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800065a:	210f      	movs	r1, #15
 800065c:	f04f 30ff 	mov.w	r0, #4294967295
 8000660:	f7ff ff8e 	bl	8000580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000664:	4b05      	ldr	r3, [pc, #20]	@ (800067c <SysTick_Config+0x40>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800066a:	4b04      	ldr	r3, [pc, #16]	@ (800067c <SysTick_Config+0x40>)
 800066c:	2207      	movs	r2, #7
 800066e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000670:	2300      	movs	r3, #0
}
 8000672:	4618      	mov	r0, r3
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	e000e010 	.word	0xe000e010

08000680 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f7ff ff47 	bl	800051c <__NVIC_SetPriorityGrouping>
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	b086      	sub	sp, #24
 800069a:	af00      	add	r7, sp, #0
 800069c:	4603      	mov	r3, r0
 800069e:	60b9      	str	r1, [r7, #8]
 80006a0:	607a      	str	r2, [r7, #4]
 80006a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006a8:	f7ff ff5c 	bl	8000564 <__NVIC_GetPriorityGrouping>
 80006ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	68b9      	ldr	r1, [r7, #8]
 80006b2:	6978      	ldr	r0, [r7, #20]
 80006b4:	f7ff ff8e 	bl	80005d4 <NVIC_EncodePriority>
 80006b8:	4602      	mov	r2, r0
 80006ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006be:	4611      	mov	r1, r2
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ff5d 	bl	8000580 <__NVIC_SetPriority>
}
 80006c6:	bf00      	nop
 80006c8:	3718      	adds	r7, #24
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b082      	sub	sp, #8
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f7ff ffb0 	bl	800063c <SysTick_Config>
 80006dc:	4603      	mov	r3, r0
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b087      	sub	sp, #28
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006f6:	e14e      	b.n	8000996 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	2101      	movs	r1, #1
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	fa01 f303 	lsl.w	r3, r1, r3
 8000704:	4013      	ands	r3, r2
 8000706:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	2b00      	cmp	r3, #0
 800070c:	f000 8140 	beq.w	8000990 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	f003 0303 	and.w	r3, r3, #3
 8000718:	2b01      	cmp	r3, #1
 800071a:	d005      	beq.n	8000728 <HAL_GPIO_Init+0x40>
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	f003 0303 	and.w	r3, r3, #3
 8000724:	2b02      	cmp	r3, #2
 8000726:	d130      	bne.n	800078a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	689b      	ldr	r3, [r3, #8]
 800072c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800072e:	697b      	ldr	r3, [r7, #20]
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	2203      	movs	r2, #3
 8000734:	fa02 f303 	lsl.w	r3, r2, r3
 8000738:	43db      	mvns	r3, r3
 800073a:	693a      	ldr	r2, [r7, #16]
 800073c:	4013      	ands	r3, r2
 800073e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	68da      	ldr	r2, [r3, #12]
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	fa02 f303 	lsl.w	r3, r2, r3
 800074c:	693a      	ldr	r2, [r7, #16]
 800074e:	4313      	orrs	r3, r2
 8000750:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	693a      	ldr	r2, [r7, #16]
 8000756:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800075e:	2201      	movs	r2, #1
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	fa02 f303 	lsl.w	r3, r2, r3
 8000766:	43db      	mvns	r3, r3
 8000768:	693a      	ldr	r2, [r7, #16]
 800076a:	4013      	ands	r3, r2
 800076c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	091b      	lsrs	r3, r3, #4
 8000774:	f003 0201 	and.w	r2, r3, #1
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	fa02 f303 	lsl.w	r3, r2, r3
 800077e:	693a      	ldr	r2, [r7, #16]
 8000780:	4313      	orrs	r3, r2
 8000782:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	693a      	ldr	r2, [r7, #16]
 8000788:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	685b      	ldr	r3, [r3, #4]
 800078e:	f003 0303 	and.w	r3, r3, #3
 8000792:	2b03      	cmp	r3, #3
 8000794:	d017      	beq.n	80007c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	68db      	ldr	r3, [r3, #12]
 800079a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	2203      	movs	r2, #3
 80007a2:	fa02 f303 	lsl.w	r3, r2, r3
 80007a6:	43db      	mvns	r3, r3
 80007a8:	693a      	ldr	r2, [r7, #16]
 80007aa:	4013      	ands	r3, r2
 80007ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	689a      	ldr	r2, [r3, #8]
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ba:	693a      	ldr	r2, [r7, #16]
 80007bc:	4313      	orrs	r3, r2
 80007be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	693a      	ldr	r2, [r7, #16]
 80007c4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	f003 0303 	and.w	r3, r3, #3
 80007ce:	2b02      	cmp	r3, #2
 80007d0:	d123      	bne.n	800081a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	08da      	lsrs	r2, r3, #3
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	3208      	adds	r2, #8
 80007da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	f003 0307 	and.w	r3, r3, #7
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	220f      	movs	r2, #15
 80007ea:	fa02 f303 	lsl.w	r3, r2, r3
 80007ee:	43db      	mvns	r3, r3
 80007f0:	693a      	ldr	r2, [r7, #16]
 80007f2:	4013      	ands	r3, r2
 80007f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	691a      	ldr	r2, [r3, #16]
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	f003 0307 	and.w	r3, r3, #7
 8000800:	009b      	lsls	r3, r3, #2
 8000802:	fa02 f303 	lsl.w	r3, r2, r3
 8000806:	693a      	ldr	r2, [r7, #16]
 8000808:	4313      	orrs	r3, r2
 800080a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	08da      	lsrs	r2, r3, #3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3208      	adds	r2, #8
 8000814:	6939      	ldr	r1, [r7, #16]
 8000816:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	2203      	movs	r2, #3
 8000826:	fa02 f303 	lsl.w	r3, r2, r3
 800082a:	43db      	mvns	r3, r3
 800082c:	693a      	ldr	r2, [r7, #16]
 800082e:	4013      	ands	r3, r2
 8000830:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	f003 0203 	and.w	r2, r3, #3
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	fa02 f303 	lsl.w	r3, r2, r3
 8000842:	693a      	ldr	r2, [r7, #16]
 8000844:	4313      	orrs	r3, r2
 8000846:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	693a      	ldr	r2, [r7, #16]
 800084c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000856:	2b00      	cmp	r3, #0
 8000858:	f000 809a 	beq.w	8000990 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085c:	4b55      	ldr	r3, [pc, #340]	@ (80009b4 <HAL_GPIO_Init+0x2cc>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	4a54      	ldr	r2, [pc, #336]	@ (80009b4 <HAL_GPIO_Init+0x2cc>)
 8000862:	f043 0301 	orr.w	r3, r3, #1
 8000866:	6193      	str	r3, [r2, #24]
 8000868:	4b52      	ldr	r3, [pc, #328]	@ (80009b4 <HAL_GPIO_Init+0x2cc>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	f003 0301 	and.w	r3, r3, #1
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000874:	4a50      	ldr	r2, [pc, #320]	@ (80009b8 <HAL_GPIO_Init+0x2d0>)
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	089b      	lsrs	r3, r3, #2
 800087a:	3302      	adds	r3, #2
 800087c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000880:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	f003 0303 	and.w	r3, r3, #3
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	220f      	movs	r2, #15
 800088c:	fa02 f303 	lsl.w	r3, r2, r3
 8000890:	43db      	mvns	r3, r3
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	4013      	ands	r3, r2
 8000896:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800089e:	d013      	beq.n	80008c8 <HAL_GPIO_Init+0x1e0>
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4a46      	ldr	r2, [pc, #280]	@ (80009bc <HAL_GPIO_Init+0x2d4>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d00d      	beq.n	80008c4 <HAL_GPIO_Init+0x1dc>
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4a45      	ldr	r2, [pc, #276]	@ (80009c0 <HAL_GPIO_Init+0x2d8>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d007      	beq.n	80008c0 <HAL_GPIO_Init+0x1d8>
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4a44      	ldr	r2, [pc, #272]	@ (80009c4 <HAL_GPIO_Init+0x2dc>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d101      	bne.n	80008bc <HAL_GPIO_Init+0x1d4>
 80008b8:	2303      	movs	r3, #3
 80008ba:	e006      	b.n	80008ca <HAL_GPIO_Init+0x1e2>
 80008bc:	2305      	movs	r3, #5
 80008be:	e004      	b.n	80008ca <HAL_GPIO_Init+0x1e2>
 80008c0:	2302      	movs	r3, #2
 80008c2:	e002      	b.n	80008ca <HAL_GPIO_Init+0x1e2>
 80008c4:	2301      	movs	r3, #1
 80008c6:	e000      	b.n	80008ca <HAL_GPIO_Init+0x1e2>
 80008c8:	2300      	movs	r3, #0
 80008ca:	697a      	ldr	r2, [r7, #20]
 80008cc:	f002 0203 	and.w	r2, r2, #3
 80008d0:	0092      	lsls	r2, r2, #2
 80008d2:	4093      	lsls	r3, r2
 80008d4:	693a      	ldr	r2, [r7, #16]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80008da:	4937      	ldr	r1, [pc, #220]	@ (80009b8 <HAL_GPIO_Init+0x2d0>)
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	089b      	lsrs	r3, r3, #2
 80008e0:	3302      	adds	r3, #2
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008e8:	4b37      	ldr	r3, [pc, #220]	@ (80009c8 <HAL_GPIO_Init+0x2e0>)
 80008ea:	689b      	ldr	r3, [r3, #8]
 80008ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	43db      	mvns	r3, r3
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	4013      	ands	r3, r2
 80008f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000900:	2b00      	cmp	r3, #0
 8000902:	d003      	beq.n	800090c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000904:	693a      	ldr	r2, [r7, #16]
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	4313      	orrs	r3, r2
 800090a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800090c:	4a2e      	ldr	r2, [pc, #184]	@ (80009c8 <HAL_GPIO_Init+0x2e0>)
 800090e:	693b      	ldr	r3, [r7, #16]
 8000910:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000912:	4b2d      	ldr	r3, [pc, #180]	@ (80009c8 <HAL_GPIO_Init+0x2e0>)
 8000914:	68db      	ldr	r3, [r3, #12]
 8000916:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	43db      	mvns	r3, r3
 800091c:	693a      	ldr	r2, [r7, #16]
 800091e:	4013      	ands	r3, r2
 8000920:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800092a:	2b00      	cmp	r3, #0
 800092c:	d003      	beq.n	8000936 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	4313      	orrs	r3, r2
 8000934:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000936:	4a24      	ldr	r2, [pc, #144]	@ (80009c8 <HAL_GPIO_Init+0x2e0>)
 8000938:	693b      	ldr	r3, [r7, #16]
 800093a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800093c:	4b22      	ldr	r3, [pc, #136]	@ (80009c8 <HAL_GPIO_Init+0x2e0>)
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	43db      	mvns	r3, r3
 8000946:	693a      	ldr	r2, [r7, #16]
 8000948:	4013      	ands	r3, r2
 800094a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000954:	2b00      	cmp	r3, #0
 8000956:	d003      	beq.n	8000960 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000958:	693a      	ldr	r2, [r7, #16]
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	4313      	orrs	r3, r2
 800095e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000960:	4a19      	ldr	r2, [pc, #100]	@ (80009c8 <HAL_GPIO_Init+0x2e0>)
 8000962:	693b      	ldr	r3, [r7, #16]
 8000964:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000966:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <HAL_GPIO_Init+0x2e0>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	43db      	mvns	r3, r3
 8000970:	693a      	ldr	r2, [r7, #16]
 8000972:	4013      	ands	r3, r2
 8000974:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800097e:	2b00      	cmp	r3, #0
 8000980:	d003      	beq.n	800098a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	4313      	orrs	r3, r2
 8000988:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800098a:	4a0f      	ldr	r2, [pc, #60]	@ (80009c8 <HAL_GPIO_Init+0x2e0>)
 800098c:	693b      	ldr	r3, [r7, #16]
 800098e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	3301      	adds	r3, #1
 8000994:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	fa22 f303 	lsr.w	r3, r2, r3
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	f47f aea9 	bne.w	80006f8 <HAL_GPIO_Init+0x10>
  }
}
 80009a6:	bf00      	nop
 80009a8:	bf00      	nop
 80009aa:	371c      	adds	r7, #28
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	40021000 	.word	0x40021000
 80009b8:	40010000 	.word	0x40010000
 80009bc:	48000400 	.word	0x48000400
 80009c0:	48000800 	.word	0x48000800
 80009c4:	48000c00 	.word	0x48000c00
 80009c8:	40010400 	.word	0x40010400

080009cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	460b      	mov	r3, r1
 80009d6:	807b      	strh	r3, [r7, #2]
 80009d8:	4613      	mov	r3, r2
 80009da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80009dc:	787b      	ldrb	r3, [r7, #1]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d003      	beq.n	80009ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80009e2:	887a      	ldrh	r2, [r7, #2]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80009e8:	e002      	b.n	80009f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80009ea:	887a      	ldrh	r2, [r7, #2]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000a08:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000a0c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000a12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d102      	bne.n	8000a22 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	f000 bff4 	b.w	8001a0a <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000a26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	f000 816d 	beq.w	8000d12 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000a38:	4bb4      	ldr	r3, [pc, #720]	@ (8000d0c <HAL_RCC_OscConfig+0x310>)
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	f003 030c 	and.w	r3, r3, #12
 8000a40:	2b04      	cmp	r3, #4
 8000a42:	d00c      	beq.n	8000a5e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a44:	4bb1      	ldr	r3, [pc, #708]	@ (8000d0c <HAL_RCC_OscConfig+0x310>)
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f003 030c 	and.w	r3, r3, #12
 8000a4c:	2b08      	cmp	r3, #8
 8000a4e:	d157      	bne.n	8000b00 <HAL_RCC_OscConfig+0x104>
 8000a50:	4bae      	ldr	r3, [pc, #696]	@ (8000d0c <HAL_RCC_OscConfig+0x310>)
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000a5c:	d150      	bne.n	8000b00 <HAL_RCC_OscConfig+0x104>
 8000a5e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000a62:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a66:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8000a6a:	fa93 f3a3 	rbit	r3, r3
 8000a6e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000a72:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a76:	fab3 f383 	clz	r3, r3
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a7e:	d802      	bhi.n	8000a86 <HAL_RCC_OscConfig+0x8a>
 8000a80:	4ba2      	ldr	r3, [pc, #648]	@ (8000d0c <HAL_RCC_OscConfig+0x310>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	e015      	b.n	8000ab2 <HAL_RCC_OscConfig+0xb6>
 8000a86:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000a8a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a8e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000a92:	fa93 f3a3 	rbit	r3, r3
 8000a96:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000a9a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000a9e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000aa2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8000aa6:	fa93 f3a3 	rbit	r3, r3
 8000aaa:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8000aae:	4b97      	ldr	r3, [pc, #604]	@ (8000d0c <HAL_RCC_OscConfig+0x310>)
 8000ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ab2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ab6:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8000aba:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000abe:	fa92 f2a2 	rbit	r2, r2
 8000ac2:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8000ac6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8000aca:	fab2 f282 	clz	r2, r2
 8000ace:	b2d2      	uxtb	r2, r2
 8000ad0:	f042 0220 	orr.w	r2, r2, #32
 8000ad4:	b2d2      	uxtb	r2, r2
 8000ad6:	f002 021f 	and.w	r2, r2, #31
 8000ada:	2101      	movs	r1, #1
 8000adc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	f000 8114 	beq.w	8000d10 <HAL_RCC_OscConfig+0x314>
 8000ae8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000aec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	f040 810b 	bne.w	8000d10 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	f000 bf85 	b.w	8001a0a <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000b04:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b10:	d106      	bne.n	8000b20 <HAL_RCC_OscConfig+0x124>
 8000b12:	4b7e      	ldr	r3, [pc, #504]	@ (8000d0c <HAL_RCC_OscConfig+0x310>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a7d      	ldr	r2, [pc, #500]	@ (8000d0c <HAL_RCC_OscConfig+0x310>)
 8000b18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b1c:	6013      	str	r3, [r2, #0]
 8000b1e:	e036      	b.n	8000b8e <HAL_RCC_OscConfig+0x192>
 8000b20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000b24:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d10c      	bne.n	8000b4a <HAL_RCC_OscConfig+0x14e>
 8000b30:	4b76      	ldr	r3, [pc, #472]	@ (8000d0c <HAL_RCC_OscConfig+0x310>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a75      	ldr	r2, [pc, #468]	@ (8000d0c <HAL_RCC_OscConfig+0x310>)
 8000b36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000b3a:	6013      	str	r3, [r2, #0]
 8000b3c:	4b73      	ldr	r3, [pc, #460]	@ (8000d0c <HAL_RCC_OscConfig+0x310>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a72      	ldr	r2, [pc, #456]	@ (8000d0c <HAL_RCC_OscConfig+0x310>)
 8000b42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b46:	6013      	str	r3, [r2, #0]
 8000b48:	e021      	b.n	8000b8e <HAL_RCC_OscConfig+0x192>
 8000b4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000b4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000b5a:	d10c      	bne.n	8000b76 <HAL_RCC_OscConfig+0x17a>
 8000b5c:	4b6b      	ldr	r3, [pc, #428]	@ (8000d0c <HAL_RCC_OscConfig+0x310>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a6a      	ldr	r2, [pc, #424]	@ (8000d0c <HAL_RCC_OscConfig+0x310>)
 8000b62:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b66:	6013      	str	r3, [r2, #0]
 8000b68:	4b68      	ldr	r3, [pc, #416]	@ (8000d0c <HAL_RCC_OscConfig+0x310>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a67      	ldr	r2, [pc, #412]	@ (8000d0c <HAL_RCC_OscConfig+0x310>)
 8000b6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b72:	6013      	str	r3, [r2, #0]
 8000b74:	e00b      	b.n	8000b8e <HAL_RCC_OscConfig+0x192>
 8000b76:	4b65      	ldr	r3, [pc, #404]	@ (8000d0c <HAL_RCC_OscConfig+0x310>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a64      	ldr	r2, [pc, #400]	@ (8000d0c <HAL_RCC_OscConfig+0x310>)
 8000b7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000b80:	6013      	str	r3, [r2, #0]
 8000b82:	4b62      	ldr	r3, [pc, #392]	@ (8000d0c <HAL_RCC_OscConfig+0x310>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a61      	ldr	r2, [pc, #388]	@ (8000d0c <HAL_RCC_OscConfig+0x310>)
 8000b88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b8c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000b8e:	4b5f      	ldr	r3, [pc, #380]	@ (8000d0c <HAL_RCC_OscConfig+0x310>)
 8000b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b92:	f023 020f 	bic.w	r2, r3, #15
 8000b96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000b9a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	495a      	ldr	r1, [pc, #360]	@ (8000d0c <HAL_RCC_OscConfig+0x310>)
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ba8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000bac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d054      	beq.n	8000c62 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bb8:	f7ff fc80 	bl	80004bc <HAL_GetTick>
 8000bbc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bc0:	e00a      	b.n	8000bd8 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bc2:	f7ff fc7b 	bl	80004bc <HAL_GetTick>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	2b64      	cmp	r3, #100	@ 0x64
 8000bd0:	d902      	bls.n	8000bd8 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	f000 bf19 	b.w	8001a0a <HAL_RCC_OscConfig+0x100e>
 8000bd8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000bdc:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000be0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000be4:	fa93 f3a3 	rbit	r3, r3
 8000be8:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8000bec:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bf0:	fab3 f383 	clz	r3, r3
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	2b3f      	cmp	r3, #63	@ 0x3f
 8000bf8:	d802      	bhi.n	8000c00 <HAL_RCC_OscConfig+0x204>
 8000bfa:	4b44      	ldr	r3, [pc, #272]	@ (8000d0c <HAL_RCC_OscConfig+0x310>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	e015      	b.n	8000c2c <HAL_RCC_OscConfig+0x230>
 8000c00:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c04:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c08:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000c0c:	fa93 f3a3 	rbit	r3, r3
 8000c10:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000c14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c18:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000c1c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8000c20:	fa93 f3a3 	rbit	r3, r3
 8000c24:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8000c28:	4b38      	ldr	r3, [pc, #224]	@ (8000d0c <HAL_RCC_OscConfig+0x310>)
 8000c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c2c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000c30:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8000c34:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000c38:	fa92 f2a2 	rbit	r2, r2
 8000c3c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8000c40:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8000c44:	fab2 f282 	clz	r2, r2
 8000c48:	b2d2      	uxtb	r2, r2
 8000c4a:	f042 0220 	orr.w	r2, r2, #32
 8000c4e:	b2d2      	uxtb	r2, r2
 8000c50:	f002 021f 	and.w	r2, r2, #31
 8000c54:	2101      	movs	r1, #1
 8000c56:	fa01 f202 	lsl.w	r2, r1, r2
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d0b0      	beq.n	8000bc2 <HAL_RCC_OscConfig+0x1c6>
 8000c60:	e057      	b.n	8000d12 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c62:	f7ff fc2b 	bl	80004bc <HAL_GetTick>
 8000c66:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c6a:	e00a      	b.n	8000c82 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c6c:	f7ff fc26 	bl	80004bc <HAL_GetTick>
 8000c70:	4602      	mov	r2, r0
 8000c72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000c76:	1ad3      	subs	r3, r2, r3
 8000c78:	2b64      	cmp	r3, #100	@ 0x64
 8000c7a:	d902      	bls.n	8000c82 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	f000 bec4 	b.w	8001a0a <HAL_RCC_OscConfig+0x100e>
 8000c82:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c86:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c8a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000c8e:	fa93 f3a3 	rbit	r3, r3
 8000c92:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8000c96:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c9a:	fab3 f383 	clz	r3, r3
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ca2:	d802      	bhi.n	8000caa <HAL_RCC_OscConfig+0x2ae>
 8000ca4:	4b19      	ldr	r3, [pc, #100]	@ (8000d0c <HAL_RCC_OscConfig+0x310>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	e015      	b.n	8000cd6 <HAL_RCC_OscConfig+0x2da>
 8000caa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000cae:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cb2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8000cb6:	fa93 f3a3 	rbit	r3, r3
 8000cba:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000cbe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000cc2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8000cc6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8000cca:	fa93 f3a3 	rbit	r3, r3
 8000cce:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d0c <HAL_RCC_OscConfig+0x310>)
 8000cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cd6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000cda:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8000cde:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000ce2:	fa92 f2a2 	rbit	r2, r2
 8000ce6:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8000cea:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8000cee:	fab2 f282 	clz	r2, r2
 8000cf2:	b2d2      	uxtb	r2, r2
 8000cf4:	f042 0220 	orr.w	r2, r2, #32
 8000cf8:	b2d2      	uxtb	r2, r2
 8000cfa:	f002 021f 	and.w	r2, r2, #31
 8000cfe:	2101      	movs	r1, #1
 8000d00:	fa01 f202 	lsl.w	r2, r1, r2
 8000d04:	4013      	ands	r3, r2
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d1b0      	bne.n	8000c6c <HAL_RCC_OscConfig+0x270>
 8000d0a:	e002      	b.n	8000d12 <HAL_RCC_OscConfig+0x316>
 8000d0c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d16:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f000 816c 	beq.w	8001000 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d28:	4bcc      	ldr	r3, [pc, #816]	@ (800105c <HAL_RCC_OscConfig+0x660>)
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f003 030c 	and.w	r3, r3, #12
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d00b      	beq.n	8000d4c <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d34:	4bc9      	ldr	r3, [pc, #804]	@ (800105c <HAL_RCC_OscConfig+0x660>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f003 030c 	and.w	r3, r3, #12
 8000d3c:	2b08      	cmp	r3, #8
 8000d3e:	d16d      	bne.n	8000e1c <HAL_RCC_OscConfig+0x420>
 8000d40:	4bc6      	ldr	r3, [pc, #792]	@ (800105c <HAL_RCC_OscConfig+0x660>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d167      	bne.n	8000e1c <HAL_RCC_OscConfig+0x420>
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d52:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000d56:	fa93 f3a3 	rbit	r3, r3
 8000d5a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8000d5e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d62:	fab3 f383 	clz	r3, r3
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d6a:	d802      	bhi.n	8000d72 <HAL_RCC_OscConfig+0x376>
 8000d6c:	4bbb      	ldr	r3, [pc, #748]	@ (800105c <HAL_RCC_OscConfig+0x660>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	e013      	b.n	8000d9a <HAL_RCC_OscConfig+0x39e>
 8000d72:	2302      	movs	r3, #2
 8000d74:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d78:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8000d7c:	fa93 f3a3 	rbit	r3, r3
 8000d80:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8000d84:	2302      	movs	r3, #2
 8000d86:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8000d8a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8000d8e:	fa93 f3a3 	rbit	r3, r3
 8000d92:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8000d96:	4bb1      	ldr	r3, [pc, #708]	@ (800105c <HAL_RCC_OscConfig+0x660>)
 8000d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d9a:	2202      	movs	r2, #2
 8000d9c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8000da0:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8000da4:	fa92 f2a2 	rbit	r2, r2
 8000da8:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8000dac:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	b2d2      	uxtb	r2, r2
 8000db6:	f042 0220 	orr.w	r2, r2, #32
 8000dba:	b2d2      	uxtb	r2, r2
 8000dbc:	f002 021f 	and.w	r2, r2, #31
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d00a      	beq.n	8000de2 <HAL_RCC_OscConfig+0x3e6>
 8000dcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000dd0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	691b      	ldr	r3, [r3, #16]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d002      	beq.n	8000de2 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	f000 be14 	b.w	8001a0a <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000de2:	4b9e      	ldr	r3, [pc, #632]	@ (800105c <HAL_RCC_OscConfig+0x660>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000dea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000dee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	21f8      	movs	r1, #248	@ 0xf8
 8000df8:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dfc:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8000e00:	fa91 f1a1 	rbit	r1, r1
 8000e04:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8000e08:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8000e0c:	fab1 f181 	clz	r1, r1
 8000e10:	b2c9      	uxtb	r1, r1
 8000e12:	408b      	lsls	r3, r1
 8000e14:	4991      	ldr	r1, [pc, #580]	@ (800105c <HAL_RCC_OscConfig+0x660>)
 8000e16:	4313      	orrs	r3, r2
 8000e18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e1a:	e0f1      	b.n	8001000 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e20:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	691b      	ldr	r3, [r3, #16]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	f000 8083 	beq.w	8000f34 <HAL_RCC_OscConfig+0x538>
 8000e2e:	2301      	movs	r3, #1
 8000e30:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e34:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8000e38:	fa93 f3a3 	rbit	r3, r3
 8000e3c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8000e40:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e44:	fab3 f383 	clz	r3, r3
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8000e4e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	461a      	mov	r2, r3
 8000e56:	2301      	movs	r3, #1
 8000e58:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e5a:	f7ff fb2f 	bl	80004bc <HAL_GetTick>
 8000e5e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e62:	e00a      	b.n	8000e7a <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e64:	f7ff fb2a 	bl	80004bc <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d902      	bls.n	8000e7a <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8000e74:	2303      	movs	r3, #3
 8000e76:	f000 bdc8 	b.w	8001a0a <HAL_RCC_OscConfig+0x100e>
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e80:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8000e84:	fa93 f3a3 	rbit	r3, r3
 8000e88:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8000e8c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e90:	fab3 f383 	clz	r3, r3
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e98:	d802      	bhi.n	8000ea0 <HAL_RCC_OscConfig+0x4a4>
 8000e9a:	4b70      	ldr	r3, [pc, #448]	@ (800105c <HAL_RCC_OscConfig+0x660>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	e013      	b.n	8000ec8 <HAL_RCC_OscConfig+0x4cc>
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8000eaa:	fa93 f3a3 	rbit	r3, r3
 8000eae:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8000eb8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8000ebc:	fa93 f3a3 	rbit	r3, r3
 8000ec0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8000ec4:	4b65      	ldr	r3, [pc, #404]	@ (800105c <HAL_RCC_OscConfig+0x660>)
 8000ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ec8:	2202      	movs	r2, #2
 8000eca:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8000ece:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8000ed2:	fa92 f2a2 	rbit	r2, r2
 8000ed6:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8000eda:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8000ede:	fab2 f282 	clz	r2, r2
 8000ee2:	b2d2      	uxtb	r2, r2
 8000ee4:	f042 0220 	orr.w	r2, r2, #32
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	f002 021f 	and.w	r2, r2, #31
 8000eee:	2101      	movs	r1, #1
 8000ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d0b4      	beq.n	8000e64 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000efa:	4b58      	ldr	r3, [pc, #352]	@ (800105c <HAL_RCC_OscConfig+0x660>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	695b      	ldr	r3, [r3, #20]
 8000f0e:	21f8      	movs	r1, #248	@ 0xf8
 8000f10:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f14:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8000f18:	fa91 f1a1 	rbit	r1, r1
 8000f1c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8000f20:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8000f24:	fab1 f181 	clz	r1, r1
 8000f28:	b2c9      	uxtb	r1, r1
 8000f2a:	408b      	lsls	r3, r1
 8000f2c:	494b      	ldr	r1, [pc, #300]	@ (800105c <HAL_RCC_OscConfig+0x660>)
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	600b      	str	r3, [r1, #0]
 8000f32:	e065      	b.n	8001000 <HAL_RCC_OscConfig+0x604>
 8000f34:	2301      	movs	r3, #1
 8000f36:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f3a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8000f3e:	fa93 f3a3 	rbit	r3, r3
 8000f42:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8000f46:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f4a:	fab3 f383 	clz	r3, r3
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8000f54:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f60:	f7ff faac 	bl	80004bc <HAL_GetTick>
 8000f64:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f68:	e00a      	b.n	8000f80 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f6a:	f7ff faa7 	bl	80004bc <HAL_GetTick>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d902      	bls.n	8000f80 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	f000 bd45 	b.w	8001a0a <HAL_RCC_OscConfig+0x100e>
 8000f80:	2302      	movs	r3, #2
 8000f82:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f86:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000f8a:	fa93 f3a3 	rbit	r3, r3
 8000f8e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8000f92:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f96:	fab3 f383 	clz	r3, r3
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f9e:	d802      	bhi.n	8000fa6 <HAL_RCC_OscConfig+0x5aa>
 8000fa0:	4b2e      	ldr	r3, [pc, #184]	@ (800105c <HAL_RCC_OscConfig+0x660>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	e013      	b.n	8000fce <HAL_RCC_OscConfig+0x5d2>
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000fb0:	fa93 f3a3 	rbit	r3, r3
 8000fb4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8000fb8:	2302      	movs	r3, #2
 8000fba:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8000fbe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000fc2:	fa93 f3a3 	rbit	r3, r3
 8000fc6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8000fca:	4b24      	ldr	r3, [pc, #144]	@ (800105c <HAL_RCC_OscConfig+0x660>)
 8000fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fce:	2202      	movs	r2, #2
 8000fd0:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8000fd4:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8000fd8:	fa92 f2a2 	rbit	r2, r2
 8000fdc:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8000fe0:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000fe4:	fab2 f282 	clz	r2, r2
 8000fe8:	b2d2      	uxtb	r2, r2
 8000fea:	f042 0220 	orr.w	r2, r2, #32
 8000fee:	b2d2      	uxtb	r2, r2
 8000ff0:	f002 021f 	and.w	r2, r2, #31
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d1b4      	bne.n	8000f6a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001000:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001004:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 0308 	and.w	r3, r3, #8
 8001010:	2b00      	cmp	r3, #0
 8001012:	f000 8115 	beq.w	8001240 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001016:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800101a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d07e      	beq.n	8001124 <HAL_RCC_OscConfig+0x728>
 8001026:	2301      	movs	r3, #1
 8001028:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001030:	fa93 f3a3 	rbit	r3, r3
 8001034:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001038:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800103c:	fab3 f383 	clz	r3, r3
 8001040:	b2db      	uxtb	r3, r3
 8001042:	461a      	mov	r2, r3
 8001044:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <HAL_RCC_OscConfig+0x664>)
 8001046:	4413      	add	r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	461a      	mov	r2, r3
 800104c:	2301      	movs	r3, #1
 800104e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001050:	f7ff fa34 	bl	80004bc <HAL_GetTick>
 8001054:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001058:	e00f      	b.n	800107a <HAL_RCC_OscConfig+0x67e>
 800105a:	bf00      	nop
 800105c:	40021000 	.word	0x40021000
 8001060:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001064:	f7ff fa2a 	bl	80004bc <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	2b02      	cmp	r3, #2
 8001072:	d902      	bls.n	800107a <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8001074:	2303      	movs	r3, #3
 8001076:	f000 bcc8 	b.w	8001a0a <HAL_RCC_OscConfig+0x100e>
 800107a:	2302      	movs	r3, #2
 800107c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001080:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001084:	fa93 f3a3 	rbit	r3, r3
 8001088:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800108c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001090:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001094:	2202      	movs	r2, #2
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800109c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	fa93 f2a3 	rbit	r2, r3
 80010a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80010b8:	2202      	movs	r2, #2
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	fa93 f2a3 	rbit	r2, r3
 80010ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010ce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80010d2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010d4:	4bb0      	ldr	r3, [pc, #704]	@ (8001398 <HAL_RCC_OscConfig+0x99c>)
 80010d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010dc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80010e0:	2102      	movs	r1, #2
 80010e2:	6019      	str	r1, [r3, #0]
 80010e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010e8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	fa93 f1a3 	rbit	r1, r3
 80010f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010f6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80010fa:	6019      	str	r1, [r3, #0]
  return result;
 80010fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001100:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	fab3 f383 	clz	r3, r3
 800110a:	b2db      	uxtb	r3, r3
 800110c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001110:	b2db      	uxtb	r3, r3
 8001112:	f003 031f 	and.w	r3, r3, #31
 8001116:	2101      	movs	r1, #1
 8001118:	fa01 f303 	lsl.w	r3, r1, r3
 800111c:	4013      	ands	r3, r2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d0a0      	beq.n	8001064 <HAL_RCC_OscConfig+0x668>
 8001122:	e08d      	b.n	8001240 <HAL_RCC_OscConfig+0x844>
 8001124:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001128:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800112c:	2201      	movs	r2, #1
 800112e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001130:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001134:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	fa93 f2a3 	rbit	r2, r3
 800113e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001142:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001146:	601a      	str	r2, [r3, #0]
  return result;
 8001148:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800114c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001150:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001152:	fab3 f383 	clz	r3, r3
 8001156:	b2db      	uxtb	r3, r3
 8001158:	461a      	mov	r2, r3
 800115a:	4b90      	ldr	r3, [pc, #576]	@ (800139c <HAL_RCC_OscConfig+0x9a0>)
 800115c:	4413      	add	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	461a      	mov	r2, r3
 8001162:	2300      	movs	r3, #0
 8001164:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001166:	f7ff f9a9 	bl	80004bc <HAL_GetTick>
 800116a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800116e:	e00a      	b.n	8001186 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001170:	f7ff f9a4 	bl	80004bc <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d902      	bls.n	8001186 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	f000 bc42 	b.w	8001a0a <HAL_RCC_OscConfig+0x100e>
 8001186:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800118a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800118e:	2202      	movs	r2, #2
 8001190:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001192:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001196:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	fa93 f2a3 	rbit	r2, r3
 80011a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011a4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011ae:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80011b2:	2202      	movs	r2, #2
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011ba:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	fa93 f2a3 	rbit	r2, r3
 80011c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011d2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80011d6:	2202      	movs	r2, #2
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011de:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	fa93 f2a3 	rbit	r2, r3
 80011e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011ec:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80011f0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011f2:	4b69      	ldr	r3, [pc, #420]	@ (8001398 <HAL_RCC_OscConfig+0x99c>)
 80011f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011fa:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80011fe:	2102      	movs	r1, #2
 8001200:	6019      	str	r1, [r3, #0]
 8001202:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001206:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	fa93 f1a3 	rbit	r1, r3
 8001210:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001214:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001218:	6019      	str	r1, [r3, #0]
  return result;
 800121a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800121e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	fab3 f383 	clz	r3, r3
 8001228:	b2db      	uxtb	r3, r3
 800122a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800122e:	b2db      	uxtb	r3, r3
 8001230:	f003 031f 	and.w	r3, r3, #31
 8001234:	2101      	movs	r1, #1
 8001236:	fa01 f303 	lsl.w	r3, r1, r3
 800123a:	4013      	ands	r3, r2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d197      	bne.n	8001170 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001240:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001244:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0304 	and.w	r3, r3, #4
 8001250:	2b00      	cmp	r3, #0
 8001252:	f000 819e 	beq.w	8001592 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001256:	2300      	movs	r3, #0
 8001258:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800125c:	4b4e      	ldr	r3, [pc, #312]	@ (8001398 <HAL_RCC_OscConfig+0x99c>)
 800125e:	69db      	ldr	r3, [r3, #28]
 8001260:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d116      	bne.n	8001296 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001268:	4b4b      	ldr	r3, [pc, #300]	@ (8001398 <HAL_RCC_OscConfig+0x99c>)
 800126a:	69db      	ldr	r3, [r3, #28]
 800126c:	4a4a      	ldr	r2, [pc, #296]	@ (8001398 <HAL_RCC_OscConfig+0x99c>)
 800126e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001272:	61d3      	str	r3, [r2, #28]
 8001274:	4b48      	ldr	r3, [pc, #288]	@ (8001398 <HAL_RCC_OscConfig+0x99c>)
 8001276:	69db      	ldr	r3, [r3, #28]
 8001278:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800127c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001280:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800128a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800128e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001290:	2301      	movs	r3, #1
 8001292:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001296:	4b42      	ldr	r3, [pc, #264]	@ (80013a0 <HAL_RCC_OscConfig+0x9a4>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d11a      	bne.n	80012d8 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012a2:	4b3f      	ldr	r3, [pc, #252]	@ (80013a0 <HAL_RCC_OscConfig+0x9a4>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a3e      	ldr	r2, [pc, #248]	@ (80013a0 <HAL_RCC_OscConfig+0x9a4>)
 80012a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012ae:	f7ff f905 	bl	80004bc <HAL_GetTick>
 80012b2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b6:	e009      	b.n	80012cc <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012b8:	f7ff f900 	bl	80004bc <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b64      	cmp	r3, #100	@ 0x64
 80012c6:	d901      	bls.n	80012cc <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e39e      	b.n	8001a0a <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012cc:	4b34      	ldr	r3, [pc, #208]	@ (80013a0 <HAL_RCC_OscConfig+0x9a4>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d0ef      	beq.n	80012b8 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d106      	bne.n	80012f6 <HAL_RCC_OscConfig+0x8fa>
 80012e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001398 <HAL_RCC_OscConfig+0x99c>)
 80012ea:	6a1b      	ldr	r3, [r3, #32]
 80012ec:	4a2a      	ldr	r2, [pc, #168]	@ (8001398 <HAL_RCC_OscConfig+0x99c>)
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	6213      	str	r3, [r2, #32]
 80012f4:	e035      	b.n	8001362 <HAL_RCC_OscConfig+0x966>
 80012f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d10c      	bne.n	8001320 <HAL_RCC_OscConfig+0x924>
 8001306:	4b24      	ldr	r3, [pc, #144]	@ (8001398 <HAL_RCC_OscConfig+0x99c>)
 8001308:	6a1b      	ldr	r3, [r3, #32]
 800130a:	4a23      	ldr	r2, [pc, #140]	@ (8001398 <HAL_RCC_OscConfig+0x99c>)
 800130c:	f023 0301 	bic.w	r3, r3, #1
 8001310:	6213      	str	r3, [r2, #32]
 8001312:	4b21      	ldr	r3, [pc, #132]	@ (8001398 <HAL_RCC_OscConfig+0x99c>)
 8001314:	6a1b      	ldr	r3, [r3, #32]
 8001316:	4a20      	ldr	r2, [pc, #128]	@ (8001398 <HAL_RCC_OscConfig+0x99c>)
 8001318:	f023 0304 	bic.w	r3, r3, #4
 800131c:	6213      	str	r3, [r2, #32]
 800131e:	e020      	b.n	8001362 <HAL_RCC_OscConfig+0x966>
 8001320:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001324:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	2b05      	cmp	r3, #5
 800132e:	d10c      	bne.n	800134a <HAL_RCC_OscConfig+0x94e>
 8001330:	4b19      	ldr	r3, [pc, #100]	@ (8001398 <HAL_RCC_OscConfig+0x99c>)
 8001332:	6a1b      	ldr	r3, [r3, #32]
 8001334:	4a18      	ldr	r2, [pc, #96]	@ (8001398 <HAL_RCC_OscConfig+0x99c>)
 8001336:	f043 0304 	orr.w	r3, r3, #4
 800133a:	6213      	str	r3, [r2, #32]
 800133c:	4b16      	ldr	r3, [pc, #88]	@ (8001398 <HAL_RCC_OscConfig+0x99c>)
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	4a15      	ldr	r2, [pc, #84]	@ (8001398 <HAL_RCC_OscConfig+0x99c>)
 8001342:	f043 0301 	orr.w	r3, r3, #1
 8001346:	6213      	str	r3, [r2, #32]
 8001348:	e00b      	b.n	8001362 <HAL_RCC_OscConfig+0x966>
 800134a:	4b13      	ldr	r3, [pc, #76]	@ (8001398 <HAL_RCC_OscConfig+0x99c>)
 800134c:	6a1b      	ldr	r3, [r3, #32]
 800134e:	4a12      	ldr	r2, [pc, #72]	@ (8001398 <HAL_RCC_OscConfig+0x99c>)
 8001350:	f023 0301 	bic.w	r3, r3, #1
 8001354:	6213      	str	r3, [r2, #32]
 8001356:	4b10      	ldr	r3, [pc, #64]	@ (8001398 <HAL_RCC_OscConfig+0x99c>)
 8001358:	6a1b      	ldr	r3, [r3, #32]
 800135a:	4a0f      	ldr	r2, [pc, #60]	@ (8001398 <HAL_RCC_OscConfig+0x99c>)
 800135c:	f023 0304 	bic.w	r3, r3, #4
 8001360:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001362:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001366:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	2b00      	cmp	r3, #0
 8001370:	f000 8087 	beq.w	8001482 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001374:	f7ff f8a2 	bl	80004bc <HAL_GetTick>
 8001378:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800137c:	e012      	b.n	80013a4 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800137e:	f7ff f89d 	bl	80004bc <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800138e:	4293      	cmp	r3, r2
 8001390:	d908      	bls.n	80013a4 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e339      	b.n	8001a0a <HAL_RCC_OscConfig+0x100e>
 8001396:	bf00      	nop
 8001398:	40021000 	.word	0x40021000
 800139c:	10908120 	.word	0x10908120
 80013a0:	40007000 	.word	0x40007000
 80013a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013a8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80013ac:	2202      	movs	r2, #2
 80013ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013b4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	fa93 f2a3 	rbit	r2, r3
 80013be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013c2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013cc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80013d0:	2202      	movs	r2, #2
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013d8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	fa93 f2a3 	rbit	r2, r3
 80013e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013e6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80013ea:	601a      	str	r2, [r3, #0]
  return result;
 80013ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013f0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80013f4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f6:	fab3 f383 	clz	r3, r3
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d102      	bne.n	800140c <HAL_RCC_OscConfig+0xa10>
 8001406:	4b98      	ldr	r3, [pc, #608]	@ (8001668 <HAL_RCC_OscConfig+0xc6c>)
 8001408:	6a1b      	ldr	r3, [r3, #32]
 800140a:	e013      	b.n	8001434 <HAL_RCC_OscConfig+0xa38>
 800140c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001410:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001414:	2202      	movs	r2, #2
 8001416:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001418:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800141c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	fa93 f2a3 	rbit	r2, r3
 8001426:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800142a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	4b8d      	ldr	r3, [pc, #564]	@ (8001668 <HAL_RCC_OscConfig+0xc6c>)
 8001432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001434:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001438:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800143c:	2102      	movs	r1, #2
 800143e:	6011      	str	r1, [r2, #0]
 8001440:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001444:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001448:	6812      	ldr	r2, [r2, #0]
 800144a:	fa92 f1a2 	rbit	r1, r2
 800144e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001452:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001456:	6011      	str	r1, [r2, #0]
  return result;
 8001458:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800145c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001460:	6812      	ldr	r2, [r2, #0]
 8001462:	fab2 f282 	clz	r2, r2
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	f002 021f 	and.w	r2, r2, #31
 8001472:	2101      	movs	r1, #1
 8001474:	fa01 f202 	lsl.w	r2, r1, r2
 8001478:	4013      	ands	r3, r2
 800147a:	2b00      	cmp	r3, #0
 800147c:	f43f af7f 	beq.w	800137e <HAL_RCC_OscConfig+0x982>
 8001480:	e07d      	b.n	800157e <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001482:	f7ff f81b 	bl	80004bc <HAL_GetTick>
 8001486:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800148a:	e00b      	b.n	80014a4 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800148c:	f7ff f816 	bl	80004bc <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	f241 3288 	movw	r2, #5000	@ 0x1388
 800149c:	4293      	cmp	r3, r2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e2b2      	b.n	8001a0a <HAL_RCC_OscConfig+0x100e>
 80014a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014a8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80014ac:	2202      	movs	r2, #2
 80014ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014b4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	fa93 f2a3 	rbit	r2, r3
 80014be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014c2:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014cc:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80014d0:	2202      	movs	r2, #2
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014d8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	fa93 f2a3 	rbit	r2, r3
 80014e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014e6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80014ea:	601a      	str	r2, [r3, #0]
  return result;
 80014ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014f0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80014f4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014f6:	fab3 f383 	clz	r3, r3
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	d102      	bne.n	800150c <HAL_RCC_OscConfig+0xb10>
 8001506:	4b58      	ldr	r3, [pc, #352]	@ (8001668 <HAL_RCC_OscConfig+0xc6c>)
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	e013      	b.n	8001534 <HAL_RCC_OscConfig+0xb38>
 800150c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001510:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001514:	2202      	movs	r2, #2
 8001516:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001518:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800151c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	fa93 f2a3 	rbit	r2, r3
 8001526:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800152a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	4b4d      	ldr	r3, [pc, #308]	@ (8001668 <HAL_RCC_OscConfig+0xc6c>)
 8001532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001534:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001538:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800153c:	2102      	movs	r1, #2
 800153e:	6011      	str	r1, [r2, #0]
 8001540:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001544:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001548:	6812      	ldr	r2, [r2, #0]
 800154a:	fa92 f1a2 	rbit	r1, r2
 800154e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001552:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001556:	6011      	str	r1, [r2, #0]
  return result;
 8001558:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800155c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001560:	6812      	ldr	r2, [r2, #0]
 8001562:	fab2 f282 	clz	r2, r2
 8001566:	b2d2      	uxtb	r2, r2
 8001568:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	f002 021f 	and.w	r2, r2, #31
 8001572:	2101      	movs	r1, #1
 8001574:	fa01 f202 	lsl.w	r2, r1, r2
 8001578:	4013      	ands	r3, r2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d186      	bne.n	800148c <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800157e:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001582:	2b01      	cmp	r3, #1
 8001584:	d105      	bne.n	8001592 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001586:	4b38      	ldr	r3, [pc, #224]	@ (8001668 <HAL_RCC_OscConfig+0xc6c>)
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	4a37      	ldr	r2, [pc, #220]	@ (8001668 <HAL_RCC_OscConfig+0xc6c>)
 800158c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001590:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001592:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001596:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f000 8232 	beq.w	8001a08 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015a4:	4b30      	ldr	r3, [pc, #192]	@ (8001668 <HAL_RCC_OscConfig+0xc6c>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 030c 	and.w	r3, r3, #12
 80015ac:	2b08      	cmp	r3, #8
 80015ae:	f000 8201 	beq.w	80019b4 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	2b02      	cmp	r3, #2
 80015c0:	f040 8157 	bne.w	8001872 <HAL_RCC_OscConfig+0xe76>
 80015c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015c8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80015cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80015d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015d6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	fa93 f2a3 	rbit	r2, r3
 80015e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015e4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80015e8:	601a      	str	r2, [r3, #0]
  return result;
 80015ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015ee:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80015f2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f4:	fab3 f383 	clz	r3, r3
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80015fe:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	461a      	mov	r2, r3
 8001606:	2300      	movs	r3, #0
 8001608:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160a:	f7fe ff57 	bl	80004bc <HAL_GetTick>
 800160e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001612:	e009      	b.n	8001628 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001614:	f7fe ff52 	bl	80004bc <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e1f0      	b.n	8001a0a <HAL_RCC_OscConfig+0x100e>
 8001628:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800162c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001630:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001634:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001636:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800163a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	fa93 f2a3 	rbit	r2, r3
 8001644:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001648:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800164c:	601a      	str	r2, [r3, #0]
  return result;
 800164e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001652:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001656:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001658:	fab3 f383 	clz	r3, r3
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001660:	d804      	bhi.n	800166c <HAL_RCC_OscConfig+0xc70>
 8001662:	4b01      	ldr	r3, [pc, #4]	@ (8001668 <HAL_RCC_OscConfig+0xc6c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	e029      	b.n	80016bc <HAL_RCC_OscConfig+0xcc0>
 8001668:	40021000 	.word	0x40021000
 800166c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001670:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001674:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001678:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800167e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	fa93 f2a3 	rbit	r2, r3
 8001688:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800168c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001696:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800169a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016a4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	fa93 f2a3 	rbit	r2, r3
 80016ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016b2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	4bc3      	ldr	r3, [pc, #780]	@ (80019c8 <HAL_RCC_OscConfig+0xfcc>)
 80016ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016bc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80016c0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80016c4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80016c8:	6011      	str	r1, [r2, #0]
 80016ca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80016ce:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80016d2:	6812      	ldr	r2, [r2, #0]
 80016d4:	fa92 f1a2 	rbit	r1, r2
 80016d8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80016dc:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80016e0:	6011      	str	r1, [r2, #0]
  return result;
 80016e2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80016e6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80016ea:	6812      	ldr	r2, [r2, #0]
 80016ec:	fab2 f282 	clz	r2, r2
 80016f0:	b2d2      	uxtb	r2, r2
 80016f2:	f042 0220 	orr.w	r2, r2, #32
 80016f6:	b2d2      	uxtb	r2, r2
 80016f8:	f002 021f 	and.w	r2, r2, #31
 80016fc:	2101      	movs	r1, #1
 80016fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001702:	4013      	ands	r3, r2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d185      	bne.n	8001614 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001708:	4baf      	ldr	r3, [pc, #700]	@ (80019c8 <HAL_RCC_OscConfig+0xfcc>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001710:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001714:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800171c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001720:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	430b      	orrs	r3, r1
 800172a:	49a7      	ldr	r1, [pc, #668]	@ (80019c8 <HAL_RCC_OscConfig+0xfcc>)
 800172c:	4313      	orrs	r3, r2
 800172e:	604b      	str	r3, [r1, #4]
 8001730:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001734:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001738:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800173c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001742:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	fa93 f2a3 	rbit	r2, r3
 800174c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001750:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001754:	601a      	str	r2, [r3, #0]
  return result;
 8001756:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800175a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800175e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001760:	fab3 f383 	clz	r3, r3
 8001764:	b2db      	uxtb	r3, r3
 8001766:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800176a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	461a      	mov	r2, r3
 8001772:	2301      	movs	r3, #1
 8001774:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001776:	f7fe fea1 	bl	80004bc <HAL_GetTick>
 800177a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800177e:	e009      	b.n	8001794 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001780:	f7fe fe9c 	bl	80004bc <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e13a      	b.n	8001a0a <HAL_RCC_OscConfig+0x100e>
 8001794:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001798:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800179c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017a6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	fa93 f2a3 	rbit	r2, r3
 80017b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017b4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80017b8:	601a      	str	r2, [r3, #0]
  return result;
 80017ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017be:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80017c2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017c4:	fab3 f383 	clz	r3, r3
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b3f      	cmp	r3, #63	@ 0x3f
 80017cc:	d802      	bhi.n	80017d4 <HAL_RCC_OscConfig+0xdd8>
 80017ce:	4b7e      	ldr	r3, [pc, #504]	@ (80019c8 <HAL_RCC_OscConfig+0xfcc>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	e027      	b.n	8001824 <HAL_RCC_OscConfig+0xe28>
 80017d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017d8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80017dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017e6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	fa93 f2a3 	rbit	r2, r3
 80017f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017f4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017fe:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001802:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800180c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	fa93 f2a3 	rbit	r2, r3
 8001816:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800181a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	4b69      	ldr	r3, [pc, #420]	@ (80019c8 <HAL_RCC_OscConfig+0xfcc>)
 8001822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001824:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001828:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800182c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001830:	6011      	str	r1, [r2, #0]
 8001832:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001836:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800183a:	6812      	ldr	r2, [r2, #0]
 800183c:	fa92 f1a2 	rbit	r1, r2
 8001840:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001844:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001848:	6011      	str	r1, [r2, #0]
  return result;
 800184a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800184e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001852:	6812      	ldr	r2, [r2, #0]
 8001854:	fab2 f282 	clz	r2, r2
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	f042 0220 	orr.w	r2, r2, #32
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	f002 021f 	and.w	r2, r2, #31
 8001864:	2101      	movs	r1, #1
 8001866:	fa01 f202 	lsl.w	r2, r1, r2
 800186a:	4013      	ands	r3, r2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d087      	beq.n	8001780 <HAL_RCC_OscConfig+0xd84>
 8001870:	e0ca      	b.n	8001a08 <HAL_RCC_OscConfig+0x100c>
 8001872:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001876:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800187a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800187e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001880:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001884:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	fa93 f2a3 	rbit	r2, r3
 800188e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001892:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001896:	601a      	str	r2, [r3, #0]
  return result;
 8001898:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800189c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80018a0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a2:	fab3 f383 	clz	r3, r3
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80018ac:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	461a      	mov	r2, r3
 80018b4:	2300      	movs	r3, #0
 80018b6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b8:	f7fe fe00 	bl	80004bc <HAL_GetTick>
 80018bc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018c0:	e009      	b.n	80018d6 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c2:	f7fe fdfb 	bl	80004bc <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e099      	b.n	8001a0a <HAL_RCC_OscConfig+0x100e>
 80018d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018da:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80018de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018e8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	fa93 f2a3 	rbit	r2, r3
 80018f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018f6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80018fa:	601a      	str	r2, [r3, #0]
  return result;
 80018fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001900:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001904:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001906:	fab3 f383 	clz	r3, r3
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b3f      	cmp	r3, #63	@ 0x3f
 800190e:	d802      	bhi.n	8001916 <HAL_RCC_OscConfig+0xf1a>
 8001910:	4b2d      	ldr	r3, [pc, #180]	@ (80019c8 <HAL_RCC_OscConfig+0xfcc>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	e027      	b.n	8001966 <HAL_RCC_OscConfig+0xf6a>
 8001916:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800191a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800191e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001922:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001924:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001928:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	fa93 f2a3 	rbit	r2, r3
 8001932:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001936:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001940:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001944:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800194e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	fa93 f2a3 	rbit	r2, r3
 8001958:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800195c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	4b19      	ldr	r3, [pc, #100]	@ (80019c8 <HAL_RCC_OscConfig+0xfcc>)
 8001964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001966:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800196a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800196e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001972:	6011      	str	r1, [r2, #0]
 8001974:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001978:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800197c:	6812      	ldr	r2, [r2, #0]
 800197e:	fa92 f1a2 	rbit	r1, r2
 8001982:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001986:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800198a:	6011      	str	r1, [r2, #0]
  return result;
 800198c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001990:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001994:	6812      	ldr	r2, [r2, #0]
 8001996:	fab2 f282 	clz	r2, r2
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	f042 0220 	orr.w	r2, r2, #32
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	f002 021f 	and.w	r2, r2, #31
 80019a6:	2101      	movs	r1, #1
 80019a8:	fa01 f202 	lsl.w	r2, r1, r2
 80019ac:	4013      	ands	r3, r2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d187      	bne.n	80018c2 <HAL_RCC_OscConfig+0xec6>
 80019b2:	e029      	b.n	8001a08 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	69db      	ldr	r3, [r3, #28]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d103      	bne.n	80019cc <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e020      	b.n	8001a0a <HAL_RCC_OscConfig+0x100e>
 80019c8:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019cc:	4b11      	ldr	r3, [pc, #68]	@ (8001a14 <HAL_RCC_OscConfig+0x1018>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80019d4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80019d8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80019dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d10b      	bne.n	8001a04 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80019ec:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80019f0:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80019f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d001      	beq.n	8001a08 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e000      	b.n	8001a0a <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40021000 	.word	0x40021000

08001a18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b09e      	sub	sp, #120	@ 0x78
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e154      	b.n	8001cda <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a30:	4b89      	ldr	r3, [pc, #548]	@ (8001c58 <HAL_RCC_ClockConfig+0x240>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0307 	and.w	r3, r3, #7
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d910      	bls.n	8001a60 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3e:	4b86      	ldr	r3, [pc, #536]	@ (8001c58 <HAL_RCC_ClockConfig+0x240>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f023 0207 	bic.w	r2, r3, #7
 8001a46:	4984      	ldr	r1, [pc, #528]	@ (8001c58 <HAL_RCC_ClockConfig+0x240>)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4e:	4b82      	ldr	r3, [pc, #520]	@ (8001c58 <HAL_RCC_ClockConfig+0x240>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d001      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e13c      	b.n	8001cda <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d008      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a6c:	4b7b      	ldr	r3, [pc, #492]	@ (8001c5c <HAL_RCC_ClockConfig+0x244>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	4978      	ldr	r1, [pc, #480]	@ (8001c5c <HAL_RCC_ClockConfig+0x244>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 80cd 	beq.w	8001c26 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d137      	bne.n	8001b04 <HAL_RCC_ClockConfig+0xec>
 8001a94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a98:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001a9c:	fa93 f3a3 	rbit	r3, r3
 8001aa0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001aa2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa4:	fab3 f383 	clz	r3, r3
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b3f      	cmp	r3, #63	@ 0x3f
 8001aac:	d802      	bhi.n	8001ab4 <HAL_RCC_ClockConfig+0x9c>
 8001aae:	4b6b      	ldr	r3, [pc, #428]	@ (8001c5c <HAL_RCC_ClockConfig+0x244>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	e00f      	b.n	8001ad4 <HAL_RCC_ClockConfig+0xbc>
 8001ab4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ab8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001abc:	fa93 f3a3 	rbit	r3, r3
 8001ac0:	667b      	str	r3, [r7, #100]	@ 0x64
 8001ac2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ac6:	663b      	str	r3, [r7, #96]	@ 0x60
 8001ac8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001aca:	fa93 f3a3 	rbit	r3, r3
 8001ace:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001ad0:	4b62      	ldr	r3, [pc, #392]	@ (8001c5c <HAL_RCC_ClockConfig+0x244>)
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ad8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001ada:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001adc:	fa92 f2a2 	rbit	r2, r2
 8001ae0:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001ae2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001ae4:	fab2 f282 	clz	r2, r2
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	f042 0220 	orr.w	r2, r2, #32
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	f002 021f 	and.w	r2, r2, #31
 8001af4:	2101      	movs	r1, #1
 8001af6:	fa01 f202 	lsl.w	r2, r1, r2
 8001afa:	4013      	ands	r3, r2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d171      	bne.n	8001be4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0ea      	b.n	8001cda <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d137      	bne.n	8001b7c <HAL_RCC_ClockConfig+0x164>
 8001b0c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b10:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b14:	fa93 f3a3 	rbit	r3, r3
 8001b18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001b1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b1c:	fab3 f383 	clz	r3, r3
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b24:	d802      	bhi.n	8001b2c <HAL_RCC_ClockConfig+0x114>
 8001b26:	4b4d      	ldr	r3, [pc, #308]	@ (8001c5c <HAL_RCC_ClockConfig+0x244>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	e00f      	b.n	8001b4c <HAL_RCC_ClockConfig+0x134>
 8001b2c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b30:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b34:	fa93 f3a3 	rbit	r3, r3
 8001b38:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8001b40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b42:	fa93 f3a3 	rbit	r3, r3
 8001b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b48:	4b44      	ldr	r3, [pc, #272]	@ (8001c5c <HAL_RCC_ClockConfig+0x244>)
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b50:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001b52:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001b54:	fa92 f2a2 	rbit	r2, r2
 8001b58:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001b5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b5c:	fab2 f282 	clz	r2, r2
 8001b60:	b2d2      	uxtb	r2, r2
 8001b62:	f042 0220 	orr.w	r2, r2, #32
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	f002 021f 	and.w	r2, r2, #31
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b72:	4013      	ands	r3, r2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d135      	bne.n	8001be4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e0ae      	b.n	8001cda <HAL_RCC_ClockConfig+0x2c2>
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b82:	fa93 f3a3 	rbit	r3, r3
 8001b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b8a:	fab3 f383 	clz	r3, r3
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b92:	d802      	bhi.n	8001b9a <HAL_RCC_ClockConfig+0x182>
 8001b94:	4b31      	ldr	r3, [pc, #196]	@ (8001c5c <HAL_RCC_ClockConfig+0x244>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	e00d      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x19e>
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ba0:	fa93 f3a3 	rbit	r3, r3
 8001ba4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	623b      	str	r3, [r7, #32]
 8001baa:	6a3b      	ldr	r3, [r7, #32]
 8001bac:	fa93 f3a3 	rbit	r3, r3
 8001bb0:	61fb      	str	r3, [r7, #28]
 8001bb2:	4b2a      	ldr	r3, [pc, #168]	@ (8001c5c <HAL_RCC_ClockConfig+0x244>)
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	61ba      	str	r2, [r7, #24]
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	fa92 f2a2 	rbit	r2, r2
 8001bc0:	617a      	str	r2, [r7, #20]
  return result;
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	fab2 f282 	clz	r2, r2
 8001bc8:	b2d2      	uxtb	r2, r2
 8001bca:	f042 0220 	orr.w	r2, r2, #32
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	f002 021f 	and.w	r2, r2, #31
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bda:	4013      	ands	r3, r2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d101      	bne.n	8001be4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e07a      	b.n	8001cda <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001be4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c5c <HAL_RCC_ClockConfig+0x244>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f023 0203 	bic.w	r2, r3, #3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	491a      	ldr	r1, [pc, #104]	@ (8001c5c <HAL_RCC_ClockConfig+0x244>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bf6:	f7fe fc61 	bl	80004bc <HAL_GetTick>
 8001bfa:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bfc:	e00a      	b.n	8001c14 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bfe:	f7fe fc5d 	bl	80004bc <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e062      	b.n	8001cda <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c14:	4b11      	ldr	r3, [pc, #68]	@ (8001c5c <HAL_RCC_ClockConfig+0x244>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 020c 	and.w	r2, r3, #12
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d1eb      	bne.n	8001bfe <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c26:	4b0c      	ldr	r3, [pc, #48]	@ (8001c58 <HAL_RCC_ClockConfig+0x240>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d215      	bcs.n	8001c60 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c34:	4b08      	ldr	r3, [pc, #32]	@ (8001c58 <HAL_RCC_ClockConfig+0x240>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f023 0207 	bic.w	r2, r3, #7
 8001c3c:	4906      	ldr	r1, [pc, #24]	@ (8001c58 <HAL_RCC_ClockConfig+0x240>)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c44:	4b04      	ldr	r3, [pc, #16]	@ (8001c58 <HAL_RCC_ClockConfig+0x240>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d006      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e041      	b.n	8001cda <HAL_RCC_ClockConfig+0x2c2>
 8001c56:	bf00      	nop
 8001c58:	40022000 	.word	0x40022000
 8001c5c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d008      	beq.n	8001c7e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ce4 <HAL_RCC_ClockConfig+0x2cc>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	491a      	ldr	r1, [pc, #104]	@ (8001ce4 <HAL_RCC_ClockConfig+0x2cc>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d009      	beq.n	8001c9e <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c8a:	4b16      	ldr	r3, [pc, #88]	@ (8001ce4 <HAL_RCC_ClockConfig+0x2cc>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	4912      	ldr	r1, [pc, #72]	@ (8001ce4 <HAL_RCC_ClockConfig+0x2cc>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c9e:	f000 f829 	bl	8001cf4 <HAL_RCC_GetSysClockFreq>
 8001ca2:	4601      	mov	r1, r0
 8001ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce4 <HAL_RCC_ClockConfig+0x2cc>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cac:	22f0      	movs	r2, #240	@ 0xf0
 8001cae:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	fa92 f2a2 	rbit	r2, r2
 8001cb6:	60fa      	str	r2, [r7, #12]
  return result;
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	fab2 f282 	clz	r2, r2
 8001cbe:	b2d2      	uxtb	r2, r2
 8001cc0:	40d3      	lsrs	r3, r2
 8001cc2:	4a09      	ldr	r2, [pc, #36]	@ (8001ce8 <HAL_RCC_ClockConfig+0x2d0>)
 8001cc4:	5cd3      	ldrb	r3, [r2, r3]
 8001cc6:	fa21 f303 	lsr.w	r3, r1, r3
 8001cca:	4a08      	ldr	r2, [pc, #32]	@ (8001cec <HAL_RCC_ClockConfig+0x2d4>)
 8001ccc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001cce:	4b08      	ldr	r3, [pc, #32]	@ (8001cf0 <HAL_RCC_ClockConfig+0x2d8>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7fe fbae 	bl	8000434 <HAL_InitTick>
  
  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3778      	adds	r7, #120	@ 0x78
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	08001e0c 	.word	0x08001e0c
 8001cec:	20000000 	.word	0x20000000
 8001cf0:	20000004 	.word	0x20000004

08001cf4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b087      	sub	sp, #28
 8001cf8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60bb      	str	r3, [r7, #8]
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]
 8001d06:	2300      	movs	r3, #0
 8001d08:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8001d88 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f003 030c 	and.w	r3, r3, #12
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	d002      	beq.n	8001d24 <HAL_RCC_GetSysClockFreq+0x30>
 8001d1e:	2b08      	cmp	r3, #8
 8001d20:	d003      	beq.n	8001d2a <HAL_RCC_GetSysClockFreq+0x36>
 8001d22:	e026      	b.n	8001d72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d24:	4b19      	ldr	r3, [pc, #100]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x98>)
 8001d26:	613b      	str	r3, [r7, #16]
      break;
 8001d28:	e026      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	0c9b      	lsrs	r3, r3, #18
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	4a17      	ldr	r2, [pc, #92]	@ (8001d90 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d34:	5cd3      	ldrb	r3, [r2, r3]
 8001d36:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8001d38:	4b13      	ldr	r3, [pc, #76]	@ (8001d88 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d3c:	f003 030f 	and.w	r3, r3, #15
 8001d40:	4a14      	ldr	r2, [pc, #80]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d42:	5cd3      	ldrb	r3, [r2, r3]
 8001d44:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d008      	beq.n	8001d62 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d50:	4a0e      	ldr	r2, [pc, #56]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x98>)
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	fb02 f303 	mul.w	r3, r2, r3
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	e004      	b.n	8001d6c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a0c      	ldr	r2, [pc, #48]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d66:	fb02 f303 	mul.w	r3, r2, r3
 8001d6a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	613b      	str	r3, [r7, #16]
      break;
 8001d70:	e002      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d72:	4b06      	ldr	r3, [pc, #24]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x98>)
 8001d74:	613b      	str	r3, [r7, #16]
      break;
 8001d76:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d78:	693b      	ldr	r3, [r7, #16]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	371c      	adds	r7, #28
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	007a1200 	.word	0x007a1200
 8001d90:	08001e1c 	.word	0x08001e1c
 8001d94:	08001e2c 	.word	0x08001e2c
 8001d98:	003d0900 	.word	0x003d0900

08001d9c <memset>:
 8001d9c:	4402      	add	r2, r0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d100      	bne.n	8001da6 <memset+0xa>
 8001da4:	4770      	bx	lr
 8001da6:	f803 1b01 	strb.w	r1, [r3], #1
 8001daa:	e7f9      	b.n	8001da0 <memset+0x4>

08001dac <__libc_init_array>:
 8001dac:	b570      	push	{r4, r5, r6, lr}
 8001dae:	4d0d      	ldr	r5, [pc, #52]	@ (8001de4 <__libc_init_array+0x38>)
 8001db0:	4c0d      	ldr	r4, [pc, #52]	@ (8001de8 <__libc_init_array+0x3c>)
 8001db2:	1b64      	subs	r4, r4, r5
 8001db4:	10a4      	asrs	r4, r4, #2
 8001db6:	2600      	movs	r6, #0
 8001db8:	42a6      	cmp	r6, r4
 8001dba:	d109      	bne.n	8001dd0 <__libc_init_array+0x24>
 8001dbc:	4d0b      	ldr	r5, [pc, #44]	@ (8001dec <__libc_init_array+0x40>)
 8001dbe:	4c0c      	ldr	r4, [pc, #48]	@ (8001df0 <__libc_init_array+0x44>)
 8001dc0:	f000 f818 	bl	8001df4 <_init>
 8001dc4:	1b64      	subs	r4, r4, r5
 8001dc6:	10a4      	asrs	r4, r4, #2
 8001dc8:	2600      	movs	r6, #0
 8001dca:	42a6      	cmp	r6, r4
 8001dcc:	d105      	bne.n	8001dda <__libc_init_array+0x2e>
 8001dce:	bd70      	pop	{r4, r5, r6, pc}
 8001dd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dd4:	4798      	blx	r3
 8001dd6:	3601      	adds	r6, #1
 8001dd8:	e7ee      	b.n	8001db8 <__libc_init_array+0xc>
 8001dda:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dde:	4798      	blx	r3
 8001de0:	3601      	adds	r6, #1
 8001de2:	e7f2      	b.n	8001dca <__libc_init_array+0x1e>
 8001de4:	08001e3c 	.word	0x08001e3c
 8001de8:	08001e3c 	.word	0x08001e3c
 8001dec:	08001e3c 	.word	0x08001e3c
 8001df0:	08001e40 	.word	0x08001e40

08001df4 <_init>:
 8001df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001df6:	bf00      	nop
 8001df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dfa:	bc08      	pop	{r3}
 8001dfc:	469e      	mov	lr, r3
 8001dfe:	4770      	bx	lr

08001e00 <_fini>:
 8001e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e02:	bf00      	nop
 8001e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e06:	bc08      	pop	{r3}
 8001e08:	469e      	mov	lr, r3
 8001e0a:	4770      	bx	lr
