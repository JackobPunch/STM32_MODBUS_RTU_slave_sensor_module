
modbus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005844  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  080059d4  080059d4  000069d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d1c  08005d1c  00007084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005d1c  08005d1c  00006d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d24  08005d24  00007084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d24  08005d24  00006d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d28  08005d28  00006d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08005d2c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007084  2**0
                  CONTENTS
 10 .bss          000003f0  20000084  20000084  00007084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000474  20000474  00007084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bbdf  00000000  00000000  000070b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020a6  00000000  00000000  00012c93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000858  00000000  00000000  00014d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000650  00000000  00000000  00015598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b156  00000000  00000000  00015be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c21f  00000000  00000000  00030d3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ba29  00000000  00000000  0003cf5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d8986  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002b18  00000000  00000000  000d89cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  000db4e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080059bc 	.word	0x080059bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	080059bc 	.word	0x080059bc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  initialise_monitor_handles(); // Initialize semihosting for printf
 8000284:	f005 fb1c 	bl	80058c0 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000288:	f000 ffe2 	bl	8001250 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028c:	f000 f838 	bl	8000300 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000290:	f000 f8c4 	bl	800041c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000294:	f000 f886 	bl	80003a4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  mb_ctx = mbus_somedevice_open(NULL);
 8000298:	2000      	movs	r0, #0
 800029a:	f000 fe31 	bl	8000f00 <mbus_somedevice_open>
 800029e:	4603      	mov	r3, r0
 80002a0:	461a      	mov	r2, r3
 80002a2:	4b10      	ldr	r3, [pc, #64]	@ (80002e4 <main+0x64>)
 80002a4:	701a      	strb	r2, [r3, #0]
  mbus_connect(mb_ctx, mbus_somedevice_read_3xxxx, MBUS_FUNC_READ_REGS); // Register read handler
 80002a6:	4b0f      	ldr	r3, [pc, #60]	@ (80002e4 <main+0x64>)
 80002a8:	f993 3000 	ldrsb.w	r3, [r3]
 80002ac:	2203      	movs	r2, #3
 80002ae:	490e      	ldr	r1, [pc, #56]	@ (80002e8 <main+0x68>)
 80002b0:	4618      	mov	r0, r3
 80002b2:	f000 fd81 	bl	8000db8 <mbus_connect>
  printf("Handler registered for function %d\n", MBUS_FUNC_READ_REGS);
 80002b6:	2103      	movs	r1, #3
 80002b8:	480c      	ldr	r0, [pc, #48]	@ (80002ec <main+0x6c>)
 80002ba:	f004 fac5 	bl	8004848 <iprintf>
  mbus_connect(mb_ctx, mbus_somedevice_write_4xxxx, MBUS_FUNC_WRITE_REGS); // Register write handler
 80002be:	4b09      	ldr	r3, [pc, #36]	@ (80002e4 <main+0x64>)
 80002c0:	f993 3000 	ldrsb.w	r3, [r3]
 80002c4:	2210      	movs	r2, #16
 80002c6:	490a      	ldr	r1, [pc, #40]	@ (80002f0 <main+0x70>)
 80002c8:	4618      	mov	r0, r3
 80002ca:	f000 fd75 	bl	8000db8 <mbus_connect>
  printf("Handlers Registered\n");
 80002ce:	4809      	ldr	r0, [pc, #36]	@ (80002f4 <main+0x74>)
 80002d0:	f004 fb22 	bl	8004918 <puts>
  HAL_UART_Receive_IT(&huart1, &rx_byte, 1); // Start UART reception
 80002d4:	2201      	movs	r2, #1
 80002d6:	4908      	ldr	r1, [pc, #32]	@ (80002f8 <main+0x78>)
 80002d8:	4808      	ldr	r0, [pc, #32]	@ (80002fc <main+0x7c>)
 80002da:	f002 fe6f 	bl	8002fbc <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002de:	bf00      	nop
 80002e0:	e7fd      	b.n	80002de <main+0x5e>
 80002e2:	bf00      	nop
 80002e4:	20000128 	.word	0x20000128
 80002e8:	08000f19 	.word	0x08000f19
 80002ec:	080059d4 	.word	0x080059d4
 80002f0:	08000f99 	.word	0x08000f99
 80002f4:	080059f8 	.word	0x080059f8
 80002f8:	20000129 	.word	0x20000129
 80002fc:	200000a0 	.word	0x200000a0

08000300 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b096      	sub	sp, #88	@ 0x58
 8000304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000306:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800030a:	2228      	movs	r2, #40	@ 0x28
 800030c:	2100      	movs	r1, #0
 800030e:	4618      	mov	r0, r3
 8000310:	f004 fbe2 	bl	8004ad8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000314:	f107 031c 	add.w	r3, r7, #28
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]
 800031c:	605a      	str	r2, [r3, #4]
 800031e:	609a      	str	r2, [r3, #8]
 8000320:	60da      	str	r2, [r3, #12]
 8000322:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	605a      	str	r2, [r3, #4]
 800032c:	609a      	str	r2, [r3, #8]
 800032e:	60da      	str	r2, [r3, #12]
 8000330:	611a      	str	r2, [r3, #16]
 8000332:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000334:	2302      	movs	r3, #2
 8000336:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000338:	2301      	movs	r3, #1
 800033a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800033c:	2310      	movs	r3, #16
 800033e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000340:	2300      	movs	r3, #0
 8000342:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000344:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000348:	4618      	mov	r0, r3
 800034a:	f001 faf3 	bl	8001934 <HAL_RCC_OscConfig>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000354:	f000 f8c2 	bl	80004dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000358:	230f      	movs	r3, #15
 800035a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800035c:	2300      	movs	r3, #0
 800035e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000360:	2300      	movs	r3, #0
 8000362:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000368:	2300      	movs	r3, #0
 800036a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800036c:	f107 031c 	add.w	r3, r7, #28
 8000370:	2100      	movs	r1, #0
 8000372:	4618      	mov	r0, r3
 8000374:	f002 faec 	bl	8002950 <HAL_RCC_ClockConfig>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800037e:	f000 f8ad 	bl	80004dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000382:	2301      	movs	r3, #1
 8000384:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000386:	2300      	movs	r3, #0
 8000388:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	4618      	mov	r0, r3
 800038e:	f002 fcf1 	bl	8002d74 <HAL_RCCEx_PeriphCLKConfig>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000398:	f000 f8a0 	bl	80004dc <Error_Handler>
  }
}
 800039c:	bf00      	nop
 800039e:	3758      	adds	r7, #88	@ 0x58
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003a8:	4b19      	ldr	r3, [pc, #100]	@ (8000410 <MX_USART1_UART_Init+0x6c>)
 80003aa:	4a1a      	ldr	r2, [pc, #104]	@ (8000414 <MX_USART1_UART_Init+0x70>)
 80003ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80003ae:	4b18      	ldr	r3, [pc, #96]	@ (8000410 <MX_USART1_UART_Init+0x6c>)
 80003b0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80003b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003b6:	4b16      	ldr	r3, [pc, #88]	@ (8000410 <MX_USART1_UART_Init+0x6c>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003bc:	4b14      	ldr	r3, [pc, #80]	@ (8000410 <MX_USART1_UART_Init+0x6c>)
 80003be:	2200      	movs	r2, #0
 80003c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80003c2:	4b13      	ldr	r3, [pc, #76]	@ (8000410 <MX_USART1_UART_Init+0x6c>)
 80003c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80003c8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003ca:	4b11      	ldr	r3, [pc, #68]	@ (8000410 <MX_USART1_UART_Init+0x6c>)
 80003cc:	220c      	movs	r2, #12
 80003ce:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000410 <MX_USART1_UART_Init+0x6c>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 80003d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000410 <MX_USART1_UART_Init+0x6c>)
 80003d8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80003dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003de:	4b0c      	ldr	r3, [pc, #48]	@ (8000410 <MX_USART1_UART_Init+0x6c>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000410 <MX_USART1_UART_Init+0x6c>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80003ea:	2300      	movs	r3, #0
 80003ec:	2200      	movs	r2, #0
 80003ee:	2100      	movs	r1, #0
 80003f0:	4807      	ldr	r0, [pc, #28]	@ (8000410 <MX_USART1_UART_Init+0x6c>)
 80003f2:	f004 f835 	bl	8004460 <HAL_RS485Ex_Init>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 80003fc:	f000 f86e 	bl	80004dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_UART_Receive_IT(&huart1, &rx_byte, 1); // Start receiving
 8000400:	2201      	movs	r2, #1
 8000402:	4905      	ldr	r1, [pc, #20]	@ (8000418 <MX_USART1_UART_Init+0x74>)
 8000404:	4802      	ldr	r0, [pc, #8]	@ (8000410 <MX_USART1_UART_Init+0x6c>)
 8000406:	f002 fdd9 	bl	8002fbc <HAL_UART_Receive_IT>
  /* USER CODE END USART1_Init 2 */
}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	200000a0 	.word	0x200000a0
 8000414:	40013800 	.word	0x40013800
 8000418:	20000129 	.word	0x20000129

0800041c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000422:	4b09      	ldr	r3, [pc, #36]	@ (8000448 <MX_GPIO_Init+0x2c>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	4a08      	ldr	r2, [pc, #32]	@ (8000448 <MX_GPIO_Init+0x2c>)
 8000428:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800042c:	6153      	str	r3, [r2, #20]
 800042e:	4b06      	ldr	r3, [pc, #24]	@ (8000448 <MX_GPIO_Init+0x2c>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000436:	607b      	str	r3, [r7, #4]
 8000438:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800043a:	bf00      	nop
 800043c:	370c      	adds	r7, #12
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	40021000 	.word	0x40021000

0800044c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  if (huart == &huart1)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4a1b      	ldr	r2, [pc, #108]	@ (80004c4 <HAL_UART_RxCpltCallback+0x78>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d113      	bne.n	8000484 <HAL_UART_RxCpltCallback+0x38>
  {
    printf("RX Byte: 0x%02X\n", rx_byte); // Print directly
 800045c:	4b1a      	ldr	r3, [pc, #104]	@ (80004c8 <HAL_UART_RxCpltCallback+0x7c>)
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	4619      	mov	r1, r3
 8000462:	481a      	ldr	r0, [pc, #104]	@ (80004cc <HAL_UART_RxCpltCallback+0x80>)
 8000464:	f004 f9f0 	bl	8004848 <iprintf>
    mbus_poll(mb_ctx, rx_byte);
 8000468:	4b19      	ldr	r3, [pc, #100]	@ (80004d0 <HAL_UART_RxCpltCallback+0x84>)
 800046a:	f993 3000 	ldrsb.w	r3, [r3]
 800046e:	4a16      	ldr	r2, [pc, #88]	@ (80004c8 <HAL_UART_RxCpltCallback+0x7c>)
 8000470:	7812      	ldrb	r2, [r2, #0]
 8000472:	4611      	mov	r1, r2
 8000474:	4618      	mov	r0, r3
 8000476:	f000 fa3b 	bl	80008f0 <mbus_poll>
    HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 800047a:	2201      	movs	r2, #1
 800047c:	4912      	ldr	r1, [pc, #72]	@ (80004c8 <HAL_UART_RxCpltCallback+0x7c>)
 800047e:	4811      	ldr	r0, [pc, #68]	@ (80004c4 <HAL_UART_RxCpltCallback+0x78>)
 8000480:	f002 fd9c 	bl	8002fbc <HAL_UART_Receive_IT>
  }
  if (HAL_UART_GetError(&huart1) != HAL_UART_ERROR_NONE)
 8000484:	480f      	ldr	r0, [pc, #60]	@ (80004c4 <HAL_UART_RxCpltCallback+0x78>)
 8000486:	f003 f9dd 	bl	8003844 <HAL_UART_GetError>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d00a      	beq.n	80004a6 <HAL_UART_RxCpltCallback+0x5a>
  {
    printf("UART Error\n");
 8000490:	4810      	ldr	r0, [pc, #64]	@ (80004d4 <HAL_UART_RxCpltCallback+0x88>)
 8000492:	f004 fa41 	bl	8004918 <puts>
    HAL_UART_Abort(&huart1);
 8000496:	480b      	ldr	r0, [pc, #44]	@ (80004c4 <HAL_UART_RxCpltCallback+0x78>)
 8000498:	f002 fdd4 	bl	8003044 <HAL_UART_Abort>
    HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 800049c:	2201      	movs	r2, #1
 800049e:	490a      	ldr	r1, [pc, #40]	@ (80004c8 <HAL_UART_RxCpltCallback+0x7c>)
 80004a0:	4808      	ldr	r0, [pc, #32]	@ (80004c4 <HAL_UART_RxCpltCallback+0x78>)
 80004a2:	f002 fd8b 	bl	8002fbc <HAL_UART_Receive_IT>
  }
  if (HAL_UART_GetError(&huart1) & HAL_UART_ERROR_ORE)
 80004a6:	4807      	ldr	r0, [pc, #28]	@ (80004c4 <HAL_UART_RxCpltCallback+0x78>)
 80004a8:	f003 f9cc 	bl	8003844 <HAL_UART_GetError>
 80004ac:	4603      	mov	r3, r0
 80004ae:	f003 0308 	and.w	r3, r3, #8
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d002      	beq.n	80004bc <HAL_UART_RxCpltCallback+0x70>
  {
    printf("Overrun Error\n");
 80004b6:	4808      	ldr	r0, [pc, #32]	@ (80004d8 <HAL_UART_RxCpltCallback+0x8c>)
 80004b8:	f004 fa2e 	bl	8004918 <puts>
  }

  /* rx_byte = test_frame[test_idx++];
  if (test_idx >= 8) test_idx = 0; */
}
 80004bc:	bf00      	nop
 80004be:	3708      	adds	r7, #8
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	200000a0 	.word	0x200000a0
 80004c8:	20000129 	.word	0x20000129
 80004cc:	08005a0c 	.word	0x08005a0c
 80004d0:	20000128 	.word	0x20000128
 80004d4:	08005a20 	.word	0x08005a20
 80004d8:	08005a2c 	.word	0x08005a2c

080004dc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e0:	b672      	cpsid	i
}
 80004e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004e4:	bf00      	nop
 80004e6:	e7fd      	b.n	80004e4 <Error_Handler+0x8>

080004e8 <mbus_crc16>:
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
}

*/

uint16_t mbus_crc16(const uint16_t crc16, const uint8_t byte) {
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	460a      	mov	r2, r1
 80004f2:	80fb      	strh	r3, [r7, #6]
 80004f4:	4613      	mov	r3, r2
 80004f6:	717b      	strb	r3, [r7, #5]
  const int index = (crc16 & 0xFF) ^ byte;
 80004f8:	88fb      	ldrh	r3, [r7, #6]
 80004fa:	b2da      	uxtb	r2, r3
 80004fc:	797b      	ldrb	r3, [r7, #5]
 80004fe:	4053      	eors	r3, r2
 8000500:	60fb      	str	r3, [r7, #12]
  return (aucCRCLo[index] << 8) | ((crc16 >> 8) ^ aucCRCHi[index]);
 8000502:	4a0d      	ldr	r2, [pc, #52]	@ (8000538 <mbus_crc16+0x50>)
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	4413      	add	r3, r2
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	b21b      	sxth	r3, r3
 800050c:	021b      	lsls	r3, r3, #8
 800050e:	b21a      	sxth	r2, r3
 8000510:	88fb      	ldrh	r3, [r7, #6]
 8000512:	0a1b      	lsrs	r3, r3, #8
 8000514:	b29b      	uxth	r3, r3
 8000516:	4809      	ldr	r0, [pc, #36]	@ (800053c <mbus_crc16+0x54>)
 8000518:	68f9      	ldr	r1, [r7, #12]
 800051a:	4401      	add	r1, r0
 800051c:	7809      	ldrb	r1, [r1, #0]
 800051e:	404b      	eors	r3, r1
 8000520:	b29b      	uxth	r3, r3
 8000522:	b21b      	sxth	r3, r3
 8000524:	4313      	orrs	r3, r2
 8000526:	b21b      	sxth	r3, r3
 8000528:	b29b      	uxth	r3, r3
}
 800052a:	4618      	mov	r0, r3
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	08005b94 	.word	0x08005b94
 800053c:	08005a94 	.word	0x08005a94

08000540 <mbus_tickcount>:

__attribute__((weak)) uint32_t mbus_tickcount() { return 0; }
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
 8000544:	2300      	movs	r3, #0
 8000546:	4618      	mov	r0, r3
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <mbus_flush>:
    g_mbusContext[context].open = 1;
    return context;
  }

  mbus_status_t mbus_flush(const mbus_t context)
  {
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	71fb      	strb	r3, [r7, #7]
    g_mbusContext[context].crc16 = 0xFFFF;
 800055a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800055e:	4a0e      	ldr	r2, [pc, #56]	@ (8000598 <mbus_flush+0x48>)
 8000560:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8000564:	fb01 f303 	mul.w	r3, r1, r3
 8000568:	4413      	add	r3, r2
 800056a:	332a      	adds	r3, #42	@ 0x2a
 800056c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000570:	801a      	strh	r2, [r3, #0]
    g_mbusContext[context].state = MBUS_STATE_IDLE;
 8000572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000576:	4a08      	ldr	r2, [pc, #32]	@ (8000598 <mbus_flush+0x48>)
 8000578:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 800057c:	fb01 f303 	mul.w	r3, r1, r3
 8000580:	4413      	add	r3, r2
 8000582:	3329      	adds	r3, #41	@ 0x29
 8000584:	2200      	movs	r2, #0
 8000586:	701a      	strb	r2, [r3, #0]
    return MBUS_OK;
 8000588:	2300      	movs	r3, #0
  }
 800058a:	4618      	mov	r0, r3
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	2000012c 	.word	0x2000012c

0800059c <mbus_response>:

  mbus_status_t mbus_response(mbus_t mb_context, Modbus_ResponseType response)
  {
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	460a      	mov	r2, r1
 80005a6:	71fb      	strb	r3, [r7, #7]
 80005a8:	4613      	mov	r3, r2
 80005aa:	71bb      	strb	r3, [r7, #6]

    if (response != MBUS_RESPONSE_OK)
 80005ac:	79bb      	ldrb	r3, [r7, #6]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d008      	beq.n	80005c4 <mbus_response+0x28>
    {
      return mbus_send_error(mb_context, response);
 80005b2:	79ba      	ldrb	r2, [r7, #6]
 80005b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005b8:	4611      	mov	r1, r2
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 fb6a 	bl	8000c94 <mbus_send_error>
 80005c0:	4603      	mov	r3, r0
 80005c2:	e001      	b.n	80005c8 <mbus_response+0x2c>
    }
    else
    {
    }
    return MBUS_ERROR;
 80005c4:	f04f 33ff 	mov.w	r3, #4294967295
  }
 80005c8:	4618      	mov	r0, r3
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <mbus_poll_response>:
    g_userError = error;
    return 0;
  }

  inline mbus_status_t mbus_poll_response(mbus_t mb_context)
  {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08a      	sub	sp, #40	@ 0x28
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
    stmbCallBackFunc func = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
    _stmodbus_context_t *ctx = &g_mbusContext[mb_context];
 80005de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e2:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 80005e6:	fb02 f303 	mul.w	r3, r2, r3
 80005ea:	4a9b      	ldr	r2, [pc, #620]	@ (8000858 <mbus_poll_response+0x288>)
 80005ec:	4413      	add	r3, r2
 80005ee:	613b      	str	r3, [r7, #16]
    int read = 1, la;
 80005f0:	2301      	movs	r3, #1
 80005f2:	60bb      	str	r3, [r7, #8]
    uint16_t d;

    if (ctx->header.func == 0x04)
 80005f4:	693b      	ldr	r3, [r7, #16]
 80005f6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80005fa:	2b04      	cmp	r3, #4
 80005fc:	d101      	bne.n	8000602 <mbus_poll_response+0x32>
    {
      la = 10;
 80005fe:	230a      	movs	r3, #10
 8000600:	627b      	str	r3, [r7, #36]	@ 0x24
        func = ctx->func[i].func;
        break;
      }
    }
#endif
    switch (ctx->header.func)
 8000602:	693b      	ldr	r3, [r7, #16]
 8000604:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8000608:	2b0f      	cmp	r3, #15
 800060a:	d006      	beq.n	800061a <mbus_poll_response+0x4a>
 800060c:	2b0f      	cmp	r3, #15
 800060e:	dc4a      	bgt.n	80006a6 <mbus_poll_response+0xd6>
 8000610:	2b01      	cmp	r3, #1
 8000612:	d002      	beq.n	800061a <mbus_poll_response+0x4a>
 8000614:	2b02      	cmp	r3, #2
 8000616:	d023      	beq.n	8000660 <mbus_poll_response+0x90>
      {
        return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_ADDRESS);
      }
      break;
    default:
      break;
 8000618:	e045      	b.n	80006a6 <mbus_poll_response+0xd6>
      if ((ctx->header.num == 0) || (ctx->header.num > 0x07D0))
 800061a:	693b      	ldr	r3, [r7, #16]
 800061c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800061e:	2b00      	cmp	r3, #0
 8000620:	d004      	beq.n	800062c <mbus_poll_response+0x5c>
 8000622:	693b      	ldr	r3, [r7, #16]
 8000624:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000626:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800062a:	d907      	bls.n	800063c <mbus_poll_response+0x6c>
        return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_VALUE);
 800062c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000630:	2103      	movs	r1, #3
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff ffb2 	bl	800059c <mbus_response>
 8000638:	4603      	mov	r3, r0
 800063a:	e155      	b.n	80008e8 <mbus_poll_response+0x318>
      if ((ctx->header.addr + ctx->header.num) >= ctx->conf.coils)
 800063c:	693b      	ldr	r3, [r7, #16]
 800063e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000640:	461a      	mov	r2, r3
 8000642:	693b      	ldr	r3, [r7, #16]
 8000644:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000646:	4413      	add	r3, r2
 8000648:	693a      	ldr	r2, [r7, #16]
 800064a:	8852      	ldrh	r2, [r2, #2]
 800064c:	4293      	cmp	r3, r2
 800064e:	db2c      	blt.n	80006aa <mbus_poll_response+0xda>
        return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_ADDRESS);
 8000650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000654:	2102      	movs	r1, #2
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff ffa0 	bl	800059c <mbus_response>
 800065c:	4603      	mov	r3, r0
 800065e:	e143      	b.n	80008e8 <mbus_poll_response+0x318>
      if ((ctx->header.num == 0) || (ctx->header.num > 0x07D0))
 8000660:	693b      	ldr	r3, [r7, #16]
 8000662:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000664:	2b00      	cmp	r3, #0
 8000666:	d004      	beq.n	8000672 <mbus_poll_response+0xa2>
 8000668:	693b      	ldr	r3, [r7, #16]
 800066a:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800066c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000670:	d907      	bls.n	8000682 <mbus_poll_response+0xb2>
        return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_VALUE);
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	2103      	movs	r1, #3
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff ff8f 	bl	800059c <mbus_response>
 800067e:	4603      	mov	r3, r0
 8000680:	e132      	b.n	80008e8 <mbus_poll_response+0x318>
      if ((ctx->header.addr + ctx->header.num) > ctx->conf.discrete)
 8000682:	693b      	ldr	r3, [r7, #16]
 8000684:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000686:	461a      	mov	r2, r3
 8000688:	693b      	ldr	r3, [r7, #16]
 800068a:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800068c:	4413      	add	r3, r2
 800068e:	693a      	ldr	r2, [r7, #16]
 8000690:	8892      	ldrh	r2, [r2, #4]
 8000692:	4293      	cmp	r3, r2
 8000694:	dd0b      	ble.n	80006ae <mbus_poll_response+0xde>
        return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_ADDRESS);
 8000696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069a:	2102      	movs	r1, #2
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff ff7d 	bl	800059c <mbus_response>
 80006a2:	4603      	mov	r3, r0
 80006a4:	e120      	b.n	80008e8 <mbus_poll_response+0x318>
      break;
 80006a6:	bf00      	nop
 80006a8:	e002      	b.n	80006b0 <mbus_poll_response+0xe0>
      break;
 80006aa:	bf00      	nop
 80006ac:	e000      	b.n	80006b0 <mbus_poll_response+0xe0>
      break;
 80006ae:	bf00      	nop
    }

    if (func != 0)
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d006      	beq.n	80006c4 <mbus_poll_response+0xf4>
    {
      return func(mb_context);
 80006b6:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	4610      	mov	r0, r2
 80006be:	4798      	blx	r3
 80006c0:	4603      	mov	r3, r0
 80006c2:	e111      	b.n	80008e8 <mbus_poll_response+0x318>
    }

    la = mbus_proto_address((Modbus_ConnectFuncType)ctx->header.func, (int *)&read);
 80006c4:	693b      	ldr	r3, [r7, #16]
 80006c6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80006ca:	f107 0208 	add.w	r2, r7, #8
 80006ce:	4611      	mov	r1, r2
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 fb81 	bl	8000dd8 <mbus_proto_address>
 80006d6:	6278      	str	r0, [r7, #36]	@ 0x24
    if (la > 0)
 80006d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006da:	2b00      	cmp	r3, #0
 80006dc:	dd05      	ble.n	80006ea <mbus_poll_response+0x11a>
    {
      la += ctx->header.addr;
 80006de:	693b      	ldr	r3, [r7, #16]
 80006e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80006e2:	461a      	mov	r2, r3
 80006e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006e6:	4413      	add	r3, r2
 80006e8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    if (la < 50001)
 80006ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006ec:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80006f0:	4293      	cmp	r3, r2
 80006f2:	f300 80f2 	bgt.w	80008da <mbus_poll_response+0x30a>
    {
      ctx->conf.sendbuf[0] = ctx->header.devaddr;
 80006f6:	693b      	ldr	r3, [r7, #16]
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	693a      	ldr	r2, [r7, #16]
 80006fc:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 8000700:	701a      	strb	r2, [r3, #0]
      ctx->conf.sendbuf[1] = ctx->header.func;
 8000702:	693b      	ldr	r3, [r7, #16]
 8000704:	699b      	ldr	r3, [r3, #24]
 8000706:	3301      	adds	r3, #1
 8000708:	693a      	ldr	r2, [r7, #16]
 800070a:	f892 2031 	ldrb.w	r2, [r2, #49]	@ 0x31
 800070e:	701a      	strb	r2, [r3, #0]
      ctx->conf.sendbuf[2] = ctx->header.num * 2;
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000714:	b2da      	uxtb	r2, r3
 8000716:	693b      	ldr	r3, [r7, #16]
 8000718:	699b      	ldr	r3, [r3, #24]
 800071a:	3302      	adds	r3, #2
 800071c:	0052      	lsls	r2, r2, #1
 800071e:	b2d2      	uxtb	r2, r2
 8000720:	701a      	strb	r2, [r3, #0]
      if (read && ctx->conf.read)
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d04b      	beq.n	80007c0 <mbus_poll_response+0x1f0>
 8000728:	693b      	ldr	r3, [r7, #16]
 800072a:	691b      	ldr	r3, [r3, #16]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d047      	beq.n	80007c0 <mbus_poll_response+0x1f0>
      {
        g_userError = MBUS_RESPONSE_OK;
 8000730:	4b4a      	ldr	r3, [pc, #296]	@ (800085c <mbus_poll_response+0x28c>)
 8000732:	2200      	movs	r2, #0
 8000734:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < ctx->header.num; i++)
 8000736:	2300      	movs	r3, #0
 8000738:	623b      	str	r3, [r7, #32]
 800073a:	e01f      	b.n	800077c <mbus_poll_response+0x1ac>
        {

          d = ctx->conf.read(la + i);
 800073c:	693b      	ldr	r3, [r7, #16]
 800073e:	691b      	ldr	r3, [r3, #16]
 8000740:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000742:	6a3a      	ldr	r2, [r7, #32]
 8000744:	440a      	add	r2, r1
 8000746:	4610      	mov	r0, r2
 8000748:	4798      	blx	r3
 800074a:	4603      	mov	r3, r0
 800074c:	81fb      	strh	r3, [r7, #14]
          ctx->conf.sendbuf[3 + (i << 1)] = d >> 8;
 800074e:	89fb      	ldrh	r3, [r7, #14]
 8000750:	0a1b      	lsrs	r3, r3, #8
 8000752:	b299      	uxth	r1, r3
 8000754:	693b      	ldr	r3, [r7, #16]
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	6a3a      	ldr	r2, [r7, #32]
 800075a:	0052      	lsls	r2, r2, #1
 800075c:	3203      	adds	r2, #3
 800075e:	4413      	add	r3, r2
 8000760:	b2ca      	uxtb	r2, r1
 8000762:	701a      	strb	r2, [r3, #0]
          ctx->conf.sendbuf[3 + (i << 1) + 1] = d & 0xFF;
 8000764:	693b      	ldr	r3, [r7, #16]
 8000766:	699a      	ldr	r2, [r3, #24]
 8000768:	6a3b      	ldr	r3, [r7, #32]
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	3304      	adds	r3, #4
 800076e:	4413      	add	r3, r2
 8000770:	89fa      	ldrh	r2, [r7, #14]
 8000772:	b2d2      	uxtb	r2, r2
 8000774:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < ctx->header.num; i++)
 8000776:	6a3b      	ldr	r3, [r7, #32]
 8000778:	3301      	adds	r3, #1
 800077a:	623b      	str	r3, [r7, #32]
 800077c:	693b      	ldr	r3, [r7, #16]
 800077e:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000780:	461a      	mov	r2, r3
 8000782:	6a3b      	ldr	r3, [r7, #32]
 8000784:	4293      	cmp	r3, r2
 8000786:	dbd9      	blt.n	800073c <mbus_poll_response+0x16c>
        }
        if (g_userError == MBUS_RESPONSE_OK)
 8000788:	4b34      	ldr	r3, [pc, #208]	@ (800085c <mbus_poll_response+0x28c>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d10d      	bne.n	80007ac <mbus_poll_response+0x1dc>
        {
          return mbus_send_data(mb_context, 3 + ctx->conf.sendbuf[2]);
 8000790:	693b      	ldr	r3, [r7, #16]
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	3302      	adds	r3, #2
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	3303      	adds	r3, #3
 800079a:	b29a      	uxth	r2, r3
 800079c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a0:	4611      	mov	r1, r2
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 faa2 	bl	8000cec <mbus_send_data>
 80007a8:	4603      	mov	r3, r0
 80007aa:	e09d      	b.n	80008e8 <mbus_poll_response+0x318>
        }
        else
        {
          return mbus_response(mb_context, g_userError);
 80007ac:	4b2b      	ldr	r3, [pc, #172]	@ (800085c <mbus_poll_response+0x28c>)
 80007ae:	781a      	ldrb	r2, [r3, #0]
 80007b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b4:	4611      	mov	r1, r2
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff fef0 	bl	800059c <mbus_response>
 80007bc:	4603      	mov	r3, r0
 80007be:	e093      	b.n	80008e8 <mbus_poll_response+0x318>
        }
      }
      else if (ctx->conf.write)
 80007c0:	693b      	ldr	r3, [r7, #16]
 80007c2:	695b      	ldr	r3, [r3, #20]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	f000 8088 	beq.w	80008da <mbus_poll_response+0x30a>
      {
        uint16_t *value;
        ctx->conf.sendbuf[2] = 0;
 80007ca:	693b      	ldr	r3, [r7, #16]
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	3302      	adds	r3, #2
 80007d0:	2200      	movs	r2, #0
 80007d2:	701a      	strb	r2, [r3, #0]
        switch (ctx->header.func)
 80007d4:	693b      	ldr	r3, [r7, #16]
 80007d6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80007da:	2b06      	cmp	r3, #6
 80007dc:	dc02      	bgt.n	80007e4 <mbus_poll_response+0x214>
 80007de:	2b05      	cmp	r3, #5
 80007e0:	da03      	bge.n	80007ea <mbus_poll_response+0x21a>
 80007e2:	e07a      	b.n	80008da <mbus_poll_response+0x30a>
 80007e4:	2b10      	cmp	r3, #16
 80007e6:	d030      	beq.n	800084a <mbus_poll_response+0x27a>
 80007e8:	e077      	b.n	80008da <mbus_poll_response+0x30a>
        case MBUS_FUNC_WRITE_REG:
        case MBUS_FUNC_WRITE_COIL:
          // in both these cases, we should return the same packet that we
          // received. in both cases, the packes have 6 bytes of data + 2 CRC
          // bytes = 8 bytes
          value = (uint16_t *)ctx->conf.recvbuf;
 80007ea:	693b      	ldr	r3, [r7, #16]
 80007ec:	6a1b      	ldr	r3, [r3, #32]
 80007ee:	61fb      	str	r3, [r7, #28]
          ctx->conf.write(la, *value);
 80007f0:	693b      	ldr	r3, [r7, #16]
 80007f2:	695b      	ldr	r3, [r3, #20]
 80007f4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80007f6:	69fa      	ldr	r2, [r7, #28]
 80007f8:	8812      	ldrh	r2, [r2, #0]
 80007fa:	4611      	mov	r1, r2
 80007fc:	4798      	blx	r3
          ctx->conf.sendbuf[2] = ctx->header.addr >> 8;
 80007fe:	693b      	ldr	r3, [r7, #16]
 8000800:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000802:	0a1b      	lsrs	r3, r3, #8
 8000804:	b29a      	uxth	r2, r3
 8000806:	693b      	ldr	r3, [r7, #16]
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	3302      	adds	r3, #2
 800080c:	b2d2      	uxtb	r2, r2
 800080e:	701a      	strb	r2, [r3, #0]
          ctx->conf.sendbuf[3] = ctx->header.addr & 0xFF;
 8000810:	693b      	ldr	r3, [r7, #16]
 8000812:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8000814:	693b      	ldr	r3, [r7, #16]
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	3303      	adds	r3, #3
 800081a:	b2d2      	uxtb	r2, r2
 800081c:	701a      	strb	r2, [r3, #0]
          ctx->conf.sendbuf[4] = ctx->conf.recvbuf[1];
 800081e:	693b      	ldr	r3, [r7, #16]
 8000820:	6a1a      	ldr	r2, [r3, #32]
 8000822:	693b      	ldr	r3, [r7, #16]
 8000824:	699b      	ldr	r3, [r3, #24]
 8000826:	3304      	adds	r3, #4
 8000828:	7852      	ldrb	r2, [r2, #1]
 800082a:	701a      	strb	r2, [r3, #0]
          ctx->conf.sendbuf[5] = ctx->conf.recvbuf[0];
 800082c:	693b      	ldr	r3, [r7, #16]
 800082e:	6a1a      	ldr	r2, [r3, #32]
 8000830:	693b      	ldr	r3, [r7, #16]
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	3305      	adds	r3, #5
 8000836:	7812      	ldrb	r2, [r2, #0]
 8000838:	701a      	strb	r2, [r3, #0]
          return mbus_send_data(mb_context, 6);
 800083a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083e:	2106      	movs	r1, #6
 8000840:	4618      	mov	r0, r3
 8000842:	f000 fa53 	bl	8000cec <mbus_send_data>
 8000846:	4603      	mov	r3, r0
 8000848:	e04e      	b.n	80008e8 <mbus_poll_response+0x318>

        case MBUS_FUNC_WRITE_REGS:
          value = (uint16_t *)ctx->conf.recvbuf;
 800084a:	693b      	ldr	r3, [r7, #16]
 800084c:	6a1b      	ldr	r3, [r3, #32]
 800084e:	61fb      	str	r3, [r7, #28]
          for (int i = 0; i < ctx->header.num; i++)
 8000850:	2300      	movs	r3, #0
 8000852:	61bb      	str	r3, [r7, #24]
 8000854:	e013      	b.n	800087e <mbus_poll_response+0x2ae>
 8000856:	bf00      	nop
 8000858:	2000012c 	.word	0x2000012c
 800085c:	20000270 	.word	0x20000270
          {
            ctx->conf.write(la + i, *value++);
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	695a      	ldr	r2, [r3, #20]
 8000864:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000866:	69bb      	ldr	r3, [r7, #24]
 8000868:	440b      	add	r3, r1
 800086a:	4618      	mov	r0, r3
 800086c:	69fb      	ldr	r3, [r7, #28]
 800086e:	1c99      	adds	r1, r3, #2
 8000870:	61f9      	str	r1, [r7, #28]
 8000872:	881b      	ldrh	r3, [r3, #0]
 8000874:	4619      	mov	r1, r3
 8000876:	4790      	blx	r2
          for (int i = 0; i < ctx->header.num; i++)
 8000878:	69bb      	ldr	r3, [r7, #24]
 800087a:	3301      	adds	r3, #1
 800087c:	61bb      	str	r3, [r7, #24]
 800087e:	693b      	ldr	r3, [r7, #16]
 8000880:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000882:	461a      	mov	r2, r3
 8000884:	69bb      	ldr	r3, [r7, #24]
 8000886:	4293      	cmp	r3, r2
 8000888:	dbea      	blt.n	8000860 <mbus_poll_response+0x290>
          }
          ctx->conf.sendbuf[2] = ctx->header.addr >> 8;
 800088a:	693b      	ldr	r3, [r7, #16]
 800088c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800088e:	0a1b      	lsrs	r3, r3, #8
 8000890:	b29a      	uxth	r2, r3
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	3302      	adds	r3, #2
 8000898:	b2d2      	uxtb	r2, r2
 800089a:	701a      	strb	r2, [r3, #0]
          ctx->conf.sendbuf[3] = ctx->header.addr & 0xFF;
 800089c:	693b      	ldr	r3, [r7, #16]
 800089e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80008a0:	693b      	ldr	r3, [r7, #16]
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	3303      	adds	r3, #3
 80008a6:	b2d2      	uxtb	r2, r2
 80008a8:	701a      	strb	r2, [r3, #0]
          ctx->conf.sendbuf[4] = ctx->header.num >> 8;
 80008aa:	693b      	ldr	r3, [r7, #16]
 80008ac:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80008ae:	0a1b      	lsrs	r3, r3, #8
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	693b      	ldr	r3, [r7, #16]
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	3304      	adds	r3, #4
 80008b8:	b2d2      	uxtb	r2, r2
 80008ba:	701a      	strb	r2, [r3, #0]
          ctx->conf.sendbuf[5] = ctx->header.num & 0xFF;
 80008bc:	693b      	ldr	r3, [r7, #16]
 80008be:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	3305      	adds	r3, #5
 80008c6:	b2d2      	uxtb	r2, r2
 80008c8:	701a      	strb	r2, [r3, #0]
          return mbus_send_data(mb_context, 6);
 80008ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ce:	2106      	movs	r1, #6
 80008d0:	4618      	mov	r0, r3
 80008d2:	f000 fa0b 	bl	8000cec <mbus_send_data>
 80008d6:	4603      	mov	r3, r0
 80008d8:	e006      	b.n	80008e8 <mbus_poll_response+0x318>
        } // end of switch
      }
    }
    return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_FUNCTION);
 80008da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008de:	2101      	movs	r1, #1
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff fe5b 	bl	800059c <mbus_response>
 80008e6:	4603      	mov	r3, r0
  }
 80008e8:	4618      	mov	r0, r3
 80008ea:	3728      	adds	r7, #40	@ 0x28
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <mbus_poll>:
   * function mbus_close()
   * close modbus context
   * return: none
   */
  mbus_status_t mbus_poll(mbus_t mb_context, uint8_t byte)
  {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	460a      	mov	r2, r1
 80008fa:	71fb      	strb	r3, [r7, #7]
 80008fc:	4613      	mov	r3, r2
 80008fe:	71bb      	strb	r3, [r7, #6]
    _stmodbus_context_t *ctx = &g_mbusContext[mb_context];
 8000900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000904:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8000908:	fb02 f303 	mul.w	r3, r2, r3
 800090c:	4ab3      	ldr	r2, [pc, #716]	@ (8000bdc <mbus_poll+0x2ec>)
 800090e:	4413      	add	r3, r2
 8000910:	60fb      	str	r3, [r7, #12]
    printf("mbus_poll: state %d, byte 0x%02X\n", ctx->state, byte);
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8000918:	4619      	mov	r1, r3
 800091a:	79bb      	ldrb	r3, [r7, #6]
 800091c:	461a      	mov	r2, r3
 800091e:	48b0      	ldr	r0, [pc, #704]	@ (8000be0 <mbus_poll+0x2f0>)
 8000920:	f003 ff92 	bl	8004848 <iprintf>
    // State machine

    if (mbus_tickcount() - ctx->timer > 4)
 8000924:	f7ff fe0c 	bl	8000540 <mbus_tickcount>
 8000928:	4602      	mov	r2, r0
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800092e:	1ad3      	subs	r3, r2, r3
 8000930:	2b04      	cmp	r3, #4
 8000932:	d904      	bls.n	800093e <mbus_poll+0x4e>
    {
      mbus_flush(mb_context);
 8000934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fe09 	bl	8000550 <mbus_flush>
    }
    ctx->timer = mbus_tickcount();
 800093e:	f7ff fdff 	bl	8000540 <mbus_tickcount>
 8000942:	4602      	mov	r2, r0
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	62da      	str	r2, [r3, #44]	@ 0x2c

    switch (ctx->state)
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800094e:	2b0e      	cmp	r3, #14
 8000950:	f200 8155 	bhi.w	8000bfe <mbus_poll+0x30e>
 8000954:	a201      	add	r2, pc, #4	@ (adr r2, 800095c <mbus_poll+0x6c>)
 8000956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800095a:	bf00      	nop
 800095c:	08000999 	.word	0x08000999
 8000960:	08000bff 	.word	0x08000bff
 8000964:	080009b5 	.word	0x080009b5
 8000968:	08000a89 	.word	0x08000a89
 800096c:	08000a73 	.word	0x08000a73
 8000970:	08000b8f 	.word	0x08000b8f
 8000974:	08000b79 	.word	0x08000b79
 8000978:	08000ae1 	.word	0x08000ae1
 800097c:	08000abd 	.word	0x08000abd
 8000980:	08000b21 	.word	0x08000b21
 8000984:	08000b3b 	.word	0x08000b3b
 8000988:	08000be5 	.word	0x08000be5
 800098c:	08000bef 	.word	0x08000bef
 8000990:	08000bff 	.word	0x08000bff
 8000994:	08000bf9 	.word	0x08000bf9
    {
    case MBUS_STATE_IDLE:
      mbus_flush(mb_context);
 8000998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff fdd7 	bl	8000550 <mbus_flush>
      ctx->state = MBUS_STATE_FUNCTION;
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	2202      	movs	r2, #2
 80009a6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      ctx->header.devaddr = byte;
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	79ba      	ldrb	r2, [r7, #6]
 80009ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      break;
 80009b2:	e12d      	b.n	8000c10 <mbus_poll+0x320>
    case MBUS_STATE_FUNCTION:
      ctx->header.func = byte;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	79ba      	ldrb	r2, [r7, #6]
 80009b8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      switch (byte)
 80009bc:	79bb      	ldrb	r3, [r7, #6]
 80009be:	3b01      	subs	r3, #1
 80009c0:	2b0f      	cmp	r3, #15
 80009c2:	d84f      	bhi.n	8000a64 <mbus_poll+0x174>
 80009c4:	a201      	add	r2, pc, #4	@ (adr r2, 80009cc <mbus_poll+0xdc>)
 80009c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ca:	bf00      	nop
 80009cc:	08000a39 	.word	0x08000a39
 80009d0:	08000a65 	.word	0x08000a65
 80009d4:	08000a39 	.word	0x08000a39
 80009d8:	08000a39 	.word	0x08000a39
 80009dc:	08000a4f 	.word	0x08000a4f
 80009e0:	08000a0d 	.word	0x08000a0d
 80009e4:	08000a65 	.word	0x08000a65
 80009e8:	08000a65 	.word	0x08000a65
 80009ec:	08000a65 	.word	0x08000a65
 80009f0:	08000a65 	.word	0x08000a65
 80009f4:	08000a65 	.word	0x08000a65
 80009f8:	08000a65 	.word	0x08000a65
 80009fc:	08000a65 	.word	0x08000a65
 8000a00:	08000a65 	.word	0x08000a65
 8000a04:	08000a23 	.word	0x08000a23
 8000a08:	08000a23 	.word	0x08000a23
      {
      case MBUS_FUNC_WRITE_REG:
        ctx->header.rnum = 1;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	2201      	movs	r2, #1
 8000a10:	86da      	strh	r2, [r3, #54]	@ 0x36
        ctx->header.num = 1;
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	2201      	movs	r2, #1
 8000a16:	869a      	strh	r2, [r3, #52]	@ 0x34
        ctx->state = MBUS_STATE_REGADDR_HI;
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	2204      	movs	r2, #4
 8000a1c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        break;
 8000a20:	e026      	b.n	8000a70 <mbus_poll+0x180>
      case MBUS_FUNC_WRITE_REGS:
      case MBUS_FUNC_WRITE_COILS:
        ctx->header.rnum = 1;
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	2201      	movs	r2, #1
 8000a26:	86da      	strh	r2, [r3, #54]	@ 0x36
        ctx->header.num = 0;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	869a      	strh	r2, [r3, #52]	@ 0x34
        ctx->state = MBUS_STATE_REGADDR_HI;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	2204      	movs	r2, #4
 8000a32:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        break;
 8000a36:	e01b      	b.n	8000a70 <mbus_poll+0x180>
      case MBUS_FUNC_READ_INPUT_REGS:
      case MBUS_FUNC_READ_COILS:
      case MBUS_FUNC_READ_REGS:
        ctx->state = MBUS_STATE_REGADDR_HI;
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	2204      	movs	r2, #4
 8000a3c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        ctx->header.rnum = 0;
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	2200      	movs	r2, #0
 8000a44:	86da      	strh	r2, [r3, #54]	@ 0x36
        ctx->header.num = 0;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	2200      	movs	r2, #0
 8000a4a:	869a      	strh	r2, [r3, #52]	@ 0x34
        break;
 8000a4c:	e010      	b.n	8000a70 <mbus_poll+0x180>
      case MBUS_FUNC_WRITE_COIL:
        ctx->header.rnum = 1;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	2201      	movs	r2, #1
 8000a52:	86da      	strh	r2, [r3, #54]	@ 0x36
        ctx->header.num = 1;
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	2201      	movs	r2, #1
 8000a58:	869a      	strh	r2, [r3, #52]	@ 0x34
        ctx->state = MBUS_STATE_REGADDR_HI;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	2204      	movs	r2, #4
 8000a5e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        break;
 8000a62:	e005      	b.n	8000a70 <mbus_poll+0x180>
      default:
        // ctx->state = MBUS_STATE_IDLE;
        mbus_flush(mb_context);
 8000a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fd71 	bl	8000550 <mbus_flush>
        break;
 8000a6e:	bf00      	nop
      }
      break;
 8000a70:	e0ce      	b.n	8000c10 <mbus_poll+0x320>
    case MBUS_STATE_REGADDR_HI:
      ctx->state = MBUS_STATE_REGADDR_LO;
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	2203      	movs	r2, #3
 8000a76:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      ctx->header.addr = byte << 8;
 8000a7a:	79bb      	ldrb	r3, [r7, #6]
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	021b      	lsls	r3, r3, #8
 8000a80:	b29a      	uxth	r2, r3
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	865a      	strh	r2, [r3, #50]	@ 0x32
      break;
 8000a86:	e0c3      	b.n	8000c10 <mbus_poll+0x320>
    case MBUS_STATE_REGADDR_LO:
      ctx->header.addr |= byte;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8000a8c:	79bb      	ldrb	r3, [r7, #6]
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	4313      	orrs	r3, r2
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	865a      	strh	r2, [r3, #50]	@ 0x32
      if (ctx->header.num == 1 && ctx->header.rnum == 1)
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d108      	bne.n	8000ab2 <mbus_poll+0x1c2>
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d104      	bne.n	8000ab2 <mbus_poll+0x1c2>
      {
        ctx->state = MBUS_STATE_DATA_HI;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	2208      	movs	r2, #8
 8000aac:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      }
      else
      {
        ctx->state = MBUS_STATE_REGNUM_HI;
      }
      break;
 8000ab0:	e0ae      	b.n	8000c10 <mbus_poll+0x320>
        ctx->state = MBUS_STATE_REGNUM_HI;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	2206      	movs	r2, #6
 8000ab6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      break;
 8000aba:	e0a9      	b.n	8000c10 <mbus_poll+0x320>
    case MBUS_STATE_DATA_HI:
      ctx->state = MBUS_STATE_DATA_LO;
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	2207      	movs	r2, #7
 8000ac0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      ctx->conf.recvbuf[2 * (ctx->header.num - ctx->header.rnum) + 1] = byte;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	6a1a      	ldr	r2, [r3, #32]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000acc:	4619      	mov	r1, r3
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000ad2:	1acb      	subs	r3, r1, r3
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	4413      	add	r3, r2
 8000ada:	79ba      	ldrb	r2, [r7, #6]
 8000adc:	701a      	strb	r2, [r3, #0]
      break;
 8000ade:	e097      	b.n	8000c10 <mbus_poll+0x320>
    case MBUS_STATE_DATA_LO:
      ctx->conf.recvbuf[2 * (ctx->header.num - ctx->header.rnum)] = byte;
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	6a1b      	ldr	r3, [r3, #32]
 8000ae4:	68fa      	ldr	r2, [r7, #12]
 8000ae6:	8e92      	ldrh	r2, [r2, #52]	@ 0x34
 8000ae8:	4611      	mov	r1, r2
 8000aea:	68fa      	ldr	r2, [r7, #12]
 8000aec:	8ed2      	ldrh	r2, [r2, #54]	@ 0x36
 8000aee:	1a8a      	subs	r2, r1, r2
 8000af0:	0052      	lsls	r2, r2, #1
 8000af2:	4413      	add	r3, r2
 8000af4:	79ba      	ldrb	r2, [r7, #6]
 8000af6:	701a      	strb	r2, [r3, #0]
      ctx->header.rnum--;
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000afc:	3b01      	subs	r3, #1
 8000afe:	b29a      	uxth	r2, r3
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	86da      	strh	r2, [r3, #54]	@ 0x36
      if (ctx->header.rnum == 0)
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d104      	bne.n	8000b16 <mbus_poll+0x226>
      {
        ctx->state = MBUS_STATE_CRC_LO;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	220b      	movs	r2, #11
 8000b10:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      }
      else
      {
        ctx->state = MBUS_STATE_DATA_HI;
      }
      break;
 8000b14:	e07c      	b.n	8000c10 <mbus_poll+0x320>
        ctx->state = MBUS_STATE_DATA_HI;
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	2208      	movs	r2, #8
 8000b1a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      break;
 8000b1e:	e077      	b.n	8000c10 <mbus_poll+0x320>
    case MBUS_STATE_DATA_SIZE:
      ctx->state = MBUS_STATE_DATA;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	220a      	movs	r2, #10
 8000b24:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      ctx->header.size = byte;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	79ba      	ldrb	r2, [r7, #6]
 8000b2c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
      ctx->header.rsize = byte;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	79ba      	ldrb	r2, [r7, #6]
 8000b34:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
      break;
 8000b38:	e06a      	b.n	8000c10 <mbus_poll+0x320>
    case MBUS_STATE_DATA:
      ctx->conf.recvbuf[ctx->header.size - ctx->header.rsize] = byte;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	6a1b      	ldr	r3, [r3, #32]
 8000b3e:	68fa      	ldr	r2, [r7, #12]
 8000b40:	f892 2038 	ldrb.w	r2, [r2, #56]	@ 0x38
 8000b44:	4611      	mov	r1, r2
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 8000b4c:	1a8a      	subs	r2, r1, r2
 8000b4e:	4413      	add	r3, r2
 8000b50:	79ba      	ldrb	r2, [r7, #6]
 8000b52:	701a      	strb	r2, [r3, #0]
      ctx->header.rsize--;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
      if (ctx->header.rsize == 0)
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d14d      	bne.n	8000c0a <mbus_poll+0x31a>
      {
        ctx->state = MBUS_STATE_CRC_LO;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	220b      	movs	r2, #11
 8000b72:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      }
      break;
 8000b76:	e048      	b.n	8000c0a <mbus_poll+0x31a>
    case MBUS_STATE_REGNUM_HI:
      ctx->state = MBUS_STATE_REGNUM_LO;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	2205      	movs	r2, #5
 8000b7c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      ctx->header.num = byte << 8;
 8000b80:	79bb      	ldrb	r3, [r7, #6]
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	021b      	lsls	r3, r3, #8
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	869a      	strh	r2, [r3, #52]	@ 0x34
      break;
 8000b8c:	e040      	b.n	8000c10 <mbus_poll+0x320>
    case MBUS_STATE_REGNUM_LO:
      ctx->state = MBUS_STATE_CRC_LO;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	220b      	movs	r2, #11
 8000b92:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      ctx->header.num |= byte;
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8000b9a:	79bb      	ldrb	r3, [r7, #6]
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	b29a      	uxth	r2, r3
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	869a      	strh	r2, [r3, #52]	@ 0x34
      if (ctx->header.rnum == 0)
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d104      	bne.n	8000bb8 <mbus_poll+0x2c8>
      {
        ctx->state = MBUS_STATE_CRC_LO;
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	220b      	movs	r2, #11
 8000bb2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        {
          ctx->state = MBUS_STATE_DATA_SIZE;
        }
      }

      break;
 8000bb6:	e02a      	b.n	8000c0e <mbus_poll+0x31e>
        ctx->header.rnum = ctx->header.num;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	86da      	strh	r2, [r3, #54]	@ 0x36
        ctx->state = MBUS_STATE_DATA_HI;
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	2208      	movs	r2, #8
 8000bc4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        if (ctx->header.func == MBUS_FUNC_WRITE_REGS)
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8000bce:	2b10      	cmp	r3, #16
 8000bd0:	d11d      	bne.n	8000c0e <mbus_poll+0x31e>
          ctx->state = MBUS_STATE_DATA_SIZE;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	2209      	movs	r2, #9
 8000bd6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      break;
 8000bda:	e018      	b.n	8000c0e <mbus_poll+0x31e>
 8000bdc:	2000012c 	.word	0x2000012c
 8000be0:	08005a3c 	.word	0x08005a3c
    case MBUS_STATE_CRC_LO:
      ctx->state = MBUS_STATE_CRC_HI;
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	220c      	movs	r2, #12
 8000be8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      break;
 8000bec:	e010      	b.n	8000c10 <mbus_poll+0x320>
    case MBUS_STATE_CRC_HI:
      ctx->state = MBUS_STATE_FINISH;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	220d      	movs	r2, #13
 8000bf2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      break;
 8000bf6:	e00b      	b.n	8000c10 <mbus_poll+0x320>
    // We can't processing any more before callback not returned
    case MBUS_STATE_RESPONSE:
      return MBUS_ERROR;
 8000bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfc:	e043      	b.n	8000c86 <mbus_poll+0x396>
    default:
      mbus_flush(mb_context);
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff fca4 	bl	8000550 <mbus_flush>
      break;
 8000c08:	e002      	b.n	8000c10 <mbus_poll+0x320>
      break;
 8000c0a:	bf00      	nop
 8000c0c:	e000      	b.n	8000c10 <mbus_poll+0x320>
      break;
 8000c0e:	bf00      	nop
    }

    ctx->crc16 = mbus_crc16(ctx->crc16, byte);
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000c14:	79ba      	ldrb	r2, [r7, #6]
 8000c16:	4611      	mov	r1, r2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fc65 	bl	80004e8 <mbus_crc16>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	461a      	mov	r2, r3
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (ctx->state == MBUS_STATE_FINISH)
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8000c2c:	2b0d      	cmp	r3, #13
 8000c2e:	d129      	bne.n	8000c84 <mbus_poll+0x394>
    {
      printf("State FINISH, calling handler\n");
 8000c30:	4817      	ldr	r0, [pc, #92]	@ (8000c90 <mbus_poll+0x3a0>)
 8000c32:	f003 fe71 	bl	8004918 <puts>
      //     mbus_flush(mb_context);
      //     return MBUS_ERROR;
      // }

      // TODO: Add broadcast messages
      if (ctx->header.devaddr == ctx->conf.devaddr)
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d11a      	bne.n	8000c7a <mbus_poll+0x38a>
      {
        ctx->state = MBUS_STATE_RESPONSE;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	220e      	movs	r2, #14
 8000c48:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        if (mbus_poll_response(mb_context) == MBUS_OK)
 8000c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fcbd 	bl	80005d0 <mbus_poll_response>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d106      	bne.n	8000c6a <mbus_poll+0x37a>
        {
          mbus_flush(mb_context);
 8000c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fc75 	bl	8000550 <mbus_flush>
          return MBUS_OK;
 8000c66:	2300      	movs	r3, #0
 8000c68:	e00d      	b.n	8000c86 <mbus_poll+0x396>
        }
        mbus_flush(mb_context);
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fc6e 	bl	8000550 <mbus_flush>
        return MBUS_ERROR;
 8000c74:	f04f 33ff 	mov.w	r3, #4294967295
 8000c78:	e005      	b.n	8000c86 <mbus_poll+0x396>
      }
      mbus_flush(mb_context);
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fc66 	bl	8000550 <mbus_flush>
    }
    return MBUS_OK;
 8000c84:	2300      	movs	r3, #0
  }
 8000c86:	4618      	mov	r0, r3
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	08005a60 	.word	0x08005a60

08000c94 <mbus_send_error>:
      return (mbus_context_t)&g_mbusContext[mb_context];
    return 0;
  }

  mbus_status_t mbus_send_error(mbus_t mb_context, Modbus_ResponseType response)
  {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	460a      	mov	r2, r1
 8000c9e:	71fb      	strb	r3, [r7, #7]
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	71bb      	strb	r3, [r7, #6]
    uint16_t *pbuf = (uint16_t *)(g_mbusContext[mb_context].conf.sendbuf + 2);
 8000ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca8:	4a0e      	ldr	r2, [pc, #56]	@ (8000ce4 <mbus_send_error+0x50>)
 8000caa:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8000cae:	fb01 f303 	mul.w	r3, r1, r3
 8000cb2:	4413      	add	r3, r2
 8000cb4:	3318      	adds	r3, #24
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	3302      	adds	r3, #2
 8000cba:	60fb      	str	r3, [r7, #12]
    *pbuf = 0x8300 | (uint8_t)response;
 8000cbc:	79bb      	ldrb	r3, [r7, #6]
 8000cbe:	b21a      	sxth	r2, r3
 8000cc0:	4b09      	ldr	r3, [pc, #36]	@ (8000ce8 <mbus_send_error+0x54>)
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	b21b      	sxth	r3, r3
 8000cc6:	b29a      	uxth	r2, r3
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	801a      	strh	r2, [r3, #0]
    return mbus_send_data(mb_context, 4);
 8000ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd0:	2104      	movs	r1, #4
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 f80a 	bl	8000cec <mbus_send_data>
 8000cd8:	4603      	mov	r3, r0
  }
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	2000012c 	.word	0x2000012c
 8000ce8:	ffff8300 	.word	0xffff8300

08000cec <mbus_send_data>:

  mbus_status_t mbus_send_data(mbus_t mb_context, uint16_t size)
  {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	460a      	mov	r2, r1
 8000cf6:	71fb      	strb	r3, [r7, #7]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	80bb      	strh	r3, [r7, #4]
    // if size > ( conf.send_sz-2) error
    uint16_t crc32 = 0xFFFF;
 8000cfc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d00:	82fb      	strh	r3, [r7, #22]
    const _stmodbus_context_t *ctx = &g_mbusContext[mb_context];
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8000d0a:	fb02 f303 	mul.w	r3, r2, r3
 8000d0e:	4a29      	ldr	r2, [pc, #164]	@ (8000db4 <mbus_send_data+0xc8>)
 8000d10:	4413      	add	r3, r2
 8000d12:	60fb      	str	r3, [r7, #12]
    uint8_t *pbuf = ctx->conf.sendbuf;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	60bb      	str	r3, [r7, #8]
    if (ctx->conf.send == 0 || pbuf == 0 || ctx->conf.sendbuf_sz < (size + 2))
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	68db      	ldr	r3, [r3, #12]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d008      	beq.n	8000d34 <mbus_send_data+0x48>
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d005      	beq.n	8000d34 <mbus_send_data+0x48>
 8000d28:	88bb      	ldrh	r3, [r7, #4]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	68fa      	ldr	r2, [r7, #12]
 8000d2e:	8b92      	ldrh	r2, [r2, #28]
 8000d30:	4293      	cmp	r3, r2
 8000d32:	db02      	blt.n	8000d3a <mbus_send_data+0x4e>
      return MBUS_ERROR;
 8000d34:	f04f 33ff 	mov.w	r3, #4294967295
 8000d38:	e037      	b.n	8000daa <mbus_send_data+0xbe>
    for (int i = 0; i < size; i++)
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
 8000d3e:	e00d      	b.n	8000d5c <mbus_send_data+0x70>
    {
      crc32 = mbus_crc16(crc32, pbuf[i]);
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	4413      	add	r3, r2
 8000d46:	781a      	ldrb	r2, [r3, #0]
 8000d48:	8afb      	ldrh	r3, [r7, #22]
 8000d4a:	4611      	mov	r1, r2
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fbcb 	bl	80004e8 <mbus_crc16>
 8000d52:	4603      	mov	r3, r0
 8000d54:	82fb      	strh	r3, [r7, #22]
    for (int i = 0; i < size; i++)
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	88bb      	ldrh	r3, [r7, #4]
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	dbed      	blt.n	8000d40 <mbus_send_data+0x54>
    }
    pbuf[size++] = crc32 & 0xFF;
 8000d64:	88bb      	ldrh	r3, [r7, #4]
 8000d66:	1c5a      	adds	r2, r3, #1
 8000d68:	80ba      	strh	r2, [r7, #4]
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	4413      	add	r3, r2
 8000d70:	8afa      	ldrh	r2, [r7, #22]
 8000d72:	b2d2      	uxtb	r2, r2
 8000d74:	701a      	strb	r2, [r3, #0]
    pbuf[size++] = (crc32 >> 8);
 8000d76:	8afb      	ldrh	r3, [r7, #22]
 8000d78:	0a1b      	lsrs	r3, r3, #8
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	88bb      	ldrh	r3, [r7, #4]
 8000d7e:	1c59      	adds	r1, r3, #1
 8000d80:	80b9      	strh	r1, [r7, #4]
 8000d82:	4619      	mov	r1, r3
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	440b      	add	r3, r1
 8000d88:	b2d2      	uxtb	r2, r2
 8000d8a:	701a      	strb	r2, [r3, #0]

    if (ctx->conf.send(mb_context, pbuf, size) != size)
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	88ba      	ldrh	r2, [r7, #4]
 8000d92:	f997 0007 	ldrsb.w	r0, [r7, #7]
 8000d96:	68b9      	ldr	r1, [r7, #8]
 8000d98:	4798      	blx	r3
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	88bb      	ldrh	r3, [r7, #4]
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d002      	beq.n	8000da8 <mbus_send_data+0xbc>
      return MBUS_ERROR;
 8000da2:	f04f 33ff 	mov.w	r3, #4294967295
 8000da6:	e000      	b.n	8000daa <mbus_send_data+0xbe>
    return MBUS_OK;
 8000da8:	2300      	movs	r3, #0
  }
 8000daa:	4618      	mov	r0, r3
 8000dac:	3718      	adds	r7, #24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	2000012c 	.word	0x2000012c

08000db8 <mbus_connect>:

  mbus_status_t mbus_connect(const mbus_t mb_context, stmbCallBackFunc func,
                             Modbus_ConnectFuncType type)
  {
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	6039      	str	r1, [r7, #0]
 8000dc2:	71fb      	strb	r3, [r7, #7]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	71bb      	strb	r3, [r7, #6]
        ctx->func[i].code = (uint8_t)type;
        return MBUS_OK;
      }
    }
#endif
    return MBUS_ERROR;
 8000dc8:	f04f 33ff 	mov.w	r3, #4294967295
  }
 8000dcc:	4618      	mov	r0, r3
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <mbus_proto_address>:

  int mbus_proto_address(Modbus_ConnectFuncType func, int *r)
  {
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	6039      	str	r1, [r7, #0]
 8000de2:	71fb      	strb	r3, [r7, #7]
    int adr = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	60fb      	str	r3, [r7, #12]
    *r = 1;
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	2201      	movs	r2, #1
 8000dec:	601a      	str	r2, [r3, #0]
    switch (func)
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	2b17      	cmp	r3, #23
 8000df2:	dc3f      	bgt.n	8000e74 <mbus_proto_address+0x9c>
 8000df4:	2b04      	cmp	r3, #4
 8000df6:	da08      	bge.n	8000e0a <mbus_proto_address+0x32>
 8000df8:	2b03      	cmp	r3, #3
 8000dfa:	d029      	beq.n	8000e50 <mbus_proto_address+0x78>
 8000dfc:	2b03      	cmp	r3, #3
 8000dfe:	dc39      	bgt.n	8000e74 <mbus_proto_address+0x9c>
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d034      	beq.n	8000e6e <mbus_proto_address+0x96>
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d02b      	beq.n	8000e60 <mbus_proto_address+0x88>
      *r = 0;
    case MBUS_FUNC_READ_COILS:
      adr = 0001;
      break;
    default:
      break;
 8000e08:	e034      	b.n	8000e74 <mbus_proto_address+0x9c>
    switch (func)
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	4093      	lsls	r3, r2
 8000e10:	4a1c      	ldr	r2, [pc, #112]	@ (8000e84 <mbus_proto_address+0xac>)
 8000e12:	401a      	ands	r2, r3
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	bf14      	ite	ne
 8000e18:	2201      	movne	r2, #1
 8000e1a:	2200      	moveq	r2, #0
 8000e1c:	b2d2      	uxtb	r2, r2
 8000e1e:	2a00      	cmp	r2, #0
 8000e20:	d113      	bne.n	8000e4a <mbus_proto_address+0x72>
 8000e22:	f248 0220 	movw	r2, #32800	@ 0x8020
 8000e26:	401a      	ands	r2, r3
 8000e28:	2a00      	cmp	r2, #0
 8000e2a:	bf14      	ite	ne
 8000e2c:	2201      	movne	r2, #1
 8000e2e:	2200      	moveq	r2, #0
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	d118      	bne.n	8000e68 <mbus_proto_address+0x90>
 8000e36:	f003 0310 	and.w	r3, r3, #16
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	bf14      	ite	ne
 8000e3e:	2301      	movne	r3, #1
 8000e40:	2300      	moveq	r3, #0
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d107      	bne.n	8000e58 <mbus_proto_address+0x80>
      break;
 8000e48:	e014      	b.n	8000e74 <mbus_proto_address+0x9c>
      *r = 0;
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
      adr = 40001;
 8000e50:	f649 4341 	movw	r3, #40001	@ 0x9c41
 8000e54:	60fb      	str	r3, [r7, #12]
      break;
 8000e56:	e00e      	b.n	8000e76 <mbus_proto_address+0x9e>
      adr = 30001;
 8000e58:	f247 5331 	movw	r3, #30001	@ 0x7531
 8000e5c:	60fb      	str	r3, [r7, #12]
      break;
 8000e5e:	e00a      	b.n	8000e76 <mbus_proto_address+0x9e>
      adr = 10001;
 8000e60:	f242 7311 	movw	r3, #10001	@ 0x2711
 8000e64:	60fb      	str	r3, [r7, #12]
      break;
 8000e66:	e006      	b.n	8000e76 <mbus_proto_address+0x9e>
      *r = 0;
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
      adr = 0001;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	60fb      	str	r3, [r7, #12]
      break;
 8000e72:	e000      	b.n	8000e76 <mbus_proto_address+0x9e>
      break;
 8000e74:	bf00      	nop
    }
    return adr;
 8000e76:	68fb      	ldr	r3, [r7, #12]
  }
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	00c10040 	.word	0x00c10040

08000e88 <mbus_proto_quantity>:

  int mbus_proto_quantity(Modbus_ConnectFuncType func, int *r)
  {
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	6039      	str	r1, [r7, #0]
 8000e92:	71fb      	strb	r3, [r7, #7]
    int ctx = func;
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	60fb      	str	r3, [r7, #12]
    *r = g_mbusContext[ctx].header.num; // Use 'num' from the structure
 8000e98:	4a09      	ldr	r2, [pc, #36]	@ (8000ec0 <mbus_proto_quantity+0x38>)
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8000ea0:	fb01 f303 	mul.w	r3, r1, r3
 8000ea4:	4413      	add	r3, r2
 8000ea6:	3334      	adds	r3, #52	@ 0x34
 8000ea8:	881b      	ldrh	r3, [r3, #0]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	601a      	str	r2, [r3, #0]
    return 0;
 8000eb0:	2300      	movs	r3, #0
  }
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3714      	adds	r7, #20
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	2000012c 	.word	0x2000012c

08000ec4 <mbus_proto_data>:

  uint16_t *mbus_proto_data(Modbus_ConnectFuncType func, uint16_t **r)
  {
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	6039      	str	r1, [r7, #0]
 8000ece:	71fb      	strb	r3, [r7, #7]
    int ctx = func;
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	60fb      	str	r3, [r7, #12]
    *r = (uint16_t *)g_mbusContext[ctx].data; // Use 'data' (now added to structure)
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8000eda:	fb02 f303 	mul.w	r3, r2, r3
 8000ede:	3340      	adds	r3, #64	@ 0x40
 8000ee0:	4a06      	ldr	r2, [pc, #24]	@ (8000efc <mbus_proto_data+0x38>)
 8000ee2:	4413      	add	r3, r2
 8000ee4:	1d1a      	adds	r2, r3, #4
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	601a      	str	r2, [r3, #0]
    return *r;
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
  }
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	2000012c 	.word	0x2000012c

08000f00 <mbus_somedevice_open>:
// Define your registers (initialize with sample data)
uint16_t sensor_register[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}; // Example values

// Modbus open function (initializes the context)
mbus_t mbus_somedevice_open(Modbus_Conf_t *pconf)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
    // The library handles configuration via defines in modbus_conf.h
    // You can add device-specific initialization here
    return 0; // Return a valid mbus_t (e.g., 0 for context ID)
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
	...

08000f18 <mbus_somedevice_read_3xxxx>:

// Handler for reading holding registers (Modbus function 03)
mbus_status_t mbus_somedevice_read_3xxxx(mbus_t mb_context)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
    printf("Read Handler Called\n");
 8000f22:	4819      	ldr	r0, [pc, #100]	@ (8000f88 <mbus_somedevice_read_3xxxx+0x70>)
 8000f24:	f003 fcf8 	bl	8004918 <puts>
    fflush(stdout);
 8000f28:	4b18      	ldr	r3, [pc, #96]	@ (8000f8c <mbus_somedevice_read_3xxxx+0x74>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f003 fbb4 	bl	800469c <fflush>
    int address = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	613b      	str	r3, [r7, #16]
    int quantity = 10;
 8000f38:	230a      	movs	r3, #10
 8000f3a:	60fb      	str	r3, [r7, #12]
    uint16_t *data = (uint16_t *)g_mbusContext[mb_context].data;
 8000f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f40:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8000f44:	fb02 f303 	mul.w	r3, r2, r3
 8000f48:	3340      	adds	r3, #64	@ 0x40
 8000f4a:	4a11      	ldr	r2, [pc, #68]	@ (8000f90 <mbus_somedevice_read_3xxxx+0x78>)
 8000f4c:	4413      	add	r3, r2
 8000f4e:	3304      	adds	r3, #4
 8000f50:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < quantity; i++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	e00d      	b.n	8000f74 <mbus_somedevice_read_3xxxx+0x5c>
    {
        data[i] = sensor_register[address + i];
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	441a      	add	r2, r3
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	68b9      	ldr	r1, [r7, #8]
 8000f64:	440b      	add	r3, r1
 8000f66:	490b      	ldr	r1, [pc, #44]	@ (8000f94 <mbus_somedevice_read_3xxxx+0x7c>)
 8000f68:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000f6c:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < quantity; i++)
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	3301      	adds	r3, #1
 8000f72:	617b      	str	r3, [r7, #20]
 8000f74:	697a      	ldr	r2, [r7, #20]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	dbed      	blt.n	8000f58 <mbus_somedevice_read_3xxxx+0x40>
    }
    return MBUS_RESPONSE_OK;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	08005a80 	.word	0x08005a80
 8000f8c:	2000002c 	.word	0x2000002c
 8000f90:	2000012c 	.word	0x2000012c
 8000f94:	20000000 	.word	0x20000000

08000f98 <mbus_somedevice_write_4xxxx>:

// Handler for writing holding registers (Modbus function 16)
mbus_status_t mbus_somedevice_write_4xxxx(mbus_t mb_context)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
    int address;
    mbus_proto_address(mb_context, &address);
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	f107 0210 	add.w	r2, r7, #16
 8000fa8:	4611      	mov	r1, r2
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff ff14 	bl	8000dd8 <mbus_proto_address>
    int quantity;
    mbus_proto_quantity(mb_context, &quantity);
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	f107 020c 	add.w	r2, r7, #12
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff65 	bl	8000e88 <mbus_proto_quantity>
    uint16_t *data;
    mbus_proto_data(mb_context, &data);
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	f107 0208 	add.w	r2, r7, #8
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff ff7c 	bl	8000ec4 <mbus_proto_data>

    // Check if address is valid
    if (address >= 0 && address + quantity <= 10)
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	db1b      	blt.n	800100a <mbus_somedevice_write_4xxxx+0x72>
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	2b0a      	cmp	r3, #10
 8000fda:	dc16      	bgt.n	800100a <mbus_somedevice_write_4xxxx+0x72>
    {
        for (int i = 0; i < quantity; i++)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	e00d      	b.n	8000ffe <mbus_somedevice_write_4xxxx+0x66>
        {
            sensor_register[address + i] = data[i];
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	441a      	add	r2, r3
 8000fea:	6939      	ldr	r1, [r7, #16]
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	440b      	add	r3, r1
 8000ff0:	8811      	ldrh	r1, [r2, #0]
 8000ff2:	4a08      	ldr	r2, [pc, #32]	@ (8001014 <mbus_somedevice_write_4xxxx+0x7c>)
 8000ff4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (int i = 0; i < quantity; i++)
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	617b      	str	r3, [r7, #20]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	697a      	ldr	r2, [r7, #20]
 8001002:	429a      	cmp	r2, r3
 8001004:	dbed      	blt.n	8000fe2 <mbus_somedevice_write_4xxxx+0x4a>
        }
        return MBUS_RESPONSE_OK;
 8001006:	2300      	movs	r3, #0
 8001008:	e000      	b.n	800100c <mbus_somedevice_write_4xxxx+0x74>
    }
    return MBUS_RESPONSE_ILLEGAL_DATA_ADDRESS;
 800100a:	2302      	movs	r3, #2
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000000 	.word	0x20000000

08001018 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101e:	4b0f      	ldr	r3, [pc, #60]	@ (800105c <HAL_MspInit+0x44>)
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	4a0e      	ldr	r2, [pc, #56]	@ (800105c <HAL_MspInit+0x44>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6193      	str	r3, [r2, #24]
 800102a:	4b0c      	ldr	r3, [pc, #48]	@ (800105c <HAL_MspInit+0x44>)
 800102c:	699b      	ldr	r3, [r3, #24]
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001036:	4b09      	ldr	r3, [pc, #36]	@ (800105c <HAL_MspInit+0x44>)
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	4a08      	ldr	r2, [pc, #32]	@ (800105c <HAL_MspInit+0x44>)
 800103c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001040:	61d3      	str	r3, [r2, #28]
 8001042:	4b06      	ldr	r3, [pc, #24]	@ (800105c <HAL_MspInit+0x44>)
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800104a:	603b      	str	r3, [r7, #0]
 800104c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	40021000 	.word	0x40021000

08001060 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	@ 0x28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a1c      	ldr	r2, [pc, #112]	@ (80010f0 <HAL_UART_MspInit+0x90>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d131      	bne.n	80010e6 <HAL_UART_MspInit+0x86>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001082:	4b1c      	ldr	r3, [pc, #112]	@ (80010f4 <HAL_UART_MspInit+0x94>)
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	4a1b      	ldr	r2, [pc, #108]	@ (80010f4 <HAL_UART_MspInit+0x94>)
 8001088:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800108c:	6193      	str	r3, [r2, #24]
 800108e:	4b19      	ldr	r3, [pc, #100]	@ (80010f4 <HAL_UART_MspInit+0x94>)
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109a:	4b16      	ldr	r3, [pc, #88]	@ (80010f4 <HAL_UART_MspInit+0x94>)
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	4a15      	ldr	r2, [pc, #84]	@ (80010f4 <HAL_UART_MspInit+0x94>)
 80010a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010a4:	6153      	str	r3, [r2, #20]
 80010a6:	4b13      	ldr	r3, [pc, #76]	@ (80010f4 <HAL_UART_MspInit+0x94>)
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA12     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 80010b2:	f44f 53b0 	mov.w	r3, #5632	@ 0x1600
 80010b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c0:	2303      	movs	r3, #3
 80010c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010c4:	2307      	movs	r3, #7
 80010c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4619      	mov	r1, r3
 80010ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010d2:	f000 fabd 	bl	8001650 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2100      	movs	r1, #0
 80010da:	2025      	movs	r0, #37	@ 0x25
 80010dc:	f000 f9f9 	bl	80014d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010e0:	2025      	movs	r0, #37	@ 0x25
 80010e2:	f000 fa12 	bl	800150a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80010e6:	bf00      	nop
 80010e8:	3728      	adds	r7, #40	@ 0x28
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40013800 	.word	0x40013800
 80010f4:	40021000 	.word	0x40021000

080010f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <NMI_Handler+0x4>

08001100 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <HardFault_Handler+0x4>

08001108 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <MemManage_Handler+0x4>

08001110 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <BusFault_Handler+0x4>

08001118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800111c:	bf00      	nop
 800111e:	e7fd      	b.n	800111c <UsageFault_Handler+0x4>

08001120 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800114e:	f000 f8c5 	bl	80012dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800115c:	4802      	ldr	r0, [pc, #8]	@ (8001168 <USART1_IRQHandler+0x10>)
 800115e:	f002 f86b 	bl	8003238 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200000a0 	.word	0x200000a0

0800116c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001174:	4a14      	ldr	r2, [pc, #80]	@ (80011c8 <_sbrk+0x5c>)
 8001176:	4b15      	ldr	r3, [pc, #84]	@ (80011cc <_sbrk+0x60>)
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001180:	4b13      	ldr	r3, [pc, #76]	@ (80011d0 <_sbrk+0x64>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d102      	bne.n	800118e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001188:	4b11      	ldr	r3, [pc, #68]	@ (80011d0 <_sbrk+0x64>)
 800118a:	4a12      	ldr	r2, [pc, #72]	@ (80011d4 <_sbrk+0x68>)
 800118c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800118e:	4b10      	ldr	r3, [pc, #64]	@ (80011d0 <_sbrk+0x64>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4413      	add	r3, r2
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	429a      	cmp	r2, r3
 800119a:	d207      	bcs.n	80011ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800119c:	f003 fcea 	bl	8004b74 <__errno>
 80011a0:	4603      	mov	r3, r0
 80011a2:	220c      	movs	r2, #12
 80011a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295
 80011aa:	e009      	b.n	80011c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011ac:	4b08      	ldr	r3, [pc, #32]	@ (80011d0 <_sbrk+0x64>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011b2:	4b07      	ldr	r3, [pc, #28]	@ (80011d0 <_sbrk+0x64>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	4a05      	ldr	r2, [pc, #20]	@ (80011d0 <_sbrk+0x64>)
 80011bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011be:	68fb      	ldr	r3, [r7, #12]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20003000 	.word	0x20003000
 80011cc:	00000400 	.word	0x00000400
 80011d0:	20000274 	.word	0x20000274
 80011d4:	20000478 	.word	0x20000478

080011d8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011dc:	4b06      	ldr	r3, [pc, #24]	@ (80011f8 <SystemInit+0x20>)
 80011de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011e2:	4a05      	ldr	r2, [pc, #20]	@ (80011f8 <SystemInit+0x20>)
 80011e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001234 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001200:	f7ff ffea 	bl	80011d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001204:	480c      	ldr	r0, [pc, #48]	@ (8001238 <LoopForever+0x6>)
  ldr r1, =_edata
 8001206:	490d      	ldr	r1, [pc, #52]	@ (800123c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001208:	4a0d      	ldr	r2, [pc, #52]	@ (8001240 <LoopForever+0xe>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800120c:	e002      	b.n	8001214 <LoopCopyDataInit>

0800120e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001212:	3304      	adds	r3, #4

08001214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001218:	d3f9      	bcc.n	800120e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121a:	4a0a      	ldr	r2, [pc, #40]	@ (8001244 <LoopForever+0x12>)
  ldr r4, =_ebss
 800121c:	4c0a      	ldr	r4, [pc, #40]	@ (8001248 <LoopForever+0x16>)
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001220:	e001      	b.n	8001226 <LoopFillZerobss>

08001222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001224:	3204      	adds	r2, #4

08001226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001228:	d3fb      	bcc.n	8001222 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800122a:	f003 fca9 	bl	8004b80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800122e:	f7ff f827 	bl	8000280 <main>

08001232 <LoopForever>:

LoopForever:
    b LoopForever
 8001232:	e7fe      	b.n	8001232 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001234:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800123c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001240:	08005d2c 	.word	0x08005d2c
  ldr r2, =_sbss
 8001244:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001248:	20000474 	.word	0x20000474

0800124c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800124c:	e7fe      	b.n	800124c <ADC1_2_IRQHandler>
	...

08001250 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001254:	4b08      	ldr	r3, [pc, #32]	@ (8001278 <HAL_Init+0x28>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a07      	ldr	r2, [pc, #28]	@ (8001278 <HAL_Init+0x28>)
 800125a:	f043 0310 	orr.w	r3, r3, #16
 800125e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001260:	2003      	movs	r0, #3
 8001262:	f000 f92b 	bl	80014bc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001266:	200f      	movs	r0, #15
 8001268:	f000 f808 	bl	800127c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800126c:	f7ff fed4 	bl	8001018 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40022000 	.word	0x40022000

0800127c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001284:	4b12      	ldr	r3, [pc, #72]	@ (80012d0 <HAL_InitTick+0x54>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b12      	ldr	r3, [pc, #72]	@ (80012d4 <HAL_InitTick+0x58>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	4619      	mov	r1, r3
 800128e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001292:	fbb3 f3f1 	udiv	r3, r3, r1
 8001296:	fbb2 f3f3 	udiv	r3, r2, r3
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f943 	bl	8001526 <HAL_SYSTICK_Config>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e00e      	b.n	80012c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b0f      	cmp	r3, #15
 80012ae:	d80a      	bhi.n	80012c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b0:	2200      	movs	r2, #0
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	f04f 30ff 	mov.w	r0, #4294967295
 80012b8:	f000 f90b 	bl	80014d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012bc:	4a06      	ldr	r2, [pc, #24]	@ (80012d8 <HAL_InitTick+0x5c>)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
 80012c4:	e000      	b.n	80012c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000014 	.word	0x20000014
 80012d4:	2000001c 	.word	0x2000001c
 80012d8:	20000018 	.word	0x20000018

080012dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e0:	4b06      	ldr	r3, [pc, #24]	@ (80012fc <HAL_IncTick+0x20>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <HAL_IncTick+0x24>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4413      	add	r3, r2
 80012ec:	4a04      	ldr	r2, [pc, #16]	@ (8001300 <HAL_IncTick+0x24>)
 80012ee:	6013      	str	r3, [r2, #0]
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	2000001c 	.word	0x2000001c
 8001300:	20000278 	.word	0x20000278

08001304 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return uwTick;  
 8001308:	4b03      	ldr	r3, [pc, #12]	@ (8001318 <HAL_GetTick+0x14>)
 800130a:	681b      	ldr	r3, [r3, #0]
}
 800130c:	4618      	mov	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	20000278 	.word	0x20000278

0800131c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800132c:	4b0c      	ldr	r3, [pc, #48]	@ (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001338:	4013      	ands	r3, r2
 800133a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001344:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001348:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800134c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800134e:	4a04      	ldr	r2, [pc, #16]	@ (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	60d3      	str	r3, [r2, #12]
}
 8001354:	bf00      	nop
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001368:	4b04      	ldr	r3, [pc, #16]	@ (800137c <__NVIC_GetPriorityGrouping+0x18>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	0a1b      	lsrs	r3, r3, #8
 800136e:	f003 0307 	and.w	r3, r3, #7
}
 8001372:	4618      	mov	r0, r3
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	2b00      	cmp	r3, #0
 8001390:	db0b      	blt.n	80013aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	f003 021f 	and.w	r2, r3, #31
 8001398:	4907      	ldr	r1, [pc, #28]	@ (80013b8 <__NVIC_EnableIRQ+0x38>)
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	095b      	lsrs	r3, r3, #5
 80013a0:	2001      	movs	r0, #1
 80013a2:	fa00 f202 	lsl.w	r2, r0, r2
 80013a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000e100 	.word	0xe000e100

080013bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	6039      	str	r1, [r7, #0]
 80013c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	db0a      	blt.n	80013e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	490c      	ldr	r1, [pc, #48]	@ (8001408 <__NVIC_SetPriority+0x4c>)
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	0112      	lsls	r2, r2, #4
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	440b      	add	r3, r1
 80013e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e4:	e00a      	b.n	80013fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4908      	ldr	r1, [pc, #32]	@ (800140c <__NVIC_SetPriority+0x50>)
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	3b04      	subs	r3, #4
 80013f4:	0112      	lsls	r2, r2, #4
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	440b      	add	r3, r1
 80013fa:	761a      	strb	r2, [r3, #24]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000e100 	.word	0xe000e100
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001410:	b480      	push	{r7}
 8001412:	b089      	sub	sp, #36	@ 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	f1c3 0307 	rsb	r3, r3, #7
 800142a:	2b04      	cmp	r3, #4
 800142c:	bf28      	it	cs
 800142e:	2304      	movcs	r3, #4
 8001430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3304      	adds	r3, #4
 8001436:	2b06      	cmp	r3, #6
 8001438:	d902      	bls.n	8001440 <NVIC_EncodePriority+0x30>
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3b03      	subs	r3, #3
 800143e:	e000      	b.n	8001442 <NVIC_EncodePriority+0x32>
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	f04f 32ff 	mov.w	r2, #4294967295
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43da      	mvns	r2, r3
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	401a      	ands	r2, r3
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001458:	f04f 31ff 	mov.w	r1, #4294967295
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	fa01 f303 	lsl.w	r3, r1, r3
 8001462:	43d9      	mvns	r1, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	4313      	orrs	r3, r2
         );
}
 800146a:	4618      	mov	r0, r3
 800146c:	3724      	adds	r7, #36	@ 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001488:	d301      	bcc.n	800148e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800148a:	2301      	movs	r3, #1
 800148c:	e00f      	b.n	80014ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800148e:	4a0a      	ldr	r2, [pc, #40]	@ (80014b8 <SysTick_Config+0x40>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3b01      	subs	r3, #1
 8001494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001496:	210f      	movs	r1, #15
 8001498:	f04f 30ff 	mov.w	r0, #4294967295
 800149c:	f7ff ff8e 	bl	80013bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a0:	4b05      	ldr	r3, [pc, #20]	@ (80014b8 <SysTick_Config+0x40>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a6:	4b04      	ldr	r3, [pc, #16]	@ (80014b8 <SysTick_Config+0x40>)
 80014a8:	2207      	movs	r2, #7
 80014aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	e000e010 	.word	0xe000e010

080014bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff ff29 	bl	800131c <__NVIC_SetPriorityGrouping>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b086      	sub	sp, #24
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
 80014de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e4:	f7ff ff3e 	bl	8001364 <__NVIC_GetPriorityGrouping>
 80014e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	68b9      	ldr	r1, [r7, #8]
 80014ee:	6978      	ldr	r0, [r7, #20]
 80014f0:	f7ff ff8e 	bl	8001410 <NVIC_EncodePriority>
 80014f4:	4602      	mov	r2, r0
 80014f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fa:	4611      	mov	r1, r2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff5d 	bl	80013bc <__NVIC_SetPriority>
}
 8001502:	bf00      	nop
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	4603      	mov	r3, r0
 8001512:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff31 	bl	8001380 <__NVIC_EnableIRQ>
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff ffa2 	bl	8001478 <SysTick_Config>
 8001534:	4603      	mov	r3, r0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800153e:	b480      	push	{r7}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e02e      	b.n	80015ae <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001556:	2b02      	cmp	r3, #2
 8001558:	d008      	beq.n	800156c <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2204      	movs	r2, #4
 800155e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e020      	b.n	80015ae <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f022 020e 	bic.w	r2, r2, #14
 800157a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f022 0201 	bic.w	r2, r2, #1
 800158a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001594:	2101      	movs	r1, #1
 8001596:	fa01 f202 	lsl.w	r2, r1, r2
 800159a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b084      	sub	sp, #16
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015c2:	2300      	movs	r3, #0
 80015c4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d005      	beq.n	80015dc <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2204      	movs	r2, #4
 80015d4:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	73fb      	strb	r3, [r7, #15]
 80015da:	e027      	b.n	800162c <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f022 020e 	bic.w	r2, r2, #14
 80015ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 0201 	bic.w	r2, r2, #1
 80015fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001604:	2101      	movs	r1, #1
 8001606:	fa01 f202 	lsl.w	r2, r1, r2
 800160a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	4798      	blx	r3
    }
  }
  return status;
 800162c:	7bfb      	ldrb	r3, [r7, #15]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001636:	b480      	push	{r7}
 8001638:	b083      	sub	sp, #12
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 8001642:	4618      	mov	r0, r3
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001650:	b480      	push	{r7}
 8001652:	b087      	sub	sp, #28
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800165e:	e14e      	b.n	80018fe <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	2101      	movs	r1, #1
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	fa01 f303 	lsl.w	r3, r1, r3
 800166c:	4013      	ands	r3, r2
 800166e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2b00      	cmp	r3, #0
 8001674:	f000 8140 	beq.w	80018f8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 0303 	and.w	r3, r3, #3
 8001680:	2b01      	cmp	r3, #1
 8001682:	d005      	beq.n	8001690 <HAL_GPIO_Init+0x40>
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 0303 	and.w	r3, r3, #3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d130      	bne.n	80016f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	2203      	movs	r2, #3
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4013      	ands	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	68da      	ldr	r2, [r3, #12]
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016c6:	2201      	movs	r2, #1
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	4013      	ands	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	091b      	lsrs	r3, r3, #4
 80016dc:	f003 0201 	and.w	r2, r3, #1
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f003 0303 	and.w	r3, r3, #3
 80016fa:	2b03      	cmp	r3, #3
 80016fc:	d017      	beq.n	800172e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	2203      	movs	r2, #3
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43db      	mvns	r3, r3
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	4013      	ands	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4313      	orrs	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d123      	bne.n	8001782 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	08da      	lsrs	r2, r3, #3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	3208      	adds	r2, #8
 8001742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001746:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	220f      	movs	r2, #15
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	4013      	ands	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	691a      	ldr	r2, [r3, #16]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	08da      	lsrs	r2, r3, #3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3208      	adds	r2, #8
 800177c:	6939      	ldr	r1, [r7, #16]
 800177e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	2203      	movs	r2, #3
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	4013      	ands	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 0203 	and.w	r2, r3, #3
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 809a 	beq.w	80018f8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c4:	4b55      	ldr	r3, [pc, #340]	@ (800191c <HAL_GPIO_Init+0x2cc>)
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	4a54      	ldr	r2, [pc, #336]	@ (800191c <HAL_GPIO_Init+0x2cc>)
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	6193      	str	r3, [r2, #24]
 80017d0:	4b52      	ldr	r3, [pc, #328]	@ (800191c <HAL_GPIO_Init+0x2cc>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017dc:	4a50      	ldr	r2, [pc, #320]	@ (8001920 <HAL_GPIO_Init+0x2d0>)
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	089b      	lsrs	r3, r3, #2
 80017e2:	3302      	adds	r3, #2
 80017e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f003 0303 	and.w	r3, r3, #3
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	220f      	movs	r2, #15
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4013      	ands	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001806:	d013      	beq.n	8001830 <HAL_GPIO_Init+0x1e0>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a46      	ldr	r2, [pc, #280]	@ (8001924 <HAL_GPIO_Init+0x2d4>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d00d      	beq.n	800182c <HAL_GPIO_Init+0x1dc>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a45      	ldr	r2, [pc, #276]	@ (8001928 <HAL_GPIO_Init+0x2d8>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d007      	beq.n	8001828 <HAL_GPIO_Init+0x1d8>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a44      	ldr	r2, [pc, #272]	@ (800192c <HAL_GPIO_Init+0x2dc>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d101      	bne.n	8001824 <HAL_GPIO_Init+0x1d4>
 8001820:	2303      	movs	r3, #3
 8001822:	e006      	b.n	8001832 <HAL_GPIO_Init+0x1e2>
 8001824:	2305      	movs	r3, #5
 8001826:	e004      	b.n	8001832 <HAL_GPIO_Init+0x1e2>
 8001828:	2302      	movs	r3, #2
 800182a:	e002      	b.n	8001832 <HAL_GPIO_Init+0x1e2>
 800182c:	2301      	movs	r3, #1
 800182e:	e000      	b.n	8001832 <HAL_GPIO_Init+0x1e2>
 8001830:	2300      	movs	r3, #0
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	f002 0203 	and.w	r2, r2, #3
 8001838:	0092      	lsls	r2, r2, #2
 800183a:	4093      	lsls	r3, r2
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4313      	orrs	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001842:	4937      	ldr	r1, [pc, #220]	@ (8001920 <HAL_GPIO_Init+0x2d0>)
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	089b      	lsrs	r3, r3, #2
 8001848:	3302      	adds	r3, #2
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001850:	4b37      	ldr	r3, [pc, #220]	@ (8001930 <HAL_GPIO_Init+0x2e0>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	43db      	mvns	r3, r3
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4013      	ands	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d003      	beq.n	8001874 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	4313      	orrs	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001874:	4a2e      	ldr	r2, [pc, #184]	@ (8001930 <HAL_GPIO_Init+0x2e0>)
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800187a:	4b2d      	ldr	r3, [pc, #180]	@ (8001930 <HAL_GPIO_Init+0x2e0>)
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	43db      	mvns	r3, r3
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4013      	ands	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4313      	orrs	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800189e:	4a24      	ldr	r2, [pc, #144]	@ (8001930 <HAL_GPIO_Init+0x2e0>)
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018a4:	4b22      	ldr	r3, [pc, #136]	@ (8001930 <HAL_GPIO_Init+0x2e0>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	43db      	mvns	r3, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4013      	ands	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018c8:	4a19      	ldr	r2, [pc, #100]	@ (8001930 <HAL_GPIO_Init+0x2e0>)
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018ce:	4b18      	ldr	r3, [pc, #96]	@ (8001930 <HAL_GPIO_Init+0x2e0>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	43db      	mvns	r3, r3
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4013      	ands	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001930 <HAL_GPIO_Init+0x2e0>)
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	3301      	adds	r3, #1
 80018fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	fa22 f303 	lsr.w	r3, r2, r3
 8001908:	2b00      	cmp	r3, #0
 800190a:	f47f aea9 	bne.w	8001660 <HAL_GPIO_Init+0x10>
  }
}
 800190e:	bf00      	nop
 8001910:	bf00      	nop
 8001912:	371c      	adds	r7, #28
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	40021000 	.word	0x40021000
 8001920:	40010000 	.word	0x40010000
 8001924:	48000400 	.word	0x48000400
 8001928:	48000800 	.word	0x48000800
 800192c:	48000c00 	.word	0x48000c00
 8001930:	40010400 	.word	0x40010400

08001934 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800193a:	af00      	add	r7, sp, #0
 800193c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001940:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001944:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001946:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800194a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d102      	bne.n	800195a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	f000 bff4 	b.w	8002942 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800195e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 816d 	beq.w	8001c4a <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001970:	4bb4      	ldr	r3, [pc, #720]	@ (8001c44 <HAL_RCC_OscConfig+0x310>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 030c 	and.w	r3, r3, #12
 8001978:	2b04      	cmp	r3, #4
 800197a:	d00c      	beq.n	8001996 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800197c:	4bb1      	ldr	r3, [pc, #708]	@ (8001c44 <HAL_RCC_OscConfig+0x310>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 030c 	and.w	r3, r3, #12
 8001984:	2b08      	cmp	r3, #8
 8001986:	d157      	bne.n	8001a38 <HAL_RCC_OscConfig+0x104>
 8001988:	4bae      	ldr	r3, [pc, #696]	@ (8001c44 <HAL_RCC_OscConfig+0x310>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001994:	d150      	bne.n	8001a38 <HAL_RCC_OscConfig+0x104>
 8001996:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800199a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80019a2:	fa93 f3a3 	rbit	r3, r3
 80019a6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019aa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ae:	fab3 f383 	clz	r3, r3
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b3f      	cmp	r3, #63	@ 0x3f
 80019b6:	d802      	bhi.n	80019be <HAL_RCC_OscConfig+0x8a>
 80019b8:	4ba2      	ldr	r3, [pc, #648]	@ (8001c44 <HAL_RCC_OscConfig+0x310>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	e015      	b.n	80019ea <HAL_RCC_OscConfig+0xb6>
 80019be:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019c2:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80019ca:	fa93 f3a3 	rbit	r3, r3
 80019ce:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80019d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019d6:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80019da:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80019de:	fa93 f3a3 	rbit	r3, r3
 80019e2:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80019e6:	4b97      	ldr	r3, [pc, #604]	@ (8001c44 <HAL_RCC_OscConfig+0x310>)
 80019e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ea:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80019ee:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80019f2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80019f6:	fa92 f2a2 	rbit	r2, r2
 80019fa:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80019fe:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001a02:	fab2 f282 	clz	r2, r2
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	f042 0220 	orr.w	r2, r2, #32
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	f002 021f 	and.w	r2, r2, #31
 8001a12:	2101      	movs	r1, #1
 8001a14:	fa01 f202 	lsl.w	r2, r1, r2
 8001a18:	4013      	ands	r3, r2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f000 8114 	beq.w	8001c48 <HAL_RCC_OscConfig+0x314>
 8001a20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a24:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f040 810b 	bne.w	8001c48 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	f000 bf85 	b.w	8002942 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a3c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a48:	d106      	bne.n	8001a58 <HAL_RCC_OscConfig+0x124>
 8001a4a:	4b7e      	ldr	r3, [pc, #504]	@ (8001c44 <HAL_RCC_OscConfig+0x310>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a7d      	ldr	r2, [pc, #500]	@ (8001c44 <HAL_RCC_OscConfig+0x310>)
 8001a50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	e036      	b.n	8001ac6 <HAL_RCC_OscConfig+0x192>
 8001a58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a5c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d10c      	bne.n	8001a82 <HAL_RCC_OscConfig+0x14e>
 8001a68:	4b76      	ldr	r3, [pc, #472]	@ (8001c44 <HAL_RCC_OscConfig+0x310>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a75      	ldr	r2, [pc, #468]	@ (8001c44 <HAL_RCC_OscConfig+0x310>)
 8001a6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a72:	6013      	str	r3, [r2, #0]
 8001a74:	4b73      	ldr	r3, [pc, #460]	@ (8001c44 <HAL_RCC_OscConfig+0x310>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a72      	ldr	r2, [pc, #456]	@ (8001c44 <HAL_RCC_OscConfig+0x310>)
 8001a7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a7e:	6013      	str	r3, [r2, #0]
 8001a80:	e021      	b.n	8001ac6 <HAL_RCC_OscConfig+0x192>
 8001a82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a92:	d10c      	bne.n	8001aae <HAL_RCC_OscConfig+0x17a>
 8001a94:	4b6b      	ldr	r3, [pc, #428]	@ (8001c44 <HAL_RCC_OscConfig+0x310>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a6a      	ldr	r2, [pc, #424]	@ (8001c44 <HAL_RCC_OscConfig+0x310>)
 8001a9a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a9e:	6013      	str	r3, [r2, #0]
 8001aa0:	4b68      	ldr	r3, [pc, #416]	@ (8001c44 <HAL_RCC_OscConfig+0x310>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a67      	ldr	r2, [pc, #412]	@ (8001c44 <HAL_RCC_OscConfig+0x310>)
 8001aa6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001aaa:	6013      	str	r3, [r2, #0]
 8001aac:	e00b      	b.n	8001ac6 <HAL_RCC_OscConfig+0x192>
 8001aae:	4b65      	ldr	r3, [pc, #404]	@ (8001c44 <HAL_RCC_OscConfig+0x310>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a64      	ldr	r2, [pc, #400]	@ (8001c44 <HAL_RCC_OscConfig+0x310>)
 8001ab4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	4b62      	ldr	r3, [pc, #392]	@ (8001c44 <HAL_RCC_OscConfig+0x310>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a61      	ldr	r2, [pc, #388]	@ (8001c44 <HAL_RCC_OscConfig+0x310>)
 8001ac0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ac4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ac6:	4b5f      	ldr	r3, [pc, #380]	@ (8001c44 <HAL_RCC_OscConfig+0x310>)
 8001ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aca:	f023 020f 	bic.w	r2, r3, #15
 8001ace:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ad2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	495a      	ldr	r1, [pc, #360]	@ (8001c44 <HAL_RCC_OscConfig+0x310>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ae0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ae4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d054      	beq.n	8001b9a <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af0:	f7ff fc08 	bl	8001304 <HAL_GetTick>
 8001af4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af8:	e00a      	b.n	8001b10 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001afa:	f7ff fc03 	bl	8001304 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b64      	cmp	r3, #100	@ 0x64
 8001b08:	d902      	bls.n	8001b10 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	f000 bf19 	b.w	8002942 <HAL_RCC_OscConfig+0x100e>
 8001b10:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b14:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b18:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001b1c:	fa93 f3a3 	rbit	r3, r3
 8001b20:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001b24:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b28:	fab3 f383 	clz	r3, r3
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b30:	d802      	bhi.n	8001b38 <HAL_RCC_OscConfig+0x204>
 8001b32:	4b44      	ldr	r3, [pc, #272]	@ (8001c44 <HAL_RCC_OscConfig+0x310>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	e015      	b.n	8001b64 <HAL_RCC_OscConfig+0x230>
 8001b38:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b3c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b40:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001b44:	fa93 f3a3 	rbit	r3, r3
 8001b48:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001b4c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b50:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001b54:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001b58:	fa93 f3a3 	rbit	r3, r3
 8001b5c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001b60:	4b38      	ldr	r3, [pc, #224]	@ (8001c44 <HAL_RCC_OscConfig+0x310>)
 8001b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b64:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b68:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001b6c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001b70:	fa92 f2a2 	rbit	r2, r2
 8001b74:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001b78:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001b7c:	fab2 f282 	clz	r2, r2
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	f042 0220 	orr.w	r2, r2, #32
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	f002 021f 	and.w	r2, r2, #31
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b92:	4013      	ands	r3, r2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0b0      	beq.n	8001afa <HAL_RCC_OscConfig+0x1c6>
 8001b98:	e057      	b.n	8001c4a <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9a:	f7ff fbb3 	bl	8001304 <HAL_GetTick>
 8001b9e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba2:	e00a      	b.n	8001bba <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ba4:	f7ff fbae 	bl	8001304 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b64      	cmp	r3, #100	@ 0x64
 8001bb2:	d902      	bls.n	8001bba <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	f000 bec4 	b.w	8002942 <HAL_RCC_OscConfig+0x100e>
 8001bba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bbe:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001bc6:	fa93 f3a3 	rbit	r3, r3
 8001bca:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001bce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd2:	fab3 f383 	clz	r3, r3
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b3f      	cmp	r3, #63	@ 0x3f
 8001bda:	d802      	bhi.n	8001be2 <HAL_RCC_OscConfig+0x2ae>
 8001bdc:	4b19      	ldr	r3, [pc, #100]	@ (8001c44 <HAL_RCC_OscConfig+0x310>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	e015      	b.n	8001c0e <HAL_RCC_OscConfig+0x2da>
 8001be2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001be6:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bea:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001bee:	fa93 f3a3 	rbit	r3, r3
 8001bf2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001bf6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bfa:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001bfe:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001c02:	fa93 f3a3 	rbit	r3, r3
 8001c06:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c44 <HAL_RCC_OscConfig+0x310>)
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c12:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001c16:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001c1a:	fa92 f2a2 	rbit	r2, r2
 8001c1e:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001c22:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001c26:	fab2 f282 	clz	r2, r2
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	f042 0220 	orr.w	r2, r2, #32
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	f002 021f 	and.w	r2, r2, #31
 8001c36:	2101      	movs	r1, #1
 8001c38:	fa01 f202 	lsl.w	r2, r1, r2
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1b0      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x270>
 8001c42:	e002      	b.n	8001c4a <HAL_RCC_OscConfig+0x316>
 8001c44:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 816c 	beq.w	8001f38 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c60:	4bcc      	ldr	r3, [pc, #816]	@ (8001f94 <HAL_RCC_OscConfig+0x660>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 030c 	and.w	r3, r3, #12
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d00b      	beq.n	8001c84 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c6c:	4bc9      	ldr	r3, [pc, #804]	@ (8001f94 <HAL_RCC_OscConfig+0x660>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 030c 	and.w	r3, r3, #12
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d16d      	bne.n	8001d54 <HAL_RCC_OscConfig+0x420>
 8001c78:	4bc6      	ldr	r3, [pc, #792]	@ (8001f94 <HAL_RCC_OscConfig+0x660>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d167      	bne.n	8001d54 <HAL_RCC_OscConfig+0x420>
 8001c84:	2302      	movs	r3, #2
 8001c86:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001c8e:	fa93 f3a3 	rbit	r3, r3
 8001c92:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001c96:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c9a:	fab3 f383 	clz	r3, r3
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ca2:	d802      	bhi.n	8001caa <HAL_RCC_OscConfig+0x376>
 8001ca4:	4bbb      	ldr	r3, [pc, #748]	@ (8001f94 <HAL_RCC_OscConfig+0x660>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	e013      	b.n	8001cd2 <HAL_RCC_OscConfig+0x39e>
 8001caa:	2302      	movs	r3, #2
 8001cac:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb0:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001cb4:	fa93 f3a3 	rbit	r3, r3
 8001cb8:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001cc2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001cc6:	fa93 f3a3 	rbit	r3, r3
 8001cca:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001cce:	4bb1      	ldr	r3, [pc, #708]	@ (8001f94 <HAL_RCC_OscConfig+0x660>)
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001cd8:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001cdc:	fa92 f2a2 	rbit	r2, r2
 8001ce0:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001ce4:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001ce8:	fab2 f282 	clz	r2, r2
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	f042 0220 	orr.w	r2, r2, #32
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	f002 021f 	and.w	r2, r2, #31
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8001cfe:	4013      	ands	r3, r2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d00a      	beq.n	8001d1a <HAL_RCC_OscConfig+0x3e6>
 8001d04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d08:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d002      	beq.n	8001d1a <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	f000 be14 	b.w	8002942 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1a:	4b9e      	ldr	r3, [pc, #632]	@ (8001f94 <HAL_RCC_OscConfig+0x660>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	21f8      	movs	r1, #248	@ 0xf8
 8001d30:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d34:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001d38:	fa91 f1a1 	rbit	r1, r1
 8001d3c:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001d40:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001d44:	fab1 f181 	clz	r1, r1
 8001d48:	b2c9      	uxtb	r1, r1
 8001d4a:	408b      	lsls	r3, r1
 8001d4c:	4991      	ldr	r1, [pc, #580]	@ (8001f94 <HAL_RCC_OscConfig+0x660>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d52:	e0f1      	b.n	8001f38 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d58:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f000 8083 	beq.w	8001e6c <HAL_RCC_OscConfig+0x538>
 8001d66:	2301      	movs	r3, #1
 8001d68:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001d70:	fa93 f3a3 	rbit	r3, r3
 8001d74:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001d78:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d7c:	fab3 f383 	clz	r3, r3
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d86:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	2301      	movs	r3, #1
 8001d90:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d92:	f7ff fab7 	bl	8001304 <HAL_GetTick>
 8001d96:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d9a:	e00a      	b.n	8001db2 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d9c:	f7ff fab2 	bl	8001304 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d902      	bls.n	8001db2 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	f000 bdc8 	b.w	8002942 <HAL_RCC_OscConfig+0x100e>
 8001db2:	2302      	movs	r3, #2
 8001db4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001dbc:	fa93 f3a3 	rbit	r3, r3
 8001dc0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001dc4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc8:	fab3 f383 	clz	r3, r3
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b3f      	cmp	r3, #63	@ 0x3f
 8001dd0:	d802      	bhi.n	8001dd8 <HAL_RCC_OscConfig+0x4a4>
 8001dd2:	4b70      	ldr	r3, [pc, #448]	@ (8001f94 <HAL_RCC_OscConfig+0x660>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	e013      	b.n	8001e00 <HAL_RCC_OscConfig+0x4cc>
 8001dd8:	2302      	movs	r3, #2
 8001dda:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dde:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001de2:	fa93 f3a3 	rbit	r3, r3
 8001de6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001dea:	2302      	movs	r3, #2
 8001dec:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001df0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001df4:	fa93 f3a3 	rbit	r3, r3
 8001df8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001dfc:	4b65      	ldr	r3, [pc, #404]	@ (8001f94 <HAL_RCC_OscConfig+0x660>)
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e00:	2202      	movs	r2, #2
 8001e02:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001e06:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001e0a:	fa92 f2a2 	rbit	r2, r2
 8001e0e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001e12:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001e16:	fab2 f282 	clz	r2, r2
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	f042 0220 	orr.w	r2, r2, #32
 8001e20:	b2d2      	uxtb	r2, r2
 8001e22:	f002 021f 	and.w	r2, r2, #31
 8001e26:	2101      	movs	r1, #1
 8001e28:	fa01 f202 	lsl.w	r2, r1, r2
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d0b4      	beq.n	8001d9c <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e32:	4b58      	ldr	r3, [pc, #352]	@ (8001f94 <HAL_RCC_OscConfig+0x660>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	21f8      	movs	r1, #248	@ 0xf8
 8001e48:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001e50:	fa91 f1a1 	rbit	r1, r1
 8001e54:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001e58:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001e5c:	fab1 f181 	clz	r1, r1
 8001e60:	b2c9      	uxtb	r1, r1
 8001e62:	408b      	lsls	r3, r1
 8001e64:	494b      	ldr	r1, [pc, #300]	@ (8001f94 <HAL_RCC_OscConfig+0x660>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	600b      	str	r3, [r1, #0]
 8001e6a:	e065      	b.n	8001f38 <HAL_RCC_OscConfig+0x604>
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e72:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001e76:	fa93 f3a3 	rbit	r3, r3
 8001e7a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001e7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e82:	fab3 f383 	clz	r3, r3
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e8c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	461a      	mov	r2, r3
 8001e94:	2300      	movs	r3, #0
 8001e96:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e98:	f7ff fa34 	bl	8001304 <HAL_GetTick>
 8001e9c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ea0:	e00a      	b.n	8001eb8 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ea2:	f7ff fa2f 	bl	8001304 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d902      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	f000 bd45 	b.w	8002942 <HAL_RCC_OscConfig+0x100e>
 8001eb8:	2302      	movs	r3, #2
 8001eba:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebe:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001ec2:	fa93 f3a3 	rbit	r3, r3
 8001ec6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001eca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ece:	fab3 f383 	clz	r3, r3
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ed6:	d802      	bhi.n	8001ede <HAL_RCC_OscConfig+0x5aa>
 8001ed8:	4b2e      	ldr	r3, [pc, #184]	@ (8001f94 <HAL_RCC_OscConfig+0x660>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	e013      	b.n	8001f06 <HAL_RCC_OscConfig+0x5d2>
 8001ede:	2302      	movs	r3, #2
 8001ee0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001ee8:	fa93 f3a3 	rbit	r3, r3
 8001eec:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001ef6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001efa:	fa93 f3a3 	rbit	r3, r3
 8001efe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001f02:	4b24      	ldr	r3, [pc, #144]	@ (8001f94 <HAL_RCC_OscConfig+0x660>)
 8001f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f06:	2202      	movs	r2, #2
 8001f08:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001f0c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001f10:	fa92 f2a2 	rbit	r2, r2
 8001f14:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001f18:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001f1c:	fab2 f282 	clz	r2, r2
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	f042 0220 	orr.w	r2, r2, #32
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	f002 021f 	and.w	r2, r2, #31
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f32:	4013      	ands	r3, r2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1b4      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f3c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0308 	and.w	r3, r3, #8
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 8115 	beq.w	8002178 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f52:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d07e      	beq.n	800205c <HAL_RCC_OscConfig+0x728>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f64:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001f68:	fa93 f3a3 	rbit	r3, r3
 8001f6c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001f70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f74:	fab3 f383 	clz	r3, r3
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <HAL_RCC_OscConfig+0x664>)
 8001f7e:	4413      	add	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	461a      	mov	r2, r3
 8001f84:	2301      	movs	r3, #1
 8001f86:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f88:	f7ff f9bc 	bl	8001304 <HAL_GetTick>
 8001f8c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f90:	e00f      	b.n	8001fb2 <HAL_RCC_OscConfig+0x67e>
 8001f92:	bf00      	nop
 8001f94:	40021000 	.word	0x40021000
 8001f98:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f9c:	f7ff f9b2 	bl	8001304 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d902      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	f000 bcc8 	b.w	8002942 <HAL_RCC_OscConfig+0x100e>
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001fbc:	fa93 f3a3 	rbit	r3, r3
 8001fc0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001fc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001fcc:	2202      	movs	r2, #2
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fd4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	fa93 f2a3 	rbit	r2, r3
 8001fde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fe2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ff8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	fa93 f2a3 	rbit	r2, r3
 8002002:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002006:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800200a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800200c:	4bb0      	ldr	r3, [pc, #704]	@ (80022d0 <HAL_RCC_OscConfig+0x99c>)
 800200e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002010:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002014:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002018:	2102      	movs	r1, #2
 800201a:	6019      	str	r1, [r3, #0]
 800201c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002020:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	fa93 f1a3 	rbit	r1, r3
 800202a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800202e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002032:	6019      	str	r1, [r3, #0]
  return result;
 8002034:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002038:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	fab3 f383 	clz	r3, r3
 8002042:	b2db      	uxtb	r3, r3
 8002044:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002048:	b2db      	uxtb	r3, r3
 800204a:	f003 031f 	and.w	r3, r3, #31
 800204e:	2101      	movs	r1, #1
 8002050:	fa01 f303 	lsl.w	r3, r1, r3
 8002054:	4013      	ands	r3, r2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d0a0      	beq.n	8001f9c <HAL_RCC_OscConfig+0x668>
 800205a:	e08d      	b.n	8002178 <HAL_RCC_OscConfig+0x844>
 800205c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002060:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002064:	2201      	movs	r2, #1
 8002066:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002068:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800206c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	fa93 f2a3 	rbit	r2, r3
 8002076:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800207a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800207e:	601a      	str	r2, [r3, #0]
  return result;
 8002080:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002084:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002088:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800208a:	fab3 f383 	clz	r3, r3
 800208e:	b2db      	uxtb	r3, r3
 8002090:	461a      	mov	r2, r3
 8002092:	4b90      	ldr	r3, [pc, #576]	@ (80022d4 <HAL_RCC_OscConfig+0x9a0>)
 8002094:	4413      	add	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	461a      	mov	r2, r3
 800209a:	2300      	movs	r3, #0
 800209c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800209e:	f7ff f931 	bl	8001304 <HAL_GetTick>
 80020a2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a6:	e00a      	b.n	80020be <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020a8:	f7ff f92c 	bl	8001304 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d902      	bls.n	80020be <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	f000 bc42 	b.w	8002942 <HAL_RCC_OscConfig+0x100e>
 80020be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80020c6:	2202      	movs	r2, #2
 80020c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ce:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	fa93 f2a3 	rbit	r2, r3
 80020d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020dc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80020ea:	2202      	movs	r2, #2
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020f2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	fa93 f2a3 	rbit	r2, r3
 80020fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002100:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800210a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800210e:	2202      	movs	r2, #2
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002116:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	fa93 f2a3 	rbit	r2, r3
 8002120:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002124:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002128:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800212a:	4b69      	ldr	r3, [pc, #420]	@ (80022d0 <HAL_RCC_OscConfig+0x99c>)
 800212c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800212e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002132:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002136:	2102      	movs	r1, #2
 8002138:	6019      	str	r1, [r3, #0]
 800213a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800213e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	fa93 f1a3 	rbit	r1, r3
 8002148:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800214c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002150:	6019      	str	r1, [r3, #0]
  return result;
 8002152:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002156:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	fab3 f383 	clz	r3, r3
 8002160:	b2db      	uxtb	r3, r3
 8002162:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002166:	b2db      	uxtb	r3, r3
 8002168:	f003 031f 	and.w	r3, r3, #31
 800216c:	2101      	movs	r1, #1
 800216e:	fa01 f303 	lsl.w	r3, r1, r3
 8002172:	4013      	ands	r3, r2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d197      	bne.n	80020a8 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002178:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800217c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	f000 819e 	beq.w	80024ca <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 800218e:	2300      	movs	r3, #0
 8002190:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002194:	4b4e      	ldr	r3, [pc, #312]	@ (80022d0 <HAL_RCC_OscConfig+0x99c>)
 8002196:	69db      	ldr	r3, [r3, #28]
 8002198:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d116      	bne.n	80021ce <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021a0:	4b4b      	ldr	r3, [pc, #300]	@ (80022d0 <HAL_RCC_OscConfig+0x99c>)
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	4a4a      	ldr	r2, [pc, #296]	@ (80022d0 <HAL_RCC_OscConfig+0x99c>)
 80021a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021aa:	61d3      	str	r3, [r2, #28]
 80021ac:	4b48      	ldr	r3, [pc, #288]	@ (80022d0 <HAL_RCC_OscConfig+0x99c>)
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80021b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80021c6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80021c8:	2301      	movs	r3, #1
 80021ca:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ce:	4b42      	ldr	r3, [pc, #264]	@ (80022d8 <HAL_RCC_OscConfig+0x9a4>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d11a      	bne.n	8002210 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021da:	4b3f      	ldr	r3, [pc, #252]	@ (80022d8 <HAL_RCC_OscConfig+0x9a4>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a3e      	ldr	r2, [pc, #248]	@ (80022d8 <HAL_RCC_OscConfig+0x9a4>)
 80021e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021e4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021e6:	f7ff f88d 	bl	8001304 <HAL_GetTick>
 80021ea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ee:	e009      	b.n	8002204 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f0:	f7ff f888 	bl	8001304 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b64      	cmp	r3, #100	@ 0x64
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e39e      	b.n	8002942 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002204:	4b34      	ldr	r3, [pc, #208]	@ (80022d8 <HAL_RCC_OscConfig+0x9a4>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0ef      	beq.n	80021f0 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002210:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002214:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d106      	bne.n	800222e <HAL_RCC_OscConfig+0x8fa>
 8002220:	4b2b      	ldr	r3, [pc, #172]	@ (80022d0 <HAL_RCC_OscConfig+0x99c>)
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	4a2a      	ldr	r2, [pc, #168]	@ (80022d0 <HAL_RCC_OscConfig+0x99c>)
 8002226:	f043 0301 	orr.w	r3, r3, #1
 800222a:	6213      	str	r3, [r2, #32]
 800222c:	e035      	b.n	800229a <HAL_RCC_OscConfig+0x966>
 800222e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002232:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10c      	bne.n	8002258 <HAL_RCC_OscConfig+0x924>
 800223e:	4b24      	ldr	r3, [pc, #144]	@ (80022d0 <HAL_RCC_OscConfig+0x99c>)
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	4a23      	ldr	r2, [pc, #140]	@ (80022d0 <HAL_RCC_OscConfig+0x99c>)
 8002244:	f023 0301 	bic.w	r3, r3, #1
 8002248:	6213      	str	r3, [r2, #32]
 800224a:	4b21      	ldr	r3, [pc, #132]	@ (80022d0 <HAL_RCC_OscConfig+0x99c>)
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	4a20      	ldr	r2, [pc, #128]	@ (80022d0 <HAL_RCC_OscConfig+0x99c>)
 8002250:	f023 0304 	bic.w	r3, r3, #4
 8002254:	6213      	str	r3, [r2, #32]
 8002256:	e020      	b.n	800229a <HAL_RCC_OscConfig+0x966>
 8002258:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800225c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	2b05      	cmp	r3, #5
 8002266:	d10c      	bne.n	8002282 <HAL_RCC_OscConfig+0x94e>
 8002268:	4b19      	ldr	r3, [pc, #100]	@ (80022d0 <HAL_RCC_OscConfig+0x99c>)
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	4a18      	ldr	r2, [pc, #96]	@ (80022d0 <HAL_RCC_OscConfig+0x99c>)
 800226e:	f043 0304 	orr.w	r3, r3, #4
 8002272:	6213      	str	r3, [r2, #32]
 8002274:	4b16      	ldr	r3, [pc, #88]	@ (80022d0 <HAL_RCC_OscConfig+0x99c>)
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	4a15      	ldr	r2, [pc, #84]	@ (80022d0 <HAL_RCC_OscConfig+0x99c>)
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	6213      	str	r3, [r2, #32]
 8002280:	e00b      	b.n	800229a <HAL_RCC_OscConfig+0x966>
 8002282:	4b13      	ldr	r3, [pc, #76]	@ (80022d0 <HAL_RCC_OscConfig+0x99c>)
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	4a12      	ldr	r2, [pc, #72]	@ (80022d0 <HAL_RCC_OscConfig+0x99c>)
 8002288:	f023 0301 	bic.w	r3, r3, #1
 800228c:	6213      	str	r3, [r2, #32]
 800228e:	4b10      	ldr	r3, [pc, #64]	@ (80022d0 <HAL_RCC_OscConfig+0x99c>)
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	4a0f      	ldr	r2, [pc, #60]	@ (80022d0 <HAL_RCC_OscConfig+0x99c>)
 8002294:	f023 0304 	bic.w	r3, r3, #4
 8002298:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800229a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800229e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 8087 	beq.w	80023ba <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ac:	f7ff f82a 	bl	8001304 <HAL_GetTick>
 80022b0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b4:	e012      	b.n	80022dc <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022b6:	f7ff f825 	bl	8001304 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d908      	bls.n	80022dc <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e339      	b.n	8002942 <HAL_RCC_OscConfig+0x100e>
 80022ce:	bf00      	nop
 80022d0:	40021000 	.word	0x40021000
 80022d4:	10908120 	.word	0x10908120
 80022d8:	40007000 	.word	0x40007000
 80022dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80022e4:	2202      	movs	r2, #2
 80022e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ec:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	fa93 f2a3 	rbit	r2, r3
 80022f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022fa:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002304:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002308:	2202      	movs	r2, #2
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002310:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	fa93 f2a3 	rbit	r2, r3
 800231a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800231e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002322:	601a      	str	r2, [r3, #0]
  return result;
 8002324:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002328:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800232c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800232e:	fab3 f383 	clz	r3, r3
 8002332:	b2db      	uxtb	r3, r3
 8002334:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d102      	bne.n	8002344 <HAL_RCC_OscConfig+0xa10>
 800233e:	4b98      	ldr	r3, [pc, #608]	@ (80025a0 <HAL_RCC_OscConfig+0xc6c>)
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	e013      	b.n	800236c <HAL_RCC_OscConfig+0xa38>
 8002344:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002348:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800234c:	2202      	movs	r2, #2
 800234e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002350:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002354:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	fa93 f2a3 	rbit	r2, r3
 800235e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002362:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	4b8d      	ldr	r3, [pc, #564]	@ (80025a0 <HAL_RCC_OscConfig+0xc6c>)
 800236a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002370:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002374:	2102      	movs	r1, #2
 8002376:	6011      	str	r1, [r2, #0]
 8002378:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800237c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002380:	6812      	ldr	r2, [r2, #0]
 8002382:	fa92 f1a2 	rbit	r1, r2
 8002386:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800238a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800238e:	6011      	str	r1, [r2, #0]
  return result;
 8002390:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002394:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002398:	6812      	ldr	r2, [r2, #0]
 800239a:	fab2 f282 	clz	r2, r2
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	f002 021f 	and.w	r2, r2, #31
 80023aa:	2101      	movs	r1, #1
 80023ac:	fa01 f202 	lsl.w	r2, r1, r2
 80023b0:	4013      	ands	r3, r2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f43f af7f 	beq.w	80022b6 <HAL_RCC_OscConfig+0x982>
 80023b8:	e07d      	b.n	80024b6 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ba:	f7fe ffa3 	bl	8001304 <HAL_GetTick>
 80023be:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c2:	e00b      	b.n	80023dc <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023c4:	f7fe ff9e 	bl	8001304 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e2b2      	b.n	8002942 <HAL_RCC_OscConfig+0x100e>
 80023dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80023e4:	2202      	movs	r2, #2
 80023e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ec:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	fa93 f2a3 	rbit	r2, r3
 80023f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023fa:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002404:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002408:	2202      	movs	r2, #2
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002410:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	fa93 f2a3 	rbit	r2, r3
 800241a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800241e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002422:	601a      	str	r2, [r3, #0]
  return result;
 8002424:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002428:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800242c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800242e:	fab3 f383 	clz	r3, r3
 8002432:	b2db      	uxtb	r3, r3
 8002434:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d102      	bne.n	8002444 <HAL_RCC_OscConfig+0xb10>
 800243e:	4b58      	ldr	r3, [pc, #352]	@ (80025a0 <HAL_RCC_OscConfig+0xc6c>)
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	e013      	b.n	800246c <HAL_RCC_OscConfig+0xb38>
 8002444:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002448:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800244c:	2202      	movs	r2, #2
 800244e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002450:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002454:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	fa93 f2a3 	rbit	r2, r3
 800245e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002462:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	4b4d      	ldr	r3, [pc, #308]	@ (80025a0 <HAL_RCC_OscConfig+0xc6c>)
 800246a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002470:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002474:	2102      	movs	r1, #2
 8002476:	6011      	str	r1, [r2, #0]
 8002478:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800247c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	fa92 f1a2 	rbit	r1, r2
 8002486:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800248a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800248e:	6011      	str	r1, [r2, #0]
  return result;
 8002490:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002494:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002498:	6812      	ldr	r2, [r2, #0]
 800249a:	fab2 f282 	clz	r2, r2
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	f002 021f 	and.w	r2, r2, #31
 80024aa:	2101      	movs	r1, #1
 80024ac:	fa01 f202 	lsl.w	r2, r1, r2
 80024b0:	4013      	ands	r3, r2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d186      	bne.n	80023c4 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024b6:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d105      	bne.n	80024ca <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024be:	4b38      	ldr	r3, [pc, #224]	@ (80025a0 <HAL_RCC_OscConfig+0xc6c>)
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	4a37      	ldr	r2, [pc, #220]	@ (80025a0 <HAL_RCC_OscConfig+0xc6c>)
 80024c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024c8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 8232 	beq.w	8002940 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024dc:	4b30      	ldr	r3, [pc, #192]	@ (80025a0 <HAL_RCC_OscConfig+0xc6c>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 030c 	and.w	r3, r3, #12
 80024e4:	2b08      	cmp	r3, #8
 80024e6:	f000 8201 	beq.w	80028ec <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	f040 8157 	bne.w	80027aa <HAL_RCC_OscConfig+0xe76>
 80024fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002500:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002504:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002508:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800250e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	fa93 f2a3 	rbit	r2, r3
 8002518:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800251c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002520:	601a      	str	r2, [r3, #0]
  return result;
 8002522:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002526:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800252a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252c:	fab3 f383 	clz	r3, r3
 8002530:	b2db      	uxtb	r3, r3
 8002532:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002536:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	461a      	mov	r2, r3
 800253e:	2300      	movs	r3, #0
 8002540:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002542:	f7fe fedf 	bl	8001304 <HAL_GetTick>
 8002546:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800254a:	e009      	b.n	8002560 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800254c:	f7fe feda 	bl	8001304 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e1f0      	b.n	8002942 <HAL_RCC_OscConfig+0x100e>
 8002560:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002564:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002568:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800256c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002572:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	fa93 f2a3 	rbit	r2, r3
 800257c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002580:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002584:	601a      	str	r2, [r3, #0]
  return result;
 8002586:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800258a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800258e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002590:	fab3 f383 	clz	r3, r3
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b3f      	cmp	r3, #63	@ 0x3f
 8002598:	d804      	bhi.n	80025a4 <HAL_RCC_OscConfig+0xc70>
 800259a:	4b01      	ldr	r3, [pc, #4]	@ (80025a0 <HAL_RCC_OscConfig+0xc6c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	e029      	b.n	80025f4 <HAL_RCC_OscConfig+0xcc0>
 80025a0:	40021000 	.word	0x40021000
 80025a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025a8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80025ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	fa93 f2a3 	rbit	r2, r3
 80025c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ce:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80025d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025dc:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	fa93 f2a3 	rbit	r2, r3
 80025e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ea:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	4bc3      	ldr	r3, [pc, #780]	@ (8002900 <HAL_RCC_OscConfig+0xfcc>)
 80025f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025f8:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80025fc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002600:	6011      	str	r1, [r2, #0]
 8002602:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002606:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	fa92 f1a2 	rbit	r1, r2
 8002610:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002614:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002618:	6011      	str	r1, [r2, #0]
  return result;
 800261a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800261e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002622:	6812      	ldr	r2, [r2, #0]
 8002624:	fab2 f282 	clz	r2, r2
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	f042 0220 	orr.w	r2, r2, #32
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	f002 021f 	and.w	r2, r2, #31
 8002634:	2101      	movs	r1, #1
 8002636:	fa01 f202 	lsl.w	r2, r1, r2
 800263a:	4013      	ands	r3, r2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d185      	bne.n	800254c <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002640:	4baf      	ldr	r3, [pc, #700]	@ (8002900 <HAL_RCC_OscConfig+0xfcc>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002648:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800264c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002654:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002658:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	430b      	orrs	r3, r1
 8002662:	49a7      	ldr	r1, [pc, #668]	@ (8002900 <HAL_RCC_OscConfig+0xfcc>)
 8002664:	4313      	orrs	r3, r2
 8002666:	604b      	str	r3, [r1, #4]
 8002668:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800266c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002670:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002674:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002676:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800267a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	fa93 f2a3 	rbit	r2, r3
 8002684:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002688:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800268c:	601a      	str	r2, [r3, #0]
  return result;
 800268e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002692:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002696:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002698:	fab3 f383 	clz	r3, r3
 800269c:	b2db      	uxtb	r3, r3
 800269e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80026a2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	461a      	mov	r2, r3
 80026aa:	2301      	movs	r3, #1
 80026ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ae:	f7fe fe29 	bl	8001304 <HAL_GetTick>
 80026b2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026b6:	e009      	b.n	80026cc <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026b8:	f7fe fe24 	bl	8001304 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e13a      	b.n	8002942 <HAL_RCC_OscConfig+0x100e>
 80026cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80026d4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026de:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	fa93 f2a3 	rbit	r2, r3
 80026e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ec:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80026f0:	601a      	str	r2, [r3, #0]
  return result;
 80026f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80026fa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026fc:	fab3 f383 	clz	r3, r3
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b3f      	cmp	r3, #63	@ 0x3f
 8002704:	d802      	bhi.n	800270c <HAL_RCC_OscConfig+0xdd8>
 8002706:	4b7e      	ldr	r3, [pc, #504]	@ (8002900 <HAL_RCC_OscConfig+0xfcc>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	e027      	b.n	800275c <HAL_RCC_OscConfig+0xe28>
 800270c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002710:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002714:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002718:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800271e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	fa93 f2a3 	rbit	r2, r3
 8002728:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800272c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002736:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800273a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002744:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	fa93 f2a3 	rbit	r2, r3
 800274e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002752:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	4b69      	ldr	r3, [pc, #420]	@ (8002900 <HAL_RCC_OscConfig+0xfcc>)
 800275a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002760:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002764:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002768:	6011      	str	r1, [r2, #0]
 800276a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800276e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002772:	6812      	ldr	r2, [r2, #0]
 8002774:	fa92 f1a2 	rbit	r1, r2
 8002778:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800277c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002780:	6011      	str	r1, [r2, #0]
  return result;
 8002782:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002786:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800278a:	6812      	ldr	r2, [r2, #0]
 800278c:	fab2 f282 	clz	r2, r2
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	f042 0220 	orr.w	r2, r2, #32
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	f002 021f 	and.w	r2, r2, #31
 800279c:	2101      	movs	r1, #1
 800279e:	fa01 f202 	lsl.w	r2, r1, r2
 80027a2:	4013      	ands	r3, r2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d087      	beq.n	80026b8 <HAL_RCC_OscConfig+0xd84>
 80027a8:	e0ca      	b.n	8002940 <HAL_RCC_OscConfig+0x100c>
 80027aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ae:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80027b2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80027b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027bc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	fa93 f2a3 	rbit	r2, r3
 80027c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ca:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80027ce:	601a      	str	r2, [r3, #0]
  return result;
 80027d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80027d8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027da:	fab3 f383 	clz	r3, r3
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80027e4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	461a      	mov	r2, r3
 80027ec:	2300      	movs	r3, #0
 80027ee:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f0:	f7fe fd88 	bl	8001304 <HAL_GetTick>
 80027f4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027f8:	e009      	b.n	800280e <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027fa:	f7fe fd83 	bl	8001304 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e099      	b.n	8002942 <HAL_RCC_OscConfig+0x100e>
 800280e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002812:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002816:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800281a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002820:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	fa93 f2a3 	rbit	r2, r3
 800282a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800282e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002832:	601a      	str	r2, [r3, #0]
  return result;
 8002834:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002838:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800283c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800283e:	fab3 f383 	clz	r3, r3
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b3f      	cmp	r3, #63	@ 0x3f
 8002846:	d802      	bhi.n	800284e <HAL_RCC_OscConfig+0xf1a>
 8002848:	4b2d      	ldr	r3, [pc, #180]	@ (8002900 <HAL_RCC_OscConfig+0xfcc>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	e027      	b.n	800289e <HAL_RCC_OscConfig+0xf6a>
 800284e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002852:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002856:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800285a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002860:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	fa93 f2a3 	rbit	r2, r3
 800286a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800286e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002878:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800287c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002886:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	fa93 f2a3 	rbit	r2, r3
 8002890:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002894:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	4b19      	ldr	r3, [pc, #100]	@ (8002900 <HAL_RCC_OscConfig+0xfcc>)
 800289c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028a2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80028a6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80028aa:	6011      	str	r1, [r2, #0]
 80028ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028b0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80028b4:	6812      	ldr	r2, [r2, #0]
 80028b6:	fa92 f1a2 	rbit	r1, r2
 80028ba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028be:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80028c2:	6011      	str	r1, [r2, #0]
  return result;
 80028c4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028c8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80028cc:	6812      	ldr	r2, [r2, #0]
 80028ce:	fab2 f282 	clz	r2, r2
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	f042 0220 	orr.w	r2, r2, #32
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	f002 021f 	and.w	r2, r2, #31
 80028de:	2101      	movs	r1, #1
 80028e0:	fa01 f202 	lsl.w	r2, r1, r2
 80028e4:	4013      	ands	r3, r2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d187      	bne.n	80027fa <HAL_RCC_OscConfig+0xec6>
 80028ea:	e029      	b.n	8002940 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d103      	bne.n	8002904 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e020      	b.n	8002942 <HAL_RCC_OscConfig+0x100e>
 8002900:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002904:	4b11      	ldr	r3, [pc, #68]	@ (800294c <HAL_RCC_OscConfig+0x1018>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800290c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002910:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002914:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002918:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	429a      	cmp	r2, r3
 8002922:	d10b      	bne.n	800293c <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002924:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002928:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800292c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002930:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002938:	429a      	cmp	r2, r3
 800293a:	d001      	beq.n	8002940 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e000      	b.n	8002942 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40021000 	.word	0x40021000

08002950 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b09e      	sub	sp, #120	@ 0x78
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800295a:	2300      	movs	r3, #0
 800295c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e154      	b.n	8002c12 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002968:	4b89      	ldr	r3, [pc, #548]	@ (8002b90 <HAL_RCC_ClockConfig+0x240>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	429a      	cmp	r2, r3
 8002974:	d910      	bls.n	8002998 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002976:	4b86      	ldr	r3, [pc, #536]	@ (8002b90 <HAL_RCC_ClockConfig+0x240>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f023 0207 	bic.w	r2, r3, #7
 800297e:	4984      	ldr	r1, [pc, #528]	@ (8002b90 <HAL_RCC_ClockConfig+0x240>)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	4313      	orrs	r3, r2
 8002984:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002986:	4b82      	ldr	r3, [pc, #520]	@ (8002b90 <HAL_RCC_ClockConfig+0x240>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	429a      	cmp	r2, r3
 8002992:	d001      	beq.n	8002998 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e13c      	b.n	8002c12 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d008      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a4:	4b7b      	ldr	r3, [pc, #492]	@ (8002b94 <HAL_RCC_ClockConfig+0x244>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	4978      	ldr	r1, [pc, #480]	@ (8002b94 <HAL_RCC_ClockConfig+0x244>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f000 80cd 	beq.w	8002b5e <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d137      	bne.n	8002a3c <HAL_RCC_ClockConfig+0xec>
 80029cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029d4:	fa93 f3a3 	rbit	r3, r3
 80029d8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80029da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029dc:	fab3 f383 	clz	r3, r3
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b3f      	cmp	r3, #63	@ 0x3f
 80029e4:	d802      	bhi.n	80029ec <HAL_RCC_ClockConfig+0x9c>
 80029e6:	4b6b      	ldr	r3, [pc, #428]	@ (8002b94 <HAL_RCC_ClockConfig+0x244>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	e00f      	b.n	8002a0c <HAL_RCC_ClockConfig+0xbc>
 80029ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029f4:	fa93 f3a3 	rbit	r3, r3
 80029f8:	667b      	str	r3, [r7, #100]	@ 0x64
 80029fa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029fe:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a02:	fa93 f3a3 	rbit	r3, r3
 8002a06:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a08:	4b62      	ldr	r3, [pc, #392]	@ (8002b94 <HAL_RCC_ClockConfig+0x244>)
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a10:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002a12:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002a14:	fa92 f2a2 	rbit	r2, r2
 8002a18:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002a1a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002a1c:	fab2 f282 	clz	r2, r2
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	f042 0220 	orr.w	r2, r2, #32
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	f002 021f 	and.w	r2, r2, #31
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d171      	bne.n	8002b1c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e0ea      	b.n	8002c12 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d137      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0x164>
 8002a44:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a48:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a4c:	fa93 f3a3 	rbit	r3, r3
 8002a50:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002a52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a54:	fab3 f383 	clz	r3, r3
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a5c:	d802      	bhi.n	8002a64 <HAL_RCC_ClockConfig+0x114>
 8002a5e:	4b4d      	ldr	r3, [pc, #308]	@ (8002b94 <HAL_RCC_ClockConfig+0x244>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	e00f      	b.n	8002a84 <HAL_RCC_ClockConfig+0x134>
 8002a64:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a68:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a6c:	fa93 f3a3 	rbit	r3, r3
 8002a70:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a76:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a7a:	fa93 f3a3 	rbit	r3, r3
 8002a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a80:	4b44      	ldr	r3, [pc, #272]	@ (8002b94 <HAL_RCC_ClockConfig+0x244>)
 8002a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a84:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a88:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002a8a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002a8c:	fa92 f2a2 	rbit	r2, r2
 8002a90:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002a92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a94:	fab2 f282 	clz	r2, r2
 8002a98:	b2d2      	uxtb	r2, r2
 8002a9a:	f042 0220 	orr.w	r2, r2, #32
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	f002 021f 	and.w	r2, r2, #31
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8002aaa:	4013      	ands	r3, r2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d135      	bne.n	8002b1c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e0ae      	b.n	8002c12 <HAL_RCC_ClockConfig+0x2c2>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aba:	fa93 f3a3 	rbit	r3, r3
 8002abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac2:	fab3 f383 	clz	r3, r3
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b3f      	cmp	r3, #63	@ 0x3f
 8002aca:	d802      	bhi.n	8002ad2 <HAL_RCC_ClockConfig+0x182>
 8002acc:	4b31      	ldr	r3, [pc, #196]	@ (8002b94 <HAL_RCC_ClockConfig+0x244>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	e00d      	b.n	8002aee <HAL_RCC_ClockConfig+0x19e>
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ad8:	fa93 f3a3 	rbit	r3, r3
 8002adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ade:	2302      	movs	r3, #2
 8002ae0:	623b      	str	r3, [r7, #32]
 8002ae2:	6a3b      	ldr	r3, [r7, #32]
 8002ae4:	fa93 f3a3 	rbit	r3, r3
 8002ae8:	61fb      	str	r3, [r7, #28]
 8002aea:	4b2a      	ldr	r3, [pc, #168]	@ (8002b94 <HAL_RCC_ClockConfig+0x244>)
 8002aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aee:	2202      	movs	r2, #2
 8002af0:	61ba      	str	r2, [r7, #24]
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	fa92 f2a2 	rbit	r2, r2
 8002af8:	617a      	str	r2, [r7, #20]
  return result;
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	fab2 f282 	clz	r2, r2
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	f042 0220 	orr.w	r2, r2, #32
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	f002 021f 	and.w	r2, r2, #31
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b12:	4013      	ands	r3, r2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e07a      	b.n	8002c12 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002b94 <HAL_RCC_ClockConfig+0x244>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f023 0203 	bic.w	r2, r3, #3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	491a      	ldr	r1, [pc, #104]	@ (8002b94 <HAL_RCC_ClockConfig+0x244>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b2e:	f7fe fbe9 	bl	8001304 <HAL_GetTick>
 8002b32:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b34:	e00a      	b.n	8002b4c <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b36:	f7fe fbe5 	bl	8001304 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e062      	b.n	8002c12 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4c:	4b11      	ldr	r3, [pc, #68]	@ (8002b94 <HAL_RCC_ClockConfig+0x244>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 020c 	and.w	r2, r3, #12
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d1eb      	bne.n	8002b36 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8002b90 <HAL_RCC_ClockConfig+0x240>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0307 	and.w	r3, r3, #7
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d215      	bcs.n	8002b98 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6c:	4b08      	ldr	r3, [pc, #32]	@ (8002b90 <HAL_RCC_ClockConfig+0x240>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f023 0207 	bic.w	r2, r3, #7
 8002b74:	4906      	ldr	r1, [pc, #24]	@ (8002b90 <HAL_RCC_ClockConfig+0x240>)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7c:	4b04      	ldr	r3, [pc, #16]	@ (8002b90 <HAL_RCC_ClockConfig+0x240>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d006      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e041      	b.n	8002c12 <HAL_RCC_ClockConfig+0x2c2>
 8002b8e:	bf00      	nop
 8002b90:	40022000 	.word	0x40022000
 8002b94:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d008      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba4:	4b1d      	ldr	r3, [pc, #116]	@ (8002c1c <HAL_RCC_ClockConfig+0x2cc>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	491a      	ldr	r1, [pc, #104]	@ (8002c1c <HAL_RCC_ClockConfig+0x2cc>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d009      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bc2:	4b16      	ldr	r3, [pc, #88]	@ (8002c1c <HAL_RCC_ClockConfig+0x2cc>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	4912      	ldr	r1, [pc, #72]	@ (8002c1c <HAL_RCC_ClockConfig+0x2cc>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002bd6:	f000 f829 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 8002bda:	4601      	mov	r1, r0
 8002bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8002c1c <HAL_RCC_ClockConfig+0x2cc>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002be4:	22f0      	movs	r2, #240	@ 0xf0
 8002be6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	fa92 f2a2 	rbit	r2, r2
 8002bee:	60fa      	str	r2, [r7, #12]
  return result;
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	fab2 f282 	clz	r2, r2
 8002bf6:	b2d2      	uxtb	r2, r2
 8002bf8:	40d3      	lsrs	r3, r2
 8002bfa:	4a09      	ldr	r2, [pc, #36]	@ (8002c20 <HAL_RCC_ClockConfig+0x2d0>)
 8002bfc:	5cd3      	ldrb	r3, [r2, r3]
 8002bfe:	fa21 f303 	lsr.w	r3, r1, r3
 8002c02:	4a08      	ldr	r2, [pc, #32]	@ (8002c24 <HAL_RCC_ClockConfig+0x2d4>)
 8002c04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002c06:	4b08      	ldr	r3, [pc, #32]	@ (8002c28 <HAL_RCC_ClockConfig+0x2d8>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fe fb36 	bl	800127c <HAL_InitTick>
  
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3778      	adds	r7, #120	@ 0x78
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	08005c94 	.word	0x08005c94
 8002c24:	20000014 	.word	0x20000014
 8002c28:	20000018 	.word	0x20000018

08002c2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	2300      	movs	r3, #0
 8002c38:	60bb      	str	r3, [r7, #8]
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]
 8002c3e:	2300      	movs	r3, #0
 8002c40:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c42:	2300      	movs	r3, #0
 8002c44:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002c46:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f003 030c 	and.w	r3, r3, #12
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d002      	beq.n	8002c5c <HAL_RCC_GetSysClockFreq+0x30>
 8002c56:	2b08      	cmp	r3, #8
 8002c58:	d003      	beq.n	8002c62 <HAL_RCC_GetSysClockFreq+0x36>
 8002c5a:	e026      	b.n	8002caa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c5c:	4b19      	ldr	r3, [pc, #100]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c5e:	613b      	str	r3, [r7, #16]
      break;
 8002c60:	e026      	b.n	8002cb0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	0c9b      	lsrs	r3, r3, #18
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	4a17      	ldr	r2, [pc, #92]	@ (8002cc8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c6c:	5cd3      	ldrb	r3, [r2, r3]
 8002c6e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002c70:	4b13      	ldr	r3, [pc, #76]	@ (8002cc0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c74:	f003 030f 	and.w	r3, r3, #15
 8002c78:	4a14      	ldr	r2, [pc, #80]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c7a:	5cd3      	ldrb	r3, [r2, r3]
 8002c7c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d008      	beq.n	8002c9a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c88:	4a0e      	ldr	r2, [pc, #56]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	fb02 f303 	mul.w	r3, r2, r3
 8002c96:	617b      	str	r3, [r7, #20]
 8002c98:	e004      	b.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a0c      	ldr	r2, [pc, #48]	@ (8002cd0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c9e:	fb02 f303 	mul.w	r3, r2, r3
 8002ca2:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	613b      	str	r3, [r7, #16]
      break;
 8002ca8:	e002      	b.n	8002cb0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002caa:	4b06      	ldr	r3, [pc, #24]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cac:	613b      	str	r3, [r7, #16]
      break;
 8002cae:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cb0:	693b      	ldr	r3, [r7, #16]
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	371c      	adds	r7, #28
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	007a1200 	.word	0x007a1200
 8002cc8:	08005cac 	.word	0x08005cac
 8002ccc:	08005cbc 	.word	0x08005cbc
 8002cd0:	003d0900 	.word	0x003d0900

08002cd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cd8:	4b03      	ldr	r3, [pc, #12]	@ (8002ce8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cda:	681b      	ldr	r3, [r3, #0]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	20000014 	.word	0x20000014

08002cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002cf2:	f7ff ffef 	bl	8002cd4 <HAL_RCC_GetHCLKFreq>
 8002cf6:	4601      	mov	r1, r0
 8002cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8002d28 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d00:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002d04:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	fa92 f2a2 	rbit	r2, r2
 8002d0c:	603a      	str	r2, [r7, #0]
  return result;
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	fab2 f282 	clz	r2, r2
 8002d14:	b2d2      	uxtb	r2, r2
 8002d16:	40d3      	lsrs	r3, r2
 8002d18:	4a04      	ldr	r2, [pc, #16]	@ (8002d2c <HAL_RCC_GetPCLK1Freq+0x40>)
 8002d1a:	5cd3      	ldrb	r3, [r2, r3]
 8002d1c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002d20:	4618      	mov	r0, r3
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	08005ca4 	.word	0x08005ca4

08002d30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002d36:	f7ff ffcd 	bl	8002cd4 <HAL_RCC_GetHCLKFreq>
 8002d3a:	4601      	mov	r1, r0
 8002d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d6c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002d44:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002d48:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	fa92 f2a2 	rbit	r2, r2
 8002d50:	603a      	str	r2, [r7, #0]
  return result;
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	fab2 f282 	clz	r2, r2
 8002d58:	b2d2      	uxtb	r2, r2
 8002d5a:	40d3      	lsrs	r3, r2
 8002d5c:	4a04      	ldr	r2, [pc, #16]	@ (8002d70 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002d5e:	5cd3      	ldrb	r3, [r2, r3]
 8002d60:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002d64:	4618      	mov	r0, r3
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	08005ca4 	.word	0x08005ca4

08002d74 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b092      	sub	sp, #72	@ 0x48
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002d84:	2300      	movs	r3, #0
 8002d86:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f000 80cb 	beq.w	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x1ba>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d98:	4b85      	ldr	r3, [pc, #532]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10e      	bne.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002da4:	4b82      	ldr	r3, [pc, #520]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	4a81      	ldr	r2, [pc, #516]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002daa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dae:	61d3      	str	r3, [r2, #28]
 8002db0:	4b7f      	ldr	r3, [pc, #508]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc2:	4b7c      	ldr	r3, [pc, #496]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d118      	bne.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dce:	4b79      	ldr	r3, [pc, #484]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a78      	ldr	r2, [pc, #480]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dd8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dda:	f7fe fa93 	bl	8001304 <HAL_GetTick>
 8002dde:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de0:	e008      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de2:	f7fe fa8f 	bl	8001304 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b64      	cmp	r3, #100	@ 0x64
 8002dee:	d901      	bls.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e0d9      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x234>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df4:	4b6f      	ldr	r3, [pc, #444]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0f0      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e00:	4b6b      	ldr	r3, [pc, #428]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d07b      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e18:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d074      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e1e:	4b64      	ldr	r3, [pc, #400]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e28:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e2c:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e30:	fa93 f3a3 	rbit	r3, r3
 8002e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e38:	fab3 f383 	clz	r3, r3
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	461a      	mov	r2, r3
 8002e40:	4b5d      	ldr	r3, [pc, #372]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002e42:	4413      	add	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	461a      	mov	r2, r3
 8002e48:	2301      	movs	r3, #1
 8002e4a:	6013      	str	r3, [r2, #0]
 8002e4c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e50:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e54:	fa93 f3a3 	rbit	r3, r3
 8002e58:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e5c:	fab3 f383 	clz	r3, r3
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	461a      	mov	r2, r3
 8002e64:	4b54      	ldr	r3, [pc, #336]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002e66:	4413      	add	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e70:	4a4f      	ldr	r2, [pc, #316]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002e72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e74:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d043      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e80:	f7fe fa40 	bl	8001304 <HAL_GetTick>
 8002e84:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e86:	e00a      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e88:	f7fe fa3c 	bl	8001304 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e084      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ea4:	fa93 f3a3 	rbit	r3, r3
 8002ea8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eaa:	2302      	movs	r3, #2
 8002eac:	623b      	str	r3, [r7, #32]
 8002eae:	6a3b      	ldr	r3, [r7, #32]
 8002eb0:	fa93 f3a3 	rbit	r3, r3
 8002eb4:	61fb      	str	r3, [r7, #28]
  return result;
 8002eb6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb8:	fab3 f383 	clz	r3, r3
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d102      	bne.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002ec8:	4b39      	ldr	r3, [pc, #228]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	e007      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	fa93 f3a3 	rbit	r3, r3
 8002ed8:	617b      	str	r3, [r7, #20]
 8002eda:	4b35      	ldr	r3, [pc, #212]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ede:	2202      	movs	r2, #2
 8002ee0:	613a      	str	r2, [r7, #16]
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	fa92 f2a2 	rbit	r2, r2
 8002ee8:	60fa      	str	r2, [r7, #12]
  return result;
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	fab2 f282 	clz	r2, r2
 8002ef0:	b2d2      	uxtb	r2, r2
 8002ef2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	f002 021f 	and.w	r2, r2, #31
 8002efc:	2101      	movs	r1, #1
 8002efe:	fa01 f202 	lsl.w	r2, r1, r2
 8002f02:	4013      	ands	r3, r2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0bf      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002f08:	4b29      	ldr	r3, [pc, #164]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	4926      	ldr	r1, [pc, #152]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f1a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d105      	bne.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f22:	4b23      	ldr	r3, [pc, #140]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	4a22      	ldr	r2, [pc, #136]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002f28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f2c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d008      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f3a:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3e:	f023 0203 	bic.w	r2, r3, #3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	491a      	ldr	r1, [pc, #104]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0320 	and.w	r3, r3, #32
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f58:	4b15      	ldr	r3, [pc, #84]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5c:	f023 0210 	bic.w	r2, r3, #16
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	4912      	ldr	r1, [pc, #72]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d008      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f76:	4b0e      	ldr	r3, [pc, #56]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f7a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	490b      	ldr	r1, [pc, #44]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d008      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f94:	4b06      	ldr	r3, [pc, #24]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	4903      	ldr	r1, [pc, #12]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3748      	adds	r7, #72	@ 0x48
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	40007000 	.word	0x40007000
 8002fb8:	10908100 	.word	0x10908100

08002fbc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b08a      	sub	sp, #40	@ 0x28
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fd0:	2b20      	cmp	r3, #32
 8002fd2:	d132      	bne.n	800303a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d002      	beq.n	8002fe0 <HAL_UART_Receive_IT+0x24>
 8002fda:	88fb      	ldrh	r3, [r7, #6]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e02b      	b.n	800303c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d018      	beq.n	800302a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	e853 3f00 	ldrex	r3, [r3]
 8003004:	613b      	str	r3, [r7, #16]
   return(result);
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800300c:	627b      	str	r3, [r7, #36]	@ 0x24
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	461a      	mov	r2, r3
 8003014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003016:	623b      	str	r3, [r7, #32]
 8003018:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800301a:	69f9      	ldr	r1, [r7, #28]
 800301c:	6a3a      	ldr	r2, [r7, #32]
 800301e:	e841 2300 	strex	r3, r2, [r1]
 8003022:	61bb      	str	r3, [r7, #24]
   return(result);
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1e6      	bne.n	8002ff8 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800302a:	88fb      	ldrh	r3, [r7, #6]
 800302c:	461a      	mov	r2, r3
 800302e:	68b9      	ldr	r1, [r7, #8]
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f000 ff03 	bl	8003e3c <UART_Start_Receive_IT>
 8003036:	4603      	mov	r3, r0
 8003038:	e000      	b.n	800303c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800303a:	2302      	movs	r3, #2
  }
}
 800303c:	4618      	mov	r0, r3
 800303e:	3728      	adds	r7, #40	@ 0x28
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b0a0      	sub	sp, #128	@ 0x80
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003052:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003054:	e853 3f00 	ldrex	r3, [r3]
 8003058:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800305a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800305c:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8003060:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800306a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800306c:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800306e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003070:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003072:	e841 2300 	strex	r3, r2, [r1]
 8003076:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8003078:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1e6      	bne.n	800304c <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	3308      	adds	r3, #8
 8003084:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003086:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003088:	e853 3f00 	ldrex	r3, [r3]
 800308c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800308e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003090:	f023 0301 	bic.w	r3, r3, #1
 8003094:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	3308      	adds	r3, #8
 800309c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800309e:	657a      	str	r2, [r7, #84]	@ 0x54
 80030a0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80030a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80030a6:	e841 2300 	strex	r3, r2, [r1]
 80030aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80030ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1e5      	bne.n	800307e <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d118      	bne.n	80030ec <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030c2:	e853 3f00 	ldrex	r3, [r3]
 80030c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80030c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ca:	f023 0310 	bic.w	r3, r3, #16
 80030ce:	677b      	str	r3, [r7, #116]	@ 0x74
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	461a      	mov	r2, r3
 80030d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80030da:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80030de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80030e0:	e841 2300 	strex	r3, r2, [r1]
 80030e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80030e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1e6      	bne.n	80030ba <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030f6:	2b80      	cmp	r3, #128	@ 0x80
 80030f8:	d137      	bne.n	800316a <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	3308      	adds	r3, #8
 8003100:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003102:	6a3b      	ldr	r3, [r7, #32]
 8003104:	e853 3f00 	ldrex	r3, [r3]
 8003108:	61fb      	str	r3, [r7, #28]
   return(result);
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003110:	673b      	str	r3, [r7, #112]	@ 0x70
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	3308      	adds	r3, #8
 8003118:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800311a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800311c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800311e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003120:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003122:	e841 2300 	strex	r3, r2, [r1]
 8003126:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1e5      	bne.n	80030fa <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003132:	2b00      	cmp	r3, #0
 8003134:	d019      	beq.n	800316a <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800313a:	2200      	movs	r2, #0
 800313c:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003142:	4618      	mov	r0, r3
 8003144:	f7fe f9fb 	bl	800153e <HAL_DMA_Abort>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00d      	beq.n	800316a <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003152:	4618      	mov	r0, r3
 8003154:	f7fe fa6f 	bl	8001636 <HAL_DMA_GetError>
 8003158:	4603      	mov	r3, r0
 800315a:	2b20      	cmp	r3, #32
 800315c:	d105      	bne.n	800316a <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2210      	movs	r2, #16
 8003162:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e061      	b.n	800322e <HAL_UART_Abort+0x1ea>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003174:	2b40      	cmp	r3, #64	@ 0x40
 8003176:	d137      	bne.n	80031e8 <HAL_UART_Abort+0x1a4>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	3308      	adds	r3, #8
 800317e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	e853 3f00 	ldrex	r3, [r3]
 8003186:	60bb      	str	r3, [r7, #8]
   return(result);
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800318e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	3308      	adds	r3, #8
 8003196:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003198:	61ba      	str	r2, [r7, #24]
 800319a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319c:	6979      	ldr	r1, [r7, #20]
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	e841 2300 	strex	r3, r2, [r1]
 80031a4:	613b      	str	r3, [r7, #16]
   return(result);
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1e5      	bne.n	8003178 <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d019      	beq.n	80031e8 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031b8:	2200      	movs	r2, #0
 80031ba:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7fe f9bc 	bl	800153e <HAL_DMA_Abort>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00d      	beq.n	80031e8 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fe fa30 	bl	8001636 <HAL_DMA_GetError>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b20      	cmp	r3, #32
 80031da:	d105      	bne.n	80031e8 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2210      	movs	r2, #16
 80031e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e022      	b.n	800322e <HAL_UART_Abort+0x1ea>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  huart->RxXferCount = 0U;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	220f      	movs	r2, #15
 80031fe:	621a      	str	r2, [r3, #32]


  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	699a      	ldr	r2, [r3, #24]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f042 0208 	orr.w	r2, r2, #8
 800320e:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2220      	movs	r2, #32
 8003214:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2220      	movs	r2, #32
 800321a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	661a      	str	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3780      	adds	r7, #128	@ 0x80
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
	...

08003238 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b0ba      	sub	sp, #232	@ 0xe8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800325e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003262:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003266:	4013      	ands	r3, r2
 8003268:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800326c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003270:	2b00      	cmp	r3, #0
 8003272:	d115      	bne.n	80032a0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003278:	f003 0320 	and.w	r3, r3, #32
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00f      	beq.n	80032a0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003284:	f003 0320 	and.w	r3, r3, #32
 8003288:	2b00      	cmp	r3, #0
 800328a:	d009      	beq.n	80032a0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 82ab 	beq.w	80037ec <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	4798      	blx	r3
      }
      return;
 800329e:	e2a5      	b.n	80037ec <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80032a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 8117 	beq.w	80034d8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80032aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d106      	bne.n	80032c4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80032b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80032ba:	4b85      	ldr	r3, [pc, #532]	@ (80034d0 <HAL_UART_IRQHandler+0x298>)
 80032bc:	4013      	ands	r3, r2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 810a 	beq.w	80034d8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80032c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d011      	beq.n	80032f4 <HAL_UART_IRQHandler+0xbc>
 80032d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00b      	beq.n	80032f4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2201      	movs	r2, #1
 80032e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032ea:	f043 0201 	orr.w	r2, r3, #1
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d011      	beq.n	8003324 <HAL_UART_IRQHandler+0xec>
 8003300:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00b      	beq.n	8003324 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2202      	movs	r2, #2
 8003312:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800331a:	f043 0204 	orr.w	r2, r3, #4
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	d011      	beq.n	8003354 <HAL_UART_IRQHandler+0x11c>
 8003330:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00b      	beq.n	8003354 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2204      	movs	r2, #4
 8003342:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800334a:	f043 0202 	orr.w	r2, r3, #2
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b00      	cmp	r3, #0
 800335e:	d017      	beq.n	8003390 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003364:	f003 0320 	and.w	r3, r3, #32
 8003368:	2b00      	cmp	r3, #0
 800336a:	d105      	bne.n	8003378 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800336c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003370:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00b      	beq.n	8003390 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2208      	movs	r2, #8
 800337e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003386:	f043 0208 	orr.w	r2, r3, #8
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003394:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003398:	2b00      	cmp	r3, #0
 800339a:	d012      	beq.n	80033c2 <HAL_UART_IRQHandler+0x18a>
 800339c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00c      	beq.n	80033c2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80033b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033b8:	f043 0220 	orr.w	r2, r3, #32
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 8211 	beq.w	80037f0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80033ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033d2:	f003 0320 	and.w	r3, r3, #32
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00d      	beq.n	80033f6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80033da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d007      	beq.n	80033f6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800340a:	2b40      	cmp	r3, #64	@ 0x40
 800340c:	d005      	beq.n	800341a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800340e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003412:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003416:	2b00      	cmp	r3, #0
 8003418:	d04f      	beq.n	80034ba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 fdd4 	bl	8003fc8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800342a:	2b40      	cmp	r3, #64	@ 0x40
 800342c:	d141      	bne.n	80034b2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	3308      	adds	r3, #8
 8003434:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003438:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800343c:	e853 3f00 	ldrex	r3, [r3]
 8003440:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003444:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003448:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800344c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	3308      	adds	r3, #8
 8003456:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800345a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800345e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003462:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003466:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800346a:	e841 2300 	strex	r3, r2, [r1]
 800346e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003472:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1d9      	bne.n	800342e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800347e:	2b00      	cmp	r3, #0
 8003480:	d013      	beq.n	80034aa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003486:	4a13      	ldr	r2, [pc, #76]	@ (80034d4 <HAL_UART_IRQHandler+0x29c>)
 8003488:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800348e:	4618      	mov	r0, r3
 8003490:	f7fe f893 	bl	80015ba <HAL_DMA_Abort_IT>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d017      	beq.n	80034ca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800349e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80034a4:	4610      	mov	r0, r2
 80034a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034a8:	e00f      	b.n	80034ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f9b4 	bl	8003818 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034b0:	e00b      	b.n	80034ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f9b0 	bl	8003818 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034b8:	e007      	b.n	80034ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f9ac 	bl	8003818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80034c8:	e192      	b.n	80037f0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034ca:	bf00      	nop
    return;
 80034cc:	e190      	b.n	80037f0 <HAL_UART_IRQHandler+0x5b8>
 80034ce:	bf00      	nop
 80034d0:	04000120 	.word	0x04000120
 80034d4:	08004091 	.word	0x08004091

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034dc:	2b01      	cmp	r3, #1
 80034de:	f040 814b 	bne.w	8003778 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80034e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034e6:	f003 0310 	and.w	r3, r3, #16
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 8144 	beq.w	8003778 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80034f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034f4:	f003 0310 	and.w	r3, r3, #16
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 813d 	beq.w	8003778 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2210      	movs	r2, #16
 8003504:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003510:	2b40      	cmp	r3, #64	@ 0x40
 8003512:	f040 80b5 	bne.w	8003680 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003522:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003526:	2b00      	cmp	r3, #0
 8003528:	f000 8164 	beq.w	80037f4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003532:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003536:	429a      	cmp	r2, r3
 8003538:	f080 815c 	bcs.w	80037f4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003542:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	2b20      	cmp	r3, #32
 800354e:	f000 8086 	beq.w	800365e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800355a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800355e:	e853 3f00 	ldrex	r3, [r3]
 8003562:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003566:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800356a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800356e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	461a      	mov	r2, r3
 8003578:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800357c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003580:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003584:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003588:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800358c:	e841 2300 	strex	r3, r2, [r1]
 8003590:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003594:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1da      	bne.n	8003552 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	3308      	adds	r3, #8
 80035a2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035a6:	e853 3f00 	ldrex	r3, [r3]
 80035aa:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80035ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035ae:	f023 0301 	bic.w	r3, r3, #1
 80035b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	3308      	adds	r3, #8
 80035bc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80035c0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80035c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80035c8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80035cc:	e841 2300 	strex	r3, r2, [r1]
 80035d0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80035d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1e1      	bne.n	800359c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	3308      	adds	r3, #8
 80035de:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035e2:	e853 3f00 	ldrex	r3, [r3]
 80035e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80035e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	3308      	adds	r3, #8
 80035f8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80035fc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80035fe:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003600:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003602:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003604:	e841 2300 	strex	r3, r2, [r1]
 8003608:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800360a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1e3      	bne.n	80035d8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2220      	movs	r2, #32
 8003614:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003624:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003626:	e853 3f00 	ldrex	r3, [r3]
 800362a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800362c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800362e:	f023 0310 	bic.w	r3, r3, #16
 8003632:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	461a      	mov	r2, r3
 800363c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003640:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003642:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003644:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003646:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003648:	e841 2300 	strex	r3, r2, [r1]
 800364c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800364e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1e4      	bne.n	800361e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003658:	4618      	mov	r0, r3
 800365a:	f7fd ff70 	bl	800153e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2202      	movs	r2, #2
 8003662:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003670:	b29b      	uxth	r3, r3
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	b29b      	uxth	r3, r3
 8003676:	4619      	mov	r1, r3
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f8d7 	bl	800382c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800367e:	e0b9      	b.n	80037f4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800368c:	b29b      	uxth	r3, r3
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800369a:	b29b      	uxth	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 80ab 	beq.w	80037f8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80036a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 80a6 	beq.w	80037f8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036b4:	e853 3f00 	ldrex	r3, [r3]
 80036b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80036ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	461a      	mov	r2, r3
 80036ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80036ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80036d0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80036d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036d6:	e841 2300 	strex	r3, r2, [r1]
 80036da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80036dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1e4      	bne.n	80036ac <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	3308      	adds	r3, #8
 80036e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ec:	e853 3f00 	ldrex	r3, [r3]
 80036f0:	623b      	str	r3, [r7, #32]
   return(result);
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	f023 0301 	bic.w	r3, r3, #1
 80036f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	3308      	adds	r3, #8
 8003702:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003706:	633a      	str	r2, [r7, #48]	@ 0x30
 8003708:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800370c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800370e:	e841 2300 	strex	r3, r2, [r1]
 8003712:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1e3      	bne.n	80036e2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2220      	movs	r2, #32
 800371e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	e853 3f00 	ldrex	r3, [r3]
 800373a:	60fb      	str	r3, [r7, #12]
   return(result);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f023 0310 	bic.w	r3, r3, #16
 8003742:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	461a      	mov	r2, r3
 800374c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003750:	61fb      	str	r3, [r7, #28]
 8003752:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003754:	69b9      	ldr	r1, [r7, #24]
 8003756:	69fa      	ldr	r2, [r7, #28]
 8003758:	e841 2300 	strex	r3, r2, [r1]
 800375c:	617b      	str	r3, [r7, #20]
   return(result);
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1e4      	bne.n	800372e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2202      	movs	r2, #2
 8003768:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800376a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800376e:	4619      	mov	r1, r3
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 f85b 	bl	800382c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003776:	e03f      	b.n	80037f8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800377c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00e      	beq.n	80037a2 <HAL_UART_IRQHandler+0x56a>
 8003784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003788:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d008      	beq.n	80037a2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003798:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 fec7 	bl	800452e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80037a0:	e02d      	b.n	80037fe <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80037a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00e      	beq.n	80037cc <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80037ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d008      	beq.n	80037cc <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d01c      	beq.n	80037fc <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	4798      	blx	r3
    }
    return;
 80037ca:	e017      	b.n	80037fc <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80037cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d012      	beq.n	80037fe <HAL_UART_IRQHandler+0x5c6>
 80037d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00c      	beq.n	80037fe <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 fc69 	bl	80040bc <UART_EndTransmit_IT>
    return;
 80037ea:	e008      	b.n	80037fe <HAL_UART_IRQHandler+0x5c6>
      return;
 80037ec:	bf00      	nop
 80037ee:	e006      	b.n	80037fe <HAL_UART_IRQHandler+0x5c6>
    return;
 80037f0:	bf00      	nop
 80037f2:	e004      	b.n	80037fe <HAL_UART_IRQHandler+0x5c6>
      return;
 80037f4:	bf00      	nop
 80037f6:	e002      	b.n	80037fe <HAL_UART_IRQHandler+0x5c6>
      return;
 80037f8:	bf00      	nop
 80037fa:	e000      	b.n	80037fe <HAL_UART_IRQHandler+0x5c6>
    return;
 80037fc:	bf00      	nop
  }

}
 80037fe:	37e8      	adds	r7, #232	@ 0xe8
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	460b      	mov	r3, r1
 8003836:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
}
 8003852:	4618      	mov	r0, r3
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
	...

08003860 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b088      	sub	sp, #32
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003868:	2300      	movs	r3, #0
 800386a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	431a      	orrs	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	4313      	orrs	r3, r2
 8003882:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	4b8a      	ldr	r3, [pc, #552]	@ (8003ab4 <UART_SetConfig+0x254>)
 800388c:	4013      	ands	r3, r2
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6812      	ldr	r2, [r2, #0]
 8003892:	6979      	ldr	r1, [r7, #20]
 8003894:	430b      	orrs	r3, r1
 8003896:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68da      	ldr	r2, [r3, #12]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a78      	ldr	r2, [pc, #480]	@ (8003ab8 <UART_SetConfig+0x258>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d120      	bne.n	800391e <UART_SetConfig+0xbe>
 80038dc:	4b77      	ldr	r3, [pc, #476]	@ (8003abc <UART_SetConfig+0x25c>)
 80038de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e0:	f003 0303 	and.w	r3, r3, #3
 80038e4:	2b03      	cmp	r3, #3
 80038e6:	d817      	bhi.n	8003918 <UART_SetConfig+0xb8>
 80038e8:	a201      	add	r2, pc, #4	@ (adr r2, 80038f0 <UART_SetConfig+0x90>)
 80038ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ee:	bf00      	nop
 80038f0:	08003901 	.word	0x08003901
 80038f4:	0800390d 	.word	0x0800390d
 80038f8:	08003913 	.word	0x08003913
 80038fc:	08003907 	.word	0x08003907
 8003900:	2300      	movs	r3, #0
 8003902:	77fb      	strb	r3, [r7, #31]
 8003904:	e01d      	b.n	8003942 <UART_SetConfig+0xe2>
 8003906:	2302      	movs	r3, #2
 8003908:	77fb      	strb	r3, [r7, #31]
 800390a:	e01a      	b.n	8003942 <UART_SetConfig+0xe2>
 800390c:	2304      	movs	r3, #4
 800390e:	77fb      	strb	r3, [r7, #31]
 8003910:	e017      	b.n	8003942 <UART_SetConfig+0xe2>
 8003912:	2308      	movs	r3, #8
 8003914:	77fb      	strb	r3, [r7, #31]
 8003916:	e014      	b.n	8003942 <UART_SetConfig+0xe2>
 8003918:	2310      	movs	r3, #16
 800391a:	77fb      	strb	r3, [r7, #31]
 800391c:	e011      	b.n	8003942 <UART_SetConfig+0xe2>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a67      	ldr	r2, [pc, #412]	@ (8003ac0 <UART_SetConfig+0x260>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d102      	bne.n	800392e <UART_SetConfig+0xce>
 8003928:	2300      	movs	r3, #0
 800392a:	77fb      	strb	r3, [r7, #31]
 800392c:	e009      	b.n	8003942 <UART_SetConfig+0xe2>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a64      	ldr	r2, [pc, #400]	@ (8003ac4 <UART_SetConfig+0x264>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d102      	bne.n	800393e <UART_SetConfig+0xde>
 8003938:	2300      	movs	r3, #0
 800393a:	77fb      	strb	r3, [r7, #31]
 800393c:	e001      	b.n	8003942 <UART_SetConfig+0xe2>
 800393e:	2310      	movs	r3, #16
 8003940:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800394a:	d15a      	bne.n	8003a02 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800394c:	7ffb      	ldrb	r3, [r7, #31]
 800394e:	2b08      	cmp	r3, #8
 8003950:	d827      	bhi.n	80039a2 <UART_SetConfig+0x142>
 8003952:	a201      	add	r2, pc, #4	@ (adr r2, 8003958 <UART_SetConfig+0xf8>)
 8003954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003958:	0800397d 	.word	0x0800397d
 800395c:	08003985 	.word	0x08003985
 8003960:	0800398d 	.word	0x0800398d
 8003964:	080039a3 	.word	0x080039a3
 8003968:	08003993 	.word	0x08003993
 800396c:	080039a3 	.word	0x080039a3
 8003970:	080039a3 	.word	0x080039a3
 8003974:	080039a3 	.word	0x080039a3
 8003978:	0800399b 	.word	0x0800399b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800397c:	f7ff f9b6 	bl	8002cec <HAL_RCC_GetPCLK1Freq>
 8003980:	61b8      	str	r0, [r7, #24]
        break;
 8003982:	e013      	b.n	80039ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003984:	f7ff f9d4 	bl	8002d30 <HAL_RCC_GetPCLK2Freq>
 8003988:	61b8      	str	r0, [r7, #24]
        break;
 800398a:	e00f      	b.n	80039ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800398c:	4b4e      	ldr	r3, [pc, #312]	@ (8003ac8 <UART_SetConfig+0x268>)
 800398e:	61bb      	str	r3, [r7, #24]
        break;
 8003990:	e00c      	b.n	80039ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003992:	f7ff f94b 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 8003996:	61b8      	str	r0, [r7, #24]
        break;
 8003998:	e008      	b.n	80039ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800399a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800399e:	61bb      	str	r3, [r7, #24]
        break;
 80039a0:	e004      	b.n	80039ac <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	77bb      	strb	r3, [r7, #30]
        break;
 80039aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d074      	beq.n	8003a9c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	005a      	lsls	r2, r3, #1
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	085b      	lsrs	r3, r3, #1
 80039bc:	441a      	add	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	2b0f      	cmp	r3, #15
 80039cc:	d916      	bls.n	80039fc <UART_SetConfig+0x19c>
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039d4:	d212      	bcs.n	80039fc <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	b29b      	uxth	r3, r3
 80039da:	f023 030f 	bic.w	r3, r3, #15
 80039de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	085b      	lsrs	r3, r3, #1
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	89fb      	ldrh	r3, [r7, #14]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	89fa      	ldrh	r2, [r7, #14]
 80039f8:	60da      	str	r2, [r3, #12]
 80039fa:	e04f      	b.n	8003a9c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	77bb      	strb	r3, [r7, #30]
 8003a00:	e04c      	b.n	8003a9c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a02:	7ffb      	ldrb	r3, [r7, #31]
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	d828      	bhi.n	8003a5a <UART_SetConfig+0x1fa>
 8003a08:	a201      	add	r2, pc, #4	@ (adr r2, 8003a10 <UART_SetConfig+0x1b0>)
 8003a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a0e:	bf00      	nop
 8003a10:	08003a35 	.word	0x08003a35
 8003a14:	08003a3d 	.word	0x08003a3d
 8003a18:	08003a45 	.word	0x08003a45
 8003a1c:	08003a5b 	.word	0x08003a5b
 8003a20:	08003a4b 	.word	0x08003a4b
 8003a24:	08003a5b 	.word	0x08003a5b
 8003a28:	08003a5b 	.word	0x08003a5b
 8003a2c:	08003a5b 	.word	0x08003a5b
 8003a30:	08003a53 	.word	0x08003a53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a34:	f7ff f95a 	bl	8002cec <HAL_RCC_GetPCLK1Freq>
 8003a38:	61b8      	str	r0, [r7, #24]
        break;
 8003a3a:	e013      	b.n	8003a64 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a3c:	f7ff f978 	bl	8002d30 <HAL_RCC_GetPCLK2Freq>
 8003a40:	61b8      	str	r0, [r7, #24]
        break;
 8003a42:	e00f      	b.n	8003a64 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a44:	4b20      	ldr	r3, [pc, #128]	@ (8003ac8 <UART_SetConfig+0x268>)
 8003a46:	61bb      	str	r3, [r7, #24]
        break;
 8003a48:	e00c      	b.n	8003a64 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a4a:	f7ff f8ef 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 8003a4e:	61b8      	str	r0, [r7, #24]
        break;
 8003a50:	e008      	b.n	8003a64 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a56:	61bb      	str	r3, [r7, #24]
        break;
 8003a58:	e004      	b.n	8003a64 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	77bb      	strb	r3, [r7, #30]
        break;
 8003a62:	bf00      	nop
    }

    if (pclk != 0U)
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d018      	beq.n	8003a9c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	085a      	lsrs	r2, r3, #1
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	441a      	add	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	2b0f      	cmp	r3, #15
 8003a82:	d909      	bls.n	8003a98 <UART_SetConfig+0x238>
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a8a:	d205      	bcs.n	8003a98 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	60da      	str	r2, [r3, #12]
 8003a96:	e001      	b.n	8003a9c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003aa8:	7fbb      	ldrb	r3, [r7, #30]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3720      	adds	r7, #32
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	efff69f3 	.word	0xefff69f3
 8003ab8:	40013800 	.word	0x40013800
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	40004400 	.word	0x40004400
 8003ac4:	40004800 	.word	0x40004800
 8003ac8:	007a1200 	.word	0x007a1200

08003acc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad8:	f003 0308 	and.w	r3, r3, #8
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00a      	beq.n	8003af6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00a      	beq.n	8003b18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00a      	beq.n	8003b3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3e:	f003 0304 	and.w	r3, r3, #4
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00a      	beq.n	8003b5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b60:	f003 0310 	and.w	r3, r3, #16
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00a      	beq.n	8003b7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b82:	f003 0320 	and.w	r3, r3, #32
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00a      	beq.n	8003ba0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d01a      	beq.n	8003be2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bca:	d10a      	bne.n	8003be2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00a      	beq.n	8003c04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	605a      	str	r2, [r3, #4]
  }
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b098      	sub	sp, #96	@ 0x60
 8003c14:	af02      	add	r7, sp, #8
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c20:	f7fd fb70 	bl	8001304 <HAL_GetTick>
 8003c24:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0308 	and.w	r3, r3, #8
 8003c30:	2b08      	cmp	r3, #8
 8003c32:	d12e      	bne.n	8003c92 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c34:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f88c 	bl	8003d60 <UART_WaitOnFlagUntilTimeout>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d021      	beq.n	8003c92 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c56:	e853 3f00 	ldrex	r3, [r3]
 8003c5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c62:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	461a      	mov	r2, r3
 8003c6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c6e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c74:	e841 2300 	strex	r3, r2, [r1]
 8003c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1e6      	bne.n	8003c4e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2220      	movs	r2, #32
 8003c84:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e062      	b.n	8003d58 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0304 	and.w	r3, r3, #4
 8003c9c:	2b04      	cmp	r3, #4
 8003c9e:	d149      	bne.n	8003d34 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ca0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f856 	bl	8003d60 <UART_WaitOnFlagUntilTimeout>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d03c      	beq.n	8003d34 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc2:	e853 3f00 	ldrex	r3, [r3]
 8003cc6:	623b      	str	r3, [r7, #32]
   return(result);
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
 8003cca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cda:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cdc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003cde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ce0:	e841 2300 	strex	r3, r2, [r1]
 8003ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1e6      	bne.n	8003cba <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	3308      	adds	r3, #8
 8003cf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	e853 3f00 	ldrex	r3, [r3]
 8003cfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f023 0301 	bic.w	r3, r3, #1
 8003d02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	3308      	adds	r3, #8
 8003d0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d0c:	61fa      	str	r2, [r7, #28]
 8003d0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d10:	69b9      	ldr	r1, [r7, #24]
 8003d12:	69fa      	ldr	r2, [r7, #28]
 8003d14:	e841 2300 	strex	r3, r2, [r1]
 8003d18:	617b      	str	r3, [r7, #20]
   return(result);
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1e5      	bne.n	8003cec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2220      	movs	r2, #32
 8003d24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e011      	b.n	8003d58 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2220      	movs	r2, #32
 8003d38:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3758      	adds	r7, #88	@ 0x58
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	603b      	str	r3, [r7, #0]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d70:	e04f      	b.n	8003e12 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d78:	d04b      	beq.n	8003e12 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d7a:	f7fd fac3 	bl	8001304 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d302      	bcc.n	8003d90 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e04e      	b.n	8003e32 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0304 	and.w	r3, r3, #4
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d037      	beq.n	8003e12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	2b80      	cmp	r3, #128	@ 0x80
 8003da6:	d034      	beq.n	8003e12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	2b40      	cmp	r3, #64	@ 0x40
 8003dac:	d031      	beq.n	8003e12 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	69db      	ldr	r3, [r3, #28]
 8003db4:	f003 0308 	and.w	r3, r3, #8
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d110      	bne.n	8003dde <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2208      	movs	r2, #8
 8003dc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 f8ff 	bl	8003fc8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2208      	movs	r2, #8
 8003dce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e029      	b.n	8003e32 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003de8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dec:	d111      	bne.n	8003e12 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003df6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f000 f8e5 	bl	8003fc8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2220      	movs	r2, #32
 8003e02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e00f      	b.n	8003e32 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	69da      	ldr	r2, [r3, #28]
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	bf0c      	ite	eq
 8003e22:	2301      	moveq	r3, #1
 8003e24:	2300      	movne	r3, #0
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	461a      	mov	r2, r3
 8003e2a:	79fb      	ldrb	r3, [r7, #7]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d0a0      	beq.n	8003d72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
	...

08003e3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b097      	sub	sp, #92	@ 0x5c
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	4613      	mov	r3, r2
 8003e48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	88fa      	ldrh	r2, [r7, #6]
 8003e54:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	88fa      	ldrh	r2, [r7, #6]
 8003e5c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e6e:	d10e      	bne.n	8003e8e <UART_Start_Receive_IT+0x52>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d105      	bne.n	8003e84 <UART_Start_Receive_IT+0x48>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003e7e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e82:	e02d      	b.n	8003ee0 <UART_Start_Receive_IT+0xa4>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	22ff      	movs	r2, #255	@ 0xff
 8003e88:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e8c:	e028      	b.n	8003ee0 <UART_Start_Receive_IT+0xa4>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10d      	bne.n	8003eb2 <UART_Start_Receive_IT+0x76>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d104      	bne.n	8003ea8 <UART_Start_Receive_IT+0x6c>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	22ff      	movs	r2, #255	@ 0xff
 8003ea2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003ea6:	e01b      	b.n	8003ee0 <UART_Start_Receive_IT+0xa4>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	227f      	movs	r2, #127	@ 0x7f
 8003eac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003eb0:	e016      	b.n	8003ee0 <UART_Start_Receive_IT+0xa4>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003eba:	d10d      	bne.n	8003ed8 <UART_Start_Receive_IT+0x9c>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d104      	bne.n	8003ece <UART_Start_Receive_IT+0x92>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	227f      	movs	r2, #127	@ 0x7f
 8003ec8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003ecc:	e008      	b.n	8003ee0 <UART_Start_Receive_IT+0xa4>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	223f      	movs	r2, #63	@ 0x3f
 8003ed2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003ed6:	e003      	b.n	8003ee0 <UART_Start_Receive_IT+0xa4>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2222      	movs	r2, #34	@ 0x22
 8003eec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3308      	adds	r3, #8
 8003ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003efa:	e853 3f00 	ldrex	r3, [r3]
 8003efe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f02:	f043 0301 	orr.w	r3, r3, #1
 8003f06:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3308      	adds	r3, #8
 8003f0e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003f10:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003f12:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f14:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003f16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f18:	e841 2300 	strex	r3, r2, [r1]
 8003f1c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003f1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1e5      	bne.n	8003ef0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f2c:	d107      	bne.n	8003f3e <UART_Start_Receive_IT+0x102>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d103      	bne.n	8003f3e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	4a21      	ldr	r2, [pc, #132]	@ (8003fc0 <UART_Start_Receive_IT+0x184>)
 8003f3a:	669a      	str	r2, [r3, #104]	@ 0x68
 8003f3c:	e002      	b.n	8003f44 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	4a20      	ldr	r2, [pc, #128]	@ (8003fc4 <UART_Start_Receive_IT+0x188>)
 8003f42:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d019      	beq.n	8003f80 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f54:	e853 3f00 	ldrex	r3, [r3]
 8003f58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003f60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	461a      	mov	r2, r3
 8003f68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f6c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f72:	e841 2300 	strex	r3, r2, [r1]
 8003f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1e6      	bne.n	8003f4c <UART_Start_Receive_IT+0x110>
 8003f7e:	e018      	b.n	8003fb2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	e853 3f00 	ldrex	r3, [r3]
 8003f8c:	613b      	str	r3, [r7, #16]
   return(result);
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	f043 0320 	orr.w	r3, r3, #32
 8003f94:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f9e:	623b      	str	r3, [r7, #32]
 8003fa0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa2:	69f9      	ldr	r1, [r7, #28]
 8003fa4:	6a3a      	ldr	r2, [r7, #32]
 8003fa6:	e841 2300 	strex	r3, r2, [r1]
 8003faa:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1e6      	bne.n	8003f80 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	375c      	adds	r7, #92	@ 0x5c
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr
 8003fc0:	080042b9 	.word	0x080042b9
 8003fc4:	08004111 	.word	0x08004111

08003fc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b095      	sub	sp, #84	@ 0x54
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fd8:	e853 3f00 	ldrex	r3, [r3]
 8003fdc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fe4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	461a      	mov	r2, r3
 8003fec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fee:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ff0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ff4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ff6:	e841 2300 	strex	r3, r2, [r1]
 8003ffa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1e6      	bne.n	8003fd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	3308      	adds	r3, #8
 8004008:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400a:	6a3b      	ldr	r3, [r7, #32]
 800400c:	e853 3f00 	ldrex	r3, [r3]
 8004010:	61fb      	str	r3, [r7, #28]
   return(result);
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	f023 0301 	bic.w	r3, r3, #1
 8004018:	64bb      	str	r3, [r7, #72]	@ 0x48
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	3308      	adds	r3, #8
 8004020:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004022:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004024:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004026:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004028:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800402a:	e841 2300 	strex	r3, r2, [r1]
 800402e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1e5      	bne.n	8004002 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800403a:	2b01      	cmp	r3, #1
 800403c:	d118      	bne.n	8004070 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	e853 3f00 	ldrex	r3, [r3]
 800404a:	60bb      	str	r3, [r7, #8]
   return(result);
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	f023 0310 	bic.w	r3, r3, #16
 8004052:	647b      	str	r3, [r7, #68]	@ 0x44
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	461a      	mov	r2, r3
 800405a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800405c:	61bb      	str	r3, [r7, #24]
 800405e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004060:	6979      	ldr	r1, [r7, #20]
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	e841 2300 	strex	r3, r2, [r1]
 8004068:	613b      	str	r3, [r7, #16]
   return(result);
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1e6      	bne.n	800403e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2220      	movs	r2, #32
 8004074:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004084:	bf00      	nop
 8004086:	3754      	adds	r7, #84	@ 0x54
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f7ff fbb2 	bl	8003818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040b4:	bf00      	nop
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b088      	sub	sp, #32
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	e853 3f00 	ldrex	r3, [r3]
 80040d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040d8:	61fb      	str	r3, [r7, #28]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	61bb      	str	r3, [r7, #24]
 80040e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e6:	6979      	ldr	r1, [r7, #20]
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	e841 2300 	strex	r3, r2, [r1]
 80040ee:	613b      	str	r3, [r7, #16]
   return(result);
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1e6      	bne.n	80040c4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2220      	movs	r2, #32
 80040fa:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7ff fb7e 	bl	8003804 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004108:	bf00      	nop
 800410a:	3720      	adds	r7, #32
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b09c      	sub	sp, #112	@ 0x70
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800411e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004128:	2b22      	cmp	r3, #34	@ 0x22
 800412a:	f040 80b9 	bne.w	80042a0 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004134:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004138:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800413c:	b2d9      	uxtb	r1, r3
 800413e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004142:	b2da      	uxtb	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004148:	400a      	ands	r2, r1
 800414a:	b2d2      	uxtb	r2, r2
 800414c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004152:	1c5a      	adds	r2, r3, #1
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800415e:	b29b      	uxth	r3, r3
 8004160:	3b01      	subs	r3, #1
 8004162:	b29a      	uxth	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004170:	b29b      	uxth	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	f040 809c 	bne.w	80042b0 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004180:	e853 3f00 	ldrex	r3, [r3]
 8004184:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004186:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004188:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800418c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	461a      	mov	r2, r3
 8004194:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004196:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004198:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800419c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800419e:	e841 2300 	strex	r3, r2, [r1]
 80041a2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80041a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1e6      	bne.n	8004178 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	3308      	adds	r3, #8
 80041b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041b4:	e853 3f00 	ldrex	r3, [r3]
 80041b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041bc:	f023 0301 	bic.w	r3, r3, #1
 80041c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	3308      	adds	r3, #8
 80041c8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80041ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80041cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041d2:	e841 2300 	strex	r3, r2, [r1]
 80041d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1e5      	bne.n	80041aa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2220      	movs	r2, #32
 80041e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d018      	beq.n	8004232 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004208:	e853 3f00 	ldrex	r3, [r3]
 800420c:	623b      	str	r3, [r7, #32]
   return(result);
 800420e:	6a3b      	ldr	r3, [r7, #32]
 8004210:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004214:	663b      	str	r3, [r7, #96]	@ 0x60
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	461a      	mov	r2, r3
 800421c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800421e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004220:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004222:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004224:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004226:	e841 2300 	strex	r3, r2, [r1]
 800422a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800422c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1e6      	bne.n	8004200 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004236:	2b01      	cmp	r3, #1
 8004238:	d12e      	bne.n	8004298 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	e853 3f00 	ldrex	r3, [r3]
 800424c:	60fb      	str	r3, [r7, #12]
   return(result);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f023 0310 	bic.w	r3, r3, #16
 8004254:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	461a      	mov	r2, r3
 800425c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800425e:	61fb      	str	r3, [r7, #28]
 8004260:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004262:	69b9      	ldr	r1, [r7, #24]
 8004264:	69fa      	ldr	r2, [r7, #28]
 8004266:	e841 2300 	strex	r3, r2, [r1]
 800426a:	617b      	str	r3, [r7, #20]
   return(result);
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1e6      	bne.n	8004240 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	69db      	ldr	r3, [r3, #28]
 8004278:	f003 0310 	and.w	r3, r3, #16
 800427c:	2b10      	cmp	r3, #16
 800427e:	d103      	bne.n	8004288 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2210      	movs	r2, #16
 8004286:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800428e:	4619      	mov	r1, r3
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f7ff facb 	bl	800382c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004296:	e00b      	b.n	80042b0 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f7fc f8d7 	bl	800044c <HAL_UART_RxCpltCallback>
}
 800429e:	e007      	b.n	80042b0 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	699a      	ldr	r2, [r3, #24]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0208 	orr.w	r2, r2, #8
 80042ae:	619a      	str	r2, [r3, #24]
}
 80042b0:	bf00      	nop
 80042b2:	3770      	adds	r7, #112	@ 0x70
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b09c      	sub	sp, #112	@ 0x70
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80042c6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042d0:	2b22      	cmp	r3, #34	@ 0x22
 80042d2:	f040 80b9 	bne.w	8004448 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80042dc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042e4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80042e6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80042ea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80042ee:	4013      	ands	r3, r2
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042f4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042fa:	1c9a      	adds	r2, r3, #2
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004306:	b29b      	uxth	r3, r3
 8004308:	3b01      	subs	r3, #1
 800430a:	b29a      	uxth	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004318:	b29b      	uxth	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	f040 809c 	bne.w	8004458 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004326:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004328:	e853 3f00 	ldrex	r3, [r3]
 800432c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800432e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004330:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004334:	667b      	str	r3, [r7, #100]	@ 0x64
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	461a      	mov	r2, r3
 800433c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800433e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004340:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004342:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004344:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004346:	e841 2300 	strex	r3, r2, [r1]
 800434a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800434c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1e6      	bne.n	8004320 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	3308      	adds	r3, #8
 8004358:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800435c:	e853 3f00 	ldrex	r3, [r3]
 8004360:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004364:	f023 0301 	bic.w	r3, r3, #1
 8004368:	663b      	str	r3, [r7, #96]	@ 0x60
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	3308      	adds	r3, #8
 8004370:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004372:	643a      	str	r2, [r7, #64]	@ 0x40
 8004374:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004376:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004378:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800437a:	e841 2300 	strex	r3, r2, [r1]
 800437e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1e5      	bne.n	8004352 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2220      	movs	r2, #32
 800438a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d018      	beq.n	80043da <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ae:	6a3b      	ldr	r3, [r7, #32]
 80043b0:	e853 3f00 	ldrex	r3, [r3]
 80043b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80043bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	461a      	mov	r2, r3
 80043c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043c8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043ce:	e841 2300 	strex	r3, r2, [r1]
 80043d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1e6      	bne.n	80043a8 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d12e      	bne.n	8004440 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	e853 3f00 	ldrex	r3, [r3]
 80043f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	f023 0310 	bic.w	r3, r3, #16
 80043fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	461a      	mov	r2, r3
 8004404:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004406:	61bb      	str	r3, [r7, #24]
 8004408:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440a:	6979      	ldr	r1, [r7, #20]
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	e841 2300 	strex	r3, r2, [r1]
 8004412:	613b      	str	r3, [r7, #16]
   return(result);
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1e6      	bne.n	80043e8 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	69db      	ldr	r3, [r3, #28]
 8004420:	f003 0310 	and.w	r3, r3, #16
 8004424:	2b10      	cmp	r3, #16
 8004426:	d103      	bne.n	8004430 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2210      	movs	r2, #16
 800442e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004436:	4619      	mov	r1, r3
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f7ff f9f7 	bl	800382c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800443e:	e00b      	b.n	8004458 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f7fc f803 	bl	800044c <HAL_UART_RxCpltCallback>
}
 8004446:	e007      	b.n	8004458 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	699a      	ldr	r2, [r3, #24]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f042 0208 	orr.w	r2, r2, #8
 8004456:	619a      	str	r2, [r3, #24]
}
 8004458:	bf00      	nop
 800445a:	3770      	adds	r7, #112	@ 0x70
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
 800446c:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d101      	bne.n	8004478 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e056      	b.n	8004526 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800447c:	2b00      	cmp	r3, #0
 800447e:	d106      	bne.n	800448e <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f7fc fde9 	bl	8001060 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2224      	movs	r2, #36	@ 0x24
 8004492:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 0201 	bic.w	r2, r2, #1
 80044a2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d002      	beq.n	80044b2 <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f7ff fb0d 	bl	8003acc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f7ff f9d4 	bl	8003860 <UART_SetConfig>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d101      	bne.n	80044c2 <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e031      	b.n	8004526 <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689a      	ldr	r2, [r3, #8]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044d0:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	055b      	lsls	r3, r3, #21
 80044ea:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	041b      	lsls	r3, r3, #16
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 8004500:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	6812      	ldr	r2, [r2, #0]
 8004508:	6979      	ldr	r1, [r7, #20]
 800450a:	430b      	orrs	r3, r1
 800450c:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f042 0201 	orr.w	r2, r2, #1
 800451c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f7ff fb76 	bl	8003c10 <UART_CheckIdleState>
 8004524:	4603      	mov	r3, r0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3718      	adds	r7, #24
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800452e:	b480      	push	{r7}
 8004530:	b083      	sub	sp, #12
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
	...

08004544 <__sflush_r>:
 8004544:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800454c:	0716      	lsls	r6, r2, #28
 800454e:	4605      	mov	r5, r0
 8004550:	460c      	mov	r4, r1
 8004552:	d454      	bmi.n	80045fe <__sflush_r+0xba>
 8004554:	684b      	ldr	r3, [r1, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	dc02      	bgt.n	8004560 <__sflush_r+0x1c>
 800455a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800455c:	2b00      	cmp	r3, #0
 800455e:	dd48      	ble.n	80045f2 <__sflush_r+0xae>
 8004560:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004562:	2e00      	cmp	r6, #0
 8004564:	d045      	beq.n	80045f2 <__sflush_r+0xae>
 8004566:	2300      	movs	r3, #0
 8004568:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800456c:	682f      	ldr	r7, [r5, #0]
 800456e:	6a21      	ldr	r1, [r4, #32]
 8004570:	602b      	str	r3, [r5, #0]
 8004572:	d030      	beq.n	80045d6 <__sflush_r+0x92>
 8004574:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004576:	89a3      	ldrh	r3, [r4, #12]
 8004578:	0759      	lsls	r1, r3, #29
 800457a:	d505      	bpl.n	8004588 <__sflush_r+0x44>
 800457c:	6863      	ldr	r3, [r4, #4]
 800457e:	1ad2      	subs	r2, r2, r3
 8004580:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004582:	b10b      	cbz	r3, 8004588 <__sflush_r+0x44>
 8004584:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004586:	1ad2      	subs	r2, r2, r3
 8004588:	2300      	movs	r3, #0
 800458a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800458c:	6a21      	ldr	r1, [r4, #32]
 800458e:	4628      	mov	r0, r5
 8004590:	47b0      	blx	r6
 8004592:	1c43      	adds	r3, r0, #1
 8004594:	89a3      	ldrh	r3, [r4, #12]
 8004596:	d106      	bne.n	80045a6 <__sflush_r+0x62>
 8004598:	6829      	ldr	r1, [r5, #0]
 800459a:	291d      	cmp	r1, #29
 800459c:	d82b      	bhi.n	80045f6 <__sflush_r+0xb2>
 800459e:	4a2a      	ldr	r2, [pc, #168]	@ (8004648 <__sflush_r+0x104>)
 80045a0:	40ca      	lsrs	r2, r1
 80045a2:	07d6      	lsls	r6, r2, #31
 80045a4:	d527      	bpl.n	80045f6 <__sflush_r+0xb2>
 80045a6:	2200      	movs	r2, #0
 80045a8:	6062      	str	r2, [r4, #4]
 80045aa:	04d9      	lsls	r1, r3, #19
 80045ac:	6922      	ldr	r2, [r4, #16]
 80045ae:	6022      	str	r2, [r4, #0]
 80045b0:	d504      	bpl.n	80045bc <__sflush_r+0x78>
 80045b2:	1c42      	adds	r2, r0, #1
 80045b4:	d101      	bne.n	80045ba <__sflush_r+0x76>
 80045b6:	682b      	ldr	r3, [r5, #0]
 80045b8:	b903      	cbnz	r3, 80045bc <__sflush_r+0x78>
 80045ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80045bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80045be:	602f      	str	r7, [r5, #0]
 80045c0:	b1b9      	cbz	r1, 80045f2 <__sflush_r+0xae>
 80045c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80045c6:	4299      	cmp	r1, r3
 80045c8:	d002      	beq.n	80045d0 <__sflush_r+0x8c>
 80045ca:	4628      	mov	r0, r5
 80045cc:	f000 fb00 	bl	8004bd0 <_free_r>
 80045d0:	2300      	movs	r3, #0
 80045d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80045d4:	e00d      	b.n	80045f2 <__sflush_r+0xae>
 80045d6:	2301      	movs	r3, #1
 80045d8:	4628      	mov	r0, r5
 80045da:	47b0      	blx	r6
 80045dc:	4602      	mov	r2, r0
 80045de:	1c50      	adds	r0, r2, #1
 80045e0:	d1c9      	bne.n	8004576 <__sflush_r+0x32>
 80045e2:	682b      	ldr	r3, [r5, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d0c6      	beq.n	8004576 <__sflush_r+0x32>
 80045e8:	2b1d      	cmp	r3, #29
 80045ea:	d001      	beq.n	80045f0 <__sflush_r+0xac>
 80045ec:	2b16      	cmp	r3, #22
 80045ee:	d11e      	bne.n	800462e <__sflush_r+0xea>
 80045f0:	602f      	str	r7, [r5, #0]
 80045f2:	2000      	movs	r0, #0
 80045f4:	e022      	b.n	800463c <__sflush_r+0xf8>
 80045f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045fa:	b21b      	sxth	r3, r3
 80045fc:	e01b      	b.n	8004636 <__sflush_r+0xf2>
 80045fe:	690f      	ldr	r7, [r1, #16]
 8004600:	2f00      	cmp	r7, #0
 8004602:	d0f6      	beq.n	80045f2 <__sflush_r+0xae>
 8004604:	0793      	lsls	r3, r2, #30
 8004606:	680e      	ldr	r6, [r1, #0]
 8004608:	bf08      	it	eq
 800460a:	694b      	ldreq	r3, [r1, #20]
 800460c:	600f      	str	r7, [r1, #0]
 800460e:	bf18      	it	ne
 8004610:	2300      	movne	r3, #0
 8004612:	eba6 0807 	sub.w	r8, r6, r7
 8004616:	608b      	str	r3, [r1, #8]
 8004618:	f1b8 0f00 	cmp.w	r8, #0
 800461c:	dde9      	ble.n	80045f2 <__sflush_r+0xae>
 800461e:	6a21      	ldr	r1, [r4, #32]
 8004620:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004622:	4643      	mov	r3, r8
 8004624:	463a      	mov	r2, r7
 8004626:	4628      	mov	r0, r5
 8004628:	47b0      	blx	r6
 800462a:	2800      	cmp	r0, #0
 800462c:	dc08      	bgt.n	8004640 <__sflush_r+0xfc>
 800462e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004632:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004636:	81a3      	strh	r3, [r4, #12]
 8004638:	f04f 30ff 	mov.w	r0, #4294967295
 800463c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004640:	4407      	add	r7, r0
 8004642:	eba8 0800 	sub.w	r8, r8, r0
 8004646:	e7e7      	b.n	8004618 <__sflush_r+0xd4>
 8004648:	20400001 	.word	0x20400001

0800464c <_fflush_r>:
 800464c:	b538      	push	{r3, r4, r5, lr}
 800464e:	690b      	ldr	r3, [r1, #16]
 8004650:	4605      	mov	r5, r0
 8004652:	460c      	mov	r4, r1
 8004654:	b913      	cbnz	r3, 800465c <_fflush_r+0x10>
 8004656:	2500      	movs	r5, #0
 8004658:	4628      	mov	r0, r5
 800465a:	bd38      	pop	{r3, r4, r5, pc}
 800465c:	b118      	cbz	r0, 8004666 <_fflush_r+0x1a>
 800465e:	6a03      	ldr	r3, [r0, #32]
 8004660:	b90b      	cbnz	r3, 8004666 <_fflush_r+0x1a>
 8004662:	f000 f8bb 	bl	80047dc <__sinit>
 8004666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0f3      	beq.n	8004656 <_fflush_r+0xa>
 800466e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004670:	07d0      	lsls	r0, r2, #31
 8004672:	d404      	bmi.n	800467e <_fflush_r+0x32>
 8004674:	0599      	lsls	r1, r3, #22
 8004676:	d402      	bmi.n	800467e <_fflush_r+0x32>
 8004678:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800467a:	f000 faa6 	bl	8004bca <__retarget_lock_acquire_recursive>
 800467e:	4628      	mov	r0, r5
 8004680:	4621      	mov	r1, r4
 8004682:	f7ff ff5f 	bl	8004544 <__sflush_r>
 8004686:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004688:	07da      	lsls	r2, r3, #31
 800468a:	4605      	mov	r5, r0
 800468c:	d4e4      	bmi.n	8004658 <_fflush_r+0xc>
 800468e:	89a3      	ldrh	r3, [r4, #12]
 8004690:	059b      	lsls	r3, r3, #22
 8004692:	d4e1      	bmi.n	8004658 <_fflush_r+0xc>
 8004694:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004696:	f000 fa99 	bl	8004bcc <__retarget_lock_release_recursive>
 800469a:	e7dd      	b.n	8004658 <_fflush_r+0xc>

0800469c <fflush>:
 800469c:	4601      	mov	r1, r0
 800469e:	b920      	cbnz	r0, 80046aa <fflush+0xe>
 80046a0:	4a04      	ldr	r2, [pc, #16]	@ (80046b4 <fflush+0x18>)
 80046a2:	4905      	ldr	r1, [pc, #20]	@ (80046b8 <fflush+0x1c>)
 80046a4:	4805      	ldr	r0, [pc, #20]	@ (80046bc <fflush+0x20>)
 80046a6:	f000 b8b1 	b.w	800480c <_fwalk_sglue>
 80046aa:	4b05      	ldr	r3, [pc, #20]	@ (80046c0 <fflush+0x24>)
 80046ac:	6818      	ldr	r0, [r3, #0]
 80046ae:	f7ff bfcd 	b.w	800464c <_fflush_r>
 80046b2:	bf00      	nop
 80046b4:	20000020 	.word	0x20000020
 80046b8:	0800464d 	.word	0x0800464d
 80046bc:	20000030 	.word	0x20000030
 80046c0:	2000002c 	.word	0x2000002c

080046c4 <std>:
 80046c4:	2300      	movs	r3, #0
 80046c6:	b510      	push	{r4, lr}
 80046c8:	4604      	mov	r4, r0
 80046ca:	e9c0 3300 	strd	r3, r3, [r0]
 80046ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80046d2:	6083      	str	r3, [r0, #8]
 80046d4:	8181      	strh	r1, [r0, #12]
 80046d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80046d8:	81c2      	strh	r2, [r0, #14]
 80046da:	6183      	str	r3, [r0, #24]
 80046dc:	4619      	mov	r1, r3
 80046de:	2208      	movs	r2, #8
 80046e0:	305c      	adds	r0, #92	@ 0x5c
 80046e2:	f000 f9f9 	bl	8004ad8 <memset>
 80046e6:	4b0d      	ldr	r3, [pc, #52]	@ (800471c <std+0x58>)
 80046e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80046ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004720 <std+0x5c>)
 80046ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80046ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004724 <std+0x60>)
 80046f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80046f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004728 <std+0x64>)
 80046f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80046f6:	4b0d      	ldr	r3, [pc, #52]	@ (800472c <std+0x68>)
 80046f8:	6224      	str	r4, [r4, #32]
 80046fa:	429c      	cmp	r4, r3
 80046fc:	d006      	beq.n	800470c <std+0x48>
 80046fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004702:	4294      	cmp	r4, r2
 8004704:	d002      	beq.n	800470c <std+0x48>
 8004706:	33d0      	adds	r3, #208	@ 0xd0
 8004708:	429c      	cmp	r4, r3
 800470a:	d105      	bne.n	8004718 <std+0x54>
 800470c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004714:	f000 ba58 	b.w	8004bc8 <__retarget_lock_init_recursive>
 8004718:	bd10      	pop	{r4, pc}
 800471a:	bf00      	nop
 800471c:	08004929 	.word	0x08004929
 8004720:	0800494b 	.word	0x0800494b
 8004724:	08004983 	.word	0x08004983
 8004728:	080049a7 	.word	0x080049a7
 800472c:	2000027c 	.word	0x2000027c

08004730 <stdio_exit_handler>:
 8004730:	4a02      	ldr	r2, [pc, #8]	@ (800473c <stdio_exit_handler+0xc>)
 8004732:	4903      	ldr	r1, [pc, #12]	@ (8004740 <stdio_exit_handler+0x10>)
 8004734:	4803      	ldr	r0, [pc, #12]	@ (8004744 <stdio_exit_handler+0x14>)
 8004736:	f000 b869 	b.w	800480c <_fwalk_sglue>
 800473a:	bf00      	nop
 800473c:	20000020 	.word	0x20000020
 8004740:	0800464d 	.word	0x0800464d
 8004744:	20000030 	.word	0x20000030

08004748 <cleanup_stdio>:
 8004748:	6841      	ldr	r1, [r0, #4]
 800474a:	4b0c      	ldr	r3, [pc, #48]	@ (800477c <cleanup_stdio+0x34>)
 800474c:	4299      	cmp	r1, r3
 800474e:	b510      	push	{r4, lr}
 8004750:	4604      	mov	r4, r0
 8004752:	d001      	beq.n	8004758 <cleanup_stdio+0x10>
 8004754:	f7ff ff7a 	bl	800464c <_fflush_r>
 8004758:	68a1      	ldr	r1, [r4, #8]
 800475a:	4b09      	ldr	r3, [pc, #36]	@ (8004780 <cleanup_stdio+0x38>)
 800475c:	4299      	cmp	r1, r3
 800475e:	d002      	beq.n	8004766 <cleanup_stdio+0x1e>
 8004760:	4620      	mov	r0, r4
 8004762:	f7ff ff73 	bl	800464c <_fflush_r>
 8004766:	68e1      	ldr	r1, [r4, #12]
 8004768:	4b06      	ldr	r3, [pc, #24]	@ (8004784 <cleanup_stdio+0x3c>)
 800476a:	4299      	cmp	r1, r3
 800476c:	d004      	beq.n	8004778 <cleanup_stdio+0x30>
 800476e:	4620      	mov	r0, r4
 8004770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004774:	f7ff bf6a 	b.w	800464c <_fflush_r>
 8004778:	bd10      	pop	{r4, pc}
 800477a:	bf00      	nop
 800477c:	2000027c 	.word	0x2000027c
 8004780:	200002e4 	.word	0x200002e4
 8004784:	2000034c 	.word	0x2000034c

08004788 <global_stdio_init.part.0>:
 8004788:	b510      	push	{r4, lr}
 800478a:	4b0b      	ldr	r3, [pc, #44]	@ (80047b8 <global_stdio_init.part.0+0x30>)
 800478c:	4c0b      	ldr	r4, [pc, #44]	@ (80047bc <global_stdio_init.part.0+0x34>)
 800478e:	4a0c      	ldr	r2, [pc, #48]	@ (80047c0 <global_stdio_init.part.0+0x38>)
 8004790:	601a      	str	r2, [r3, #0]
 8004792:	4620      	mov	r0, r4
 8004794:	2200      	movs	r2, #0
 8004796:	2104      	movs	r1, #4
 8004798:	f7ff ff94 	bl	80046c4 <std>
 800479c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80047a0:	2201      	movs	r2, #1
 80047a2:	2109      	movs	r1, #9
 80047a4:	f7ff ff8e 	bl	80046c4 <std>
 80047a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80047ac:	2202      	movs	r2, #2
 80047ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047b2:	2112      	movs	r1, #18
 80047b4:	f7ff bf86 	b.w	80046c4 <std>
 80047b8:	200003b4 	.word	0x200003b4
 80047bc:	2000027c 	.word	0x2000027c
 80047c0:	08004731 	.word	0x08004731

080047c4 <__sfp_lock_acquire>:
 80047c4:	4801      	ldr	r0, [pc, #4]	@ (80047cc <__sfp_lock_acquire+0x8>)
 80047c6:	f000 ba00 	b.w	8004bca <__retarget_lock_acquire_recursive>
 80047ca:	bf00      	nop
 80047cc:	200003bd 	.word	0x200003bd

080047d0 <__sfp_lock_release>:
 80047d0:	4801      	ldr	r0, [pc, #4]	@ (80047d8 <__sfp_lock_release+0x8>)
 80047d2:	f000 b9fb 	b.w	8004bcc <__retarget_lock_release_recursive>
 80047d6:	bf00      	nop
 80047d8:	200003bd 	.word	0x200003bd

080047dc <__sinit>:
 80047dc:	b510      	push	{r4, lr}
 80047de:	4604      	mov	r4, r0
 80047e0:	f7ff fff0 	bl	80047c4 <__sfp_lock_acquire>
 80047e4:	6a23      	ldr	r3, [r4, #32]
 80047e6:	b11b      	cbz	r3, 80047f0 <__sinit+0x14>
 80047e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047ec:	f7ff bff0 	b.w	80047d0 <__sfp_lock_release>
 80047f0:	4b04      	ldr	r3, [pc, #16]	@ (8004804 <__sinit+0x28>)
 80047f2:	6223      	str	r3, [r4, #32]
 80047f4:	4b04      	ldr	r3, [pc, #16]	@ (8004808 <__sinit+0x2c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1f5      	bne.n	80047e8 <__sinit+0xc>
 80047fc:	f7ff ffc4 	bl	8004788 <global_stdio_init.part.0>
 8004800:	e7f2      	b.n	80047e8 <__sinit+0xc>
 8004802:	bf00      	nop
 8004804:	08004749 	.word	0x08004749
 8004808:	200003b4 	.word	0x200003b4

0800480c <_fwalk_sglue>:
 800480c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004810:	4607      	mov	r7, r0
 8004812:	4688      	mov	r8, r1
 8004814:	4614      	mov	r4, r2
 8004816:	2600      	movs	r6, #0
 8004818:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800481c:	f1b9 0901 	subs.w	r9, r9, #1
 8004820:	d505      	bpl.n	800482e <_fwalk_sglue+0x22>
 8004822:	6824      	ldr	r4, [r4, #0]
 8004824:	2c00      	cmp	r4, #0
 8004826:	d1f7      	bne.n	8004818 <_fwalk_sglue+0xc>
 8004828:	4630      	mov	r0, r6
 800482a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800482e:	89ab      	ldrh	r3, [r5, #12]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d907      	bls.n	8004844 <_fwalk_sglue+0x38>
 8004834:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004838:	3301      	adds	r3, #1
 800483a:	d003      	beq.n	8004844 <_fwalk_sglue+0x38>
 800483c:	4629      	mov	r1, r5
 800483e:	4638      	mov	r0, r7
 8004840:	47c0      	blx	r8
 8004842:	4306      	orrs	r6, r0
 8004844:	3568      	adds	r5, #104	@ 0x68
 8004846:	e7e9      	b.n	800481c <_fwalk_sglue+0x10>

08004848 <iprintf>:
 8004848:	b40f      	push	{r0, r1, r2, r3}
 800484a:	b507      	push	{r0, r1, r2, lr}
 800484c:	4906      	ldr	r1, [pc, #24]	@ (8004868 <iprintf+0x20>)
 800484e:	ab04      	add	r3, sp, #16
 8004850:	6808      	ldr	r0, [r1, #0]
 8004852:	f853 2b04 	ldr.w	r2, [r3], #4
 8004856:	6881      	ldr	r1, [r0, #8]
 8004858:	9301      	str	r3, [sp, #4]
 800485a:	f000 fadb 	bl	8004e14 <_vfiprintf_r>
 800485e:	b003      	add	sp, #12
 8004860:	f85d eb04 	ldr.w	lr, [sp], #4
 8004864:	b004      	add	sp, #16
 8004866:	4770      	bx	lr
 8004868:	2000002c 	.word	0x2000002c

0800486c <_puts_r>:
 800486c:	6a03      	ldr	r3, [r0, #32]
 800486e:	b570      	push	{r4, r5, r6, lr}
 8004870:	6884      	ldr	r4, [r0, #8]
 8004872:	4605      	mov	r5, r0
 8004874:	460e      	mov	r6, r1
 8004876:	b90b      	cbnz	r3, 800487c <_puts_r+0x10>
 8004878:	f7ff ffb0 	bl	80047dc <__sinit>
 800487c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800487e:	07db      	lsls	r3, r3, #31
 8004880:	d405      	bmi.n	800488e <_puts_r+0x22>
 8004882:	89a3      	ldrh	r3, [r4, #12]
 8004884:	0598      	lsls	r0, r3, #22
 8004886:	d402      	bmi.n	800488e <_puts_r+0x22>
 8004888:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800488a:	f000 f99e 	bl	8004bca <__retarget_lock_acquire_recursive>
 800488e:	89a3      	ldrh	r3, [r4, #12]
 8004890:	0719      	lsls	r1, r3, #28
 8004892:	d502      	bpl.n	800489a <_puts_r+0x2e>
 8004894:	6923      	ldr	r3, [r4, #16]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d135      	bne.n	8004906 <_puts_r+0x9a>
 800489a:	4621      	mov	r1, r4
 800489c:	4628      	mov	r0, r5
 800489e:	f000 f8c5 	bl	8004a2c <__swsetup_r>
 80048a2:	b380      	cbz	r0, 8004906 <_puts_r+0x9a>
 80048a4:	f04f 35ff 	mov.w	r5, #4294967295
 80048a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80048aa:	07da      	lsls	r2, r3, #31
 80048ac:	d405      	bmi.n	80048ba <_puts_r+0x4e>
 80048ae:	89a3      	ldrh	r3, [r4, #12]
 80048b0:	059b      	lsls	r3, r3, #22
 80048b2:	d402      	bmi.n	80048ba <_puts_r+0x4e>
 80048b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80048b6:	f000 f989 	bl	8004bcc <__retarget_lock_release_recursive>
 80048ba:	4628      	mov	r0, r5
 80048bc:	bd70      	pop	{r4, r5, r6, pc}
 80048be:	2b00      	cmp	r3, #0
 80048c0:	da04      	bge.n	80048cc <_puts_r+0x60>
 80048c2:	69a2      	ldr	r2, [r4, #24]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	dc17      	bgt.n	80048f8 <_puts_r+0x8c>
 80048c8:	290a      	cmp	r1, #10
 80048ca:	d015      	beq.n	80048f8 <_puts_r+0x8c>
 80048cc:	6823      	ldr	r3, [r4, #0]
 80048ce:	1c5a      	adds	r2, r3, #1
 80048d0:	6022      	str	r2, [r4, #0]
 80048d2:	7019      	strb	r1, [r3, #0]
 80048d4:	68a3      	ldr	r3, [r4, #8]
 80048d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80048da:	3b01      	subs	r3, #1
 80048dc:	60a3      	str	r3, [r4, #8]
 80048de:	2900      	cmp	r1, #0
 80048e0:	d1ed      	bne.n	80048be <_puts_r+0x52>
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	da11      	bge.n	800490a <_puts_r+0x9e>
 80048e6:	4622      	mov	r2, r4
 80048e8:	210a      	movs	r1, #10
 80048ea:	4628      	mov	r0, r5
 80048ec:	f000 f85f 	bl	80049ae <__swbuf_r>
 80048f0:	3001      	adds	r0, #1
 80048f2:	d0d7      	beq.n	80048a4 <_puts_r+0x38>
 80048f4:	250a      	movs	r5, #10
 80048f6:	e7d7      	b.n	80048a8 <_puts_r+0x3c>
 80048f8:	4622      	mov	r2, r4
 80048fa:	4628      	mov	r0, r5
 80048fc:	f000 f857 	bl	80049ae <__swbuf_r>
 8004900:	3001      	adds	r0, #1
 8004902:	d1e7      	bne.n	80048d4 <_puts_r+0x68>
 8004904:	e7ce      	b.n	80048a4 <_puts_r+0x38>
 8004906:	3e01      	subs	r6, #1
 8004908:	e7e4      	b.n	80048d4 <_puts_r+0x68>
 800490a:	6823      	ldr	r3, [r4, #0]
 800490c:	1c5a      	adds	r2, r3, #1
 800490e:	6022      	str	r2, [r4, #0]
 8004910:	220a      	movs	r2, #10
 8004912:	701a      	strb	r2, [r3, #0]
 8004914:	e7ee      	b.n	80048f4 <_puts_r+0x88>
	...

08004918 <puts>:
 8004918:	4b02      	ldr	r3, [pc, #8]	@ (8004924 <puts+0xc>)
 800491a:	4601      	mov	r1, r0
 800491c:	6818      	ldr	r0, [r3, #0]
 800491e:	f7ff bfa5 	b.w	800486c <_puts_r>
 8004922:	bf00      	nop
 8004924:	2000002c 	.word	0x2000002c

08004928 <__sread>:
 8004928:	b510      	push	{r4, lr}
 800492a:	460c      	mov	r4, r1
 800492c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004930:	f000 f8fc 	bl	8004b2c <_read_r>
 8004934:	2800      	cmp	r0, #0
 8004936:	bfab      	itete	ge
 8004938:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800493a:	89a3      	ldrhlt	r3, [r4, #12]
 800493c:	181b      	addge	r3, r3, r0
 800493e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004942:	bfac      	ite	ge
 8004944:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004946:	81a3      	strhlt	r3, [r4, #12]
 8004948:	bd10      	pop	{r4, pc}

0800494a <__swrite>:
 800494a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800494e:	461f      	mov	r7, r3
 8004950:	898b      	ldrh	r3, [r1, #12]
 8004952:	05db      	lsls	r3, r3, #23
 8004954:	4605      	mov	r5, r0
 8004956:	460c      	mov	r4, r1
 8004958:	4616      	mov	r6, r2
 800495a:	d505      	bpl.n	8004968 <__swrite+0x1e>
 800495c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004960:	2302      	movs	r3, #2
 8004962:	2200      	movs	r2, #0
 8004964:	f000 f8d0 	bl	8004b08 <_lseek_r>
 8004968:	89a3      	ldrh	r3, [r4, #12]
 800496a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800496e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004972:	81a3      	strh	r3, [r4, #12]
 8004974:	4632      	mov	r2, r6
 8004976:	463b      	mov	r3, r7
 8004978:	4628      	mov	r0, r5
 800497a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800497e:	f000 b8e7 	b.w	8004b50 <_write_r>

08004982 <__sseek>:
 8004982:	b510      	push	{r4, lr}
 8004984:	460c      	mov	r4, r1
 8004986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800498a:	f000 f8bd 	bl	8004b08 <_lseek_r>
 800498e:	1c43      	adds	r3, r0, #1
 8004990:	89a3      	ldrh	r3, [r4, #12]
 8004992:	bf15      	itete	ne
 8004994:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004996:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800499a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800499e:	81a3      	strheq	r3, [r4, #12]
 80049a0:	bf18      	it	ne
 80049a2:	81a3      	strhne	r3, [r4, #12]
 80049a4:	bd10      	pop	{r4, pc}

080049a6 <__sclose>:
 80049a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049aa:	f000 b89d 	b.w	8004ae8 <_close_r>

080049ae <__swbuf_r>:
 80049ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049b0:	460e      	mov	r6, r1
 80049b2:	4614      	mov	r4, r2
 80049b4:	4605      	mov	r5, r0
 80049b6:	b118      	cbz	r0, 80049c0 <__swbuf_r+0x12>
 80049b8:	6a03      	ldr	r3, [r0, #32]
 80049ba:	b90b      	cbnz	r3, 80049c0 <__swbuf_r+0x12>
 80049bc:	f7ff ff0e 	bl	80047dc <__sinit>
 80049c0:	69a3      	ldr	r3, [r4, #24]
 80049c2:	60a3      	str	r3, [r4, #8]
 80049c4:	89a3      	ldrh	r3, [r4, #12]
 80049c6:	071a      	lsls	r2, r3, #28
 80049c8:	d501      	bpl.n	80049ce <__swbuf_r+0x20>
 80049ca:	6923      	ldr	r3, [r4, #16]
 80049cc:	b943      	cbnz	r3, 80049e0 <__swbuf_r+0x32>
 80049ce:	4621      	mov	r1, r4
 80049d0:	4628      	mov	r0, r5
 80049d2:	f000 f82b 	bl	8004a2c <__swsetup_r>
 80049d6:	b118      	cbz	r0, 80049e0 <__swbuf_r+0x32>
 80049d8:	f04f 37ff 	mov.w	r7, #4294967295
 80049dc:	4638      	mov	r0, r7
 80049de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049e0:	6823      	ldr	r3, [r4, #0]
 80049e2:	6922      	ldr	r2, [r4, #16]
 80049e4:	1a98      	subs	r0, r3, r2
 80049e6:	6963      	ldr	r3, [r4, #20]
 80049e8:	b2f6      	uxtb	r6, r6
 80049ea:	4283      	cmp	r3, r0
 80049ec:	4637      	mov	r7, r6
 80049ee:	dc05      	bgt.n	80049fc <__swbuf_r+0x4e>
 80049f0:	4621      	mov	r1, r4
 80049f2:	4628      	mov	r0, r5
 80049f4:	f7ff fe2a 	bl	800464c <_fflush_r>
 80049f8:	2800      	cmp	r0, #0
 80049fa:	d1ed      	bne.n	80049d8 <__swbuf_r+0x2a>
 80049fc:	68a3      	ldr	r3, [r4, #8]
 80049fe:	3b01      	subs	r3, #1
 8004a00:	60a3      	str	r3, [r4, #8]
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	1c5a      	adds	r2, r3, #1
 8004a06:	6022      	str	r2, [r4, #0]
 8004a08:	701e      	strb	r6, [r3, #0]
 8004a0a:	6962      	ldr	r2, [r4, #20]
 8004a0c:	1c43      	adds	r3, r0, #1
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d004      	beq.n	8004a1c <__swbuf_r+0x6e>
 8004a12:	89a3      	ldrh	r3, [r4, #12]
 8004a14:	07db      	lsls	r3, r3, #31
 8004a16:	d5e1      	bpl.n	80049dc <__swbuf_r+0x2e>
 8004a18:	2e0a      	cmp	r6, #10
 8004a1a:	d1df      	bne.n	80049dc <__swbuf_r+0x2e>
 8004a1c:	4621      	mov	r1, r4
 8004a1e:	4628      	mov	r0, r5
 8004a20:	f7ff fe14 	bl	800464c <_fflush_r>
 8004a24:	2800      	cmp	r0, #0
 8004a26:	d0d9      	beq.n	80049dc <__swbuf_r+0x2e>
 8004a28:	e7d6      	b.n	80049d8 <__swbuf_r+0x2a>
	...

08004a2c <__swsetup_r>:
 8004a2c:	b538      	push	{r3, r4, r5, lr}
 8004a2e:	4b29      	ldr	r3, [pc, #164]	@ (8004ad4 <__swsetup_r+0xa8>)
 8004a30:	4605      	mov	r5, r0
 8004a32:	6818      	ldr	r0, [r3, #0]
 8004a34:	460c      	mov	r4, r1
 8004a36:	b118      	cbz	r0, 8004a40 <__swsetup_r+0x14>
 8004a38:	6a03      	ldr	r3, [r0, #32]
 8004a3a:	b90b      	cbnz	r3, 8004a40 <__swsetup_r+0x14>
 8004a3c:	f7ff fece 	bl	80047dc <__sinit>
 8004a40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a44:	0719      	lsls	r1, r3, #28
 8004a46:	d422      	bmi.n	8004a8e <__swsetup_r+0x62>
 8004a48:	06da      	lsls	r2, r3, #27
 8004a4a:	d407      	bmi.n	8004a5c <__swsetup_r+0x30>
 8004a4c:	2209      	movs	r2, #9
 8004a4e:	602a      	str	r2, [r5, #0]
 8004a50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a54:	81a3      	strh	r3, [r4, #12]
 8004a56:	f04f 30ff 	mov.w	r0, #4294967295
 8004a5a:	e033      	b.n	8004ac4 <__swsetup_r+0x98>
 8004a5c:	0758      	lsls	r0, r3, #29
 8004a5e:	d512      	bpl.n	8004a86 <__swsetup_r+0x5a>
 8004a60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a62:	b141      	cbz	r1, 8004a76 <__swsetup_r+0x4a>
 8004a64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a68:	4299      	cmp	r1, r3
 8004a6a:	d002      	beq.n	8004a72 <__swsetup_r+0x46>
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	f000 f8af 	bl	8004bd0 <_free_r>
 8004a72:	2300      	movs	r3, #0
 8004a74:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a76:	89a3      	ldrh	r3, [r4, #12]
 8004a78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004a7c:	81a3      	strh	r3, [r4, #12]
 8004a7e:	2300      	movs	r3, #0
 8004a80:	6063      	str	r3, [r4, #4]
 8004a82:	6923      	ldr	r3, [r4, #16]
 8004a84:	6023      	str	r3, [r4, #0]
 8004a86:	89a3      	ldrh	r3, [r4, #12]
 8004a88:	f043 0308 	orr.w	r3, r3, #8
 8004a8c:	81a3      	strh	r3, [r4, #12]
 8004a8e:	6923      	ldr	r3, [r4, #16]
 8004a90:	b94b      	cbnz	r3, 8004aa6 <__swsetup_r+0x7a>
 8004a92:	89a3      	ldrh	r3, [r4, #12]
 8004a94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004a98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a9c:	d003      	beq.n	8004aa6 <__swsetup_r+0x7a>
 8004a9e:	4621      	mov	r1, r4
 8004aa0:	4628      	mov	r0, r5
 8004aa2:	f000 fc81 	bl	80053a8 <__smakebuf_r>
 8004aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004aaa:	f013 0201 	ands.w	r2, r3, #1
 8004aae:	d00a      	beq.n	8004ac6 <__swsetup_r+0x9a>
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	60a2      	str	r2, [r4, #8]
 8004ab4:	6962      	ldr	r2, [r4, #20]
 8004ab6:	4252      	negs	r2, r2
 8004ab8:	61a2      	str	r2, [r4, #24]
 8004aba:	6922      	ldr	r2, [r4, #16]
 8004abc:	b942      	cbnz	r2, 8004ad0 <__swsetup_r+0xa4>
 8004abe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004ac2:	d1c5      	bne.n	8004a50 <__swsetup_r+0x24>
 8004ac4:	bd38      	pop	{r3, r4, r5, pc}
 8004ac6:	0799      	lsls	r1, r3, #30
 8004ac8:	bf58      	it	pl
 8004aca:	6962      	ldrpl	r2, [r4, #20]
 8004acc:	60a2      	str	r2, [r4, #8]
 8004ace:	e7f4      	b.n	8004aba <__swsetup_r+0x8e>
 8004ad0:	2000      	movs	r0, #0
 8004ad2:	e7f7      	b.n	8004ac4 <__swsetup_r+0x98>
 8004ad4:	2000002c 	.word	0x2000002c

08004ad8 <memset>:
 8004ad8:	4402      	add	r2, r0
 8004ada:	4603      	mov	r3, r0
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d100      	bne.n	8004ae2 <memset+0xa>
 8004ae0:	4770      	bx	lr
 8004ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ae6:	e7f9      	b.n	8004adc <memset+0x4>

08004ae8 <_close_r>:
 8004ae8:	b538      	push	{r3, r4, r5, lr}
 8004aea:	4d06      	ldr	r5, [pc, #24]	@ (8004b04 <_close_r+0x1c>)
 8004aec:	2300      	movs	r3, #0
 8004aee:	4604      	mov	r4, r0
 8004af0:	4608      	mov	r0, r1
 8004af2:	602b      	str	r3, [r5, #0]
 8004af4:	f000 fd98 	bl	8005628 <_close>
 8004af8:	1c43      	adds	r3, r0, #1
 8004afa:	d102      	bne.n	8004b02 <_close_r+0x1a>
 8004afc:	682b      	ldr	r3, [r5, #0]
 8004afe:	b103      	cbz	r3, 8004b02 <_close_r+0x1a>
 8004b00:	6023      	str	r3, [r4, #0]
 8004b02:	bd38      	pop	{r3, r4, r5, pc}
 8004b04:	200003b8 	.word	0x200003b8

08004b08 <_lseek_r>:
 8004b08:	b538      	push	{r3, r4, r5, lr}
 8004b0a:	4d07      	ldr	r5, [pc, #28]	@ (8004b28 <_lseek_r+0x20>)
 8004b0c:	4604      	mov	r4, r0
 8004b0e:	4608      	mov	r0, r1
 8004b10:	4611      	mov	r1, r2
 8004b12:	2200      	movs	r2, #0
 8004b14:	602a      	str	r2, [r5, #0]
 8004b16:	461a      	mov	r2, r3
 8004b18:	f000 fd47 	bl	80055aa <_lseek>
 8004b1c:	1c43      	adds	r3, r0, #1
 8004b1e:	d102      	bne.n	8004b26 <_lseek_r+0x1e>
 8004b20:	682b      	ldr	r3, [r5, #0]
 8004b22:	b103      	cbz	r3, 8004b26 <_lseek_r+0x1e>
 8004b24:	6023      	str	r3, [r4, #0]
 8004b26:	bd38      	pop	{r3, r4, r5, pc}
 8004b28:	200003b8 	.word	0x200003b8

08004b2c <_read_r>:
 8004b2c:	b538      	push	{r3, r4, r5, lr}
 8004b2e:	4d07      	ldr	r5, [pc, #28]	@ (8004b4c <_read_r+0x20>)
 8004b30:	4604      	mov	r4, r0
 8004b32:	4608      	mov	r0, r1
 8004b34:	4611      	mov	r1, r2
 8004b36:	2200      	movs	r2, #0
 8004b38:	602a      	str	r2, [r5, #0]
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	f000 fcdf 	bl	80054fe <_read>
 8004b40:	1c43      	adds	r3, r0, #1
 8004b42:	d102      	bne.n	8004b4a <_read_r+0x1e>
 8004b44:	682b      	ldr	r3, [r5, #0]
 8004b46:	b103      	cbz	r3, 8004b4a <_read_r+0x1e>
 8004b48:	6023      	str	r3, [r4, #0]
 8004b4a:	bd38      	pop	{r3, r4, r5, pc}
 8004b4c:	200003b8 	.word	0x200003b8

08004b50 <_write_r>:
 8004b50:	b538      	push	{r3, r4, r5, lr}
 8004b52:	4d07      	ldr	r5, [pc, #28]	@ (8004b70 <_write_r+0x20>)
 8004b54:	4604      	mov	r4, r0
 8004b56:	4608      	mov	r0, r1
 8004b58:	4611      	mov	r1, r2
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	602a      	str	r2, [r5, #0]
 8004b5e:	461a      	mov	r2, r3
 8004b60:	f000 fd35 	bl	80055ce <_write>
 8004b64:	1c43      	adds	r3, r0, #1
 8004b66:	d102      	bne.n	8004b6e <_write_r+0x1e>
 8004b68:	682b      	ldr	r3, [r5, #0]
 8004b6a:	b103      	cbz	r3, 8004b6e <_write_r+0x1e>
 8004b6c:	6023      	str	r3, [r4, #0]
 8004b6e:	bd38      	pop	{r3, r4, r5, pc}
 8004b70:	200003b8 	.word	0x200003b8

08004b74 <__errno>:
 8004b74:	4b01      	ldr	r3, [pc, #4]	@ (8004b7c <__errno+0x8>)
 8004b76:	6818      	ldr	r0, [r3, #0]
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	2000002c 	.word	0x2000002c

08004b80 <__libc_init_array>:
 8004b80:	b570      	push	{r4, r5, r6, lr}
 8004b82:	4d0d      	ldr	r5, [pc, #52]	@ (8004bb8 <__libc_init_array+0x38>)
 8004b84:	4c0d      	ldr	r4, [pc, #52]	@ (8004bbc <__libc_init_array+0x3c>)
 8004b86:	1b64      	subs	r4, r4, r5
 8004b88:	10a4      	asrs	r4, r4, #2
 8004b8a:	2600      	movs	r6, #0
 8004b8c:	42a6      	cmp	r6, r4
 8004b8e:	d109      	bne.n	8004ba4 <__libc_init_array+0x24>
 8004b90:	4d0b      	ldr	r5, [pc, #44]	@ (8004bc0 <__libc_init_array+0x40>)
 8004b92:	4c0c      	ldr	r4, [pc, #48]	@ (8004bc4 <__libc_init_array+0x44>)
 8004b94:	f000 ff12 	bl	80059bc <_init>
 8004b98:	1b64      	subs	r4, r4, r5
 8004b9a:	10a4      	asrs	r4, r4, #2
 8004b9c:	2600      	movs	r6, #0
 8004b9e:	42a6      	cmp	r6, r4
 8004ba0:	d105      	bne.n	8004bae <__libc_init_array+0x2e>
 8004ba2:	bd70      	pop	{r4, r5, r6, pc}
 8004ba4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ba8:	4798      	blx	r3
 8004baa:	3601      	adds	r6, #1
 8004bac:	e7ee      	b.n	8004b8c <__libc_init_array+0xc>
 8004bae:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bb2:	4798      	blx	r3
 8004bb4:	3601      	adds	r6, #1
 8004bb6:	e7f2      	b.n	8004b9e <__libc_init_array+0x1e>
 8004bb8:	08005d24 	.word	0x08005d24
 8004bbc:	08005d24 	.word	0x08005d24
 8004bc0:	08005d24 	.word	0x08005d24
 8004bc4:	08005d28 	.word	0x08005d28

08004bc8 <__retarget_lock_init_recursive>:
 8004bc8:	4770      	bx	lr

08004bca <__retarget_lock_acquire_recursive>:
 8004bca:	4770      	bx	lr

08004bcc <__retarget_lock_release_recursive>:
 8004bcc:	4770      	bx	lr
	...

08004bd0 <_free_r>:
 8004bd0:	b538      	push	{r3, r4, r5, lr}
 8004bd2:	4605      	mov	r5, r0
 8004bd4:	2900      	cmp	r1, #0
 8004bd6:	d041      	beq.n	8004c5c <_free_r+0x8c>
 8004bd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bdc:	1f0c      	subs	r4, r1, #4
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	bfb8      	it	lt
 8004be2:	18e4      	addlt	r4, r4, r3
 8004be4:	f000 f8e0 	bl	8004da8 <__malloc_lock>
 8004be8:	4a1d      	ldr	r2, [pc, #116]	@ (8004c60 <_free_r+0x90>)
 8004bea:	6813      	ldr	r3, [r2, #0]
 8004bec:	b933      	cbnz	r3, 8004bfc <_free_r+0x2c>
 8004bee:	6063      	str	r3, [r4, #4]
 8004bf0:	6014      	str	r4, [r2, #0]
 8004bf2:	4628      	mov	r0, r5
 8004bf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bf8:	f000 b8dc 	b.w	8004db4 <__malloc_unlock>
 8004bfc:	42a3      	cmp	r3, r4
 8004bfe:	d908      	bls.n	8004c12 <_free_r+0x42>
 8004c00:	6820      	ldr	r0, [r4, #0]
 8004c02:	1821      	adds	r1, r4, r0
 8004c04:	428b      	cmp	r3, r1
 8004c06:	bf01      	itttt	eq
 8004c08:	6819      	ldreq	r1, [r3, #0]
 8004c0a:	685b      	ldreq	r3, [r3, #4]
 8004c0c:	1809      	addeq	r1, r1, r0
 8004c0e:	6021      	streq	r1, [r4, #0]
 8004c10:	e7ed      	b.n	8004bee <_free_r+0x1e>
 8004c12:	461a      	mov	r2, r3
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	b10b      	cbz	r3, 8004c1c <_free_r+0x4c>
 8004c18:	42a3      	cmp	r3, r4
 8004c1a:	d9fa      	bls.n	8004c12 <_free_r+0x42>
 8004c1c:	6811      	ldr	r1, [r2, #0]
 8004c1e:	1850      	adds	r0, r2, r1
 8004c20:	42a0      	cmp	r0, r4
 8004c22:	d10b      	bne.n	8004c3c <_free_r+0x6c>
 8004c24:	6820      	ldr	r0, [r4, #0]
 8004c26:	4401      	add	r1, r0
 8004c28:	1850      	adds	r0, r2, r1
 8004c2a:	4283      	cmp	r3, r0
 8004c2c:	6011      	str	r1, [r2, #0]
 8004c2e:	d1e0      	bne.n	8004bf2 <_free_r+0x22>
 8004c30:	6818      	ldr	r0, [r3, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	6053      	str	r3, [r2, #4]
 8004c36:	4408      	add	r0, r1
 8004c38:	6010      	str	r0, [r2, #0]
 8004c3a:	e7da      	b.n	8004bf2 <_free_r+0x22>
 8004c3c:	d902      	bls.n	8004c44 <_free_r+0x74>
 8004c3e:	230c      	movs	r3, #12
 8004c40:	602b      	str	r3, [r5, #0]
 8004c42:	e7d6      	b.n	8004bf2 <_free_r+0x22>
 8004c44:	6820      	ldr	r0, [r4, #0]
 8004c46:	1821      	adds	r1, r4, r0
 8004c48:	428b      	cmp	r3, r1
 8004c4a:	bf04      	itt	eq
 8004c4c:	6819      	ldreq	r1, [r3, #0]
 8004c4e:	685b      	ldreq	r3, [r3, #4]
 8004c50:	6063      	str	r3, [r4, #4]
 8004c52:	bf04      	itt	eq
 8004c54:	1809      	addeq	r1, r1, r0
 8004c56:	6021      	streq	r1, [r4, #0]
 8004c58:	6054      	str	r4, [r2, #4]
 8004c5a:	e7ca      	b.n	8004bf2 <_free_r+0x22>
 8004c5c:	bd38      	pop	{r3, r4, r5, pc}
 8004c5e:	bf00      	nop
 8004c60:	200003c4 	.word	0x200003c4

08004c64 <sbrk_aligned>:
 8004c64:	b570      	push	{r4, r5, r6, lr}
 8004c66:	4e0f      	ldr	r6, [pc, #60]	@ (8004ca4 <sbrk_aligned+0x40>)
 8004c68:	460c      	mov	r4, r1
 8004c6a:	6831      	ldr	r1, [r6, #0]
 8004c6c:	4605      	mov	r5, r0
 8004c6e:	b911      	cbnz	r1, 8004c76 <sbrk_aligned+0x12>
 8004c70:	f000 fbf8 	bl	8005464 <_sbrk_r>
 8004c74:	6030      	str	r0, [r6, #0]
 8004c76:	4621      	mov	r1, r4
 8004c78:	4628      	mov	r0, r5
 8004c7a:	f000 fbf3 	bl	8005464 <_sbrk_r>
 8004c7e:	1c43      	adds	r3, r0, #1
 8004c80:	d103      	bne.n	8004c8a <sbrk_aligned+0x26>
 8004c82:	f04f 34ff 	mov.w	r4, #4294967295
 8004c86:	4620      	mov	r0, r4
 8004c88:	bd70      	pop	{r4, r5, r6, pc}
 8004c8a:	1cc4      	adds	r4, r0, #3
 8004c8c:	f024 0403 	bic.w	r4, r4, #3
 8004c90:	42a0      	cmp	r0, r4
 8004c92:	d0f8      	beq.n	8004c86 <sbrk_aligned+0x22>
 8004c94:	1a21      	subs	r1, r4, r0
 8004c96:	4628      	mov	r0, r5
 8004c98:	f000 fbe4 	bl	8005464 <_sbrk_r>
 8004c9c:	3001      	adds	r0, #1
 8004c9e:	d1f2      	bne.n	8004c86 <sbrk_aligned+0x22>
 8004ca0:	e7ef      	b.n	8004c82 <sbrk_aligned+0x1e>
 8004ca2:	bf00      	nop
 8004ca4:	200003c0 	.word	0x200003c0

08004ca8 <_malloc_r>:
 8004ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cac:	1ccd      	adds	r5, r1, #3
 8004cae:	f025 0503 	bic.w	r5, r5, #3
 8004cb2:	3508      	adds	r5, #8
 8004cb4:	2d0c      	cmp	r5, #12
 8004cb6:	bf38      	it	cc
 8004cb8:	250c      	movcc	r5, #12
 8004cba:	2d00      	cmp	r5, #0
 8004cbc:	4606      	mov	r6, r0
 8004cbe:	db01      	blt.n	8004cc4 <_malloc_r+0x1c>
 8004cc0:	42a9      	cmp	r1, r5
 8004cc2:	d904      	bls.n	8004cce <_malloc_r+0x26>
 8004cc4:	230c      	movs	r3, #12
 8004cc6:	6033      	str	r3, [r6, #0]
 8004cc8:	2000      	movs	r0, #0
 8004cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004da4 <_malloc_r+0xfc>
 8004cd2:	f000 f869 	bl	8004da8 <__malloc_lock>
 8004cd6:	f8d8 3000 	ldr.w	r3, [r8]
 8004cda:	461c      	mov	r4, r3
 8004cdc:	bb44      	cbnz	r4, 8004d30 <_malloc_r+0x88>
 8004cde:	4629      	mov	r1, r5
 8004ce0:	4630      	mov	r0, r6
 8004ce2:	f7ff ffbf 	bl	8004c64 <sbrk_aligned>
 8004ce6:	1c43      	adds	r3, r0, #1
 8004ce8:	4604      	mov	r4, r0
 8004cea:	d158      	bne.n	8004d9e <_malloc_r+0xf6>
 8004cec:	f8d8 4000 	ldr.w	r4, [r8]
 8004cf0:	4627      	mov	r7, r4
 8004cf2:	2f00      	cmp	r7, #0
 8004cf4:	d143      	bne.n	8004d7e <_malloc_r+0xd6>
 8004cf6:	2c00      	cmp	r4, #0
 8004cf8:	d04b      	beq.n	8004d92 <_malloc_r+0xea>
 8004cfa:	6823      	ldr	r3, [r4, #0]
 8004cfc:	4639      	mov	r1, r7
 8004cfe:	4630      	mov	r0, r6
 8004d00:	eb04 0903 	add.w	r9, r4, r3
 8004d04:	f000 fbae 	bl	8005464 <_sbrk_r>
 8004d08:	4581      	cmp	r9, r0
 8004d0a:	d142      	bne.n	8004d92 <_malloc_r+0xea>
 8004d0c:	6821      	ldr	r1, [r4, #0]
 8004d0e:	1a6d      	subs	r5, r5, r1
 8004d10:	4629      	mov	r1, r5
 8004d12:	4630      	mov	r0, r6
 8004d14:	f7ff ffa6 	bl	8004c64 <sbrk_aligned>
 8004d18:	3001      	adds	r0, #1
 8004d1a:	d03a      	beq.n	8004d92 <_malloc_r+0xea>
 8004d1c:	6823      	ldr	r3, [r4, #0]
 8004d1e:	442b      	add	r3, r5
 8004d20:	6023      	str	r3, [r4, #0]
 8004d22:	f8d8 3000 	ldr.w	r3, [r8]
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	bb62      	cbnz	r2, 8004d84 <_malloc_r+0xdc>
 8004d2a:	f8c8 7000 	str.w	r7, [r8]
 8004d2e:	e00f      	b.n	8004d50 <_malloc_r+0xa8>
 8004d30:	6822      	ldr	r2, [r4, #0]
 8004d32:	1b52      	subs	r2, r2, r5
 8004d34:	d420      	bmi.n	8004d78 <_malloc_r+0xd0>
 8004d36:	2a0b      	cmp	r2, #11
 8004d38:	d917      	bls.n	8004d6a <_malloc_r+0xc2>
 8004d3a:	1961      	adds	r1, r4, r5
 8004d3c:	42a3      	cmp	r3, r4
 8004d3e:	6025      	str	r5, [r4, #0]
 8004d40:	bf18      	it	ne
 8004d42:	6059      	strne	r1, [r3, #4]
 8004d44:	6863      	ldr	r3, [r4, #4]
 8004d46:	bf08      	it	eq
 8004d48:	f8c8 1000 	streq.w	r1, [r8]
 8004d4c:	5162      	str	r2, [r4, r5]
 8004d4e:	604b      	str	r3, [r1, #4]
 8004d50:	4630      	mov	r0, r6
 8004d52:	f000 f82f 	bl	8004db4 <__malloc_unlock>
 8004d56:	f104 000b 	add.w	r0, r4, #11
 8004d5a:	1d23      	adds	r3, r4, #4
 8004d5c:	f020 0007 	bic.w	r0, r0, #7
 8004d60:	1ac2      	subs	r2, r0, r3
 8004d62:	bf1c      	itt	ne
 8004d64:	1a1b      	subne	r3, r3, r0
 8004d66:	50a3      	strne	r3, [r4, r2]
 8004d68:	e7af      	b.n	8004cca <_malloc_r+0x22>
 8004d6a:	6862      	ldr	r2, [r4, #4]
 8004d6c:	42a3      	cmp	r3, r4
 8004d6e:	bf0c      	ite	eq
 8004d70:	f8c8 2000 	streq.w	r2, [r8]
 8004d74:	605a      	strne	r2, [r3, #4]
 8004d76:	e7eb      	b.n	8004d50 <_malloc_r+0xa8>
 8004d78:	4623      	mov	r3, r4
 8004d7a:	6864      	ldr	r4, [r4, #4]
 8004d7c:	e7ae      	b.n	8004cdc <_malloc_r+0x34>
 8004d7e:	463c      	mov	r4, r7
 8004d80:	687f      	ldr	r7, [r7, #4]
 8004d82:	e7b6      	b.n	8004cf2 <_malloc_r+0x4a>
 8004d84:	461a      	mov	r2, r3
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	42a3      	cmp	r3, r4
 8004d8a:	d1fb      	bne.n	8004d84 <_malloc_r+0xdc>
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	6053      	str	r3, [r2, #4]
 8004d90:	e7de      	b.n	8004d50 <_malloc_r+0xa8>
 8004d92:	230c      	movs	r3, #12
 8004d94:	6033      	str	r3, [r6, #0]
 8004d96:	4630      	mov	r0, r6
 8004d98:	f000 f80c 	bl	8004db4 <__malloc_unlock>
 8004d9c:	e794      	b.n	8004cc8 <_malloc_r+0x20>
 8004d9e:	6005      	str	r5, [r0, #0]
 8004da0:	e7d6      	b.n	8004d50 <_malloc_r+0xa8>
 8004da2:	bf00      	nop
 8004da4:	200003c4 	.word	0x200003c4

08004da8 <__malloc_lock>:
 8004da8:	4801      	ldr	r0, [pc, #4]	@ (8004db0 <__malloc_lock+0x8>)
 8004daa:	f7ff bf0e 	b.w	8004bca <__retarget_lock_acquire_recursive>
 8004dae:	bf00      	nop
 8004db0:	200003bc 	.word	0x200003bc

08004db4 <__malloc_unlock>:
 8004db4:	4801      	ldr	r0, [pc, #4]	@ (8004dbc <__malloc_unlock+0x8>)
 8004db6:	f7ff bf09 	b.w	8004bcc <__retarget_lock_release_recursive>
 8004dba:	bf00      	nop
 8004dbc:	200003bc 	.word	0x200003bc

08004dc0 <__sfputc_r>:
 8004dc0:	6893      	ldr	r3, [r2, #8]
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	b410      	push	{r4}
 8004dc8:	6093      	str	r3, [r2, #8]
 8004dca:	da08      	bge.n	8004dde <__sfputc_r+0x1e>
 8004dcc:	6994      	ldr	r4, [r2, #24]
 8004dce:	42a3      	cmp	r3, r4
 8004dd0:	db01      	blt.n	8004dd6 <__sfputc_r+0x16>
 8004dd2:	290a      	cmp	r1, #10
 8004dd4:	d103      	bne.n	8004dde <__sfputc_r+0x1e>
 8004dd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004dda:	f7ff bde8 	b.w	80049ae <__swbuf_r>
 8004dde:	6813      	ldr	r3, [r2, #0]
 8004de0:	1c58      	adds	r0, r3, #1
 8004de2:	6010      	str	r0, [r2, #0]
 8004de4:	7019      	strb	r1, [r3, #0]
 8004de6:	4608      	mov	r0, r1
 8004de8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004dec:	4770      	bx	lr

08004dee <__sfputs_r>:
 8004dee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df0:	4606      	mov	r6, r0
 8004df2:	460f      	mov	r7, r1
 8004df4:	4614      	mov	r4, r2
 8004df6:	18d5      	adds	r5, r2, r3
 8004df8:	42ac      	cmp	r4, r5
 8004dfa:	d101      	bne.n	8004e00 <__sfputs_r+0x12>
 8004dfc:	2000      	movs	r0, #0
 8004dfe:	e007      	b.n	8004e10 <__sfputs_r+0x22>
 8004e00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e04:	463a      	mov	r2, r7
 8004e06:	4630      	mov	r0, r6
 8004e08:	f7ff ffda 	bl	8004dc0 <__sfputc_r>
 8004e0c:	1c43      	adds	r3, r0, #1
 8004e0e:	d1f3      	bne.n	8004df8 <__sfputs_r+0xa>
 8004e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e14 <_vfiprintf_r>:
 8004e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e18:	460d      	mov	r5, r1
 8004e1a:	b09d      	sub	sp, #116	@ 0x74
 8004e1c:	4614      	mov	r4, r2
 8004e1e:	4698      	mov	r8, r3
 8004e20:	4606      	mov	r6, r0
 8004e22:	b118      	cbz	r0, 8004e2c <_vfiprintf_r+0x18>
 8004e24:	6a03      	ldr	r3, [r0, #32]
 8004e26:	b90b      	cbnz	r3, 8004e2c <_vfiprintf_r+0x18>
 8004e28:	f7ff fcd8 	bl	80047dc <__sinit>
 8004e2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e2e:	07d9      	lsls	r1, r3, #31
 8004e30:	d405      	bmi.n	8004e3e <_vfiprintf_r+0x2a>
 8004e32:	89ab      	ldrh	r3, [r5, #12]
 8004e34:	059a      	lsls	r2, r3, #22
 8004e36:	d402      	bmi.n	8004e3e <_vfiprintf_r+0x2a>
 8004e38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e3a:	f7ff fec6 	bl	8004bca <__retarget_lock_acquire_recursive>
 8004e3e:	89ab      	ldrh	r3, [r5, #12]
 8004e40:	071b      	lsls	r3, r3, #28
 8004e42:	d501      	bpl.n	8004e48 <_vfiprintf_r+0x34>
 8004e44:	692b      	ldr	r3, [r5, #16]
 8004e46:	b99b      	cbnz	r3, 8004e70 <_vfiprintf_r+0x5c>
 8004e48:	4629      	mov	r1, r5
 8004e4a:	4630      	mov	r0, r6
 8004e4c:	f7ff fdee 	bl	8004a2c <__swsetup_r>
 8004e50:	b170      	cbz	r0, 8004e70 <_vfiprintf_r+0x5c>
 8004e52:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e54:	07dc      	lsls	r4, r3, #31
 8004e56:	d504      	bpl.n	8004e62 <_vfiprintf_r+0x4e>
 8004e58:	f04f 30ff 	mov.w	r0, #4294967295
 8004e5c:	b01d      	add	sp, #116	@ 0x74
 8004e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e62:	89ab      	ldrh	r3, [r5, #12]
 8004e64:	0598      	lsls	r0, r3, #22
 8004e66:	d4f7      	bmi.n	8004e58 <_vfiprintf_r+0x44>
 8004e68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e6a:	f7ff feaf 	bl	8004bcc <__retarget_lock_release_recursive>
 8004e6e:	e7f3      	b.n	8004e58 <_vfiprintf_r+0x44>
 8004e70:	2300      	movs	r3, #0
 8004e72:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e74:	2320      	movs	r3, #32
 8004e76:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004e7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e7e:	2330      	movs	r3, #48	@ 0x30
 8004e80:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005030 <_vfiprintf_r+0x21c>
 8004e84:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004e88:	f04f 0901 	mov.w	r9, #1
 8004e8c:	4623      	mov	r3, r4
 8004e8e:	469a      	mov	sl, r3
 8004e90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e94:	b10a      	cbz	r2, 8004e9a <_vfiprintf_r+0x86>
 8004e96:	2a25      	cmp	r2, #37	@ 0x25
 8004e98:	d1f9      	bne.n	8004e8e <_vfiprintf_r+0x7a>
 8004e9a:	ebba 0b04 	subs.w	fp, sl, r4
 8004e9e:	d00b      	beq.n	8004eb8 <_vfiprintf_r+0xa4>
 8004ea0:	465b      	mov	r3, fp
 8004ea2:	4622      	mov	r2, r4
 8004ea4:	4629      	mov	r1, r5
 8004ea6:	4630      	mov	r0, r6
 8004ea8:	f7ff ffa1 	bl	8004dee <__sfputs_r>
 8004eac:	3001      	adds	r0, #1
 8004eae:	f000 80a7 	beq.w	8005000 <_vfiprintf_r+0x1ec>
 8004eb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004eb4:	445a      	add	r2, fp
 8004eb6:	9209      	str	r2, [sp, #36]	@ 0x24
 8004eb8:	f89a 3000 	ldrb.w	r3, [sl]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 809f 	beq.w	8005000 <_vfiprintf_r+0x1ec>
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ec8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ecc:	f10a 0a01 	add.w	sl, sl, #1
 8004ed0:	9304      	str	r3, [sp, #16]
 8004ed2:	9307      	str	r3, [sp, #28]
 8004ed4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004ed8:	931a      	str	r3, [sp, #104]	@ 0x68
 8004eda:	4654      	mov	r4, sl
 8004edc:	2205      	movs	r2, #5
 8004ede:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ee2:	4853      	ldr	r0, [pc, #332]	@ (8005030 <_vfiprintf_r+0x21c>)
 8004ee4:	f7fb f974 	bl	80001d0 <memchr>
 8004ee8:	9a04      	ldr	r2, [sp, #16]
 8004eea:	b9d8      	cbnz	r0, 8004f24 <_vfiprintf_r+0x110>
 8004eec:	06d1      	lsls	r1, r2, #27
 8004eee:	bf44      	itt	mi
 8004ef0:	2320      	movmi	r3, #32
 8004ef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ef6:	0713      	lsls	r3, r2, #28
 8004ef8:	bf44      	itt	mi
 8004efa:	232b      	movmi	r3, #43	@ 0x2b
 8004efc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f00:	f89a 3000 	ldrb.w	r3, [sl]
 8004f04:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f06:	d015      	beq.n	8004f34 <_vfiprintf_r+0x120>
 8004f08:	9a07      	ldr	r2, [sp, #28]
 8004f0a:	4654      	mov	r4, sl
 8004f0c:	2000      	movs	r0, #0
 8004f0e:	f04f 0c0a 	mov.w	ip, #10
 8004f12:	4621      	mov	r1, r4
 8004f14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f18:	3b30      	subs	r3, #48	@ 0x30
 8004f1a:	2b09      	cmp	r3, #9
 8004f1c:	d94b      	bls.n	8004fb6 <_vfiprintf_r+0x1a2>
 8004f1e:	b1b0      	cbz	r0, 8004f4e <_vfiprintf_r+0x13a>
 8004f20:	9207      	str	r2, [sp, #28]
 8004f22:	e014      	b.n	8004f4e <_vfiprintf_r+0x13a>
 8004f24:	eba0 0308 	sub.w	r3, r0, r8
 8004f28:	fa09 f303 	lsl.w	r3, r9, r3
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	9304      	str	r3, [sp, #16]
 8004f30:	46a2      	mov	sl, r4
 8004f32:	e7d2      	b.n	8004eda <_vfiprintf_r+0xc6>
 8004f34:	9b03      	ldr	r3, [sp, #12]
 8004f36:	1d19      	adds	r1, r3, #4
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	9103      	str	r1, [sp, #12]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	bfbb      	ittet	lt
 8004f40:	425b      	neglt	r3, r3
 8004f42:	f042 0202 	orrlt.w	r2, r2, #2
 8004f46:	9307      	strge	r3, [sp, #28]
 8004f48:	9307      	strlt	r3, [sp, #28]
 8004f4a:	bfb8      	it	lt
 8004f4c:	9204      	strlt	r2, [sp, #16]
 8004f4e:	7823      	ldrb	r3, [r4, #0]
 8004f50:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f52:	d10a      	bne.n	8004f6a <_vfiprintf_r+0x156>
 8004f54:	7863      	ldrb	r3, [r4, #1]
 8004f56:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f58:	d132      	bne.n	8004fc0 <_vfiprintf_r+0x1ac>
 8004f5a:	9b03      	ldr	r3, [sp, #12]
 8004f5c:	1d1a      	adds	r2, r3, #4
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	9203      	str	r2, [sp, #12]
 8004f62:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f66:	3402      	adds	r4, #2
 8004f68:	9305      	str	r3, [sp, #20]
 8004f6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005040 <_vfiprintf_r+0x22c>
 8004f6e:	7821      	ldrb	r1, [r4, #0]
 8004f70:	2203      	movs	r2, #3
 8004f72:	4650      	mov	r0, sl
 8004f74:	f7fb f92c 	bl	80001d0 <memchr>
 8004f78:	b138      	cbz	r0, 8004f8a <_vfiprintf_r+0x176>
 8004f7a:	9b04      	ldr	r3, [sp, #16]
 8004f7c:	eba0 000a 	sub.w	r0, r0, sl
 8004f80:	2240      	movs	r2, #64	@ 0x40
 8004f82:	4082      	lsls	r2, r0
 8004f84:	4313      	orrs	r3, r2
 8004f86:	3401      	adds	r4, #1
 8004f88:	9304      	str	r3, [sp, #16]
 8004f8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f8e:	4829      	ldr	r0, [pc, #164]	@ (8005034 <_vfiprintf_r+0x220>)
 8004f90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004f94:	2206      	movs	r2, #6
 8004f96:	f7fb f91b 	bl	80001d0 <memchr>
 8004f9a:	2800      	cmp	r0, #0
 8004f9c:	d03f      	beq.n	800501e <_vfiprintf_r+0x20a>
 8004f9e:	4b26      	ldr	r3, [pc, #152]	@ (8005038 <_vfiprintf_r+0x224>)
 8004fa0:	bb1b      	cbnz	r3, 8004fea <_vfiprintf_r+0x1d6>
 8004fa2:	9b03      	ldr	r3, [sp, #12]
 8004fa4:	3307      	adds	r3, #7
 8004fa6:	f023 0307 	bic.w	r3, r3, #7
 8004faa:	3308      	adds	r3, #8
 8004fac:	9303      	str	r3, [sp, #12]
 8004fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fb0:	443b      	add	r3, r7
 8004fb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fb4:	e76a      	b.n	8004e8c <_vfiprintf_r+0x78>
 8004fb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fba:	460c      	mov	r4, r1
 8004fbc:	2001      	movs	r0, #1
 8004fbe:	e7a8      	b.n	8004f12 <_vfiprintf_r+0xfe>
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	3401      	adds	r4, #1
 8004fc4:	9305      	str	r3, [sp, #20]
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	f04f 0c0a 	mov.w	ip, #10
 8004fcc:	4620      	mov	r0, r4
 8004fce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fd2:	3a30      	subs	r2, #48	@ 0x30
 8004fd4:	2a09      	cmp	r2, #9
 8004fd6:	d903      	bls.n	8004fe0 <_vfiprintf_r+0x1cc>
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d0c6      	beq.n	8004f6a <_vfiprintf_r+0x156>
 8004fdc:	9105      	str	r1, [sp, #20]
 8004fde:	e7c4      	b.n	8004f6a <_vfiprintf_r+0x156>
 8004fe0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fe4:	4604      	mov	r4, r0
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e7f0      	b.n	8004fcc <_vfiprintf_r+0x1b8>
 8004fea:	ab03      	add	r3, sp, #12
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	462a      	mov	r2, r5
 8004ff0:	4b12      	ldr	r3, [pc, #72]	@ (800503c <_vfiprintf_r+0x228>)
 8004ff2:	a904      	add	r1, sp, #16
 8004ff4:	4630      	mov	r0, r6
 8004ff6:	f3af 8000 	nop.w
 8004ffa:	4607      	mov	r7, r0
 8004ffc:	1c78      	adds	r0, r7, #1
 8004ffe:	d1d6      	bne.n	8004fae <_vfiprintf_r+0x19a>
 8005000:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005002:	07d9      	lsls	r1, r3, #31
 8005004:	d405      	bmi.n	8005012 <_vfiprintf_r+0x1fe>
 8005006:	89ab      	ldrh	r3, [r5, #12]
 8005008:	059a      	lsls	r2, r3, #22
 800500a:	d402      	bmi.n	8005012 <_vfiprintf_r+0x1fe>
 800500c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800500e:	f7ff fddd 	bl	8004bcc <__retarget_lock_release_recursive>
 8005012:	89ab      	ldrh	r3, [r5, #12]
 8005014:	065b      	lsls	r3, r3, #25
 8005016:	f53f af1f 	bmi.w	8004e58 <_vfiprintf_r+0x44>
 800501a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800501c:	e71e      	b.n	8004e5c <_vfiprintf_r+0x48>
 800501e:	ab03      	add	r3, sp, #12
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	462a      	mov	r2, r5
 8005024:	4b05      	ldr	r3, [pc, #20]	@ (800503c <_vfiprintf_r+0x228>)
 8005026:	a904      	add	r1, sp, #16
 8005028:	4630      	mov	r0, r6
 800502a:	f000 f879 	bl	8005120 <_printf_i>
 800502e:	e7e4      	b.n	8004ffa <_vfiprintf_r+0x1e6>
 8005030:	08005ccc 	.word	0x08005ccc
 8005034:	08005cd6 	.word	0x08005cd6
 8005038:	00000000 	.word	0x00000000
 800503c:	08004def 	.word	0x08004def
 8005040:	08005cd2 	.word	0x08005cd2

08005044 <_printf_common>:
 8005044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005048:	4616      	mov	r6, r2
 800504a:	4698      	mov	r8, r3
 800504c:	688a      	ldr	r2, [r1, #8]
 800504e:	690b      	ldr	r3, [r1, #16]
 8005050:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005054:	4293      	cmp	r3, r2
 8005056:	bfb8      	it	lt
 8005058:	4613      	movlt	r3, r2
 800505a:	6033      	str	r3, [r6, #0]
 800505c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005060:	4607      	mov	r7, r0
 8005062:	460c      	mov	r4, r1
 8005064:	b10a      	cbz	r2, 800506a <_printf_common+0x26>
 8005066:	3301      	adds	r3, #1
 8005068:	6033      	str	r3, [r6, #0]
 800506a:	6823      	ldr	r3, [r4, #0]
 800506c:	0699      	lsls	r1, r3, #26
 800506e:	bf42      	ittt	mi
 8005070:	6833      	ldrmi	r3, [r6, #0]
 8005072:	3302      	addmi	r3, #2
 8005074:	6033      	strmi	r3, [r6, #0]
 8005076:	6825      	ldr	r5, [r4, #0]
 8005078:	f015 0506 	ands.w	r5, r5, #6
 800507c:	d106      	bne.n	800508c <_printf_common+0x48>
 800507e:	f104 0a19 	add.w	sl, r4, #25
 8005082:	68e3      	ldr	r3, [r4, #12]
 8005084:	6832      	ldr	r2, [r6, #0]
 8005086:	1a9b      	subs	r3, r3, r2
 8005088:	42ab      	cmp	r3, r5
 800508a:	dc26      	bgt.n	80050da <_printf_common+0x96>
 800508c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005090:	6822      	ldr	r2, [r4, #0]
 8005092:	3b00      	subs	r3, #0
 8005094:	bf18      	it	ne
 8005096:	2301      	movne	r3, #1
 8005098:	0692      	lsls	r2, r2, #26
 800509a:	d42b      	bmi.n	80050f4 <_printf_common+0xb0>
 800509c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80050a0:	4641      	mov	r1, r8
 80050a2:	4638      	mov	r0, r7
 80050a4:	47c8      	blx	r9
 80050a6:	3001      	adds	r0, #1
 80050a8:	d01e      	beq.n	80050e8 <_printf_common+0xa4>
 80050aa:	6823      	ldr	r3, [r4, #0]
 80050ac:	6922      	ldr	r2, [r4, #16]
 80050ae:	f003 0306 	and.w	r3, r3, #6
 80050b2:	2b04      	cmp	r3, #4
 80050b4:	bf02      	ittt	eq
 80050b6:	68e5      	ldreq	r5, [r4, #12]
 80050b8:	6833      	ldreq	r3, [r6, #0]
 80050ba:	1aed      	subeq	r5, r5, r3
 80050bc:	68a3      	ldr	r3, [r4, #8]
 80050be:	bf0c      	ite	eq
 80050c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050c4:	2500      	movne	r5, #0
 80050c6:	4293      	cmp	r3, r2
 80050c8:	bfc4      	itt	gt
 80050ca:	1a9b      	subgt	r3, r3, r2
 80050cc:	18ed      	addgt	r5, r5, r3
 80050ce:	2600      	movs	r6, #0
 80050d0:	341a      	adds	r4, #26
 80050d2:	42b5      	cmp	r5, r6
 80050d4:	d11a      	bne.n	800510c <_printf_common+0xc8>
 80050d6:	2000      	movs	r0, #0
 80050d8:	e008      	b.n	80050ec <_printf_common+0xa8>
 80050da:	2301      	movs	r3, #1
 80050dc:	4652      	mov	r2, sl
 80050de:	4641      	mov	r1, r8
 80050e0:	4638      	mov	r0, r7
 80050e2:	47c8      	blx	r9
 80050e4:	3001      	adds	r0, #1
 80050e6:	d103      	bne.n	80050f0 <_printf_common+0xac>
 80050e8:	f04f 30ff 	mov.w	r0, #4294967295
 80050ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050f0:	3501      	adds	r5, #1
 80050f2:	e7c6      	b.n	8005082 <_printf_common+0x3e>
 80050f4:	18e1      	adds	r1, r4, r3
 80050f6:	1c5a      	adds	r2, r3, #1
 80050f8:	2030      	movs	r0, #48	@ 0x30
 80050fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80050fe:	4422      	add	r2, r4
 8005100:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005104:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005108:	3302      	adds	r3, #2
 800510a:	e7c7      	b.n	800509c <_printf_common+0x58>
 800510c:	2301      	movs	r3, #1
 800510e:	4622      	mov	r2, r4
 8005110:	4641      	mov	r1, r8
 8005112:	4638      	mov	r0, r7
 8005114:	47c8      	blx	r9
 8005116:	3001      	adds	r0, #1
 8005118:	d0e6      	beq.n	80050e8 <_printf_common+0xa4>
 800511a:	3601      	adds	r6, #1
 800511c:	e7d9      	b.n	80050d2 <_printf_common+0x8e>
	...

08005120 <_printf_i>:
 8005120:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005124:	7e0f      	ldrb	r7, [r1, #24]
 8005126:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005128:	2f78      	cmp	r7, #120	@ 0x78
 800512a:	4691      	mov	r9, r2
 800512c:	4680      	mov	r8, r0
 800512e:	460c      	mov	r4, r1
 8005130:	469a      	mov	sl, r3
 8005132:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005136:	d807      	bhi.n	8005148 <_printf_i+0x28>
 8005138:	2f62      	cmp	r7, #98	@ 0x62
 800513a:	d80a      	bhi.n	8005152 <_printf_i+0x32>
 800513c:	2f00      	cmp	r7, #0
 800513e:	f000 80d1 	beq.w	80052e4 <_printf_i+0x1c4>
 8005142:	2f58      	cmp	r7, #88	@ 0x58
 8005144:	f000 80b8 	beq.w	80052b8 <_printf_i+0x198>
 8005148:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800514c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005150:	e03a      	b.n	80051c8 <_printf_i+0xa8>
 8005152:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005156:	2b15      	cmp	r3, #21
 8005158:	d8f6      	bhi.n	8005148 <_printf_i+0x28>
 800515a:	a101      	add	r1, pc, #4	@ (adr r1, 8005160 <_printf_i+0x40>)
 800515c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005160:	080051b9 	.word	0x080051b9
 8005164:	080051cd 	.word	0x080051cd
 8005168:	08005149 	.word	0x08005149
 800516c:	08005149 	.word	0x08005149
 8005170:	08005149 	.word	0x08005149
 8005174:	08005149 	.word	0x08005149
 8005178:	080051cd 	.word	0x080051cd
 800517c:	08005149 	.word	0x08005149
 8005180:	08005149 	.word	0x08005149
 8005184:	08005149 	.word	0x08005149
 8005188:	08005149 	.word	0x08005149
 800518c:	080052cb 	.word	0x080052cb
 8005190:	080051f7 	.word	0x080051f7
 8005194:	08005285 	.word	0x08005285
 8005198:	08005149 	.word	0x08005149
 800519c:	08005149 	.word	0x08005149
 80051a0:	080052ed 	.word	0x080052ed
 80051a4:	08005149 	.word	0x08005149
 80051a8:	080051f7 	.word	0x080051f7
 80051ac:	08005149 	.word	0x08005149
 80051b0:	08005149 	.word	0x08005149
 80051b4:	0800528d 	.word	0x0800528d
 80051b8:	6833      	ldr	r3, [r6, #0]
 80051ba:	1d1a      	adds	r2, r3, #4
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	6032      	str	r2, [r6, #0]
 80051c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80051c8:	2301      	movs	r3, #1
 80051ca:	e09c      	b.n	8005306 <_printf_i+0x1e6>
 80051cc:	6833      	ldr	r3, [r6, #0]
 80051ce:	6820      	ldr	r0, [r4, #0]
 80051d0:	1d19      	adds	r1, r3, #4
 80051d2:	6031      	str	r1, [r6, #0]
 80051d4:	0606      	lsls	r6, r0, #24
 80051d6:	d501      	bpl.n	80051dc <_printf_i+0xbc>
 80051d8:	681d      	ldr	r5, [r3, #0]
 80051da:	e003      	b.n	80051e4 <_printf_i+0xc4>
 80051dc:	0645      	lsls	r5, r0, #25
 80051de:	d5fb      	bpl.n	80051d8 <_printf_i+0xb8>
 80051e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80051e4:	2d00      	cmp	r5, #0
 80051e6:	da03      	bge.n	80051f0 <_printf_i+0xd0>
 80051e8:	232d      	movs	r3, #45	@ 0x2d
 80051ea:	426d      	negs	r5, r5
 80051ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051f0:	4858      	ldr	r0, [pc, #352]	@ (8005354 <_printf_i+0x234>)
 80051f2:	230a      	movs	r3, #10
 80051f4:	e011      	b.n	800521a <_printf_i+0xfa>
 80051f6:	6821      	ldr	r1, [r4, #0]
 80051f8:	6833      	ldr	r3, [r6, #0]
 80051fa:	0608      	lsls	r0, r1, #24
 80051fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8005200:	d402      	bmi.n	8005208 <_printf_i+0xe8>
 8005202:	0649      	lsls	r1, r1, #25
 8005204:	bf48      	it	mi
 8005206:	b2ad      	uxthmi	r5, r5
 8005208:	2f6f      	cmp	r7, #111	@ 0x6f
 800520a:	4852      	ldr	r0, [pc, #328]	@ (8005354 <_printf_i+0x234>)
 800520c:	6033      	str	r3, [r6, #0]
 800520e:	bf14      	ite	ne
 8005210:	230a      	movne	r3, #10
 8005212:	2308      	moveq	r3, #8
 8005214:	2100      	movs	r1, #0
 8005216:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800521a:	6866      	ldr	r6, [r4, #4]
 800521c:	60a6      	str	r6, [r4, #8]
 800521e:	2e00      	cmp	r6, #0
 8005220:	db05      	blt.n	800522e <_printf_i+0x10e>
 8005222:	6821      	ldr	r1, [r4, #0]
 8005224:	432e      	orrs	r6, r5
 8005226:	f021 0104 	bic.w	r1, r1, #4
 800522a:	6021      	str	r1, [r4, #0]
 800522c:	d04b      	beq.n	80052c6 <_printf_i+0x1a6>
 800522e:	4616      	mov	r6, r2
 8005230:	fbb5 f1f3 	udiv	r1, r5, r3
 8005234:	fb03 5711 	mls	r7, r3, r1, r5
 8005238:	5dc7      	ldrb	r7, [r0, r7]
 800523a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800523e:	462f      	mov	r7, r5
 8005240:	42bb      	cmp	r3, r7
 8005242:	460d      	mov	r5, r1
 8005244:	d9f4      	bls.n	8005230 <_printf_i+0x110>
 8005246:	2b08      	cmp	r3, #8
 8005248:	d10b      	bne.n	8005262 <_printf_i+0x142>
 800524a:	6823      	ldr	r3, [r4, #0]
 800524c:	07df      	lsls	r7, r3, #31
 800524e:	d508      	bpl.n	8005262 <_printf_i+0x142>
 8005250:	6923      	ldr	r3, [r4, #16]
 8005252:	6861      	ldr	r1, [r4, #4]
 8005254:	4299      	cmp	r1, r3
 8005256:	bfde      	ittt	le
 8005258:	2330      	movle	r3, #48	@ 0x30
 800525a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800525e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005262:	1b92      	subs	r2, r2, r6
 8005264:	6122      	str	r2, [r4, #16]
 8005266:	f8cd a000 	str.w	sl, [sp]
 800526a:	464b      	mov	r3, r9
 800526c:	aa03      	add	r2, sp, #12
 800526e:	4621      	mov	r1, r4
 8005270:	4640      	mov	r0, r8
 8005272:	f7ff fee7 	bl	8005044 <_printf_common>
 8005276:	3001      	adds	r0, #1
 8005278:	d14a      	bne.n	8005310 <_printf_i+0x1f0>
 800527a:	f04f 30ff 	mov.w	r0, #4294967295
 800527e:	b004      	add	sp, #16
 8005280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005284:	6823      	ldr	r3, [r4, #0]
 8005286:	f043 0320 	orr.w	r3, r3, #32
 800528a:	6023      	str	r3, [r4, #0]
 800528c:	4832      	ldr	r0, [pc, #200]	@ (8005358 <_printf_i+0x238>)
 800528e:	2778      	movs	r7, #120	@ 0x78
 8005290:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005294:	6823      	ldr	r3, [r4, #0]
 8005296:	6831      	ldr	r1, [r6, #0]
 8005298:	061f      	lsls	r7, r3, #24
 800529a:	f851 5b04 	ldr.w	r5, [r1], #4
 800529e:	d402      	bmi.n	80052a6 <_printf_i+0x186>
 80052a0:	065f      	lsls	r7, r3, #25
 80052a2:	bf48      	it	mi
 80052a4:	b2ad      	uxthmi	r5, r5
 80052a6:	6031      	str	r1, [r6, #0]
 80052a8:	07d9      	lsls	r1, r3, #31
 80052aa:	bf44      	itt	mi
 80052ac:	f043 0320 	orrmi.w	r3, r3, #32
 80052b0:	6023      	strmi	r3, [r4, #0]
 80052b2:	b11d      	cbz	r5, 80052bc <_printf_i+0x19c>
 80052b4:	2310      	movs	r3, #16
 80052b6:	e7ad      	b.n	8005214 <_printf_i+0xf4>
 80052b8:	4826      	ldr	r0, [pc, #152]	@ (8005354 <_printf_i+0x234>)
 80052ba:	e7e9      	b.n	8005290 <_printf_i+0x170>
 80052bc:	6823      	ldr	r3, [r4, #0]
 80052be:	f023 0320 	bic.w	r3, r3, #32
 80052c2:	6023      	str	r3, [r4, #0]
 80052c4:	e7f6      	b.n	80052b4 <_printf_i+0x194>
 80052c6:	4616      	mov	r6, r2
 80052c8:	e7bd      	b.n	8005246 <_printf_i+0x126>
 80052ca:	6833      	ldr	r3, [r6, #0]
 80052cc:	6825      	ldr	r5, [r4, #0]
 80052ce:	6961      	ldr	r1, [r4, #20]
 80052d0:	1d18      	adds	r0, r3, #4
 80052d2:	6030      	str	r0, [r6, #0]
 80052d4:	062e      	lsls	r6, r5, #24
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	d501      	bpl.n	80052de <_printf_i+0x1be>
 80052da:	6019      	str	r1, [r3, #0]
 80052dc:	e002      	b.n	80052e4 <_printf_i+0x1c4>
 80052de:	0668      	lsls	r0, r5, #25
 80052e0:	d5fb      	bpl.n	80052da <_printf_i+0x1ba>
 80052e2:	8019      	strh	r1, [r3, #0]
 80052e4:	2300      	movs	r3, #0
 80052e6:	6123      	str	r3, [r4, #16]
 80052e8:	4616      	mov	r6, r2
 80052ea:	e7bc      	b.n	8005266 <_printf_i+0x146>
 80052ec:	6833      	ldr	r3, [r6, #0]
 80052ee:	1d1a      	adds	r2, r3, #4
 80052f0:	6032      	str	r2, [r6, #0]
 80052f2:	681e      	ldr	r6, [r3, #0]
 80052f4:	6862      	ldr	r2, [r4, #4]
 80052f6:	2100      	movs	r1, #0
 80052f8:	4630      	mov	r0, r6
 80052fa:	f7fa ff69 	bl	80001d0 <memchr>
 80052fe:	b108      	cbz	r0, 8005304 <_printf_i+0x1e4>
 8005300:	1b80      	subs	r0, r0, r6
 8005302:	6060      	str	r0, [r4, #4]
 8005304:	6863      	ldr	r3, [r4, #4]
 8005306:	6123      	str	r3, [r4, #16]
 8005308:	2300      	movs	r3, #0
 800530a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800530e:	e7aa      	b.n	8005266 <_printf_i+0x146>
 8005310:	6923      	ldr	r3, [r4, #16]
 8005312:	4632      	mov	r2, r6
 8005314:	4649      	mov	r1, r9
 8005316:	4640      	mov	r0, r8
 8005318:	47d0      	blx	sl
 800531a:	3001      	adds	r0, #1
 800531c:	d0ad      	beq.n	800527a <_printf_i+0x15a>
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	079b      	lsls	r3, r3, #30
 8005322:	d413      	bmi.n	800534c <_printf_i+0x22c>
 8005324:	68e0      	ldr	r0, [r4, #12]
 8005326:	9b03      	ldr	r3, [sp, #12]
 8005328:	4298      	cmp	r0, r3
 800532a:	bfb8      	it	lt
 800532c:	4618      	movlt	r0, r3
 800532e:	e7a6      	b.n	800527e <_printf_i+0x15e>
 8005330:	2301      	movs	r3, #1
 8005332:	4632      	mov	r2, r6
 8005334:	4649      	mov	r1, r9
 8005336:	4640      	mov	r0, r8
 8005338:	47d0      	blx	sl
 800533a:	3001      	adds	r0, #1
 800533c:	d09d      	beq.n	800527a <_printf_i+0x15a>
 800533e:	3501      	adds	r5, #1
 8005340:	68e3      	ldr	r3, [r4, #12]
 8005342:	9903      	ldr	r1, [sp, #12]
 8005344:	1a5b      	subs	r3, r3, r1
 8005346:	42ab      	cmp	r3, r5
 8005348:	dcf2      	bgt.n	8005330 <_printf_i+0x210>
 800534a:	e7eb      	b.n	8005324 <_printf_i+0x204>
 800534c:	2500      	movs	r5, #0
 800534e:	f104 0619 	add.w	r6, r4, #25
 8005352:	e7f5      	b.n	8005340 <_printf_i+0x220>
 8005354:	08005cdd 	.word	0x08005cdd
 8005358:	08005cee 	.word	0x08005cee

0800535c <__swhatbuf_r>:
 800535c:	b570      	push	{r4, r5, r6, lr}
 800535e:	460c      	mov	r4, r1
 8005360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005364:	2900      	cmp	r1, #0
 8005366:	b096      	sub	sp, #88	@ 0x58
 8005368:	4615      	mov	r5, r2
 800536a:	461e      	mov	r6, r3
 800536c:	da0d      	bge.n	800538a <__swhatbuf_r+0x2e>
 800536e:	89a3      	ldrh	r3, [r4, #12]
 8005370:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005374:	f04f 0100 	mov.w	r1, #0
 8005378:	bf14      	ite	ne
 800537a:	2340      	movne	r3, #64	@ 0x40
 800537c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005380:	2000      	movs	r0, #0
 8005382:	6031      	str	r1, [r6, #0]
 8005384:	602b      	str	r3, [r5, #0]
 8005386:	b016      	add	sp, #88	@ 0x58
 8005388:	bd70      	pop	{r4, r5, r6, pc}
 800538a:	466a      	mov	r2, sp
 800538c:	f000 f848 	bl	8005420 <_fstat_r>
 8005390:	2800      	cmp	r0, #0
 8005392:	dbec      	blt.n	800536e <__swhatbuf_r+0x12>
 8005394:	9901      	ldr	r1, [sp, #4]
 8005396:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800539a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800539e:	4259      	negs	r1, r3
 80053a0:	4159      	adcs	r1, r3
 80053a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80053a6:	e7eb      	b.n	8005380 <__swhatbuf_r+0x24>

080053a8 <__smakebuf_r>:
 80053a8:	898b      	ldrh	r3, [r1, #12]
 80053aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053ac:	079d      	lsls	r5, r3, #30
 80053ae:	4606      	mov	r6, r0
 80053b0:	460c      	mov	r4, r1
 80053b2:	d507      	bpl.n	80053c4 <__smakebuf_r+0x1c>
 80053b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80053b8:	6023      	str	r3, [r4, #0]
 80053ba:	6123      	str	r3, [r4, #16]
 80053bc:	2301      	movs	r3, #1
 80053be:	6163      	str	r3, [r4, #20]
 80053c0:	b003      	add	sp, #12
 80053c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053c4:	ab01      	add	r3, sp, #4
 80053c6:	466a      	mov	r2, sp
 80053c8:	f7ff ffc8 	bl	800535c <__swhatbuf_r>
 80053cc:	9f00      	ldr	r7, [sp, #0]
 80053ce:	4605      	mov	r5, r0
 80053d0:	4639      	mov	r1, r7
 80053d2:	4630      	mov	r0, r6
 80053d4:	f7ff fc68 	bl	8004ca8 <_malloc_r>
 80053d8:	b948      	cbnz	r0, 80053ee <__smakebuf_r+0x46>
 80053da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053de:	059a      	lsls	r2, r3, #22
 80053e0:	d4ee      	bmi.n	80053c0 <__smakebuf_r+0x18>
 80053e2:	f023 0303 	bic.w	r3, r3, #3
 80053e6:	f043 0302 	orr.w	r3, r3, #2
 80053ea:	81a3      	strh	r3, [r4, #12]
 80053ec:	e7e2      	b.n	80053b4 <__smakebuf_r+0xc>
 80053ee:	89a3      	ldrh	r3, [r4, #12]
 80053f0:	6020      	str	r0, [r4, #0]
 80053f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053f6:	81a3      	strh	r3, [r4, #12]
 80053f8:	9b01      	ldr	r3, [sp, #4]
 80053fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80053fe:	b15b      	cbz	r3, 8005418 <__smakebuf_r+0x70>
 8005400:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005404:	4630      	mov	r0, r6
 8005406:	f000 f81d 	bl	8005444 <_isatty_r>
 800540a:	b128      	cbz	r0, 8005418 <__smakebuf_r+0x70>
 800540c:	89a3      	ldrh	r3, [r4, #12]
 800540e:	f023 0303 	bic.w	r3, r3, #3
 8005412:	f043 0301 	orr.w	r3, r3, #1
 8005416:	81a3      	strh	r3, [r4, #12]
 8005418:	89a3      	ldrh	r3, [r4, #12]
 800541a:	431d      	orrs	r5, r3
 800541c:	81a5      	strh	r5, [r4, #12]
 800541e:	e7cf      	b.n	80053c0 <__smakebuf_r+0x18>

08005420 <_fstat_r>:
 8005420:	b538      	push	{r3, r4, r5, lr}
 8005422:	4d07      	ldr	r5, [pc, #28]	@ (8005440 <_fstat_r+0x20>)
 8005424:	2300      	movs	r3, #0
 8005426:	4604      	mov	r4, r0
 8005428:	4608      	mov	r0, r1
 800542a:	4611      	mov	r1, r2
 800542c:	602b      	str	r3, [r5, #0]
 800542e:	f000 f942 	bl	80056b6 <_fstat>
 8005432:	1c43      	adds	r3, r0, #1
 8005434:	d102      	bne.n	800543c <_fstat_r+0x1c>
 8005436:	682b      	ldr	r3, [r5, #0]
 8005438:	b103      	cbz	r3, 800543c <_fstat_r+0x1c>
 800543a:	6023      	str	r3, [r4, #0]
 800543c:	bd38      	pop	{r3, r4, r5, pc}
 800543e:	bf00      	nop
 8005440:	200003b8 	.word	0x200003b8

08005444 <_isatty_r>:
 8005444:	b538      	push	{r3, r4, r5, lr}
 8005446:	4d06      	ldr	r5, [pc, #24]	@ (8005460 <_isatty_r+0x1c>)
 8005448:	2300      	movs	r3, #0
 800544a:	4604      	mov	r4, r0
 800544c:	4608      	mov	r0, r1
 800544e:	602b      	str	r3, [r5, #0]
 8005450:	f000 fa96 	bl	8005980 <_isatty>
 8005454:	1c43      	adds	r3, r0, #1
 8005456:	d102      	bne.n	800545e <_isatty_r+0x1a>
 8005458:	682b      	ldr	r3, [r5, #0]
 800545a:	b103      	cbz	r3, 800545e <_isatty_r+0x1a>
 800545c:	6023      	str	r3, [r4, #0]
 800545e:	bd38      	pop	{r3, r4, r5, pc}
 8005460:	200003b8 	.word	0x200003b8

08005464 <_sbrk_r>:
 8005464:	b538      	push	{r3, r4, r5, lr}
 8005466:	4d06      	ldr	r5, [pc, #24]	@ (8005480 <_sbrk_r+0x1c>)
 8005468:	2300      	movs	r3, #0
 800546a:	4604      	mov	r4, r0
 800546c:	4608      	mov	r0, r1
 800546e:	602b      	str	r3, [r5, #0]
 8005470:	f7fb fe7c 	bl	800116c <_sbrk>
 8005474:	1c43      	adds	r3, r0, #1
 8005476:	d102      	bne.n	800547e <_sbrk_r+0x1a>
 8005478:	682b      	ldr	r3, [r5, #0]
 800547a:	b103      	cbz	r3, 800547e <_sbrk_r+0x1a>
 800547c:	6023      	str	r3, [r4, #0]
 800547e:	bd38      	pop	{r3, r4, r5, pc}
 8005480:	200003b8 	.word	0x200003b8

08005484 <findslot>:
 8005484:	4b0a      	ldr	r3, [pc, #40]	@ (80054b0 <findslot+0x2c>)
 8005486:	b510      	push	{r4, lr}
 8005488:	4604      	mov	r4, r0
 800548a:	6818      	ldr	r0, [r3, #0]
 800548c:	b118      	cbz	r0, 8005496 <findslot+0x12>
 800548e:	6a03      	ldr	r3, [r0, #32]
 8005490:	b90b      	cbnz	r3, 8005496 <findslot+0x12>
 8005492:	f7ff f9a3 	bl	80047dc <__sinit>
 8005496:	2c13      	cmp	r4, #19
 8005498:	d807      	bhi.n	80054aa <findslot+0x26>
 800549a:	4806      	ldr	r0, [pc, #24]	@ (80054b4 <findslot+0x30>)
 800549c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80054a0:	3201      	adds	r2, #1
 80054a2:	d002      	beq.n	80054aa <findslot+0x26>
 80054a4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80054a8:	bd10      	pop	{r4, pc}
 80054aa:	2000      	movs	r0, #0
 80054ac:	e7fc      	b.n	80054a8 <findslot+0x24>
 80054ae:	bf00      	nop
 80054b0:	2000002c 	.word	0x2000002c
 80054b4:	200003d4 	.word	0x200003d4

080054b8 <error>:
 80054b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ba:	4604      	mov	r4, r0
 80054bc:	f7ff fb5a 	bl	8004b74 <__errno>
 80054c0:	2613      	movs	r6, #19
 80054c2:	4605      	mov	r5, r0
 80054c4:	2700      	movs	r7, #0
 80054c6:	4630      	mov	r0, r6
 80054c8:	4639      	mov	r1, r7
 80054ca:	beab      	bkpt	0x00ab
 80054cc:	4606      	mov	r6, r0
 80054ce:	602e      	str	r6, [r5, #0]
 80054d0:	4620      	mov	r0, r4
 80054d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080054d4 <checkerror>:
 80054d4:	1c43      	adds	r3, r0, #1
 80054d6:	d101      	bne.n	80054dc <checkerror+0x8>
 80054d8:	f7ff bfee 	b.w	80054b8 <error>
 80054dc:	4770      	bx	lr

080054de <_swiread>:
 80054de:	b530      	push	{r4, r5, lr}
 80054e0:	b085      	sub	sp, #20
 80054e2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80054e6:	9203      	str	r2, [sp, #12]
 80054e8:	2406      	movs	r4, #6
 80054ea:	ad01      	add	r5, sp, #4
 80054ec:	4620      	mov	r0, r4
 80054ee:	4629      	mov	r1, r5
 80054f0:	beab      	bkpt	0x00ab
 80054f2:	4604      	mov	r4, r0
 80054f4:	4620      	mov	r0, r4
 80054f6:	f7ff ffed 	bl	80054d4 <checkerror>
 80054fa:	b005      	add	sp, #20
 80054fc:	bd30      	pop	{r4, r5, pc}

080054fe <_read>:
 80054fe:	b570      	push	{r4, r5, r6, lr}
 8005500:	460e      	mov	r6, r1
 8005502:	4614      	mov	r4, r2
 8005504:	f7ff ffbe 	bl	8005484 <findslot>
 8005508:	4605      	mov	r5, r0
 800550a:	b930      	cbnz	r0, 800551a <_read+0x1c>
 800550c:	f7ff fb32 	bl	8004b74 <__errno>
 8005510:	2309      	movs	r3, #9
 8005512:	6003      	str	r3, [r0, #0]
 8005514:	f04f 30ff 	mov.w	r0, #4294967295
 8005518:	bd70      	pop	{r4, r5, r6, pc}
 800551a:	6800      	ldr	r0, [r0, #0]
 800551c:	4622      	mov	r2, r4
 800551e:	4631      	mov	r1, r6
 8005520:	f7ff ffdd 	bl	80054de <_swiread>
 8005524:	1c43      	adds	r3, r0, #1
 8005526:	d0f5      	beq.n	8005514 <_read+0x16>
 8005528:	686b      	ldr	r3, [r5, #4]
 800552a:	1a20      	subs	r0, r4, r0
 800552c:	4403      	add	r3, r0
 800552e:	606b      	str	r3, [r5, #4]
 8005530:	e7f2      	b.n	8005518 <_read+0x1a>

08005532 <_swilseek>:
 8005532:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005534:	460c      	mov	r4, r1
 8005536:	4616      	mov	r6, r2
 8005538:	f7ff ffa4 	bl	8005484 <findslot>
 800553c:	4605      	mov	r5, r0
 800553e:	b940      	cbnz	r0, 8005552 <_swilseek+0x20>
 8005540:	f7ff fb18 	bl	8004b74 <__errno>
 8005544:	2309      	movs	r3, #9
 8005546:	6003      	str	r3, [r0, #0]
 8005548:	f04f 34ff 	mov.w	r4, #4294967295
 800554c:	4620      	mov	r0, r4
 800554e:	b003      	add	sp, #12
 8005550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005552:	2e02      	cmp	r6, #2
 8005554:	d903      	bls.n	800555e <_swilseek+0x2c>
 8005556:	f7ff fb0d 	bl	8004b74 <__errno>
 800555a:	2316      	movs	r3, #22
 800555c:	e7f3      	b.n	8005546 <_swilseek+0x14>
 800555e:	2e01      	cmp	r6, #1
 8005560:	d112      	bne.n	8005588 <_swilseek+0x56>
 8005562:	6843      	ldr	r3, [r0, #4]
 8005564:	18e4      	adds	r4, r4, r3
 8005566:	d4f6      	bmi.n	8005556 <_swilseek+0x24>
 8005568:	682b      	ldr	r3, [r5, #0]
 800556a:	260a      	movs	r6, #10
 800556c:	e9cd 3400 	strd	r3, r4, [sp]
 8005570:	466f      	mov	r7, sp
 8005572:	4630      	mov	r0, r6
 8005574:	4639      	mov	r1, r7
 8005576:	beab      	bkpt	0x00ab
 8005578:	4606      	mov	r6, r0
 800557a:	4630      	mov	r0, r6
 800557c:	f7ff ffaa 	bl	80054d4 <checkerror>
 8005580:	2800      	cmp	r0, #0
 8005582:	dbe1      	blt.n	8005548 <_swilseek+0x16>
 8005584:	606c      	str	r4, [r5, #4]
 8005586:	e7e1      	b.n	800554c <_swilseek+0x1a>
 8005588:	2e02      	cmp	r6, #2
 800558a:	6803      	ldr	r3, [r0, #0]
 800558c:	d1ec      	bne.n	8005568 <_swilseek+0x36>
 800558e:	9300      	str	r3, [sp, #0]
 8005590:	260c      	movs	r6, #12
 8005592:	466f      	mov	r7, sp
 8005594:	4630      	mov	r0, r6
 8005596:	4639      	mov	r1, r7
 8005598:	beab      	bkpt	0x00ab
 800559a:	4606      	mov	r6, r0
 800559c:	4630      	mov	r0, r6
 800559e:	f7ff ff99 	bl	80054d4 <checkerror>
 80055a2:	1c43      	adds	r3, r0, #1
 80055a4:	d0d0      	beq.n	8005548 <_swilseek+0x16>
 80055a6:	4404      	add	r4, r0
 80055a8:	e7de      	b.n	8005568 <_swilseek+0x36>

080055aa <_lseek>:
 80055aa:	f7ff bfc2 	b.w	8005532 <_swilseek>

080055ae <_swiwrite>:
 80055ae:	b530      	push	{r4, r5, lr}
 80055b0:	b085      	sub	sp, #20
 80055b2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80055b6:	9203      	str	r2, [sp, #12]
 80055b8:	2405      	movs	r4, #5
 80055ba:	ad01      	add	r5, sp, #4
 80055bc:	4620      	mov	r0, r4
 80055be:	4629      	mov	r1, r5
 80055c0:	beab      	bkpt	0x00ab
 80055c2:	4604      	mov	r4, r0
 80055c4:	4620      	mov	r0, r4
 80055c6:	f7ff ff85 	bl	80054d4 <checkerror>
 80055ca:	b005      	add	sp, #20
 80055cc:	bd30      	pop	{r4, r5, pc}

080055ce <_write>:
 80055ce:	b570      	push	{r4, r5, r6, lr}
 80055d0:	460e      	mov	r6, r1
 80055d2:	4615      	mov	r5, r2
 80055d4:	f7ff ff56 	bl	8005484 <findslot>
 80055d8:	4604      	mov	r4, r0
 80055da:	b930      	cbnz	r0, 80055ea <_write+0x1c>
 80055dc:	f7ff faca 	bl	8004b74 <__errno>
 80055e0:	2309      	movs	r3, #9
 80055e2:	6003      	str	r3, [r0, #0]
 80055e4:	f04f 30ff 	mov.w	r0, #4294967295
 80055e8:	bd70      	pop	{r4, r5, r6, pc}
 80055ea:	6800      	ldr	r0, [r0, #0]
 80055ec:	462a      	mov	r2, r5
 80055ee:	4631      	mov	r1, r6
 80055f0:	f7ff ffdd 	bl	80055ae <_swiwrite>
 80055f4:	1e03      	subs	r3, r0, #0
 80055f6:	dbf5      	blt.n	80055e4 <_write+0x16>
 80055f8:	6862      	ldr	r2, [r4, #4]
 80055fa:	1ae8      	subs	r0, r5, r3
 80055fc:	4402      	add	r2, r0
 80055fe:	42ab      	cmp	r3, r5
 8005600:	6062      	str	r2, [r4, #4]
 8005602:	d1f1      	bne.n	80055e8 <_write+0x1a>
 8005604:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005608:	2000      	movs	r0, #0
 800560a:	f7ff bf55 	b.w	80054b8 <error>

0800560e <_swiclose>:
 800560e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005610:	2402      	movs	r4, #2
 8005612:	9001      	str	r0, [sp, #4]
 8005614:	ad01      	add	r5, sp, #4
 8005616:	4620      	mov	r0, r4
 8005618:	4629      	mov	r1, r5
 800561a:	beab      	bkpt	0x00ab
 800561c:	4604      	mov	r4, r0
 800561e:	4620      	mov	r0, r4
 8005620:	f7ff ff58 	bl	80054d4 <checkerror>
 8005624:	b003      	add	sp, #12
 8005626:	bd30      	pop	{r4, r5, pc}

08005628 <_close>:
 8005628:	b538      	push	{r3, r4, r5, lr}
 800562a:	4605      	mov	r5, r0
 800562c:	f7ff ff2a 	bl	8005484 <findslot>
 8005630:	4604      	mov	r4, r0
 8005632:	b930      	cbnz	r0, 8005642 <_close+0x1a>
 8005634:	f7ff fa9e 	bl	8004b74 <__errno>
 8005638:	2309      	movs	r3, #9
 800563a:	6003      	str	r3, [r0, #0]
 800563c:	f04f 30ff 	mov.w	r0, #4294967295
 8005640:	bd38      	pop	{r3, r4, r5, pc}
 8005642:	3d01      	subs	r5, #1
 8005644:	2d01      	cmp	r5, #1
 8005646:	d809      	bhi.n	800565c <_close+0x34>
 8005648:	4b09      	ldr	r3, [pc, #36]	@ (8005670 <_close+0x48>)
 800564a:	689a      	ldr	r2, [r3, #8]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	429a      	cmp	r2, r3
 8005650:	d104      	bne.n	800565c <_close+0x34>
 8005652:	f04f 33ff 	mov.w	r3, #4294967295
 8005656:	6003      	str	r3, [r0, #0]
 8005658:	2000      	movs	r0, #0
 800565a:	e7f1      	b.n	8005640 <_close+0x18>
 800565c:	6820      	ldr	r0, [r4, #0]
 800565e:	f7ff ffd6 	bl	800560e <_swiclose>
 8005662:	2800      	cmp	r0, #0
 8005664:	d1ec      	bne.n	8005640 <_close+0x18>
 8005666:	f04f 33ff 	mov.w	r3, #4294967295
 800566a:	6023      	str	r3, [r4, #0]
 800566c:	e7e8      	b.n	8005640 <_close+0x18>
 800566e:	bf00      	nop
 8005670:	200003d4 	.word	0x200003d4

08005674 <_swistat>:
 8005674:	b570      	push	{r4, r5, r6, lr}
 8005676:	460c      	mov	r4, r1
 8005678:	f7ff ff04 	bl	8005484 <findslot>
 800567c:	4605      	mov	r5, r0
 800567e:	b930      	cbnz	r0, 800568e <_swistat+0x1a>
 8005680:	f7ff fa78 	bl	8004b74 <__errno>
 8005684:	2309      	movs	r3, #9
 8005686:	6003      	str	r3, [r0, #0]
 8005688:	f04f 30ff 	mov.w	r0, #4294967295
 800568c:	bd70      	pop	{r4, r5, r6, pc}
 800568e:	6863      	ldr	r3, [r4, #4]
 8005690:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005694:	6063      	str	r3, [r4, #4]
 8005696:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800569a:	64a3      	str	r3, [r4, #72]	@ 0x48
 800569c:	260c      	movs	r6, #12
 800569e:	4630      	mov	r0, r6
 80056a0:	4629      	mov	r1, r5
 80056a2:	beab      	bkpt	0x00ab
 80056a4:	4605      	mov	r5, r0
 80056a6:	4628      	mov	r0, r5
 80056a8:	f7ff ff14 	bl	80054d4 <checkerror>
 80056ac:	1c43      	adds	r3, r0, #1
 80056ae:	d0eb      	beq.n	8005688 <_swistat+0x14>
 80056b0:	6120      	str	r0, [r4, #16]
 80056b2:	2000      	movs	r0, #0
 80056b4:	e7ea      	b.n	800568c <_swistat+0x18>

080056b6 <_fstat>:
 80056b6:	460b      	mov	r3, r1
 80056b8:	b510      	push	{r4, lr}
 80056ba:	2100      	movs	r1, #0
 80056bc:	4604      	mov	r4, r0
 80056be:	2258      	movs	r2, #88	@ 0x58
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7ff fa09 	bl	8004ad8 <memset>
 80056c6:	4601      	mov	r1, r0
 80056c8:	4620      	mov	r0, r4
 80056ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056ce:	f7ff bfd1 	b.w	8005674 <_swistat>

080056d2 <_stat>:
 80056d2:	b538      	push	{r3, r4, r5, lr}
 80056d4:	460d      	mov	r5, r1
 80056d6:	4604      	mov	r4, r0
 80056d8:	2258      	movs	r2, #88	@ 0x58
 80056da:	2100      	movs	r1, #0
 80056dc:	4628      	mov	r0, r5
 80056de:	f7ff f9fb 	bl	8004ad8 <memset>
 80056e2:	4620      	mov	r0, r4
 80056e4:	2100      	movs	r1, #0
 80056e6:	f000 f811 	bl	800570c <_swiopen>
 80056ea:	1c43      	adds	r3, r0, #1
 80056ec:	4604      	mov	r4, r0
 80056ee:	d00b      	beq.n	8005708 <_stat+0x36>
 80056f0:	686b      	ldr	r3, [r5, #4]
 80056f2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80056f6:	606b      	str	r3, [r5, #4]
 80056f8:	4629      	mov	r1, r5
 80056fa:	f7ff ffbb 	bl	8005674 <_swistat>
 80056fe:	4605      	mov	r5, r0
 8005700:	4620      	mov	r0, r4
 8005702:	f7ff ff91 	bl	8005628 <_close>
 8005706:	462c      	mov	r4, r5
 8005708:	4620      	mov	r0, r4
 800570a:	bd38      	pop	{r3, r4, r5, pc}

0800570c <_swiopen>:
 800570c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005710:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 80057bc <_swiopen+0xb0>
 8005714:	b096      	sub	sp, #88	@ 0x58
 8005716:	4607      	mov	r7, r0
 8005718:	460e      	mov	r6, r1
 800571a:	2400      	movs	r4, #0
 800571c:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 8005720:	3301      	adds	r3, #1
 8005722:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8005726:	d032      	beq.n	800578e <_swiopen+0x82>
 8005728:	3401      	adds	r4, #1
 800572a:	2c14      	cmp	r4, #20
 800572c:	d1f6      	bne.n	800571c <_swiopen+0x10>
 800572e:	f7ff fa21 	bl	8004b74 <__errno>
 8005732:	2318      	movs	r3, #24
 8005734:	e03a      	b.n	80057ac <_swiopen+0xa0>
 8005736:	f3c6 4500 	ubfx	r5, r6, #16, #1
 800573a:	f240 6301 	movw	r3, #1537	@ 0x601
 800573e:	07b2      	lsls	r2, r6, #30
 8005740:	bf48      	it	mi
 8005742:	f045 0502 	orrmi.w	r5, r5, #2
 8005746:	421e      	tst	r6, r3
 8005748:	bf18      	it	ne
 800574a:	f045 0504 	orrne.w	r5, r5, #4
 800574e:	0733      	lsls	r3, r6, #28
 8005750:	bf48      	it	mi
 8005752:	f025 0504 	bicmi.w	r5, r5, #4
 8005756:	4638      	mov	r0, r7
 8005758:	bf48      	it	mi
 800575a:	f045 0508 	orrmi.w	r5, r5, #8
 800575e:	9700      	str	r7, [sp, #0]
 8005760:	f7fa fd86 	bl	8000270 <strlen>
 8005764:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8005768:	2501      	movs	r5, #1
 800576a:	4628      	mov	r0, r5
 800576c:	4651      	mov	r1, sl
 800576e:	beab      	bkpt	0x00ab
 8005770:	4605      	mov	r5, r0
 8005772:	2d00      	cmp	r5, #0
 8005774:	db06      	blt.n	8005784 <_swiopen+0x78>
 8005776:	44c8      	add	r8, r9
 8005778:	2300      	movs	r3, #0
 800577a:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 800577e:	f8c8 3004 	str.w	r3, [r8, #4]
 8005782:	e016      	b.n	80057b2 <_swiopen+0xa6>
 8005784:	4628      	mov	r0, r5
 8005786:	f7ff fe97 	bl	80054b8 <error>
 800578a:	4604      	mov	r4, r0
 800578c:	e011      	b.n	80057b2 <_swiopen+0xa6>
 800578e:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8005792:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005796:	46ea      	mov	sl, sp
 8005798:	d1cd      	bne.n	8005736 <_swiopen+0x2a>
 800579a:	4651      	mov	r1, sl
 800579c:	4638      	mov	r0, r7
 800579e:	f7ff ff98 	bl	80056d2 <_stat>
 80057a2:	3001      	adds	r0, #1
 80057a4:	d0c7      	beq.n	8005736 <_swiopen+0x2a>
 80057a6:	f7ff f9e5 	bl	8004b74 <__errno>
 80057aa:	2311      	movs	r3, #17
 80057ac:	6003      	str	r3, [r0, #0]
 80057ae:	f04f 34ff 	mov.w	r4, #4294967295
 80057b2:	4620      	mov	r0, r4
 80057b4:	b016      	add	sp, #88	@ 0x58
 80057b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057ba:	bf00      	nop
 80057bc:	200003d4 	.word	0x200003d4

080057c0 <_get_semihosting_exts>:
 80057c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80057c4:	4606      	mov	r6, r0
 80057c6:	460f      	mov	r7, r1
 80057c8:	4829      	ldr	r0, [pc, #164]	@ (8005870 <_get_semihosting_exts+0xb0>)
 80057ca:	2100      	movs	r1, #0
 80057cc:	4615      	mov	r5, r2
 80057ce:	f7ff ff9d 	bl	800570c <_swiopen>
 80057d2:	462a      	mov	r2, r5
 80057d4:	4604      	mov	r4, r0
 80057d6:	2100      	movs	r1, #0
 80057d8:	4630      	mov	r0, r6
 80057da:	f7ff f97d 	bl	8004ad8 <memset>
 80057de:	1c63      	adds	r3, r4, #1
 80057e0:	d014      	beq.n	800580c <_get_semihosting_exts+0x4c>
 80057e2:	4620      	mov	r0, r4
 80057e4:	f7ff fe4e 	bl	8005484 <findslot>
 80057e8:	f04f 080c 	mov.w	r8, #12
 80057ec:	4681      	mov	r9, r0
 80057ee:	4640      	mov	r0, r8
 80057f0:	4649      	mov	r1, r9
 80057f2:	beab      	bkpt	0x00ab
 80057f4:	4680      	mov	r8, r0
 80057f6:	4640      	mov	r0, r8
 80057f8:	f7ff fe6c 	bl	80054d4 <checkerror>
 80057fc:	2803      	cmp	r0, #3
 80057fe:	dd02      	ble.n	8005806 <_get_semihosting_exts+0x46>
 8005800:	1ec3      	subs	r3, r0, #3
 8005802:	42ab      	cmp	r3, r5
 8005804:	dc07      	bgt.n	8005816 <_get_semihosting_exts+0x56>
 8005806:	4620      	mov	r0, r4
 8005808:	f7ff ff0e 	bl	8005628 <_close>
 800580c:	f04f 30ff 	mov.w	r0, #4294967295
 8005810:	b003      	add	sp, #12
 8005812:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005816:	2204      	movs	r2, #4
 8005818:	eb0d 0102 	add.w	r1, sp, r2
 800581c:	4620      	mov	r0, r4
 800581e:	f7ff fe6e 	bl	80054fe <_read>
 8005822:	2803      	cmp	r0, #3
 8005824:	ddef      	ble.n	8005806 <_get_semihosting_exts+0x46>
 8005826:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800582a:	2b53      	cmp	r3, #83	@ 0x53
 800582c:	d1eb      	bne.n	8005806 <_get_semihosting_exts+0x46>
 800582e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005832:	2b48      	cmp	r3, #72	@ 0x48
 8005834:	d1e7      	bne.n	8005806 <_get_semihosting_exts+0x46>
 8005836:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800583a:	2b46      	cmp	r3, #70	@ 0x46
 800583c:	d1e3      	bne.n	8005806 <_get_semihosting_exts+0x46>
 800583e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005842:	2b42      	cmp	r3, #66	@ 0x42
 8005844:	d1df      	bne.n	8005806 <_get_semihosting_exts+0x46>
 8005846:	2201      	movs	r2, #1
 8005848:	4639      	mov	r1, r7
 800584a:	4620      	mov	r0, r4
 800584c:	f7ff fe71 	bl	8005532 <_swilseek>
 8005850:	2800      	cmp	r0, #0
 8005852:	dbd8      	blt.n	8005806 <_get_semihosting_exts+0x46>
 8005854:	462a      	mov	r2, r5
 8005856:	4631      	mov	r1, r6
 8005858:	4620      	mov	r0, r4
 800585a:	f7ff fe50 	bl	80054fe <_read>
 800585e:	4605      	mov	r5, r0
 8005860:	4620      	mov	r0, r4
 8005862:	f7ff fee1 	bl	8005628 <_close>
 8005866:	4628      	mov	r0, r5
 8005868:	f7ff fe34 	bl	80054d4 <checkerror>
 800586c:	e7d0      	b.n	8005810 <_get_semihosting_exts+0x50>
 800586e:	bf00      	nop
 8005870:	08005cff 	.word	0x08005cff

08005874 <initialise_semihosting_exts>:
 8005874:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005876:	4d0a      	ldr	r5, [pc, #40]	@ (80058a0 <initialise_semihosting_exts+0x2c>)
 8005878:	4c0a      	ldr	r4, [pc, #40]	@ (80058a4 <initialise_semihosting_exts+0x30>)
 800587a:	2100      	movs	r1, #0
 800587c:	2201      	movs	r2, #1
 800587e:	a801      	add	r0, sp, #4
 8005880:	6029      	str	r1, [r5, #0]
 8005882:	6022      	str	r2, [r4, #0]
 8005884:	f7ff ff9c 	bl	80057c0 <_get_semihosting_exts>
 8005888:	2800      	cmp	r0, #0
 800588a:	dd07      	ble.n	800589c <initialise_semihosting_exts+0x28>
 800588c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005890:	f003 0201 	and.w	r2, r3, #1
 8005894:	f003 0302 	and.w	r3, r3, #2
 8005898:	602a      	str	r2, [r5, #0]
 800589a:	6023      	str	r3, [r4, #0]
 800589c:	b003      	add	sp, #12
 800589e:	bd30      	pop	{r4, r5, pc}
 80058a0:	20000080 	.word	0x20000080
 80058a4:	2000007c 	.word	0x2000007c

080058a8 <_has_ext_stdout_stderr>:
 80058a8:	b510      	push	{r4, lr}
 80058aa:	4c04      	ldr	r4, [pc, #16]	@ (80058bc <_has_ext_stdout_stderr+0x14>)
 80058ac:	6823      	ldr	r3, [r4, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	da01      	bge.n	80058b6 <_has_ext_stdout_stderr+0xe>
 80058b2:	f7ff ffdf 	bl	8005874 <initialise_semihosting_exts>
 80058b6:	6820      	ldr	r0, [r4, #0]
 80058b8:	bd10      	pop	{r4, pc}
 80058ba:	bf00      	nop
 80058bc:	2000007c 	.word	0x2000007c

080058c0 <initialise_monitor_handles>:
 80058c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058c4:	b085      	sub	sp, #20
 80058c6:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8005978 <initialise_monitor_handles+0xb8>
 80058ca:	f8cd 9004 	str.w	r9, [sp, #4]
 80058ce:	2303      	movs	r3, #3
 80058d0:	2400      	movs	r4, #0
 80058d2:	9303      	str	r3, [sp, #12]
 80058d4:	af01      	add	r7, sp, #4
 80058d6:	9402      	str	r4, [sp, #8]
 80058d8:	2501      	movs	r5, #1
 80058da:	4628      	mov	r0, r5
 80058dc:	4639      	mov	r1, r7
 80058de:	beab      	bkpt	0x00ab
 80058e0:	4605      	mov	r5, r0
 80058e2:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800597c <initialise_monitor_handles+0xbc>
 80058e6:	4623      	mov	r3, r4
 80058e8:	4c20      	ldr	r4, [pc, #128]	@ (800596c <initialise_monitor_handles+0xac>)
 80058ea:	f8c8 5000 	str.w	r5, [r8]
 80058ee:	f04f 32ff 	mov.w	r2, #4294967295
 80058f2:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80058f6:	3301      	adds	r3, #1
 80058f8:	2b14      	cmp	r3, #20
 80058fa:	d1fa      	bne.n	80058f2 <initialise_monitor_handles+0x32>
 80058fc:	f7ff ffd4 	bl	80058a8 <_has_ext_stdout_stderr>
 8005900:	4d1b      	ldr	r5, [pc, #108]	@ (8005970 <initialise_monitor_handles+0xb0>)
 8005902:	b1d0      	cbz	r0, 800593a <initialise_monitor_handles+0x7a>
 8005904:	f04f 0a03 	mov.w	sl, #3
 8005908:	2304      	movs	r3, #4
 800590a:	f8cd 9004 	str.w	r9, [sp, #4]
 800590e:	2601      	movs	r6, #1
 8005910:	f8cd a00c 	str.w	sl, [sp, #12]
 8005914:	9302      	str	r3, [sp, #8]
 8005916:	4630      	mov	r0, r6
 8005918:	4639      	mov	r1, r7
 800591a:	beab      	bkpt	0x00ab
 800591c:	4683      	mov	fp, r0
 800591e:	4b15      	ldr	r3, [pc, #84]	@ (8005974 <initialise_monitor_handles+0xb4>)
 8005920:	f8cd 9004 	str.w	r9, [sp, #4]
 8005924:	f8c3 b000 	str.w	fp, [r3]
 8005928:	2308      	movs	r3, #8
 800592a:	f8cd a00c 	str.w	sl, [sp, #12]
 800592e:	9302      	str	r3, [sp, #8]
 8005930:	4630      	mov	r0, r6
 8005932:	4639      	mov	r1, r7
 8005934:	beab      	bkpt	0x00ab
 8005936:	4606      	mov	r6, r0
 8005938:	602e      	str	r6, [r5, #0]
 800593a:	682b      	ldr	r3, [r5, #0]
 800593c:	3301      	adds	r3, #1
 800593e:	bf02      	ittt	eq
 8005940:	4b0c      	ldreq	r3, [pc, #48]	@ (8005974 <initialise_monitor_handles+0xb4>)
 8005942:	681b      	ldreq	r3, [r3, #0]
 8005944:	602b      	streq	r3, [r5, #0]
 8005946:	2600      	movs	r6, #0
 8005948:	f8d8 3000 	ldr.w	r3, [r8]
 800594c:	6023      	str	r3, [r4, #0]
 800594e:	6066      	str	r6, [r4, #4]
 8005950:	f7ff ffaa 	bl	80058a8 <_has_ext_stdout_stderr>
 8005954:	b130      	cbz	r0, 8005964 <initialise_monitor_handles+0xa4>
 8005956:	4b07      	ldr	r3, [pc, #28]	@ (8005974 <initialise_monitor_handles+0xb4>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800595e:	682b      	ldr	r3, [r5, #0]
 8005960:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8005964:	b005      	add	sp, #20
 8005966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800596a:	bf00      	nop
 800596c:	200003d4 	.word	0x200003d4
 8005970:	200003c8 	.word	0x200003c8
 8005974:	200003cc 	.word	0x200003cc
 8005978:	08005d15 	.word	0x08005d15
 800597c:	200003d0 	.word	0x200003d0

08005980 <_isatty>:
 8005980:	b570      	push	{r4, r5, r6, lr}
 8005982:	f7ff fd7f 	bl	8005484 <findslot>
 8005986:	2409      	movs	r4, #9
 8005988:	4605      	mov	r5, r0
 800598a:	b920      	cbnz	r0, 8005996 <_isatty+0x16>
 800598c:	f7ff f8f2 	bl	8004b74 <__errno>
 8005990:	6004      	str	r4, [r0, #0]
 8005992:	2000      	movs	r0, #0
 8005994:	bd70      	pop	{r4, r5, r6, pc}
 8005996:	4620      	mov	r0, r4
 8005998:	4629      	mov	r1, r5
 800599a:	beab      	bkpt	0x00ab
 800599c:	4604      	mov	r4, r0
 800599e:	2c01      	cmp	r4, #1
 80059a0:	4620      	mov	r0, r4
 80059a2:	d0f7      	beq.n	8005994 <_isatty+0x14>
 80059a4:	f7ff f8e6 	bl	8004b74 <__errno>
 80059a8:	2513      	movs	r5, #19
 80059aa:	4604      	mov	r4, r0
 80059ac:	2600      	movs	r6, #0
 80059ae:	4628      	mov	r0, r5
 80059b0:	4631      	mov	r1, r6
 80059b2:	beab      	bkpt	0x00ab
 80059b4:	4605      	mov	r5, r0
 80059b6:	6025      	str	r5, [r4, #0]
 80059b8:	e7eb      	b.n	8005992 <_isatty+0x12>
	...

080059bc <_init>:
 80059bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059be:	bf00      	nop
 80059c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059c2:	bc08      	pop	{r3}
 80059c4:	469e      	mov	lr, r3
 80059c6:	4770      	bx	lr

080059c8 <_fini>:
 80059c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ca:	bf00      	nop
 80059cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ce:	bc08      	pop	{r3}
 80059d0:	469e      	mov	lr, r3
 80059d2:	4770      	bx	lr
