
modbusTrying.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000473c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  080048c4  080048c4  000058c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004afc  08004afc  00006034  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004afc  08004afc  00006034  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004afc  08004afc  00006034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004afc  08004afc  00005afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b00  08004b00  00005b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000034  20000000  08004b04  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006034  2**0
                  CONTENTS
 10 .bss          000003a8  20000034  20000034  00006034  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003dc  200003dc  00006034  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c1e9  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002378  00000000  00000000  0001224d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008f0  00000000  00000000  000145c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006b5  00000000  00000000  00014eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aba6  00000000  00000000  0001556d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ce9d  00000000  00000000  00030113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009adc2  00000000  00000000  0003cfb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d7d72  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000021a8  00000000  00000000  000d7db8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  000d9f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000034 	.word	0x20000034
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080048ac 	.word	0x080048ac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000038 	.word	0x20000038
 80001c4:	080048ac 	.word	0x080048ac

080001c8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f001 f902 	bl	80013d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f82a 	bl	8000228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8d2 	bl	800037c <MX_GPIO_Init>
  MX_DMA_Init();
 80001d8:	f000 f8aa 	bl	8000330 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80001dc:	f000 f876 	bl	80002cc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // printf("Starting Modbus RTU Slave...\n"); // Removed to prevent timing delays

  // Initialize UART callbacks
  UART_Callbacks_Init();
 80001e0:	f001 f870 	bl	80012c4 <UART_Callbacks_Init>
  // printf("UART callbacks initialized\n"); // Removed

  // Initialize Modbus RTU slave
  Modbus_Init();
 80001e4:	f000 fe78 	bl	8000ed8 <Modbus_Init>
  // printf("Array check: [0]=0x%04X [1]=0x%04X [12]=0x%04X [13]=0x%04X\n",
  //        Modbus_Device_GetRegister(0), Modbus_Device_GetRegister(1),
  //        Modbus_Device_GetRegister(12), Modbus_Device_GetRegister(13));

  // Initialize test functions
  Modbus_Test_Init();
 80001e8:	f000 ff32 	bl	8001050 <Modbus_Test_Init>
  {
    /* USER CODE BEGIN 3 */

    // Heartbeat LED toggle every second for standalone debugging
    static uint32_t heartbeat_counter = 0;
    heartbeat_counter++;
 80001ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000224 <main+0x5c>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	3301      	adds	r3, #1
 80001f2:	4a0c      	ldr	r2, [pc, #48]	@ (8000224 <main+0x5c>)
 80001f4:	6013      	str	r3, [r2, #0]
    if (heartbeat_counter >= 10) // 10 * 100ms = 1 second
 80001f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000224 <main+0x5c>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	2b09      	cmp	r3, #9
 80001fc:	d907      	bls.n	800020e <main+0x46>
    {
      heartbeat_counter = 0;
 80001fe:	4b09      	ldr	r3, [pc, #36]	@ (8000224 <main+0x5c>)
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8000204:	2110      	movs	r1, #16
 8000206:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800020a:	f001 fe1b 	bl	8001e44 <HAL_GPIO_TogglePin>
    }

    // Update sensor values periodically
    Modbus_Device_UpdateSensors();
 800020e:	f000 fe5b 	bl	8000ec8 <Modbus_Device_UpdateSensors>

    // Update test values
    Modbus_Test_Update();
 8000212:	f000 ff25 	bl	8001060 <Modbus_Test_Update>

    // Process Modbus (if needed)
    Modbus_Process();
 8000216:	f000 fee9 	bl	8000fec <Modbus_Process>
        device_registers[i] += 1;
      }
    }
    */
    // Add small delay to prevent busy waiting
    HAL_Delay(100);
 800021a:	2064      	movs	r0, #100	@ 0x64
 800021c:	f001 f940 	bl	80014a0 <HAL_Delay>
  {
 8000220:	e7e4      	b.n	80001ec <main+0x24>
 8000222:	bf00      	nop
 8000224:	20000160 	.word	0x20000160

08000228 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b096      	sub	sp, #88	@ 0x58
 800022c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000232:	2228      	movs	r2, #40	@ 0x28
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f004 fafe 	bl	8004838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800023c:	f107 031c 	add.w	r3, r7, #28
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]
 8000244:	605a      	str	r2, [r3, #4]
 8000246:	609a      	str	r2, [r3, #8]
 8000248:	60da      	str	r2, [r3, #12]
 800024a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
 8000252:	605a      	str	r2, [r3, #4]
 8000254:	609a      	str	r2, [r3, #8]
 8000256:	60da      	str	r2, [r3, #12]
 8000258:	611a      	str	r2, [r3, #16]
 800025a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800025c:	2302      	movs	r3, #2
 800025e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000260:	2301      	movs	r3, #1
 8000262:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000264:	2310      	movs	r3, #16
 8000266:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000268:	2300      	movs	r3, #0
 800026a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000270:	4618      	mov	r0, r3
 8000272:	f001 fe01 	bl	8001e78 <HAL_RCC_OscConfig>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800027c:	f000 f8ae 	bl	80003dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000280:	230f      	movs	r3, #15
 8000282:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000284:	2300      	movs	r3, #0
 8000286:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000294:	f107 031c 	add.w	r3, r7, #28
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f002 fdfa 	bl	8002e94 <HAL_RCC_ClockConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002a6:	f000 f899 	bl	80003dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80002aa:	2301      	movs	r3, #1
 80002ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	4618      	mov	r0, r3
 80002b6:	f002 ffff 	bl	80032b8 <HAL_RCCEx_PeriphCLKConfig>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80002c0:	f000 f88c 	bl	80003dc <Error_Handler>
  }
}
 80002c4:	bf00      	nop
 80002c6:	3758      	adds	r7, #88	@ 0x58
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}

080002cc <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002d0:	4b15      	ldr	r3, [pc, #84]	@ (8000328 <MX_USART1_UART_Init+0x5c>)
 80002d2:	4a16      	ldr	r2, [pc, #88]	@ (800032c <MX_USART1_UART_Init+0x60>)
 80002d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80002d6:	4b14      	ldr	r3, [pc, #80]	@ (8000328 <MX_USART1_UART_Init+0x5c>)
 80002d8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80002dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002de:	4b12      	ldr	r3, [pc, #72]	@ (8000328 <MX_USART1_UART_Init+0x5c>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002e4:	4b10      	ldr	r3, [pc, #64]	@ (8000328 <MX_USART1_UART_Init+0x5c>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000328 <MX_USART1_UART_Init+0x5c>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000328 <MX_USART1_UART_Init+0x5c>)
 80002f2:	220c      	movs	r2, #12
 80002f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000328 <MX_USART1_UART_Init+0x5c>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000328 <MX_USART1_UART_Init+0x5c>)
 80002fe:	2200      	movs	r2, #0
 8000300:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000302:	4b09      	ldr	r3, [pc, #36]	@ (8000328 <MX_USART1_UART_Init+0x5c>)
 8000304:	2200      	movs	r2, #0
 8000306:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000308:	4b07      	ldr	r3, [pc, #28]	@ (8000328 <MX_USART1_UART_Init+0x5c>)
 800030a:	2200      	movs	r2, #0
 800030c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800030e:	2300      	movs	r3, #0
 8000310:	2200      	movs	r2, #0
 8000312:	2100      	movs	r1, #0
 8000314:	4804      	ldr	r0, [pc, #16]	@ (8000328 <MX_USART1_UART_Init+0x5c>)
 8000316:	f004 f9ca 	bl	80046ae <HAL_RS485Ex_Init>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000320:	f000 f85c 	bl	80003dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8000324:	bf00      	nop
 8000326:	bd80      	pop	{r7, pc}
 8000328:	20000050 	.word	0x20000050
 800032c:	40013800 	.word	0x40013800

08000330 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000336:	4b10      	ldr	r3, [pc, #64]	@ (8000378 <MX_DMA_Init+0x48>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a0f      	ldr	r2, [pc, #60]	@ (8000378 <MX_DMA_Init+0x48>)
 800033c:	f043 0301 	orr.w	r3, r3, #1
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b0d      	ldr	r3, [pc, #52]	@ (8000378 <MX_DMA_Init+0x48>)
 8000344:	695b      	ldr	r3, [r3, #20]
 8000346:	f003 0301 	and.w	r3, r3, #1
 800034a:	607b      	str	r3, [r7, #4]
 800034c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800034e:	2200      	movs	r2, #0
 8000350:	2100      	movs	r1, #0
 8000352:	200e      	movs	r0, #14
 8000354:	f001 f9a3 	bl	800169e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000358:	200e      	movs	r0, #14
 800035a:	f001 f9bc 	bl	80016d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800035e:	2200      	movs	r2, #0
 8000360:	2100      	movs	r1, #0
 8000362:	200f      	movs	r0, #15
 8000364:	f001 f99b 	bl	800169e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000368:	200f      	movs	r0, #15
 800036a:	f001 f9b4 	bl	80016d6 <HAL_NVIC_EnableIRQ>
}
 800036e:	bf00      	nop
 8000370:	3708      	adds	r7, #8
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	40021000 	.word	0x40021000

0800037c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b086      	sub	sp, #24
 8000380:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	2200      	movs	r2, #0
 8000386:	601a      	str	r2, [r3, #0]
 8000388:	605a      	str	r2, [r3, #4]
 800038a:	609a      	str	r2, [r3, #8]
 800038c:	60da      	str	r2, [r3, #12]
 800038e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000390:	4b11      	ldr	r3, [pc, #68]	@ (80003d8 <MX_GPIO_Init+0x5c>)
 8000392:	695b      	ldr	r3, [r3, #20]
 8000394:	4a10      	ldr	r2, [pc, #64]	@ (80003d8 <MX_GPIO_Init+0x5c>)
 8000396:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800039a:	6153      	str	r3, [r2, #20]
 800039c:	4b0e      	ldr	r3, [pc, #56]	@ (80003d8 <MX_GPIO_Init+0x5c>)
 800039e:	695b      	ldr	r3, [r3, #20]
 80003a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003a4:	603b      	str	r3, [r7, #0]
 80003a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2110      	movs	r1, #16
 80003ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003b0:	f001 fd30 	bl	8001e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80003b4:	2310      	movs	r3, #16
 80003b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b8:	2301      	movs	r3, #1
 80003ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003bc:	2300      	movs	r3, #0
 80003be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c0:	2300      	movs	r3, #0
 80003c2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003c4:	1d3b      	adds	r3, r7, #4
 80003c6:	4619      	mov	r1, r3
 80003c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003cc:	f001 fbb0 	bl	8001b30 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80003d0:	bf00      	nop
 80003d2:	3718      	adds	r7, #24
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	40021000 	.word	0x40021000

080003dc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e0:	b672      	cpsid	i
}
 80003e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003e4:	bf00      	nop
 80003e6:	e7fd      	b.n	80003e4 <Error_Handler+0x8>

080003e8 <mbus_crc16>:
}

*/

uint16_t mbus_crc16(const uint16_t crc16, const uint8_t byte)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b085      	sub	sp, #20
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	4603      	mov	r3, r0
 80003f0:	460a      	mov	r2, r1
 80003f2:	80fb      	strh	r3, [r7, #6]
 80003f4:	4613      	mov	r3, r2
 80003f6:	717b      	strb	r3, [r7, #5]
    const int index = (crc16 & 0xFF) ^ byte;
 80003f8:	88fb      	ldrh	r3, [r7, #6]
 80003fa:	b2da      	uxtb	r2, r3
 80003fc:	797b      	ldrb	r3, [r7, #5]
 80003fe:	4053      	eors	r3, r2
 8000400:	60fb      	str	r3, [r7, #12]
    return (aucCRCLo[index] << 8) | ((crc16 >> 8) ^ aucCRCHi[index]);
 8000402:	4a0d      	ldr	r2, [pc, #52]	@ (8000438 <mbus_crc16+0x50>)
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	4413      	add	r3, r2
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	b21b      	sxth	r3, r3
 800040c:	021b      	lsls	r3, r3, #8
 800040e:	b21a      	sxth	r2, r3
 8000410:	88fb      	ldrh	r3, [r7, #6]
 8000412:	0a1b      	lsrs	r3, r3, #8
 8000414:	b29b      	uxth	r3, r3
 8000416:	4809      	ldr	r0, [pc, #36]	@ (800043c <mbus_crc16+0x54>)
 8000418:	68f9      	ldr	r1, [r7, #12]
 800041a:	4401      	add	r1, r0
 800041c:	7809      	ldrb	r1, [r1, #0]
 800041e:	404b      	eors	r3, r1
 8000420:	b29b      	uxth	r3, r3
 8000422:	b21b      	sxth	r3, r3
 8000424:	4313      	orrs	r3, r2
 8000426:	b21b      	sxth	r3, r3
 8000428:	b29b      	uxth	r3, r3
}
 800042a:	4618      	mov	r0, r3
 800042c:	3714      	adds	r7, #20
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	080049c4 	.word	0x080049c4
 800043c:	080048c4 	.word	0x080048c4

08000440 <mbus_tickcount>:

__attribute__((weak)) uint32_t mbus_tickcount() { return 0; }
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
 8000444:	2300      	movs	r3, #0
 8000446:	4618      	mov	r0, r3
 8000448:	46bd      	mov	sp, r7
 800044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044e:	4770      	bx	lr

08000450 <mbus_open>:
   * function mbus_open()
   * open new modbus context for new port
   * return: MODBUS_ERROR - if can't open context
   */
  mbus_t mbus_open(Modbus_Conf_t *pconf)
  {
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
    mbus_t context;
    for (context = 0; context < STMODBUS_COUNT_CONTEXT; context++)
 8000458:	2300      	movs	r3, #0
 800045a:	73fb      	strb	r3, [r7, #15]
 800045c:	e011      	b.n	8000482 <mbus_open+0x32>
    {
      if (g_mbusContext[context].open == 0)
 800045e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000462:	4924      	ldr	r1, [pc, #144]	@ (80004f4 <mbus_open+0xa4>)
 8000464:	4613      	mov	r3, r2
 8000466:	011b      	lsls	r3, r3, #4
 8000468:	4413      	add	r3, r2
 800046a:	009b      	lsls	r3, r3, #2
 800046c:	440b      	add	r3, r1
 800046e:	3328      	adds	r3, #40	@ 0x28
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b00      	cmp	r3, #0
 8000474:	d00a      	beq.n	800048c <mbus_open+0x3c>
    for (context = 0; context < STMODBUS_COUNT_CONTEXT; context++)
 8000476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800047a:	b2db      	uxtb	r3, r3
 800047c:	3301      	adds	r3, #1
 800047e:	b2db      	uxtb	r3, r3
 8000480:	73fb      	strb	r3, [r7, #15]
 8000482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000486:	2b00      	cmp	r3, #0
 8000488:	dde9      	ble.n	800045e <mbus_open+0xe>
 800048a:	e000      	b.n	800048e <mbus_open+0x3e>
      {
        break;
 800048c:	bf00      	nop
      }
    }
    if (context == STMODBUS_COUNT_CONTEXT)
 800048e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000492:	2b01      	cmp	r3, #1
 8000494:	d102      	bne.n	800049c <mbus_open+0x4c>
      return (mbus_t)MBUS_ERROR;
 8000496:	f04f 33ff 	mov.w	r3, #4294967295
 800049a:	e026      	b.n	80004ea <mbus_open+0x9a>
    // Clear context
    memset(&g_mbusContext[context], 0, sizeof(_stmodbus_context_t));
 800049c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80004a0:	4613      	mov	r3, r2
 80004a2:	011b      	lsls	r3, r3, #4
 80004a4:	4413      	add	r3, r2
 80004a6:	009b      	lsls	r3, r3, #2
 80004a8:	4a12      	ldr	r2, [pc, #72]	@ (80004f4 <mbus_open+0xa4>)
 80004aa:	4413      	add	r3, r2
 80004ac:	2244      	movs	r2, #68	@ 0x44
 80004ae:	2100      	movs	r1, #0
 80004b0:	4618      	mov	r0, r3
 80004b2:	f004 f9c1 	bl	8004838 <memset>
    // Copy config to context
    memcpy((void *)&g_mbusContext[context].conf, (void *)pconf,
 80004b6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80004ba:	4613      	mov	r3, r2
 80004bc:	011b      	lsls	r3, r3, #4
 80004be:	4413      	add	r3, r2
 80004c0:	009b      	lsls	r3, r3, #2
 80004c2:	4a0c      	ldr	r2, [pc, #48]	@ (80004f4 <mbus_open+0xa4>)
 80004c4:	4413      	add	r3, r2
 80004c6:	2228      	movs	r2, #40	@ 0x28
 80004c8:	6879      	ldr	r1, [r7, #4]
 80004ca:	4618      	mov	r0, r3
 80004cc:	f004 f9e0 	bl	8004890 <memcpy>
           sizeof(Modbus_Conf_t));

    g_mbusContext[context].open = 1;
 80004d0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80004d4:	4907      	ldr	r1, [pc, #28]	@ (80004f4 <mbus_open+0xa4>)
 80004d6:	4613      	mov	r3, r2
 80004d8:	011b      	lsls	r3, r3, #4
 80004da:	4413      	add	r3, r2
 80004dc:	009b      	lsls	r3, r3, #2
 80004de:	440b      	add	r3, r1
 80004e0:	3328      	adds	r3, #40	@ 0x28
 80004e2:	2201      	movs	r2, #1
 80004e4:	701a      	strb	r2, [r3, #0]
    return context;
 80004e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
  }
 80004ea:	4618      	mov	r0, r3
 80004ec:	3710      	adds	r7, #16
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	20000164 	.word	0x20000164

080004f8 <mbus_flush>:

  mbus_status_t mbus_flush(const mbus_t context)
  {
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	71fb      	strb	r3, [r7, #7]
    g_mbusContext[context].crc16 = 0xFFFF;
 8000502:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000506:	490e      	ldr	r1, [pc, #56]	@ (8000540 <mbus_flush+0x48>)
 8000508:	4613      	mov	r3, r2
 800050a:	011b      	lsls	r3, r3, #4
 800050c:	4413      	add	r3, r2
 800050e:	009b      	lsls	r3, r3, #2
 8000510:	440b      	add	r3, r1
 8000512:	332a      	adds	r3, #42	@ 0x2a
 8000514:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000518:	801a      	strh	r2, [r3, #0]
    g_mbusContext[context].state = MBUS_STATE_IDLE;
 800051a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800051e:	4908      	ldr	r1, [pc, #32]	@ (8000540 <mbus_flush+0x48>)
 8000520:	4613      	mov	r3, r2
 8000522:	011b      	lsls	r3, r3, #4
 8000524:	4413      	add	r3, r2
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	440b      	add	r3, r1
 800052a:	3329      	adds	r3, #41	@ 0x29
 800052c:	2200      	movs	r2, #0
 800052e:	701a      	strb	r2, [r3, #0]
    return MBUS_OK;
 8000530:	2300      	movs	r3, #0
  }
 8000532:	4618      	mov	r0, r3
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	20000164 	.word	0x20000164

08000544 <mbus_response>:

  mbus_status_t mbus_response(mbus_t mb_context, Modbus_ResponseType response)
  {
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	460a      	mov	r2, r1
 800054e:	71fb      	strb	r3, [r7, #7]
 8000550:	4613      	mov	r3, r2
 8000552:	71bb      	strb	r3, [r7, #6]

    if (response != MBUS_RESPONSE_OK)
 8000554:	79bb      	ldrb	r3, [r7, #6]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d008      	beq.n	800056c <mbus_response+0x28>
    {
      return mbus_send_error(mb_context, response);
 800055a:	79ba      	ldrb	r2, [r7, #6]
 800055c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000560:	4611      	mov	r1, r2
 8000562:	4618      	mov	r0, r3
 8000564:	f000 fb66 	bl	8000c34 <mbus_send_error>
 8000568:	4603      	mov	r3, r0
 800056a:	e001      	b.n	8000570 <mbus_response+0x2c>
    }
    else
    {
    }
    return MBUS_ERROR;
 800056c:	f04f 33ff 	mov.w	r3, #4294967295
  }
 8000570:	4618      	mov	r0, r3
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}

08000578 <mbus_poll_response>:
    g_userError = error;
    return 0;
  }

  inline mbus_status_t mbus_poll_response(mbus_t mb_context)
  {
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	@ 0x28
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
    stmbCallBackFunc func = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	617b      	str	r3, [r7, #20]
    _stmodbus_context_t *ctx = &g_mbusContext[mb_context];
 8000586:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800058a:	4613      	mov	r3, r2
 800058c:	011b      	lsls	r3, r3, #4
 800058e:	4413      	add	r3, r2
 8000590:	009b      	lsls	r3, r3, #2
 8000592:	4a9b      	ldr	r2, [pc, #620]	@ (8000800 <mbus_poll_response+0x288>)
 8000594:	4413      	add	r3, r2
 8000596:	613b      	str	r3, [r7, #16]
    int read = 1, la;
 8000598:	2301      	movs	r3, #1
 800059a:	60bb      	str	r3, [r7, #8]
    uint16_t d;

    if (ctx->header.func == 0x04)
 800059c:	693b      	ldr	r3, [r7, #16]
 800059e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80005a2:	2b04      	cmp	r3, #4
 80005a4:	d101      	bne.n	80005aa <mbus_poll_response+0x32>
    {
      la = 10;
 80005a6:	230a      	movs	r3, #10
 80005a8:	627b      	str	r3, [r7, #36]	@ 0x24
        func = ctx->func[i].func;
        break;
      }
    }
#endif
    switch (ctx->header.func)
 80005aa:	693b      	ldr	r3, [r7, #16]
 80005ac:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80005b0:	2b0f      	cmp	r3, #15
 80005b2:	d006      	beq.n	80005c2 <mbus_poll_response+0x4a>
 80005b4:	2b0f      	cmp	r3, #15
 80005b6:	dc4a      	bgt.n	800064e <mbus_poll_response+0xd6>
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d002      	beq.n	80005c2 <mbus_poll_response+0x4a>
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d023      	beq.n	8000608 <mbus_poll_response+0x90>
      {
        return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_ADDRESS);
      }
      break;
    default:
      break;
 80005c0:	e045      	b.n	800064e <mbus_poll_response+0xd6>
      if ((ctx->header.num == 0) || (ctx->header.num > 0x07D0))
 80005c2:	693b      	ldr	r3, [r7, #16]
 80005c4:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d004      	beq.n	80005d4 <mbus_poll_response+0x5c>
 80005ca:	693b      	ldr	r3, [r7, #16]
 80005cc:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80005ce:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80005d2:	d907      	bls.n	80005e4 <mbus_poll_response+0x6c>
        return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_VALUE);
 80005d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d8:	2103      	movs	r1, #3
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff ffb2 	bl	8000544 <mbus_response>
 80005e0:	4603      	mov	r3, r0
 80005e2:	e155      	b.n	8000890 <mbus_poll_response+0x318>
      if ((ctx->header.addr + ctx->header.num) >= ctx->conf.coils)
 80005e4:	693b      	ldr	r3, [r7, #16]
 80005e6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80005e8:	461a      	mov	r2, r3
 80005ea:	693b      	ldr	r3, [r7, #16]
 80005ec:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80005ee:	4413      	add	r3, r2
 80005f0:	693a      	ldr	r2, [r7, #16]
 80005f2:	8852      	ldrh	r2, [r2, #2]
 80005f4:	4293      	cmp	r3, r2
 80005f6:	db2c      	blt.n	8000652 <mbus_poll_response+0xda>
        return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_ADDRESS);
 80005f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fc:	2102      	movs	r1, #2
 80005fe:	4618      	mov	r0, r3
 8000600:	f7ff ffa0 	bl	8000544 <mbus_response>
 8000604:	4603      	mov	r3, r0
 8000606:	e143      	b.n	8000890 <mbus_poll_response+0x318>
      if ((ctx->header.num == 0) || (ctx->header.num > 0x07D0))
 8000608:	693b      	ldr	r3, [r7, #16]
 800060a:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800060c:	2b00      	cmp	r3, #0
 800060e:	d004      	beq.n	800061a <mbus_poll_response+0xa2>
 8000610:	693b      	ldr	r3, [r7, #16]
 8000612:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000614:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000618:	d907      	bls.n	800062a <mbus_poll_response+0xb2>
        return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_VALUE);
 800061a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061e:	2103      	movs	r1, #3
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff ff8f 	bl	8000544 <mbus_response>
 8000626:	4603      	mov	r3, r0
 8000628:	e132      	b.n	8000890 <mbus_poll_response+0x318>
      if ((ctx->header.addr + ctx->header.num) > ctx->conf.discrete)
 800062a:	693b      	ldr	r3, [r7, #16]
 800062c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800062e:	461a      	mov	r2, r3
 8000630:	693b      	ldr	r3, [r7, #16]
 8000632:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000634:	4413      	add	r3, r2
 8000636:	693a      	ldr	r2, [r7, #16]
 8000638:	8892      	ldrh	r2, [r2, #4]
 800063a:	4293      	cmp	r3, r2
 800063c:	dd0b      	ble.n	8000656 <mbus_poll_response+0xde>
        return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_ADDRESS);
 800063e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000642:	2102      	movs	r1, #2
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff ff7d 	bl	8000544 <mbus_response>
 800064a:	4603      	mov	r3, r0
 800064c:	e120      	b.n	8000890 <mbus_poll_response+0x318>
      break;
 800064e:	bf00      	nop
 8000650:	e002      	b.n	8000658 <mbus_poll_response+0xe0>
      break;
 8000652:	bf00      	nop
 8000654:	e000      	b.n	8000658 <mbus_poll_response+0xe0>
      break;
 8000656:	bf00      	nop
    }

    if (func != 0)
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d006      	beq.n	800066c <mbus_poll_response+0xf4>
    {
      return func(mb_context);
 800065e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	4610      	mov	r0, r2
 8000666:	4798      	blx	r3
 8000668:	4603      	mov	r3, r0
 800066a:	e111      	b.n	8000890 <mbus_poll_response+0x318>
    }

    la = mbus_proto_address((Modbus_ConnectFuncType)ctx->header.func, (int *)&read);
 800066c:	693b      	ldr	r3, [r7, #16]
 800066e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8000672:	f107 0208 	add.w	r2, r7, #8
 8000676:	4611      	mov	r1, r2
 8000678:	4618      	mov	r0, r3
 800067a:	f000 fb6d 	bl	8000d58 <mbus_proto_address>
 800067e:	6278      	str	r0, [r7, #36]	@ 0x24
    if (la > 0)
 8000680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000682:	2b00      	cmp	r3, #0
 8000684:	dd05      	ble.n	8000692 <mbus_poll_response+0x11a>
    {
      la += ctx->header.addr;
 8000686:	693b      	ldr	r3, [r7, #16]
 8000688:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800068a:	461a      	mov	r2, r3
 800068c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800068e:	4413      	add	r3, r2
 8000690:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    if (la < 50001)
 8000692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000694:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8000698:	4293      	cmp	r3, r2
 800069a:	f300 80f2 	bgt.w	8000882 <mbus_poll_response+0x30a>
    {
      ctx->conf.sendbuf[0] = ctx->header.devaddr;
 800069e:	693b      	ldr	r3, [r7, #16]
 80006a0:	699b      	ldr	r3, [r3, #24]
 80006a2:	693a      	ldr	r2, [r7, #16]
 80006a4:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 80006a8:	701a      	strb	r2, [r3, #0]
      ctx->conf.sendbuf[1] = ctx->header.func;
 80006aa:	693b      	ldr	r3, [r7, #16]
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	3301      	adds	r3, #1
 80006b0:	693a      	ldr	r2, [r7, #16]
 80006b2:	f892 2031 	ldrb.w	r2, [r2, #49]	@ 0x31
 80006b6:	701a      	strb	r2, [r3, #0]
      ctx->conf.sendbuf[2] = ctx->header.num * 2;
 80006b8:	693b      	ldr	r3, [r7, #16]
 80006ba:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	693b      	ldr	r3, [r7, #16]
 80006c0:	699b      	ldr	r3, [r3, #24]
 80006c2:	3302      	adds	r3, #2
 80006c4:	0052      	lsls	r2, r2, #1
 80006c6:	b2d2      	uxtb	r2, r2
 80006c8:	701a      	strb	r2, [r3, #0]
      if (read && ctx->conf.read)
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d04b      	beq.n	8000768 <mbus_poll_response+0x1f0>
 80006d0:	693b      	ldr	r3, [r7, #16]
 80006d2:	691b      	ldr	r3, [r3, #16]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d047      	beq.n	8000768 <mbus_poll_response+0x1f0>
      {
        g_userError = MBUS_RESPONSE_OK;
 80006d8:	4b4a      	ldr	r3, [pc, #296]	@ (8000804 <mbus_poll_response+0x28c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < ctx->header.num; i++)
 80006de:	2300      	movs	r3, #0
 80006e0:	623b      	str	r3, [r7, #32]
 80006e2:	e01f      	b.n	8000724 <mbus_poll_response+0x1ac>
        {

          d = ctx->conf.read(la + i);
 80006e4:	693b      	ldr	r3, [r7, #16]
 80006e6:	691b      	ldr	r3, [r3, #16]
 80006e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80006ea:	6a3a      	ldr	r2, [r7, #32]
 80006ec:	440a      	add	r2, r1
 80006ee:	4610      	mov	r0, r2
 80006f0:	4798      	blx	r3
 80006f2:	4603      	mov	r3, r0
 80006f4:	81fb      	strh	r3, [r7, #14]
          ctx->conf.sendbuf[3 + (i << 1)] = d >> 8;
 80006f6:	89fb      	ldrh	r3, [r7, #14]
 80006f8:	0a1b      	lsrs	r3, r3, #8
 80006fa:	b299      	uxth	r1, r3
 80006fc:	693b      	ldr	r3, [r7, #16]
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	6a3a      	ldr	r2, [r7, #32]
 8000702:	0052      	lsls	r2, r2, #1
 8000704:	3203      	adds	r2, #3
 8000706:	4413      	add	r3, r2
 8000708:	b2ca      	uxtb	r2, r1
 800070a:	701a      	strb	r2, [r3, #0]
          ctx->conf.sendbuf[3 + (i << 1) + 1] = d & 0xFF;
 800070c:	693b      	ldr	r3, [r7, #16]
 800070e:	699a      	ldr	r2, [r3, #24]
 8000710:	6a3b      	ldr	r3, [r7, #32]
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	3304      	adds	r3, #4
 8000716:	4413      	add	r3, r2
 8000718:	89fa      	ldrh	r2, [r7, #14]
 800071a:	b2d2      	uxtb	r2, r2
 800071c:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < ctx->header.num; i++)
 800071e:	6a3b      	ldr	r3, [r7, #32]
 8000720:	3301      	adds	r3, #1
 8000722:	623b      	str	r3, [r7, #32]
 8000724:	693b      	ldr	r3, [r7, #16]
 8000726:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000728:	461a      	mov	r2, r3
 800072a:	6a3b      	ldr	r3, [r7, #32]
 800072c:	4293      	cmp	r3, r2
 800072e:	dbd9      	blt.n	80006e4 <mbus_poll_response+0x16c>
        }
        if (g_userError == MBUS_RESPONSE_OK)
 8000730:	4b34      	ldr	r3, [pc, #208]	@ (8000804 <mbus_poll_response+0x28c>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d10d      	bne.n	8000754 <mbus_poll_response+0x1dc>
        {
          return mbus_send_data(mb_context, 3 + ctx->conf.sendbuf[2]);
 8000738:	693b      	ldr	r3, [r7, #16]
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	3302      	adds	r3, #2
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	3303      	adds	r3, #3
 8000742:	b29a      	uxth	r2, r3
 8000744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000748:	4611      	mov	r1, r2
 800074a:	4618      	mov	r0, r3
 800074c:	f000 fa9e 	bl	8000c8c <mbus_send_data>
 8000750:	4603      	mov	r3, r0
 8000752:	e09d      	b.n	8000890 <mbus_poll_response+0x318>
        }
        else
        {
          return mbus_response(mb_context, g_userError);
 8000754:	4b2b      	ldr	r3, [pc, #172]	@ (8000804 <mbus_poll_response+0x28c>)
 8000756:	781a      	ldrb	r2, [r3, #0]
 8000758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075c:	4611      	mov	r1, r2
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff fef0 	bl	8000544 <mbus_response>
 8000764:	4603      	mov	r3, r0
 8000766:	e093      	b.n	8000890 <mbus_poll_response+0x318>
        }
      }
      else if (ctx->conf.write)
 8000768:	693b      	ldr	r3, [r7, #16]
 800076a:	695b      	ldr	r3, [r3, #20]
 800076c:	2b00      	cmp	r3, #0
 800076e:	f000 8088 	beq.w	8000882 <mbus_poll_response+0x30a>
      {
        uint16_t *value;
        ctx->conf.sendbuf[2] = 0;
 8000772:	693b      	ldr	r3, [r7, #16]
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	3302      	adds	r3, #2
 8000778:	2200      	movs	r2, #0
 800077a:	701a      	strb	r2, [r3, #0]
        switch (ctx->header.func)
 800077c:	693b      	ldr	r3, [r7, #16]
 800077e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8000782:	2b06      	cmp	r3, #6
 8000784:	dc02      	bgt.n	800078c <mbus_poll_response+0x214>
 8000786:	2b05      	cmp	r3, #5
 8000788:	da03      	bge.n	8000792 <mbus_poll_response+0x21a>
 800078a:	e07a      	b.n	8000882 <mbus_poll_response+0x30a>
 800078c:	2b10      	cmp	r3, #16
 800078e:	d030      	beq.n	80007f2 <mbus_poll_response+0x27a>
 8000790:	e077      	b.n	8000882 <mbus_poll_response+0x30a>
        case MBUS_FUNC_WRITE_REG:
        case MBUS_FUNC_WRITE_COIL:
          // in both these cases, we should return the same packet that we
          // received. in both cases, the packes have 6 bytes of data + 2 CRC
          // bytes = 8 bytes
          value = (uint16_t *)ctx->conf.recvbuf;
 8000792:	693b      	ldr	r3, [r7, #16]
 8000794:	6a1b      	ldr	r3, [r3, #32]
 8000796:	61fb      	str	r3, [r7, #28]
          ctx->conf.write(la, *value);
 8000798:	693b      	ldr	r3, [r7, #16]
 800079a:	695b      	ldr	r3, [r3, #20]
 800079c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800079e:	69fa      	ldr	r2, [r7, #28]
 80007a0:	8812      	ldrh	r2, [r2, #0]
 80007a2:	4611      	mov	r1, r2
 80007a4:	4798      	blx	r3
          ctx->conf.sendbuf[2] = ctx->header.addr >> 8;
 80007a6:	693b      	ldr	r3, [r7, #16]
 80007a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80007aa:	0a1b      	lsrs	r3, r3, #8
 80007ac:	b29a      	uxth	r2, r3
 80007ae:	693b      	ldr	r3, [r7, #16]
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	3302      	adds	r3, #2
 80007b4:	b2d2      	uxtb	r2, r2
 80007b6:	701a      	strb	r2, [r3, #0]
          ctx->conf.sendbuf[3] = ctx->header.addr & 0xFF;
 80007b8:	693b      	ldr	r3, [r7, #16]
 80007ba:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80007bc:	693b      	ldr	r3, [r7, #16]
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	3303      	adds	r3, #3
 80007c2:	b2d2      	uxtb	r2, r2
 80007c4:	701a      	strb	r2, [r3, #0]
          ctx->conf.sendbuf[4] = ctx->conf.recvbuf[1];
 80007c6:	693b      	ldr	r3, [r7, #16]
 80007c8:	6a1a      	ldr	r2, [r3, #32]
 80007ca:	693b      	ldr	r3, [r7, #16]
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	3304      	adds	r3, #4
 80007d0:	7852      	ldrb	r2, [r2, #1]
 80007d2:	701a      	strb	r2, [r3, #0]
          ctx->conf.sendbuf[5] = ctx->conf.recvbuf[0];
 80007d4:	693b      	ldr	r3, [r7, #16]
 80007d6:	6a1a      	ldr	r2, [r3, #32]
 80007d8:	693b      	ldr	r3, [r7, #16]
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	3305      	adds	r3, #5
 80007de:	7812      	ldrb	r2, [r2, #0]
 80007e0:	701a      	strb	r2, [r3, #0]
          return mbus_send_data(mb_context, 6);
 80007e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e6:	2106      	movs	r1, #6
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 fa4f 	bl	8000c8c <mbus_send_data>
 80007ee:	4603      	mov	r3, r0
 80007f0:	e04e      	b.n	8000890 <mbus_poll_response+0x318>

        case MBUS_FUNC_WRITE_REGS:
          value = (uint16_t *)ctx->conf.recvbuf;
 80007f2:	693b      	ldr	r3, [r7, #16]
 80007f4:	6a1b      	ldr	r3, [r3, #32]
 80007f6:	61fb      	str	r3, [r7, #28]
          for (int i = 0; i < ctx->header.num; i++)
 80007f8:	2300      	movs	r3, #0
 80007fa:	61bb      	str	r3, [r7, #24]
 80007fc:	e013      	b.n	8000826 <mbus_poll_response+0x2ae>
 80007fe:	bf00      	nop
 8000800:	20000164 	.word	0x20000164
 8000804:	200001a8 	.word	0x200001a8
          {
            ctx->conf.write(la + i, *value++);
 8000808:	693b      	ldr	r3, [r7, #16]
 800080a:	695a      	ldr	r2, [r3, #20]
 800080c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800080e:	69bb      	ldr	r3, [r7, #24]
 8000810:	440b      	add	r3, r1
 8000812:	4618      	mov	r0, r3
 8000814:	69fb      	ldr	r3, [r7, #28]
 8000816:	1c99      	adds	r1, r3, #2
 8000818:	61f9      	str	r1, [r7, #28]
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	4619      	mov	r1, r3
 800081e:	4790      	blx	r2
          for (int i = 0; i < ctx->header.num; i++)
 8000820:	69bb      	ldr	r3, [r7, #24]
 8000822:	3301      	adds	r3, #1
 8000824:	61bb      	str	r3, [r7, #24]
 8000826:	693b      	ldr	r3, [r7, #16]
 8000828:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800082a:	461a      	mov	r2, r3
 800082c:	69bb      	ldr	r3, [r7, #24]
 800082e:	4293      	cmp	r3, r2
 8000830:	dbea      	blt.n	8000808 <mbus_poll_response+0x290>
          }
          ctx->conf.sendbuf[2] = ctx->header.addr >> 8;
 8000832:	693b      	ldr	r3, [r7, #16]
 8000834:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000836:	0a1b      	lsrs	r3, r3, #8
 8000838:	b29a      	uxth	r2, r3
 800083a:	693b      	ldr	r3, [r7, #16]
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	3302      	adds	r3, #2
 8000840:	b2d2      	uxtb	r2, r2
 8000842:	701a      	strb	r2, [r3, #0]
          ctx->conf.sendbuf[3] = ctx->header.addr & 0xFF;
 8000844:	693b      	ldr	r3, [r7, #16]
 8000846:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	3303      	adds	r3, #3
 800084e:	b2d2      	uxtb	r2, r2
 8000850:	701a      	strb	r2, [r3, #0]
          ctx->conf.sendbuf[4] = ctx->header.num >> 8;
 8000852:	693b      	ldr	r3, [r7, #16]
 8000854:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000856:	0a1b      	lsrs	r3, r3, #8
 8000858:	b29a      	uxth	r2, r3
 800085a:	693b      	ldr	r3, [r7, #16]
 800085c:	699b      	ldr	r3, [r3, #24]
 800085e:	3304      	adds	r3, #4
 8000860:	b2d2      	uxtb	r2, r2
 8000862:	701a      	strb	r2, [r3, #0]
          ctx->conf.sendbuf[5] = ctx->header.num & 0xFF;
 8000864:	693b      	ldr	r3, [r7, #16]
 8000866:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8000868:	693b      	ldr	r3, [r7, #16]
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	3305      	adds	r3, #5
 800086e:	b2d2      	uxtb	r2, r2
 8000870:	701a      	strb	r2, [r3, #0]
          return mbus_send_data(mb_context, 6);
 8000872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000876:	2106      	movs	r1, #6
 8000878:	4618      	mov	r0, r3
 800087a:	f000 fa07 	bl	8000c8c <mbus_send_data>
 800087e:	4603      	mov	r3, r0
 8000880:	e006      	b.n	8000890 <mbus_poll_response+0x318>
        } // end of switch
      }
    }
    return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_FUNCTION);
 8000882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000886:	2101      	movs	r1, #1
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fe5b 	bl	8000544 <mbus_response>
 800088e:	4603      	mov	r3, r0
  }
 8000890:	4618      	mov	r0, r3
 8000892:	3728      	adds	r7, #40	@ 0x28
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <mbus_poll>:
   * function mbus_close()
   * close modbus context
   * return: none
   */
  mbus_status_t mbus_poll(mbus_t mb_context, uint8_t byte)
  {
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	460a      	mov	r2, r1
 80008a2:	71fb      	strb	r3, [r7, #7]
 80008a4:	4613      	mov	r3, r2
 80008a6:	71bb      	strb	r3, [r7, #6]
    // State machine
    _stmodbus_context_t *ctx = &g_mbusContext[mb_context];
 80008a8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80008ac:	4613      	mov	r3, r2
 80008ae:	011b      	lsls	r3, r3, #4
 80008b0:	4413      	add	r3, r2
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	4ab1      	ldr	r2, [pc, #708]	@ (8000b7c <mbus_poll+0x2e4>)
 80008b6:	4413      	add	r3, r2
 80008b8:	60fb      	str	r3, [r7, #12]

    if (mbus_tickcount() - ctx->timer > 4)
 80008ba:	f7ff fdc1 	bl	8000440 <mbus_tickcount>
 80008be:	4602      	mov	r2, r0
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	2b04      	cmp	r3, #4
 80008c8:	d904      	bls.n	80008d4 <mbus_poll+0x3c>
    {
      mbus_flush(mb_context);
 80008ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff fe12 	bl	80004f8 <mbus_flush>
    }
    ctx->timer = mbus_tickcount();
 80008d4:	f7ff fdb4 	bl	8000440 <mbus_tickcount>
 80008d8:	4602      	mov	r2, r0
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    switch (ctx->state)
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80008e4:	2b0e      	cmp	r3, #14
 80008e6:	f200 8153 	bhi.w	8000b90 <mbus_poll+0x2f8>
 80008ea:	a201      	add	r2, pc, #4	@ (adr r2, 80008f0 <mbus_poll+0x58>)
 80008ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f0:	0800092d 	.word	0x0800092d
 80008f4:	08000b91 	.word	0x08000b91
 80008f8:	08000949 	.word	0x08000949
 80008fc:	08000a1d 	.word	0x08000a1d
 8000900:	08000a07 	.word	0x08000a07
 8000904:	08000b23 	.word	0x08000b23
 8000908:	08000b0d 	.word	0x08000b0d
 800090c:	08000a75 	.word	0x08000a75
 8000910:	08000a51 	.word	0x08000a51
 8000914:	08000ab5 	.word	0x08000ab5
 8000918:	08000acf 	.word	0x08000acf
 800091c:	08000b71 	.word	0x08000b71
 8000920:	08000b81 	.word	0x08000b81
 8000924:	08000b91 	.word	0x08000b91
 8000928:	08000b8b 	.word	0x08000b8b
    {
    case MBUS_STATE_IDLE:
      mbus_flush(mb_context);
 800092c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff fde1 	bl	80004f8 <mbus_flush>
      ctx->state = MBUS_STATE_FUNCTION;
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	2202      	movs	r2, #2
 800093a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      ctx->header.devaddr = byte;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	79ba      	ldrb	r2, [r7, #6]
 8000942:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      break;
 8000946:	e12c      	b.n	8000ba2 <mbus_poll+0x30a>
    case MBUS_STATE_FUNCTION:
      ctx->header.func = byte;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	79ba      	ldrb	r2, [r7, #6]
 800094c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      switch (byte)
 8000950:	79bb      	ldrb	r3, [r7, #6]
 8000952:	3b01      	subs	r3, #1
 8000954:	2b0f      	cmp	r3, #15
 8000956:	d84f      	bhi.n	80009f8 <mbus_poll+0x160>
 8000958:	a201      	add	r2, pc, #4	@ (adr r2, 8000960 <mbus_poll+0xc8>)
 800095a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800095e:	bf00      	nop
 8000960:	080009cd 	.word	0x080009cd
 8000964:	080009f9 	.word	0x080009f9
 8000968:	080009cd 	.word	0x080009cd
 800096c:	080009cd 	.word	0x080009cd
 8000970:	080009e3 	.word	0x080009e3
 8000974:	080009a1 	.word	0x080009a1
 8000978:	080009f9 	.word	0x080009f9
 800097c:	080009f9 	.word	0x080009f9
 8000980:	080009f9 	.word	0x080009f9
 8000984:	080009f9 	.word	0x080009f9
 8000988:	080009f9 	.word	0x080009f9
 800098c:	080009f9 	.word	0x080009f9
 8000990:	080009f9 	.word	0x080009f9
 8000994:	080009f9 	.word	0x080009f9
 8000998:	080009b7 	.word	0x080009b7
 800099c:	080009b7 	.word	0x080009b7
      {
      case MBUS_FUNC_WRITE_REG:
        ctx->header.rnum = 1;
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	2201      	movs	r2, #1
 80009a4:	86da      	strh	r2, [r3, #54]	@ 0x36
        ctx->header.num = 1;
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	2201      	movs	r2, #1
 80009aa:	869a      	strh	r2, [r3, #52]	@ 0x34
        ctx->state = MBUS_STATE_REGADDR_HI;
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	2204      	movs	r2, #4
 80009b0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        break;
 80009b4:	e026      	b.n	8000a04 <mbus_poll+0x16c>
      case MBUS_FUNC_WRITE_REGS:
      case MBUS_FUNC_WRITE_COILS:
        ctx->header.rnum = 1;
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	2201      	movs	r2, #1
 80009ba:	86da      	strh	r2, [r3, #54]	@ 0x36
        ctx->header.num = 0;
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	2200      	movs	r2, #0
 80009c0:	869a      	strh	r2, [r3, #52]	@ 0x34
        ctx->state = MBUS_STATE_REGADDR_HI;
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	2204      	movs	r2, #4
 80009c6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        break;
 80009ca:	e01b      	b.n	8000a04 <mbus_poll+0x16c>
      case MBUS_FUNC_READ_INPUT_REGS:
      case MBUS_FUNC_READ_COILS:
      case MBUS_FUNC_READ_REGS:
        ctx->state = MBUS_STATE_REGADDR_HI;
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	2204      	movs	r2, #4
 80009d0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        ctx->header.rnum = 0;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	2200      	movs	r2, #0
 80009d8:	86da      	strh	r2, [r3, #54]	@ 0x36
        ctx->header.num = 0;
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	2200      	movs	r2, #0
 80009de:	869a      	strh	r2, [r3, #52]	@ 0x34
        break;
 80009e0:	e010      	b.n	8000a04 <mbus_poll+0x16c>
      case MBUS_FUNC_WRITE_COIL:
        ctx->header.rnum = 1;
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	2201      	movs	r2, #1
 80009e6:	86da      	strh	r2, [r3, #54]	@ 0x36
        ctx->header.num = 1;
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	2201      	movs	r2, #1
 80009ec:	869a      	strh	r2, [r3, #52]	@ 0x34
        ctx->state = MBUS_STATE_REGADDR_HI;
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	2204      	movs	r2, #4
 80009f2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        break;
 80009f6:	e005      	b.n	8000a04 <mbus_poll+0x16c>
      default:
        // ctx->state = MBUS_STATE_IDLE;
        mbus_flush(mb_context);
 80009f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff fd7b 	bl	80004f8 <mbus_flush>
        break;
 8000a02:	bf00      	nop
      }
      break;
 8000a04:	e0cd      	b.n	8000ba2 <mbus_poll+0x30a>
    case MBUS_STATE_REGADDR_HI:
      ctx->state = MBUS_STATE_REGADDR_LO;
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	2203      	movs	r2, #3
 8000a0a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      ctx->header.addr = byte << 8;
 8000a0e:	79bb      	ldrb	r3, [r7, #6]
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	021b      	lsls	r3, r3, #8
 8000a14:	b29a      	uxth	r2, r3
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	865a      	strh	r2, [r3, #50]	@ 0x32
      break;
 8000a1a:	e0c2      	b.n	8000ba2 <mbus_poll+0x30a>
    case MBUS_STATE_REGADDR_LO:
      ctx->header.addr |= byte;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8000a20:	79bb      	ldrb	r3, [r7, #6]
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	4313      	orrs	r3, r2
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	865a      	strh	r2, [r3, #50]	@ 0x32
      if (ctx->header.num == 1 && ctx->header.rnum == 1)
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d108      	bne.n	8000a46 <mbus_poll+0x1ae>
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d104      	bne.n	8000a46 <mbus_poll+0x1ae>
      {
        ctx->state = MBUS_STATE_DATA_HI;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	2208      	movs	r2, #8
 8000a40:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      }
      else
      {
        ctx->state = MBUS_STATE_REGNUM_HI;
      }
      break;
 8000a44:	e0ad      	b.n	8000ba2 <mbus_poll+0x30a>
        ctx->state = MBUS_STATE_REGNUM_HI;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	2206      	movs	r2, #6
 8000a4a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      break;
 8000a4e:	e0a8      	b.n	8000ba2 <mbus_poll+0x30a>
    case MBUS_STATE_DATA_HI:
      ctx->state = MBUS_STATE_DATA_LO;
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	2207      	movs	r2, #7
 8000a54:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      ctx->conf.recvbuf[2 * (ctx->header.num - ctx->header.rnum) + 1] = byte;
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	6a1a      	ldr	r2, [r3, #32]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000a60:	4619      	mov	r1, r3
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000a66:	1acb      	subs	r3, r1, r3
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	4413      	add	r3, r2
 8000a6e:	79ba      	ldrb	r2, [r7, #6]
 8000a70:	701a      	strb	r2, [r3, #0]
      break;
 8000a72:	e096      	b.n	8000ba2 <mbus_poll+0x30a>
    case MBUS_STATE_DATA_LO:
      ctx->conf.recvbuf[2 * (ctx->header.num - ctx->header.rnum)] = byte;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	6a1b      	ldr	r3, [r3, #32]
 8000a78:	68fa      	ldr	r2, [r7, #12]
 8000a7a:	8e92      	ldrh	r2, [r2, #52]	@ 0x34
 8000a7c:	4611      	mov	r1, r2
 8000a7e:	68fa      	ldr	r2, [r7, #12]
 8000a80:	8ed2      	ldrh	r2, [r2, #54]	@ 0x36
 8000a82:	1a8a      	subs	r2, r1, r2
 8000a84:	0052      	lsls	r2, r2, #1
 8000a86:	4413      	add	r3, r2
 8000a88:	79ba      	ldrb	r2, [r7, #6]
 8000a8a:	701a      	strb	r2, [r3, #0]
      ctx->header.rnum--;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000a90:	3b01      	subs	r3, #1
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	86da      	strh	r2, [r3, #54]	@ 0x36
      if (ctx->header.rnum == 0)
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d104      	bne.n	8000aaa <mbus_poll+0x212>
      {
        ctx->state = MBUS_STATE_CRC_LO;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	220b      	movs	r2, #11
 8000aa4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      }
      else
      {
        ctx->state = MBUS_STATE_DATA_HI;
      }
      break;
 8000aa8:	e07b      	b.n	8000ba2 <mbus_poll+0x30a>
        ctx->state = MBUS_STATE_DATA_HI;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	2208      	movs	r2, #8
 8000aae:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      break;
 8000ab2:	e076      	b.n	8000ba2 <mbus_poll+0x30a>
    case MBUS_STATE_DATA_SIZE:
      ctx->state = MBUS_STATE_DATA;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	220a      	movs	r2, #10
 8000ab8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      ctx->header.size = byte;
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	79ba      	ldrb	r2, [r7, #6]
 8000ac0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
      ctx->header.rsize = byte;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	79ba      	ldrb	r2, [r7, #6]
 8000ac8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
      break;
 8000acc:	e069      	b.n	8000ba2 <mbus_poll+0x30a>
    case MBUS_STATE_DATA:
      ctx->conf.recvbuf[ctx->header.size - ctx->header.rsize] = byte;
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	6a1b      	ldr	r3, [r3, #32]
 8000ad2:	68fa      	ldr	r2, [r7, #12]
 8000ad4:	f892 2038 	ldrb.w	r2, [r2, #56]	@ 0x38
 8000ad8:	4611      	mov	r1, r2
 8000ada:	68fa      	ldr	r2, [r7, #12]
 8000adc:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 8000ae0:	1a8a      	subs	r2, r1, r2
 8000ae2:	4413      	add	r3, r2
 8000ae4:	79ba      	ldrb	r2, [r7, #6]
 8000ae6:	701a      	strb	r2, [r3, #0]
      ctx->header.rsize--;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8000aee:	3b01      	subs	r3, #1
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
      if (ctx->header.rsize == 0)
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d14c      	bne.n	8000b9c <mbus_poll+0x304>
      {
        ctx->state = MBUS_STATE_CRC_LO;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	220b      	movs	r2, #11
 8000b06:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      }
      break;
 8000b0a:	e047      	b.n	8000b9c <mbus_poll+0x304>
    case MBUS_STATE_REGNUM_HI:
      ctx->state = MBUS_STATE_REGNUM_LO;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	2205      	movs	r2, #5
 8000b10:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      ctx->header.num = byte << 8;
 8000b14:	79bb      	ldrb	r3, [r7, #6]
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	021b      	lsls	r3, r3, #8
 8000b1a:	b29a      	uxth	r2, r3
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	869a      	strh	r2, [r3, #52]	@ 0x34
      break;
 8000b20:	e03f      	b.n	8000ba2 <mbus_poll+0x30a>
    case MBUS_STATE_REGNUM_LO:
      ctx->state = MBUS_STATE_CRC_LO;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	220b      	movs	r2, #11
 8000b26:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      ctx->header.num |= byte;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8000b2e:	79bb      	ldrb	r3, [r7, #6]
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	4313      	orrs	r3, r2
 8000b34:	b29a      	uxth	r2, r3
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	869a      	strh	r2, [r3, #52]	@ 0x34
      if (ctx->header.rnum == 0)
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d104      	bne.n	8000b4c <mbus_poll+0x2b4>
      {
        ctx->state = MBUS_STATE_CRC_LO;
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	220b      	movs	r2, #11
 8000b46:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        {
          ctx->state = MBUS_STATE_DATA_SIZE;
        }
      }

      break;
 8000b4a:	e029      	b.n	8000ba0 <mbus_poll+0x308>
        ctx->header.rnum = ctx->header.num;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	86da      	strh	r2, [r3, #54]	@ 0x36
        ctx->state = MBUS_STATE_DATA_HI;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	2208      	movs	r2, #8
 8000b58:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        if (ctx->header.func == MBUS_FUNC_WRITE_REGS)
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8000b62:	2b10      	cmp	r3, #16
 8000b64:	d11c      	bne.n	8000ba0 <mbus_poll+0x308>
          ctx->state = MBUS_STATE_DATA_SIZE;
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	2209      	movs	r2, #9
 8000b6a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      break;
 8000b6e:	e017      	b.n	8000ba0 <mbus_poll+0x308>
    case MBUS_STATE_CRC_LO:
      ctx->state = MBUS_STATE_CRC_HI;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	220c      	movs	r2, #12
 8000b74:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      break;
 8000b78:	e013      	b.n	8000ba2 <mbus_poll+0x30a>
 8000b7a:	bf00      	nop
 8000b7c:	20000164 	.word	0x20000164
    case MBUS_STATE_CRC_HI:
      ctx->state = MBUS_STATE_FINISH;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	220d      	movs	r2, #13
 8000b84:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      break;
 8000b88:	e00b      	b.n	8000ba2 <mbus_poll+0x30a>
    // We can't processing any more before callback not returned
    case MBUS_STATE_RESPONSE:
      return MBUS_ERROR;
 8000b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8e:	e04c      	b.n	8000c2a <mbus_poll+0x392>
    default:
      mbus_flush(mb_context);
 8000b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fcaf 	bl	80004f8 <mbus_flush>
      break;
 8000b9a:	e002      	b.n	8000ba2 <mbus_poll+0x30a>
      break;
 8000b9c:	bf00      	nop
 8000b9e:	e000      	b.n	8000ba2 <mbus_poll+0x30a>
      break;
 8000ba0:	bf00      	nop
    }

    ctx->crc16 = mbus_crc16(ctx->crc16, byte);
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000ba6:	79ba      	ldrb	r2, [r7, #6]
 8000ba8:	4611      	mov	r1, r2
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fc1c 	bl	80003e8 <mbus_crc16>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (ctx->state == MBUS_STATE_FINISH)
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8000bbe:	2b0d      	cmp	r3, #13
 8000bc0:	d132      	bne.n	8000c28 <mbus_poll+0x390>
    {
      // CRC error
      if (ctx->crc16 != 0)
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d007      	beq.n	8000bda <mbus_poll+0x342>
      {
        mbus_flush(mb_context);
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fc92 	bl	80004f8 <mbus_flush>
        return MBUS_ERROR;
 8000bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd8:	e027      	b.n	8000c2a <mbus_poll+0x392>
      }

      // TODO: Add broadcast messages
      if (ctx->header.devaddr == ctx->conf.devaddr)
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d11a      	bne.n	8000c1e <mbus_poll+0x386>
      {
        ctx->state = MBUS_STATE_RESPONSE;
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	220e      	movs	r2, #14
 8000bec:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        if (mbus_poll_response(mb_context) == MBUS_OK)
 8000bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff fcbf 	bl	8000578 <mbus_poll_response>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d106      	bne.n	8000c0e <mbus_poll+0x376>
        {
          mbus_flush(mb_context);
 8000c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff fc77 	bl	80004f8 <mbus_flush>
          return MBUS_OK;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e00d      	b.n	8000c2a <mbus_poll+0x392>
        }
        mbus_flush(mb_context);
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fc70 	bl	80004f8 <mbus_flush>
        return MBUS_ERROR;
 8000c18:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1c:	e005      	b.n	8000c2a <mbus_poll+0x392>
      }
      mbus_flush(mb_context);
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fc68 	bl	80004f8 <mbus_flush>
    }
    return MBUS_OK;
 8000c28:	2300      	movs	r3, #0
  }
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop

08000c34 <mbus_send_error>:
      return (mbus_context_t)&g_mbusContext[mb_context];
    return 0;
  }

  mbus_status_t mbus_send_error(mbus_t mb_context, Modbus_ResponseType response)
  {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	460a      	mov	r2, r1
 8000c3e:	71fb      	strb	r3, [r7, #7]
 8000c40:	4613      	mov	r3, r2
 8000c42:	71bb      	strb	r3, [r7, #6]
    uint16_t *pbuf = (uint16_t *)(g_mbusContext[mb_context].conf.sendbuf + 2);
 8000c44:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000c48:	490e      	ldr	r1, [pc, #56]	@ (8000c84 <mbus_send_error+0x50>)
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	011b      	lsls	r3, r3, #4
 8000c4e:	4413      	add	r3, r2
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	440b      	add	r3, r1
 8000c54:	3318      	adds	r3, #24
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	3302      	adds	r3, #2
 8000c5a:	60fb      	str	r3, [r7, #12]
    *pbuf = 0x8300 | (uint8_t)response;
 8000c5c:	79bb      	ldrb	r3, [r7, #6]
 8000c5e:	b21a      	sxth	r2, r3
 8000c60:	4b09      	ldr	r3, [pc, #36]	@ (8000c88 <mbus_send_error+0x54>)
 8000c62:	4313      	orrs	r3, r2
 8000c64:	b21b      	sxth	r3, r3
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	801a      	strh	r2, [r3, #0]
    return mbus_send_data(mb_context, 4);
 8000c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c70:	2104      	movs	r1, #4
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 f80a 	bl	8000c8c <mbus_send_data>
 8000c78:	4603      	mov	r3, r0
  }
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000164 	.word	0x20000164
 8000c88:	ffff8300 	.word	0xffff8300

08000c8c <mbus_send_data>:

  mbus_status_t mbus_send_data(mbus_t mb_context, uint16_t size)
  {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	460a      	mov	r2, r1
 8000c96:	71fb      	strb	r3, [r7, #7]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	80bb      	strh	r3, [r7, #4]
    // if size > ( conf.send_sz-2) error
    uint16_t crc32 = 0xFFFF;
 8000c9c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ca0:	82fb      	strh	r3, [r7, #22]
    const _stmodbus_context_t *ctx = &g_mbusContext[mb_context];
 8000ca2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	011b      	lsls	r3, r3, #4
 8000caa:	4413      	add	r3, r2
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	4a29      	ldr	r2, [pc, #164]	@ (8000d54 <mbus_send_data+0xc8>)
 8000cb0:	4413      	add	r3, r2
 8000cb2:	60fb      	str	r3, [r7, #12]
    uint8_t *pbuf = ctx->conf.sendbuf;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	60bb      	str	r3, [r7, #8]
    if (ctx->conf.send == 0 || pbuf == 0 || ctx->conf.sendbuf_sz < (size + 2))
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	68db      	ldr	r3, [r3, #12]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d008      	beq.n	8000cd4 <mbus_send_data+0x48>
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d005      	beq.n	8000cd4 <mbus_send_data+0x48>
 8000cc8:	88bb      	ldrh	r3, [r7, #4]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	68fa      	ldr	r2, [r7, #12]
 8000cce:	8b92      	ldrh	r2, [r2, #28]
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	db02      	blt.n	8000cda <mbus_send_data+0x4e>
      return MBUS_ERROR;
 8000cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd8:	e037      	b.n	8000d4a <mbus_send_data+0xbe>
    for (int i = 0; i < size; i++)
 8000cda:	2300      	movs	r3, #0
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	e00d      	b.n	8000cfc <mbus_send_data+0x70>
    {
      crc32 = mbus_crc16(crc32, pbuf[i]);
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	68ba      	ldr	r2, [r7, #8]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	781a      	ldrb	r2, [r3, #0]
 8000ce8:	8afb      	ldrh	r3, [r7, #22]
 8000cea:	4611      	mov	r1, r2
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fb7b 	bl	80003e8 <mbus_crc16>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	82fb      	strh	r3, [r7, #22]
    for (int i = 0; i < size; i++)
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	88bb      	ldrh	r3, [r7, #4]
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	dbed      	blt.n	8000ce0 <mbus_send_data+0x54>
    }
    pbuf[size++] = crc32 & 0xFF;
 8000d04:	88bb      	ldrh	r3, [r7, #4]
 8000d06:	1c5a      	adds	r2, r3, #1
 8000d08:	80ba      	strh	r2, [r7, #4]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	4413      	add	r3, r2
 8000d10:	8afa      	ldrh	r2, [r7, #22]
 8000d12:	b2d2      	uxtb	r2, r2
 8000d14:	701a      	strb	r2, [r3, #0]
    pbuf[size++] = (crc32 >> 8);
 8000d16:	8afb      	ldrh	r3, [r7, #22]
 8000d18:	0a1b      	lsrs	r3, r3, #8
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	88bb      	ldrh	r3, [r7, #4]
 8000d1e:	1c59      	adds	r1, r3, #1
 8000d20:	80b9      	strh	r1, [r7, #4]
 8000d22:	4619      	mov	r1, r3
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	440b      	add	r3, r1
 8000d28:	b2d2      	uxtb	r2, r2
 8000d2a:	701a      	strb	r2, [r3, #0]

    if (ctx->conf.send(mb_context, pbuf, size) != size)
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	88ba      	ldrh	r2, [r7, #4]
 8000d32:	f997 0007 	ldrsb.w	r0, [r7, #7]
 8000d36:	68b9      	ldr	r1, [r7, #8]
 8000d38:	4798      	blx	r3
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	88bb      	ldrh	r3, [r7, #4]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d002      	beq.n	8000d48 <mbus_send_data+0xbc>
      return MBUS_ERROR;
 8000d42:	f04f 33ff 	mov.w	r3, #4294967295
 8000d46:	e000      	b.n	8000d4a <mbus_send_data+0xbe>
    return MBUS_OK;
 8000d48:	2300      	movs	r3, #0
  }
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3718      	adds	r7, #24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000164 	.word	0x20000164

08000d58 <mbus_proto_address>:
#endif
    return MBUS_ERROR;
  }

  int mbus_proto_address(Modbus_ConnectFuncType func, int *r)
  {
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	6039      	str	r1, [r7, #0]
 8000d62:	71fb      	strb	r3, [r7, #7]
    int adr = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]
    *r = 1;
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	601a      	str	r2, [r3, #0]
    switch (func)
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	2b17      	cmp	r3, #23
 8000d72:	dc3f      	bgt.n	8000df4 <mbus_proto_address+0x9c>
 8000d74:	2b04      	cmp	r3, #4
 8000d76:	da08      	bge.n	8000d8a <mbus_proto_address+0x32>
 8000d78:	2b03      	cmp	r3, #3
 8000d7a:	d029      	beq.n	8000dd0 <mbus_proto_address+0x78>
 8000d7c:	2b03      	cmp	r3, #3
 8000d7e:	dc39      	bgt.n	8000df4 <mbus_proto_address+0x9c>
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d034      	beq.n	8000dee <mbus_proto_address+0x96>
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	d02b      	beq.n	8000de0 <mbus_proto_address+0x88>
      *r = 0;
    case MBUS_FUNC_READ_COILS:
      adr = 0001;
      break;
    default:
      break;
 8000d88:	e034      	b.n	8000df4 <mbus_proto_address+0x9c>
    switch (func)
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	4093      	lsls	r3, r2
 8000d90:	4a1c      	ldr	r2, [pc, #112]	@ (8000e04 <mbus_proto_address+0xac>)
 8000d92:	401a      	ands	r2, r3
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	bf14      	ite	ne
 8000d98:	2201      	movne	r2, #1
 8000d9a:	2200      	moveq	r2, #0
 8000d9c:	b2d2      	uxtb	r2, r2
 8000d9e:	2a00      	cmp	r2, #0
 8000da0:	d113      	bne.n	8000dca <mbus_proto_address+0x72>
 8000da2:	f248 0220 	movw	r2, #32800	@ 0x8020
 8000da6:	401a      	ands	r2, r3
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	bf14      	ite	ne
 8000dac:	2201      	movne	r2, #1
 8000dae:	2200      	moveq	r2, #0
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	d118      	bne.n	8000de8 <mbus_proto_address+0x90>
 8000db6:	f003 0310 	and.w	r3, r3, #16
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	bf14      	ite	ne
 8000dbe:	2301      	movne	r3, #1
 8000dc0:	2300      	moveq	r3, #0
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d107      	bne.n	8000dd8 <mbus_proto_address+0x80>
      break;
 8000dc8:	e014      	b.n	8000df4 <mbus_proto_address+0x9c>
      *r = 0;
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
      adr = 40001;
 8000dd0:	f649 4341 	movw	r3, #40001	@ 0x9c41
 8000dd4:	60fb      	str	r3, [r7, #12]
      break;
 8000dd6:	e00e      	b.n	8000df6 <mbus_proto_address+0x9e>
      adr = 30001;
 8000dd8:	f247 5331 	movw	r3, #30001	@ 0x7531
 8000ddc:	60fb      	str	r3, [r7, #12]
      break;
 8000dde:	e00a      	b.n	8000df6 <mbus_proto_address+0x9e>
      adr = 10001;
 8000de0:	f242 7311 	movw	r3, #10001	@ 0x2711
 8000de4:	60fb      	str	r3, [r7, #12]
      break;
 8000de6:	e006      	b.n	8000df6 <mbus_proto_address+0x9e>
      *r = 0;
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
      adr = 0001;
 8000dee:	2301      	movs	r3, #1
 8000df0:	60fb      	str	r3, [r7, #12]
      break;
 8000df2:	e000      	b.n	8000df6 <mbus_proto_address+0x9e>
      break;
 8000df4:	bf00      	nop
    }
    return adr;
 8000df6:	68fb      	ldr	r3, [r7, #12]
  }
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	00c10040 	.word	0x00c10040

08000e08 <Modbus_Device_Read>:
 * @brief  Modbus device read callback
 * @param  logical_address: Modbus logical address (40001, 40002, etc.)
 * @retval Register value
 */
uint16_t Modbus_Device_Read(uint32_t logical_address)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
    // Simple direct array access like the sample code
    if (logical_address >= 40001 && logical_address <= 40020)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d911      	bls.n	8000e3e <Modbus_Device_Read+0x36>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	f649 4254 	movw	r2, #40020	@ 0x9c54
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d80c      	bhi.n	8000e3e <Modbus_Device_Read+0x36>
    {
        uint16_t index = logical_address - 40001;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	f503 43c7 	add.w	r3, r3, #25472	@ 0x6380
 8000e2c:	333f      	adds	r3, #63	@ 0x3f
 8000e2e:	81fb      	strh	r3, [r7, #14]
        uint16_t value = device_registers[index];
 8000e30:	89fb      	ldrh	r3, [r7, #14]
 8000e32:	4a06      	ldr	r2, [pc, #24]	@ (8000e4c <Modbus_Device_Read+0x44>)
 8000e34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e38:	81bb      	strh	r3, [r7, #12]

        // Debug: Show what we're returning for ALL registers
        // printf("READ: addr=%lu, index=%d, returning %d (0x%04X)\n", logical_address, index, value, value); // Removed to prevent timeouts

        return value;
 8000e3a:	89bb      	ldrh	r3, [r7, #12]
 8000e3c:	e000      	b.n	8000e40 <Modbus_Device_Read+0x38>
    }

    return 0; // Invalid address
 8000e3e:	2300      	movs	r3, #0
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	20000000 	.word	0x20000000

08000e50 <Modbus_Device_Write>:
 * @param  logical_address: Modbus logical address (40001, 40002, etc.)
 * @param  value: Value to write
 * @retval Written value
 */
uint16_t Modbus_Device_Write(uint32_t logical_address, uint16_t value)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	807b      	strh	r3, [r7, #2]
    // Convert logical address to array index
    if (logical_address >= 40001 && logical_address <= 40020)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d926      	bls.n	8000eb4 <Modbus_Device_Write+0x64>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f649 4254 	movw	r2, #40020	@ 0x9c54
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d821      	bhi.n	8000eb4 <Modbus_Device_Write+0x64>
    {
        uint16_t index = logical_address - 40001;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	f503 43c7 	add.w	r3, r3, #25472	@ 0x6380
 8000e78:	333f      	adds	r3, #63	@ 0x3f
 8000e7a:	81fb      	strh	r3, [r7, #14]

        // Handle special write operations
        switch (logical_address)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f5a3 431c 	sub.w	r3, r3, #39936	@ 0x9c00
 8000e82:	3b4f      	subs	r3, #79	@ 0x4f
 8000e84:	2b04      	cmp	r3, #4
 8000e86:	d80d      	bhi.n	8000ea4 <Modbus_Device_Write+0x54>
 8000e88:	a201      	add	r2, pc, #4	@ (adr r2, 8000e90 <Modbus_Device_Write+0x40>)
 8000e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e8e:	bf00      	nop
 8000e90:	08000ea5 	.word	0x08000ea5
 8000e94:	08000ea5 	.word	0x08000ea5
 8000e98:	08000ea5 	.word	0x08000ea5
 8000e9c:	08000ea5 	.word	0x08000ea5
 8000ea0:	08000ea5 	.word	0x08000ea5
            // Handle test operations
            break;

        default:
            // Store value for other registers
            break;
 8000ea4:	bf00      	nop
        }

        // Store the value
        device_registers[index] = value;
 8000ea6:	89fb      	ldrh	r3, [r7, #14]
 8000ea8:	4906      	ldr	r1, [pc, #24]	@ (8000ec4 <Modbus_Device_Write+0x74>)
 8000eaa:	887a      	ldrh	r2, [r7, #2]
 8000eac:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        return value;
 8000eb0:	887b      	ldrh	r3, [r7, #2]
 8000eb2:	e000      	b.n	8000eb6 <Modbus_Device_Write+0x66>
    }

    return 0; // Invalid address
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	20000000 	.word	0x20000000

08000ec8 <Modbus_Device_UpdateSensors>:
 * @brief  Update sensor values (call this periodically)
 * @param  None
 * @retval None
 */
void Modbus_Device_UpdateSensors(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
    // device_registers[0] = Read_Sensor1_Value();  // 40001
    // device_registers[1] = Read_Sensor2_Value();  // 40002
    // device_registers[4] = Read_Temperature();    // 40005
    // device_registers[5] = Read_Humidity();       // 40006
    // etc.
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
	...

08000ed8 <Modbus_Init>:
 * @brief  Initialize Modbus RTU slave
 * @param  None
 * @retval None
 */
void Modbus_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
    // printf("Initializing Modbus...\n"); // Removed to prevent timing delays

    // Configure Modbus
    modbus_config.devaddr = 0x01; // Slave address
 8000edc:	4b3a      	ldr	r3, [pc, #232]	@ (8000fc8 <Modbus_Init+0xf0>)
 8000ede:	2201      	movs	r2, #1
 8000ee0:	701a      	strb	r2, [r3, #0]
    modbus_config.coils = 0;      // No internal coil handling
 8000ee2:	4b39      	ldr	r3, [pc, #228]	@ (8000fc8 <Modbus_Init+0xf0>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	805a      	strh	r2, [r3, #2]
    modbus_config.discrete = 0;   // No internal discrete handling
 8000ee8:	4b37      	ldr	r3, [pc, #220]	@ (8000fc8 <Modbus_Init+0xf0>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	809a      	strh	r2, [r3, #4]
    modbus_config.device = NULL;  // No device pointer needed
 8000eee:	4b36      	ldr	r3, [pc, #216]	@ (8000fc8 <Modbus_Init+0xf0>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
    modbus_config.send = Modbus_SendData;
 8000ef4:	4b34      	ldr	r3, [pc, #208]	@ (8000fc8 <Modbus_Init+0xf0>)
 8000ef6:	4a35      	ldr	r2, [pc, #212]	@ (8000fcc <Modbus_Init+0xf4>)
 8000ef8:	60da      	str	r2, [r3, #12]
    modbus_config.read = Modbus_Device_Read;
 8000efa:	4b33      	ldr	r3, [pc, #204]	@ (8000fc8 <Modbus_Init+0xf0>)
 8000efc:	4a34      	ldr	r2, [pc, #208]	@ (8000fd0 <Modbus_Init+0xf8>)
 8000efe:	611a      	str	r2, [r3, #16]
    modbus_config.write = Modbus_Device_Write;
 8000f00:	4b31      	ldr	r3, [pc, #196]	@ (8000fc8 <Modbus_Init+0xf0>)
 8000f02:	4a34      	ldr	r2, [pc, #208]	@ (8000fd4 <Modbus_Init+0xfc>)
 8000f04:	615a      	str	r2, [r3, #20]
    modbus_config.sendbuf = modbus_tx_buffer;
 8000f06:	4b30      	ldr	r3, [pc, #192]	@ (8000fc8 <Modbus_Init+0xf0>)
 8000f08:	4a33      	ldr	r2, [pc, #204]	@ (8000fd8 <Modbus_Init+0x100>)
 8000f0a:	619a      	str	r2, [r3, #24]
    modbus_config.sendbuf_sz = sizeof(modbus_tx_buffer);
 8000f0c:	4b2e      	ldr	r3, [pc, #184]	@ (8000fc8 <Modbus_Init+0xf0>)
 8000f0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f12:	839a      	strh	r2, [r3, #28]
    modbus_config.recvbuf = modbus_rx_buffer;
 8000f14:	4b2c      	ldr	r3, [pc, #176]	@ (8000fc8 <Modbus_Init+0xf0>)
 8000f16:	4a31      	ldr	r2, [pc, #196]	@ (8000fdc <Modbus_Init+0x104>)
 8000f18:	621a      	str	r2, [r3, #32]
    modbus_config.recvbuf_sz = sizeof(modbus_rx_buffer);
 8000f1a:	4b2b      	ldr	r3, [pc, #172]	@ (8000fc8 <Modbus_Init+0xf0>)
 8000f1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f20:	849a      	strh	r2, [r3, #36]	@ 0x24

    // printf("Modbus config: addr=0x%02X, buffers=%d/%d bytes\n",
    //        modbus_config.devaddr, modbus_config.sendbuf_sz, modbus_config.recvbuf_sz); // Removed

    // Initialize Modbus context
    modbus_context = mbus_open(&modbus_config);
 8000f22:	4829      	ldr	r0, [pc, #164]	@ (8000fc8 <Modbus_Init+0xf0>)
 8000f24:	f7ff fa94 	bl	8000450 <mbus_open>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	4b2c      	ldr	r3, [pc, #176]	@ (8000fe0 <Modbus_Init+0x108>)
 8000f2e:	701a      	strb	r2, [r3, #0]
    // printf("Modbus context opened: %d\n", modbus_context); // Removed

    // Set register values AFTER mbus_open (like sample code does)
    device_registers[0] = 20;  // 40001
 8000f30:	4b2c      	ldr	r3, [pc, #176]	@ (8000fe4 <Modbus_Init+0x10c>)
 8000f32:	2214      	movs	r2, #20
 8000f34:	801a      	strh	r2, [r3, #0]
    device_registers[1] = 19;  // 40002
 8000f36:	4b2b      	ldr	r3, [pc, #172]	@ (8000fe4 <Modbus_Init+0x10c>)
 8000f38:	2213      	movs	r2, #19
 8000f3a:	805a      	strh	r2, [r3, #2]
    device_registers[2] = 18;  // 40003
 8000f3c:	4b29      	ldr	r3, [pc, #164]	@ (8000fe4 <Modbus_Init+0x10c>)
 8000f3e:	2212      	movs	r2, #18
 8000f40:	809a      	strh	r2, [r3, #4]
    device_registers[3] = 17;  // 40004
 8000f42:	4b28      	ldr	r3, [pc, #160]	@ (8000fe4 <Modbus_Init+0x10c>)
 8000f44:	2211      	movs	r2, #17
 8000f46:	80da      	strh	r2, [r3, #6]
    device_registers[4] = 16;  // 40005
 8000f48:	4b26      	ldr	r3, [pc, #152]	@ (8000fe4 <Modbus_Init+0x10c>)
 8000f4a:	2210      	movs	r2, #16
 8000f4c:	811a      	strh	r2, [r3, #8]
    device_registers[5] = 15;  // 40006
 8000f4e:	4b25      	ldr	r3, [pc, #148]	@ (8000fe4 <Modbus_Init+0x10c>)
 8000f50:	220f      	movs	r2, #15
 8000f52:	815a      	strh	r2, [r3, #10]
    device_registers[6] = 14;  // 40007
 8000f54:	4b23      	ldr	r3, [pc, #140]	@ (8000fe4 <Modbus_Init+0x10c>)
 8000f56:	220e      	movs	r2, #14
 8000f58:	819a      	strh	r2, [r3, #12]
    device_registers[7] = 13;  // 40008
 8000f5a:	4b22      	ldr	r3, [pc, #136]	@ (8000fe4 <Modbus_Init+0x10c>)
 8000f5c:	220d      	movs	r2, #13
 8000f5e:	81da      	strh	r2, [r3, #14]
    device_registers[8] = 12;  // 40009
 8000f60:	4b20      	ldr	r3, [pc, #128]	@ (8000fe4 <Modbus_Init+0x10c>)
 8000f62:	220c      	movs	r2, #12
 8000f64:	821a      	strh	r2, [r3, #16]
    device_registers[9] = 11;  // 40010
 8000f66:	4b1f      	ldr	r3, [pc, #124]	@ (8000fe4 <Modbus_Init+0x10c>)
 8000f68:	220b      	movs	r2, #11
 8000f6a:	825a      	strh	r2, [r3, #18]
    device_registers[10] = 10; // 40011
 8000f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe4 <Modbus_Init+0x10c>)
 8000f6e:	220a      	movs	r2, #10
 8000f70:	829a      	strh	r2, [r3, #20]
    device_registers[11] = 9;  // 40012
 8000f72:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe4 <Modbus_Init+0x10c>)
 8000f74:	2209      	movs	r2, #9
 8000f76:	82da      	strh	r2, [r3, #22]
    device_registers[12] = 8;  // 40013
 8000f78:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe4 <Modbus_Init+0x10c>)
 8000f7a:	2208      	movs	r2, #8
 8000f7c:	831a      	strh	r2, [r3, #24]
    device_registers[13] = 7;  // 40014
 8000f7e:	4b19      	ldr	r3, [pc, #100]	@ (8000fe4 <Modbus_Init+0x10c>)
 8000f80:	2207      	movs	r2, #7
 8000f82:	835a      	strh	r2, [r3, #26]
    device_registers[14] = 6;  // 40015
 8000f84:	4b17      	ldr	r3, [pc, #92]	@ (8000fe4 <Modbus_Init+0x10c>)
 8000f86:	2206      	movs	r2, #6
 8000f88:	839a      	strh	r2, [r3, #28]
    device_registers[15] = 5;  // 40016
 8000f8a:	4b16      	ldr	r3, [pc, #88]	@ (8000fe4 <Modbus_Init+0x10c>)
 8000f8c:	2205      	movs	r2, #5
 8000f8e:	83da      	strh	r2, [r3, #30]
    device_registers[16] = 4;  // 40017
 8000f90:	4b14      	ldr	r3, [pc, #80]	@ (8000fe4 <Modbus_Init+0x10c>)
 8000f92:	2204      	movs	r2, #4
 8000f94:	841a      	strh	r2, [r3, #32]
    device_registers[17] = 3;  // 40018
 8000f96:	4b13      	ldr	r3, [pc, #76]	@ (8000fe4 <Modbus_Init+0x10c>)
 8000f98:	2203      	movs	r2, #3
 8000f9a:	845a      	strh	r2, [r3, #34]	@ 0x22
    device_registers[18] = 2;  // 40019
 8000f9c:	4b11      	ldr	r3, [pc, #68]	@ (8000fe4 <Modbus_Init+0x10c>)
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	849a      	strh	r2, [r3, #36]	@ 0x24
    device_registers[19] = 1;  // 40020
 8000fa2:	4b10      	ldr	r3, [pc, #64]	@ (8000fe4 <Modbus_Init+0x10c>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	84da      	strh	r2, [r3, #38]	@ 0x26
    //     printf("Reg[%d] = %d\n", i, device_registers[i]);
    // }
    // printf("Registers initialized. Ready for ModbusPoll connection.\n"); // Removed to prevent timeouts

    // Start UART DMA reception
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, modbus_rx_buffer, sizeof(modbus_rx_buffer));
 8000fa8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fac:	490b      	ldr	r1, [pc, #44]	@ (8000fdc <Modbus_Init+0x104>)
 8000fae:	480e      	ldr	r0, [pc, #56]	@ (8000fe8 <Modbus_Init+0x110>)
 8000fb0:	f003 fbee 	bl	8004790 <HAL_UARTEx_ReceiveToIdle_DMA>
    // printf("DMA reception started: %d\n", dma_status); // Removed

    // Enable UART idle line interrupt for Modbus frame detection
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe8 <Modbus_Init+0x110>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe8 <Modbus_Init+0x110>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f042 0210 	orr.w	r2, r2, #16
 8000fc2:	601a      	str	r2, [r3, #0]
    // printf("UART idle interrupt enabled\n"); // Removed
}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	200001ac 	.word	0x200001ac
 8000fcc:	08000ffd 	.word	0x08000ffd
 8000fd0:	08000e09 	.word	0x08000e09
 8000fd4:	08000e51 	.word	0x08000e51
 8000fd8:	200002d4 	.word	0x200002d4
 8000fdc:	200001d4 	.word	0x200001d4
 8000fe0:	200001a9 	.word	0x200001a9
 8000fe4:	20000000 	.word	0x20000000
 8000fe8:	20000050 	.word	0x20000050

08000fec <Modbus_Process>:
 * @brief  Process Modbus communication
 * @param  None
 * @retval None
 */
void Modbus_Process(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
    // This function can be called in main loop if needed
    // Currently, processing is handled in UART callback
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
	...

08000ffc <Modbus_SendData>:
 * @param  data: Data to send
 * @param  size: Size of data
 * @retval Number of bytes sent
 */
static int Modbus_SendData(const mbus_t context, const uint8_t *data, const uint16_t size)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	6039      	str	r1, [r7, #0]
 8001006:	71fb      	strb	r3, [r7, #7]
 8001008:	4613      	mov	r3, r2
 800100a:	80bb      	strh	r3, [r7, #4]
    // {
    //     printf("0x%02X ", data[i]);
    // }
    // printf("\n");

    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, (uint8_t *)data, size, 1000);
 800100c:	88ba      	ldrh	r2, [r7, #4]
 800100e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001012:	6839      	ldr	r1, [r7, #0]
 8001014:	4807      	ldr	r0, [pc, #28]	@ (8001034 <Modbus_SendData+0x38>)
 8001016:	f002 fa73 	bl	8003500 <HAL_UART_Transmit>
 800101a:	4603      	mov	r3, r0
 800101c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800101e:	7bfb      	ldrb	r3, [r7, #15]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d101      	bne.n	8001028 <Modbus_SendData+0x2c>
    {
        // printf("TX Success\n"); // Removed to prevent timing delays
        return size;
 8001024:	88bb      	ldrh	r3, [r7, #4]
 8001026:	e000      	b.n	800102a <Modbus_SendData+0x2e>
    }
    else
    {
        // printf("TX Failed: %d\n", status); // Removed to prevent timing delays
        return 0;
 8001028:	2300      	movs	r3, #0
    }
}
 800102a:	4618      	mov	r0, r3
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000050 	.word	0x20000050

08001038 <Modbus_GetContext>:
 * @brief  Get Modbus context (for external access)
 * @param  None
 * @retval Modbus context
 */
mbus_t Modbus_GetContext(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
    return modbus_context;
 800103c:	4b03      	ldr	r3, [pc, #12]	@ (800104c <Modbus_GetContext+0x14>)
 800103e:	f993 3000 	ldrsb.w	r3, [r3]
 8001042:	4618      	mov	r0, r3
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	200001a9 	.word	0x200001a9

08001050 <Modbus_Test_Init>:
 * @brief  Initialize Modbus test functions
 * @param  None
 * @retval None
 */
void Modbus_Test_Init(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
    // Set initial test values - DISABLED to preserve sequential test data (1-20)
    // Modbus_Device_SetRegister(0, 0x1234);  // 40001: Test sensor 1
    // Modbus_Device_SetRegister(1, 0x5678);  // 40002: Test sensor 2
    // Modbus_Device_SetRegister(9, 0x0001);  // 40010: Status (bit 0 = ready)
    // Modbus_Device_SetRegister(11, 0x0100); // 40012: Firmware version 1.0
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <Modbus_Test_Update>:
 * @brief  Update test values periodically
 * @param  None
 * @retval None
 */
void Modbus_Test_Update(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
    test_counter++;
 8001064:	4b04      	ldr	r3, [pc, #16]	@ (8001078 <Modbus_Test_Update+0x18>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	3301      	adds	r3, #1
 800106a:	4a03      	ldr	r2, [pc, #12]	@ (8001078 <Modbus_Test_Update+0x18>)
 800106c:	6013      	str	r3, [r2, #0]
    // Simulate temperature reading (25.00°C = 9472) - Commented out to preserve test data
    // Modbus_Device_SetRegister(4, 205); // 40005

    // Simulate humidity reading (65.00% = 25856) - Commented out to preserve test data
    // Modbus_Device_SetRegister(5, 652); // 40006
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	200003d4 	.word	0x200003d4

0800107c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001082:	4b0f      	ldr	r3, [pc, #60]	@ (80010c0 <HAL_MspInit+0x44>)
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	4a0e      	ldr	r2, [pc, #56]	@ (80010c0 <HAL_MspInit+0x44>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6193      	str	r3, [r2, #24]
 800108e:	4b0c      	ldr	r3, [pc, #48]	@ (80010c0 <HAL_MspInit+0x44>)
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109a:	4b09      	ldr	r3, [pc, #36]	@ (80010c0 <HAL_MspInit+0x44>)
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	4a08      	ldr	r2, [pc, #32]	@ (80010c0 <HAL_MspInit+0x44>)
 80010a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010a4:	61d3      	str	r3, [r2, #28]
 80010a6:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <HAL_MspInit+0x44>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ae:	603b      	str	r3, [r7, #0]
 80010b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	40021000 	.word	0x40021000

080010c4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	@ 0x28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a42      	ldr	r2, [pc, #264]	@ (80011ec <HAL_UART_MspInit+0x128>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d17d      	bne.n	80011e2 <HAL_UART_MspInit+0x11e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010e6:	4b42      	ldr	r3, [pc, #264]	@ (80011f0 <HAL_UART_MspInit+0x12c>)
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	4a41      	ldr	r2, [pc, #260]	@ (80011f0 <HAL_UART_MspInit+0x12c>)
 80010ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010f0:	6193      	str	r3, [r2, #24]
 80010f2:	4b3f      	ldr	r3, [pc, #252]	@ (80011f0 <HAL_UART_MspInit+0x12c>)
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fe:	4b3c      	ldr	r3, [pc, #240]	@ (80011f0 <HAL_UART_MspInit+0x12c>)
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	4a3b      	ldr	r2, [pc, #236]	@ (80011f0 <HAL_UART_MspInit+0x12c>)
 8001104:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001108:	6153      	str	r3, [r2, #20]
 800110a:	4b39      	ldr	r3, [pc, #228]	@ (80011f0 <HAL_UART_MspInit+0x12c>)
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA12     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8001116:	f44f 53b0 	mov.w	r3, #5632	@ 0x1600
 800111a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001124:	2303      	movs	r3, #3
 8001126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001128:	2307      	movs	r3, #7
 800112a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001136:	f000 fcfb 	bl	8001b30 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800113a:	4b2e      	ldr	r3, [pc, #184]	@ (80011f4 <HAL_UART_MspInit+0x130>)
 800113c:	4a2e      	ldr	r2, [pc, #184]	@ (80011f8 <HAL_UART_MspInit+0x134>)
 800113e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001140:	4b2c      	ldr	r3, [pc, #176]	@ (80011f4 <HAL_UART_MspInit+0x130>)
 8001142:	2200      	movs	r2, #0
 8001144:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001146:	4b2b      	ldr	r3, [pc, #172]	@ (80011f4 <HAL_UART_MspInit+0x130>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800114c:	4b29      	ldr	r3, [pc, #164]	@ (80011f4 <HAL_UART_MspInit+0x130>)
 800114e:	2280      	movs	r2, #128	@ 0x80
 8001150:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001152:	4b28      	ldr	r3, [pc, #160]	@ (80011f4 <HAL_UART_MspInit+0x130>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001158:	4b26      	ldr	r3, [pc, #152]	@ (80011f4 <HAL_UART_MspInit+0x130>)
 800115a:	2200      	movs	r2, #0
 800115c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800115e:	4b25      	ldr	r3, [pc, #148]	@ (80011f4 <HAL_UART_MspInit+0x130>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001164:	4b23      	ldr	r3, [pc, #140]	@ (80011f4 <HAL_UART_MspInit+0x130>)
 8001166:	2200      	movs	r2, #0
 8001168:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800116a:	4822      	ldr	r0, [pc, #136]	@ (80011f4 <HAL_UART_MspInit+0x130>)
 800116c:	f000 facd 	bl	800170a <HAL_DMA_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8001176:	f7ff f931 	bl	80003dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a1d      	ldr	r2, [pc, #116]	@ (80011f4 <HAL_UART_MspInit+0x130>)
 800117e:	675a      	str	r2, [r3, #116]	@ 0x74
 8001180:	4a1c      	ldr	r2, [pc, #112]	@ (80011f4 <HAL_UART_MspInit+0x130>)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001186:	4b1d      	ldr	r3, [pc, #116]	@ (80011fc <HAL_UART_MspInit+0x138>)
 8001188:	4a1d      	ldr	r2, [pc, #116]	@ (8001200 <HAL_UART_MspInit+0x13c>)
 800118a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800118c:	4b1b      	ldr	r3, [pc, #108]	@ (80011fc <HAL_UART_MspInit+0x138>)
 800118e:	2210      	movs	r2, #16
 8001190:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001192:	4b1a      	ldr	r3, [pc, #104]	@ (80011fc <HAL_UART_MspInit+0x138>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001198:	4b18      	ldr	r3, [pc, #96]	@ (80011fc <HAL_UART_MspInit+0x138>)
 800119a:	2280      	movs	r2, #128	@ 0x80
 800119c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800119e:	4b17      	ldr	r3, [pc, #92]	@ (80011fc <HAL_UART_MspInit+0x138>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011a4:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <HAL_UART_MspInit+0x138>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80011aa:	4b14      	ldr	r3, [pc, #80]	@ (80011fc <HAL_UART_MspInit+0x138>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011b0:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <HAL_UART_MspInit+0x138>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80011b6:	4811      	ldr	r0, [pc, #68]	@ (80011fc <HAL_UART_MspInit+0x138>)
 80011b8:	f000 faa7 	bl	800170a <HAL_DMA_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 80011c2:	f7ff f90b 	bl	80003dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a0c      	ldr	r2, [pc, #48]	@ (80011fc <HAL_UART_MspInit+0x138>)
 80011ca:	671a      	str	r2, [r3, #112]	@ 0x70
 80011cc:	4a0b      	ldr	r2, [pc, #44]	@ (80011fc <HAL_UART_MspInit+0x138>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2100      	movs	r1, #0
 80011d6:	2025      	movs	r0, #37	@ 0x25
 80011d8:	f000 fa61 	bl	800169e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011dc:	2025      	movs	r0, #37	@ 0x25
 80011de:	f000 fa7a 	bl	80016d6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80011e2:	bf00      	nop
 80011e4:	3728      	adds	r7, #40	@ 0x28
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40013800 	.word	0x40013800
 80011f0:	40021000 	.word	0x40021000
 80011f4:	200000d8 	.word	0x200000d8
 80011f8:	40020058 	.word	0x40020058
 80011fc:	2000011c 	.word	0x2000011c
 8001200:	40020044 	.word	0x40020044

08001204 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001208:	bf00      	nop
 800120a:	e7fd      	b.n	8001208 <NMI_Handler+0x4>

0800120c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <HardFault_Handler+0x4>

08001214 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001218:	bf00      	nop
 800121a:	e7fd      	b.n	8001218 <MemManage_Handler+0x4>

0800121c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <BusFault_Handler+0x4>

08001224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <UsageFault_Handler+0x4>

0800122c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800125a:	f000 f901 	bl	8001460 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001268:	4802      	ldr	r0, [pc, #8]	@ (8001274 <DMA1_Channel4_IRQHandler+0x10>)
 800126a:	f000 fb70 	bl	800194e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	2000011c 	.word	0x2000011c

08001278 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800127c:	4802      	ldr	r0, [pc, #8]	@ (8001288 <DMA1_Channel5_IRQHandler+0x10>)
 800127e:	f000 fb66 	bl	800194e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200000d8 	.word	0x200000d8

0800128c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001290:	4802      	ldr	r0, [pc, #8]	@ (800129c <USART1_IRQHandler+0x10>)
 8001292:	f002 f9bf 	bl	8003614 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000050 	.word	0x20000050

080012a0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012a4:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <SystemInit+0x20>)
 80012a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012aa:	4a05      	ldr	r2, [pc, #20]	@ (80012c0 <SystemInit+0x20>)
 80012ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <UART_Callbacks_Init>:
 * @brief  Initialize UART callbacks
 * @param  None
 * @retval None
 */
void UART_Callbacks_Init(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
    // UART callbacks are handled by HAL, this function can be used
    // for any additional initialization if needed
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
	...

080012d4 <HAL_UARTEx_RxEventCallback>:
 * @param  huart: UART handle
 * @param  Size: Number of bytes received
 * @retval None
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	807b      	strh	r3, [r7, #2]
    if (huart == &huart1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a14      	ldr	r2, [pc, #80]	@ (8001334 <HAL_UARTEx_RxEventCallback+0x60>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d120      	bne.n	800132a <HAL_UARTEx_RxEventCallback+0x56>
        // HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4); // Commented out to eliminate timing delays

        // printf("UART RX: Received %d bytes\n", Size); // Commented out to prevent timeouts

        // Get Modbus context
        mbus_t modbus_ctx = Modbus_GetContext();
 80012e8:	f7ff fea6 	bl	8001038 <Modbus_GetContext>
 80012ec:	4603      	mov	r3, r0
 80012ee:	737b      	strb	r3, [r7, #13]

        // Process received Modbus data byte by byte
        for (uint16_t i = 0; i < Size; i++)
 80012f0:	2300      	movs	r3, #0
 80012f2:	81fb      	strh	r3, [r7, #14]
 80012f4:	e00b      	b.n	800130e <HAL_UARTEx_RxEventCallback+0x3a>
        {
            // printf("Byte %d: 0x%02X\n", i, modbus_rx_buffer[i]); // Commented out to prevent timeouts
            mbus_poll(modbus_ctx, modbus_rx_buffer[i]);
 80012f6:	89fb      	ldrh	r3, [r7, #14]
 80012f8:	4a0f      	ldr	r2, [pc, #60]	@ (8001338 <HAL_UARTEx_RxEventCallback+0x64>)
 80012fa:	5cd2      	ldrb	r2, [r2, r3]
 80012fc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001300:	4611      	mov	r1, r2
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fac8 	bl	8000898 <mbus_poll>
        for (uint16_t i = 0; i < Size; i++)
 8001308:	89fb      	ldrh	r3, [r7, #14]
 800130a:	3301      	adds	r3, #1
 800130c:	81fb      	strh	r3, [r7, #14]
 800130e:	89fa      	ldrh	r2, [r7, #14]
 8001310:	887b      	ldrh	r3, [r7, #2]
 8001312:	429a      	cmp	r2, r3
 8001314:	d3ef      	bcc.n	80012f6 <HAL_UARTEx_RxEventCallback+0x22>
        }

        // Clear the UART idle flag
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2210      	movs	r2, #16
 800131c:	621a      	str	r2, [r3, #32]

        // Restart DMA reception for next frame
        HAL_UARTEx_ReceiveToIdle_DMA(&huart1, modbus_rx_buffer, sizeof(modbus_rx_buffer));
 800131e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001322:	4905      	ldr	r1, [pc, #20]	@ (8001338 <HAL_UARTEx_RxEventCallback+0x64>)
 8001324:	4803      	ldr	r0, [pc, #12]	@ (8001334 <HAL_UARTEx_RxEventCallback+0x60>)
 8001326:	f003 fa33 	bl	8004790 <HAL_UARTEx_ReceiveToIdle_DMA>
    }
}
 800132a:	bf00      	nop
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000050 	.word	0x20000050
 8001338:	200001d4 	.word	0x200001d4

0800133c <HAL_UART_ErrorCallback>:
 * @brief  UART error callback
 * @param  huart: UART handle
 * @retval None
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
    if (huart == &huart1)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a0c      	ldr	r2, [pc, #48]	@ (8001378 <HAL_UART_ErrorCallback+0x3c>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d111      	bne.n	8001370 <HAL_UART_ErrorCallback+0x34>
    {
        // Handle UART errors
        __HAL_UART_CLEAR_OREFLAG(huart);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2208      	movs	r2, #8
 8001352:	621a      	str	r2, [r3, #32]
        __HAL_UART_CLEAR_NEFLAG(huart);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2204      	movs	r2, #4
 800135a:	621a      	str	r2, [r3, #32]
        __HAL_UART_CLEAR_FEFLAG(huart);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2202      	movs	r2, #2
 8001362:	621a      	str	r2, [r3, #32]

        // Restart DMA reception
        HAL_UARTEx_ReceiveToIdle_DMA(&huart1, modbus_rx_buffer, sizeof(modbus_rx_buffer));
 8001364:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001368:	4904      	ldr	r1, [pc, #16]	@ (800137c <HAL_UART_ErrorCallback+0x40>)
 800136a:	4803      	ldr	r0, [pc, #12]	@ (8001378 <HAL_UART_ErrorCallback+0x3c>)
 800136c:	f003 fa10 	bl	8004790 <HAL_UARTEx_ReceiveToIdle_DMA>
    }
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000050 	.word	0x20000050
 800137c:	200001d4 	.word	0x200001d4

08001380 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001380:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013b8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001384:	f7ff ff8c 	bl	80012a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001388:	480c      	ldr	r0, [pc, #48]	@ (80013bc <LoopForever+0x6>)
  ldr r1, =_edata
 800138a:	490d      	ldr	r1, [pc, #52]	@ (80013c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800138c:	4a0d      	ldr	r2, [pc, #52]	@ (80013c4 <LoopForever+0xe>)
  movs r3, #0
 800138e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001390:	e002      	b.n	8001398 <LoopCopyDataInit>

08001392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001396:	3304      	adds	r3, #4

08001398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800139a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800139c:	d3f9      	bcc.n	8001392 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800139e:	4a0a      	ldr	r2, [pc, #40]	@ (80013c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013a0:	4c0a      	ldr	r4, [pc, #40]	@ (80013cc <LoopForever+0x16>)
  movs r3, #0
 80013a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a4:	e001      	b.n	80013aa <LoopFillZerobss>

080013a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a8:	3204      	adds	r2, #4

080013aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013ac:	d3fb      	bcc.n	80013a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ae:	f003 fa4b 	bl	8004848 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013b2:	f7fe ff09 	bl	80001c8 <main>

080013b6 <LoopForever>:

LoopForever:
    b LoopForever
 80013b6:	e7fe      	b.n	80013b6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013b8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80013bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c0:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 80013c4:	08004b04 	.word	0x08004b04
  ldr r2, =_sbss
 80013c8:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 80013cc:	200003dc 	.word	0x200003dc

080013d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013d0:	e7fe      	b.n	80013d0 <ADC1_2_IRQHandler>
	...

080013d4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d8:	4b08      	ldr	r3, [pc, #32]	@ (80013fc <HAL_Init+0x28>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a07      	ldr	r2, [pc, #28]	@ (80013fc <HAL_Init+0x28>)
 80013de:	f043 0310 	orr.w	r3, r3, #16
 80013e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e4:	2003      	movs	r0, #3
 80013e6:	f000 f94f 	bl	8001688 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ea:	200f      	movs	r0, #15
 80013ec:	f000 f808 	bl	8001400 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013f0:	f7ff fe44 	bl	800107c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40022000 	.word	0x40022000

08001400 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001408:	4b12      	ldr	r3, [pc, #72]	@ (8001454 <HAL_InitTick+0x54>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4b12      	ldr	r3, [pc, #72]	@ (8001458 <HAL_InitTick+0x58>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	4619      	mov	r1, r3
 8001412:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001416:	fbb3 f3f1 	udiv	r3, r3, r1
 800141a:	fbb2 f3f3 	udiv	r3, r2, r3
 800141e:	4618      	mov	r0, r3
 8001420:	f000 f967 	bl	80016f2 <HAL_SYSTICK_Config>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e00e      	b.n	800144c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b0f      	cmp	r3, #15
 8001432:	d80a      	bhi.n	800144a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001434:	2200      	movs	r2, #0
 8001436:	6879      	ldr	r1, [r7, #4]
 8001438:	f04f 30ff 	mov.w	r0, #4294967295
 800143c:	f000 f92f 	bl	800169e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001440:	4a06      	ldr	r2, [pc, #24]	@ (800145c <HAL_InitTick+0x5c>)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001446:	2300      	movs	r3, #0
 8001448:	e000      	b.n	800144c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
}
 800144c:	4618      	mov	r0, r3
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000028 	.word	0x20000028
 8001458:	20000030 	.word	0x20000030
 800145c:	2000002c 	.word	0x2000002c

08001460 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001464:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <HAL_IncTick+0x20>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	461a      	mov	r2, r3
 800146a:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <HAL_IncTick+0x24>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4413      	add	r3, r2
 8001470:	4a04      	ldr	r2, [pc, #16]	@ (8001484 <HAL_IncTick+0x24>)
 8001472:	6013      	str	r3, [r2, #0]
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	20000030 	.word	0x20000030
 8001484:	200003d8 	.word	0x200003d8

08001488 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return uwTick;  
 800148c:	4b03      	ldr	r3, [pc, #12]	@ (800149c <HAL_GetTick+0x14>)
 800148e:	681b      	ldr	r3, [r3, #0]
}
 8001490:	4618      	mov	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	200003d8 	.word	0x200003d8

080014a0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a8:	f7ff ffee 	bl	8001488 <HAL_GetTick>
 80014ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b8:	d005      	beq.n	80014c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ba:	4b0a      	ldr	r3, [pc, #40]	@ (80014e4 <HAL_Delay+0x44>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	461a      	mov	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4413      	add	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80014c6:	bf00      	nop
 80014c8:	f7ff ffde 	bl	8001488 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d8f7      	bhi.n	80014c8 <HAL_Delay+0x28>
  {
  }
}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000030 	.word	0x20000030

080014e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f8:	4b0c      	ldr	r3, [pc, #48]	@ (800152c <__NVIC_SetPriorityGrouping+0x44>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001504:	4013      	ands	r3, r2
 8001506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001510:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001514:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800151a:	4a04      	ldr	r2, [pc, #16]	@ (800152c <__NVIC_SetPriorityGrouping+0x44>)
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	60d3      	str	r3, [r2, #12]
}
 8001520:	bf00      	nop
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001534:	4b04      	ldr	r3, [pc, #16]	@ (8001548 <__NVIC_GetPriorityGrouping+0x18>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	0a1b      	lsrs	r3, r3, #8
 800153a:	f003 0307 	and.w	r3, r3, #7
}
 800153e:	4618      	mov	r0, r3
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	2b00      	cmp	r3, #0
 800155c:	db0b      	blt.n	8001576 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	f003 021f 	and.w	r2, r3, #31
 8001564:	4907      	ldr	r1, [pc, #28]	@ (8001584 <__NVIC_EnableIRQ+0x38>)
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	095b      	lsrs	r3, r3, #5
 800156c:	2001      	movs	r0, #1
 800156e:	fa00 f202 	lsl.w	r2, r0, r2
 8001572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000e100 	.word	0xe000e100

08001588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	6039      	str	r1, [r7, #0]
 8001592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001598:	2b00      	cmp	r3, #0
 800159a:	db0a      	blt.n	80015b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	490c      	ldr	r1, [pc, #48]	@ (80015d4 <__NVIC_SetPriority+0x4c>)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	0112      	lsls	r2, r2, #4
 80015a8:	b2d2      	uxtb	r2, r2
 80015aa:	440b      	add	r3, r1
 80015ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b0:	e00a      	b.n	80015c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	4908      	ldr	r1, [pc, #32]	@ (80015d8 <__NVIC_SetPriority+0x50>)
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	f003 030f 	and.w	r3, r3, #15
 80015be:	3b04      	subs	r3, #4
 80015c0:	0112      	lsls	r2, r2, #4
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	440b      	add	r3, r1
 80015c6:	761a      	strb	r2, [r3, #24]
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	e000e100 	.word	0xe000e100
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015dc:	b480      	push	{r7}
 80015de:	b089      	sub	sp, #36	@ 0x24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	f1c3 0307 	rsb	r3, r3, #7
 80015f6:	2b04      	cmp	r3, #4
 80015f8:	bf28      	it	cs
 80015fa:	2304      	movcs	r3, #4
 80015fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3304      	adds	r3, #4
 8001602:	2b06      	cmp	r3, #6
 8001604:	d902      	bls.n	800160c <NVIC_EncodePriority+0x30>
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3b03      	subs	r3, #3
 800160a:	e000      	b.n	800160e <NVIC_EncodePriority+0x32>
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001610:	f04f 32ff 	mov.w	r2, #4294967295
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43da      	mvns	r2, r3
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	401a      	ands	r2, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001624:	f04f 31ff 	mov.w	r1, #4294967295
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	fa01 f303 	lsl.w	r3, r1, r3
 800162e:	43d9      	mvns	r1, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001634:	4313      	orrs	r3, r2
         );
}
 8001636:	4618      	mov	r0, r3
 8001638:	3724      	adds	r7, #36	@ 0x24
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
	...

08001644 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3b01      	subs	r3, #1
 8001650:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001654:	d301      	bcc.n	800165a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001656:	2301      	movs	r3, #1
 8001658:	e00f      	b.n	800167a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800165a:	4a0a      	ldr	r2, [pc, #40]	@ (8001684 <SysTick_Config+0x40>)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3b01      	subs	r3, #1
 8001660:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001662:	210f      	movs	r1, #15
 8001664:	f04f 30ff 	mov.w	r0, #4294967295
 8001668:	f7ff ff8e 	bl	8001588 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800166c:	4b05      	ldr	r3, [pc, #20]	@ (8001684 <SysTick_Config+0x40>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001672:	4b04      	ldr	r3, [pc, #16]	@ (8001684 <SysTick_Config+0x40>)
 8001674:	2207      	movs	r2, #7
 8001676:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	e000e010 	.word	0xe000e010

08001688 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff ff29 	bl	80014e8 <__NVIC_SetPriorityGrouping>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b086      	sub	sp, #24
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	4603      	mov	r3, r0
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
 80016aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016b0:	f7ff ff3e 	bl	8001530 <__NVIC_GetPriorityGrouping>
 80016b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	68b9      	ldr	r1, [r7, #8]
 80016ba:	6978      	ldr	r0, [r7, #20]
 80016bc:	f7ff ff8e 	bl	80015dc <NVIC_EncodePriority>
 80016c0:	4602      	mov	r2, r0
 80016c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c6:	4611      	mov	r1, r2
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff5d 	bl	8001588 <__NVIC_SetPriority>
}
 80016ce:	bf00      	nop
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	4603      	mov	r3, r0
 80016de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff31 	bl	800154c <__NVIC_EnableIRQ>
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff ffa2 	bl	8001644 <SysTick_Config>
 8001700:	4603      	mov	r3, r0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b084      	sub	sp, #16
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e037      	b.n	8001790 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2202      	movs	r2, #2
 8001724:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001736:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800173a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001744:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001750:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800175c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001764:	68fa      	ldr	r2, [r7, #12]
 8001766:	4313      	orrs	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 f9bc 	bl	8001af0 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2201      	movs	r2, #1
 8001782:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
 80017a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017a6:	2300      	movs	r3, #0
 80017a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d101      	bne.n	80017b8 <HAL_DMA_Start_IT+0x20>
 80017b4:	2302      	movs	r3, #2
 80017b6:	e04a      	b.n	800184e <HAL_DMA_Start_IT+0xb6>
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d13a      	bne.n	8001840 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2202      	movs	r2, #2
 80017ce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2200      	movs	r2, #0
 80017d6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f022 0201 	bic.w	r2, r2, #1
 80017e6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	68b9      	ldr	r1, [r7, #8]
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	f000 f950 	bl	8001a94 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d008      	beq.n	800180e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f042 020e 	orr.w	r2, r2, #14
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	e00f      	b.n	800182e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f042 020a 	orr.w	r2, r2, #10
 800181c:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 0204 	bic.w	r2, r2, #4
 800182c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f042 0201 	orr.w	r2, r2, #1
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	e005      	b.n	800184c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001848:	2302      	movs	r3, #2
 800184a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800184c:	7dfb      	ldrb	r3, [r7, #23]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d101      	bne.n	8001868 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e02e      	b.n	80018c6 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800186e:	2b02      	cmp	r3, #2
 8001870:	d008      	beq.n	8001884 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2204      	movs	r2, #4
 8001876:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e020      	b.n	80018c6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 020e 	bic.w	r2, r2, #14
 8001892:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 0201 	bic.w	r2, r2, #1
 80018a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018ac:	2101      	movs	r1, #1
 80018ae:	fa01 f202 	lsl.w	r2, r1, r2
 80018b2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b084      	sub	sp, #16
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018da:	2300      	movs	r3, #0
 80018dc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d005      	beq.n	80018f4 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2204      	movs	r2, #4
 80018ec:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	73fb      	strb	r3, [r7, #15]
 80018f2:	e027      	b.n	8001944 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f022 020e 	bic.w	r2, r2, #14
 8001902:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 0201 	bic.w	r2, r2, #1
 8001912:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800191c:	2101      	movs	r1, #1
 800191e:	fa01 f202 	lsl.w	r2, r1, r2
 8001922:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001938:	2b00      	cmp	r3, #0
 800193a:	d003      	beq.n	8001944 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	4798      	blx	r3
    }
  }
  return status;
 8001944:	7bfb      	ldrb	r3, [r7, #15]
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b084      	sub	sp, #16
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196a:	2204      	movs	r2, #4
 800196c:	409a      	lsls	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	4013      	ands	r3, r2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d024      	beq.n	80019c0 <HAL_DMA_IRQHandler+0x72>
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	2b00      	cmp	r3, #0
 800197e:	d01f      	beq.n	80019c0 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0320 	and.w	r3, r3, #32
 800198a:	2b00      	cmp	r3, #0
 800198c:	d107      	bne.n	800199e <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 0204 	bic.w	r2, r2, #4
 800199c:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019a6:	2104      	movs	r1, #4
 80019a8:	fa01 f202 	lsl.w	r2, r1, r2
 80019ac:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d06a      	beq.n	8001a8c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80019be:	e065      	b.n	8001a8c <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c4:	2202      	movs	r2, #2
 80019c6:	409a      	lsls	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4013      	ands	r3, r2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d02c      	beq.n	8001a2a <HAL_DMA_IRQHandler+0xdc>
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d027      	beq.n	8001a2a <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0320 	and.w	r3, r3, #32
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d10b      	bne.n	8001a00 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 020a 	bic.w	r2, r2, #10
 80019f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a08:	2102      	movs	r1, #2
 8001a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a0e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d035      	beq.n	8001a8c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a28:	e030      	b.n	8001a8c <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2e:	2208      	movs	r2, #8
 8001a30:	409a      	lsls	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	4013      	ands	r3, r2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d028      	beq.n	8001a8c <HAL_DMA_IRQHandler+0x13e>
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	f003 0308 	and.w	r3, r3, #8
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d023      	beq.n	8001a8c <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 020e 	bic.w	r2, r2, #14
 8001a52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a62:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d004      	beq.n	8001a8c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	4798      	blx	r3
    }
  }
}
 8001a8a:	e7ff      	b.n	8001a8c <HAL_DMA_IRQHandler+0x13e>
 8001a8c:	bf00      	nop
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
 8001aa0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001aaa:	2101      	movs	r1, #1
 8001aac:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b10      	cmp	r3, #16
 8001ac0:	d108      	bne.n	8001ad4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ad2:	e007      	b.n	8001ae4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68ba      	ldr	r2, [r7, #8]
 8001ada:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	60da      	str	r2, [r3, #12]
}
 8001ae4:	bf00      	nop
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	461a      	mov	r2, r3
 8001afe:	4b09      	ldr	r3, [pc, #36]	@ (8001b24 <DMA_CalcBaseAndBitshift+0x34>)
 8001b00:	4413      	add	r3, r2
 8001b02:	4a09      	ldr	r2, [pc, #36]	@ (8001b28 <DMA_CalcBaseAndBitshift+0x38>)
 8001b04:	fba2 2303 	umull	r2, r3, r2, r3
 8001b08:	091b      	lsrs	r3, r3, #4
 8001b0a:	009a      	lsls	r2, r3, #2
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a06      	ldr	r2, [pc, #24]	@ (8001b2c <DMA_CalcBaseAndBitshift+0x3c>)
 8001b14:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	bffdfff8 	.word	0xbffdfff8
 8001b28:	cccccccd 	.word	0xcccccccd
 8001b2c:	40020000 	.word	0x40020000

08001b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b087      	sub	sp, #28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b3e:	e14e      	b.n	8001dde <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	2101      	movs	r1, #1
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 8140 	beq.w	8001dd8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d005      	beq.n	8001b70 <HAL_GPIO_Init+0x40>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d130      	bne.n	8001bd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	2203      	movs	r2, #3
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4013      	ands	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	68da      	ldr	r2, [r3, #12]
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	091b      	lsrs	r3, r3, #4
 8001bbc:	f003 0201 	and.w	r2, r3, #1
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	2b03      	cmp	r3, #3
 8001bdc:	d017      	beq.n	8001c0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	2203      	movs	r2, #3
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d123      	bne.n	8001c62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	08da      	lsrs	r2, r3, #3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3208      	adds	r2, #8
 8001c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	220f      	movs	r2, #15
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	691a      	ldr	r2, [r3, #16]
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	08da      	lsrs	r2, r3, #3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3208      	adds	r2, #8
 8001c5c:	6939      	ldr	r1, [r7, #16]
 8001c5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	2203      	movs	r2, #3
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43db      	mvns	r3, r3
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	4013      	ands	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f003 0203 	and.w	r2, r3, #3
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 809a 	beq.w	8001dd8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca4:	4b55      	ldr	r3, [pc, #340]	@ (8001dfc <HAL_GPIO_Init+0x2cc>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	4a54      	ldr	r2, [pc, #336]	@ (8001dfc <HAL_GPIO_Init+0x2cc>)
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	6193      	str	r3, [r2, #24]
 8001cb0:	4b52      	ldr	r3, [pc, #328]	@ (8001dfc <HAL_GPIO_Init+0x2cc>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cbc:	4a50      	ldr	r2, [pc, #320]	@ (8001e00 <HAL_GPIO_Init+0x2d0>)
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	089b      	lsrs	r3, r3, #2
 8001cc2:	3302      	adds	r3, #2
 8001cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	220f      	movs	r2, #15
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001ce6:	d013      	beq.n	8001d10 <HAL_GPIO_Init+0x1e0>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a46      	ldr	r2, [pc, #280]	@ (8001e04 <HAL_GPIO_Init+0x2d4>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d00d      	beq.n	8001d0c <HAL_GPIO_Init+0x1dc>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a45      	ldr	r2, [pc, #276]	@ (8001e08 <HAL_GPIO_Init+0x2d8>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d007      	beq.n	8001d08 <HAL_GPIO_Init+0x1d8>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a44      	ldr	r2, [pc, #272]	@ (8001e0c <HAL_GPIO_Init+0x2dc>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d101      	bne.n	8001d04 <HAL_GPIO_Init+0x1d4>
 8001d00:	2303      	movs	r3, #3
 8001d02:	e006      	b.n	8001d12 <HAL_GPIO_Init+0x1e2>
 8001d04:	2305      	movs	r3, #5
 8001d06:	e004      	b.n	8001d12 <HAL_GPIO_Init+0x1e2>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	e002      	b.n	8001d12 <HAL_GPIO_Init+0x1e2>
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e000      	b.n	8001d12 <HAL_GPIO_Init+0x1e2>
 8001d10:	2300      	movs	r3, #0
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	f002 0203 	and.w	r2, r2, #3
 8001d18:	0092      	lsls	r2, r2, #2
 8001d1a:	4093      	lsls	r3, r2
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d22:	4937      	ldr	r1, [pc, #220]	@ (8001e00 <HAL_GPIO_Init+0x2d0>)
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	089b      	lsrs	r3, r3, #2
 8001d28:	3302      	adds	r3, #2
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d30:	4b37      	ldr	r3, [pc, #220]	@ (8001e10 <HAL_GPIO_Init+0x2e0>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d54:	4a2e      	ldr	r2, [pc, #184]	@ (8001e10 <HAL_GPIO_Init+0x2e0>)
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d5a:	4b2d      	ldr	r3, [pc, #180]	@ (8001e10 <HAL_GPIO_Init+0x2e0>)
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	43db      	mvns	r3, r3
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4013      	ands	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d7e:	4a24      	ldr	r2, [pc, #144]	@ (8001e10 <HAL_GPIO_Init+0x2e0>)
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d84:	4b22      	ldr	r3, [pc, #136]	@ (8001e10 <HAL_GPIO_Init+0x2e0>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4013      	ands	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d003      	beq.n	8001da8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001da8:	4a19      	ldr	r2, [pc, #100]	@ (8001e10 <HAL_GPIO_Init+0x2e0>)
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dae:	4b18      	ldr	r3, [pc, #96]	@ (8001e10 <HAL_GPIO_Init+0x2e0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	43db      	mvns	r3, r3
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001dd2:	4a0f      	ldr	r2, [pc, #60]	@ (8001e10 <HAL_GPIO_Init+0x2e0>)
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	fa22 f303 	lsr.w	r3, r2, r3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f47f aea9 	bne.w	8001b40 <HAL_GPIO_Init+0x10>
  }
}
 8001dee:	bf00      	nop
 8001df0:	bf00      	nop
 8001df2:	371c      	adds	r7, #28
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40010000 	.word	0x40010000
 8001e04:	48000400 	.word	0x48000400
 8001e08:	48000800 	.word	0x48000800
 8001e0c:	48000c00 	.word	0x48000c00
 8001e10:	40010400 	.word	0x40010400

08001e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	807b      	strh	r3, [r7, #2]
 8001e20:	4613      	mov	r3, r2
 8001e22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e24:	787b      	ldrb	r3, [r7, #1]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e2a:	887a      	ldrh	r2, [r7, #2]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e30:	e002      	b.n	8001e38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e32:	887a      	ldrh	r2, [r7, #2]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e56:	887a      	ldrh	r2, [r7, #2]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	041a      	lsls	r2, r3, #16
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	43d9      	mvns	r1, r3
 8001e62:	887b      	ldrh	r3, [r7, #2]
 8001e64:	400b      	ands	r3, r1
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	619a      	str	r2, [r3, #24]
}
 8001e6c:	bf00      	nop
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e84:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e88:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e8e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d102      	bne.n	8001e9e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	f000 bff4 	b.w	8002e86 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ea2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 816d 	beq.w	800218e <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001eb4:	4bb4      	ldr	r3, [pc, #720]	@ (8002188 <HAL_RCC_OscConfig+0x310>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 030c 	and.w	r3, r3, #12
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	d00c      	beq.n	8001eda <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ec0:	4bb1      	ldr	r3, [pc, #708]	@ (8002188 <HAL_RCC_OscConfig+0x310>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 030c 	and.w	r3, r3, #12
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	d157      	bne.n	8001f7c <HAL_RCC_OscConfig+0x104>
 8001ecc:	4bae      	ldr	r3, [pc, #696]	@ (8002188 <HAL_RCC_OscConfig+0x310>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ed4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ed8:	d150      	bne.n	8001f7c <HAL_RCC_OscConfig+0x104>
 8001eda:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ede:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001ee6:	fa93 f3a3 	rbit	r3, r3
 8001eea:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001eee:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef2:	fab3 f383 	clz	r3, r3
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b3f      	cmp	r3, #63	@ 0x3f
 8001efa:	d802      	bhi.n	8001f02 <HAL_RCC_OscConfig+0x8a>
 8001efc:	4ba2      	ldr	r3, [pc, #648]	@ (8002188 <HAL_RCC_OscConfig+0x310>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	e015      	b.n	8001f2e <HAL_RCC_OscConfig+0xb6>
 8001f02:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f06:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001f0e:	fa93 f3a3 	rbit	r3, r3
 8001f12:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001f16:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f1a:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001f1e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001f22:	fa93 f3a3 	rbit	r3, r3
 8001f26:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001f2a:	4b97      	ldr	r3, [pc, #604]	@ (8002188 <HAL_RCC_OscConfig+0x310>)
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f32:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001f36:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001f3a:	fa92 f2a2 	rbit	r2, r2
 8001f3e:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001f42:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001f46:	fab2 f282 	clz	r2, r2
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	f042 0220 	orr.w	r2, r2, #32
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	f002 021f 	and.w	r2, r2, #31
 8001f56:	2101      	movs	r1, #1
 8001f58:	fa01 f202 	lsl.w	r2, r1, r2
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f000 8114 	beq.w	800218c <HAL_RCC_OscConfig+0x314>
 8001f64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f68:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f040 810b 	bne.w	800218c <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	f000 bf85 	b.w	8002e86 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f80:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f8c:	d106      	bne.n	8001f9c <HAL_RCC_OscConfig+0x124>
 8001f8e:	4b7e      	ldr	r3, [pc, #504]	@ (8002188 <HAL_RCC_OscConfig+0x310>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a7d      	ldr	r2, [pc, #500]	@ (8002188 <HAL_RCC_OscConfig+0x310>)
 8001f94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f98:	6013      	str	r3, [r2, #0]
 8001f9a:	e036      	b.n	800200a <HAL_RCC_OscConfig+0x192>
 8001f9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fa0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10c      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x14e>
 8001fac:	4b76      	ldr	r3, [pc, #472]	@ (8002188 <HAL_RCC_OscConfig+0x310>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a75      	ldr	r2, [pc, #468]	@ (8002188 <HAL_RCC_OscConfig+0x310>)
 8001fb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fb6:	6013      	str	r3, [r2, #0]
 8001fb8:	4b73      	ldr	r3, [pc, #460]	@ (8002188 <HAL_RCC_OscConfig+0x310>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a72      	ldr	r2, [pc, #456]	@ (8002188 <HAL_RCC_OscConfig+0x310>)
 8001fbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fc2:	6013      	str	r3, [r2, #0]
 8001fc4:	e021      	b.n	800200a <HAL_RCC_OscConfig+0x192>
 8001fc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fd6:	d10c      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x17a>
 8001fd8:	4b6b      	ldr	r3, [pc, #428]	@ (8002188 <HAL_RCC_OscConfig+0x310>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a6a      	ldr	r2, [pc, #424]	@ (8002188 <HAL_RCC_OscConfig+0x310>)
 8001fde:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fe2:	6013      	str	r3, [r2, #0]
 8001fe4:	4b68      	ldr	r3, [pc, #416]	@ (8002188 <HAL_RCC_OscConfig+0x310>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a67      	ldr	r2, [pc, #412]	@ (8002188 <HAL_RCC_OscConfig+0x310>)
 8001fea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fee:	6013      	str	r3, [r2, #0]
 8001ff0:	e00b      	b.n	800200a <HAL_RCC_OscConfig+0x192>
 8001ff2:	4b65      	ldr	r3, [pc, #404]	@ (8002188 <HAL_RCC_OscConfig+0x310>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a64      	ldr	r2, [pc, #400]	@ (8002188 <HAL_RCC_OscConfig+0x310>)
 8001ff8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	4b62      	ldr	r3, [pc, #392]	@ (8002188 <HAL_RCC_OscConfig+0x310>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a61      	ldr	r2, [pc, #388]	@ (8002188 <HAL_RCC_OscConfig+0x310>)
 8002004:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002008:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800200a:	4b5f      	ldr	r3, [pc, #380]	@ (8002188 <HAL_RCC_OscConfig+0x310>)
 800200c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800200e:	f023 020f 	bic.w	r2, r3, #15
 8002012:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002016:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	495a      	ldr	r1, [pc, #360]	@ (8002188 <HAL_RCC_OscConfig+0x310>)
 8002020:	4313      	orrs	r3, r2
 8002022:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002024:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002028:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d054      	beq.n	80020de <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002034:	f7ff fa28 	bl	8001488 <HAL_GetTick>
 8002038:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800203c:	e00a      	b.n	8002054 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800203e:	f7ff fa23 	bl	8001488 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b64      	cmp	r3, #100	@ 0x64
 800204c:	d902      	bls.n	8002054 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	f000 bf19 	b.w	8002e86 <HAL_RCC_OscConfig+0x100e>
 8002054:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002058:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002060:	fa93 f3a3 	rbit	r3, r3
 8002064:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002068:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206c:	fab3 f383 	clz	r3, r3
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b3f      	cmp	r3, #63	@ 0x3f
 8002074:	d802      	bhi.n	800207c <HAL_RCC_OscConfig+0x204>
 8002076:	4b44      	ldr	r3, [pc, #272]	@ (8002188 <HAL_RCC_OscConfig+0x310>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	e015      	b.n	80020a8 <HAL_RCC_OscConfig+0x230>
 800207c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002080:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002084:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002088:	fa93 f3a3 	rbit	r3, r3
 800208c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002090:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002094:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002098:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800209c:	fa93 f3a3 	rbit	r3, r3
 80020a0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80020a4:	4b38      	ldr	r3, [pc, #224]	@ (8002188 <HAL_RCC_OscConfig+0x310>)
 80020a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80020ac:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80020b0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80020b4:	fa92 f2a2 	rbit	r2, r2
 80020b8:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80020bc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80020c0:	fab2 f282 	clz	r2, r2
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	f042 0220 	orr.w	r2, r2, #32
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	f002 021f 	and.w	r2, r2, #31
 80020d0:	2101      	movs	r1, #1
 80020d2:	fa01 f202 	lsl.w	r2, r1, r2
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d0b0      	beq.n	800203e <HAL_RCC_OscConfig+0x1c6>
 80020dc:	e057      	b.n	800218e <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020de:	f7ff f9d3 	bl	8001488 <HAL_GetTick>
 80020e2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e6:	e00a      	b.n	80020fe <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020e8:	f7ff f9ce 	bl	8001488 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b64      	cmp	r3, #100	@ 0x64
 80020f6:	d902      	bls.n	80020fe <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	f000 bec4 	b.w	8002e86 <HAL_RCC_OscConfig+0x100e>
 80020fe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002102:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002106:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800210a:	fa93 f3a3 	rbit	r3, r3
 800210e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002112:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002116:	fab3 f383 	clz	r3, r3
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b3f      	cmp	r3, #63	@ 0x3f
 800211e:	d802      	bhi.n	8002126 <HAL_RCC_OscConfig+0x2ae>
 8002120:	4b19      	ldr	r3, [pc, #100]	@ (8002188 <HAL_RCC_OscConfig+0x310>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	e015      	b.n	8002152 <HAL_RCC_OscConfig+0x2da>
 8002126:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800212a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002132:	fa93 f3a3 	rbit	r3, r3
 8002136:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800213a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800213e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002142:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002146:	fa93 f3a3 	rbit	r3, r3
 800214a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800214e:	4b0e      	ldr	r3, [pc, #56]	@ (8002188 <HAL_RCC_OscConfig+0x310>)
 8002150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002152:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002156:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800215a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800215e:	fa92 f2a2 	rbit	r2, r2
 8002162:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002166:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800216a:	fab2 f282 	clz	r2, r2
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	f042 0220 	orr.w	r2, r2, #32
 8002174:	b2d2      	uxtb	r2, r2
 8002176:	f002 021f 	and.w	r2, r2, #31
 800217a:	2101      	movs	r1, #1
 800217c:	fa01 f202 	lsl.w	r2, r1, r2
 8002180:	4013      	ands	r3, r2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1b0      	bne.n	80020e8 <HAL_RCC_OscConfig+0x270>
 8002186:	e002      	b.n	800218e <HAL_RCC_OscConfig+0x316>
 8002188:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800218c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800218e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002192:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 816c 	beq.w	800247c <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80021a4:	4bcc      	ldr	r3, [pc, #816]	@ (80024d8 <HAL_RCC_OscConfig+0x660>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 030c 	and.w	r3, r3, #12
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00b      	beq.n	80021c8 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80021b0:	4bc9      	ldr	r3, [pc, #804]	@ (80024d8 <HAL_RCC_OscConfig+0x660>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 030c 	and.w	r3, r3, #12
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	d16d      	bne.n	8002298 <HAL_RCC_OscConfig+0x420>
 80021bc:	4bc6      	ldr	r3, [pc, #792]	@ (80024d8 <HAL_RCC_OscConfig+0x660>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d167      	bne.n	8002298 <HAL_RCC_OscConfig+0x420>
 80021c8:	2302      	movs	r3, #2
 80021ca:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ce:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80021d2:	fa93 f3a3 	rbit	r3, r3
 80021d6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80021da:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021de:	fab3 f383 	clz	r3, r3
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2b3f      	cmp	r3, #63	@ 0x3f
 80021e6:	d802      	bhi.n	80021ee <HAL_RCC_OscConfig+0x376>
 80021e8:	4bbb      	ldr	r3, [pc, #748]	@ (80024d8 <HAL_RCC_OscConfig+0x660>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	e013      	b.n	8002216 <HAL_RCC_OscConfig+0x39e>
 80021ee:	2302      	movs	r3, #2
 80021f0:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f4:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80021f8:	fa93 f3a3 	rbit	r3, r3
 80021fc:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002200:	2302      	movs	r3, #2
 8002202:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002206:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800220a:	fa93 f3a3 	rbit	r3, r3
 800220e:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002212:	4bb1      	ldr	r3, [pc, #708]	@ (80024d8 <HAL_RCC_OscConfig+0x660>)
 8002214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002216:	2202      	movs	r2, #2
 8002218:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800221c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002220:	fa92 f2a2 	rbit	r2, r2
 8002224:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002228:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800222c:	fab2 f282 	clz	r2, r2
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	f042 0220 	orr.w	r2, r2, #32
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	f002 021f 	and.w	r2, r2, #31
 800223c:	2101      	movs	r1, #1
 800223e:	fa01 f202 	lsl.w	r2, r1, r2
 8002242:	4013      	ands	r3, r2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00a      	beq.n	800225e <HAL_RCC_OscConfig+0x3e6>
 8002248:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800224c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d002      	beq.n	800225e <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	f000 be14 	b.w	8002e86 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800225e:	4b9e      	ldr	r3, [pc, #632]	@ (80024d8 <HAL_RCC_OscConfig+0x660>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002266:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800226a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	21f8      	movs	r1, #248	@ 0xf8
 8002274:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002278:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800227c:	fa91 f1a1 	rbit	r1, r1
 8002280:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002284:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002288:	fab1 f181 	clz	r1, r1
 800228c:	b2c9      	uxtb	r1, r1
 800228e:	408b      	lsls	r3, r1
 8002290:	4991      	ldr	r1, [pc, #580]	@ (80024d8 <HAL_RCC_OscConfig+0x660>)
 8002292:	4313      	orrs	r3, r2
 8002294:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002296:	e0f1      	b.n	800247c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002298:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800229c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f000 8083 	beq.w	80023b0 <HAL_RCC_OscConfig+0x538>
 80022aa:	2301      	movs	r3, #1
 80022ac:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b0:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80022b4:	fa93 f3a3 	rbit	r3, r3
 80022b8:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80022bc:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022c0:	fab3 f383 	clz	r3, r3
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80022ca:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	461a      	mov	r2, r3
 80022d2:	2301      	movs	r3, #1
 80022d4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d6:	f7ff f8d7 	bl	8001488 <HAL_GetTick>
 80022da:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022de:	e00a      	b.n	80022f6 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022e0:	f7ff f8d2 	bl	8001488 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d902      	bls.n	80022f6 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	f000 bdc8 	b.w	8002e86 <HAL_RCC_OscConfig+0x100e>
 80022f6:	2302      	movs	r3, #2
 80022f8:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fc:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002300:	fa93 f3a3 	rbit	r3, r3
 8002304:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002308:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800230c:	fab3 f383 	clz	r3, r3
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b3f      	cmp	r3, #63	@ 0x3f
 8002314:	d802      	bhi.n	800231c <HAL_RCC_OscConfig+0x4a4>
 8002316:	4b70      	ldr	r3, [pc, #448]	@ (80024d8 <HAL_RCC_OscConfig+0x660>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	e013      	b.n	8002344 <HAL_RCC_OscConfig+0x4cc>
 800231c:	2302      	movs	r3, #2
 800231e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002322:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002326:	fa93 f3a3 	rbit	r3, r3
 800232a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800232e:	2302      	movs	r3, #2
 8002330:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002334:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002338:	fa93 f3a3 	rbit	r3, r3
 800233c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002340:	4b65      	ldr	r3, [pc, #404]	@ (80024d8 <HAL_RCC_OscConfig+0x660>)
 8002342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002344:	2202      	movs	r2, #2
 8002346:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800234a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800234e:	fa92 f2a2 	rbit	r2, r2
 8002352:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002356:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800235a:	fab2 f282 	clz	r2, r2
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	f042 0220 	orr.w	r2, r2, #32
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	f002 021f 	and.w	r2, r2, #31
 800236a:	2101      	movs	r1, #1
 800236c:	fa01 f202 	lsl.w	r2, r1, r2
 8002370:	4013      	ands	r3, r2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0b4      	beq.n	80022e0 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002376:	4b58      	ldr	r3, [pc, #352]	@ (80024d8 <HAL_RCC_OscConfig+0x660>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800237e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002382:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	21f8      	movs	r1, #248	@ 0xf8
 800238c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002390:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002394:	fa91 f1a1 	rbit	r1, r1
 8002398:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800239c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80023a0:	fab1 f181 	clz	r1, r1
 80023a4:	b2c9      	uxtb	r1, r1
 80023a6:	408b      	lsls	r3, r1
 80023a8:	494b      	ldr	r1, [pc, #300]	@ (80024d8 <HAL_RCC_OscConfig+0x660>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	600b      	str	r3, [r1, #0]
 80023ae:	e065      	b.n	800247c <HAL_RCC_OscConfig+0x604>
 80023b0:	2301      	movs	r3, #1
 80023b2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80023ba:	fa93 f3a3 	rbit	r3, r3
 80023be:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80023c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023c6:	fab3 f383 	clz	r3, r3
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80023d0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	461a      	mov	r2, r3
 80023d8:	2300      	movs	r3, #0
 80023da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023dc:	f7ff f854 	bl	8001488 <HAL_GetTick>
 80023e0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e4:	e00a      	b.n	80023fc <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023e6:	f7ff f84f 	bl	8001488 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d902      	bls.n	80023fc <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	f000 bd45 	b.w	8002e86 <HAL_RCC_OscConfig+0x100e>
 80023fc:	2302      	movs	r3, #2
 80023fe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002402:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002406:	fa93 f3a3 	rbit	r3, r3
 800240a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800240e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002412:	fab3 f383 	clz	r3, r3
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b3f      	cmp	r3, #63	@ 0x3f
 800241a:	d802      	bhi.n	8002422 <HAL_RCC_OscConfig+0x5aa>
 800241c:	4b2e      	ldr	r3, [pc, #184]	@ (80024d8 <HAL_RCC_OscConfig+0x660>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	e013      	b.n	800244a <HAL_RCC_OscConfig+0x5d2>
 8002422:	2302      	movs	r3, #2
 8002424:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002428:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800242c:	fa93 f3a3 	rbit	r3, r3
 8002430:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002434:	2302      	movs	r3, #2
 8002436:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800243a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800243e:	fa93 f3a3 	rbit	r3, r3
 8002442:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002446:	4b24      	ldr	r3, [pc, #144]	@ (80024d8 <HAL_RCC_OscConfig+0x660>)
 8002448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244a:	2202      	movs	r2, #2
 800244c:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002450:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002454:	fa92 f2a2 	rbit	r2, r2
 8002458:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800245c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002460:	fab2 f282 	clz	r2, r2
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	f042 0220 	orr.w	r2, r2, #32
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	f002 021f 	and.w	r2, r2, #31
 8002470:	2101      	movs	r1, #1
 8002472:	fa01 f202 	lsl.w	r2, r1, r2
 8002476:	4013      	ands	r3, r2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1b4      	bne.n	80023e6 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800247c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002480:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0308 	and.w	r3, r3, #8
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 8115 	beq.w	80026bc <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002492:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002496:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d07e      	beq.n	80025a0 <HAL_RCC_OscConfig+0x728>
 80024a2:	2301      	movs	r3, #1
 80024a4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80024ac:	fa93 f3a3 	rbit	r3, r3
 80024b0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80024b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024b8:	fab3 f383 	clz	r3, r3
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	461a      	mov	r2, r3
 80024c0:	4b06      	ldr	r3, [pc, #24]	@ (80024dc <HAL_RCC_OscConfig+0x664>)
 80024c2:	4413      	add	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	461a      	mov	r2, r3
 80024c8:	2301      	movs	r3, #1
 80024ca:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024cc:	f7fe ffdc 	bl	8001488 <HAL_GetTick>
 80024d0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024d4:	e00f      	b.n	80024f6 <HAL_RCC_OscConfig+0x67e>
 80024d6:	bf00      	nop
 80024d8:	40021000 	.word	0x40021000
 80024dc:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024e0:	f7fe ffd2 	bl	8001488 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d902      	bls.n	80024f6 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	f000 bcc8 	b.w	8002e86 <HAL_RCC_OscConfig+0x100e>
 80024f6:	2302      	movs	r3, #2
 80024f8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002500:	fa93 f3a3 	rbit	r3, r3
 8002504:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002508:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800250c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002510:	2202      	movs	r2, #2
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002518:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	fa93 f2a3 	rbit	r2, r3
 8002522:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002526:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002530:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002534:	2202      	movs	r2, #2
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800253c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	fa93 f2a3 	rbit	r2, r3
 8002546:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800254a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800254e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002550:	4bb0      	ldr	r3, [pc, #704]	@ (8002814 <HAL_RCC_OscConfig+0x99c>)
 8002552:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002554:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002558:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800255c:	2102      	movs	r1, #2
 800255e:	6019      	str	r1, [r3, #0]
 8002560:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002564:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	fa93 f1a3 	rbit	r1, r3
 800256e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002572:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002576:	6019      	str	r1, [r3, #0]
  return result;
 8002578:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800257c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	fab3 f383 	clz	r3, r3
 8002586:	b2db      	uxtb	r3, r3
 8002588:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800258c:	b2db      	uxtb	r3, r3
 800258e:	f003 031f 	and.w	r3, r3, #31
 8002592:	2101      	movs	r1, #1
 8002594:	fa01 f303 	lsl.w	r3, r1, r3
 8002598:	4013      	ands	r3, r2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0a0      	beq.n	80024e0 <HAL_RCC_OscConfig+0x668>
 800259e:	e08d      	b.n	80026bc <HAL_RCC_OscConfig+0x844>
 80025a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025a4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80025a8:	2201      	movs	r2, #1
 80025aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	fa93 f2a3 	rbit	r2, r3
 80025ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025be:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80025c2:	601a      	str	r2, [r3, #0]
  return result;
 80025c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80025cc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ce:	fab3 f383 	clz	r3, r3
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	461a      	mov	r2, r3
 80025d6:	4b90      	ldr	r3, [pc, #576]	@ (8002818 <HAL_RCC_OscConfig+0x9a0>)
 80025d8:	4413      	add	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	461a      	mov	r2, r3
 80025de:	2300      	movs	r3, #0
 80025e0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e2:	f7fe ff51 	bl	8001488 <HAL_GetTick>
 80025e6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ea:	e00a      	b.n	8002602 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ec:	f7fe ff4c 	bl	8001488 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d902      	bls.n	8002602 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	f000 bc42 	b.w	8002e86 <HAL_RCC_OscConfig+0x100e>
 8002602:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002606:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800260a:	2202      	movs	r2, #2
 800260c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002612:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	fa93 f2a3 	rbit	r2, r3
 800261c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002620:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800262a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800262e:	2202      	movs	r2, #2
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002636:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	fa93 f2a3 	rbit	r2, r3
 8002640:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002644:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800264e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002652:	2202      	movs	r2, #2
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800265a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	fa93 f2a3 	rbit	r2, r3
 8002664:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002668:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800266c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800266e:	4b69      	ldr	r3, [pc, #420]	@ (8002814 <HAL_RCC_OscConfig+0x99c>)
 8002670:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002672:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002676:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800267a:	2102      	movs	r1, #2
 800267c:	6019      	str	r1, [r3, #0]
 800267e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002682:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	fa93 f1a3 	rbit	r1, r3
 800268c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002690:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002694:	6019      	str	r1, [r3, #0]
  return result;
 8002696:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800269a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	fab3 f383 	clz	r3, r3
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	f003 031f 	and.w	r3, r3, #31
 80026b0:	2101      	movs	r1, #1
 80026b2:	fa01 f303 	lsl.w	r3, r1, r3
 80026b6:	4013      	ands	r3, r2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d197      	bne.n	80025ec <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 819e 	beq.w	8002a0e <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026d2:	2300      	movs	r3, #0
 80026d4:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026d8:	4b4e      	ldr	r3, [pc, #312]	@ (8002814 <HAL_RCC_OscConfig+0x99c>)
 80026da:	69db      	ldr	r3, [r3, #28]
 80026dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d116      	bne.n	8002712 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026e4:	4b4b      	ldr	r3, [pc, #300]	@ (8002814 <HAL_RCC_OscConfig+0x99c>)
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	4a4a      	ldr	r2, [pc, #296]	@ (8002814 <HAL_RCC_OscConfig+0x99c>)
 80026ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026ee:	61d3      	str	r3, [r2, #28]
 80026f0:	4b48      	ldr	r3, [pc, #288]	@ (8002814 <HAL_RCC_OscConfig+0x99c>)
 80026f2:	69db      	ldr	r3, [r3, #28]
 80026f4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80026f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026fc:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002706:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800270a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800270c:	2301      	movs	r3, #1
 800270e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002712:	4b42      	ldr	r3, [pc, #264]	@ (800281c <HAL_RCC_OscConfig+0x9a4>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800271a:	2b00      	cmp	r3, #0
 800271c:	d11a      	bne.n	8002754 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800271e:	4b3f      	ldr	r3, [pc, #252]	@ (800281c <HAL_RCC_OscConfig+0x9a4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a3e      	ldr	r2, [pc, #248]	@ (800281c <HAL_RCC_OscConfig+0x9a4>)
 8002724:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002728:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800272a:	f7fe fead 	bl	8001488 <HAL_GetTick>
 800272e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002732:	e009      	b.n	8002748 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002734:	f7fe fea8 	bl	8001488 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b64      	cmp	r3, #100	@ 0x64
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e39e      	b.n	8002e86 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002748:	4b34      	ldr	r3, [pc, #208]	@ (800281c <HAL_RCC_OscConfig+0x9a4>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0ef      	beq.n	8002734 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002754:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002758:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d106      	bne.n	8002772 <HAL_RCC_OscConfig+0x8fa>
 8002764:	4b2b      	ldr	r3, [pc, #172]	@ (8002814 <HAL_RCC_OscConfig+0x99c>)
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	4a2a      	ldr	r2, [pc, #168]	@ (8002814 <HAL_RCC_OscConfig+0x99c>)
 800276a:	f043 0301 	orr.w	r3, r3, #1
 800276e:	6213      	str	r3, [r2, #32]
 8002770:	e035      	b.n	80027de <HAL_RCC_OscConfig+0x966>
 8002772:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002776:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10c      	bne.n	800279c <HAL_RCC_OscConfig+0x924>
 8002782:	4b24      	ldr	r3, [pc, #144]	@ (8002814 <HAL_RCC_OscConfig+0x99c>)
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	4a23      	ldr	r2, [pc, #140]	@ (8002814 <HAL_RCC_OscConfig+0x99c>)
 8002788:	f023 0301 	bic.w	r3, r3, #1
 800278c:	6213      	str	r3, [r2, #32]
 800278e:	4b21      	ldr	r3, [pc, #132]	@ (8002814 <HAL_RCC_OscConfig+0x99c>)
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	4a20      	ldr	r2, [pc, #128]	@ (8002814 <HAL_RCC_OscConfig+0x99c>)
 8002794:	f023 0304 	bic.w	r3, r3, #4
 8002798:	6213      	str	r3, [r2, #32]
 800279a:	e020      	b.n	80027de <HAL_RCC_OscConfig+0x966>
 800279c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	2b05      	cmp	r3, #5
 80027aa:	d10c      	bne.n	80027c6 <HAL_RCC_OscConfig+0x94e>
 80027ac:	4b19      	ldr	r3, [pc, #100]	@ (8002814 <HAL_RCC_OscConfig+0x99c>)
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	4a18      	ldr	r2, [pc, #96]	@ (8002814 <HAL_RCC_OscConfig+0x99c>)
 80027b2:	f043 0304 	orr.w	r3, r3, #4
 80027b6:	6213      	str	r3, [r2, #32]
 80027b8:	4b16      	ldr	r3, [pc, #88]	@ (8002814 <HAL_RCC_OscConfig+0x99c>)
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	4a15      	ldr	r2, [pc, #84]	@ (8002814 <HAL_RCC_OscConfig+0x99c>)
 80027be:	f043 0301 	orr.w	r3, r3, #1
 80027c2:	6213      	str	r3, [r2, #32]
 80027c4:	e00b      	b.n	80027de <HAL_RCC_OscConfig+0x966>
 80027c6:	4b13      	ldr	r3, [pc, #76]	@ (8002814 <HAL_RCC_OscConfig+0x99c>)
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	4a12      	ldr	r2, [pc, #72]	@ (8002814 <HAL_RCC_OscConfig+0x99c>)
 80027cc:	f023 0301 	bic.w	r3, r3, #1
 80027d0:	6213      	str	r3, [r2, #32]
 80027d2:	4b10      	ldr	r3, [pc, #64]	@ (8002814 <HAL_RCC_OscConfig+0x99c>)
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	4a0f      	ldr	r2, [pc, #60]	@ (8002814 <HAL_RCC_OscConfig+0x99c>)
 80027d8:	f023 0304 	bic.w	r3, r3, #4
 80027dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f000 8087 	beq.w	80028fe <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f0:	f7fe fe4a 	bl	8001488 <HAL_GetTick>
 80027f4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f8:	e012      	b.n	8002820 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027fa:	f7fe fe45 	bl	8001488 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	f241 3288 	movw	r2, #5000	@ 0x1388
 800280a:	4293      	cmp	r3, r2
 800280c:	d908      	bls.n	8002820 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e339      	b.n	8002e86 <HAL_RCC_OscConfig+0x100e>
 8002812:	bf00      	nop
 8002814:	40021000 	.word	0x40021000
 8002818:	10908120 	.word	0x10908120
 800281c:	40007000 	.word	0x40007000
 8002820:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002824:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002828:	2202      	movs	r2, #2
 800282a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002830:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	fa93 f2a3 	rbit	r2, r3
 800283a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800283e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002848:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800284c:	2202      	movs	r2, #2
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002854:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	fa93 f2a3 	rbit	r2, r3
 800285e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002862:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002866:	601a      	str	r2, [r3, #0]
  return result;
 8002868:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800286c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002870:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002872:	fab3 f383 	clz	r3, r3
 8002876:	b2db      	uxtb	r3, r3
 8002878:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d102      	bne.n	8002888 <HAL_RCC_OscConfig+0xa10>
 8002882:	4b98      	ldr	r3, [pc, #608]	@ (8002ae4 <HAL_RCC_OscConfig+0xc6c>)
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	e013      	b.n	80028b0 <HAL_RCC_OscConfig+0xa38>
 8002888:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800288c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002890:	2202      	movs	r2, #2
 8002892:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002894:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002898:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	fa93 f2a3 	rbit	r2, r3
 80028a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	4b8d      	ldr	r3, [pc, #564]	@ (8002ae4 <HAL_RCC_OscConfig+0xc6c>)
 80028ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028b4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80028b8:	2102      	movs	r1, #2
 80028ba:	6011      	str	r1, [r2, #0]
 80028bc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028c0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80028c4:	6812      	ldr	r2, [r2, #0]
 80028c6:	fa92 f1a2 	rbit	r1, r2
 80028ca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028ce:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80028d2:	6011      	str	r1, [r2, #0]
  return result;
 80028d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028d8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80028dc:	6812      	ldr	r2, [r2, #0]
 80028de:	fab2 f282 	clz	r2, r2
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028e8:	b2d2      	uxtb	r2, r2
 80028ea:	f002 021f 	and.w	r2, r2, #31
 80028ee:	2101      	movs	r1, #1
 80028f0:	fa01 f202 	lsl.w	r2, r1, r2
 80028f4:	4013      	ands	r3, r2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f43f af7f 	beq.w	80027fa <HAL_RCC_OscConfig+0x982>
 80028fc:	e07d      	b.n	80029fa <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028fe:	f7fe fdc3 	bl	8001488 <HAL_GetTick>
 8002902:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002906:	e00b      	b.n	8002920 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002908:	f7fe fdbe 	bl	8001488 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002918:	4293      	cmp	r3, r2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e2b2      	b.n	8002e86 <HAL_RCC_OscConfig+0x100e>
 8002920:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002924:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002928:	2202      	movs	r2, #2
 800292a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002930:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	fa93 f2a3 	rbit	r2, r3
 800293a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800293e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002948:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800294c:	2202      	movs	r2, #2
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002954:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	fa93 f2a3 	rbit	r2, r3
 800295e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002962:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002966:	601a      	str	r2, [r3, #0]
  return result;
 8002968:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800296c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002970:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002972:	fab3 f383 	clz	r3, r3
 8002976:	b2db      	uxtb	r3, r3
 8002978:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d102      	bne.n	8002988 <HAL_RCC_OscConfig+0xb10>
 8002982:	4b58      	ldr	r3, [pc, #352]	@ (8002ae4 <HAL_RCC_OscConfig+0xc6c>)
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	e013      	b.n	80029b0 <HAL_RCC_OscConfig+0xb38>
 8002988:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800298c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002990:	2202      	movs	r2, #2
 8002992:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002998:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	fa93 f2a3 	rbit	r2, r3
 80029a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a6:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	4b4d      	ldr	r3, [pc, #308]	@ (8002ae4 <HAL_RCC_OscConfig+0xc6c>)
 80029ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029b4:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80029b8:	2102      	movs	r1, #2
 80029ba:	6011      	str	r1, [r2, #0]
 80029bc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029c0:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80029c4:	6812      	ldr	r2, [r2, #0]
 80029c6:	fa92 f1a2 	rbit	r1, r2
 80029ca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029ce:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80029d2:	6011      	str	r1, [r2, #0]
  return result;
 80029d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029d8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80029dc:	6812      	ldr	r2, [r2, #0]
 80029de:	fab2 f282 	clz	r2, r2
 80029e2:	b2d2      	uxtb	r2, r2
 80029e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	f002 021f 	and.w	r2, r2, #31
 80029ee:	2101      	movs	r1, #1
 80029f0:	fa01 f202 	lsl.w	r2, r1, r2
 80029f4:	4013      	ands	r3, r2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d186      	bne.n	8002908 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029fa:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d105      	bne.n	8002a0e <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a02:	4b38      	ldr	r3, [pc, #224]	@ (8002ae4 <HAL_RCC_OscConfig+0xc6c>)
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	4a37      	ldr	r2, [pc, #220]	@ (8002ae4 <HAL_RCC_OscConfig+0xc6c>)
 8002a08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a0c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 8232 	beq.w	8002e84 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a20:	4b30      	ldr	r3, [pc, #192]	@ (8002ae4 <HAL_RCC_OscConfig+0xc6c>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f003 030c 	and.w	r3, r3, #12
 8002a28:	2b08      	cmp	r3, #8
 8002a2a:	f000 8201 	beq.w	8002e30 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	f040 8157 	bne.w	8002cee <HAL_RCC_OscConfig+0xe76>
 8002a40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a44:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002a48:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a52:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	fa93 f2a3 	rbit	r2, r3
 8002a5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a60:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002a64:	601a      	str	r2, [r3, #0]
  return result;
 8002a66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a6a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002a6e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a70:	fab3 f383 	clz	r3, r3
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a7a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	461a      	mov	r2, r3
 8002a82:	2300      	movs	r3, #0
 8002a84:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a86:	f7fe fcff 	bl	8001488 <HAL_GetTick>
 8002a8a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a8e:	e009      	b.n	8002aa4 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a90:	f7fe fcfa 	bl	8001488 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e1f0      	b.n	8002e86 <HAL_RCC_OscConfig+0x100e>
 8002aa4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002aac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ab0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ab6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	fa93 f2a3 	rbit	r2, r3
 8002ac0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002ac8:	601a      	str	r2, [r3, #0]
  return result;
 8002aca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ace:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002ad2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ad4:	fab3 f383 	clz	r3, r3
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b3f      	cmp	r3, #63	@ 0x3f
 8002adc:	d804      	bhi.n	8002ae8 <HAL_RCC_OscConfig+0xc70>
 8002ade:	4b01      	ldr	r3, [pc, #4]	@ (8002ae4 <HAL_RCC_OscConfig+0xc6c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	e029      	b.n	8002b38 <HAL_RCC_OscConfig+0xcc0>
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aec:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002af0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002af4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002afa:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	fa93 f2a3 	rbit	r2, r3
 8002b04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b08:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b12:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002b16:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b20:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	fa93 f2a3 	rbit	r2, r3
 8002b2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b2e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	4bc3      	ldr	r3, [pc, #780]	@ (8002e44 <HAL_RCC_OscConfig+0xfcc>)
 8002b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b38:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b3c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002b40:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002b44:	6011      	str	r1, [r2, #0]
 8002b46:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b4a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002b4e:	6812      	ldr	r2, [r2, #0]
 8002b50:	fa92 f1a2 	rbit	r1, r2
 8002b54:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b58:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002b5c:	6011      	str	r1, [r2, #0]
  return result;
 8002b5e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b62:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002b66:	6812      	ldr	r2, [r2, #0]
 8002b68:	fab2 f282 	clz	r2, r2
 8002b6c:	b2d2      	uxtb	r2, r2
 8002b6e:	f042 0220 	orr.w	r2, r2, #32
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	f002 021f 	and.w	r2, r2, #31
 8002b78:	2101      	movs	r1, #1
 8002b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b7e:	4013      	ands	r3, r2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d185      	bne.n	8002a90 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b84:	4baf      	ldr	r3, [pc, #700]	@ (8002e44 <HAL_RCC_OscConfig+0xfcc>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002b8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b90:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002b98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b9c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	430b      	orrs	r3, r1
 8002ba6:	49a7      	ldr	r1, [pc, #668]	@ (8002e44 <HAL_RCC_OscConfig+0xfcc>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	604b      	str	r3, [r1, #4]
 8002bac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002bb4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002bb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bbe:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	fa93 f2a3 	rbit	r2, r3
 8002bc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bcc:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002bd0:	601a      	str	r2, [r3, #0]
  return result;
 8002bd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bd6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002bda:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bdc:	fab3 f383 	clz	r3, r3
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002be6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	461a      	mov	r2, r3
 8002bee:	2301      	movs	r3, #1
 8002bf0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf2:	f7fe fc49 	bl	8001488 <HAL_GetTick>
 8002bf6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bfa:	e009      	b.n	8002c10 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bfc:	f7fe fc44 	bl	8001488 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e13a      	b.n	8002e86 <HAL_RCC_OscConfig+0x100e>
 8002c10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c14:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002c18:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c22:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	fa93 f2a3 	rbit	r2, r3
 8002c2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c30:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002c34:	601a      	str	r2, [r3, #0]
  return result;
 8002c36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c3a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002c3e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c40:	fab3 f383 	clz	r3, r3
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b3f      	cmp	r3, #63	@ 0x3f
 8002c48:	d802      	bhi.n	8002c50 <HAL_RCC_OscConfig+0xdd8>
 8002c4a:	4b7e      	ldr	r3, [pc, #504]	@ (8002e44 <HAL_RCC_OscConfig+0xfcc>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	e027      	b.n	8002ca0 <HAL_RCC_OscConfig+0xe28>
 8002c50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c54:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002c58:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c62:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	fa93 f2a3 	rbit	r2, r3
 8002c6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c70:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c7a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002c7e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c88:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	fa93 f2a3 	rbit	r2, r3
 8002c92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c96:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	4b69      	ldr	r3, [pc, #420]	@ (8002e44 <HAL_RCC_OscConfig+0xfcc>)
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ca4:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002ca8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002cac:	6011      	str	r1, [r2, #0]
 8002cae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cb2:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002cb6:	6812      	ldr	r2, [r2, #0]
 8002cb8:	fa92 f1a2 	rbit	r1, r2
 8002cbc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cc0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002cc4:	6011      	str	r1, [r2, #0]
  return result;
 8002cc6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cca:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002cce:	6812      	ldr	r2, [r2, #0]
 8002cd0:	fab2 f282 	clz	r2, r2
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	f042 0220 	orr.w	r2, r2, #32
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	f002 021f 	and.w	r2, r2, #31
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d087      	beq.n	8002bfc <HAL_RCC_OscConfig+0xd84>
 8002cec:	e0ca      	b.n	8002e84 <HAL_RCC_OscConfig+0x100c>
 8002cee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cf2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002cf6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002cfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d00:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	fa93 f2a3 	rbit	r2, r3
 8002d0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d0e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002d12:	601a      	str	r2, [r3, #0]
  return result;
 8002d14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d18:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002d1c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d1e:	fab3 f383 	clz	r3, r3
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d28:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	461a      	mov	r2, r3
 8002d30:	2300      	movs	r3, #0
 8002d32:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d34:	f7fe fba8 	bl	8001488 <HAL_GetTick>
 8002d38:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d3c:	e009      	b.n	8002d52 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d3e:	f7fe fba3 	bl	8001488 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e099      	b.n	8002e86 <HAL_RCC_OscConfig+0x100e>
 8002d52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d56:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002d5a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d64:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	fa93 f2a3 	rbit	r2, r3
 8002d6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d72:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002d76:	601a      	str	r2, [r3, #0]
  return result;
 8002d78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d7c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002d80:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d82:	fab3 f383 	clz	r3, r3
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b3f      	cmp	r3, #63	@ 0x3f
 8002d8a:	d802      	bhi.n	8002d92 <HAL_RCC_OscConfig+0xf1a>
 8002d8c:	4b2d      	ldr	r3, [pc, #180]	@ (8002e44 <HAL_RCC_OscConfig+0xfcc>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	e027      	b.n	8002de2 <HAL_RCC_OscConfig+0xf6a>
 8002d92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d96:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002d9a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002da4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	fa93 f2a3 	rbit	r2, r3
 8002dae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002db2:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dbc:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002dc0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dca:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	fa93 f2a3 	rbit	r2, r3
 8002dd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dd8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	4b19      	ldr	r3, [pc, #100]	@ (8002e44 <HAL_RCC_OscConfig+0xfcc>)
 8002de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002de6:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002dea:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002dee:	6011      	str	r1, [r2, #0]
 8002df0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002df4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002df8:	6812      	ldr	r2, [r2, #0]
 8002dfa:	fa92 f1a2 	rbit	r1, r2
 8002dfe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e02:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002e06:	6011      	str	r1, [r2, #0]
  return result;
 8002e08:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e0c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002e10:	6812      	ldr	r2, [r2, #0]
 8002e12:	fab2 f282 	clz	r2, r2
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	f042 0220 	orr.w	r2, r2, #32
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	f002 021f 	and.w	r2, r2, #31
 8002e22:	2101      	movs	r1, #1
 8002e24:	fa01 f202 	lsl.w	r2, r1, r2
 8002e28:	4013      	ands	r3, r2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d187      	bne.n	8002d3e <HAL_RCC_OscConfig+0xec6>
 8002e2e:	e029      	b.n	8002e84 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e34:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d103      	bne.n	8002e48 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e020      	b.n	8002e86 <HAL_RCC_OscConfig+0x100e>
 8002e44:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e48:	4b11      	ldr	r3, [pc, #68]	@ (8002e90 <HAL_RCC_OscConfig+0x1018>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e50:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002e54:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e5c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d10b      	bne.n	8002e80 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002e68:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002e6c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002e70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e74:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d001      	beq.n	8002e84 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e000      	b.n	8002e86 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40021000 	.word	0x40021000

08002e94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b09e      	sub	sp, #120	@ 0x78
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e154      	b.n	8003156 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002eac:	4b89      	ldr	r3, [pc, #548]	@ (80030d4 <HAL_RCC_ClockConfig+0x240>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d910      	bls.n	8002edc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eba:	4b86      	ldr	r3, [pc, #536]	@ (80030d4 <HAL_RCC_ClockConfig+0x240>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f023 0207 	bic.w	r2, r3, #7
 8002ec2:	4984      	ldr	r1, [pc, #528]	@ (80030d4 <HAL_RCC_ClockConfig+0x240>)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eca:	4b82      	ldr	r3, [pc, #520]	@ (80030d4 <HAL_RCC_ClockConfig+0x240>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d001      	beq.n	8002edc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e13c      	b.n	8003156 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d008      	beq.n	8002efa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee8:	4b7b      	ldr	r3, [pc, #492]	@ (80030d8 <HAL_RCC_ClockConfig+0x244>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	4978      	ldr	r1, [pc, #480]	@ (80030d8 <HAL_RCC_ClockConfig+0x244>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 80cd 	beq.w	80030a2 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d137      	bne.n	8002f80 <HAL_RCC_ClockConfig+0xec>
 8002f10:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f14:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f18:	fa93 f3a3 	rbit	r3, r3
 8002f1c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002f1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f20:	fab3 f383 	clz	r3, r3
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b3f      	cmp	r3, #63	@ 0x3f
 8002f28:	d802      	bhi.n	8002f30 <HAL_RCC_ClockConfig+0x9c>
 8002f2a:	4b6b      	ldr	r3, [pc, #428]	@ (80030d8 <HAL_RCC_ClockConfig+0x244>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	e00f      	b.n	8002f50 <HAL_RCC_ClockConfig+0xbc>
 8002f30:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f34:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f38:	fa93 f3a3 	rbit	r3, r3
 8002f3c:	667b      	str	r3, [r7, #100]	@ 0x64
 8002f3e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f42:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f44:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f46:	fa93 f3a3 	rbit	r3, r3
 8002f4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f4c:	4b62      	ldr	r3, [pc, #392]	@ (80030d8 <HAL_RCC_ClockConfig+0x244>)
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f50:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002f54:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002f56:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002f58:	fa92 f2a2 	rbit	r2, r2
 8002f5c:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002f5e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002f60:	fab2 f282 	clz	r2, r2
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	f042 0220 	orr.w	r2, r2, #32
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	f002 021f 	and.w	r2, r2, #31
 8002f70:	2101      	movs	r1, #1
 8002f72:	fa01 f202 	lsl.w	r2, r1, r2
 8002f76:	4013      	ands	r3, r2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d171      	bne.n	8003060 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e0ea      	b.n	8003156 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d137      	bne.n	8002ff8 <HAL_RCC_ClockConfig+0x164>
 8002f88:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f8c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f90:	fa93 f3a3 	rbit	r3, r3
 8002f94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002f96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f98:	fab3 f383 	clz	r3, r3
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002fa0:	d802      	bhi.n	8002fa8 <HAL_RCC_ClockConfig+0x114>
 8002fa2:	4b4d      	ldr	r3, [pc, #308]	@ (80030d8 <HAL_RCC_ClockConfig+0x244>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	e00f      	b.n	8002fc8 <HAL_RCC_ClockConfig+0x134>
 8002fa8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fac:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fb0:	fa93 f3a3 	rbit	r3, r3
 8002fb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fb6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fba:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fbe:	fa93 f3a3 	rbit	r3, r3
 8002fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fc4:	4b44      	ldr	r3, [pc, #272]	@ (80030d8 <HAL_RCC_ClockConfig+0x244>)
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fcc:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002fce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002fd0:	fa92 f2a2 	rbit	r2, r2
 8002fd4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002fd6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fd8:	fab2 f282 	clz	r2, r2
 8002fdc:	b2d2      	uxtb	r2, r2
 8002fde:	f042 0220 	orr.w	r2, r2, #32
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	f002 021f 	and.w	r2, r2, #31
 8002fe8:	2101      	movs	r1, #1
 8002fea:	fa01 f202 	lsl.w	r2, r1, r2
 8002fee:	4013      	ands	r3, r2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d135      	bne.n	8003060 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e0ae      	b.n	8003156 <HAL_RCC_ClockConfig+0x2c2>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ffe:	fa93 f3a3 	rbit	r3, r3
 8003002:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003006:	fab3 f383 	clz	r3, r3
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b3f      	cmp	r3, #63	@ 0x3f
 800300e:	d802      	bhi.n	8003016 <HAL_RCC_ClockConfig+0x182>
 8003010:	4b31      	ldr	r3, [pc, #196]	@ (80030d8 <HAL_RCC_ClockConfig+0x244>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	e00d      	b.n	8003032 <HAL_RCC_ClockConfig+0x19e>
 8003016:	2302      	movs	r3, #2
 8003018:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800301c:	fa93 f3a3 	rbit	r3, r3
 8003020:	627b      	str	r3, [r7, #36]	@ 0x24
 8003022:	2302      	movs	r3, #2
 8003024:	623b      	str	r3, [r7, #32]
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	fa93 f3a3 	rbit	r3, r3
 800302c:	61fb      	str	r3, [r7, #28]
 800302e:	4b2a      	ldr	r3, [pc, #168]	@ (80030d8 <HAL_RCC_ClockConfig+0x244>)
 8003030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003032:	2202      	movs	r2, #2
 8003034:	61ba      	str	r2, [r7, #24]
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	fa92 f2a2 	rbit	r2, r2
 800303c:	617a      	str	r2, [r7, #20]
  return result;
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	fab2 f282 	clz	r2, r2
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	f042 0220 	orr.w	r2, r2, #32
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	f002 021f 	and.w	r2, r2, #31
 8003050:	2101      	movs	r1, #1
 8003052:	fa01 f202 	lsl.w	r2, r1, r2
 8003056:	4013      	ands	r3, r2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e07a      	b.n	8003156 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003060:	4b1d      	ldr	r3, [pc, #116]	@ (80030d8 <HAL_RCC_ClockConfig+0x244>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f023 0203 	bic.w	r2, r3, #3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	491a      	ldr	r1, [pc, #104]	@ (80030d8 <HAL_RCC_ClockConfig+0x244>)
 800306e:	4313      	orrs	r3, r2
 8003070:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003072:	f7fe fa09 	bl	8001488 <HAL_GetTick>
 8003076:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003078:	e00a      	b.n	8003090 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800307a:	f7fe fa05 	bl	8001488 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003088:	4293      	cmp	r3, r2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e062      	b.n	8003156 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003090:	4b11      	ldr	r3, [pc, #68]	@ (80030d8 <HAL_RCC_ClockConfig+0x244>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f003 020c 	and.w	r2, r3, #12
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	429a      	cmp	r2, r3
 80030a0:	d1eb      	bne.n	800307a <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030a2:	4b0c      	ldr	r3, [pc, #48]	@ (80030d4 <HAL_RCC_ClockConfig+0x240>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d215      	bcs.n	80030dc <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b0:	4b08      	ldr	r3, [pc, #32]	@ (80030d4 <HAL_RCC_ClockConfig+0x240>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f023 0207 	bic.w	r2, r3, #7
 80030b8:	4906      	ldr	r1, [pc, #24]	@ (80030d4 <HAL_RCC_ClockConfig+0x240>)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	4313      	orrs	r3, r2
 80030be:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c0:	4b04      	ldr	r3, [pc, #16]	@ (80030d4 <HAL_RCC_ClockConfig+0x240>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d006      	beq.n	80030dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e041      	b.n	8003156 <HAL_RCC_ClockConfig+0x2c2>
 80030d2:	bf00      	nop
 80030d4:	40022000 	.word	0x40022000
 80030d8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d008      	beq.n	80030fa <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030e8:	4b1d      	ldr	r3, [pc, #116]	@ (8003160 <HAL_RCC_ClockConfig+0x2cc>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	491a      	ldr	r1, [pc, #104]	@ (8003160 <HAL_RCC_ClockConfig+0x2cc>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0308 	and.w	r3, r3, #8
 8003102:	2b00      	cmp	r3, #0
 8003104:	d009      	beq.n	800311a <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003106:	4b16      	ldr	r3, [pc, #88]	@ (8003160 <HAL_RCC_ClockConfig+0x2cc>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	4912      	ldr	r1, [pc, #72]	@ (8003160 <HAL_RCC_ClockConfig+0x2cc>)
 8003116:	4313      	orrs	r3, r2
 8003118:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800311a:	f000 f829 	bl	8003170 <HAL_RCC_GetSysClockFreq>
 800311e:	4601      	mov	r1, r0
 8003120:	4b0f      	ldr	r3, [pc, #60]	@ (8003160 <HAL_RCC_ClockConfig+0x2cc>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003128:	22f0      	movs	r2, #240	@ 0xf0
 800312a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	fa92 f2a2 	rbit	r2, r2
 8003132:	60fa      	str	r2, [r7, #12]
  return result;
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	fab2 f282 	clz	r2, r2
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	40d3      	lsrs	r3, r2
 800313e:	4a09      	ldr	r2, [pc, #36]	@ (8003164 <HAL_RCC_ClockConfig+0x2d0>)
 8003140:	5cd3      	ldrb	r3, [r2, r3]
 8003142:	fa21 f303 	lsr.w	r3, r1, r3
 8003146:	4a08      	ldr	r2, [pc, #32]	@ (8003168 <HAL_RCC_ClockConfig+0x2d4>)
 8003148:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800314a:	4b08      	ldr	r3, [pc, #32]	@ (800316c <HAL_RCC_ClockConfig+0x2d8>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f7fe f956 	bl	8001400 <HAL_InitTick>
  
  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3778      	adds	r7, #120	@ 0x78
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40021000 	.word	0x40021000
 8003164:	08004ac4 	.word	0x08004ac4
 8003168:	20000028 	.word	0x20000028
 800316c:	2000002c 	.word	0x2000002c

08003170 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003170:	b480      	push	{r7}
 8003172:	b087      	sub	sp, #28
 8003174:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003176:	2300      	movs	r3, #0
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	2300      	movs	r3, #0
 800317c:	60bb      	str	r3, [r7, #8]
 800317e:	2300      	movs	r3, #0
 8003180:	617b      	str	r3, [r7, #20]
 8003182:	2300      	movs	r3, #0
 8003184:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003186:	2300      	movs	r3, #0
 8003188:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800318a:	4b1e      	ldr	r3, [pc, #120]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x94>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f003 030c 	and.w	r3, r3, #12
 8003196:	2b04      	cmp	r3, #4
 8003198:	d002      	beq.n	80031a0 <HAL_RCC_GetSysClockFreq+0x30>
 800319a:	2b08      	cmp	r3, #8
 800319c:	d003      	beq.n	80031a6 <HAL_RCC_GetSysClockFreq+0x36>
 800319e:	e026      	b.n	80031ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031a0:	4b19      	ldr	r3, [pc, #100]	@ (8003208 <HAL_RCC_GetSysClockFreq+0x98>)
 80031a2:	613b      	str	r3, [r7, #16]
      break;
 80031a4:	e026      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	0c9b      	lsrs	r3, r3, #18
 80031aa:	f003 030f 	and.w	r3, r3, #15
 80031ae:	4a17      	ldr	r2, [pc, #92]	@ (800320c <HAL_RCC_GetSysClockFreq+0x9c>)
 80031b0:	5cd3      	ldrb	r3, [r2, r3]
 80031b2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80031b4:	4b13      	ldr	r3, [pc, #76]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x94>)
 80031b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b8:	f003 030f 	and.w	r3, r3, #15
 80031bc:	4a14      	ldr	r2, [pc, #80]	@ (8003210 <HAL_RCC_GetSysClockFreq+0xa0>)
 80031be:	5cd3      	ldrb	r3, [r2, r3]
 80031c0:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d008      	beq.n	80031de <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031cc:	4a0e      	ldr	r2, [pc, #56]	@ (8003208 <HAL_RCC_GetSysClockFreq+0x98>)
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	fb02 f303 	mul.w	r3, r2, r3
 80031da:	617b      	str	r3, [r7, #20]
 80031dc:	e004      	b.n	80031e8 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a0c      	ldr	r2, [pc, #48]	@ (8003214 <HAL_RCC_GetSysClockFreq+0xa4>)
 80031e2:	fb02 f303 	mul.w	r3, r2, r3
 80031e6:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	613b      	str	r3, [r7, #16]
      break;
 80031ec:	e002      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031ee:	4b06      	ldr	r3, [pc, #24]	@ (8003208 <HAL_RCC_GetSysClockFreq+0x98>)
 80031f0:	613b      	str	r3, [r7, #16]
      break;
 80031f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031f4:	693b      	ldr	r3, [r7, #16]
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	371c      	adds	r7, #28
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	40021000 	.word	0x40021000
 8003208:	007a1200 	.word	0x007a1200
 800320c:	08004adc 	.word	0x08004adc
 8003210:	08004aec 	.word	0x08004aec
 8003214:	003d0900 	.word	0x003d0900

08003218 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800321c:	4b03      	ldr	r3, [pc, #12]	@ (800322c <HAL_RCC_GetHCLKFreq+0x14>)
 800321e:	681b      	ldr	r3, [r3, #0]
}
 8003220:	4618      	mov	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	20000028 	.word	0x20000028

08003230 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003236:	f7ff ffef 	bl	8003218 <HAL_RCC_GetHCLKFreq>
 800323a:	4601      	mov	r1, r0
 800323c:	4b0b      	ldr	r3, [pc, #44]	@ (800326c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003244:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003248:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	fa92 f2a2 	rbit	r2, r2
 8003250:	603a      	str	r2, [r7, #0]
  return result;
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	fab2 f282 	clz	r2, r2
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	40d3      	lsrs	r3, r2
 800325c:	4a04      	ldr	r2, [pc, #16]	@ (8003270 <HAL_RCC_GetPCLK1Freq+0x40>)
 800325e:	5cd3      	ldrb	r3, [r2, r3]
 8003260:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003264:	4618      	mov	r0, r3
 8003266:	3708      	adds	r7, #8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40021000 	.word	0x40021000
 8003270:	08004ad4 	.word	0x08004ad4

08003274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800327a:	f7ff ffcd 	bl	8003218 <HAL_RCC_GetHCLKFreq>
 800327e:	4601      	mov	r1, r0
 8003280:	4b0b      	ldr	r3, [pc, #44]	@ (80032b0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003288:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800328c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	fa92 f2a2 	rbit	r2, r2
 8003294:	603a      	str	r2, [r7, #0]
  return result;
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	fab2 f282 	clz	r2, r2
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	40d3      	lsrs	r3, r2
 80032a0:	4a04      	ldr	r2, [pc, #16]	@ (80032b4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80032a2:	5cd3      	ldrb	r3, [r2, r3]
 80032a4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80032a8:	4618      	mov	r0, r3
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40021000 	.word	0x40021000
 80032b4:	08004ad4 	.word	0x08004ad4

080032b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b092      	sub	sp, #72	@ 0x48
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80032c4:	2300      	movs	r3, #0
 80032c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80032c8:	2300      	movs	r3, #0
 80032ca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f000 80cb 	beq.w	8003472 <HAL_RCCEx_PeriphCLKConfig+0x1ba>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032dc:	4b85      	ldr	r3, [pc, #532]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10e      	bne.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032e8:	4b82      	ldr	r3, [pc, #520]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	4a81      	ldr	r2, [pc, #516]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80032ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032f2:	61d3      	str	r3, [r2, #28]
 80032f4:	4b7f      	ldr	r3, [pc, #508]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80032f6:	69db      	ldr	r3, [r3, #28]
 80032f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032fc:	60bb      	str	r3, [r7, #8]
 80032fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003300:	2301      	movs	r3, #1
 8003302:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003306:	4b7c      	ldr	r3, [pc, #496]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800330e:	2b00      	cmp	r3, #0
 8003310:	d118      	bne.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003312:	4b79      	ldr	r3, [pc, #484]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a78      	ldr	r2, [pc, #480]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003318:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800331c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800331e:	f7fe f8b3 	bl	8001488 <HAL_GetTick>
 8003322:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003324:	e008      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003326:	f7fe f8af 	bl	8001488 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b64      	cmp	r3, #100	@ 0x64
 8003332:	d901      	bls.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e0d9      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x234>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003338:	4b6f      	ldr	r3, [pc, #444]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003340:	2b00      	cmp	r3, #0
 8003342:	d0f0      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003344:	4b6b      	ldr	r3, [pc, #428]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800334c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800334e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003350:	2b00      	cmp	r3, #0
 8003352:	d07b      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x194>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800335c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800335e:	429a      	cmp	r2, r3
 8003360:	d074      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003362:	4b64      	ldr	r3, [pc, #400]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800336a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800336c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003370:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003374:	fa93 f3a3 	rbit	r3, r3
 8003378:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800337a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800337c:	fab3 f383 	clz	r3, r3
 8003380:	b2db      	uxtb	r3, r3
 8003382:	461a      	mov	r2, r3
 8003384:	4b5d      	ldr	r3, [pc, #372]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003386:	4413      	add	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	461a      	mov	r2, r3
 800338c:	2301      	movs	r3, #1
 800338e:	6013      	str	r3, [r2, #0]
 8003390:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003394:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003398:	fa93 f3a3 	rbit	r3, r3
 800339c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800339e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033a0:	fab3 f383 	clz	r3, r3
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	461a      	mov	r2, r3
 80033a8:	4b54      	ldr	r3, [pc, #336]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80033aa:	4413      	add	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	461a      	mov	r2, r3
 80033b0:	2300      	movs	r3, #0
 80033b2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033b4:	4a4f      	ldr	r2, [pc, #316]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80033b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033b8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d043      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c4:	f7fe f860 	bl	8001488 <HAL_GetTick>
 80033c8:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ca:	e00a      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033cc:	f7fe f85c 	bl	8001488 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033da:	4293      	cmp	r3, r2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e084      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x234>
 80033e2:	2302      	movs	r3, #2
 80033e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033e8:	fa93 f3a3 	rbit	r3, r3
 80033ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80033ee:	2302      	movs	r3, #2
 80033f0:	623b      	str	r3, [r7, #32]
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	fa93 f3a3 	rbit	r3, r3
 80033f8:	61fb      	str	r3, [r7, #28]
  return result;
 80033fa:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033fc:	fab3 f383 	clz	r3, r3
 8003400:	b2db      	uxtb	r3, r3
 8003402:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	d102      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800340c:	4b39      	ldr	r3, [pc, #228]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	e007      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8003412:	2302      	movs	r3, #2
 8003414:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	fa93 f3a3 	rbit	r3, r3
 800341c:	617b      	str	r3, [r7, #20]
 800341e:	4b35      	ldr	r3, [pc, #212]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003422:	2202      	movs	r2, #2
 8003424:	613a      	str	r2, [r7, #16]
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	fa92 f2a2 	rbit	r2, r2
 800342c:	60fa      	str	r2, [r7, #12]
  return result;
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	fab2 f282 	clz	r2, r2
 8003434:	b2d2      	uxtb	r2, r2
 8003436:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	f002 021f 	and.w	r2, r2, #31
 8003440:	2101      	movs	r1, #1
 8003442:	fa01 f202 	lsl.w	r2, r1, r2
 8003446:	4013      	ands	r3, r2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0bf      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800344c:	4b29      	ldr	r3, [pc, #164]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	4926      	ldr	r1, [pc, #152]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800345a:	4313      	orrs	r3, r2
 800345c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800345e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003462:	2b01      	cmp	r3, #1
 8003464:	d105      	bne.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003466:	4b23      	ldr	r3, [pc, #140]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	4a22      	ldr	r2, [pc, #136]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800346c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003470:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d008      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800347e:	4b1d      	ldr	r3, [pc, #116]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003482:	f023 0203 	bic.w	r2, r3, #3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	491a      	ldr	r1, [pc, #104]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800348c:	4313      	orrs	r3, r2
 800348e:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0320 	and.w	r3, r3, #32
 8003498:	2b00      	cmp	r3, #0
 800349a:	d008      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800349c:	4b15      	ldr	r3, [pc, #84]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800349e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a0:	f023 0210 	bic.w	r2, r3, #16
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	4912      	ldr	r1, [pc, #72]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d008      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80034ba:	4b0e      	ldr	r3, [pc, #56]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80034bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034be:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	490b      	ldr	r1, [pc, #44]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d008      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80034d8:	4b06      	ldr	r3, [pc, #24]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80034da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	4903      	ldr	r1, [pc, #12]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3748      	adds	r7, #72	@ 0x48
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40021000 	.word	0x40021000
 80034f8:	40007000 	.word	0x40007000
 80034fc:	10908100 	.word	0x10908100

08003500 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b08a      	sub	sp, #40	@ 0x28
 8003504:	af02      	add	r7, sp, #8
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	603b      	str	r3, [r7, #0]
 800350c:	4613      	mov	r3, r2
 800350e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003514:	2b20      	cmp	r3, #32
 8003516:	d177      	bne.n	8003608 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <HAL_UART_Transmit+0x24>
 800351e:	88fb      	ldrh	r3, [r7, #6]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e070      	b.n	800360a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2221      	movs	r2, #33	@ 0x21
 8003534:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003536:	f7fd ffa7 	bl	8001488 <HAL_GetTick>
 800353a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	88fa      	ldrh	r2, [r7, #6]
 8003540:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	88fa      	ldrh	r2, [r7, #6]
 8003548:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003554:	d108      	bne.n	8003568 <HAL_UART_Transmit+0x68>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d104      	bne.n	8003568 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800355e:	2300      	movs	r3, #0
 8003560:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	61bb      	str	r3, [r7, #24]
 8003566:	e003      	b.n	8003570 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800356c:	2300      	movs	r3, #0
 800356e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003570:	e02f      	b.n	80035d2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	2200      	movs	r2, #0
 800357a:	2180      	movs	r1, #128	@ 0x80
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 fdcd 	bl	800411c <UART_WaitOnFlagUntilTimeout>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d004      	beq.n	8003592 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2220      	movs	r2, #32
 800358c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e03b      	b.n	800360a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10b      	bne.n	80035b0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	881a      	ldrh	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035a4:	b292      	uxth	r2, r2
 80035a6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	3302      	adds	r3, #2
 80035ac:	61bb      	str	r3, [r7, #24]
 80035ae:	e007      	b.n	80035c0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	781a      	ldrb	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	3301      	adds	r3, #1
 80035be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	3b01      	subs	r3, #1
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80035d8:	b29b      	uxth	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1c9      	bne.n	8003572 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2200      	movs	r2, #0
 80035e6:	2140      	movs	r1, #64	@ 0x40
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 fd97 	bl	800411c <UART_WaitOnFlagUntilTimeout>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d004      	beq.n	80035fe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2220      	movs	r2, #32
 80035f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e005      	b.n	800360a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2220      	movs	r2, #32
 8003602:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003604:	2300      	movs	r3, #0
 8003606:	e000      	b.n	800360a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003608:	2302      	movs	r3, #2
  }
}
 800360a:	4618      	mov	r0, r3
 800360c:	3720      	adds	r7, #32
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
	...

08003614 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b0ba      	sub	sp, #232	@ 0xe8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800363a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800363e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003642:	4013      	ands	r3, r2
 8003644:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003648:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800364c:	2b00      	cmp	r3, #0
 800364e:	d115      	bne.n	800367c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003654:	f003 0320 	and.w	r3, r3, #32
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00f      	beq.n	800367c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800365c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003660:	f003 0320 	and.w	r3, r3, #32
 8003664:	2b00      	cmp	r3, #0
 8003666:	d009      	beq.n	800367c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 82ab 	beq.w	8003bc8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	4798      	blx	r3
      }
      return;
 800367a:	e2a5      	b.n	8003bc8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800367c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 8117 	beq.w	80038b4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003686:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d106      	bne.n	80036a0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003692:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003696:	4b85      	ldr	r3, [pc, #532]	@ (80038ac <HAL_UART_IRQHandler+0x298>)
 8003698:	4013      	ands	r3, r2
 800369a:	2b00      	cmp	r3, #0
 800369c:	f000 810a 	beq.w	80038b4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80036a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d011      	beq.n	80036d0 <HAL_UART_IRQHandler+0xbc>
 80036ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00b      	beq.n	80036d0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2201      	movs	r2, #1
 80036be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036c6:	f043 0201 	orr.w	r2, r3, #1
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d011      	beq.n	8003700 <HAL_UART_IRQHandler+0xec>
 80036dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00b      	beq.n	8003700 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2202      	movs	r2, #2
 80036ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036f6:	f043 0204 	orr.w	r2, r3, #4
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b00      	cmp	r3, #0
 800370a:	d011      	beq.n	8003730 <HAL_UART_IRQHandler+0x11c>
 800370c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00b      	beq.n	8003730 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2204      	movs	r2, #4
 800371e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003726:	f043 0202 	orr.w	r2, r3, #2
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003734:	f003 0308 	and.w	r3, r3, #8
 8003738:	2b00      	cmp	r3, #0
 800373a:	d017      	beq.n	800376c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800373c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003740:	f003 0320 	and.w	r3, r3, #32
 8003744:	2b00      	cmp	r3, #0
 8003746:	d105      	bne.n	8003754 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003748:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800374c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00b      	beq.n	800376c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2208      	movs	r2, #8
 800375a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003762:	f043 0208 	orr.w	r2, r3, #8
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800376c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003770:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003774:	2b00      	cmp	r3, #0
 8003776:	d012      	beq.n	800379e <HAL_UART_IRQHandler+0x18a>
 8003778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800377c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00c      	beq.n	800379e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800378c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003794:	f043 0220 	orr.w	r2, r3, #32
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 8211 	beq.w	8003bcc <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80037aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037ae:	f003 0320 	and.w	r3, r3, #32
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00d      	beq.n	80037d2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80037b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037ba:	f003 0320 	and.w	r3, r3, #32
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d007      	beq.n	80037d2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037e6:	2b40      	cmp	r3, #64	@ 0x40
 80037e8:	d005      	beq.n	80037f6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80037ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037ee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d04f      	beq.n	8003896 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 fdc4 	bl	8004384 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003806:	2b40      	cmp	r3, #64	@ 0x40
 8003808:	d141      	bne.n	800388e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	3308      	adds	r3, #8
 8003810:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003814:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003818:	e853 3f00 	ldrex	r3, [r3]
 800381c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003820:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003824:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003828:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	3308      	adds	r3, #8
 8003832:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003836:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800383a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003842:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003846:	e841 2300 	strex	r3, r2, [r1]
 800384a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800384e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1d9      	bne.n	800380a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800385a:	2b00      	cmp	r3, #0
 800385c:	d013      	beq.n	8003886 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003862:	4a13      	ldr	r2, [pc, #76]	@ (80038b0 <HAL_UART_IRQHandler+0x29c>)
 8003864:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800386a:	4618      	mov	r0, r3
 800386c:	f7fe f831 	bl	80018d2 <HAL_DMA_Abort_IT>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d017      	beq.n	80038a6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800387a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003880:	4610      	mov	r0, r2
 8003882:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003884:	e00f      	b.n	80038a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7fd fd58 	bl	800133c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800388c:	e00b      	b.n	80038a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7fd fd54 	bl	800133c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003894:	e007      	b.n	80038a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7fd fd50 	bl	800133c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80038a4:	e192      	b.n	8003bcc <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a6:	bf00      	nop
    return;
 80038a8:	e190      	b.n	8003bcc <HAL_UART_IRQHandler+0x5b8>
 80038aa:	bf00      	nop
 80038ac:	04000120 	.word	0x04000120
 80038b0:	0800462f 	.word	0x0800462f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	f040 814b 	bne.w	8003b54 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80038be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038c2:	f003 0310 	and.w	r3, r3, #16
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 8144 	beq.w	8003b54 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80038cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038d0:	f003 0310 	and.w	r3, r3, #16
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 813d 	beq.w	8003b54 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2210      	movs	r2, #16
 80038e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ec:	2b40      	cmp	r3, #64	@ 0x40
 80038ee:	f040 80b5 	bne.w	8003a5c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038fe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 8164 	beq.w	8003bd0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800390e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003912:	429a      	cmp	r2, r3
 8003914:	f080 815c 	bcs.w	8003bd0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800391e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	2b20      	cmp	r3, #32
 800392a:	f000 8086 	beq.w	8003a3a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003936:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800393a:	e853 3f00 	ldrex	r3, [r3]
 800393e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003942:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003946:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800394a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	461a      	mov	r2, r3
 8003954:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003958:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800395c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003960:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003964:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003968:	e841 2300 	strex	r3, r2, [r1]
 800396c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003970:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1da      	bne.n	800392e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	3308      	adds	r3, #8
 800397e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003980:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003982:	e853 3f00 	ldrex	r3, [r3]
 8003986:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003988:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800398a:	f023 0301 	bic.w	r3, r3, #1
 800398e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	3308      	adds	r3, #8
 8003998:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800399c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80039a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80039a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80039a8:	e841 2300 	strex	r3, r2, [r1]
 80039ac:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80039ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1e1      	bne.n	8003978 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	3308      	adds	r3, #8
 80039ba:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039be:	e853 3f00 	ldrex	r3, [r3]
 80039c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80039c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	3308      	adds	r3, #8
 80039d4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80039d8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80039da:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039dc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80039de:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80039e0:	e841 2300 	strex	r3, r2, [r1]
 80039e4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80039e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1e3      	bne.n	80039b4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2220      	movs	r2, #32
 80039f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a02:	e853 3f00 	ldrex	r3, [r3]
 8003a06:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a0a:	f023 0310 	bic.w	r3, r3, #16
 8003a0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	461a      	mov	r2, r3
 8003a18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a1e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a20:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a24:	e841 2300 	strex	r3, r2, [r1]
 8003a28:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003a2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1e4      	bne.n	80039fa <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7fd ff0e 	bl	8001856 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	4619      	mov	r1, r3
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7fd fc3d 	bl	80012d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a5a:	e0b9      	b.n	8003bd0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 80ab 	beq.w	8003bd4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003a7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 80a6 	beq.w	8003bd4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a90:	e853 3f00 	ldrex	r3, [r3]
 8003a94:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003aaa:	647b      	str	r3, [r7, #68]	@ 0x44
 8003aac:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ab0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ab2:	e841 2300 	strex	r3, r2, [r1]
 8003ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ab8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1e4      	bne.n	8003a88 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	3308      	adds	r3, #8
 8003ac4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac8:	e853 3f00 	ldrex	r3, [r3]
 8003acc:	623b      	str	r3, [r7, #32]
   return(result);
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	f023 0301 	bic.w	r3, r3, #1
 8003ad4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	3308      	adds	r3, #8
 8003ade:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003ae2:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ae8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003aea:	e841 2300 	strex	r3, r2, [r1]
 8003aee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1e3      	bne.n	8003abe <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2220      	movs	r2, #32
 8003afa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	e853 3f00 	ldrex	r3, [r3]
 8003b16:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f023 0310 	bic.w	r3, r3, #16
 8003b1e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	461a      	mov	r2, r3
 8003b28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b2c:	61fb      	str	r3, [r7, #28]
 8003b2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b30:	69b9      	ldr	r1, [r7, #24]
 8003b32:	69fa      	ldr	r2, [r7, #28]
 8003b34:	e841 2300 	strex	r3, r2, [r1]
 8003b38:	617b      	str	r3, [r7, #20]
   return(result);
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1e4      	bne.n	8003b0a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2202      	movs	r2, #2
 8003b44:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f7fd fbc1 	bl	80012d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b52:	e03f      	b.n	8003bd4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00e      	beq.n	8003b7e <HAL_UART_IRQHandler+0x56a>
 8003b60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d008      	beq.n	8003b7e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003b74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 fe00 	bl	800477c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b7c:	e02d      	b.n	8003bda <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00e      	beq.n	8003ba8 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d008      	beq.n	8003ba8 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d01c      	beq.n	8003bd8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	4798      	blx	r3
    }
    return;
 8003ba6:	e017      	b.n	8003bd8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d012      	beq.n	8003bda <HAL_UART_IRQHandler+0x5c6>
 8003bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00c      	beq.n	8003bda <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 fd4a 	bl	800465a <UART_EndTransmit_IT>
    return;
 8003bc6:	e008      	b.n	8003bda <HAL_UART_IRQHandler+0x5c6>
      return;
 8003bc8:	bf00      	nop
 8003bca:	e006      	b.n	8003bda <HAL_UART_IRQHandler+0x5c6>
    return;
 8003bcc:	bf00      	nop
 8003bce:	e004      	b.n	8003bda <HAL_UART_IRQHandler+0x5c6>
      return;
 8003bd0:	bf00      	nop
 8003bd2:	e002      	b.n	8003bda <HAL_UART_IRQHandler+0x5c6>
      return;
 8003bd4:	bf00      	nop
 8003bd6:	e000      	b.n	8003bda <HAL_UART_IRQHandler+0x5c6>
    return;
 8003bd8:	bf00      	nop
  }

}
 8003bda:	37e8      	adds	r7, #232	@ 0xe8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b088      	sub	sp, #32
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689a      	ldr	r2, [r3, #8]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	431a      	orrs	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	431a      	orrs	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	69db      	ldr	r3, [r3, #28]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	4b8a      	ldr	r3, [pc, #552]	@ (8003e70 <UART_SetConfig+0x254>)
 8003c48:	4013      	ands	r3, r2
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6812      	ldr	r2, [r2, #0]
 8003c4e:	6979      	ldr	r1, [r7, #20]
 8003c50:	430b      	orrs	r3, r1
 8003c52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68da      	ldr	r2, [r3, #12]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a78      	ldr	r2, [pc, #480]	@ (8003e74 <UART_SetConfig+0x258>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d120      	bne.n	8003cda <UART_SetConfig+0xbe>
 8003c98:	4b77      	ldr	r3, [pc, #476]	@ (8003e78 <UART_SetConfig+0x25c>)
 8003c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9c:	f003 0303 	and.w	r3, r3, #3
 8003ca0:	2b03      	cmp	r3, #3
 8003ca2:	d817      	bhi.n	8003cd4 <UART_SetConfig+0xb8>
 8003ca4:	a201      	add	r2, pc, #4	@ (adr r2, 8003cac <UART_SetConfig+0x90>)
 8003ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003caa:	bf00      	nop
 8003cac:	08003cbd 	.word	0x08003cbd
 8003cb0:	08003cc9 	.word	0x08003cc9
 8003cb4:	08003ccf 	.word	0x08003ccf
 8003cb8:	08003cc3 	.word	0x08003cc3
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	77fb      	strb	r3, [r7, #31]
 8003cc0:	e01d      	b.n	8003cfe <UART_SetConfig+0xe2>
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	77fb      	strb	r3, [r7, #31]
 8003cc6:	e01a      	b.n	8003cfe <UART_SetConfig+0xe2>
 8003cc8:	2304      	movs	r3, #4
 8003cca:	77fb      	strb	r3, [r7, #31]
 8003ccc:	e017      	b.n	8003cfe <UART_SetConfig+0xe2>
 8003cce:	2308      	movs	r3, #8
 8003cd0:	77fb      	strb	r3, [r7, #31]
 8003cd2:	e014      	b.n	8003cfe <UART_SetConfig+0xe2>
 8003cd4:	2310      	movs	r3, #16
 8003cd6:	77fb      	strb	r3, [r7, #31]
 8003cd8:	e011      	b.n	8003cfe <UART_SetConfig+0xe2>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a67      	ldr	r2, [pc, #412]	@ (8003e7c <UART_SetConfig+0x260>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d102      	bne.n	8003cea <UART_SetConfig+0xce>
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	77fb      	strb	r3, [r7, #31]
 8003ce8:	e009      	b.n	8003cfe <UART_SetConfig+0xe2>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a64      	ldr	r2, [pc, #400]	@ (8003e80 <UART_SetConfig+0x264>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d102      	bne.n	8003cfa <UART_SetConfig+0xde>
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	77fb      	strb	r3, [r7, #31]
 8003cf8:	e001      	b.n	8003cfe <UART_SetConfig+0xe2>
 8003cfa:	2310      	movs	r3, #16
 8003cfc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d06:	d15a      	bne.n	8003dbe <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003d08:	7ffb      	ldrb	r3, [r7, #31]
 8003d0a:	2b08      	cmp	r3, #8
 8003d0c:	d827      	bhi.n	8003d5e <UART_SetConfig+0x142>
 8003d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d14 <UART_SetConfig+0xf8>)
 8003d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d14:	08003d39 	.word	0x08003d39
 8003d18:	08003d41 	.word	0x08003d41
 8003d1c:	08003d49 	.word	0x08003d49
 8003d20:	08003d5f 	.word	0x08003d5f
 8003d24:	08003d4f 	.word	0x08003d4f
 8003d28:	08003d5f 	.word	0x08003d5f
 8003d2c:	08003d5f 	.word	0x08003d5f
 8003d30:	08003d5f 	.word	0x08003d5f
 8003d34:	08003d57 	.word	0x08003d57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d38:	f7ff fa7a 	bl	8003230 <HAL_RCC_GetPCLK1Freq>
 8003d3c:	61b8      	str	r0, [r7, #24]
        break;
 8003d3e:	e013      	b.n	8003d68 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d40:	f7ff fa98 	bl	8003274 <HAL_RCC_GetPCLK2Freq>
 8003d44:	61b8      	str	r0, [r7, #24]
        break;
 8003d46:	e00f      	b.n	8003d68 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d48:	4b4e      	ldr	r3, [pc, #312]	@ (8003e84 <UART_SetConfig+0x268>)
 8003d4a:	61bb      	str	r3, [r7, #24]
        break;
 8003d4c:	e00c      	b.n	8003d68 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d4e:	f7ff fa0f 	bl	8003170 <HAL_RCC_GetSysClockFreq>
 8003d52:	61b8      	str	r0, [r7, #24]
        break;
 8003d54:	e008      	b.n	8003d68 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d5a:	61bb      	str	r3, [r7, #24]
        break;
 8003d5c:	e004      	b.n	8003d68 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	77bb      	strb	r3, [r7, #30]
        break;
 8003d66:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d074      	beq.n	8003e58 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	005a      	lsls	r2, r3, #1
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	085b      	lsrs	r3, r3, #1
 8003d78:	441a      	add	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d82:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	2b0f      	cmp	r3, #15
 8003d88:	d916      	bls.n	8003db8 <UART_SetConfig+0x19c>
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d90:	d212      	bcs.n	8003db8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	f023 030f 	bic.w	r3, r3, #15
 8003d9a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	085b      	lsrs	r3, r3, #1
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	f003 0307 	and.w	r3, r3, #7
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	89fb      	ldrh	r3, [r7, #14]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	89fa      	ldrh	r2, [r7, #14]
 8003db4:	60da      	str	r2, [r3, #12]
 8003db6:	e04f      	b.n	8003e58 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	77bb      	strb	r3, [r7, #30]
 8003dbc:	e04c      	b.n	8003e58 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003dbe:	7ffb      	ldrb	r3, [r7, #31]
 8003dc0:	2b08      	cmp	r3, #8
 8003dc2:	d828      	bhi.n	8003e16 <UART_SetConfig+0x1fa>
 8003dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8003dcc <UART_SetConfig+0x1b0>)
 8003dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dca:	bf00      	nop
 8003dcc:	08003df1 	.word	0x08003df1
 8003dd0:	08003df9 	.word	0x08003df9
 8003dd4:	08003e01 	.word	0x08003e01
 8003dd8:	08003e17 	.word	0x08003e17
 8003ddc:	08003e07 	.word	0x08003e07
 8003de0:	08003e17 	.word	0x08003e17
 8003de4:	08003e17 	.word	0x08003e17
 8003de8:	08003e17 	.word	0x08003e17
 8003dec:	08003e0f 	.word	0x08003e0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003df0:	f7ff fa1e 	bl	8003230 <HAL_RCC_GetPCLK1Freq>
 8003df4:	61b8      	str	r0, [r7, #24]
        break;
 8003df6:	e013      	b.n	8003e20 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003df8:	f7ff fa3c 	bl	8003274 <HAL_RCC_GetPCLK2Freq>
 8003dfc:	61b8      	str	r0, [r7, #24]
        break;
 8003dfe:	e00f      	b.n	8003e20 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e00:	4b20      	ldr	r3, [pc, #128]	@ (8003e84 <UART_SetConfig+0x268>)
 8003e02:	61bb      	str	r3, [r7, #24]
        break;
 8003e04:	e00c      	b.n	8003e20 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e06:	f7ff f9b3 	bl	8003170 <HAL_RCC_GetSysClockFreq>
 8003e0a:	61b8      	str	r0, [r7, #24]
        break;
 8003e0c:	e008      	b.n	8003e20 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e12:	61bb      	str	r3, [r7, #24]
        break;
 8003e14:	e004      	b.n	8003e20 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003e16:	2300      	movs	r3, #0
 8003e18:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	77bb      	strb	r3, [r7, #30]
        break;
 8003e1e:	bf00      	nop
    }

    if (pclk != 0U)
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d018      	beq.n	8003e58 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	085a      	lsrs	r2, r3, #1
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	441a      	add	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e38:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	2b0f      	cmp	r3, #15
 8003e3e:	d909      	bls.n	8003e54 <UART_SetConfig+0x238>
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e46:	d205      	bcs.n	8003e54 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	60da      	str	r2, [r3, #12]
 8003e52:	e001      	b.n	8003e58 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003e64:	7fbb      	ldrb	r3, [r7, #30]
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3720      	adds	r7, #32
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	efff69f3 	.word	0xefff69f3
 8003e74:	40013800 	.word	0x40013800
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	40004400 	.word	0x40004400
 8003e80:	40004800 	.word	0x40004800
 8003e84:	007a1200 	.word	0x007a1200

08003e88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e94:	f003 0308 	and.w	r3, r3, #8
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00a      	beq.n	8003eb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00a      	beq.n	8003ed4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00a      	beq.n	8003ef6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efa:	f003 0304 	and.w	r3, r3, #4
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	430a      	orrs	r2, r1
 8003f16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1c:	f003 0310 	and.w	r3, r3, #16
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00a      	beq.n	8003f3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3e:	f003 0320 	and.w	r3, r3, #32
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d01a      	beq.n	8003f9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f86:	d10a      	bne.n	8003f9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00a      	beq.n	8003fc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	605a      	str	r2, [r3, #4]
  }
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b098      	sub	sp, #96	@ 0x60
 8003fd0:	af02      	add	r7, sp, #8
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fdc:	f7fd fa54 	bl	8001488 <HAL_GetTick>
 8003fe0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0308 	and.w	r3, r3, #8
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d12e      	bne.n	800404e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ff0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f88c 	bl	800411c <UART_WaitOnFlagUntilTimeout>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d021      	beq.n	800404e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004012:	e853 3f00 	ldrex	r3, [r3]
 8004016:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800401a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800401e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	461a      	mov	r2, r3
 8004026:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004028:	647b      	str	r3, [r7, #68]	@ 0x44
 800402a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800402e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004030:	e841 2300 	strex	r3, r2, [r1]
 8004034:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1e6      	bne.n	800400a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2220      	movs	r2, #32
 8004040:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e062      	b.n	8004114 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	2b04      	cmp	r3, #4
 800405a:	d149      	bne.n	80040f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800405c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004064:	2200      	movs	r2, #0
 8004066:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f856 	bl	800411c <UART_WaitOnFlagUntilTimeout>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d03c      	beq.n	80040f0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407e:	e853 3f00 	ldrex	r3, [r3]
 8004082:	623b      	str	r3, [r7, #32]
   return(result);
 8004084:	6a3b      	ldr	r3, [r7, #32]
 8004086:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800408a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	461a      	mov	r2, r3
 8004092:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004094:	633b      	str	r3, [r7, #48]	@ 0x30
 8004096:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004098:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800409a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800409c:	e841 2300 	strex	r3, r2, [r1]
 80040a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1e6      	bne.n	8004076 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	3308      	adds	r3, #8
 80040ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	e853 3f00 	ldrex	r3, [r3]
 80040b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f023 0301 	bic.w	r3, r3, #1
 80040be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	3308      	adds	r3, #8
 80040c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040c8:	61fa      	str	r2, [r7, #28]
 80040ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040cc:	69b9      	ldr	r1, [r7, #24]
 80040ce:	69fa      	ldr	r2, [r7, #28]
 80040d0:	e841 2300 	strex	r3, r2, [r1]
 80040d4:	617b      	str	r3, [r7, #20]
   return(result);
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1e5      	bne.n	80040a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2220      	movs	r2, #32
 80040e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e011      	b.n	8004114 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2220      	movs	r2, #32
 80040f4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2220      	movs	r2, #32
 80040fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3758      	adds	r7, #88	@ 0x58
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	603b      	str	r3, [r7, #0]
 8004128:	4613      	mov	r3, r2
 800412a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800412c:	e04f      	b.n	80041ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004134:	d04b      	beq.n	80041ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004136:	f7fd f9a7 	bl	8001488 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	429a      	cmp	r2, r3
 8004144:	d302      	bcc.n	800414c <UART_WaitOnFlagUntilTimeout+0x30>
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d101      	bne.n	8004150 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e04e      	b.n	80041ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0304 	and.w	r3, r3, #4
 800415a:	2b00      	cmp	r3, #0
 800415c:	d037      	beq.n	80041ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	2b80      	cmp	r3, #128	@ 0x80
 8004162:	d034      	beq.n	80041ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	2b40      	cmp	r3, #64	@ 0x40
 8004168:	d031      	beq.n	80041ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	f003 0308 	and.w	r3, r3, #8
 8004174:	2b08      	cmp	r3, #8
 8004176:	d110      	bne.n	800419a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2208      	movs	r2, #8
 800417e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 f8ff 	bl	8004384 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2208      	movs	r2, #8
 800418a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e029      	b.n	80041ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	69db      	ldr	r3, [r3, #28]
 80041a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041a8:	d111      	bne.n	80041ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80041b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 f8e5 	bl	8004384 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2220      	movs	r2, #32
 80041be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e00f      	b.n	80041ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	69da      	ldr	r2, [r3, #28]
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	4013      	ands	r3, r2
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	429a      	cmp	r2, r3
 80041dc:	bf0c      	ite	eq
 80041de:	2301      	moveq	r3, #1
 80041e0:	2300      	movne	r3, #0
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	461a      	mov	r2, r3
 80041e6:	79fb      	ldrb	r3, [r7, #7]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d0a0      	beq.n	800412e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
	...

080041f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b096      	sub	sp, #88	@ 0x58
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	4613      	mov	r3, r2
 8004204:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	88fa      	ldrh	r2, [r7, #6]
 8004210:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2222      	movs	r2, #34	@ 0x22
 8004220:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004228:	2b00      	cmp	r3, #0
 800422a:	d028      	beq.n	800427e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004230:	4a3e      	ldr	r2, [pc, #248]	@ (800432c <UART_Start_Receive_DMA+0x134>)
 8004232:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004238:	4a3d      	ldr	r2, [pc, #244]	@ (8004330 <UART_Start_Receive_DMA+0x138>)
 800423a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004240:	4a3c      	ldr	r2, [pc, #240]	@ (8004334 <UART_Start_Receive_DMA+0x13c>)
 8004242:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004248:	2200      	movs	r2, #0
 800424a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	3324      	adds	r3, #36	@ 0x24
 8004256:	4619      	mov	r1, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800425c:	461a      	mov	r2, r3
 800425e:	88fb      	ldrh	r3, [r7, #6]
 8004260:	f7fd fa9a 	bl	8001798 <HAL_DMA_Start_IT>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d009      	beq.n	800427e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2210      	movs	r2, #16
 800426e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2220      	movs	r2, #32
 8004276:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e051      	b.n	8004322 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d018      	beq.n	80042b8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800428e:	e853 3f00 	ldrex	r3, [r3]
 8004292:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004296:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800429a:	657b      	str	r3, [r7, #84]	@ 0x54
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	461a      	mov	r2, r3
 80042a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042a6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80042aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042ac:	e841 2300 	strex	r3, r2, [r1]
 80042b0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80042b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1e6      	bne.n	8004286 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	3308      	adds	r3, #8
 80042be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042c2:	e853 3f00 	ldrex	r3, [r3]
 80042c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ca:	f043 0301 	orr.w	r3, r3, #1
 80042ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	3308      	adds	r3, #8
 80042d6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80042d8:	637a      	str	r2, [r7, #52]	@ 0x34
 80042da:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80042de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80042e0:	e841 2300 	strex	r3, r2, [r1]
 80042e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80042e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1e5      	bne.n	80042b8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	3308      	adds	r3, #8
 80042f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	e853 3f00 	ldrex	r3, [r3]
 80042fa:	613b      	str	r3, [r7, #16]
   return(result);
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004302:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	3308      	adds	r3, #8
 800430a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800430c:	623a      	str	r2, [r7, #32]
 800430e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004310:	69f9      	ldr	r1, [r7, #28]
 8004312:	6a3a      	ldr	r2, [r7, #32]
 8004314:	e841 2300 	strex	r3, r2, [r1]
 8004318:	61bb      	str	r3, [r7, #24]
   return(result);
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1e5      	bne.n	80042ec <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3758      	adds	r7, #88	@ 0x58
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	0800444d 	.word	0x0800444d
 8004330:	08004573 	.word	0x08004573
 8004334:	080045b1 	.word	0x080045b1

08004338 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004338:	b480      	push	{r7}
 800433a:	b089      	sub	sp, #36	@ 0x24
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	e853 3f00 	ldrex	r3, [r3]
 800434c:	60bb      	str	r3, [r7, #8]
   return(result);
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004354:	61fb      	str	r3, [r7, #28]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	461a      	mov	r2, r3
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	61bb      	str	r3, [r7, #24]
 8004360:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004362:	6979      	ldr	r1, [r7, #20]
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	e841 2300 	strex	r3, r2, [r1]
 800436a:	613b      	str	r3, [r7, #16]
   return(result);
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1e6      	bne.n	8004340 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2220      	movs	r2, #32
 8004376:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004378:	bf00      	nop
 800437a:	3724      	adds	r7, #36	@ 0x24
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004384:	b480      	push	{r7}
 8004386:	b095      	sub	sp, #84	@ 0x54
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004394:	e853 3f00 	ldrex	r3, [r3]
 8004398:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800439a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800439c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	461a      	mov	r2, r3
 80043a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80043ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043b2:	e841 2300 	strex	r3, r2, [r1]
 80043b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1e6      	bne.n	800438c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	3308      	adds	r3, #8
 80043c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c6:	6a3b      	ldr	r3, [r7, #32]
 80043c8:	e853 3f00 	ldrex	r3, [r3]
 80043cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	f023 0301 	bic.w	r3, r3, #1
 80043d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	3308      	adds	r3, #8
 80043dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043e6:	e841 2300 	strex	r3, r2, [r1]
 80043ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1e5      	bne.n	80043be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d118      	bne.n	800442c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	e853 3f00 	ldrex	r3, [r3]
 8004406:	60bb      	str	r3, [r7, #8]
   return(result);
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	f023 0310 	bic.w	r3, r3, #16
 800440e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	461a      	mov	r2, r3
 8004416:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004418:	61bb      	str	r3, [r7, #24]
 800441a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441c:	6979      	ldr	r1, [r7, #20]
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	e841 2300 	strex	r3, r2, [r1]
 8004424:	613b      	str	r3, [r7, #16]
   return(result);
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1e6      	bne.n	80043fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2220      	movs	r2, #32
 8004430:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004440:	bf00      	nop
 8004442:	3754      	adds	r7, #84	@ 0x54
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b09c      	sub	sp, #112	@ 0x70
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004458:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	2b20      	cmp	r3, #32
 8004460:	d071      	beq.n	8004546 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8004462:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004464:	2200      	movs	r2, #0
 8004466:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800446a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004470:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004472:	e853 3f00 	ldrex	r3, [r3]
 8004476:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004478:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800447a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800447e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004480:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	461a      	mov	r2, r3
 8004486:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004488:	65bb      	str	r3, [r7, #88]	@ 0x58
 800448a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800448e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004490:	e841 2300 	strex	r3, r2, [r1]
 8004494:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004496:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1e6      	bne.n	800446a <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800449c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	3308      	adds	r3, #8
 80044a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044a6:	e853 3f00 	ldrex	r3, [r3]
 80044aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80044ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ae:	f023 0301 	bic.w	r3, r3, #1
 80044b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80044b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	3308      	adds	r3, #8
 80044ba:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80044bc:	647a      	str	r2, [r7, #68]	@ 0x44
 80044be:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80044c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044c4:	e841 2300 	strex	r3, r2, [r1]
 80044c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80044ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1e5      	bne.n	800449c <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	3308      	adds	r3, #8
 80044d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044da:	e853 3f00 	ldrex	r3, [r3]
 80044de:	623b      	str	r3, [r7, #32]
   return(result);
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80044e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	3308      	adds	r3, #8
 80044ee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80044f0:	633a      	str	r2, [r7, #48]	@ 0x30
 80044f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044f8:	e841 2300 	strex	r3, r2, [r1]
 80044fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1e5      	bne.n	80044d0 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004504:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004506:	2220      	movs	r2, #32
 8004508:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800450c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800450e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004510:	2b01      	cmp	r3, #1
 8004512:	d118      	bne.n	8004546 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004514:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	e853 3f00 	ldrex	r3, [r3]
 8004520:	60fb      	str	r3, [r7, #12]
   return(result);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f023 0310 	bic.w	r3, r3, #16
 8004528:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800452a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	461a      	mov	r2, r3
 8004530:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004532:	61fb      	str	r3, [r7, #28]
 8004534:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004536:	69b9      	ldr	r1, [r7, #24]
 8004538:	69fa      	ldr	r2, [r7, #28]
 800453a:	e841 2300 	strex	r3, r2, [r1]
 800453e:	617b      	str	r3, [r7, #20]
   return(result);
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1e6      	bne.n	8004514 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004546:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004548:	2200      	movs	r2, #0
 800454a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800454c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800454e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004550:	2b01      	cmp	r3, #1
 8004552:	d107      	bne.n	8004564 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004554:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004556:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800455a:	4619      	mov	r1, r3
 800455c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800455e:	f7fc feb9 	bl	80012d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004562:	e002      	b.n	800456a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004564:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004566:	f7ff fb45 	bl	8003bf4 <HAL_UART_RxCpltCallback>
}
 800456a:	bf00      	nop
 800456c:	3770      	adds	r7, #112	@ 0x70
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b084      	sub	sp, #16
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2201      	movs	r2, #1
 8004584:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800458a:	2b01      	cmp	r3, #1
 800458c:	d109      	bne.n	80045a2 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004594:	085b      	lsrs	r3, r3, #1
 8004596:	b29b      	uxth	r3, r3
 8004598:	4619      	mov	r1, r3
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f7fc fe9a 	bl	80012d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045a0:	e002      	b.n	80045a8 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f7ff fb30 	bl	8003c08 <HAL_UART_RxHalfCpltCallback>
}
 80045a8:	bf00      	nop
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045bc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045c2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045ca:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045d6:	2b80      	cmp	r3, #128	@ 0x80
 80045d8:	d109      	bne.n	80045ee <UART_DMAError+0x3e>
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	2b21      	cmp	r3, #33	@ 0x21
 80045de:	d106      	bne.n	80045ee <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80045e8:	6978      	ldr	r0, [r7, #20]
 80045ea:	f7ff fea5 	bl	8004338 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045f8:	2b40      	cmp	r3, #64	@ 0x40
 80045fa:	d109      	bne.n	8004610 <UART_DMAError+0x60>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2b22      	cmp	r3, #34	@ 0x22
 8004600:	d106      	bne.n	8004610 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	2200      	movs	r2, #0
 8004606:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800460a:	6978      	ldr	r0, [r7, #20]
 800460c:	f7ff feba 	bl	8004384 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004616:	f043 0210 	orr.w	r2, r3, #16
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004620:	6978      	ldr	r0, [r7, #20]
 8004622:	f7fc fe8b 	bl	800133c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004626:	bf00      	nop
 8004628:	3718      	adds	r7, #24
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b084      	sub	sp, #16
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f7fc fe75 	bl	800133c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004652:	bf00      	nop
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b088      	sub	sp, #32
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	e853 3f00 	ldrex	r3, [r3]
 800466e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004676:	61fb      	str	r3, [r7, #28]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	461a      	mov	r2, r3
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	61bb      	str	r3, [r7, #24]
 8004682:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004684:	6979      	ldr	r1, [r7, #20]
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	e841 2300 	strex	r3, r2, [r1]
 800468c:	613b      	str	r3, [r7, #16]
   return(result);
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1e6      	bne.n	8004662 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2220      	movs	r2, #32
 8004698:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f7ff fa9d 	bl	8003be0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046a6:	bf00      	nop
 80046a8:	3720      	adds	r7, #32
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b086      	sub	sp, #24
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	60f8      	str	r0, [r7, #12]
 80046b6:	60b9      	str	r1, [r7, #8]
 80046b8:	607a      	str	r2, [r7, #4]
 80046ba:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e056      	b.n	8004774 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d106      	bne.n	80046dc <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f7fc fcf4 	bl	80010c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2224      	movs	r2, #36	@ 0x24
 80046e0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f022 0201 	bic.w	r2, r2, #1
 80046f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d002      	beq.n	8004700 <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f7ff fbc4 	bl	8003e88 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f7ff fa8b 	bl	8003c1c <UART_SetConfig>
 8004706:	4603      	mov	r3, r0
 8004708:	2b01      	cmp	r3, #1
 800470a:	d101      	bne.n	8004710 <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e031      	b.n	8004774 <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689a      	ldr	r2, [r3, #8]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800471e:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	430a      	orrs	r2, r1
 8004732:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	055b      	lsls	r3, r3, #21
 8004738:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	041b      	lsls	r3, r3, #16
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	4313      	orrs	r3, r2
 8004742:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 800474e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	6812      	ldr	r2, [r2, #0]
 8004756:	6979      	ldr	r1, [r7, #20]
 8004758:	430b      	orrs	r3, r1
 800475a:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0201 	orr.w	r2, r2, #1
 800476a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f7ff fc2d 	bl	8003fcc <UART_CheckIdleState>
 8004772:	4603      	mov	r3, r0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3718      	adds	r7, #24
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b08c      	sub	sp, #48	@ 0x30
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	4613      	mov	r3, r2
 800479c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047a4:	2b20      	cmp	r3, #32
 80047a6:	d142      	bne.n	800482e <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d002      	beq.n	80047b4 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80047ae:	88fb      	ldrh	r3, [r7, #6]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e03b      	b.n	8004830 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2201      	movs	r2, #1
 80047bc:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80047c4:	88fb      	ldrh	r3, [r7, #6]
 80047c6:	461a      	mov	r2, r3
 80047c8:	68b9      	ldr	r1, [r7, #8]
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f7ff fd14 	bl	80041f8 <UART_Start_Receive_DMA>
 80047d0:	4603      	mov	r3, r0
 80047d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80047d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d124      	bne.n	8004828 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d11d      	bne.n	8004822 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2210      	movs	r2, #16
 80047ec:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	e853 3f00 	ldrex	r3, [r3]
 80047fa:	617b      	str	r3, [r7, #20]
   return(result);
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	f043 0310 	orr.w	r3, r3, #16
 8004802:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	461a      	mov	r2, r3
 800480a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800480c:	627b      	str	r3, [r7, #36]	@ 0x24
 800480e:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004810:	6a39      	ldr	r1, [r7, #32]
 8004812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004814:	e841 2300 	strex	r3, r2, [r1]
 8004818:	61fb      	str	r3, [r7, #28]
   return(result);
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1e6      	bne.n	80047ee <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8004820:	e002      	b.n	8004828 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8004828:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800482c:	e000      	b.n	8004830 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800482e:	2302      	movs	r3, #2
  }
}
 8004830:	4618      	mov	r0, r3
 8004832:	3730      	adds	r7, #48	@ 0x30
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <memset>:
 8004838:	4402      	add	r2, r0
 800483a:	4603      	mov	r3, r0
 800483c:	4293      	cmp	r3, r2
 800483e:	d100      	bne.n	8004842 <memset+0xa>
 8004840:	4770      	bx	lr
 8004842:	f803 1b01 	strb.w	r1, [r3], #1
 8004846:	e7f9      	b.n	800483c <memset+0x4>

08004848 <__libc_init_array>:
 8004848:	b570      	push	{r4, r5, r6, lr}
 800484a:	4d0d      	ldr	r5, [pc, #52]	@ (8004880 <__libc_init_array+0x38>)
 800484c:	4c0d      	ldr	r4, [pc, #52]	@ (8004884 <__libc_init_array+0x3c>)
 800484e:	1b64      	subs	r4, r4, r5
 8004850:	10a4      	asrs	r4, r4, #2
 8004852:	2600      	movs	r6, #0
 8004854:	42a6      	cmp	r6, r4
 8004856:	d109      	bne.n	800486c <__libc_init_array+0x24>
 8004858:	4d0b      	ldr	r5, [pc, #44]	@ (8004888 <__libc_init_array+0x40>)
 800485a:	4c0c      	ldr	r4, [pc, #48]	@ (800488c <__libc_init_array+0x44>)
 800485c:	f000 f826 	bl	80048ac <_init>
 8004860:	1b64      	subs	r4, r4, r5
 8004862:	10a4      	asrs	r4, r4, #2
 8004864:	2600      	movs	r6, #0
 8004866:	42a6      	cmp	r6, r4
 8004868:	d105      	bne.n	8004876 <__libc_init_array+0x2e>
 800486a:	bd70      	pop	{r4, r5, r6, pc}
 800486c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004870:	4798      	blx	r3
 8004872:	3601      	adds	r6, #1
 8004874:	e7ee      	b.n	8004854 <__libc_init_array+0xc>
 8004876:	f855 3b04 	ldr.w	r3, [r5], #4
 800487a:	4798      	blx	r3
 800487c:	3601      	adds	r6, #1
 800487e:	e7f2      	b.n	8004866 <__libc_init_array+0x1e>
 8004880:	08004afc 	.word	0x08004afc
 8004884:	08004afc 	.word	0x08004afc
 8004888:	08004afc 	.word	0x08004afc
 800488c:	08004b00 	.word	0x08004b00

08004890 <memcpy>:
 8004890:	440a      	add	r2, r1
 8004892:	4291      	cmp	r1, r2
 8004894:	f100 33ff 	add.w	r3, r0, #4294967295
 8004898:	d100      	bne.n	800489c <memcpy+0xc>
 800489a:	4770      	bx	lr
 800489c:	b510      	push	{r4, lr}
 800489e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048a6:	4291      	cmp	r1, r2
 80048a8:	d1f9      	bne.n	800489e <memcpy+0xe>
 80048aa:	bd10      	pop	{r4, pc}

080048ac <_init>:
 80048ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ae:	bf00      	nop
 80048b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048b2:	bc08      	pop	{r3}
 80048b4:	469e      	mov	lr, r3
 80048b6:	4770      	bx	lr

080048b8 <_fini>:
 80048b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ba:	bf00      	nop
 80048bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048be:	bc08      	pop	{r3}
 80048c0:	469e      	mov	lr, r3
 80048c2:	4770      	bx	lr
