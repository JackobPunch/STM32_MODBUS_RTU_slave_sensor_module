
modbusTrying.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d54  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000035c  08005ee4  08005ee4  00006ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006240  08006240  00008098  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006240  08006240  00007240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006248  08006248  00008098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006248  08006248  00007248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800624c  0800624c  0000724c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  08006250  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008098  2**0
                  CONTENTS
 10 .bss          000005a4  20000098  20000098  00008098  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000063c  2000063c  00008098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c444  00000000  00000000  000080c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024c0  00000000  00000000  0001450c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000918  00000000  00000000  000169d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006ce  00000000  00000000  000172e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b737  00000000  00000000  000179b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d9fe  00000000  00000000  000330ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b8f1  00000000  00000000  00040aeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000dc3dc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d64  00000000  00000000  000dc420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  000df184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ecc 	.word	0x08005ecc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	08005ecc 	.word	0x08005ecc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  initialise_monitor_handles();
 8000284:	f005 fda4 	bl	8005dd0 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000288:	f001 f9d2 	bl	8001630 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028c:	f000 f817 	bl	80002be <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000290:	f000 f8c0 	bl	8000414 <MX_GPIO_Init>
  MX_DMA_Init();
 8000294:	f000 f898 	bl	80003c8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000298:	f000 f864 	bl	8000364 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // printf("Starting Modbus RTU Slave...\n"); // Removed to prevent timing delays

  // Initialize UART callbacks
  UART_Callbacks_Init();
 800029c:	f001 f940 	bl	8001520 <UART_Callbacks_Init>
  // printf("UART callbacks initialized\n"); // Removed

  // Initialize Modbus RTU slave
  Modbus_Init();
 80002a0:	f000 fe9e 	bl	8000fe0 <Modbus_Init>
  // printf("Array check: [0]=0x%04X [1]=0x%04X [12]=0x%04X [13]=0x%04X\n",
  //        Modbus_Device_GetRegister(0), Modbus_Device_GetRegister(1),
  //        Modbus_Device_GetRegister(12), Modbus_Device_GetRegister(13));

  // Initialize test functions
  Modbus_Test_Init();
 80002a4:	f000 ff8e 	bl	80011c4 <Modbus_Test_Init>
  while (1)
  {
    /* USER CODE BEGIN 3 */

    // Update sensor values periodically
    Modbus_Device_UpdateSensors();
 80002a8:	f000 fe7a 	bl	8000fa0 <Modbus_Device_UpdateSensors>

    // Update test values
    Modbus_Test_Update();
 80002ac:	f000 ffa2 	bl	80011f4 <Modbus_Test_Update>

    // Process Modbus (if needed)
    Modbus_Process();
 80002b0:	f000 ff56 	bl	8001160 <Modbus_Process>

    // Add small delay to prevent busy waiting
    HAL_Delay(100);
 80002b4:	2064      	movs	r0, #100	@ 0x64
 80002b6:	f001 fa21 	bl	80016fc <HAL_Delay>
    Modbus_Device_UpdateSensors();
 80002ba:	bf00      	nop
 80002bc:	e7f4      	b.n	80002a8 <main+0x28>

080002be <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80002be:	b580      	push	{r7, lr}
 80002c0:	b096      	sub	sp, #88	@ 0x58
 80002c2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80002c8:	2228      	movs	r2, #40	@ 0x28
 80002ca:	2100      	movs	r1, #0
 80002cc:	4618      	mov	r0, r3
 80002ce:	f004 fdd1 	bl	8004e74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d2:	f107 031c 	add.w	r3, r7, #28
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
 80002de:	60da      	str	r2, [r3, #12]
 80002e0:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	605a      	str	r2, [r3, #4]
 80002ea:	609a      	str	r2, [r3, #8]
 80002ec:	60da      	str	r2, [r3, #12]
 80002ee:	611a      	str	r2, [r3, #16]
 80002f0:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f2:	2302      	movs	r3, #2
 80002f4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f6:	2301      	movs	r3, #1
 80002f8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fa:	2310      	movs	r3, #16
 80002fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002fe:	2300      	movs	r3, #0
 8000300:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000302:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000306:	4618      	mov	r0, r3
 8000308:	f001 feca 	bl	80020a0 <HAL_RCC_OscConfig>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000312:	f000 f8af 	bl	8000474 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000316:	230f      	movs	r3, #15
 8000318:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800031a:	2300      	movs	r3, #0
 800031c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031e:	2300      	movs	r3, #0
 8000320:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000322:	2300      	movs	r3, #0
 8000324:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800032a:	f107 031c 	add.w	r3, r7, #28
 800032e:	2100      	movs	r1, #0
 8000330:	4618      	mov	r0, r3
 8000332:	f002 fec3 	bl	80030bc <HAL_RCC_ClockConfig>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800033c:	f000 f89a 	bl	8000474 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000340:	2301      	movs	r3, #1
 8000342:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000344:	2300      	movs	r3, #0
 8000346:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	4618      	mov	r0, r3
 800034c:	f003 f8c8 	bl	80034e0 <HAL_RCCEx_PeriphCLKConfig>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000356:	f000 f88d 	bl	8000474 <Error_Handler>
  }
}
 800035a:	bf00      	nop
 800035c:	3758      	adds	r7, #88	@ 0x58
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
	...

08000364 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000368:	4b15      	ldr	r3, [pc, #84]	@ (80003c0 <MX_USART1_UART_Init+0x5c>)
 800036a:	4a16      	ldr	r2, [pc, #88]	@ (80003c4 <MX_USART1_UART_Init+0x60>)
 800036c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800036e:	4b14      	ldr	r3, [pc, #80]	@ (80003c0 <MX_USART1_UART_Init+0x5c>)
 8000370:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000374:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000376:	4b12      	ldr	r3, [pc, #72]	@ (80003c0 <MX_USART1_UART_Init+0x5c>)
 8000378:	2200      	movs	r2, #0
 800037a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800037c:	4b10      	ldr	r3, [pc, #64]	@ (80003c0 <MX_USART1_UART_Init+0x5c>)
 800037e:	2200      	movs	r2, #0
 8000380:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000382:	4b0f      	ldr	r3, [pc, #60]	@ (80003c0 <MX_USART1_UART_Init+0x5c>)
 8000384:	2200      	movs	r2, #0
 8000386:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000388:	4b0d      	ldr	r3, [pc, #52]	@ (80003c0 <MX_USART1_UART_Init+0x5c>)
 800038a:	220c      	movs	r2, #12
 800038c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800038e:	4b0c      	ldr	r3, [pc, #48]	@ (80003c0 <MX_USART1_UART_Init+0x5c>)
 8000390:	2200      	movs	r2, #0
 8000392:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000394:	4b0a      	ldr	r3, [pc, #40]	@ (80003c0 <MX_USART1_UART_Init+0x5c>)
 8000396:	2200      	movs	r2, #0
 8000398:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800039a:	4b09      	ldr	r3, [pc, #36]	@ (80003c0 <MX_USART1_UART_Init+0x5c>)
 800039c:	2200      	movs	r2, #0
 800039e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003a0:	4b07      	ldr	r3, [pc, #28]	@ (80003c0 <MX_USART1_UART_Init+0x5c>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80003a6:	2300      	movs	r3, #0
 80003a8:	2200      	movs	r2, #0
 80003aa:	2100      	movs	r1, #0
 80003ac:	4804      	ldr	r0, [pc, #16]	@ (80003c0 <MX_USART1_UART_Init+0x5c>)
 80003ae:	f004 fa92 	bl	80048d6 <HAL_RS485Ex_Init>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80003b8:	f000 f85c 	bl	8000474 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 80003bc:	bf00      	nop
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	200000b4 	.word	0x200000b4
 80003c4:	40013800 	.word	0x40013800

080003c8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003ce:	4b10      	ldr	r3, [pc, #64]	@ (8000410 <MX_DMA_Init+0x48>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000410 <MX_DMA_Init+0x48>)
 80003d4:	f043 0301 	orr.w	r3, r3, #1
 80003d8:	6153      	str	r3, [r2, #20]
 80003da:	4b0d      	ldr	r3, [pc, #52]	@ (8000410 <MX_DMA_Init+0x48>)
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	f003 0301 	and.w	r3, r3, #1
 80003e2:	607b      	str	r3, [r7, #4]
 80003e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80003e6:	2200      	movs	r2, #0
 80003e8:	2100      	movs	r1, #0
 80003ea:	200e      	movs	r0, #14
 80003ec:	f001 fa85 	bl	80018fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80003f0:	200e      	movs	r0, #14
 80003f2:	f001 fa9e 	bl	8001932 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80003f6:	2200      	movs	r2, #0
 80003f8:	2100      	movs	r1, #0
 80003fa:	200f      	movs	r0, #15
 80003fc:	f001 fa7d 	bl	80018fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000400:	200f      	movs	r0, #15
 8000402:	f001 fa96 	bl	8001932 <HAL_NVIC_EnableIRQ>
}
 8000406:	bf00      	nop
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	40021000 	.word	0x40021000

08000414 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b086      	sub	sp, #24
 8000418:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	2200      	movs	r2, #0
 800041e:	601a      	str	r2, [r3, #0]
 8000420:	605a      	str	r2, [r3, #4]
 8000422:	609a      	str	r2, [r3, #8]
 8000424:	60da      	str	r2, [r3, #12]
 8000426:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000428:	4b11      	ldr	r3, [pc, #68]	@ (8000470 <MX_GPIO_Init+0x5c>)
 800042a:	695b      	ldr	r3, [r3, #20]
 800042c:	4a10      	ldr	r2, [pc, #64]	@ (8000470 <MX_GPIO_Init+0x5c>)
 800042e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000432:	6153      	str	r3, [r2, #20]
 8000434:	4b0e      	ldr	r3, [pc, #56]	@ (8000470 <MX_GPIO_Init+0x5c>)
 8000436:	695b      	ldr	r3, [r3, #20]
 8000438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800043c:	603b      	str	r3, [r7, #0]
 800043e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000440:	2200      	movs	r2, #0
 8000442:	2110      	movs	r1, #16
 8000444:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000448:	f001 fe12 	bl	8002070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800044c:	2310      	movs	r3, #16
 800044e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000450:	2301      	movs	r3, #1
 8000452:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000454:	2300      	movs	r3, #0
 8000456:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000458:	2300      	movs	r3, #0
 800045a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800045c:	1d3b      	adds	r3, r7, #4
 800045e:	4619      	mov	r1, r3
 8000460:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000464:	f001 fc92 	bl	8001d8c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000468:	bf00      	nop
 800046a:	3718      	adds	r7, #24
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	40021000 	.word	0x40021000

08000474 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000478:	b672      	cpsid	i
}
 800047a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800047c:	bf00      	nop
 800047e:	e7fd      	b.n	800047c <Error_Handler+0x8>

08000480 <mbus_crc16>:
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
}

*/

uint16_t mbus_crc16(const uint16_t crc16, const uint8_t byte) {
 8000480:	b480      	push	{r7}
 8000482:	b085      	sub	sp, #20
 8000484:	af00      	add	r7, sp, #0
 8000486:	4603      	mov	r3, r0
 8000488:	460a      	mov	r2, r1
 800048a:	80fb      	strh	r3, [r7, #6]
 800048c:	4613      	mov	r3, r2
 800048e:	717b      	strb	r3, [r7, #5]
  const int index = (crc16 & 0xFF) ^ byte;
 8000490:	88fb      	ldrh	r3, [r7, #6]
 8000492:	b2da      	uxtb	r2, r3
 8000494:	797b      	ldrb	r3, [r7, #5]
 8000496:	4053      	eors	r3, r2
 8000498:	60fb      	str	r3, [r7, #12]
  return (aucCRCLo[index] << 8) | ((crc16 >> 8) ^ aucCRCHi[index]);
 800049a:	4a0d      	ldr	r2, [pc, #52]	@ (80004d0 <mbus_crc16+0x50>)
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	4413      	add	r3, r2
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	b21b      	sxth	r3, r3
 80004a4:	021b      	lsls	r3, r3, #8
 80004a6:	b21a      	sxth	r2, r3
 80004a8:	88fb      	ldrh	r3, [r7, #6]
 80004aa:	0a1b      	lsrs	r3, r3, #8
 80004ac:	b29b      	uxth	r3, r3
 80004ae:	4809      	ldr	r0, [pc, #36]	@ (80004d4 <mbus_crc16+0x54>)
 80004b0:	68f9      	ldr	r1, [r7, #12]
 80004b2:	4401      	add	r1, r0
 80004b4:	7809      	ldrb	r1, [r1, #0]
 80004b6:	404b      	eors	r3, r1
 80004b8:	b29b      	uxth	r3, r3
 80004ba:	b21b      	sxth	r3, r3
 80004bc:	4313      	orrs	r3, r2
 80004be:	b21b      	sxth	r3, r3
 80004c0:	b29b      	uxth	r3, r3
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	3714      	adds	r7, #20
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	080060b8 	.word	0x080060b8
 80004d4:	08005fb8 	.word	0x08005fb8

080004d8 <mbus_tickcount>:

__attribute__((weak)) uint32_t mbus_tickcount() { return 0; }
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
 80004dc:	2300      	movs	r3, #0
 80004de:	4618      	mov	r0, r3
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr

080004e8 <mbus_open>:
/*
 * function mbus_open()
 * open new modbus context for new port
 * return: MODBUS_ERROR - if can't open context
 */
mbus_t mbus_open(Modbus_Conf_t *pconf) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  mbus_t context;
  for (context = 0; context < STMODBUS_COUNT_CONTEXT; context++) {
 80004f0:	2300      	movs	r3, #0
 80004f2:	73fb      	strb	r3, [r7, #15]
 80004f4:	e011      	b.n	800051a <mbus_open+0x32>
    if (g_mbusContext[context].open == 0) {
 80004f6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80004fa:	4924      	ldr	r1, [pc, #144]	@ (800058c <mbus_open+0xa4>)
 80004fc:	4613      	mov	r3, r2
 80004fe:	011b      	lsls	r3, r3, #4
 8000500:	4413      	add	r3, r2
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	440b      	add	r3, r1
 8000506:	3328      	adds	r3, #40	@ 0x28
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d00a      	beq.n	8000524 <mbus_open+0x3c>
  for (context = 0; context < STMODBUS_COUNT_CONTEXT; context++) {
 800050e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000512:	b2db      	uxtb	r3, r3
 8000514:	3301      	adds	r3, #1
 8000516:	b2db      	uxtb	r3, r3
 8000518:	73fb      	strb	r3, [r7, #15]
 800051a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800051e:	2b00      	cmp	r3, #0
 8000520:	dde9      	ble.n	80004f6 <mbus_open+0xe>
 8000522:	e000      	b.n	8000526 <mbus_open+0x3e>
      break;
 8000524:	bf00      	nop
    }
  }
  if (context == STMODBUS_COUNT_CONTEXT)
 8000526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800052a:	2b01      	cmp	r3, #1
 800052c:	d102      	bne.n	8000534 <mbus_open+0x4c>
    return (mbus_t)MBUS_ERROR;
 800052e:	f04f 33ff 	mov.w	r3, #4294967295
 8000532:	e026      	b.n	8000582 <mbus_open+0x9a>
  // Clear context
  memset(&g_mbusContext[context], 0, sizeof(_stmodbus_context_t));
 8000534:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000538:	4613      	mov	r3, r2
 800053a:	011b      	lsls	r3, r3, #4
 800053c:	4413      	add	r3, r2
 800053e:	009b      	lsls	r3, r3, #2
 8000540:	4a12      	ldr	r2, [pc, #72]	@ (800058c <mbus_open+0xa4>)
 8000542:	4413      	add	r3, r2
 8000544:	2244      	movs	r2, #68	@ 0x44
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f004 fc93 	bl	8004e74 <memset>
  // Copy config to context
  memcpy((void *)&g_mbusContext[context].conf, (void *)pconf,
 800054e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000552:	4613      	mov	r3, r2
 8000554:	011b      	lsls	r3, r3, #4
 8000556:	4413      	add	r3, r2
 8000558:	009b      	lsls	r3, r3, #2
 800055a:	4a0c      	ldr	r2, [pc, #48]	@ (800058c <mbus_open+0xa4>)
 800055c:	4413      	add	r3, r2
 800055e:	2228      	movs	r2, #40	@ 0x28
 8000560:	6879      	ldr	r1, [r7, #4]
 8000562:	4618      	mov	r0, r3
 8000564:	f004 fd01 	bl	8004f6a <memcpy>
         sizeof(Modbus_Conf_t));

  g_mbusContext[context].open = 1;
 8000568:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800056c:	4907      	ldr	r1, [pc, #28]	@ (800058c <mbus_open+0xa4>)
 800056e:	4613      	mov	r3, r2
 8000570:	011b      	lsls	r3, r3, #4
 8000572:	4413      	add	r3, r2
 8000574:	009b      	lsls	r3, r3, #2
 8000576:	440b      	add	r3, r1
 8000578:	3328      	adds	r3, #40	@ 0x28
 800057a:	2201      	movs	r2, #1
 800057c:	701a      	strb	r2, [r3, #0]
  return context;
 800057e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000582:	4618      	mov	r0, r3
 8000584:	3710      	adds	r7, #16
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	200001c4 	.word	0x200001c4

08000590 <mbus_flush>:

mbus_status_t mbus_flush(const mbus_t context) {
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
  g_mbusContext[context].crc16 = 0xFFFF;
 800059a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800059e:	490e      	ldr	r1, [pc, #56]	@ (80005d8 <mbus_flush+0x48>)
 80005a0:	4613      	mov	r3, r2
 80005a2:	011b      	lsls	r3, r3, #4
 80005a4:	4413      	add	r3, r2
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	440b      	add	r3, r1
 80005aa:	332a      	adds	r3, #42	@ 0x2a
 80005ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80005b0:	801a      	strh	r2, [r3, #0]
  g_mbusContext[context].state = MBUS_STATE_IDLE;
 80005b2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80005b6:	4908      	ldr	r1, [pc, #32]	@ (80005d8 <mbus_flush+0x48>)
 80005b8:	4613      	mov	r3, r2
 80005ba:	011b      	lsls	r3, r3, #4
 80005bc:	4413      	add	r3, r2
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	440b      	add	r3, r1
 80005c2:	3329      	adds	r3, #41	@ 0x29
 80005c4:	2200      	movs	r2, #0
 80005c6:	701a      	strb	r2, [r3, #0]
  return MBUS_OK;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	200001c4 	.word	0x200001c4

080005dc <mbus_response>:

mbus_status_t mbus_response(mbus_t mb_context, Modbus_ResponseType response) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	460a      	mov	r2, r1
 80005e6:	71fb      	strb	r3, [r7, #7]
 80005e8:	4613      	mov	r3, r2
 80005ea:	71bb      	strb	r3, [r7, #6]

  if (response != MBUS_RESPONSE_OK) {
 80005ec:	79bb      	ldrb	r3, [r7, #6]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d008      	beq.n	8000604 <mbus_response+0x28>
    return mbus_send_error(mb_context, response);
 80005f2:	79ba      	ldrb	r2, [r7, #6]
 80005f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f8:	4611      	mov	r1, r2
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fb66 	bl	8000ccc <mbus_send_error>
 8000600:	4603      	mov	r3, r0
 8000602:	e001      	b.n	8000608 <mbus_response+0x2c>
  } else {
  }
  return MBUS_ERROR;
 8000604:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000608:	4618      	mov	r0, r3
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <mbus_poll_response>:
uint16_t mbus_error(Modbus_ResponseType error) {
    g_userError = error;
    return 0;
}

inline mbus_status_t mbus_poll_response(mbus_t mb_context) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	@ 0x28
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
  stmbCallBackFunc func = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]
  _stmodbus_context_t *ctx = &g_mbusContext[mb_context];
 800061e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000622:	4613      	mov	r3, r2
 8000624:	011b      	lsls	r3, r3, #4
 8000626:	4413      	add	r3, r2
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	4a9b      	ldr	r2, [pc, #620]	@ (8000898 <mbus_poll_response+0x288>)
 800062c:	4413      	add	r3, r2
 800062e:	613b      	str	r3, [r7, #16]
  int read = 1, la;
 8000630:	2301      	movs	r3, #1
 8000632:	60bb      	str	r3, [r7, #8]
  uint16_t d;

  if (ctx->header.func == 0x04) {
 8000634:	693b      	ldr	r3, [r7, #16]
 8000636:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800063a:	2b04      	cmp	r3, #4
 800063c:	d101      	bne.n	8000642 <mbus_poll_response+0x32>
    la = 10;
 800063e:	230a      	movs	r3, #10
 8000640:	627b      	str	r3, [r7, #36]	@ 0x24
      func = ctx->func[i].func;
      break;
    }
  }
#endif
  switch (ctx->header.func) {
 8000642:	693b      	ldr	r3, [r7, #16]
 8000644:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8000648:	2b0f      	cmp	r3, #15
 800064a:	d006      	beq.n	800065a <mbus_poll_response+0x4a>
 800064c:	2b0f      	cmp	r3, #15
 800064e:	dc4a      	bgt.n	80006e6 <mbus_poll_response+0xd6>
 8000650:	2b01      	cmp	r3, #1
 8000652:	d002      	beq.n	800065a <mbus_poll_response+0x4a>
 8000654:	2b02      	cmp	r3, #2
 8000656:	d023      	beq.n	80006a0 <mbus_poll_response+0x90>
    if ((ctx->header.addr + ctx->header.num) > ctx->conf.discrete) {
      return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_ADDRESS);
    }
    break;
  default:
    break;
 8000658:	e045      	b.n	80006e6 <mbus_poll_response+0xd6>
    if ((ctx->header.num == 0) || (ctx->header.num > 0x07D0)) {
 800065a:	693b      	ldr	r3, [r7, #16]
 800065c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800065e:	2b00      	cmp	r3, #0
 8000660:	d004      	beq.n	800066c <mbus_poll_response+0x5c>
 8000662:	693b      	ldr	r3, [r7, #16]
 8000664:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000666:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800066a:	d907      	bls.n	800067c <mbus_poll_response+0x6c>
      return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_VALUE);
 800066c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000670:	2103      	movs	r1, #3
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff ffb2 	bl	80005dc <mbus_response>
 8000678:	4603      	mov	r3, r0
 800067a:	e155      	b.n	8000928 <mbus_poll_response+0x318>
    if ((ctx->header.addr + ctx->header.num) >= ctx->conf.coils) {
 800067c:	693b      	ldr	r3, [r7, #16]
 800067e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000680:	461a      	mov	r2, r3
 8000682:	693b      	ldr	r3, [r7, #16]
 8000684:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000686:	4413      	add	r3, r2
 8000688:	693a      	ldr	r2, [r7, #16]
 800068a:	8852      	ldrh	r2, [r2, #2]
 800068c:	4293      	cmp	r3, r2
 800068e:	db2c      	blt.n	80006ea <mbus_poll_response+0xda>
      return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_ADDRESS);
 8000690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000694:	2102      	movs	r1, #2
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ffa0 	bl	80005dc <mbus_response>
 800069c:	4603      	mov	r3, r0
 800069e:	e143      	b.n	8000928 <mbus_poll_response+0x318>
    if ((ctx->header.num == 0) || (ctx->header.num > 0x07D0)) {
 80006a0:	693b      	ldr	r3, [r7, #16]
 80006a2:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d004      	beq.n	80006b2 <mbus_poll_response+0xa2>
 80006a8:	693b      	ldr	r3, [r7, #16]
 80006aa:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80006ac:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80006b0:	d907      	bls.n	80006c2 <mbus_poll_response+0xb2>
      return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_VALUE);
 80006b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b6:	2103      	movs	r1, #3
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff ff8f 	bl	80005dc <mbus_response>
 80006be:	4603      	mov	r3, r0
 80006c0:	e132      	b.n	8000928 <mbus_poll_response+0x318>
    if ((ctx->header.addr + ctx->header.num) > ctx->conf.discrete) {
 80006c2:	693b      	ldr	r3, [r7, #16]
 80006c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80006c6:	461a      	mov	r2, r3
 80006c8:	693b      	ldr	r3, [r7, #16]
 80006ca:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80006cc:	4413      	add	r3, r2
 80006ce:	693a      	ldr	r2, [r7, #16]
 80006d0:	8892      	ldrh	r2, [r2, #4]
 80006d2:	4293      	cmp	r3, r2
 80006d4:	dd0b      	ble.n	80006ee <mbus_poll_response+0xde>
      return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_ADDRESS);
 80006d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006da:	2102      	movs	r1, #2
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff ff7d 	bl	80005dc <mbus_response>
 80006e2:	4603      	mov	r3, r0
 80006e4:	e120      	b.n	8000928 <mbus_poll_response+0x318>
    break;
 80006e6:	bf00      	nop
 80006e8:	e002      	b.n	80006f0 <mbus_poll_response+0xe0>
    break;
 80006ea:	bf00      	nop
 80006ec:	e000      	b.n	80006f0 <mbus_poll_response+0xe0>
    break;
 80006ee:	bf00      	nop
  }

  if (func != 0) {
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d006      	beq.n	8000704 <mbus_poll_response+0xf4>
    return func(mb_context);
 80006f6:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	4610      	mov	r0, r2
 80006fe:	4798      	blx	r3
 8000700:	4603      	mov	r3, r0
 8000702:	e111      	b.n	8000928 <mbus_poll_response+0x318>
  }

  la = mbus_proto_address((Modbus_ConnectFuncType)ctx->header.func, (int*)&read);
 8000704:	693b      	ldr	r3, [r7, #16]
 8000706:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800070a:	f107 0208 	add.w	r2, r7, #8
 800070e:	4611      	mov	r1, r2
 8000710:	4618      	mov	r0, r3
 8000712:	f000 fb6d 	bl	8000df0 <mbus_proto_address>
 8000716:	6278      	str	r0, [r7, #36]	@ 0x24
  if (la > 0) {
 8000718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800071a:	2b00      	cmp	r3, #0
 800071c:	dd05      	ble.n	800072a <mbus_poll_response+0x11a>
    la += ctx->header.addr;
 800071e:	693b      	ldr	r3, [r7, #16]
 8000720:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000722:	461a      	mov	r2, r3
 8000724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000726:	4413      	add	r3, r2
 8000728:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  if (la < 50001) {
 800072a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800072c:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8000730:	4293      	cmp	r3, r2
 8000732:	f300 80f2 	bgt.w	800091a <mbus_poll_response+0x30a>
    ctx->conf.sendbuf[0] = ctx->header.devaddr;
 8000736:	693b      	ldr	r3, [r7, #16]
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	693a      	ldr	r2, [r7, #16]
 800073c:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 8000740:	701a      	strb	r2, [r3, #0]
    ctx->conf.sendbuf[1] = ctx->header.func;
 8000742:	693b      	ldr	r3, [r7, #16]
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	3301      	adds	r3, #1
 8000748:	693a      	ldr	r2, [r7, #16]
 800074a:	f892 2031 	ldrb.w	r2, [r2, #49]	@ 0x31
 800074e:	701a      	strb	r2, [r3, #0]
    ctx->conf.sendbuf[2] = ctx->header.num * 2;
 8000750:	693b      	ldr	r3, [r7, #16]
 8000752:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000754:	b2da      	uxtb	r2, r3
 8000756:	693b      	ldr	r3, [r7, #16]
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	3302      	adds	r3, #2
 800075c:	0052      	lsls	r2, r2, #1
 800075e:	b2d2      	uxtb	r2, r2
 8000760:	701a      	strb	r2, [r3, #0]
    if (read && ctx->conf.read) {
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d04b      	beq.n	8000800 <mbus_poll_response+0x1f0>
 8000768:	693b      	ldr	r3, [r7, #16]
 800076a:	691b      	ldr	r3, [r3, #16]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d047      	beq.n	8000800 <mbus_poll_response+0x1f0>
      g_userError = MBUS_RESPONSE_OK;
 8000770:	4b4a      	ldr	r3, [pc, #296]	@ (800089c <mbus_poll_response+0x28c>)
 8000772:	2200      	movs	r2, #0
 8000774:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < ctx->header.num; i++) {
 8000776:	2300      	movs	r3, #0
 8000778:	623b      	str	r3, [r7, #32]
 800077a:	e01f      	b.n	80007bc <mbus_poll_response+0x1ac>
        
        d = ctx->conf.read(la + i);
 800077c:	693b      	ldr	r3, [r7, #16]
 800077e:	691b      	ldr	r3, [r3, #16]
 8000780:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000782:	6a3a      	ldr	r2, [r7, #32]
 8000784:	440a      	add	r2, r1
 8000786:	4610      	mov	r0, r2
 8000788:	4798      	blx	r3
 800078a:	4603      	mov	r3, r0
 800078c:	81fb      	strh	r3, [r7, #14]
        ctx->conf.sendbuf[3 + (i << 1)] = d >> 8;
 800078e:	89fb      	ldrh	r3, [r7, #14]
 8000790:	0a1b      	lsrs	r3, r3, #8
 8000792:	b299      	uxth	r1, r3
 8000794:	693b      	ldr	r3, [r7, #16]
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	6a3a      	ldr	r2, [r7, #32]
 800079a:	0052      	lsls	r2, r2, #1
 800079c:	3203      	adds	r2, #3
 800079e:	4413      	add	r3, r2
 80007a0:	b2ca      	uxtb	r2, r1
 80007a2:	701a      	strb	r2, [r3, #0]
        ctx->conf.sendbuf[3 + (i << 1) + 1] = d & 0xFF;
 80007a4:	693b      	ldr	r3, [r7, #16]
 80007a6:	699a      	ldr	r2, [r3, #24]
 80007a8:	6a3b      	ldr	r3, [r7, #32]
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	3304      	adds	r3, #4
 80007ae:	4413      	add	r3, r2
 80007b0:	89fa      	ldrh	r2, [r7, #14]
 80007b2:	b2d2      	uxtb	r2, r2
 80007b4:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < ctx->header.num; i++) {
 80007b6:	6a3b      	ldr	r3, [r7, #32]
 80007b8:	3301      	adds	r3, #1
 80007ba:	623b      	str	r3, [r7, #32]
 80007bc:	693b      	ldr	r3, [r7, #16]
 80007be:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80007c0:	461a      	mov	r2, r3
 80007c2:	6a3b      	ldr	r3, [r7, #32]
 80007c4:	4293      	cmp	r3, r2
 80007c6:	dbd9      	blt.n	800077c <mbus_poll_response+0x16c>
      }
      if (g_userError == MBUS_RESPONSE_OK) {
 80007c8:	4b34      	ldr	r3, [pc, #208]	@ (800089c <mbus_poll_response+0x28c>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d10d      	bne.n	80007ec <mbus_poll_response+0x1dc>
          return mbus_send_data(mb_context, 3 + ctx->conf.sendbuf[2]);
 80007d0:	693b      	ldr	r3, [r7, #16]
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	3302      	adds	r3, #2
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	3303      	adds	r3, #3
 80007da:	b29a      	uxth	r2, r3
 80007dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e0:	4611      	mov	r1, r2
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 fa9e 	bl	8000d24 <mbus_send_data>
 80007e8:	4603      	mov	r3, r0
 80007ea:	e09d      	b.n	8000928 <mbus_poll_response+0x318>
      }else {
          return mbus_response(mb_context, g_userError);
 80007ec:	4b2b      	ldr	r3, [pc, #172]	@ (800089c <mbus_poll_response+0x28c>)
 80007ee:	781a      	ldrb	r2, [r3, #0]
 80007f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f4:	4611      	mov	r1, r2
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff fef0 	bl	80005dc <mbus_response>
 80007fc:	4603      	mov	r3, r0
 80007fe:	e093      	b.n	8000928 <mbus_poll_response+0x318>
      }
    } else if (ctx->conf.write) {
 8000800:	693b      	ldr	r3, [r7, #16]
 8000802:	695b      	ldr	r3, [r3, #20]
 8000804:	2b00      	cmp	r3, #0
 8000806:	f000 8088 	beq.w	800091a <mbus_poll_response+0x30a>
      uint16_t *value;
      ctx->conf.sendbuf[2] = 0;
 800080a:	693b      	ldr	r3, [r7, #16]
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	3302      	adds	r3, #2
 8000810:	2200      	movs	r2, #0
 8000812:	701a      	strb	r2, [r3, #0]
      switch (ctx->header.func) {
 8000814:	693b      	ldr	r3, [r7, #16]
 8000816:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800081a:	2b06      	cmp	r3, #6
 800081c:	dc02      	bgt.n	8000824 <mbus_poll_response+0x214>
 800081e:	2b05      	cmp	r3, #5
 8000820:	da03      	bge.n	800082a <mbus_poll_response+0x21a>
 8000822:	e07a      	b.n	800091a <mbus_poll_response+0x30a>
 8000824:	2b10      	cmp	r3, #16
 8000826:	d030      	beq.n	800088a <mbus_poll_response+0x27a>
 8000828:	e077      	b.n	800091a <mbus_poll_response+0x30a>
      case MBUS_FUNC_WRITE_REG:
      case MBUS_FUNC_WRITE_COIL:
        // in both these cases, we should return the same packet that we
        // received. in both cases, the packes have 6 bytes of data + 2 CRC
        // bytes = 8 bytes
        value = (uint16_t *)ctx->conf.recvbuf;
 800082a:	693b      	ldr	r3, [r7, #16]
 800082c:	6a1b      	ldr	r3, [r3, #32]
 800082e:	61fb      	str	r3, [r7, #28]
        ctx->conf.write(la, *value);
 8000830:	693b      	ldr	r3, [r7, #16]
 8000832:	695b      	ldr	r3, [r3, #20]
 8000834:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000836:	69fa      	ldr	r2, [r7, #28]
 8000838:	8812      	ldrh	r2, [r2, #0]
 800083a:	4611      	mov	r1, r2
 800083c:	4798      	blx	r3
        ctx->conf.sendbuf[2] = ctx->header.addr >> 8;
 800083e:	693b      	ldr	r3, [r7, #16]
 8000840:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000842:	0a1b      	lsrs	r3, r3, #8
 8000844:	b29a      	uxth	r2, r3
 8000846:	693b      	ldr	r3, [r7, #16]
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	3302      	adds	r3, #2
 800084c:	b2d2      	uxtb	r2, r2
 800084e:	701a      	strb	r2, [r3, #0]
        ctx->conf.sendbuf[3] = ctx->header.addr & 0xFF;
 8000850:	693b      	ldr	r3, [r7, #16]
 8000852:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	3303      	adds	r3, #3
 800085a:	b2d2      	uxtb	r2, r2
 800085c:	701a      	strb	r2, [r3, #0]
        ctx->conf.sendbuf[4] = ctx->conf.recvbuf[1];
 800085e:	693b      	ldr	r3, [r7, #16]
 8000860:	6a1a      	ldr	r2, [r3, #32]
 8000862:	693b      	ldr	r3, [r7, #16]
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	3304      	adds	r3, #4
 8000868:	7852      	ldrb	r2, [r2, #1]
 800086a:	701a      	strb	r2, [r3, #0]
        ctx->conf.sendbuf[5] = ctx->conf.recvbuf[0];
 800086c:	693b      	ldr	r3, [r7, #16]
 800086e:	6a1a      	ldr	r2, [r3, #32]
 8000870:	693b      	ldr	r3, [r7, #16]
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	3305      	adds	r3, #5
 8000876:	7812      	ldrb	r2, [r2, #0]
 8000878:	701a      	strb	r2, [r3, #0]
        return mbus_send_data(mb_context, 6);
 800087a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087e:	2106      	movs	r1, #6
 8000880:	4618      	mov	r0, r3
 8000882:	f000 fa4f 	bl	8000d24 <mbus_send_data>
 8000886:	4603      	mov	r3, r0
 8000888:	e04e      	b.n	8000928 <mbus_poll_response+0x318>

      case MBUS_FUNC_WRITE_REGS:
        value = (uint16_t *)ctx->conf.recvbuf;
 800088a:	693b      	ldr	r3, [r7, #16]
 800088c:	6a1b      	ldr	r3, [r3, #32]
 800088e:	61fb      	str	r3, [r7, #28]
        for (int i = 0; i < ctx->header.num; i++) {
 8000890:	2300      	movs	r3, #0
 8000892:	61bb      	str	r3, [r7, #24]
 8000894:	e013      	b.n	80008be <mbus_poll_response+0x2ae>
 8000896:	bf00      	nop
 8000898:	200001c4 	.word	0x200001c4
 800089c:	20000208 	.word	0x20000208
          ctx->conf.write(la + i, *value++);
 80008a0:	693b      	ldr	r3, [r7, #16]
 80008a2:	695a      	ldr	r2, [r3, #20]
 80008a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80008a6:	69bb      	ldr	r3, [r7, #24]
 80008a8:	440b      	add	r3, r1
 80008aa:	4618      	mov	r0, r3
 80008ac:	69fb      	ldr	r3, [r7, #28]
 80008ae:	1c99      	adds	r1, r3, #2
 80008b0:	61f9      	str	r1, [r7, #28]
 80008b2:	881b      	ldrh	r3, [r3, #0]
 80008b4:	4619      	mov	r1, r3
 80008b6:	4790      	blx	r2
        for (int i = 0; i < ctx->header.num; i++) {
 80008b8:	69bb      	ldr	r3, [r7, #24]
 80008ba:	3301      	adds	r3, #1
 80008bc:	61bb      	str	r3, [r7, #24]
 80008be:	693b      	ldr	r3, [r7, #16]
 80008c0:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80008c2:	461a      	mov	r2, r3
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	4293      	cmp	r3, r2
 80008c8:	dbea      	blt.n	80008a0 <mbus_poll_response+0x290>
        }
        ctx->conf.sendbuf[2] = ctx->header.addr >> 8;
 80008ca:	693b      	ldr	r3, [r7, #16]
 80008cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80008ce:	0a1b      	lsrs	r3, r3, #8
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	693b      	ldr	r3, [r7, #16]
 80008d4:	699b      	ldr	r3, [r3, #24]
 80008d6:	3302      	adds	r3, #2
 80008d8:	b2d2      	uxtb	r2, r2
 80008da:	701a      	strb	r2, [r3, #0]
        ctx->conf.sendbuf[3] = ctx->header.addr & 0xFF;
 80008dc:	693b      	ldr	r3, [r7, #16]
 80008de:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80008e0:	693b      	ldr	r3, [r7, #16]
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	3303      	adds	r3, #3
 80008e6:	b2d2      	uxtb	r2, r2
 80008e8:	701a      	strb	r2, [r3, #0]
        ctx->conf.sendbuf[4] = ctx->header.num >> 8;
 80008ea:	693b      	ldr	r3, [r7, #16]
 80008ec:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80008ee:	0a1b      	lsrs	r3, r3, #8
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	693b      	ldr	r3, [r7, #16]
 80008f4:	699b      	ldr	r3, [r3, #24]
 80008f6:	3304      	adds	r3, #4
 80008f8:	b2d2      	uxtb	r2, r2
 80008fa:	701a      	strb	r2, [r3, #0]
        ctx->conf.sendbuf[5] = ctx->header.num & 0xFF;
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	3305      	adds	r3, #5
 8000906:	b2d2      	uxtb	r2, r2
 8000908:	701a      	strb	r2, [r3, #0]
        return mbus_send_data(mb_context, 6);
 800090a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090e:	2106      	movs	r1, #6
 8000910:	4618      	mov	r0, r3
 8000912:	f000 fa07 	bl	8000d24 <mbus_send_data>
 8000916:	4603      	mov	r3, r0
 8000918:	e006      	b.n	8000928 <mbus_poll_response+0x318>
      } // end of switch
    }
  }
  return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_FUNCTION);
 800091a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091e:	2101      	movs	r1, #1
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff fe5b 	bl	80005dc <mbus_response>
 8000926:	4603      	mov	r3, r0
}
 8000928:	4618      	mov	r0, r3
 800092a:	3728      	adds	r7, #40	@ 0x28
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <mbus_poll>:
/*
 * function mbus_close()
 * close modbus context
 * return: none
 */
mbus_status_t mbus_poll(mbus_t mb_context, uint8_t byte) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	460a      	mov	r2, r1
 800093a:	71fb      	strb	r3, [r7, #7]
 800093c:	4613      	mov	r3, r2
 800093e:	71bb      	strb	r3, [r7, #6]
  // State machine
  _stmodbus_context_t *ctx = &g_mbusContext[mb_context];
 8000940:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000944:	4613      	mov	r3, r2
 8000946:	011b      	lsls	r3, r3, #4
 8000948:	4413      	add	r3, r2
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	4ab1      	ldr	r2, [pc, #708]	@ (8000c14 <mbus_poll+0x2e4>)
 800094e:	4413      	add	r3, r2
 8000950:	60fb      	str	r3, [r7, #12]

  if (mbus_tickcount() - ctx->timer > 4) {
 8000952:	f7ff fdc1 	bl	80004d8 <mbus_tickcount>
 8000956:	4602      	mov	r2, r0
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	2b04      	cmp	r3, #4
 8000960:	d904      	bls.n	800096c <mbus_poll+0x3c>
    mbus_flush(mb_context);
 8000962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff fe12 	bl	8000590 <mbus_flush>
  }
  ctx->timer = mbus_tickcount();
 800096c:	f7ff fdb4 	bl	80004d8 <mbus_tickcount>
 8000970:	4602      	mov	r2, r0
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	62da      	str	r2, [r3, #44]	@ 0x2c

  switch (ctx->state) {
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800097c:	2b0e      	cmp	r3, #14
 800097e:	f200 8153 	bhi.w	8000c28 <mbus_poll+0x2f8>
 8000982:	a201      	add	r2, pc, #4	@ (adr r2, 8000988 <mbus_poll+0x58>)
 8000984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000988:	080009c5 	.word	0x080009c5
 800098c:	08000c29 	.word	0x08000c29
 8000990:	080009e1 	.word	0x080009e1
 8000994:	08000ab5 	.word	0x08000ab5
 8000998:	08000a9f 	.word	0x08000a9f
 800099c:	08000bbb 	.word	0x08000bbb
 80009a0:	08000ba5 	.word	0x08000ba5
 80009a4:	08000b0d 	.word	0x08000b0d
 80009a8:	08000ae9 	.word	0x08000ae9
 80009ac:	08000b4d 	.word	0x08000b4d
 80009b0:	08000b67 	.word	0x08000b67
 80009b4:	08000c09 	.word	0x08000c09
 80009b8:	08000c19 	.word	0x08000c19
 80009bc:	08000c29 	.word	0x08000c29
 80009c0:	08000c23 	.word	0x08000c23
  case MBUS_STATE_IDLE:
    mbus_flush(mb_context);
 80009c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff fde1 	bl	8000590 <mbus_flush>
    ctx->state = MBUS_STATE_FUNCTION;
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	2202      	movs	r2, #2
 80009d2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    ctx->header.devaddr = byte;
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	79ba      	ldrb	r2, [r7, #6]
 80009da:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    break;
 80009de:	e12c      	b.n	8000c3a <mbus_poll+0x30a>
  case MBUS_STATE_FUNCTION:
    ctx->header.func = byte;
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	79ba      	ldrb	r2, [r7, #6]
 80009e4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    switch (byte) {
 80009e8:	79bb      	ldrb	r3, [r7, #6]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	2b0f      	cmp	r3, #15
 80009ee:	d84f      	bhi.n	8000a90 <mbus_poll+0x160>
 80009f0:	a201      	add	r2, pc, #4	@ (adr r2, 80009f8 <mbus_poll+0xc8>)
 80009f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009f6:	bf00      	nop
 80009f8:	08000a65 	.word	0x08000a65
 80009fc:	08000a91 	.word	0x08000a91
 8000a00:	08000a65 	.word	0x08000a65
 8000a04:	08000a65 	.word	0x08000a65
 8000a08:	08000a7b 	.word	0x08000a7b
 8000a0c:	08000a39 	.word	0x08000a39
 8000a10:	08000a91 	.word	0x08000a91
 8000a14:	08000a91 	.word	0x08000a91
 8000a18:	08000a91 	.word	0x08000a91
 8000a1c:	08000a91 	.word	0x08000a91
 8000a20:	08000a91 	.word	0x08000a91
 8000a24:	08000a91 	.word	0x08000a91
 8000a28:	08000a91 	.word	0x08000a91
 8000a2c:	08000a91 	.word	0x08000a91
 8000a30:	08000a4f 	.word	0x08000a4f
 8000a34:	08000a4f 	.word	0x08000a4f
    case MBUS_FUNC_WRITE_REG:
      ctx->header.rnum = 1;
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	86da      	strh	r2, [r3, #54]	@ 0x36
      ctx->header.num = 1;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	2201      	movs	r2, #1
 8000a42:	869a      	strh	r2, [r3, #52]	@ 0x34
      ctx->state = MBUS_STATE_REGADDR_HI;
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	2204      	movs	r2, #4
 8000a48:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      break;
 8000a4c:	e026      	b.n	8000a9c <mbus_poll+0x16c>
    case MBUS_FUNC_WRITE_REGS:
    case MBUS_FUNC_WRITE_COILS:
      ctx->header.rnum = 1;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	2201      	movs	r2, #1
 8000a52:	86da      	strh	r2, [r3, #54]	@ 0x36
      ctx->header.num = 0;
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	2200      	movs	r2, #0
 8000a58:	869a      	strh	r2, [r3, #52]	@ 0x34
      ctx->state = MBUS_STATE_REGADDR_HI;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	2204      	movs	r2, #4
 8000a5e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      break;
 8000a62:	e01b      	b.n	8000a9c <mbus_poll+0x16c>
    case MBUS_FUNC_READ_INPUT_REGS:
    case MBUS_FUNC_READ_COILS:
    case MBUS_FUNC_READ_REGS:
      ctx->state = MBUS_STATE_REGADDR_HI;
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	2204      	movs	r2, #4
 8000a68:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      ctx->header.rnum = 0;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	86da      	strh	r2, [r3, #54]	@ 0x36
      ctx->header.num = 0;
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	2200      	movs	r2, #0
 8000a76:	869a      	strh	r2, [r3, #52]	@ 0x34
      break;
 8000a78:	e010      	b.n	8000a9c <mbus_poll+0x16c>
    case MBUS_FUNC_WRITE_COIL:
      ctx->header.rnum = 1;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	86da      	strh	r2, [r3, #54]	@ 0x36
      ctx->header.num = 1;
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	2201      	movs	r2, #1
 8000a84:	869a      	strh	r2, [r3, #52]	@ 0x34
      ctx->state = MBUS_STATE_REGADDR_HI;
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	2204      	movs	r2, #4
 8000a8a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      break;
 8000a8e:	e005      	b.n	8000a9c <mbus_poll+0x16c>
    default:
      // ctx->state = MBUS_STATE_IDLE;
      mbus_flush(mb_context);
 8000a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fd7b 	bl	8000590 <mbus_flush>
      break;
 8000a9a:	bf00      	nop
    }
    break;
 8000a9c:	e0cd      	b.n	8000c3a <mbus_poll+0x30a>
  case MBUS_STATE_REGADDR_HI:
    ctx->state = MBUS_STATE_REGADDR_LO;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	2203      	movs	r2, #3
 8000aa2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    ctx->header.addr = byte << 8;
 8000aa6:	79bb      	ldrb	r3, [r7, #6]
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	021b      	lsls	r3, r3, #8
 8000aac:	b29a      	uxth	r2, r3
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	865a      	strh	r2, [r3, #50]	@ 0x32
    break;
 8000ab2:	e0c2      	b.n	8000c3a <mbus_poll+0x30a>
  case MBUS_STATE_REGADDR_LO:
    ctx->header.addr |= byte;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8000ab8:	79bb      	ldrb	r3, [r7, #6]
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	4313      	orrs	r3, r2
 8000abe:	b29a      	uxth	r2, r3
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	865a      	strh	r2, [r3, #50]	@ 0x32
    if (ctx->header.num == 1 && ctx->header.rnum == 1) {
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d108      	bne.n	8000ade <mbus_poll+0x1ae>
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d104      	bne.n	8000ade <mbus_poll+0x1ae>
      ctx->state = MBUS_STATE_DATA_HI;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	2208      	movs	r2, #8
 8000ad8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    } else {
      ctx->state = MBUS_STATE_REGNUM_HI;
    }
    break;
 8000adc:	e0ad      	b.n	8000c3a <mbus_poll+0x30a>
      ctx->state = MBUS_STATE_REGNUM_HI;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	2206      	movs	r2, #6
 8000ae2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    break;
 8000ae6:	e0a8      	b.n	8000c3a <mbus_poll+0x30a>
  case MBUS_STATE_DATA_HI:
    ctx->state = MBUS_STATE_DATA_LO;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	2207      	movs	r2, #7
 8000aec:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    ctx->conf.recvbuf[2 * (ctx->header.num - ctx->header.rnum) + 1] = byte;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	6a1a      	ldr	r2, [r3, #32]
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000af8:	4619      	mov	r1, r3
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000afe:	1acb      	subs	r3, r1, r3
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	3301      	adds	r3, #1
 8000b04:	4413      	add	r3, r2
 8000b06:	79ba      	ldrb	r2, [r7, #6]
 8000b08:	701a      	strb	r2, [r3, #0]
    break;
 8000b0a:	e096      	b.n	8000c3a <mbus_poll+0x30a>
  case MBUS_STATE_DATA_LO:
    ctx->conf.recvbuf[2 * (ctx->header.num - ctx->header.rnum)] = byte;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	6a1b      	ldr	r3, [r3, #32]
 8000b10:	68fa      	ldr	r2, [r7, #12]
 8000b12:	8e92      	ldrh	r2, [r2, #52]	@ 0x34
 8000b14:	4611      	mov	r1, r2
 8000b16:	68fa      	ldr	r2, [r7, #12]
 8000b18:	8ed2      	ldrh	r2, [r2, #54]	@ 0x36
 8000b1a:	1a8a      	subs	r2, r1, r2
 8000b1c:	0052      	lsls	r2, r2, #1
 8000b1e:	4413      	add	r3, r2
 8000b20:	79ba      	ldrb	r2, [r7, #6]
 8000b22:	701a      	strb	r2, [r3, #0]
    ctx->header.rnum--;
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000b28:	3b01      	subs	r3, #1
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	86da      	strh	r2, [r3, #54]	@ 0x36
    if (ctx->header.rnum == 0) {
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d104      	bne.n	8000b42 <mbus_poll+0x212>
      ctx->state = MBUS_STATE_CRC_LO;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	220b      	movs	r2, #11
 8000b3c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    } else {
      ctx->state = MBUS_STATE_DATA_HI;
    }
    break;
 8000b40:	e07b      	b.n	8000c3a <mbus_poll+0x30a>
      ctx->state = MBUS_STATE_DATA_HI;
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	2208      	movs	r2, #8
 8000b46:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    break;
 8000b4a:	e076      	b.n	8000c3a <mbus_poll+0x30a>
  case MBUS_STATE_DATA_SIZE:
    ctx->state = MBUS_STATE_DATA;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	220a      	movs	r2, #10
 8000b50:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    ctx->header.size = byte;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	79ba      	ldrb	r2, [r7, #6]
 8000b58:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    ctx->header.rsize = byte;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	79ba      	ldrb	r2, [r7, #6]
 8000b60:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    break;
 8000b64:	e069      	b.n	8000c3a <mbus_poll+0x30a>
  case MBUS_STATE_DATA:
    ctx->conf.recvbuf[ctx->header.size - ctx->header.rsize] = byte;
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	6a1b      	ldr	r3, [r3, #32]
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	f892 2038 	ldrb.w	r2, [r2, #56]	@ 0x38
 8000b70:	4611      	mov	r1, r2
 8000b72:	68fa      	ldr	r2, [r7, #12]
 8000b74:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 8000b78:	1a8a      	subs	r2, r1, r2
 8000b7a:	4413      	add	r3, r2
 8000b7c:	79ba      	ldrb	r2, [r7, #6]
 8000b7e:	701a      	strb	r2, [r3, #0]
    ctx->header.rsize--;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8000b86:	3b01      	subs	r3, #1
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    if (ctx->header.rsize == 0) {
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d14c      	bne.n	8000c34 <mbus_poll+0x304>
      ctx->state = MBUS_STATE_CRC_LO;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	220b      	movs	r2, #11
 8000b9e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    }
    break;
 8000ba2:	e047      	b.n	8000c34 <mbus_poll+0x304>
  case MBUS_STATE_REGNUM_HI:
    ctx->state = MBUS_STATE_REGNUM_LO;
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	2205      	movs	r2, #5
 8000ba8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    ctx->header.num = byte << 8;
 8000bac:	79bb      	ldrb	r3, [r7, #6]
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	021b      	lsls	r3, r3, #8
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	869a      	strh	r2, [r3, #52]	@ 0x34
    break;
 8000bb8:	e03f      	b.n	8000c3a <mbus_poll+0x30a>
  case MBUS_STATE_REGNUM_LO:
    ctx->state = MBUS_STATE_CRC_LO;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	220b      	movs	r2, #11
 8000bbe:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    ctx->header.num |= byte;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8000bc6:	79bb      	ldrb	r3, [r7, #6]
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	869a      	strh	r2, [r3, #52]	@ 0x34
    if (ctx->header.rnum == 0) {
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d104      	bne.n	8000be4 <mbus_poll+0x2b4>
      ctx->state = MBUS_STATE_CRC_LO;
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	220b      	movs	r2, #11
 8000bde:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      if (ctx->header.func == MBUS_FUNC_WRITE_REGS) {
        ctx->state = MBUS_STATE_DATA_SIZE;
      }
    }

    break;
 8000be2:	e029      	b.n	8000c38 <mbus_poll+0x308>
      ctx->header.rnum = ctx->header.num;
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	86da      	strh	r2, [r3, #54]	@ 0x36
      ctx->state = MBUS_STATE_DATA_HI;
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	2208      	movs	r2, #8
 8000bf0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      if (ctx->header.func == MBUS_FUNC_WRITE_REGS) {
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8000bfa:	2b10      	cmp	r3, #16
 8000bfc:	d11c      	bne.n	8000c38 <mbus_poll+0x308>
        ctx->state = MBUS_STATE_DATA_SIZE;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	2209      	movs	r2, #9
 8000c02:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    break;
 8000c06:	e017      	b.n	8000c38 <mbus_poll+0x308>
  case MBUS_STATE_CRC_LO:
    ctx->state = MBUS_STATE_CRC_HI;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    break;
 8000c10:	e013      	b.n	8000c3a <mbus_poll+0x30a>
 8000c12:	bf00      	nop
 8000c14:	200001c4 	.word	0x200001c4
  case MBUS_STATE_CRC_HI:
    ctx->state = MBUS_STATE_FINISH;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	220d      	movs	r2, #13
 8000c1c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    break;
 8000c20:	e00b      	b.n	8000c3a <mbus_poll+0x30a>
  // We can't processing any more before callback not returned
  case MBUS_STATE_RESPONSE:
    return MBUS_ERROR;
 8000c22:	f04f 33ff 	mov.w	r3, #4294967295
 8000c26:	e04c      	b.n	8000cc2 <mbus_poll+0x392>
  default:
    mbus_flush(mb_context);
 8000c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fcaf 	bl	8000590 <mbus_flush>
    break;
 8000c32:	e002      	b.n	8000c3a <mbus_poll+0x30a>
    break;
 8000c34:	bf00      	nop
 8000c36:	e000      	b.n	8000c3a <mbus_poll+0x30a>
    break;
 8000c38:	bf00      	nop
  }

  ctx->crc16 = mbus_crc16(ctx->crc16, byte);
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000c3e:	79ba      	ldrb	r2, [r7, #6]
 8000c40:	4611      	mov	r1, r2
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff fc1c 	bl	8000480 <mbus_crc16>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (ctx->state == MBUS_STATE_FINISH) {
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8000c56:	2b0d      	cmp	r3, #13
 8000c58:	d132      	bne.n	8000cc0 <mbus_poll+0x390>
    // CRC error
    if (ctx->crc16 != 0) {
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d007      	beq.n	8000c72 <mbus_poll+0x342>
      mbus_flush(mb_context);
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff fc92 	bl	8000590 <mbus_flush>
      return MBUS_ERROR;
 8000c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c70:	e027      	b.n	8000cc2 <mbus_poll+0x392>
    }

    // TODO: Add broadcast messages
    if (ctx->header.devaddr == ctx->conf.devaddr) {
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d11a      	bne.n	8000cb6 <mbus_poll+0x386>
      ctx->state = MBUS_STATE_RESPONSE;
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	220e      	movs	r2, #14
 8000c84:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      if (mbus_poll_response(mb_context) == MBUS_OK) {
 8000c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fcbf 	bl	8000610 <mbus_poll_response>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d106      	bne.n	8000ca6 <mbus_poll+0x376>
        mbus_flush(mb_context);
 8000c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fc77 	bl	8000590 <mbus_flush>
        return MBUS_OK;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e00d      	b.n	8000cc2 <mbus_poll+0x392>
      }
      mbus_flush(mb_context);
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fc70 	bl	8000590 <mbus_flush>
      return MBUS_ERROR;
 8000cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb4:	e005      	b.n	8000cc2 <mbus_poll+0x392>
    }
    mbus_flush(mb_context);
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fc68 	bl	8000590 <mbus_flush>
  }
  return MBUS_OK;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop

08000ccc <mbus_send_error>:
  if (g_mbusContext[mb_context].open)
    return (mbus_context_t)&g_mbusContext[mb_context];
  return 0;
}

mbus_status_t mbus_send_error(mbus_t mb_context, Modbus_ResponseType response) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	460a      	mov	r2, r1
 8000cd6:	71fb      	strb	r3, [r7, #7]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	71bb      	strb	r3, [r7, #6]
  uint16_t *pbuf = (uint16_t *)(g_mbusContext[mb_context].conf.sendbuf + 2);
 8000cdc:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000ce0:	490e      	ldr	r1, [pc, #56]	@ (8000d1c <mbus_send_error+0x50>)
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	011b      	lsls	r3, r3, #4
 8000ce6:	4413      	add	r3, r2
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	440b      	add	r3, r1
 8000cec:	3318      	adds	r3, #24
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	3302      	adds	r3, #2
 8000cf2:	60fb      	str	r3, [r7, #12]
  *pbuf = 0x8300 | (uint8_t)response;
 8000cf4:	79bb      	ldrb	r3, [r7, #6]
 8000cf6:	b21a      	sxth	r2, r3
 8000cf8:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <mbus_send_error+0x54>)
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	b21b      	sxth	r3, r3
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	801a      	strh	r2, [r3, #0]
  return mbus_send_data(mb_context, 4);
 8000d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d08:	2104      	movs	r1, #4
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 f80a 	bl	8000d24 <mbus_send_data>
 8000d10:	4603      	mov	r3, r0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200001c4 	.word	0x200001c4
 8000d20:	ffff8300 	.word	0xffff8300

08000d24 <mbus_send_data>:

mbus_status_t mbus_send_data(mbus_t mb_context, uint16_t size) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	460a      	mov	r2, r1
 8000d2e:	71fb      	strb	r3, [r7, #7]
 8000d30:	4613      	mov	r3, r2
 8000d32:	80bb      	strh	r3, [r7, #4]
  // if size > ( conf.send_sz-2) error
  uint16_t crc32 = 0xFFFF;
 8000d34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d38:	82fb      	strh	r3, [r7, #22]
  const _stmodbus_context_t *ctx = &g_mbusContext[mb_context];
 8000d3a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	011b      	lsls	r3, r3, #4
 8000d42:	4413      	add	r3, r2
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	4a29      	ldr	r2, [pc, #164]	@ (8000dec <mbus_send_data+0xc8>)
 8000d48:	4413      	add	r3, r2
 8000d4a:	60fb      	str	r3, [r7, #12]
  uint8_t *pbuf = ctx->conf.sendbuf;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	60bb      	str	r3, [r7, #8]
  if (ctx->conf.send == 0 || pbuf == 0 || ctx->conf.sendbuf_sz < (size + 2))
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	68db      	ldr	r3, [r3, #12]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d008      	beq.n	8000d6c <mbus_send_data+0x48>
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d005      	beq.n	8000d6c <mbus_send_data+0x48>
 8000d60:	88bb      	ldrh	r3, [r7, #4]
 8000d62:	3301      	adds	r3, #1
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	8b92      	ldrh	r2, [r2, #28]
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	db02      	blt.n	8000d72 <mbus_send_data+0x4e>
    return MBUS_ERROR;
 8000d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d70:	e037      	b.n	8000de2 <mbus_send_data+0xbe>
  for (int i = 0; i < size; i++) {
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	e00d      	b.n	8000d94 <mbus_send_data+0x70>
    crc32 = mbus_crc16(crc32, pbuf[i]);
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	781a      	ldrb	r2, [r3, #0]
 8000d80:	8afb      	ldrh	r3, [r7, #22]
 8000d82:	4611      	mov	r1, r2
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff fb7b 	bl	8000480 <mbus_crc16>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	82fb      	strh	r3, [r7, #22]
  for (int i = 0; i < size; i++) {
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	3301      	adds	r3, #1
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	88bb      	ldrh	r3, [r7, #4]
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	dbed      	blt.n	8000d78 <mbus_send_data+0x54>
  }
  pbuf[size++] = crc32 & 0xFF;
 8000d9c:	88bb      	ldrh	r3, [r7, #4]
 8000d9e:	1c5a      	adds	r2, r3, #1
 8000da0:	80ba      	strh	r2, [r7, #4]
 8000da2:	461a      	mov	r2, r3
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	4413      	add	r3, r2
 8000da8:	8afa      	ldrh	r2, [r7, #22]
 8000daa:	b2d2      	uxtb	r2, r2
 8000dac:	701a      	strb	r2, [r3, #0]
  pbuf[size++] = (crc32 >> 8);
 8000dae:	8afb      	ldrh	r3, [r7, #22]
 8000db0:	0a1b      	lsrs	r3, r3, #8
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	88bb      	ldrh	r3, [r7, #4]
 8000db6:	1c59      	adds	r1, r3, #1
 8000db8:	80b9      	strh	r1, [r7, #4]
 8000dba:	4619      	mov	r1, r3
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	440b      	add	r3, r1
 8000dc0:	b2d2      	uxtb	r2, r2
 8000dc2:	701a      	strb	r2, [r3, #0]

  if (ctx->conf.send(mb_context, pbuf, size) != size)
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	88ba      	ldrh	r2, [r7, #4]
 8000dca:	f997 0007 	ldrsb.w	r0, [r7, #7]
 8000dce:	68b9      	ldr	r1, [r7, #8]
 8000dd0:	4798      	blx	r3
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	88bb      	ldrh	r3, [r7, #4]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d002      	beq.n	8000de0 <mbus_send_data+0xbc>
    return MBUS_ERROR;
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295
 8000dde:	e000      	b.n	8000de2 <mbus_send_data+0xbe>
  return MBUS_OK;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3718      	adds	r7, #24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	200001c4 	.word	0x200001c4

08000df0 <mbus_proto_address>:
  }
#endif
  return MBUS_ERROR;
}

int mbus_proto_address( Modbus_ConnectFuncType func, int *r) {
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	6039      	str	r1, [r7, #0]
 8000dfa:	71fb      	strb	r3, [r7, #7]
  int adr = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]
  *r = 1;
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	2201      	movs	r2, #1
 8000e04:	601a      	str	r2, [r3, #0]
  switch (func) {
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	2b17      	cmp	r3, #23
 8000e0a:	dc3f      	bgt.n	8000e8c <mbus_proto_address+0x9c>
 8000e0c:	2b04      	cmp	r3, #4
 8000e0e:	da08      	bge.n	8000e22 <mbus_proto_address+0x32>
 8000e10:	2b03      	cmp	r3, #3
 8000e12:	d029      	beq.n	8000e68 <mbus_proto_address+0x78>
 8000e14:	2b03      	cmp	r3, #3
 8000e16:	dc39      	bgt.n	8000e8c <mbus_proto_address+0x9c>
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d034      	beq.n	8000e86 <mbus_proto_address+0x96>
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d02b      	beq.n	8000e78 <mbus_proto_address+0x88>
    *r = 0;
  case MBUS_FUNC_READ_COILS:
    adr = 0001;
    break;
  default:
    break;
 8000e20:	e034      	b.n	8000e8c <mbus_proto_address+0x9c>
  switch (func) {
 8000e22:	461a      	mov	r2, r3
 8000e24:	2301      	movs	r3, #1
 8000e26:	4093      	lsls	r3, r2
 8000e28:	4a1c      	ldr	r2, [pc, #112]	@ (8000e9c <mbus_proto_address+0xac>)
 8000e2a:	401a      	ands	r2, r3
 8000e2c:	2a00      	cmp	r2, #0
 8000e2e:	bf14      	ite	ne
 8000e30:	2201      	movne	r2, #1
 8000e32:	2200      	moveq	r2, #0
 8000e34:	b2d2      	uxtb	r2, r2
 8000e36:	2a00      	cmp	r2, #0
 8000e38:	d113      	bne.n	8000e62 <mbus_proto_address+0x72>
 8000e3a:	f248 0220 	movw	r2, #32800	@ 0x8020
 8000e3e:	401a      	ands	r2, r3
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	bf14      	ite	ne
 8000e44:	2201      	movne	r2, #1
 8000e46:	2200      	moveq	r2, #0
 8000e48:	b2d2      	uxtb	r2, r2
 8000e4a:	2a00      	cmp	r2, #0
 8000e4c:	d118      	bne.n	8000e80 <mbus_proto_address+0x90>
 8000e4e:	f003 0310 	and.w	r3, r3, #16
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	bf14      	ite	ne
 8000e56:	2301      	movne	r3, #1
 8000e58:	2300      	moveq	r3, #0
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d107      	bne.n	8000e70 <mbus_proto_address+0x80>
    break;
 8000e60:	e014      	b.n	8000e8c <mbus_proto_address+0x9c>
    *r = 0;
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
    adr = 40001;
 8000e68:	f649 4341 	movw	r3, #40001	@ 0x9c41
 8000e6c:	60fb      	str	r3, [r7, #12]
    break;
 8000e6e:	e00e      	b.n	8000e8e <mbus_proto_address+0x9e>
    adr = 30001;
 8000e70:	f247 5331 	movw	r3, #30001	@ 0x7531
 8000e74:	60fb      	str	r3, [r7, #12]
    break;
 8000e76:	e00a      	b.n	8000e8e <mbus_proto_address+0x9e>
    adr = 10001;
 8000e78:	f242 7311 	movw	r3, #10001	@ 0x2711
 8000e7c:	60fb      	str	r3, [r7, #12]
    break;
 8000e7e:	e006      	b.n	8000e8e <mbus_proto_address+0x9e>
    *r = 0;
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
    adr = 0001;
 8000e86:	2301      	movs	r3, #1
 8000e88:	60fb      	str	r3, [r7, #12]
    break;
 8000e8a:	e000      	b.n	8000e8e <mbus_proto_address+0x9e>
    break;
 8000e8c:	bf00      	nop
  }
  return adr;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	00c10040 	.word	0x00c10040

08000ea0 <Modbus_Device_GetRegister>:
 * @brief  Get register value by index
 * @param  index: Register index (0-19)
 * @retval Register value
 */
uint16_t Modbus_Device_GetRegister(uint8_t index)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
    if (index < 20)
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	2b13      	cmp	r3, #19
 8000eae:	d804      	bhi.n	8000eba <Modbus_Device_GetRegister+0x1a>
    {
        return device_registers[index];
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	4a05      	ldr	r2, [pc, #20]	@ (8000ec8 <Modbus_Device_GetRegister+0x28>)
 8000eb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000eb8:	e000      	b.n	8000ebc <Modbus_Device_GetRegister+0x1c>
    }
    return 0;
 8000eba:	2300      	movs	r3, #0
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	20000000 	.word	0x20000000

08000ecc <Modbus_Device_Read>:
 * @brief  Modbus device read callback
 * @param  logical_address: Modbus logical address (40001, 40002, etc.)
 * @retval Register value
 */
uint16_t Modbus_Device_Read(uint32_t logical_address)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
    // Simple direct array access like the sample code
    if (logical_address >= 40001 && logical_address <= 40020)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d91a      	bls.n	8000f14 <Modbus_Device_Read+0x48>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f649 4254 	movw	r2, #40020	@ 0x9c54
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d815      	bhi.n	8000f14 <Modbus_Device_Read+0x48>
    {
        uint16_t index = logical_address - 40001;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	f503 43c7 	add.w	r3, r3, #25472	@ 0x6380
 8000ef0:	333f      	adds	r3, #63	@ 0x3f
 8000ef2:	81fb      	strh	r3, [r7, #14]
        uint16_t value = device_registers[index];
 8000ef4:	89fb      	ldrh	r3, [r7, #14]
 8000ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f20 <Modbus_Device_Read+0x54>)
 8000ef8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000efc:	81bb      	strh	r3, [r7, #12]

        // Minimal debug: only for first few registers to avoid timing issues
        if (index < 6) {
 8000efe:	89fb      	ldrh	r3, [r7, #14]
 8000f00:	2b05      	cmp	r3, #5
 8000f02:	d805      	bhi.n	8000f10 <Modbus_Device_Read+0x44>
            printf("READ: addr=%lu, index=%d, returning %d\n", logical_address, index, value);
 8000f04:	89fa      	ldrh	r2, [r7, #14]
 8000f06:	89bb      	ldrh	r3, [r7, #12]
 8000f08:	6879      	ldr	r1, [r7, #4]
 8000f0a:	4806      	ldr	r0, [pc, #24]	@ (8000f24 <Modbus_Device_Read+0x58>)
 8000f0c:	f003 fe6a 	bl	8004be4 <iprintf>
        }

        return value;
 8000f10:	89bb      	ldrh	r3, [r7, #12]
 8000f12:	e000      	b.n	8000f16 <Modbus_Device_Read+0x4a>
    }

    return 0; // Invalid address
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000000 	.word	0x20000000
 8000f24:	08005f1c 	.word	0x08005f1c

08000f28 <Modbus_Device_Write>:
 * @param  logical_address: Modbus logical address (40001, 40002, etc.)
 * @param  value: Value to write
 * @retval Written value
 */
uint16_t Modbus_Device_Write(uint32_t logical_address, uint16_t value)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	460b      	mov	r3, r1
 8000f32:	807b      	strh	r3, [r7, #2]
    // Convert logical address to array index
    if (logical_address >= 40001 && logical_address <= 40020)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d926      	bls.n	8000f8c <Modbus_Device_Write+0x64>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f649 4254 	movw	r2, #40020	@ 0x9c54
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d821      	bhi.n	8000f8c <Modbus_Device_Write+0x64>
    {
        uint16_t index = logical_address - 40001;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	f503 43c7 	add.w	r3, r3, #25472	@ 0x6380
 8000f50:	333f      	adds	r3, #63	@ 0x3f
 8000f52:	81fb      	strh	r3, [r7, #14]

        // Handle special write operations
        switch (logical_address)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f5a3 431c 	sub.w	r3, r3, #39936	@ 0x9c00
 8000f5a:	3b4f      	subs	r3, #79	@ 0x4f
 8000f5c:	2b04      	cmp	r3, #4
 8000f5e:	d80d      	bhi.n	8000f7c <Modbus_Device_Write+0x54>
 8000f60:	a201      	add	r2, pc, #4	@ (adr r2, 8000f68 <Modbus_Device_Write+0x40>)
 8000f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f66:	bf00      	nop
 8000f68:	08000f7d 	.word	0x08000f7d
 8000f6c:	08000f7d 	.word	0x08000f7d
 8000f70:	08000f7d 	.word	0x08000f7d
 8000f74:	08000f7d 	.word	0x08000f7d
 8000f78:	08000f7d 	.word	0x08000f7d
            // Handle test operations
            break;

        default:
            // Store value for other registers
            break;
 8000f7c:	bf00      	nop
        }

        // Store the value
        device_registers[index] = value;
 8000f7e:	89fb      	ldrh	r3, [r7, #14]
 8000f80:	4906      	ldr	r1, [pc, #24]	@ (8000f9c <Modbus_Device_Write+0x74>)
 8000f82:	887a      	ldrh	r2, [r7, #2]
 8000f84:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        return value;
 8000f88:	887b      	ldrh	r3, [r7, #2]
 8000f8a:	e000      	b.n	8000f8e <Modbus_Device_Write+0x66>
    }

    return 0; // Invalid address
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3714      	adds	r7, #20
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	20000000 	.word	0x20000000

08000fa0 <Modbus_Device_UpdateSensors>:
 * @brief  Update sensor values (call this periodically)
 * @param  None
 * @retval None
 */
void Modbus_Device_UpdateSensors(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
    // device_registers[0] = Read_Sensor1_Value();  // 40001
    // device_registers[1] = Read_Sensor2_Value();  // 40002
    // device_registers[4] = Read_Temperature();    // 40005
    // device_registers[5] = Read_Humidity();       // 40006
    // etc.
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
	...

08000fb0 <Modbus_Device_SetRegister>:
 * @param  index: Register index (0-19 for 40001-40020)
 * @param  value: Value to set
 * @retval None
 */
void Modbus_Device_SetRegister(uint8_t index, uint16_t value)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	460a      	mov	r2, r1
 8000fba:	71fb      	strb	r3, [r7, #7]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	80bb      	strh	r3, [r7, #4]
    if (index < 20)
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	2b13      	cmp	r3, #19
 8000fc4:	d804      	bhi.n	8000fd0 <Modbus_Device_SetRegister+0x20>
    {
        device_registers[index] = value;
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	4904      	ldr	r1, [pc, #16]	@ (8000fdc <Modbus_Device_SetRegister+0x2c>)
 8000fca:	88ba      	ldrh	r2, [r7, #4]
 8000fcc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    }
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	20000000 	.word	0x20000000

08000fe0 <Modbus_Init>:
 * @brief  Initialize Modbus RTU slave
 * @param  None
 * @retval None
 */
void Modbus_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
    // printf("Initializing Modbus...\n"); // Removed to prevent timing delays

    // Configure Modbus
    modbus_config.devaddr = 0x01; // Slave address
 8000fe6:	4b53      	ldr	r3, [pc, #332]	@ (8001134 <Modbus_Init+0x154>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	701a      	strb	r2, [r3, #0]
    modbus_config.coils = 0;      // No internal coil handling
 8000fec:	4b51      	ldr	r3, [pc, #324]	@ (8001134 <Modbus_Init+0x154>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	805a      	strh	r2, [r3, #2]
    modbus_config.discrete = 0;   // No internal discrete handling
 8000ff2:	4b50      	ldr	r3, [pc, #320]	@ (8001134 <Modbus_Init+0x154>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	809a      	strh	r2, [r3, #4]
    modbus_config.device = NULL;  // No device pointer needed
 8000ff8:	4b4e      	ldr	r3, [pc, #312]	@ (8001134 <Modbus_Init+0x154>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
    modbus_config.send = Modbus_SendData;
 8000ffe:	4b4d      	ldr	r3, [pc, #308]	@ (8001134 <Modbus_Init+0x154>)
 8001000:	4a4d      	ldr	r2, [pc, #308]	@ (8001138 <Modbus_Init+0x158>)
 8001002:	60da      	str	r2, [r3, #12]
    modbus_config.read = Modbus_Device_Read;
 8001004:	4b4b      	ldr	r3, [pc, #300]	@ (8001134 <Modbus_Init+0x154>)
 8001006:	4a4d      	ldr	r2, [pc, #308]	@ (800113c <Modbus_Init+0x15c>)
 8001008:	611a      	str	r2, [r3, #16]
    modbus_config.write = Modbus_Device_Write;
 800100a:	4b4a      	ldr	r3, [pc, #296]	@ (8001134 <Modbus_Init+0x154>)
 800100c:	4a4c      	ldr	r2, [pc, #304]	@ (8001140 <Modbus_Init+0x160>)
 800100e:	615a      	str	r2, [r3, #20]
    modbus_config.sendbuf = modbus_tx_buffer;
 8001010:	4b48      	ldr	r3, [pc, #288]	@ (8001134 <Modbus_Init+0x154>)
 8001012:	4a4c      	ldr	r2, [pc, #304]	@ (8001144 <Modbus_Init+0x164>)
 8001014:	619a      	str	r2, [r3, #24]
    modbus_config.sendbuf_sz = sizeof(modbus_tx_buffer);
 8001016:	4b47      	ldr	r3, [pc, #284]	@ (8001134 <Modbus_Init+0x154>)
 8001018:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800101c:	839a      	strh	r2, [r3, #28]
    modbus_config.recvbuf = modbus_rx_buffer;
 800101e:	4b45      	ldr	r3, [pc, #276]	@ (8001134 <Modbus_Init+0x154>)
 8001020:	4a49      	ldr	r2, [pc, #292]	@ (8001148 <Modbus_Init+0x168>)
 8001022:	621a      	str	r2, [r3, #32]
    modbus_config.recvbuf_sz = sizeof(modbus_rx_buffer);
 8001024:	4b43      	ldr	r3, [pc, #268]	@ (8001134 <Modbus_Init+0x154>)
 8001026:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800102a:	849a      	strh	r2, [r3, #36]	@ 0x24

    // printf("Modbus config: addr=0x%02X, buffers=%d/%d bytes\n",
    //        modbus_config.devaddr, modbus_config.sendbuf_sz, modbus_config.recvbuf_sz); // Removed

    // Initialize Modbus context
    modbus_context = mbus_open(&modbus_config);
 800102c:	4841      	ldr	r0, [pc, #260]	@ (8001134 <Modbus_Init+0x154>)
 800102e:	f7ff fa5b 	bl	80004e8 <mbus_open>
 8001032:	4603      	mov	r3, r0
 8001034:	461a      	mov	r2, r3
 8001036:	4b45      	ldr	r3, [pc, #276]	@ (800114c <Modbus_Init+0x16c>)
 8001038:	701a      	strb	r2, [r3, #0]
    // printf("Modbus context opened: %d\n", modbus_context); // Removed

    // Set register values at runtime (like the sample code does)
    Modbus_Device_SetRegister(0, 1);   // 40001
 800103a:	2101      	movs	r1, #1
 800103c:	2000      	movs	r0, #0
 800103e:	f7ff ffb7 	bl	8000fb0 <Modbus_Device_SetRegister>
    Modbus_Device_SetRegister(1, 2);   // 40002
 8001042:	2102      	movs	r1, #2
 8001044:	2001      	movs	r0, #1
 8001046:	f7ff ffb3 	bl	8000fb0 <Modbus_Device_SetRegister>
    Modbus_Device_SetRegister(2, 3);   // 40003
 800104a:	2103      	movs	r1, #3
 800104c:	2002      	movs	r0, #2
 800104e:	f7ff ffaf 	bl	8000fb0 <Modbus_Device_SetRegister>
    Modbus_Device_SetRegister(3, 4);   // 40004
 8001052:	2104      	movs	r1, #4
 8001054:	2003      	movs	r0, #3
 8001056:	f7ff ffab 	bl	8000fb0 <Modbus_Device_SetRegister>
    Modbus_Device_SetRegister(4, 5);   // 40005
 800105a:	2105      	movs	r1, #5
 800105c:	2004      	movs	r0, #4
 800105e:	f7ff ffa7 	bl	8000fb0 <Modbus_Device_SetRegister>
    Modbus_Device_SetRegister(5, 6);   // 40006
 8001062:	2106      	movs	r1, #6
 8001064:	2005      	movs	r0, #5
 8001066:	f7ff ffa3 	bl	8000fb0 <Modbus_Device_SetRegister>
    Modbus_Device_SetRegister(6, 7);   // 40007
 800106a:	2107      	movs	r1, #7
 800106c:	2006      	movs	r0, #6
 800106e:	f7ff ff9f 	bl	8000fb0 <Modbus_Device_SetRegister>
    Modbus_Device_SetRegister(7, 8);   // 40008
 8001072:	2108      	movs	r1, #8
 8001074:	2007      	movs	r0, #7
 8001076:	f7ff ff9b 	bl	8000fb0 <Modbus_Device_SetRegister>
    Modbus_Device_SetRegister(8, 9);   // 40009
 800107a:	2109      	movs	r1, #9
 800107c:	2008      	movs	r0, #8
 800107e:	f7ff ff97 	bl	8000fb0 <Modbus_Device_SetRegister>
    Modbus_Device_SetRegister(9, 10);  // 40010
 8001082:	210a      	movs	r1, #10
 8001084:	2009      	movs	r0, #9
 8001086:	f7ff ff93 	bl	8000fb0 <Modbus_Device_SetRegister>
    Modbus_Device_SetRegister(10, 11); // 40011
 800108a:	210b      	movs	r1, #11
 800108c:	200a      	movs	r0, #10
 800108e:	f7ff ff8f 	bl	8000fb0 <Modbus_Device_SetRegister>
    Modbus_Device_SetRegister(11, 12); // 40012
 8001092:	210c      	movs	r1, #12
 8001094:	200b      	movs	r0, #11
 8001096:	f7ff ff8b 	bl	8000fb0 <Modbus_Device_SetRegister>
    Modbus_Device_SetRegister(12, 13); // 40013
 800109a:	210d      	movs	r1, #13
 800109c:	200c      	movs	r0, #12
 800109e:	f7ff ff87 	bl	8000fb0 <Modbus_Device_SetRegister>
    Modbus_Device_SetRegister(13, 14); // 40014
 80010a2:	210e      	movs	r1, #14
 80010a4:	200d      	movs	r0, #13
 80010a6:	f7ff ff83 	bl	8000fb0 <Modbus_Device_SetRegister>
    Modbus_Device_SetRegister(14, 15); // 40015
 80010aa:	210f      	movs	r1, #15
 80010ac:	200e      	movs	r0, #14
 80010ae:	f7ff ff7f 	bl	8000fb0 <Modbus_Device_SetRegister>
    Modbus_Device_SetRegister(15, 16); // 40016
 80010b2:	2110      	movs	r1, #16
 80010b4:	200f      	movs	r0, #15
 80010b6:	f7ff ff7b 	bl	8000fb0 <Modbus_Device_SetRegister>
    Modbus_Device_SetRegister(16, 17); // 40017
 80010ba:	2111      	movs	r1, #17
 80010bc:	2010      	movs	r0, #16
 80010be:	f7ff ff77 	bl	8000fb0 <Modbus_Device_SetRegister>
    Modbus_Device_SetRegister(17, 18); // 40018
 80010c2:	2112      	movs	r1, #18
 80010c4:	2011      	movs	r0, #17
 80010c6:	f7ff ff73 	bl	8000fb0 <Modbus_Device_SetRegister>
    Modbus_Device_SetRegister(18, 19); // 40019
 80010ca:	2113      	movs	r1, #19
 80010cc:	2012      	movs	r0, #18
 80010ce:	f7ff ff6f 	bl	8000fb0 <Modbus_Device_SetRegister>
    Modbus_Device_SetRegister(19, 20); // 40020
 80010d2:	2114      	movs	r1, #20
 80010d4:	2013      	movs	r0, #19
 80010d6:	f7ff ff6b 	bl	8000fb0 <Modbus_Device_SetRegister>

    // Debug: Verify register values (only at startup, before Modbus communication starts)
    printf("Register verification after initialization:\n");
 80010da:	481d      	ldr	r0, [pc, #116]	@ (8001150 <Modbus_Init+0x170>)
 80010dc:	f003 fdea 	bl	8004cb4 <puts>
    for (int i = 0; i < 20; i++)
 80010e0:	2300      	movs	r3, #0
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	e00d      	b.n	8001102 <Modbus_Init+0x122>
    {
        printf("Reg[%d] = %d\n", i, Modbus_Device_GetRegister(i));
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fed8 	bl	8000ea0 <Modbus_Device_GetRegister>
 80010f0:	4603      	mov	r3, r0
 80010f2:	461a      	mov	r2, r3
 80010f4:	6879      	ldr	r1, [r7, #4]
 80010f6:	4817      	ldr	r0, [pc, #92]	@ (8001154 <Modbus_Init+0x174>)
 80010f8:	f003 fd74 	bl	8004be4 <iprintf>
    for (int i = 0; i < 20; i++)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3301      	adds	r3, #1
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b13      	cmp	r3, #19
 8001106:	ddee      	ble.n	80010e6 <Modbus_Init+0x106>
    }
    printf("Registers initialized. Ready for ModbusPoll connection.\n");
 8001108:	4813      	ldr	r0, [pc, #76]	@ (8001158 <Modbus_Init+0x178>)
 800110a:	f003 fdd3 	bl	8004cb4 <puts>

    // Start UART DMA reception
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, modbus_rx_buffer, sizeof(modbus_rx_buffer));
 800110e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001112:	490d      	ldr	r1, [pc, #52]	@ (8001148 <Modbus_Init+0x168>)
 8001114:	4811      	ldr	r0, [pc, #68]	@ (800115c <Modbus_Init+0x17c>)
 8001116:	f003 fc4f 	bl	80049b8 <HAL_UARTEx_ReceiveToIdle_DMA>
    // printf("DMA reception started: %d\n", dma_status); // Removed

    // Enable UART idle line interrupt for Modbus frame detection
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 800111a:	4b10      	ldr	r3, [pc, #64]	@ (800115c <Modbus_Init+0x17c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4b0e      	ldr	r3, [pc, #56]	@ (800115c <Modbus_Init+0x17c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f042 0210 	orr.w	r2, r2, #16
 8001128:	601a      	str	r2, [r3, #0]
    // printf("UART idle interrupt enabled\n"); // Removed
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	2000020c 	.word	0x2000020c
 8001138:	08001171 	.word	0x08001171
 800113c:	08000ecd 	.word	0x08000ecd
 8001140:	08000f29 	.word	0x08000f29
 8001144:	20000334 	.word	0x20000334
 8001148:	20000234 	.word	0x20000234
 800114c:	20000209 	.word	0x20000209
 8001150:	08005f44 	.word	0x08005f44
 8001154:	08005f70 	.word	0x08005f70
 8001158:	08005f80 	.word	0x08005f80
 800115c:	200000b4 	.word	0x200000b4

08001160 <Modbus_Process>:
 * @brief  Process Modbus communication
 * @param  None
 * @retval None
 */
void Modbus_Process(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
    // This function can be called in main loop if needed
    // Currently, processing is handled in UART callback
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
	...

08001170 <Modbus_SendData>:
 * @param  data: Data to send
 * @param  size: Size of data
 * @retval Number of bytes sent
 */
static int Modbus_SendData(const mbus_t context, const uint8_t *data, const uint16_t size)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	71fb      	strb	r3, [r7, #7]
 800117c:	4613      	mov	r3, r2
 800117e:	80bb      	strh	r3, [r7, #4]
    // {
    //     printf("0x%02X ", data[i]);
    // }
    // printf("\n");

    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, (uint8_t *)data, size, 1000);
 8001180:	88ba      	ldrh	r2, [r7, #4]
 8001182:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001186:	6839      	ldr	r1, [r7, #0]
 8001188:	4807      	ldr	r0, [pc, #28]	@ (80011a8 <Modbus_SendData+0x38>)
 800118a:	f002 facd 	bl	8003728 <HAL_UART_Transmit>
 800118e:	4603      	mov	r3, r0
 8001190:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d101      	bne.n	800119c <Modbus_SendData+0x2c>
    {
        // printf("TX Success\n"); // Removed to prevent timing delays
        return size;
 8001198:	88bb      	ldrh	r3, [r7, #4]
 800119a:	e000      	b.n	800119e <Modbus_SendData+0x2e>
    }
    else
    {
        // printf("TX Failed: %d\n", status); // Removed to prevent timing delays
        return 0;
 800119c:	2300      	movs	r3, #0
    }
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200000b4 	.word	0x200000b4

080011ac <Modbus_GetContext>:
 * @brief  Get Modbus context (for external access)
 * @param  None
 * @retval Modbus context
 */
mbus_t Modbus_GetContext(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
    return modbus_context;
 80011b0:	4b03      	ldr	r3, [pc, #12]	@ (80011c0 <Modbus_GetContext+0x14>)
 80011b2:	f993 3000 	ldrsb.w	r3, [r3]
 80011b6:	4618      	mov	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	20000209 	.word	0x20000209

080011c4 <Modbus_Test_Init>:
 * @brief  Initialize Modbus test functions
 * @param  None
 * @retval None
 */
void Modbus_Test_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
    // Set initial test values
    Modbus_Device_SetRegister(0, 0x1234);  // 40001: Test sensor 1
 80011c8:	f241 2134 	movw	r1, #4660	@ 0x1234
 80011cc:	2000      	movs	r0, #0
 80011ce:	f7ff feef 	bl	8000fb0 <Modbus_Device_SetRegister>
    Modbus_Device_SetRegister(1, 0x5678);  // 40002: Test sensor 2
 80011d2:	f245 6178 	movw	r1, #22136	@ 0x5678
 80011d6:	2001      	movs	r0, #1
 80011d8:	f7ff feea 	bl	8000fb0 <Modbus_Device_SetRegister>
    Modbus_Device_SetRegister(9, 0x0001);  // 40010: Status (bit 0 = ready)
 80011dc:	2101      	movs	r1, #1
 80011de:	2009      	movs	r0, #9
 80011e0:	f7ff fee6 	bl	8000fb0 <Modbus_Device_SetRegister>
    Modbus_Device_SetRegister(11, 0x0100); // 40012: Firmware version 1.0
 80011e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011e8:	200b      	movs	r0, #11
 80011ea:	f7ff fee1 	bl	8000fb0 <Modbus_Device_SetRegister>
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <Modbus_Test_Update>:
 * @brief  Update test values periodically
 * @param  None
 * @retval None
 */
void Modbus_Test_Update(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
    test_counter++;
 80011fa:	4b19      	ldr	r3, [pc, #100]	@ (8001260 <Modbus_Test_Update+0x6c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	3301      	adds	r3, #1
 8001200:	4a17      	ldr	r2, [pc, #92]	@ (8001260 <Modbus_Test_Update+0x6c>)
 8001202:	6013      	str	r3, [r2, #0]

    // Update test sensor values every 100 cycles
    if (test_counter % 100 == 0)
 8001204:	4b16      	ldr	r3, [pc, #88]	@ (8001260 <Modbus_Test_Update+0x6c>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4b16      	ldr	r3, [pc, #88]	@ (8001264 <Modbus_Test_Update+0x70>)
 800120a:	fba3 1302 	umull	r1, r3, r3, r2
 800120e:	095b      	lsrs	r3, r3, #5
 8001210:	2164      	movs	r1, #100	@ 0x64
 8001212:	fb01 f303 	mul.w	r3, r1, r3
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	2b00      	cmp	r3, #0
 800121a:	d105      	bne.n	8001228 <Modbus_Test_Update+0x34>
    {
        test_value++;
 800121c:	4b12      	ldr	r3, [pc, #72]	@ (8001268 <Modbus_Test_Update+0x74>)
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	3301      	adds	r3, #1
 8001222:	b29a      	uxth	r2, r3
 8001224:	4b10      	ldr	r3, [pc, #64]	@ (8001268 <Modbus_Test_Update+0x74>)
 8001226:	801a      	strh	r2, [r3, #0]
        // Modbus_Device_SetRegister(2, test_value + 2); // 40003 - Commented out to preserve test data
        // Modbus_Device_SetRegister(3, test_value + 3); // 40004 - Commented out to preserve test data
    }

    // Update status register
    uint16_t status = 0x0001; // Bit 0: Ready
 8001228:	2301      	movs	r3, #1
 800122a:	80fb      	strh	r3, [r7, #6]
    if (test_counter % 200 == 0)
 800122c:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <Modbus_Test_Update+0x6c>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b0c      	ldr	r3, [pc, #48]	@ (8001264 <Modbus_Test_Update+0x70>)
 8001232:	fba3 1302 	umull	r1, r3, r3, r2
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	21c8      	movs	r1, #200	@ 0xc8
 800123a:	fb01 f303 	mul.w	r3, r1, r3
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b00      	cmp	r3, #0
 8001242:	d103      	bne.n	800124c <Modbus_Test_Update+0x58>
    {
        status |= 0x0002; // Bit 1: Data updated
 8001244:	88fb      	ldrh	r3, [r7, #6]
 8001246:	f043 0302 	orr.w	r3, r3, #2
 800124a:	80fb      	strh	r3, [r7, #6]
    }
    Modbus_Device_SetRegister(9, status); // 40010
 800124c:	88fb      	ldrh	r3, [r7, #6]
 800124e:	4619      	mov	r1, r3
 8001250:	2009      	movs	r0, #9
 8001252:	f7ff fead 	bl	8000fb0 <Modbus_Device_SetRegister>
    // Simulate temperature reading (25.00°C = 9472) - Commented out to preserve test data
    // Modbus_Device_SetRegister(4, 205); // 40005

    // Simulate humidity reading (65.00% = 25856) - Commented out to preserve test data
    // Modbus_Device_SetRegister(5, 652); // 40006
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000434 	.word	0x20000434
 8001264:	51eb851f 	.word	0x51eb851f
 8001268:	20000438 	.word	0x20000438

0800126c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001272:	4b0f      	ldr	r3, [pc, #60]	@ (80012b0 <HAL_MspInit+0x44>)
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	4a0e      	ldr	r2, [pc, #56]	@ (80012b0 <HAL_MspInit+0x44>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6193      	str	r3, [r2, #24]
 800127e:	4b0c      	ldr	r3, [pc, #48]	@ (80012b0 <HAL_MspInit+0x44>)
 8001280:	699b      	ldr	r3, [r3, #24]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800128a:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <HAL_MspInit+0x44>)
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	4a08      	ldr	r2, [pc, #32]	@ (80012b0 <HAL_MspInit+0x44>)
 8001290:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001294:	61d3      	str	r3, [r2, #28]
 8001296:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <HAL_MspInit+0x44>)
 8001298:	69db      	ldr	r3, [r3, #28]
 800129a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	40021000 	.word	0x40021000

080012b4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	@ 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a42      	ldr	r2, [pc, #264]	@ (80013dc <HAL_UART_MspInit+0x128>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d17d      	bne.n	80013d2 <HAL_UART_MspInit+0x11e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012d6:	4b42      	ldr	r3, [pc, #264]	@ (80013e0 <HAL_UART_MspInit+0x12c>)
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	4a41      	ldr	r2, [pc, #260]	@ (80013e0 <HAL_UART_MspInit+0x12c>)
 80012dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012e0:	6193      	str	r3, [r2, #24]
 80012e2:	4b3f      	ldr	r3, [pc, #252]	@ (80013e0 <HAL_UART_MspInit+0x12c>)
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	4b3c      	ldr	r3, [pc, #240]	@ (80013e0 <HAL_UART_MspInit+0x12c>)
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	4a3b      	ldr	r2, [pc, #236]	@ (80013e0 <HAL_UART_MspInit+0x12c>)
 80012f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012f8:	6153      	str	r3, [r2, #20]
 80012fa:	4b39      	ldr	r3, [pc, #228]	@ (80013e0 <HAL_UART_MspInit+0x12c>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA12     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8001306:	f44f 53b0 	mov.w	r3, #5632	@ 0x1600
 800130a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130c:	2302      	movs	r3, #2
 800130e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001314:	2303      	movs	r3, #3
 8001316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001318:	2307      	movs	r3, #7
 800131a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4619      	mov	r1, r3
 8001322:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001326:	f000 fd31 	bl	8001d8c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800132a:	4b2e      	ldr	r3, [pc, #184]	@ (80013e4 <HAL_UART_MspInit+0x130>)
 800132c:	4a2e      	ldr	r2, [pc, #184]	@ (80013e8 <HAL_UART_MspInit+0x134>)
 800132e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001330:	4b2c      	ldr	r3, [pc, #176]	@ (80013e4 <HAL_UART_MspInit+0x130>)
 8001332:	2200      	movs	r2, #0
 8001334:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001336:	4b2b      	ldr	r3, [pc, #172]	@ (80013e4 <HAL_UART_MspInit+0x130>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800133c:	4b29      	ldr	r3, [pc, #164]	@ (80013e4 <HAL_UART_MspInit+0x130>)
 800133e:	2280      	movs	r2, #128	@ 0x80
 8001340:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001342:	4b28      	ldr	r3, [pc, #160]	@ (80013e4 <HAL_UART_MspInit+0x130>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001348:	4b26      	ldr	r3, [pc, #152]	@ (80013e4 <HAL_UART_MspInit+0x130>)
 800134a:	2200      	movs	r2, #0
 800134c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800134e:	4b25      	ldr	r3, [pc, #148]	@ (80013e4 <HAL_UART_MspInit+0x130>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001354:	4b23      	ldr	r3, [pc, #140]	@ (80013e4 <HAL_UART_MspInit+0x130>)
 8001356:	2200      	movs	r2, #0
 8001358:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800135a:	4822      	ldr	r0, [pc, #136]	@ (80013e4 <HAL_UART_MspInit+0x130>)
 800135c:	f000 fb03 	bl	8001966 <HAL_DMA_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8001366:	f7ff f885 	bl	8000474 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a1d      	ldr	r2, [pc, #116]	@ (80013e4 <HAL_UART_MspInit+0x130>)
 800136e:	675a      	str	r2, [r3, #116]	@ 0x74
 8001370:	4a1c      	ldr	r2, [pc, #112]	@ (80013e4 <HAL_UART_MspInit+0x130>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001376:	4b1d      	ldr	r3, [pc, #116]	@ (80013ec <HAL_UART_MspInit+0x138>)
 8001378:	4a1d      	ldr	r2, [pc, #116]	@ (80013f0 <HAL_UART_MspInit+0x13c>)
 800137a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800137c:	4b1b      	ldr	r3, [pc, #108]	@ (80013ec <HAL_UART_MspInit+0x138>)
 800137e:	2210      	movs	r2, #16
 8001380:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001382:	4b1a      	ldr	r3, [pc, #104]	@ (80013ec <HAL_UART_MspInit+0x138>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001388:	4b18      	ldr	r3, [pc, #96]	@ (80013ec <HAL_UART_MspInit+0x138>)
 800138a:	2280      	movs	r2, #128	@ 0x80
 800138c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800138e:	4b17      	ldr	r3, [pc, #92]	@ (80013ec <HAL_UART_MspInit+0x138>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001394:	4b15      	ldr	r3, [pc, #84]	@ (80013ec <HAL_UART_MspInit+0x138>)
 8001396:	2200      	movs	r2, #0
 8001398:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800139a:	4b14      	ldr	r3, [pc, #80]	@ (80013ec <HAL_UART_MspInit+0x138>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013a0:	4b12      	ldr	r3, [pc, #72]	@ (80013ec <HAL_UART_MspInit+0x138>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80013a6:	4811      	ldr	r0, [pc, #68]	@ (80013ec <HAL_UART_MspInit+0x138>)
 80013a8:	f000 fadd 	bl	8001966 <HAL_DMA_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 80013b2:	f7ff f85f 	bl	8000474 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a0c      	ldr	r2, [pc, #48]	@ (80013ec <HAL_UART_MspInit+0x138>)
 80013ba:	671a      	str	r2, [r3, #112]	@ 0x70
 80013bc:	4a0b      	ldr	r2, [pc, #44]	@ (80013ec <HAL_UART_MspInit+0x138>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2100      	movs	r1, #0
 80013c6:	2025      	movs	r0, #37	@ 0x25
 80013c8:	f000 fa97 	bl	80018fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013cc:	2025      	movs	r0, #37	@ 0x25
 80013ce:	f000 fab0 	bl	8001932 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80013d2:	bf00      	nop
 80013d4:	3728      	adds	r7, #40	@ 0x28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40013800 	.word	0x40013800
 80013e0:	40021000 	.word	0x40021000
 80013e4:	2000013c 	.word	0x2000013c
 80013e8:	40020058 	.word	0x40020058
 80013ec:	20000180 	.word	0x20000180
 80013f0:	40020044 	.word	0x40020044

080013f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013f8:	bf00      	nop
 80013fa:	e7fd      	b.n	80013f8 <NMI_Handler+0x4>

080013fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <HardFault_Handler+0x4>

08001404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001408:	bf00      	nop
 800140a:	e7fd      	b.n	8001408 <MemManage_Handler+0x4>

0800140c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001410:	bf00      	nop
 8001412:	e7fd      	b.n	8001410 <BusFault_Handler+0x4>

08001414 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <UsageFault_Handler+0x4>

0800141c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800144a:	f000 f937 	bl	80016bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001458:	4802      	ldr	r0, [pc, #8]	@ (8001464 <DMA1_Channel4_IRQHandler+0x10>)
 800145a:	f000 fba6 	bl	8001baa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000180 	.word	0x20000180

08001468 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800146c:	4802      	ldr	r0, [pc, #8]	@ (8001478 <DMA1_Channel5_IRQHandler+0x10>)
 800146e:	f000 fb9c 	bl	8001baa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	2000013c 	.word	0x2000013c

0800147c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001480:	4802      	ldr	r0, [pc, #8]	@ (800148c <USART1_IRQHandler+0x10>)
 8001482:	f002 f9db 	bl	800383c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	200000b4 	.word	0x200000b4

08001490 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001498:	4a14      	ldr	r2, [pc, #80]	@ (80014ec <_sbrk+0x5c>)
 800149a:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <_sbrk+0x60>)
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014a4:	4b13      	ldr	r3, [pc, #76]	@ (80014f4 <_sbrk+0x64>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d102      	bne.n	80014b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014ac:	4b11      	ldr	r3, [pc, #68]	@ (80014f4 <_sbrk+0x64>)
 80014ae:	4a12      	ldr	r2, [pc, #72]	@ (80014f8 <_sbrk+0x68>)
 80014b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014b2:	4b10      	ldr	r3, [pc, #64]	@ (80014f4 <_sbrk+0x64>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4413      	add	r3, r2
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d207      	bcs.n	80014d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014c0:	f003 fd26 	bl	8004f10 <__errno>
 80014c4:	4603      	mov	r3, r0
 80014c6:	220c      	movs	r2, #12
 80014c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ca:	f04f 33ff 	mov.w	r3, #4294967295
 80014ce:	e009      	b.n	80014e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014d0:	4b08      	ldr	r3, [pc, #32]	@ (80014f4 <_sbrk+0x64>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014d6:	4b07      	ldr	r3, [pc, #28]	@ (80014f4 <_sbrk+0x64>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4413      	add	r3, r2
 80014de:	4a05      	ldr	r2, [pc, #20]	@ (80014f4 <_sbrk+0x64>)
 80014e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014e2:	68fb      	ldr	r3, [r7, #12]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20003000 	.word	0x20003000
 80014f0:	00000400 	.word	0x00000400
 80014f4:	2000043c 	.word	0x2000043c
 80014f8:	20000640 	.word	0x20000640

080014fc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001500:	4b06      	ldr	r3, [pc, #24]	@ (800151c <SystemInit+0x20>)
 8001502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001506:	4a05      	ldr	r2, [pc, #20]	@ (800151c <SystemInit+0x20>)
 8001508:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800150c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <UART_Callbacks_Init>:
 * @brief  Initialize UART callbacks
 * @param  None
 * @retval None
 */
void UART_Callbacks_Init(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
    // UART callbacks are handled by HAL, this function can be used
    // for any additional initialization if needed
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
	...

08001530 <HAL_UARTEx_RxEventCallback>:
 * @param  huart: UART handle
 * @param  Size: Number of bytes received
 * @retval None
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	807b      	strh	r3, [r7, #2]
    if (huart == &huart1)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a14      	ldr	r2, [pc, #80]	@ (8001590 <HAL_UARTEx_RxEventCallback+0x60>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d120      	bne.n	8001586 <HAL_UARTEx_RxEventCallback+0x56>
        // HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4); // Commented out to eliminate timing delays

        // printf("UART RX: Received %d bytes\n", Size); // Commented out to prevent timeouts

        // Get Modbus context
        mbus_t modbus_ctx = Modbus_GetContext();
 8001544:	f7ff fe32 	bl	80011ac <Modbus_GetContext>
 8001548:	4603      	mov	r3, r0
 800154a:	737b      	strb	r3, [r7, #13]

        // Process received Modbus data byte by byte
        for (uint16_t i = 0; i < Size; i++)
 800154c:	2300      	movs	r3, #0
 800154e:	81fb      	strh	r3, [r7, #14]
 8001550:	e00b      	b.n	800156a <HAL_UARTEx_RxEventCallback+0x3a>
        {
            // printf("Byte %d: 0x%02X\n", i, modbus_rx_buffer[i]); // Commented out to prevent timeouts
            mbus_poll(modbus_ctx, modbus_rx_buffer[i]);
 8001552:	89fb      	ldrh	r3, [r7, #14]
 8001554:	4a0f      	ldr	r2, [pc, #60]	@ (8001594 <HAL_UARTEx_RxEventCallback+0x64>)
 8001556:	5cd2      	ldrb	r2, [r2, r3]
 8001558:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800155c:	4611      	mov	r1, r2
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff f9e6 	bl	8000930 <mbus_poll>
        for (uint16_t i = 0; i < Size; i++)
 8001564:	89fb      	ldrh	r3, [r7, #14]
 8001566:	3301      	adds	r3, #1
 8001568:	81fb      	strh	r3, [r7, #14]
 800156a:	89fa      	ldrh	r2, [r7, #14]
 800156c:	887b      	ldrh	r3, [r7, #2]
 800156e:	429a      	cmp	r2, r3
 8001570:	d3ef      	bcc.n	8001552 <HAL_UARTEx_RxEventCallback+0x22>
        }

        // Clear the UART idle flag
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2210      	movs	r2, #16
 8001578:	621a      	str	r2, [r3, #32]

        // Restart DMA reception for next frame
        HAL_UARTEx_ReceiveToIdle_DMA(&huart1, modbus_rx_buffer, sizeof(modbus_rx_buffer));
 800157a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800157e:	4905      	ldr	r1, [pc, #20]	@ (8001594 <HAL_UARTEx_RxEventCallback+0x64>)
 8001580:	4803      	ldr	r0, [pc, #12]	@ (8001590 <HAL_UARTEx_RxEventCallback+0x60>)
 8001582:	f003 fa19 	bl	80049b8 <HAL_UARTEx_ReceiveToIdle_DMA>
    }
}
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200000b4 	.word	0x200000b4
 8001594:	20000234 	.word	0x20000234

08001598 <HAL_UART_ErrorCallback>:
 * @brief  UART error callback
 * @param  huart: UART handle
 * @retval None
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
    if (huart == &huart1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4a0c      	ldr	r2, [pc, #48]	@ (80015d4 <HAL_UART_ErrorCallback+0x3c>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d111      	bne.n	80015cc <HAL_UART_ErrorCallback+0x34>
    {
        // Handle UART errors
        __HAL_UART_CLEAR_OREFLAG(huart);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2208      	movs	r2, #8
 80015ae:	621a      	str	r2, [r3, #32]
        __HAL_UART_CLEAR_NEFLAG(huart);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2204      	movs	r2, #4
 80015b6:	621a      	str	r2, [r3, #32]
        __HAL_UART_CLEAR_FEFLAG(huart);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2202      	movs	r2, #2
 80015be:	621a      	str	r2, [r3, #32]

        // Restart DMA reception
        HAL_UARTEx_ReceiveToIdle_DMA(&huart1, modbus_rx_buffer, sizeof(modbus_rx_buffer));
 80015c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015c4:	4904      	ldr	r1, [pc, #16]	@ (80015d8 <HAL_UART_ErrorCallback+0x40>)
 80015c6:	4803      	ldr	r0, [pc, #12]	@ (80015d4 <HAL_UART_ErrorCallback+0x3c>)
 80015c8:	f003 f9f6 	bl	80049b8 <HAL_UARTEx_ReceiveToIdle_DMA>
    }
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	200000b4 	.word	0x200000b4
 80015d8:	20000234 	.word	0x20000234

080015dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001614 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80015e0:	f7ff ff8c 	bl	80014fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015e4:	480c      	ldr	r0, [pc, #48]	@ (8001618 <LoopForever+0x6>)
  ldr r1, =_edata
 80015e6:	490d      	ldr	r1, [pc, #52]	@ (800161c <LoopForever+0xa>)
  ldr r2, =_sidata
 80015e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001620 <LoopForever+0xe>)
  movs r3, #0
 80015ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015ec:	e002      	b.n	80015f4 <LoopCopyDataInit>

080015ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f2:	3304      	adds	r3, #4

080015f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f8:	d3f9      	bcc.n	80015ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001624 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001628 <LoopForever+0x16>)
  movs r3, #0
 80015fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001600:	e001      	b.n	8001606 <LoopFillZerobss>

08001602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001604:	3204      	adds	r2, #4

08001606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001608:	d3fb      	bcc.n	8001602 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800160a:	f003 fc87 	bl	8004f1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800160e:	f7fe fe37 	bl	8000280 <main>

08001612 <LoopForever>:

LoopForever:
    b LoopForever
 8001612:	e7fe      	b.n	8001612 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001614:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800161c:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001620:	08006250 	.word	0x08006250
  ldr r2, =_sbss
 8001624:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001628:	2000063c 	.word	0x2000063c

0800162c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800162c:	e7fe      	b.n	800162c <ADC1_2_IRQHandler>
	...

08001630 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001634:	4b08      	ldr	r3, [pc, #32]	@ (8001658 <HAL_Init+0x28>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a07      	ldr	r2, [pc, #28]	@ (8001658 <HAL_Init+0x28>)
 800163a:	f043 0310 	orr.w	r3, r3, #16
 800163e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001640:	2003      	movs	r0, #3
 8001642:	f000 f94f 	bl	80018e4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001646:	200f      	movs	r0, #15
 8001648:	f000 f808 	bl	800165c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800164c:	f7ff fe0e 	bl	800126c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40022000 	.word	0x40022000

0800165c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001664:	4b12      	ldr	r3, [pc, #72]	@ (80016b0 <HAL_InitTick+0x54>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b12      	ldr	r3, [pc, #72]	@ (80016b4 <HAL_InitTick+0x58>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	4619      	mov	r1, r3
 800166e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001672:	fbb3 f3f1 	udiv	r3, r3, r1
 8001676:	fbb2 f3f3 	udiv	r3, r2, r3
 800167a:	4618      	mov	r0, r3
 800167c:	f000 f967 	bl	800194e <HAL_SYSTICK_Config>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e00e      	b.n	80016a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b0f      	cmp	r3, #15
 800168e:	d80a      	bhi.n	80016a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001690:	2200      	movs	r2, #0
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	f04f 30ff 	mov.w	r0, #4294967295
 8001698:	f000 f92f 	bl	80018fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800169c:	4a06      	ldr	r2, [pc, #24]	@ (80016b8 <HAL_InitTick+0x5c>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
 80016a4:	e000      	b.n	80016a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000028 	.word	0x20000028
 80016b4:	20000030 	.word	0x20000030
 80016b8:	2000002c 	.word	0x2000002c

080016bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c0:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <HAL_IncTick+0x20>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	461a      	mov	r2, r3
 80016c6:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <HAL_IncTick+0x24>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4413      	add	r3, r2
 80016cc:	4a04      	ldr	r2, [pc, #16]	@ (80016e0 <HAL_IncTick+0x24>)
 80016ce:	6013      	str	r3, [r2, #0]
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	20000030 	.word	0x20000030
 80016e0:	20000440 	.word	0x20000440

080016e4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return uwTick;  
 80016e8:	4b03      	ldr	r3, [pc, #12]	@ (80016f8 <HAL_GetTick+0x14>)
 80016ea:	681b      	ldr	r3, [r3, #0]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	20000440 	.word	0x20000440

080016fc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001704:	f7ff ffee 	bl	80016e4 <HAL_GetTick>
 8001708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001714:	d005      	beq.n	8001722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001716:	4b0a      	ldr	r3, [pc, #40]	@ (8001740 <HAL_Delay+0x44>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	461a      	mov	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4413      	add	r3, r2
 8001720:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001722:	bf00      	nop
 8001724:	f7ff ffde 	bl	80016e4 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	429a      	cmp	r2, r3
 8001732:	d8f7      	bhi.n	8001724 <HAL_Delay+0x28>
  {
  }
}
 8001734:	bf00      	nop
 8001736:	bf00      	nop
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000030 	.word	0x20000030

08001744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001754:	4b0c      	ldr	r3, [pc, #48]	@ (8001788 <__NVIC_SetPriorityGrouping+0x44>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001760:	4013      	ands	r3, r2
 8001762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800176c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001770:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001776:	4a04      	ldr	r2, [pc, #16]	@ (8001788 <__NVIC_SetPriorityGrouping+0x44>)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	60d3      	str	r3, [r2, #12]
}
 800177c:	bf00      	nop
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001790:	4b04      	ldr	r3, [pc, #16]	@ (80017a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	0a1b      	lsrs	r3, r3, #8
 8001796:	f003 0307 	and.w	r3, r3, #7
}
 800179a:	4618      	mov	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	db0b      	blt.n	80017d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	f003 021f 	and.w	r2, r3, #31
 80017c0:	4907      	ldr	r1, [pc, #28]	@ (80017e0 <__NVIC_EnableIRQ+0x38>)
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	095b      	lsrs	r3, r3, #5
 80017c8:	2001      	movs	r0, #1
 80017ca:	fa00 f202 	lsl.w	r2, r0, r2
 80017ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000e100 	.word	0xe000e100

080017e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	6039      	str	r1, [r7, #0]
 80017ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	db0a      	blt.n	800180e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	490c      	ldr	r1, [pc, #48]	@ (8001830 <__NVIC_SetPriority+0x4c>)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	0112      	lsls	r2, r2, #4
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	440b      	add	r3, r1
 8001808:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800180c:	e00a      	b.n	8001824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	b2da      	uxtb	r2, r3
 8001812:	4908      	ldr	r1, [pc, #32]	@ (8001834 <__NVIC_SetPriority+0x50>)
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	3b04      	subs	r3, #4
 800181c:	0112      	lsls	r2, r2, #4
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	440b      	add	r3, r1
 8001822:	761a      	strb	r2, [r3, #24]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000e100 	.word	0xe000e100
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001838:	b480      	push	{r7}
 800183a:	b089      	sub	sp, #36	@ 0x24
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f1c3 0307 	rsb	r3, r3, #7
 8001852:	2b04      	cmp	r3, #4
 8001854:	bf28      	it	cs
 8001856:	2304      	movcs	r3, #4
 8001858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3304      	adds	r3, #4
 800185e:	2b06      	cmp	r3, #6
 8001860:	d902      	bls.n	8001868 <NVIC_EncodePriority+0x30>
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3b03      	subs	r3, #3
 8001866:	e000      	b.n	800186a <NVIC_EncodePriority+0x32>
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800186c:	f04f 32ff 	mov.w	r2, #4294967295
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43da      	mvns	r2, r3
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	401a      	ands	r2, r3
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001880:	f04f 31ff 	mov.w	r1, #4294967295
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	fa01 f303 	lsl.w	r3, r1, r3
 800188a:	43d9      	mvns	r1, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001890:	4313      	orrs	r3, r2
         );
}
 8001892:	4618      	mov	r0, r3
 8001894:	3724      	adds	r7, #36	@ 0x24
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
	...

080018a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018b0:	d301      	bcc.n	80018b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018b2:	2301      	movs	r3, #1
 80018b4:	e00f      	b.n	80018d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018b6:	4a0a      	ldr	r2, [pc, #40]	@ (80018e0 <SysTick_Config+0x40>)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018be:	210f      	movs	r1, #15
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295
 80018c4:	f7ff ff8e 	bl	80017e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c8:	4b05      	ldr	r3, [pc, #20]	@ (80018e0 <SysTick_Config+0x40>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ce:	4b04      	ldr	r3, [pc, #16]	@ (80018e0 <SysTick_Config+0x40>)
 80018d0:	2207      	movs	r2, #7
 80018d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	e000e010 	.word	0xe000e010

080018e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff ff29 	bl	8001744 <__NVIC_SetPriorityGrouping>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b086      	sub	sp, #24
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4603      	mov	r3, r0
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
 8001906:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800190c:	f7ff ff3e 	bl	800178c <__NVIC_GetPriorityGrouping>
 8001910:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	68b9      	ldr	r1, [r7, #8]
 8001916:	6978      	ldr	r0, [r7, #20]
 8001918:	f7ff ff8e 	bl	8001838 <NVIC_EncodePriority>
 800191c:	4602      	mov	r2, r0
 800191e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001922:	4611      	mov	r1, r2
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff5d 	bl	80017e4 <__NVIC_SetPriority>
}
 800192a:	bf00      	nop
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	4603      	mov	r3, r0
 800193a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800193c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff31 	bl	80017a8 <__NVIC_EnableIRQ>
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff ffa2 	bl	80018a0 <SysTick_Config>
 800195c:	4603      	mov	r3, r0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b084      	sub	sp, #16
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d101      	bne.n	800197c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e037      	b.n	80019ec <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2202      	movs	r2, #2
 8001980:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001992:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001996:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80019a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f000 f9bc 	bl	8001d4c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
 8001a00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d101      	bne.n	8001a14 <HAL_DMA_Start_IT+0x20>
 8001a10:	2302      	movs	r3, #2
 8001a12:	e04a      	b.n	8001aaa <HAL_DMA_Start_IT+0xb6>
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d13a      	bne.n	8001a9c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2202      	movs	r2, #2
 8001a2a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2200      	movs	r2, #0
 8001a32:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f022 0201 	bic.w	r2, r2, #1
 8001a42:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	68b9      	ldr	r1, [r7, #8]
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	f000 f950 	bl	8001cf0 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d008      	beq.n	8001a6a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f042 020e 	orr.w	r2, r2, #14
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	e00f      	b.n	8001a8a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f042 020a 	orr.w	r2, r2, #10
 8001a78:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 0204 	bic.w	r2, r2, #4
 8001a88:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f042 0201 	orr.w	r2, r2, #1
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	e005      	b.n	8001aa8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001aa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e02e      	b.n	8001b22 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d008      	beq.n	8001ae0 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2204      	movs	r2, #4
 8001ad2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e020      	b.n	8001b22 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f022 020e 	bic.w	r2, r2, #14
 8001aee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 0201 	bic.w	r2, r2, #1
 8001afe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b08:	2101      	movs	r1, #1
 8001b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b084      	sub	sp, #16
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d005      	beq.n	8001b50 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2204      	movs	r2, #4
 8001b48:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	73fb      	strb	r3, [r7, #15]
 8001b4e:	e027      	b.n	8001ba0 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 020e 	bic.w	r2, r2, #14
 8001b5e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f022 0201 	bic.w	r2, r2, #1
 8001b6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b78:	2101      	movs	r1, #1
 8001b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b7e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	4798      	blx	r3
    }
  }
  return status;
 8001ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b084      	sub	sp, #16
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc6:	2204      	movs	r2, #4
 8001bc8:	409a      	lsls	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d024      	beq.n	8001c1c <HAL_DMA_IRQHandler+0x72>
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d01f      	beq.n	8001c1c <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0320 	and.w	r3, r3, #32
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d107      	bne.n	8001bfa <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 0204 	bic.w	r2, r2, #4
 8001bf8:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c02:	2104      	movs	r1, #4
 8001c04:	fa01 f202 	lsl.w	r2, r1, r2
 8001c08:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d06a      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001c1a:	e065      	b.n	8001ce8 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c20:	2202      	movs	r2, #2
 8001c22:	409a      	lsls	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4013      	ands	r3, r2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d02c      	beq.n	8001c86 <HAL_DMA_IRQHandler+0xdc>
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d027      	beq.n	8001c86 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0320 	and.w	r3, r3, #32
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d10b      	bne.n	8001c5c <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 020a 	bic.w	r2, r2, #10
 8001c52:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c64:	2102      	movs	r1, #2
 8001c66:	fa01 f202 	lsl.w	r2, r1, r2
 8001c6a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d035      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001c84:	e030      	b.n	8001ce8 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8a:	2208      	movs	r2, #8
 8001c8c:	409a      	lsls	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d028      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x13e>
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	f003 0308 	and.w	r3, r3, #8
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d023      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 020e 	bic.w	r2, r2, #14
 8001cae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cb8:	2101      	movs	r1, #1
 8001cba:	fa01 f202 	lsl.w	r2, r1, r2
 8001cbe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d004      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	4798      	blx	r3
    }
  }
}
 8001ce6:	e7ff      	b.n	8001ce8 <HAL_DMA_IRQHandler+0x13e>
 8001ce8:	bf00      	nop
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
 8001cfc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d06:	2101      	movs	r1, #1
 8001d08:	fa01 f202 	lsl.w	r2, r1, r2
 8001d0c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b10      	cmp	r3, #16
 8001d1c:	d108      	bne.n	8001d30 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68ba      	ldr	r2, [r7, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d2e:	e007      	b.n	8001d40 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68ba      	ldr	r2, [r7, #8]
 8001d36:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	60da      	str	r2, [r3, #12]
}
 8001d40:	bf00      	nop
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4b09      	ldr	r3, [pc, #36]	@ (8001d80 <DMA_CalcBaseAndBitshift+0x34>)
 8001d5c:	4413      	add	r3, r2
 8001d5e:	4a09      	ldr	r2, [pc, #36]	@ (8001d84 <DMA_CalcBaseAndBitshift+0x38>)
 8001d60:	fba2 2303 	umull	r2, r3, r2, r3
 8001d64:	091b      	lsrs	r3, r3, #4
 8001d66:	009a      	lsls	r2, r3, #2
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a06      	ldr	r2, [pc, #24]	@ (8001d88 <DMA_CalcBaseAndBitshift+0x3c>)
 8001d70:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	bffdfff8 	.word	0xbffdfff8
 8001d84:	cccccccd 	.word	0xcccccccd
 8001d88:	40020000 	.word	0x40020000

08001d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d96:	2300      	movs	r3, #0
 8001d98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d9a:	e14e      	b.n	800203a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	2101      	movs	r1, #1
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	fa01 f303 	lsl.w	r3, r1, r3
 8001da8:	4013      	ands	r3, r2
 8001daa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f000 8140 	beq.w	8002034 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 0303 	and.w	r3, r3, #3
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d005      	beq.n	8001dcc <HAL_GPIO_Init+0x40>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 0303 	and.w	r3, r3, #3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d130      	bne.n	8001e2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	2203      	movs	r2, #3
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	4013      	ands	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	68da      	ldr	r2, [r3, #12]
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e02:	2201      	movs	r2, #1
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	091b      	lsrs	r3, r3, #4
 8001e18:	f003 0201 	and.w	r2, r3, #1
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	2b03      	cmp	r3, #3
 8001e38:	d017      	beq.n	8001e6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	2203      	movs	r2, #3
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	689a      	ldr	r2, [r3, #8]
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d123      	bne.n	8001ebe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	08da      	lsrs	r2, r3, #3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	3208      	adds	r2, #8
 8001e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	220f      	movs	r2, #15
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43db      	mvns	r3, r3
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	4013      	ands	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	691a      	ldr	r2, [r3, #16]
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	08da      	lsrs	r2, r3, #3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3208      	adds	r2, #8
 8001eb8:	6939      	ldr	r1, [r7, #16]
 8001eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	2203      	movs	r2, #3
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 0203 	and.w	r2, r3, #3
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 809a 	beq.w	8002034 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f00:	4b55      	ldr	r3, [pc, #340]	@ (8002058 <HAL_GPIO_Init+0x2cc>)
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	4a54      	ldr	r2, [pc, #336]	@ (8002058 <HAL_GPIO_Init+0x2cc>)
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	6193      	str	r3, [r2, #24]
 8001f0c:	4b52      	ldr	r3, [pc, #328]	@ (8002058 <HAL_GPIO_Init+0x2cc>)
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f18:	4a50      	ldr	r2, [pc, #320]	@ (800205c <HAL_GPIO_Init+0x2d0>)
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	089b      	lsrs	r3, r3, #2
 8001f1e:	3302      	adds	r3, #2
 8001f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	f003 0303 	and.w	r3, r3, #3
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	220f      	movs	r2, #15
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f42:	d013      	beq.n	8001f6c <HAL_GPIO_Init+0x1e0>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a46      	ldr	r2, [pc, #280]	@ (8002060 <HAL_GPIO_Init+0x2d4>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d00d      	beq.n	8001f68 <HAL_GPIO_Init+0x1dc>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a45      	ldr	r2, [pc, #276]	@ (8002064 <HAL_GPIO_Init+0x2d8>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d007      	beq.n	8001f64 <HAL_GPIO_Init+0x1d8>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a44      	ldr	r2, [pc, #272]	@ (8002068 <HAL_GPIO_Init+0x2dc>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d101      	bne.n	8001f60 <HAL_GPIO_Init+0x1d4>
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e006      	b.n	8001f6e <HAL_GPIO_Init+0x1e2>
 8001f60:	2305      	movs	r3, #5
 8001f62:	e004      	b.n	8001f6e <HAL_GPIO_Init+0x1e2>
 8001f64:	2302      	movs	r3, #2
 8001f66:	e002      	b.n	8001f6e <HAL_GPIO_Init+0x1e2>
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e000      	b.n	8001f6e <HAL_GPIO_Init+0x1e2>
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	f002 0203 	and.w	r2, r2, #3
 8001f74:	0092      	lsls	r2, r2, #2
 8001f76:	4093      	lsls	r3, r2
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f7e:	4937      	ldr	r1, [pc, #220]	@ (800205c <HAL_GPIO_Init+0x2d0>)
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	089b      	lsrs	r3, r3, #2
 8001f84:	3302      	adds	r3, #2
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f8c:	4b37      	ldr	r3, [pc, #220]	@ (800206c <HAL_GPIO_Init+0x2e0>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	43db      	mvns	r3, r3
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001fb0:	4a2e      	ldr	r2, [pc, #184]	@ (800206c <HAL_GPIO_Init+0x2e0>)
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fb6:	4b2d      	ldr	r3, [pc, #180]	@ (800206c <HAL_GPIO_Init+0x2e0>)
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001fda:	4a24      	ldr	r2, [pc, #144]	@ (800206c <HAL_GPIO_Init+0x2e0>)
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fe0:	4b22      	ldr	r3, [pc, #136]	@ (800206c <HAL_GPIO_Init+0x2e0>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	4013      	ands	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	4313      	orrs	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002004:	4a19      	ldr	r2, [pc, #100]	@ (800206c <HAL_GPIO_Init+0x2e0>)
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800200a:	4b18      	ldr	r3, [pc, #96]	@ (800206c <HAL_GPIO_Init+0x2e0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	43db      	mvns	r3, r3
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4013      	ands	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4313      	orrs	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800202e:	4a0f      	ldr	r2, [pc, #60]	@ (800206c <HAL_GPIO_Init+0x2e0>)
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	3301      	adds	r3, #1
 8002038:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	fa22 f303 	lsr.w	r3, r2, r3
 8002044:	2b00      	cmp	r3, #0
 8002046:	f47f aea9 	bne.w	8001d9c <HAL_GPIO_Init+0x10>
  }
}
 800204a:	bf00      	nop
 800204c:	bf00      	nop
 800204e:	371c      	adds	r7, #28
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	40021000 	.word	0x40021000
 800205c:	40010000 	.word	0x40010000
 8002060:	48000400 	.word	0x48000400
 8002064:	48000800 	.word	0x48000800
 8002068:	48000c00 	.word	0x48000c00
 800206c:	40010400 	.word	0x40010400

08002070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	807b      	strh	r3, [r7, #2]
 800207c:	4613      	mov	r3, r2
 800207e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002080:	787b      	ldrb	r3, [r7, #1]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002086:	887a      	ldrh	r2, [r7, #2]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800208c:	e002      	b.n	8002094 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800208e:	887a      	ldrh	r2, [r7, #2]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020b0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d102      	bne.n	80020c6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	f000 bff4 	b.w	80030ae <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f000 816d 	beq.w	80023b6 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80020dc:	4bb4      	ldr	r3, [pc, #720]	@ (80023b0 <HAL_RCC_OscConfig+0x310>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 030c 	and.w	r3, r3, #12
 80020e4:	2b04      	cmp	r3, #4
 80020e6:	d00c      	beq.n	8002102 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020e8:	4bb1      	ldr	r3, [pc, #708]	@ (80023b0 <HAL_RCC_OscConfig+0x310>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 030c 	and.w	r3, r3, #12
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	d157      	bne.n	80021a4 <HAL_RCC_OscConfig+0x104>
 80020f4:	4bae      	ldr	r3, [pc, #696]	@ (80023b0 <HAL_RCC_OscConfig+0x310>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002100:	d150      	bne.n	80021a4 <HAL_RCC_OscConfig+0x104>
 8002102:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002106:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800210e:	fa93 f3a3 	rbit	r3, r3
 8002112:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002116:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800211a:	fab3 f383 	clz	r3, r3
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b3f      	cmp	r3, #63	@ 0x3f
 8002122:	d802      	bhi.n	800212a <HAL_RCC_OscConfig+0x8a>
 8002124:	4ba2      	ldr	r3, [pc, #648]	@ (80023b0 <HAL_RCC_OscConfig+0x310>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	e015      	b.n	8002156 <HAL_RCC_OscConfig+0xb6>
 800212a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800212e:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002132:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002136:	fa93 f3a3 	rbit	r3, r3
 800213a:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800213e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002142:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002146:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800214a:	fa93 f3a3 	rbit	r3, r3
 800214e:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002152:	4b97      	ldr	r3, [pc, #604]	@ (80023b0 <HAL_RCC_OscConfig+0x310>)
 8002154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002156:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800215a:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800215e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002162:	fa92 f2a2 	rbit	r2, r2
 8002166:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800216a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800216e:	fab2 f282 	clz	r2, r2
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	f042 0220 	orr.w	r2, r2, #32
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	f002 021f 	and.w	r2, r2, #31
 800217e:	2101      	movs	r1, #1
 8002180:	fa01 f202 	lsl.w	r2, r1, r2
 8002184:	4013      	ands	r3, r2
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 8114 	beq.w	80023b4 <HAL_RCC_OscConfig+0x314>
 800218c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002190:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	f040 810b 	bne.w	80023b4 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	f000 bf85 	b.w	80030ae <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021b4:	d106      	bne.n	80021c4 <HAL_RCC_OscConfig+0x124>
 80021b6:	4b7e      	ldr	r3, [pc, #504]	@ (80023b0 <HAL_RCC_OscConfig+0x310>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a7d      	ldr	r2, [pc, #500]	@ (80023b0 <HAL_RCC_OscConfig+0x310>)
 80021bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	e036      	b.n	8002232 <HAL_RCC_OscConfig+0x192>
 80021c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10c      	bne.n	80021ee <HAL_RCC_OscConfig+0x14e>
 80021d4:	4b76      	ldr	r3, [pc, #472]	@ (80023b0 <HAL_RCC_OscConfig+0x310>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a75      	ldr	r2, [pc, #468]	@ (80023b0 <HAL_RCC_OscConfig+0x310>)
 80021da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021de:	6013      	str	r3, [r2, #0]
 80021e0:	4b73      	ldr	r3, [pc, #460]	@ (80023b0 <HAL_RCC_OscConfig+0x310>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a72      	ldr	r2, [pc, #456]	@ (80023b0 <HAL_RCC_OscConfig+0x310>)
 80021e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021ea:	6013      	str	r3, [r2, #0]
 80021ec:	e021      	b.n	8002232 <HAL_RCC_OscConfig+0x192>
 80021ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021fe:	d10c      	bne.n	800221a <HAL_RCC_OscConfig+0x17a>
 8002200:	4b6b      	ldr	r3, [pc, #428]	@ (80023b0 <HAL_RCC_OscConfig+0x310>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a6a      	ldr	r2, [pc, #424]	@ (80023b0 <HAL_RCC_OscConfig+0x310>)
 8002206:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800220a:	6013      	str	r3, [r2, #0]
 800220c:	4b68      	ldr	r3, [pc, #416]	@ (80023b0 <HAL_RCC_OscConfig+0x310>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a67      	ldr	r2, [pc, #412]	@ (80023b0 <HAL_RCC_OscConfig+0x310>)
 8002212:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002216:	6013      	str	r3, [r2, #0]
 8002218:	e00b      	b.n	8002232 <HAL_RCC_OscConfig+0x192>
 800221a:	4b65      	ldr	r3, [pc, #404]	@ (80023b0 <HAL_RCC_OscConfig+0x310>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a64      	ldr	r2, [pc, #400]	@ (80023b0 <HAL_RCC_OscConfig+0x310>)
 8002220:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	4b62      	ldr	r3, [pc, #392]	@ (80023b0 <HAL_RCC_OscConfig+0x310>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a61      	ldr	r2, [pc, #388]	@ (80023b0 <HAL_RCC_OscConfig+0x310>)
 800222c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002230:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002232:	4b5f      	ldr	r3, [pc, #380]	@ (80023b0 <HAL_RCC_OscConfig+0x310>)
 8002234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002236:	f023 020f 	bic.w	r2, r3, #15
 800223a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800223e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	495a      	ldr	r1, [pc, #360]	@ (80023b0 <HAL_RCC_OscConfig+0x310>)
 8002248:	4313      	orrs	r3, r2
 800224a:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800224c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002250:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d054      	beq.n	8002306 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225c:	f7ff fa42 	bl	80016e4 <HAL_GetTick>
 8002260:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002264:	e00a      	b.n	800227c <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002266:	f7ff fa3d 	bl	80016e4 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b64      	cmp	r3, #100	@ 0x64
 8002274:	d902      	bls.n	800227c <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	f000 bf19 	b.w	80030ae <HAL_RCC_OscConfig+0x100e>
 800227c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002280:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002284:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002288:	fa93 f3a3 	rbit	r3, r3
 800228c:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002290:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002294:	fab3 f383 	clz	r3, r3
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b3f      	cmp	r3, #63	@ 0x3f
 800229c:	d802      	bhi.n	80022a4 <HAL_RCC_OscConfig+0x204>
 800229e:	4b44      	ldr	r3, [pc, #272]	@ (80023b0 <HAL_RCC_OscConfig+0x310>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	e015      	b.n	80022d0 <HAL_RCC_OscConfig+0x230>
 80022a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022a8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ac:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80022b0:	fa93 f3a3 	rbit	r3, r3
 80022b4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80022b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022bc:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80022c0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80022c4:	fa93 f3a3 	rbit	r3, r3
 80022c8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80022cc:	4b38      	ldr	r3, [pc, #224]	@ (80023b0 <HAL_RCC_OscConfig+0x310>)
 80022ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80022d4:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80022d8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80022dc:	fa92 f2a2 	rbit	r2, r2
 80022e0:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80022e4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80022e8:	fab2 f282 	clz	r2, r2
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	f042 0220 	orr.w	r2, r2, #32
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	f002 021f 	and.w	r2, r2, #31
 80022f8:	2101      	movs	r1, #1
 80022fa:	fa01 f202 	lsl.w	r2, r1, r2
 80022fe:	4013      	ands	r3, r2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0b0      	beq.n	8002266 <HAL_RCC_OscConfig+0x1c6>
 8002304:	e057      	b.n	80023b6 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002306:	f7ff f9ed 	bl	80016e4 <HAL_GetTick>
 800230a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800230e:	e00a      	b.n	8002326 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002310:	f7ff f9e8 	bl	80016e4 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b64      	cmp	r3, #100	@ 0x64
 800231e:	d902      	bls.n	8002326 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	f000 bec4 	b.w	80030ae <HAL_RCC_OscConfig+0x100e>
 8002326:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800232a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002332:	fa93 f3a3 	rbit	r3, r3
 8002336:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800233a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800233e:	fab3 f383 	clz	r3, r3
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b3f      	cmp	r3, #63	@ 0x3f
 8002346:	d802      	bhi.n	800234e <HAL_RCC_OscConfig+0x2ae>
 8002348:	4b19      	ldr	r3, [pc, #100]	@ (80023b0 <HAL_RCC_OscConfig+0x310>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	e015      	b.n	800237a <HAL_RCC_OscConfig+0x2da>
 800234e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002352:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002356:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800235a:	fa93 f3a3 	rbit	r3, r3
 800235e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002362:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002366:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800236a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800236e:	fa93 f3a3 	rbit	r3, r3
 8002372:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002376:	4b0e      	ldr	r3, [pc, #56]	@ (80023b0 <HAL_RCC_OscConfig+0x310>)
 8002378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800237e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002382:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002386:	fa92 f2a2 	rbit	r2, r2
 800238a:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800238e:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002392:	fab2 f282 	clz	r2, r2
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	f042 0220 	orr.w	r2, r2, #32
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	f002 021f 	and.w	r2, r2, #31
 80023a2:	2101      	movs	r1, #1
 80023a4:	fa01 f202 	lsl.w	r2, r1, r2
 80023a8:	4013      	ands	r3, r2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1b0      	bne.n	8002310 <HAL_RCC_OscConfig+0x270>
 80023ae:	e002      	b.n	80023b6 <HAL_RCC_OscConfig+0x316>
 80023b0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 816c 	beq.w	80026a4 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80023cc:	4bcc      	ldr	r3, [pc, #816]	@ (8002700 <HAL_RCC_OscConfig+0x660>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f003 030c 	and.w	r3, r3, #12
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00b      	beq.n	80023f0 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80023d8:	4bc9      	ldr	r3, [pc, #804]	@ (8002700 <HAL_RCC_OscConfig+0x660>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 030c 	and.w	r3, r3, #12
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	d16d      	bne.n	80024c0 <HAL_RCC_OscConfig+0x420>
 80023e4:	4bc6      	ldr	r3, [pc, #792]	@ (8002700 <HAL_RCC_OscConfig+0x660>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d167      	bne.n	80024c0 <HAL_RCC_OscConfig+0x420>
 80023f0:	2302      	movs	r3, #2
 80023f2:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80023fa:	fa93 f3a3 	rbit	r3, r3
 80023fe:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002402:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002406:	fab3 f383 	clz	r3, r3
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b3f      	cmp	r3, #63	@ 0x3f
 800240e:	d802      	bhi.n	8002416 <HAL_RCC_OscConfig+0x376>
 8002410:	4bbb      	ldr	r3, [pc, #748]	@ (8002700 <HAL_RCC_OscConfig+0x660>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	e013      	b.n	800243e <HAL_RCC_OscConfig+0x39e>
 8002416:	2302      	movs	r3, #2
 8002418:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002420:	fa93 f3a3 	rbit	r3, r3
 8002424:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002428:	2302      	movs	r3, #2
 800242a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800242e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002432:	fa93 f3a3 	rbit	r3, r3
 8002436:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800243a:	4bb1      	ldr	r3, [pc, #708]	@ (8002700 <HAL_RCC_OscConfig+0x660>)
 800243c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243e:	2202      	movs	r2, #2
 8002440:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002444:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002448:	fa92 f2a2 	rbit	r2, r2
 800244c:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002450:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002454:	fab2 f282 	clz	r2, r2
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	f042 0220 	orr.w	r2, r2, #32
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	f002 021f 	and.w	r2, r2, #31
 8002464:	2101      	movs	r1, #1
 8002466:	fa01 f202 	lsl.w	r2, r1, r2
 800246a:	4013      	ands	r3, r2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00a      	beq.n	8002486 <HAL_RCC_OscConfig+0x3e6>
 8002470:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002474:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d002      	beq.n	8002486 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	f000 be14 	b.w	80030ae <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002486:	4b9e      	ldr	r3, [pc, #632]	@ (8002700 <HAL_RCC_OscConfig+0x660>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800248e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002492:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	21f8      	movs	r1, #248	@ 0xf8
 800249c:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a0:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80024a4:	fa91 f1a1 	rbit	r1, r1
 80024a8:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80024ac:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80024b0:	fab1 f181 	clz	r1, r1
 80024b4:	b2c9      	uxtb	r1, r1
 80024b6:	408b      	lsls	r3, r1
 80024b8:	4991      	ldr	r1, [pc, #580]	@ (8002700 <HAL_RCC_OscConfig+0x660>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024be:	e0f1      	b.n	80026a4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f000 8083 	beq.w	80025d8 <HAL_RCC_OscConfig+0x538>
 80024d2:	2301      	movs	r3, #1
 80024d4:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d8:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80024dc:	fa93 f3a3 	rbit	r3, r3
 80024e0:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80024e4:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024e8:	fab3 f383 	clz	r3, r3
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80024f2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	461a      	mov	r2, r3
 80024fa:	2301      	movs	r3, #1
 80024fc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fe:	f7ff f8f1 	bl	80016e4 <HAL_GetTick>
 8002502:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002506:	e00a      	b.n	800251e <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002508:	f7ff f8ec 	bl	80016e4 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d902      	bls.n	800251e <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	f000 bdc8 	b.w	80030ae <HAL_RCC_OscConfig+0x100e>
 800251e:	2302      	movs	r3, #2
 8002520:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002524:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002528:	fa93 f3a3 	rbit	r3, r3
 800252c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002530:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002534:	fab3 f383 	clz	r3, r3
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b3f      	cmp	r3, #63	@ 0x3f
 800253c:	d802      	bhi.n	8002544 <HAL_RCC_OscConfig+0x4a4>
 800253e:	4b70      	ldr	r3, [pc, #448]	@ (8002700 <HAL_RCC_OscConfig+0x660>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	e013      	b.n	800256c <HAL_RCC_OscConfig+0x4cc>
 8002544:	2302      	movs	r3, #2
 8002546:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800254e:	fa93 f3a3 	rbit	r3, r3
 8002552:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002556:	2302      	movs	r3, #2
 8002558:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800255c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002560:	fa93 f3a3 	rbit	r3, r3
 8002564:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002568:	4b65      	ldr	r3, [pc, #404]	@ (8002700 <HAL_RCC_OscConfig+0x660>)
 800256a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256c:	2202      	movs	r2, #2
 800256e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002572:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002576:	fa92 f2a2 	rbit	r2, r2
 800257a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800257e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002582:	fab2 f282 	clz	r2, r2
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	f042 0220 	orr.w	r2, r2, #32
 800258c:	b2d2      	uxtb	r2, r2
 800258e:	f002 021f 	and.w	r2, r2, #31
 8002592:	2101      	movs	r1, #1
 8002594:	fa01 f202 	lsl.w	r2, r1, r2
 8002598:	4013      	ands	r3, r2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0b4      	beq.n	8002508 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800259e:	4b58      	ldr	r3, [pc, #352]	@ (8002700 <HAL_RCC_OscConfig+0x660>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	21f8      	movs	r1, #248	@ 0xf8
 80025b4:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80025bc:	fa91 f1a1 	rbit	r1, r1
 80025c0:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80025c4:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80025c8:	fab1 f181 	clz	r1, r1
 80025cc:	b2c9      	uxtb	r1, r1
 80025ce:	408b      	lsls	r3, r1
 80025d0:	494b      	ldr	r1, [pc, #300]	@ (8002700 <HAL_RCC_OscConfig+0x660>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	600b      	str	r3, [r1, #0]
 80025d6:	e065      	b.n	80026a4 <HAL_RCC_OscConfig+0x604>
 80025d8:	2301      	movs	r3, #1
 80025da:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025de:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80025e2:	fa93 f3a3 	rbit	r3, r3
 80025e6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80025ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ee:	fab3 f383 	clz	r3, r3
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80025f8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	461a      	mov	r2, r3
 8002600:	2300      	movs	r3, #0
 8002602:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002604:	f7ff f86e 	bl	80016e4 <HAL_GetTick>
 8002608:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800260c:	e00a      	b.n	8002624 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800260e:	f7ff f869 	bl	80016e4 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d902      	bls.n	8002624 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	f000 bd45 	b.w	80030ae <HAL_RCC_OscConfig+0x100e>
 8002624:	2302      	movs	r3, #2
 8002626:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800262e:	fa93 f3a3 	rbit	r3, r3
 8002632:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002636:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800263a:	fab3 f383 	clz	r3, r3
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b3f      	cmp	r3, #63	@ 0x3f
 8002642:	d802      	bhi.n	800264a <HAL_RCC_OscConfig+0x5aa>
 8002644:	4b2e      	ldr	r3, [pc, #184]	@ (8002700 <HAL_RCC_OscConfig+0x660>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	e013      	b.n	8002672 <HAL_RCC_OscConfig+0x5d2>
 800264a:	2302      	movs	r3, #2
 800264c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002650:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002654:	fa93 f3a3 	rbit	r3, r3
 8002658:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800265c:	2302      	movs	r3, #2
 800265e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002662:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002666:	fa93 f3a3 	rbit	r3, r3
 800266a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800266e:	4b24      	ldr	r3, [pc, #144]	@ (8002700 <HAL_RCC_OscConfig+0x660>)
 8002670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002672:	2202      	movs	r2, #2
 8002674:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002678:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800267c:	fa92 f2a2 	rbit	r2, r2
 8002680:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002684:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002688:	fab2 f282 	clz	r2, r2
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	f042 0220 	orr.w	r2, r2, #32
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	f002 021f 	and.w	r2, r2, #31
 8002698:	2101      	movs	r1, #1
 800269a:	fa01 f202 	lsl.w	r2, r1, r2
 800269e:	4013      	ands	r3, r2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1b4      	bne.n	800260e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0308 	and.w	r3, r3, #8
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 8115 	beq.w	80028e4 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d07e      	beq.n	80027c8 <HAL_RCC_OscConfig+0x728>
 80026ca:	2301      	movs	r3, #1
 80026cc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80026d4:	fa93 f3a3 	rbit	r3, r3
 80026d8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80026dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026e0:	fab3 f383 	clz	r3, r3
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	461a      	mov	r2, r3
 80026e8:	4b06      	ldr	r3, [pc, #24]	@ (8002704 <HAL_RCC_OscConfig+0x664>)
 80026ea:	4413      	add	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	461a      	mov	r2, r3
 80026f0:	2301      	movs	r3, #1
 80026f2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f4:	f7fe fff6 	bl	80016e4 <HAL_GetTick>
 80026f8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026fc:	e00f      	b.n	800271e <HAL_RCC_OscConfig+0x67e>
 80026fe:	bf00      	nop
 8002700:	40021000 	.word	0x40021000
 8002704:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002708:	f7fe ffec 	bl	80016e4 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d902      	bls.n	800271e <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	f000 bcc8 	b.w	80030ae <HAL_RCC_OscConfig+0x100e>
 800271e:	2302      	movs	r3, #2
 8002720:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002724:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002728:	fa93 f3a3 	rbit	r3, r3
 800272c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002730:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002734:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002738:	2202      	movs	r2, #2
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002740:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	fa93 f2a3 	rbit	r2, r3
 800274a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800274e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002758:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800275c:	2202      	movs	r2, #2
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002764:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	fa93 f2a3 	rbit	r2, r3
 800276e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002772:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002776:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002778:	4bb0      	ldr	r3, [pc, #704]	@ (8002a3c <HAL_RCC_OscConfig+0x99c>)
 800277a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800277c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002780:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002784:	2102      	movs	r1, #2
 8002786:	6019      	str	r1, [r3, #0]
 8002788:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800278c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	fa93 f1a3 	rbit	r1, r3
 8002796:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800279a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800279e:	6019      	str	r1, [r3, #0]
  return result;
 80027a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	fab3 f383 	clz	r3, r3
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	f003 031f 	and.w	r3, r3, #31
 80027ba:	2101      	movs	r1, #1
 80027bc:	fa01 f303 	lsl.w	r3, r1, r3
 80027c0:	4013      	ands	r3, r2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0a0      	beq.n	8002708 <HAL_RCC_OscConfig+0x668>
 80027c6:	e08d      	b.n	80028e4 <HAL_RCC_OscConfig+0x844>
 80027c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027cc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80027d0:	2201      	movs	r2, #1
 80027d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	fa93 f2a3 	rbit	r2, r3
 80027e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80027ea:	601a      	str	r2, [r3, #0]
  return result;
 80027ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80027f4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027f6:	fab3 f383 	clz	r3, r3
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	461a      	mov	r2, r3
 80027fe:	4b90      	ldr	r3, [pc, #576]	@ (8002a40 <HAL_RCC_OscConfig+0x9a0>)
 8002800:	4413      	add	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	461a      	mov	r2, r3
 8002806:	2300      	movs	r3, #0
 8002808:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800280a:	f7fe ff6b 	bl	80016e4 <HAL_GetTick>
 800280e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002812:	e00a      	b.n	800282a <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002814:	f7fe ff66 	bl	80016e4 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d902      	bls.n	800282a <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	f000 bc42 	b.w	80030ae <HAL_RCC_OscConfig+0x100e>
 800282a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800282e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002832:	2202      	movs	r2, #2
 8002834:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002836:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800283a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	fa93 f2a3 	rbit	r2, r3
 8002844:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002848:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002852:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002856:	2202      	movs	r2, #2
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800285e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	fa93 f2a3 	rbit	r2, r3
 8002868:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800286c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002876:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800287a:	2202      	movs	r2, #2
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002882:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	fa93 f2a3 	rbit	r2, r3
 800288c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002890:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002894:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002896:	4b69      	ldr	r3, [pc, #420]	@ (8002a3c <HAL_RCC_OscConfig+0x99c>)
 8002898:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800289a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800289e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80028a2:	2102      	movs	r1, #2
 80028a4:	6019      	str	r1, [r3, #0]
 80028a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028aa:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	fa93 f1a3 	rbit	r1, r3
 80028b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80028bc:	6019      	str	r1, [r3, #0]
  return result;
 80028be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	fab3 f383 	clz	r3, r3
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	f003 031f 	and.w	r3, r3, #31
 80028d8:	2101      	movs	r1, #1
 80028da:	fa01 f303 	lsl.w	r3, r1, r3
 80028de:	4013      	ands	r3, r2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d197      	bne.n	8002814 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 819e 	beq.w	8002c36 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028fa:	2300      	movs	r3, #0
 80028fc:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002900:	4b4e      	ldr	r3, [pc, #312]	@ (8002a3c <HAL_RCC_OscConfig+0x99c>)
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d116      	bne.n	800293a <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800290c:	4b4b      	ldr	r3, [pc, #300]	@ (8002a3c <HAL_RCC_OscConfig+0x99c>)
 800290e:	69db      	ldr	r3, [r3, #28]
 8002910:	4a4a      	ldr	r2, [pc, #296]	@ (8002a3c <HAL_RCC_OscConfig+0x99c>)
 8002912:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002916:	61d3      	str	r3, [r2, #28]
 8002918:	4b48      	ldr	r3, [pc, #288]	@ (8002a3c <HAL_RCC_OscConfig+0x99c>)
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002920:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002924:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800292e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002932:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002934:	2301      	movs	r3, #1
 8002936:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293a:	4b42      	ldr	r3, [pc, #264]	@ (8002a44 <HAL_RCC_OscConfig+0x9a4>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002942:	2b00      	cmp	r3, #0
 8002944:	d11a      	bne.n	800297c <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002946:	4b3f      	ldr	r3, [pc, #252]	@ (8002a44 <HAL_RCC_OscConfig+0x9a4>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a3e      	ldr	r2, [pc, #248]	@ (8002a44 <HAL_RCC_OscConfig+0x9a4>)
 800294c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002950:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002952:	f7fe fec7 	bl	80016e4 <HAL_GetTick>
 8002956:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800295a:	e009      	b.n	8002970 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800295c:	f7fe fec2 	bl	80016e4 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b64      	cmp	r3, #100	@ 0x64
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e39e      	b.n	80030ae <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002970:	4b34      	ldr	r3, [pc, #208]	@ (8002a44 <HAL_RCC_OscConfig+0x9a4>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0ef      	beq.n	800295c <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800297c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002980:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d106      	bne.n	800299a <HAL_RCC_OscConfig+0x8fa>
 800298c:	4b2b      	ldr	r3, [pc, #172]	@ (8002a3c <HAL_RCC_OscConfig+0x99c>)
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	4a2a      	ldr	r2, [pc, #168]	@ (8002a3c <HAL_RCC_OscConfig+0x99c>)
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	6213      	str	r3, [r2, #32]
 8002998:	e035      	b.n	8002a06 <HAL_RCC_OscConfig+0x966>
 800299a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800299e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10c      	bne.n	80029c4 <HAL_RCC_OscConfig+0x924>
 80029aa:	4b24      	ldr	r3, [pc, #144]	@ (8002a3c <HAL_RCC_OscConfig+0x99c>)
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	4a23      	ldr	r2, [pc, #140]	@ (8002a3c <HAL_RCC_OscConfig+0x99c>)
 80029b0:	f023 0301 	bic.w	r3, r3, #1
 80029b4:	6213      	str	r3, [r2, #32]
 80029b6:	4b21      	ldr	r3, [pc, #132]	@ (8002a3c <HAL_RCC_OscConfig+0x99c>)
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	4a20      	ldr	r2, [pc, #128]	@ (8002a3c <HAL_RCC_OscConfig+0x99c>)
 80029bc:	f023 0304 	bic.w	r3, r3, #4
 80029c0:	6213      	str	r3, [r2, #32]
 80029c2:	e020      	b.n	8002a06 <HAL_RCC_OscConfig+0x966>
 80029c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	2b05      	cmp	r3, #5
 80029d2:	d10c      	bne.n	80029ee <HAL_RCC_OscConfig+0x94e>
 80029d4:	4b19      	ldr	r3, [pc, #100]	@ (8002a3c <HAL_RCC_OscConfig+0x99c>)
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	4a18      	ldr	r2, [pc, #96]	@ (8002a3c <HAL_RCC_OscConfig+0x99c>)
 80029da:	f043 0304 	orr.w	r3, r3, #4
 80029de:	6213      	str	r3, [r2, #32]
 80029e0:	4b16      	ldr	r3, [pc, #88]	@ (8002a3c <HAL_RCC_OscConfig+0x99c>)
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	4a15      	ldr	r2, [pc, #84]	@ (8002a3c <HAL_RCC_OscConfig+0x99c>)
 80029e6:	f043 0301 	orr.w	r3, r3, #1
 80029ea:	6213      	str	r3, [r2, #32]
 80029ec:	e00b      	b.n	8002a06 <HAL_RCC_OscConfig+0x966>
 80029ee:	4b13      	ldr	r3, [pc, #76]	@ (8002a3c <HAL_RCC_OscConfig+0x99c>)
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	4a12      	ldr	r2, [pc, #72]	@ (8002a3c <HAL_RCC_OscConfig+0x99c>)
 80029f4:	f023 0301 	bic.w	r3, r3, #1
 80029f8:	6213      	str	r3, [r2, #32]
 80029fa:	4b10      	ldr	r3, [pc, #64]	@ (8002a3c <HAL_RCC_OscConfig+0x99c>)
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	4a0f      	ldr	r2, [pc, #60]	@ (8002a3c <HAL_RCC_OscConfig+0x99c>)
 8002a00:	f023 0304 	bic.w	r3, r3, #4
 8002a04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 8087 	beq.w	8002b26 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a18:	f7fe fe64 	bl	80016e4 <HAL_GetTick>
 8002a1c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a20:	e012      	b.n	8002a48 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a22:	f7fe fe5f 	bl	80016e4 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d908      	bls.n	8002a48 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e339      	b.n	80030ae <HAL_RCC_OscConfig+0x100e>
 8002a3a:	bf00      	nop
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	10908120 	.word	0x10908120
 8002a44:	40007000 	.word	0x40007000
 8002a48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a4c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002a50:	2202      	movs	r2, #2
 8002a52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a58:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	fa93 f2a3 	rbit	r2, r3
 8002a62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a66:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a70:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002a74:	2202      	movs	r2, #2
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a7c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	fa93 f2a3 	rbit	r2, r3
 8002a86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a8a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002a8e:	601a      	str	r2, [r3, #0]
  return result;
 8002a90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a94:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002a98:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a9a:	fab3 f383 	clz	r3, r3
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d102      	bne.n	8002ab0 <HAL_RCC_OscConfig+0xa10>
 8002aaa:	4b98      	ldr	r3, [pc, #608]	@ (8002d0c <HAL_RCC_OscConfig+0xc6c>)
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	e013      	b.n	8002ad8 <HAL_RCC_OscConfig+0xa38>
 8002ab0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ab4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002ab8:	2202      	movs	r2, #2
 8002aba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	fa93 f2a3 	rbit	r2, r3
 8002aca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ace:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	4b8d      	ldr	r3, [pc, #564]	@ (8002d0c <HAL_RCC_OscConfig+0xc6c>)
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002adc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002ae0:	2102      	movs	r1, #2
 8002ae2:	6011      	str	r1, [r2, #0]
 8002ae4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ae8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002aec:	6812      	ldr	r2, [r2, #0]
 8002aee:	fa92 f1a2 	rbit	r1, r2
 8002af2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002af6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002afa:	6011      	str	r1, [r2, #0]
  return result;
 8002afc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b00:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002b04:	6812      	ldr	r2, [r2, #0]
 8002b06:	fab2 f282 	clz	r2, r2
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	f002 021f 	and.w	r2, r2, #31
 8002b16:	2101      	movs	r1, #1
 8002b18:	fa01 f202 	lsl.w	r2, r1, r2
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f43f af7f 	beq.w	8002a22 <HAL_RCC_OscConfig+0x982>
 8002b24:	e07d      	b.n	8002c22 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b26:	f7fe fddd 	bl	80016e4 <HAL_GetTick>
 8002b2a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b2e:	e00b      	b.n	8002b48 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b30:	f7fe fdd8 	bl	80016e4 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e2b2      	b.n	80030ae <HAL_RCC_OscConfig+0x100e>
 8002b48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b4c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002b50:	2202      	movs	r2, #2
 8002b52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b58:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	fa93 f2a3 	rbit	r2, r3
 8002b62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b66:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b70:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002b74:	2202      	movs	r2, #2
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b7c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	fa93 f2a3 	rbit	r2, r3
 8002b86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b8a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002b8e:	601a      	str	r2, [r3, #0]
  return result;
 8002b90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b94:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002b98:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b9a:	fab3 f383 	clz	r3, r3
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d102      	bne.n	8002bb0 <HAL_RCC_OscConfig+0xb10>
 8002baa:	4b58      	ldr	r3, [pc, #352]	@ (8002d0c <HAL_RCC_OscConfig+0xc6c>)
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	e013      	b.n	8002bd8 <HAL_RCC_OscConfig+0xb38>
 8002bb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002bb8:	2202      	movs	r2, #2
 8002bba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bc0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	fa93 f2a3 	rbit	r2, r3
 8002bca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bce:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	4b4d      	ldr	r3, [pc, #308]	@ (8002d0c <HAL_RCC_OscConfig+0xc6c>)
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002bdc:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002be0:	2102      	movs	r1, #2
 8002be2:	6011      	str	r1, [r2, #0]
 8002be4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002be8:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002bec:	6812      	ldr	r2, [r2, #0]
 8002bee:	fa92 f1a2 	rbit	r1, r2
 8002bf2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002bf6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002bfa:	6011      	str	r1, [r2, #0]
  return result;
 8002bfc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c00:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002c04:	6812      	ldr	r2, [r2, #0]
 8002c06:	fab2 f282 	clz	r2, r2
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c10:	b2d2      	uxtb	r2, r2
 8002c12:	f002 021f 	and.w	r2, r2, #31
 8002c16:	2101      	movs	r1, #1
 8002c18:	fa01 f202 	lsl.w	r2, r1, r2
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d186      	bne.n	8002b30 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c22:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d105      	bne.n	8002c36 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c2a:	4b38      	ldr	r3, [pc, #224]	@ (8002d0c <HAL_RCC_OscConfig+0xc6c>)
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	4a37      	ldr	r2, [pc, #220]	@ (8002d0c <HAL_RCC_OscConfig+0xc6c>)
 8002c30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c34:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c3a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 8232 	beq.w	80030ac <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c48:	4b30      	ldr	r3, [pc, #192]	@ (8002d0c <HAL_RCC_OscConfig+0xc6c>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 030c 	and.w	r3, r3, #12
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	f000 8201 	beq.w	8003058 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	f040 8157 	bne.w	8002f16 <HAL_RCC_OscConfig+0xe76>
 8002c68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c6c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002c70:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002c74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c7a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	fa93 f2a3 	rbit	r2, r3
 8002c84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c88:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002c8c:	601a      	str	r2, [r3, #0]
  return result;
 8002c8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c92:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002c96:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c98:	fab3 f383 	clz	r3, r3
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002ca2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	461a      	mov	r2, r3
 8002caa:	2300      	movs	r3, #0
 8002cac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cae:	f7fe fd19 	bl	80016e4 <HAL_GetTick>
 8002cb2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cb6:	e009      	b.n	8002ccc <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cb8:	f7fe fd14 	bl	80016e4 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e1f0      	b.n	80030ae <HAL_RCC_OscConfig+0x100e>
 8002ccc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002cd4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002cd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cde:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	fa93 f2a3 	rbit	r2, r3
 8002ce8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cec:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002cf0:	601a      	str	r2, [r3, #0]
  return result;
 8002cf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cf6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002cfa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cfc:	fab3 f383 	clz	r3, r3
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b3f      	cmp	r3, #63	@ 0x3f
 8002d04:	d804      	bhi.n	8002d10 <HAL_RCC_OscConfig+0xc70>
 8002d06:	4b01      	ldr	r3, [pc, #4]	@ (8002d0c <HAL_RCC_OscConfig+0xc6c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	e029      	b.n	8002d60 <HAL_RCC_OscConfig+0xcc0>
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d14:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002d18:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d22:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	fa93 f2a3 	rbit	r2, r3
 8002d2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d30:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d3a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002d3e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d48:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	fa93 f2a3 	rbit	r2, r3
 8002d52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d56:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	4bc3      	ldr	r3, [pc, #780]	@ (800306c <HAL_RCC_OscConfig+0xfcc>)
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d60:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d64:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002d68:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002d6c:	6011      	str	r1, [r2, #0]
 8002d6e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d72:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002d76:	6812      	ldr	r2, [r2, #0]
 8002d78:	fa92 f1a2 	rbit	r1, r2
 8002d7c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d80:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002d84:	6011      	str	r1, [r2, #0]
  return result;
 8002d86:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d8a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002d8e:	6812      	ldr	r2, [r2, #0]
 8002d90:	fab2 f282 	clz	r2, r2
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	f042 0220 	orr.w	r2, r2, #32
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	f002 021f 	and.w	r2, r2, #31
 8002da0:	2101      	movs	r1, #1
 8002da2:	fa01 f202 	lsl.w	r2, r1, r2
 8002da6:	4013      	ands	r3, r2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d185      	bne.n	8002cb8 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dac:	4baf      	ldr	r3, [pc, #700]	@ (800306c <HAL_RCC_OscConfig+0xfcc>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002db4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002db8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002dc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	430b      	orrs	r3, r1
 8002dce:	49a7      	ldr	r1, [pc, #668]	@ (800306c <HAL_RCC_OscConfig+0xfcc>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	604b      	str	r3, [r1, #4]
 8002dd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dd8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002ddc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002de0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	fa93 f2a3 	rbit	r2, r3
 8002df0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002df4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002df8:	601a      	str	r2, [r3, #0]
  return result;
 8002dfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dfe:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002e02:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e04:	fab3 f383 	clz	r3, r3
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002e0e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	461a      	mov	r2, r3
 8002e16:	2301      	movs	r3, #1
 8002e18:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1a:	f7fe fc63 	bl	80016e4 <HAL_GetTick>
 8002e1e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e22:	e009      	b.n	8002e38 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e24:	f7fe fc5e 	bl	80016e4 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e13a      	b.n	80030ae <HAL_RCC_OscConfig+0x100e>
 8002e38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e3c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002e40:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e4a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	fa93 f2a3 	rbit	r2, r3
 8002e54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e58:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002e5c:	601a      	str	r2, [r3, #0]
  return result;
 8002e5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e62:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002e66:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e68:	fab3 f383 	clz	r3, r3
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002e70:	d802      	bhi.n	8002e78 <HAL_RCC_OscConfig+0xdd8>
 8002e72:	4b7e      	ldr	r3, [pc, #504]	@ (800306c <HAL_RCC_OscConfig+0xfcc>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	e027      	b.n	8002ec8 <HAL_RCC_OscConfig+0xe28>
 8002e78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e7c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002e80:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e8a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	fa93 f2a3 	rbit	r2, r3
 8002e94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e98:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ea2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002ea6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eb0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	fa93 f2a3 	rbit	r2, r3
 8002eba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ebe:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	4b69      	ldr	r3, [pc, #420]	@ (800306c <HAL_RCC_OscConfig+0xfcc>)
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ecc:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002ed0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002ed4:	6011      	str	r1, [r2, #0]
 8002ed6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002eda:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002ede:	6812      	ldr	r2, [r2, #0]
 8002ee0:	fa92 f1a2 	rbit	r1, r2
 8002ee4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ee8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002eec:	6011      	str	r1, [r2, #0]
  return result;
 8002eee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ef2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002ef6:	6812      	ldr	r2, [r2, #0]
 8002ef8:	fab2 f282 	clz	r2, r2
 8002efc:	b2d2      	uxtb	r2, r2
 8002efe:	f042 0220 	orr.w	r2, r2, #32
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	f002 021f 	and.w	r2, r2, #31
 8002f08:	2101      	movs	r1, #1
 8002f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f0e:	4013      	ands	r3, r2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d087      	beq.n	8002e24 <HAL_RCC_OscConfig+0xd84>
 8002f14:	e0ca      	b.n	80030ac <HAL_RCC_OscConfig+0x100c>
 8002f16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f1a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002f1e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f28:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	fa93 f2a3 	rbit	r2, r3
 8002f32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f36:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002f3a:	601a      	str	r2, [r3, #0]
  return result;
 8002f3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f40:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002f44:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f46:	fab3 f383 	clz	r3, r3
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002f50:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	461a      	mov	r2, r3
 8002f58:	2300      	movs	r3, #0
 8002f5a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5c:	f7fe fbc2 	bl	80016e4 <HAL_GetTick>
 8002f60:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f64:	e009      	b.n	8002f7a <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f66:	f7fe fbbd 	bl	80016e4 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e099      	b.n	80030ae <HAL_RCC_OscConfig+0x100e>
 8002f7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f7e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002f82:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f8c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	fa93 f2a3 	rbit	r2, r3
 8002f96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f9a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002f9e:	601a      	str	r2, [r3, #0]
  return result;
 8002fa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fa4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002fa8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002faa:	fab3 f383 	clz	r3, r3
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b3f      	cmp	r3, #63	@ 0x3f
 8002fb2:	d802      	bhi.n	8002fba <HAL_RCC_OscConfig+0xf1a>
 8002fb4:	4b2d      	ldr	r3, [pc, #180]	@ (800306c <HAL_RCC_OscConfig+0xfcc>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	e027      	b.n	800300a <HAL_RCC_OscConfig+0xf6a>
 8002fba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fbe:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002fc2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fcc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	fa93 f2a3 	rbit	r2, r3
 8002fd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fda:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002fe8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	fa93 f2a3 	rbit	r2, r3
 8002ffc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003000:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	4b19      	ldr	r3, [pc, #100]	@ (800306c <HAL_RCC_OscConfig+0xfcc>)
 8003008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800300e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003012:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003016:	6011      	str	r1, [r2, #0]
 8003018:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800301c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003020:	6812      	ldr	r2, [r2, #0]
 8003022:	fa92 f1a2 	rbit	r1, r2
 8003026:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800302a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800302e:	6011      	str	r1, [r2, #0]
  return result;
 8003030:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003034:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003038:	6812      	ldr	r2, [r2, #0]
 800303a:	fab2 f282 	clz	r2, r2
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	f042 0220 	orr.w	r2, r2, #32
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	f002 021f 	and.w	r2, r2, #31
 800304a:	2101      	movs	r1, #1
 800304c:	fa01 f202 	lsl.w	r2, r1, r2
 8003050:	4013      	ands	r3, r2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d187      	bne.n	8002f66 <HAL_RCC_OscConfig+0xec6>
 8003056:	e029      	b.n	80030ac <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003058:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800305c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	69db      	ldr	r3, [r3, #28]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d103      	bne.n	8003070 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e020      	b.n	80030ae <HAL_RCC_OscConfig+0x100e>
 800306c:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003070:	4b11      	ldr	r3, [pc, #68]	@ (80030b8 <HAL_RCC_OscConfig+0x1018>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003078:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800307c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003080:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003084:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	429a      	cmp	r2, r3
 800308e:	d10b      	bne.n	80030a8 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003090:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003094:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003098:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800309c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d001      	beq.n	80030ac <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e000      	b.n	80030ae <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40021000 	.word	0x40021000

080030bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b09e      	sub	sp, #120	@ 0x78
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e154      	b.n	800337e <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030d4:	4b89      	ldr	r3, [pc, #548]	@ (80032fc <HAL_RCC_ClockConfig+0x240>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d910      	bls.n	8003104 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e2:	4b86      	ldr	r3, [pc, #536]	@ (80032fc <HAL_RCC_ClockConfig+0x240>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f023 0207 	bic.w	r2, r3, #7
 80030ea:	4984      	ldr	r1, [pc, #528]	@ (80032fc <HAL_RCC_ClockConfig+0x240>)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f2:	4b82      	ldr	r3, [pc, #520]	@ (80032fc <HAL_RCC_ClockConfig+0x240>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d001      	beq.n	8003104 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e13c      	b.n	800337e <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d008      	beq.n	8003122 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003110:	4b7b      	ldr	r3, [pc, #492]	@ (8003300 <HAL_RCC_ClockConfig+0x244>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	4978      	ldr	r1, [pc, #480]	@ (8003300 <HAL_RCC_ClockConfig+0x244>)
 800311e:	4313      	orrs	r3, r2
 8003120:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 80cd 	beq.w	80032ca <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d137      	bne.n	80031a8 <HAL_RCC_ClockConfig+0xec>
 8003138:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800313c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003140:	fa93 f3a3 	rbit	r3, r3
 8003144:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003146:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003148:	fab3 f383 	clz	r3, r3
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003150:	d802      	bhi.n	8003158 <HAL_RCC_ClockConfig+0x9c>
 8003152:	4b6b      	ldr	r3, [pc, #428]	@ (8003300 <HAL_RCC_ClockConfig+0x244>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	e00f      	b.n	8003178 <HAL_RCC_ClockConfig+0xbc>
 8003158:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800315c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003160:	fa93 f3a3 	rbit	r3, r3
 8003164:	667b      	str	r3, [r7, #100]	@ 0x64
 8003166:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800316a:	663b      	str	r3, [r7, #96]	@ 0x60
 800316c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800316e:	fa93 f3a3 	rbit	r3, r3
 8003172:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003174:	4b62      	ldr	r3, [pc, #392]	@ (8003300 <HAL_RCC_ClockConfig+0x244>)
 8003176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003178:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800317c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800317e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003180:	fa92 f2a2 	rbit	r2, r2
 8003184:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003186:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003188:	fab2 f282 	clz	r2, r2
 800318c:	b2d2      	uxtb	r2, r2
 800318e:	f042 0220 	orr.w	r2, r2, #32
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	f002 021f 	and.w	r2, r2, #31
 8003198:	2101      	movs	r1, #1
 800319a:	fa01 f202 	lsl.w	r2, r1, r2
 800319e:	4013      	ands	r3, r2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d171      	bne.n	8003288 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e0ea      	b.n	800337e <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d137      	bne.n	8003220 <HAL_RCC_ClockConfig+0x164>
 80031b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031b4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031b8:	fa93 f3a3 	rbit	r3, r3
 80031bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80031be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c0:	fab3 f383 	clz	r3, r3
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b3f      	cmp	r3, #63	@ 0x3f
 80031c8:	d802      	bhi.n	80031d0 <HAL_RCC_ClockConfig+0x114>
 80031ca:	4b4d      	ldr	r3, [pc, #308]	@ (8003300 <HAL_RCC_ClockConfig+0x244>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	e00f      	b.n	80031f0 <HAL_RCC_ClockConfig+0x134>
 80031d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031d8:	fa93 f3a3 	rbit	r3, r3
 80031dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80031de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80031e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031e6:	fa93 f3a3 	rbit	r3, r3
 80031ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031ec:	4b44      	ldr	r3, [pc, #272]	@ (8003300 <HAL_RCC_ClockConfig+0x244>)
 80031ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031f4:	63ba      	str	r2, [r7, #56]	@ 0x38
 80031f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80031f8:	fa92 f2a2 	rbit	r2, r2
 80031fc:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80031fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003200:	fab2 f282 	clz	r2, r2
 8003204:	b2d2      	uxtb	r2, r2
 8003206:	f042 0220 	orr.w	r2, r2, #32
 800320a:	b2d2      	uxtb	r2, r2
 800320c:	f002 021f 	and.w	r2, r2, #31
 8003210:	2101      	movs	r1, #1
 8003212:	fa01 f202 	lsl.w	r2, r1, r2
 8003216:	4013      	ands	r3, r2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d135      	bne.n	8003288 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e0ae      	b.n	800337e <HAL_RCC_ClockConfig+0x2c2>
 8003220:	2302      	movs	r3, #2
 8003222:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003226:	fa93 f3a3 	rbit	r3, r3
 800322a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800322c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800322e:	fab3 f383 	clz	r3, r3
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b3f      	cmp	r3, #63	@ 0x3f
 8003236:	d802      	bhi.n	800323e <HAL_RCC_ClockConfig+0x182>
 8003238:	4b31      	ldr	r3, [pc, #196]	@ (8003300 <HAL_RCC_ClockConfig+0x244>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	e00d      	b.n	800325a <HAL_RCC_ClockConfig+0x19e>
 800323e:	2302      	movs	r3, #2
 8003240:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003244:	fa93 f3a3 	rbit	r3, r3
 8003248:	627b      	str	r3, [r7, #36]	@ 0x24
 800324a:	2302      	movs	r3, #2
 800324c:	623b      	str	r3, [r7, #32]
 800324e:	6a3b      	ldr	r3, [r7, #32]
 8003250:	fa93 f3a3 	rbit	r3, r3
 8003254:	61fb      	str	r3, [r7, #28]
 8003256:	4b2a      	ldr	r3, [pc, #168]	@ (8003300 <HAL_RCC_ClockConfig+0x244>)
 8003258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325a:	2202      	movs	r2, #2
 800325c:	61ba      	str	r2, [r7, #24]
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	fa92 f2a2 	rbit	r2, r2
 8003264:	617a      	str	r2, [r7, #20]
  return result;
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	fab2 f282 	clz	r2, r2
 800326c:	b2d2      	uxtb	r2, r2
 800326e:	f042 0220 	orr.w	r2, r2, #32
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	f002 021f 	and.w	r2, r2, #31
 8003278:	2101      	movs	r1, #1
 800327a:	fa01 f202 	lsl.w	r2, r1, r2
 800327e:	4013      	ands	r3, r2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e07a      	b.n	800337e <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003288:	4b1d      	ldr	r3, [pc, #116]	@ (8003300 <HAL_RCC_ClockConfig+0x244>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f023 0203 	bic.w	r2, r3, #3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	491a      	ldr	r1, [pc, #104]	@ (8003300 <HAL_RCC_ClockConfig+0x244>)
 8003296:	4313      	orrs	r3, r2
 8003298:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800329a:	f7fe fa23 	bl	80016e4 <HAL_GetTick>
 800329e:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a0:	e00a      	b.n	80032b8 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a2:	f7fe fa1f 	bl	80016e4 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e062      	b.n	800337e <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b8:	4b11      	ldr	r3, [pc, #68]	@ (8003300 <HAL_RCC_ClockConfig+0x244>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f003 020c 	and.w	r2, r3, #12
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d1eb      	bne.n	80032a2 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032ca:	4b0c      	ldr	r3, [pc, #48]	@ (80032fc <HAL_RCC_ClockConfig+0x240>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d215      	bcs.n	8003304 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d8:	4b08      	ldr	r3, [pc, #32]	@ (80032fc <HAL_RCC_ClockConfig+0x240>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f023 0207 	bic.w	r2, r3, #7
 80032e0:	4906      	ldr	r1, [pc, #24]	@ (80032fc <HAL_RCC_ClockConfig+0x240>)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e8:	4b04      	ldr	r3, [pc, #16]	@ (80032fc <HAL_RCC_ClockConfig+0x240>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d006      	beq.n	8003304 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e041      	b.n	800337e <HAL_RCC_ClockConfig+0x2c2>
 80032fa:	bf00      	nop
 80032fc:	40022000 	.word	0x40022000
 8003300:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	d008      	beq.n	8003322 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003310:	4b1d      	ldr	r3, [pc, #116]	@ (8003388 <HAL_RCC_ClockConfig+0x2cc>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	491a      	ldr	r1, [pc, #104]	@ (8003388 <HAL_RCC_ClockConfig+0x2cc>)
 800331e:	4313      	orrs	r3, r2
 8003320:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b00      	cmp	r3, #0
 800332c:	d009      	beq.n	8003342 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800332e:	4b16      	ldr	r3, [pc, #88]	@ (8003388 <HAL_RCC_ClockConfig+0x2cc>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	4912      	ldr	r1, [pc, #72]	@ (8003388 <HAL_RCC_ClockConfig+0x2cc>)
 800333e:	4313      	orrs	r3, r2
 8003340:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003342:	f000 f829 	bl	8003398 <HAL_RCC_GetSysClockFreq>
 8003346:	4601      	mov	r1, r0
 8003348:	4b0f      	ldr	r3, [pc, #60]	@ (8003388 <HAL_RCC_ClockConfig+0x2cc>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003350:	22f0      	movs	r2, #240	@ 0xf0
 8003352:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	fa92 f2a2 	rbit	r2, r2
 800335a:	60fa      	str	r2, [r7, #12]
  return result;
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	fab2 f282 	clz	r2, r2
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	40d3      	lsrs	r3, r2
 8003366:	4a09      	ldr	r2, [pc, #36]	@ (800338c <HAL_RCC_ClockConfig+0x2d0>)
 8003368:	5cd3      	ldrb	r3, [r2, r3]
 800336a:	fa21 f303 	lsr.w	r3, r1, r3
 800336e:	4a08      	ldr	r2, [pc, #32]	@ (8003390 <HAL_RCC_ClockConfig+0x2d4>)
 8003370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003372:	4b08      	ldr	r3, [pc, #32]	@ (8003394 <HAL_RCC_ClockConfig+0x2d8>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f7fe f970 	bl	800165c <HAL_InitTick>
  
  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3778      	adds	r7, #120	@ 0x78
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40021000 	.word	0x40021000
 800338c:	080061b8 	.word	0x080061b8
 8003390:	20000028 	.word	0x20000028
 8003394:	2000002c 	.word	0x2000002c

08003398 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003398:	b480      	push	{r7}
 800339a:	b087      	sub	sp, #28
 800339c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800339e:	2300      	movs	r3, #0
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	2300      	movs	r3, #0
 80033a4:	60bb      	str	r3, [r7, #8]
 80033a6:	2300      	movs	r3, #0
 80033a8:	617b      	str	r3, [r7, #20]
 80033aa:	2300      	movs	r3, #0
 80033ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80033b2:	4b1e      	ldr	r3, [pc, #120]	@ (800342c <HAL_RCC_GetSysClockFreq+0x94>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f003 030c 	and.w	r3, r3, #12
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d002      	beq.n	80033c8 <HAL_RCC_GetSysClockFreq+0x30>
 80033c2:	2b08      	cmp	r3, #8
 80033c4:	d003      	beq.n	80033ce <HAL_RCC_GetSysClockFreq+0x36>
 80033c6:	e026      	b.n	8003416 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033c8:	4b19      	ldr	r3, [pc, #100]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x98>)
 80033ca:	613b      	str	r3, [r7, #16]
      break;
 80033cc:	e026      	b.n	800341c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	0c9b      	lsrs	r3, r3, #18
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	4a17      	ldr	r2, [pc, #92]	@ (8003434 <HAL_RCC_GetSysClockFreq+0x9c>)
 80033d8:	5cd3      	ldrb	r3, [r2, r3]
 80033da:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80033dc:	4b13      	ldr	r3, [pc, #76]	@ (800342c <HAL_RCC_GetSysClockFreq+0x94>)
 80033de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e0:	f003 030f 	and.w	r3, r3, #15
 80033e4:	4a14      	ldr	r2, [pc, #80]	@ (8003438 <HAL_RCC_GetSysClockFreq+0xa0>)
 80033e6:	5cd3      	ldrb	r3, [r2, r3]
 80033e8:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d008      	beq.n	8003406 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033f4:	4a0e      	ldr	r2, [pc, #56]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x98>)
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	fb02 f303 	mul.w	r3, r2, r3
 8003402:	617b      	str	r3, [r7, #20]
 8003404:	e004      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a0c      	ldr	r2, [pc, #48]	@ (800343c <HAL_RCC_GetSysClockFreq+0xa4>)
 800340a:	fb02 f303 	mul.w	r3, r2, r3
 800340e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	613b      	str	r3, [r7, #16]
      break;
 8003414:	e002      	b.n	800341c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003416:	4b06      	ldr	r3, [pc, #24]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x98>)
 8003418:	613b      	str	r3, [r7, #16]
      break;
 800341a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800341c:	693b      	ldr	r3, [r7, #16]
}
 800341e:	4618      	mov	r0, r3
 8003420:	371c      	adds	r7, #28
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	40021000 	.word	0x40021000
 8003430:	007a1200 	.word	0x007a1200
 8003434:	080061d0 	.word	0x080061d0
 8003438:	080061e0 	.word	0x080061e0
 800343c:	003d0900 	.word	0x003d0900

08003440 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003444:	4b03      	ldr	r3, [pc, #12]	@ (8003454 <HAL_RCC_GetHCLKFreq+0x14>)
 8003446:	681b      	ldr	r3, [r3, #0]
}
 8003448:	4618      	mov	r0, r3
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	20000028 	.word	0x20000028

08003458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800345e:	f7ff ffef 	bl	8003440 <HAL_RCC_GetHCLKFreq>
 8003462:	4601      	mov	r1, r0
 8003464:	4b0b      	ldr	r3, [pc, #44]	@ (8003494 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800346c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003470:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	fa92 f2a2 	rbit	r2, r2
 8003478:	603a      	str	r2, [r7, #0]
  return result;
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	fab2 f282 	clz	r2, r2
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	40d3      	lsrs	r3, r2
 8003484:	4a04      	ldr	r2, [pc, #16]	@ (8003498 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003486:	5cd3      	ldrb	r3, [r2, r3]
 8003488:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800348c:	4618      	mov	r0, r3
 800348e:	3708      	adds	r7, #8
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40021000 	.word	0x40021000
 8003498:	080061c8 	.word	0x080061c8

0800349c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80034a2:	f7ff ffcd 	bl	8003440 <HAL_RCC_GetHCLKFreq>
 80034a6:	4601      	mov	r1, r0
 80034a8:	4b0b      	ldr	r3, [pc, #44]	@ (80034d8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80034b0:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80034b4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	fa92 f2a2 	rbit	r2, r2
 80034bc:	603a      	str	r2, [r7, #0]
  return result;
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	fab2 f282 	clz	r2, r2
 80034c4:	b2d2      	uxtb	r2, r2
 80034c6:	40d3      	lsrs	r3, r2
 80034c8:	4a04      	ldr	r2, [pc, #16]	@ (80034dc <HAL_RCC_GetPCLK2Freq+0x40>)
 80034ca:	5cd3      	ldrb	r3, [r2, r3]
 80034cc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80034d0:	4618      	mov	r0, r3
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	40021000 	.word	0x40021000
 80034dc:	080061c8 	.word	0x080061c8

080034e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b092      	sub	sp, #72	@ 0x48
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034e8:	2300      	movs	r3, #0
 80034ea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80034f0:	2300      	movs	r3, #0
 80034f2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 80cb 	beq.w	800369a <HAL_RCCEx_PeriphCLKConfig+0x1ba>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003504:	4b85      	ldr	r3, [pc, #532]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10e      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003510:	4b82      	ldr	r3, [pc, #520]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003512:	69db      	ldr	r3, [r3, #28]
 8003514:	4a81      	ldr	r2, [pc, #516]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003516:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800351a:	61d3      	str	r3, [r2, #28]
 800351c:	4b7f      	ldr	r3, [pc, #508]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003524:	60bb      	str	r3, [r7, #8]
 8003526:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003528:	2301      	movs	r3, #1
 800352a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800352e:	4b7c      	ldr	r3, [pc, #496]	@ (8003720 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003536:	2b00      	cmp	r3, #0
 8003538:	d118      	bne.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800353a:	4b79      	ldr	r3, [pc, #484]	@ (8003720 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a78      	ldr	r2, [pc, #480]	@ (8003720 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003540:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003544:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003546:	f7fe f8cd 	bl	80016e4 <HAL_GetTick>
 800354a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800354c:	e008      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800354e:	f7fe f8c9 	bl	80016e4 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b64      	cmp	r3, #100	@ 0x64
 800355a:	d901      	bls.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e0d9      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x234>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003560:	4b6f      	ldr	r3, [pc, #444]	@ (8003720 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0f0      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800356c:	4b6b      	ldr	r3, [pc, #428]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003574:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003576:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003578:	2b00      	cmp	r3, #0
 800357a:	d07b      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x194>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003584:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003586:	429a      	cmp	r2, r3
 8003588:	d074      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800358a:	4b64      	ldr	r3, [pc, #400]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003592:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003594:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003598:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800359c:	fa93 f3a3 	rbit	r3, r3
 80035a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80035a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035a4:	fab3 f383 	clz	r3, r3
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	461a      	mov	r2, r3
 80035ac:	4b5d      	ldr	r3, [pc, #372]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80035ae:	4413      	add	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	461a      	mov	r2, r3
 80035b4:	2301      	movs	r3, #1
 80035b6:	6013      	str	r3, [r2, #0]
 80035b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80035bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035c0:	fa93 f3a3 	rbit	r3, r3
 80035c4:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80035c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035c8:	fab3 f383 	clz	r3, r3
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	461a      	mov	r2, r3
 80035d0:	4b54      	ldr	r3, [pc, #336]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80035d2:	4413      	add	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	461a      	mov	r2, r3
 80035d8:	2300      	movs	r3, #0
 80035da:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80035dc:	4a4f      	ldr	r2, [pc, #316]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80035de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035e0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80035e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d043      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ec:	f7fe f87a 	bl	80016e4 <HAL_GetTick>
 80035f0:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f2:	e00a      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035f4:	f7fe f876 	bl	80016e4 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003602:	4293      	cmp	r3, r2
 8003604:	d901      	bls.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e084      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800360a:	2302      	movs	r3, #2
 800360c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003610:	fa93 f3a3 	rbit	r3, r3
 8003614:	627b      	str	r3, [r7, #36]	@ 0x24
 8003616:	2302      	movs	r3, #2
 8003618:	623b      	str	r3, [r7, #32]
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	fa93 f3a3 	rbit	r3, r3
 8003620:	61fb      	str	r3, [r7, #28]
  return result;
 8003622:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003624:	fab3 f383 	clz	r3, r3
 8003628:	b2db      	uxtb	r3, r3
 800362a:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	d102      	bne.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003634:	4b39      	ldr	r3, [pc, #228]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	e007      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x16a>
 800363a:	2302      	movs	r3, #2
 800363c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	fa93 f3a3 	rbit	r3, r3
 8003644:	617b      	str	r3, [r7, #20]
 8003646:	4b35      	ldr	r3, [pc, #212]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364a:	2202      	movs	r2, #2
 800364c:	613a      	str	r2, [r7, #16]
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	fa92 f2a2 	rbit	r2, r2
 8003654:	60fa      	str	r2, [r7, #12]
  return result;
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	fab2 f282 	clz	r2, r2
 800365c:	b2d2      	uxtb	r2, r2
 800365e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003662:	b2d2      	uxtb	r2, r2
 8003664:	f002 021f 	and.w	r2, r2, #31
 8003668:	2101      	movs	r1, #1
 800366a:	fa01 f202 	lsl.w	r2, r1, r2
 800366e:	4013      	ands	r3, r2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0bf      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003674:	4b29      	ldr	r3, [pc, #164]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	4926      	ldr	r1, [pc, #152]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003682:	4313      	orrs	r3, r2
 8003684:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003686:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800368a:	2b01      	cmp	r3, #1
 800368c:	d105      	bne.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800368e:	4b23      	ldr	r3, [pc, #140]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	4a22      	ldr	r2, [pc, #136]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003694:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003698:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d008      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036a6:	4b1d      	ldr	r3, [pc, #116]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80036a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036aa:	f023 0203 	bic.w	r2, r3, #3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	491a      	ldr	r1, [pc, #104]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0320 	and.w	r3, r3, #32
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d008      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036c4:	4b15      	ldr	r3, [pc, #84]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80036c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c8:	f023 0210 	bic.w	r2, r3, #16
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	4912      	ldr	r1, [pc, #72]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d008      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80036e2:	4b0e      	ldr	r3, [pc, #56]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80036e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e6:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	490b      	ldr	r1, [pc, #44]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d008      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003700:	4b06      	ldr	r3, [pc, #24]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003704:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	4903      	ldr	r1, [pc, #12]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800370e:	4313      	orrs	r3, r2
 8003710:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3748      	adds	r7, #72	@ 0x48
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40021000 	.word	0x40021000
 8003720:	40007000 	.word	0x40007000
 8003724:	10908100 	.word	0x10908100

08003728 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b08a      	sub	sp, #40	@ 0x28
 800372c:	af02      	add	r7, sp, #8
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	603b      	str	r3, [r7, #0]
 8003734:	4613      	mov	r3, r2
 8003736:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800373c:	2b20      	cmp	r3, #32
 800373e:	d177      	bne.n	8003830 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d002      	beq.n	800374c <HAL_UART_Transmit+0x24>
 8003746:	88fb      	ldrh	r3, [r7, #6]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e070      	b.n	8003832 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2221      	movs	r2, #33	@ 0x21
 800375c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800375e:	f7fd ffc1 	bl	80016e4 <HAL_GetTick>
 8003762:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	88fa      	ldrh	r2, [r7, #6]
 8003768:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	88fa      	ldrh	r2, [r7, #6]
 8003770:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800377c:	d108      	bne.n	8003790 <HAL_UART_Transmit+0x68>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d104      	bne.n	8003790 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003786:	2300      	movs	r3, #0
 8003788:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	61bb      	str	r3, [r7, #24]
 800378e:	e003      	b.n	8003798 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003794:	2300      	movs	r3, #0
 8003796:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003798:	e02f      	b.n	80037fa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	2200      	movs	r2, #0
 80037a2:	2180      	movs	r1, #128	@ 0x80
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f000 fdcd 	bl	8004344 <UART_WaitOnFlagUntilTimeout>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d004      	beq.n	80037ba <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2220      	movs	r2, #32
 80037b4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e03b      	b.n	8003832 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10b      	bne.n	80037d8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	881a      	ldrh	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037cc:	b292      	uxth	r2, r2
 80037ce:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	3302      	adds	r3, #2
 80037d4:	61bb      	str	r3, [r7, #24]
 80037d6:	e007      	b.n	80037e8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	781a      	ldrb	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	3301      	adds	r3, #1
 80037e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	3b01      	subs	r3, #1
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003800:	b29b      	uxth	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1c9      	bne.n	800379a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	2200      	movs	r2, #0
 800380e:	2140      	movs	r1, #64	@ 0x40
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f000 fd97 	bl	8004344 <UART_WaitOnFlagUntilTimeout>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d004      	beq.n	8003826 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2220      	movs	r2, #32
 8003820:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e005      	b.n	8003832 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2220      	movs	r2, #32
 800382a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800382c:	2300      	movs	r3, #0
 800382e:	e000      	b.n	8003832 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003830:	2302      	movs	r3, #2
  }
}
 8003832:	4618      	mov	r0, r3
 8003834:	3720      	adds	r7, #32
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
	...

0800383c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b0ba      	sub	sp, #232	@ 0xe8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003862:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003866:	f640 030f 	movw	r3, #2063	@ 0x80f
 800386a:	4013      	ands	r3, r2
 800386c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003870:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003874:	2b00      	cmp	r3, #0
 8003876:	d115      	bne.n	80038a4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800387c:	f003 0320 	and.w	r3, r3, #32
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00f      	beq.n	80038a4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003888:	f003 0320 	and.w	r3, r3, #32
 800388c:	2b00      	cmp	r3, #0
 800388e:	d009      	beq.n	80038a4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 82ab 	beq.w	8003df0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	4798      	blx	r3
      }
      return;
 80038a2:	e2a5      	b.n	8003df0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80038a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 8117 	beq.w	8003adc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80038ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d106      	bne.n	80038c8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80038ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80038be:	4b85      	ldr	r3, [pc, #532]	@ (8003ad4 <HAL_UART_IRQHandler+0x298>)
 80038c0:	4013      	ands	r3, r2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 810a 	beq.w	8003adc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80038c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d011      	beq.n	80038f8 <HAL_UART_IRQHandler+0xbc>
 80038d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00b      	beq.n	80038f8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2201      	movs	r2, #1
 80038e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038ee:	f043 0201 	orr.w	r2, r3, #1
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d011      	beq.n	8003928 <HAL_UART_IRQHandler+0xec>
 8003904:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00b      	beq.n	8003928 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2202      	movs	r2, #2
 8003916:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800391e:	f043 0204 	orr.w	r2, r3, #4
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	2b00      	cmp	r3, #0
 8003932:	d011      	beq.n	8003958 <HAL_UART_IRQHandler+0x11c>
 8003934:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00b      	beq.n	8003958 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2204      	movs	r2, #4
 8003946:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800394e:	f043 0202 	orr.w	r2, r3, #2
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800395c:	f003 0308 	and.w	r3, r3, #8
 8003960:	2b00      	cmp	r3, #0
 8003962:	d017      	beq.n	8003994 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003968:	f003 0320 	and.w	r3, r3, #32
 800396c:	2b00      	cmp	r3, #0
 800396e:	d105      	bne.n	800397c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003970:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003974:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00b      	beq.n	8003994 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2208      	movs	r2, #8
 8003982:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800398a:	f043 0208 	orr.w	r2, r3, #8
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003998:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800399c:	2b00      	cmp	r3, #0
 800399e:	d012      	beq.n	80039c6 <HAL_UART_IRQHandler+0x18a>
 80039a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00c      	beq.n	80039c6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80039b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039bc:	f043 0220 	orr.w	r2, r3, #32
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f000 8211 	beq.w	8003df4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80039d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039d6:	f003 0320 	and.w	r3, r3, #32
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00d      	beq.n	80039fa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80039de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039e2:	f003 0320 	and.w	r3, r3, #32
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d007      	beq.n	80039fa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a00:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a0e:	2b40      	cmp	r3, #64	@ 0x40
 8003a10:	d005      	beq.n	8003a1e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a16:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d04f      	beq.n	8003abe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 fdc4 	bl	80045ac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a2e:	2b40      	cmp	r3, #64	@ 0x40
 8003a30:	d141      	bne.n	8003ab6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	3308      	adds	r3, #8
 8003a38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a40:	e853 3f00 	ldrex	r3, [r3]
 8003a44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003a48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	3308      	adds	r3, #8
 8003a5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003a5e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003a62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003a6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003a6e:	e841 2300 	strex	r3, r2, [r1]
 8003a72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003a76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1d9      	bne.n	8003a32 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d013      	beq.n	8003aae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a8a:	4a13      	ldr	r2, [pc, #76]	@ (8003ad8 <HAL_UART_IRQHandler+0x29c>)
 8003a8c:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fe f84b 	bl	8001b2e <HAL_DMA_Abort_IT>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d017      	beq.n	8003ace <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003aa8:	4610      	mov	r0, r2
 8003aaa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aac:	e00f      	b.n	8003ace <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7fd fd72 	bl	8001598 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab4:	e00b      	b.n	8003ace <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7fd fd6e 	bl	8001598 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003abc:	e007      	b.n	8003ace <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7fd fd6a 	bl	8001598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003acc:	e192      	b.n	8003df4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ace:	bf00      	nop
    return;
 8003ad0:	e190      	b.n	8003df4 <HAL_UART_IRQHandler+0x5b8>
 8003ad2:	bf00      	nop
 8003ad4:	04000120 	.word	0x04000120
 8003ad8:	08004857 	.word	0x08004857

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	f040 814b 	bne.w	8003d7c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aea:	f003 0310 	and.w	r3, r3, #16
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 8144 	beq.w	8003d7c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003af8:	f003 0310 	and.w	r3, r3, #16
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f000 813d 	beq.w	8003d7c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2210      	movs	r2, #16
 8003b08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b14:	2b40      	cmp	r3, #64	@ 0x40
 8003b16:	f040 80b5 	bne.w	8003c84 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b26:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f000 8164 	beq.w	8003df8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003b36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	f080 815c 	bcs.w	8003df8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b46:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	2b20      	cmp	r3, #32
 8003b52:	f000 8086 	beq.w	8003c62 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b62:	e853 3f00 	ldrex	r3, [r3]
 8003b66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003b6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b6e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b72:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003b80:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003b84:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b88:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003b8c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003b90:	e841 2300 	strex	r3, r2, [r1]
 8003b94:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003b98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1da      	bne.n	8003b56 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	3308      	adds	r3, #8
 8003ba6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003baa:	e853 3f00 	ldrex	r3, [r3]
 8003bae:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003bb0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003bb2:	f023 0301 	bic.w	r3, r3, #1
 8003bb6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	3308      	adds	r3, #8
 8003bc0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003bc4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003bc8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bca:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003bcc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003bd0:	e841 2300 	strex	r3, r2, [r1]
 8003bd4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003bd6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1e1      	bne.n	8003ba0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	3308      	adds	r3, #8
 8003be2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003be6:	e853 3f00 	ldrex	r3, [r3]
 8003bea:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003bec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003bee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bf2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	3308      	adds	r3, #8
 8003bfc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003c00:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c02:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c04:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003c06:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003c08:	e841 2300 	strex	r3, r2, [r1]
 8003c0c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003c0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1e3      	bne.n	8003bdc <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2220      	movs	r2, #32
 8003c18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c2a:	e853 3f00 	ldrex	r3, [r3]
 8003c2e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003c30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c32:	f023 0310 	bic.w	r3, r3, #16
 8003c36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c44:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c46:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c48:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c4a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c4c:	e841 2300 	strex	r3, r2, [r1]
 8003c50:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003c52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1e4      	bne.n	8003c22 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7fd ff28 	bl	8001ab2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2202      	movs	r2, #2
 8003c66:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f7fd fc57 	bl	8001530 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c82:	e0b9      	b.n	8003df8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 80ab 	beq.w	8003dfc <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003ca6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f000 80a6 	beq.w	8003dfc <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cb8:	e853 3f00 	ldrex	r3, [r3]
 8003cbc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003cbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cc0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cc4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003cd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cd4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003cd8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003cda:	e841 2300 	strex	r3, r2, [r1]
 8003cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1e4      	bne.n	8003cb0 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	3308      	adds	r3, #8
 8003cec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf0:	e853 3f00 	ldrex	r3, [r3]
 8003cf4:	623b      	str	r3, [r7, #32]
   return(result);
 8003cf6:	6a3b      	ldr	r3, [r7, #32]
 8003cf8:	f023 0301 	bic.w	r3, r3, #1
 8003cfc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	3308      	adds	r3, #8
 8003d06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003d0a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d12:	e841 2300 	strex	r3, r2, [r1]
 8003d16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1e3      	bne.n	8003ce6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2220      	movs	r2, #32
 8003d22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	e853 3f00 	ldrex	r3, [r3]
 8003d3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f023 0310 	bic.w	r3, r3, #16
 8003d46:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003d54:	61fb      	str	r3, [r7, #28]
 8003d56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d58:	69b9      	ldr	r1, [r7, #24]
 8003d5a:	69fa      	ldr	r2, [r7, #28]
 8003d5c:	e841 2300 	strex	r3, r2, [r1]
 8003d60:	617b      	str	r3, [r7, #20]
   return(result);
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1e4      	bne.n	8003d32 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d72:	4619      	mov	r1, r3
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f7fd fbdb 	bl	8001530 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d7a:	e03f      	b.n	8003dfc <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00e      	beq.n	8003da6 <HAL_UART_IRQHandler+0x56a>
 8003d88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d008      	beq.n	8003da6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003d9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 fe00 	bl	80049a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003da4:	e02d      	b.n	8003e02 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00e      	beq.n	8003dd0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003db2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003db6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d008      	beq.n	8003dd0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d01c      	beq.n	8003e00 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	4798      	blx	r3
    }
    return;
 8003dce:	e017      	b.n	8003e00 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d012      	beq.n	8003e02 <HAL_UART_IRQHandler+0x5c6>
 8003ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00c      	beq.n	8003e02 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 fd4a 	bl	8004882 <UART_EndTransmit_IT>
    return;
 8003dee:	e008      	b.n	8003e02 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003df0:	bf00      	nop
 8003df2:	e006      	b.n	8003e02 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003df4:	bf00      	nop
 8003df6:	e004      	b.n	8003e02 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003df8:	bf00      	nop
 8003dfa:	e002      	b.n	8003e02 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003dfc:	bf00      	nop
 8003dfe:	e000      	b.n	8003e02 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003e00:	bf00      	nop
  }

}
 8003e02:	37e8      	adds	r7, #232	@ 0xe8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b088      	sub	sp, #32
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	69db      	ldr	r3, [r3, #28]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	4b8a      	ldr	r3, [pc, #552]	@ (8004098 <UART_SetConfig+0x254>)
 8003e70:	4013      	ands	r3, r2
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6812      	ldr	r2, [r2, #0]
 8003e76:	6979      	ldr	r1, [r7, #20]
 8003e78:	430b      	orrs	r3, r1
 8003e7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68da      	ldr	r2, [r3, #12]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a78      	ldr	r2, [pc, #480]	@ (800409c <UART_SetConfig+0x258>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d120      	bne.n	8003f02 <UART_SetConfig+0xbe>
 8003ec0:	4b77      	ldr	r3, [pc, #476]	@ (80040a0 <UART_SetConfig+0x25c>)
 8003ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec4:	f003 0303 	and.w	r3, r3, #3
 8003ec8:	2b03      	cmp	r3, #3
 8003eca:	d817      	bhi.n	8003efc <UART_SetConfig+0xb8>
 8003ecc:	a201      	add	r2, pc, #4	@ (adr r2, 8003ed4 <UART_SetConfig+0x90>)
 8003ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed2:	bf00      	nop
 8003ed4:	08003ee5 	.word	0x08003ee5
 8003ed8:	08003ef1 	.word	0x08003ef1
 8003edc:	08003ef7 	.word	0x08003ef7
 8003ee0:	08003eeb 	.word	0x08003eeb
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	77fb      	strb	r3, [r7, #31]
 8003ee8:	e01d      	b.n	8003f26 <UART_SetConfig+0xe2>
 8003eea:	2302      	movs	r3, #2
 8003eec:	77fb      	strb	r3, [r7, #31]
 8003eee:	e01a      	b.n	8003f26 <UART_SetConfig+0xe2>
 8003ef0:	2304      	movs	r3, #4
 8003ef2:	77fb      	strb	r3, [r7, #31]
 8003ef4:	e017      	b.n	8003f26 <UART_SetConfig+0xe2>
 8003ef6:	2308      	movs	r3, #8
 8003ef8:	77fb      	strb	r3, [r7, #31]
 8003efa:	e014      	b.n	8003f26 <UART_SetConfig+0xe2>
 8003efc:	2310      	movs	r3, #16
 8003efe:	77fb      	strb	r3, [r7, #31]
 8003f00:	e011      	b.n	8003f26 <UART_SetConfig+0xe2>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a67      	ldr	r2, [pc, #412]	@ (80040a4 <UART_SetConfig+0x260>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d102      	bne.n	8003f12 <UART_SetConfig+0xce>
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	77fb      	strb	r3, [r7, #31]
 8003f10:	e009      	b.n	8003f26 <UART_SetConfig+0xe2>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a64      	ldr	r2, [pc, #400]	@ (80040a8 <UART_SetConfig+0x264>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d102      	bne.n	8003f22 <UART_SetConfig+0xde>
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	77fb      	strb	r3, [r7, #31]
 8003f20:	e001      	b.n	8003f26 <UART_SetConfig+0xe2>
 8003f22:	2310      	movs	r3, #16
 8003f24:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f2e:	d15a      	bne.n	8003fe6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003f30:	7ffb      	ldrb	r3, [r7, #31]
 8003f32:	2b08      	cmp	r3, #8
 8003f34:	d827      	bhi.n	8003f86 <UART_SetConfig+0x142>
 8003f36:	a201      	add	r2, pc, #4	@ (adr r2, 8003f3c <UART_SetConfig+0xf8>)
 8003f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3c:	08003f61 	.word	0x08003f61
 8003f40:	08003f69 	.word	0x08003f69
 8003f44:	08003f71 	.word	0x08003f71
 8003f48:	08003f87 	.word	0x08003f87
 8003f4c:	08003f77 	.word	0x08003f77
 8003f50:	08003f87 	.word	0x08003f87
 8003f54:	08003f87 	.word	0x08003f87
 8003f58:	08003f87 	.word	0x08003f87
 8003f5c:	08003f7f 	.word	0x08003f7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f60:	f7ff fa7a 	bl	8003458 <HAL_RCC_GetPCLK1Freq>
 8003f64:	61b8      	str	r0, [r7, #24]
        break;
 8003f66:	e013      	b.n	8003f90 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f68:	f7ff fa98 	bl	800349c <HAL_RCC_GetPCLK2Freq>
 8003f6c:	61b8      	str	r0, [r7, #24]
        break;
 8003f6e:	e00f      	b.n	8003f90 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f70:	4b4e      	ldr	r3, [pc, #312]	@ (80040ac <UART_SetConfig+0x268>)
 8003f72:	61bb      	str	r3, [r7, #24]
        break;
 8003f74:	e00c      	b.n	8003f90 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f76:	f7ff fa0f 	bl	8003398 <HAL_RCC_GetSysClockFreq>
 8003f7a:	61b8      	str	r0, [r7, #24]
        break;
 8003f7c:	e008      	b.n	8003f90 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f82:	61bb      	str	r3, [r7, #24]
        break;
 8003f84:	e004      	b.n	8003f90 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003f86:	2300      	movs	r3, #0
 8003f88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	77bb      	strb	r3, [r7, #30]
        break;
 8003f8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d074      	beq.n	8004080 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	005a      	lsls	r2, r3, #1
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	085b      	lsrs	r3, r3, #1
 8003fa0:	441a      	add	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003faa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	2b0f      	cmp	r3, #15
 8003fb0:	d916      	bls.n	8003fe0 <UART_SetConfig+0x19c>
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fb8:	d212      	bcs.n	8003fe0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	f023 030f 	bic.w	r3, r3, #15
 8003fc2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	085b      	lsrs	r3, r3, #1
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	f003 0307 	and.w	r3, r3, #7
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	89fb      	ldrh	r3, [r7, #14]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	89fa      	ldrh	r2, [r7, #14]
 8003fdc:	60da      	str	r2, [r3, #12]
 8003fde:	e04f      	b.n	8004080 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	77bb      	strb	r3, [r7, #30]
 8003fe4:	e04c      	b.n	8004080 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fe6:	7ffb      	ldrb	r3, [r7, #31]
 8003fe8:	2b08      	cmp	r3, #8
 8003fea:	d828      	bhi.n	800403e <UART_SetConfig+0x1fa>
 8003fec:	a201      	add	r2, pc, #4	@ (adr r2, 8003ff4 <UART_SetConfig+0x1b0>)
 8003fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff2:	bf00      	nop
 8003ff4:	08004019 	.word	0x08004019
 8003ff8:	08004021 	.word	0x08004021
 8003ffc:	08004029 	.word	0x08004029
 8004000:	0800403f 	.word	0x0800403f
 8004004:	0800402f 	.word	0x0800402f
 8004008:	0800403f 	.word	0x0800403f
 800400c:	0800403f 	.word	0x0800403f
 8004010:	0800403f 	.word	0x0800403f
 8004014:	08004037 	.word	0x08004037
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004018:	f7ff fa1e 	bl	8003458 <HAL_RCC_GetPCLK1Freq>
 800401c:	61b8      	str	r0, [r7, #24]
        break;
 800401e:	e013      	b.n	8004048 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004020:	f7ff fa3c 	bl	800349c <HAL_RCC_GetPCLK2Freq>
 8004024:	61b8      	str	r0, [r7, #24]
        break;
 8004026:	e00f      	b.n	8004048 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004028:	4b20      	ldr	r3, [pc, #128]	@ (80040ac <UART_SetConfig+0x268>)
 800402a:	61bb      	str	r3, [r7, #24]
        break;
 800402c:	e00c      	b.n	8004048 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800402e:	f7ff f9b3 	bl	8003398 <HAL_RCC_GetSysClockFreq>
 8004032:	61b8      	str	r0, [r7, #24]
        break;
 8004034:	e008      	b.n	8004048 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004036:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800403a:	61bb      	str	r3, [r7, #24]
        break;
 800403c:	e004      	b.n	8004048 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800403e:	2300      	movs	r3, #0
 8004040:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	77bb      	strb	r3, [r7, #30]
        break;
 8004046:	bf00      	nop
    }

    if (pclk != 0U)
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d018      	beq.n	8004080 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	085a      	lsrs	r2, r3, #1
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	441a      	add	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004060:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	2b0f      	cmp	r3, #15
 8004066:	d909      	bls.n	800407c <UART_SetConfig+0x238>
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800406e:	d205      	bcs.n	800407c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	b29a      	uxth	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	60da      	str	r2, [r3, #12]
 800407a:	e001      	b.n	8004080 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800408c:	7fbb      	ldrb	r3, [r7, #30]
}
 800408e:	4618      	mov	r0, r3
 8004090:	3720      	adds	r7, #32
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	efff69f3 	.word	0xefff69f3
 800409c:	40013800 	.word	0x40013800
 80040a0:	40021000 	.word	0x40021000
 80040a4:	40004400 	.word	0x40004400
 80040a8:	40004800 	.word	0x40004800
 80040ac:	007a1200 	.word	0x007a1200

080040b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040bc:	f003 0308 	and.w	r3, r3, #8
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00a      	beq.n	80040da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00a      	beq.n	80040fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00a      	beq.n	800411e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004122:	f003 0304 	and.w	r3, r3, #4
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00a      	beq.n	8004140 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004144:	f003 0310 	and.w	r3, r3, #16
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00a      	beq.n	8004162 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004166:	f003 0320 	and.w	r3, r3, #32
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00a      	beq.n	8004184 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800418c:	2b00      	cmp	r3, #0
 800418e:	d01a      	beq.n	80041c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041ae:	d10a      	bne.n	80041c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	605a      	str	r2, [r3, #4]
  }
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b098      	sub	sp, #96	@ 0x60
 80041f8:	af02      	add	r7, sp, #8
 80041fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004204:	f7fd fa6e 	bl	80016e4 <HAL_GetTick>
 8004208:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0308 	and.w	r3, r3, #8
 8004214:	2b08      	cmp	r3, #8
 8004216:	d12e      	bne.n	8004276 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004218:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004220:	2200      	movs	r2, #0
 8004222:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f88c 	bl	8004344 <UART_WaitOnFlagUntilTimeout>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d021      	beq.n	8004276 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800423a:	e853 3f00 	ldrex	r3, [r3]
 800423e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004242:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004246:	653b      	str	r3, [r7, #80]	@ 0x50
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	461a      	mov	r2, r3
 800424e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004250:	647b      	str	r3, [r7, #68]	@ 0x44
 8004252:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004254:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004256:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004258:	e841 2300 	strex	r3, r2, [r1]
 800425c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800425e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1e6      	bne.n	8004232 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2220      	movs	r2, #32
 8004268:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e062      	b.n	800433c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0304 	and.w	r3, r3, #4
 8004280:	2b04      	cmp	r3, #4
 8004282:	d149      	bne.n	8004318 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004284:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800428c:	2200      	movs	r2, #0
 800428e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f856 	bl	8004344 <UART_WaitOnFlagUntilTimeout>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d03c      	beq.n	8004318 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a6:	e853 3f00 	ldrex	r3, [r3]
 80042aa:	623b      	str	r3, [r7, #32]
   return(result);
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	461a      	mov	r2, r3
 80042ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80042be:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042c4:	e841 2300 	strex	r3, r2, [r1]
 80042c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1e6      	bne.n	800429e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	3308      	adds	r3, #8
 80042d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	e853 3f00 	ldrex	r3, [r3]
 80042de:	60fb      	str	r3, [r7, #12]
   return(result);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f023 0301 	bic.w	r3, r3, #1
 80042e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	3308      	adds	r3, #8
 80042ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042f0:	61fa      	str	r2, [r7, #28]
 80042f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f4:	69b9      	ldr	r1, [r7, #24]
 80042f6:	69fa      	ldr	r2, [r7, #28]
 80042f8:	e841 2300 	strex	r3, r2, [r1]
 80042fc:	617b      	str	r3, [r7, #20]
   return(result);
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1e5      	bne.n	80042d0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2220      	movs	r2, #32
 8004308:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e011      	b.n	800433c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2220      	movs	r2, #32
 800431c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2220      	movs	r2, #32
 8004322:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3758      	adds	r7, #88	@ 0x58
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	603b      	str	r3, [r7, #0]
 8004350:	4613      	mov	r3, r2
 8004352:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004354:	e04f      	b.n	80043f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435c:	d04b      	beq.n	80043f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800435e:	f7fd f9c1 	bl	80016e4 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	429a      	cmp	r2, r3
 800436c:	d302      	bcc.n	8004374 <UART_WaitOnFlagUntilTimeout+0x30>
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e04e      	b.n	8004416 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0304 	and.w	r3, r3, #4
 8004382:	2b00      	cmp	r3, #0
 8004384:	d037      	beq.n	80043f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	2b80      	cmp	r3, #128	@ 0x80
 800438a:	d034      	beq.n	80043f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2b40      	cmp	r3, #64	@ 0x40
 8004390:	d031      	beq.n	80043f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	69db      	ldr	r3, [r3, #28]
 8004398:	f003 0308 	and.w	r3, r3, #8
 800439c:	2b08      	cmp	r3, #8
 800439e:	d110      	bne.n	80043c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2208      	movs	r2, #8
 80043a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 f8ff 	bl	80045ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2208      	movs	r2, #8
 80043b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e029      	b.n	8004416 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	69db      	ldr	r3, [r3, #28]
 80043c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043d0:	d111      	bne.n	80043f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80043da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f000 f8e5 	bl	80045ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2220      	movs	r2, #32
 80043e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e00f      	b.n	8004416 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	69da      	ldr	r2, [r3, #28]
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	4013      	ands	r3, r2
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	429a      	cmp	r2, r3
 8004404:	bf0c      	ite	eq
 8004406:	2301      	moveq	r3, #1
 8004408:	2300      	movne	r3, #0
 800440a:	b2db      	uxtb	r3, r3
 800440c:	461a      	mov	r2, r3
 800440e:	79fb      	ldrb	r3, [r7, #7]
 8004410:	429a      	cmp	r2, r3
 8004412:	d0a0      	beq.n	8004356 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3710      	adds	r7, #16
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
	...

08004420 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b096      	sub	sp, #88	@ 0x58
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	4613      	mov	r3, r2
 800442c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	88fa      	ldrh	r2, [r7, #6]
 8004438:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2222      	movs	r2, #34	@ 0x22
 8004448:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004450:	2b00      	cmp	r3, #0
 8004452:	d028      	beq.n	80044a6 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004458:	4a3e      	ldr	r2, [pc, #248]	@ (8004554 <UART_Start_Receive_DMA+0x134>)
 800445a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004460:	4a3d      	ldr	r2, [pc, #244]	@ (8004558 <UART_Start_Receive_DMA+0x138>)
 8004462:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004468:	4a3c      	ldr	r2, [pc, #240]	@ (800455c <UART_Start_Receive_DMA+0x13c>)
 800446a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004470:	2200      	movs	r2, #0
 8004472:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	3324      	adds	r3, #36	@ 0x24
 800447e:	4619      	mov	r1, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004484:	461a      	mov	r2, r3
 8004486:	88fb      	ldrh	r3, [r7, #6]
 8004488:	f7fd fab4 	bl	80019f4 <HAL_DMA_Start_IT>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d009      	beq.n	80044a6 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2210      	movs	r2, #16
 8004496:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2220      	movs	r2, #32
 800449e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e051      	b.n	800454a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d018      	beq.n	80044e0 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044b6:	e853 3f00 	ldrex	r3, [r3]
 80044ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	461a      	mov	r2, r3
 80044ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044ce:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80044d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044d4:	e841 2300 	strex	r3, r2, [r1]
 80044d8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80044da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1e6      	bne.n	80044ae <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	3308      	adds	r3, #8
 80044e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ea:	e853 3f00 	ldrex	r3, [r3]
 80044ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f2:	f043 0301 	orr.w	r3, r3, #1
 80044f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	3308      	adds	r3, #8
 80044fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004500:	637a      	str	r2, [r7, #52]	@ 0x34
 8004502:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004504:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004506:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004508:	e841 2300 	strex	r3, r2, [r1]
 800450c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800450e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1e5      	bne.n	80044e0 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3308      	adds	r3, #8
 800451a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	e853 3f00 	ldrex	r3, [r3]
 8004522:	613b      	str	r3, [r7, #16]
   return(result);
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800452a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	3308      	adds	r3, #8
 8004532:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004534:	623a      	str	r2, [r7, #32]
 8004536:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004538:	69f9      	ldr	r1, [r7, #28]
 800453a:	6a3a      	ldr	r2, [r7, #32]
 800453c:	e841 2300 	strex	r3, r2, [r1]
 8004540:	61bb      	str	r3, [r7, #24]
   return(result);
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1e5      	bne.n	8004514 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3758      	adds	r7, #88	@ 0x58
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	08004675 	.word	0x08004675
 8004558:	0800479b 	.word	0x0800479b
 800455c:	080047d9 	.word	0x080047d9

08004560 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004560:	b480      	push	{r7}
 8004562:	b089      	sub	sp, #36	@ 0x24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	e853 3f00 	ldrex	r3, [r3]
 8004574:	60bb      	str	r3, [r7, #8]
   return(result);
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800457c:	61fb      	str	r3, [r7, #28]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	461a      	mov	r2, r3
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	61bb      	str	r3, [r7, #24]
 8004588:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458a:	6979      	ldr	r1, [r7, #20]
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	e841 2300 	strex	r3, r2, [r1]
 8004592:	613b      	str	r3, [r7, #16]
   return(result);
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1e6      	bne.n	8004568 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2220      	movs	r2, #32
 800459e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80045a0:	bf00      	nop
 80045a2:	3724      	adds	r7, #36	@ 0x24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b095      	sub	sp, #84	@ 0x54
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045bc:	e853 3f00 	ldrex	r3, [r3]
 80045c0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80045c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	461a      	mov	r2, r3
 80045d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80045d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80045d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045da:	e841 2300 	strex	r3, r2, [r1]
 80045de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80045e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1e6      	bne.n	80045b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	3308      	adds	r3, #8
 80045ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	e853 3f00 	ldrex	r3, [r3]
 80045f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	f023 0301 	bic.w	r3, r3, #1
 80045fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	3308      	adds	r3, #8
 8004604:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004606:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004608:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800460c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800460e:	e841 2300 	strex	r3, r2, [r1]
 8004612:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1e5      	bne.n	80045e6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800461e:	2b01      	cmp	r3, #1
 8004620:	d118      	bne.n	8004654 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	e853 3f00 	ldrex	r3, [r3]
 800462e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	f023 0310 	bic.w	r3, r3, #16
 8004636:	647b      	str	r3, [r7, #68]	@ 0x44
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	461a      	mov	r2, r3
 800463e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004640:	61bb      	str	r3, [r7, #24]
 8004642:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004644:	6979      	ldr	r1, [r7, #20]
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	e841 2300 	strex	r3, r2, [r1]
 800464c:	613b      	str	r3, [r7, #16]
   return(result);
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1e6      	bne.n	8004622 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2220      	movs	r2, #32
 8004658:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004668:	bf00      	nop
 800466a:	3754      	adds	r7, #84	@ 0x54
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b09c      	sub	sp, #112	@ 0x70
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004680:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	2b20      	cmp	r3, #32
 8004688:	d071      	beq.n	800476e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800468a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800468c:	2200      	movs	r2, #0
 800468e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004692:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004698:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800469a:	e853 3f00 	ldrex	r3, [r3]
 800469e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80046a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	461a      	mov	r2, r3
 80046ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80046b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046b2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80046b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80046b8:	e841 2300 	strex	r3, r2, [r1]
 80046bc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80046be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1e6      	bne.n	8004692 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	3308      	adds	r3, #8
 80046ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ce:	e853 3f00 	ldrex	r3, [r3]
 80046d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80046d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046d6:	f023 0301 	bic.w	r3, r3, #1
 80046da:	667b      	str	r3, [r7, #100]	@ 0x64
 80046dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	3308      	adds	r3, #8
 80046e2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80046e4:	647a      	str	r2, [r7, #68]	@ 0x44
 80046e6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046ec:	e841 2300 	strex	r3, r2, [r1]
 80046f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1e5      	bne.n	80046c4 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	3308      	adds	r3, #8
 80046fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004702:	e853 3f00 	ldrex	r3, [r3]
 8004706:	623b      	str	r3, [r7, #32]
   return(result);
 8004708:	6a3b      	ldr	r3, [r7, #32]
 800470a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800470e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004710:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	3308      	adds	r3, #8
 8004716:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004718:	633a      	str	r2, [r7, #48]	@ 0x30
 800471a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800471e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004720:	e841 2300 	strex	r3, r2, [r1]
 8004724:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1e5      	bne.n	80046f8 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800472c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800472e:	2220      	movs	r2, #32
 8004730:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004734:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004736:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004738:	2b01      	cmp	r3, #1
 800473a:	d118      	bne.n	800476e <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800473c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	e853 3f00 	ldrex	r3, [r3]
 8004748:	60fb      	str	r3, [r7, #12]
   return(result);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f023 0310 	bic.w	r3, r3, #16
 8004750:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004752:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	461a      	mov	r2, r3
 8004758:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800475a:	61fb      	str	r3, [r7, #28]
 800475c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475e:	69b9      	ldr	r1, [r7, #24]
 8004760:	69fa      	ldr	r2, [r7, #28]
 8004762:	e841 2300 	strex	r3, r2, [r1]
 8004766:	617b      	str	r3, [r7, #20]
   return(result);
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1e6      	bne.n	800473c <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800476e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004770:	2200      	movs	r2, #0
 8004772:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004774:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004776:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004778:	2b01      	cmp	r3, #1
 800477a:	d107      	bne.n	800478c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800477c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800477e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004782:	4619      	mov	r1, r3
 8004784:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004786:	f7fc fed3 	bl	8001530 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800478a:	e002      	b.n	8004792 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800478c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800478e:	f7ff fb45 	bl	8003e1c <HAL_UART_RxCpltCallback>
}
 8004792:	bf00      	nop
 8004794:	3770      	adds	r7, #112	@ 0x70
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b084      	sub	sp, #16
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2201      	movs	r2, #1
 80047ac:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d109      	bne.n	80047ca <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80047bc:	085b      	lsrs	r3, r3, #1
 80047be:	b29b      	uxth	r3, r3
 80047c0:	4619      	mov	r1, r3
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f7fc feb4 	bl	8001530 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80047c8:	e002      	b.n	80047d0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f7ff fb30 	bl	8003e30 <HAL_UART_RxHalfCpltCallback>
}
 80047d0:	bf00      	nop
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047ea:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047f2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047fe:	2b80      	cmp	r3, #128	@ 0x80
 8004800:	d109      	bne.n	8004816 <UART_DMAError+0x3e>
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	2b21      	cmp	r3, #33	@ 0x21
 8004806:	d106      	bne.n	8004816 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	2200      	movs	r2, #0
 800480c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8004810:	6978      	ldr	r0, [r7, #20]
 8004812:	f7ff fea5 	bl	8004560 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004820:	2b40      	cmp	r3, #64	@ 0x40
 8004822:	d109      	bne.n	8004838 <UART_DMAError+0x60>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2b22      	cmp	r3, #34	@ 0x22
 8004828:	d106      	bne.n	8004838 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	2200      	movs	r2, #0
 800482e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8004832:	6978      	ldr	r0, [r7, #20]
 8004834:	f7ff feba 	bl	80045ac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800483e:	f043 0210 	orr.w	r2, r3, #16
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004848:	6978      	ldr	r0, [r7, #20]
 800484a:	f7fc fea5 	bl	8001598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800484e:	bf00      	nop
 8004850:	3718      	adds	r7, #24
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b084      	sub	sp, #16
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004862:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f7fc fe8f 	bl	8001598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800487a:	bf00      	nop
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b088      	sub	sp, #32
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	e853 3f00 	ldrex	r3, [r3]
 8004896:	60bb      	str	r3, [r7, #8]
   return(result);
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800489e:	61fb      	str	r3, [r7, #28]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	461a      	mov	r2, r3
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	61bb      	str	r3, [r7, #24]
 80048aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ac:	6979      	ldr	r1, [r7, #20]
 80048ae:	69ba      	ldr	r2, [r7, #24]
 80048b0:	e841 2300 	strex	r3, r2, [r1]
 80048b4:	613b      	str	r3, [r7, #16]
   return(result);
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1e6      	bne.n	800488a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2220      	movs	r2, #32
 80048c0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f7ff fa9d 	bl	8003e08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048ce:	bf00      	nop
 80048d0:	3720      	adds	r7, #32
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b086      	sub	sp, #24
 80048da:	af00      	add	r7, sp, #0
 80048dc:	60f8      	str	r0, [r7, #12]
 80048de:	60b9      	str	r1, [r7, #8]
 80048e0:	607a      	str	r2, [r7, #4]
 80048e2:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e056      	b.n	800499c <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d106      	bne.n	8004904 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f7fc fcd8 	bl	80012b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2224      	movs	r2, #36	@ 0x24
 8004908:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 0201 	bic.w	r2, r2, #1
 8004918:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800491e:	2b00      	cmp	r3, #0
 8004920:	d002      	beq.n	8004928 <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f7ff fbc4 	bl	80040b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f7ff fa8b 	bl	8003e44 <UART_SetConfig>
 800492e:	4603      	mov	r3, r0
 8004930:	2b01      	cmp	r3, #1
 8004932:	d101      	bne.n	8004938 <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e031      	b.n	800499c <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689a      	ldr	r2, [r3, #8]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004946:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	430a      	orrs	r2, r1
 800495a:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	055b      	lsls	r3, r3, #21
 8004960:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	041b      	lsls	r3, r3, #16
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	4313      	orrs	r3, r2
 800496a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 8004976:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	6812      	ldr	r2, [r2, #0]
 800497e:	6979      	ldr	r1, [r7, #20]
 8004980:	430b      	orrs	r3, r1
 8004982:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0201 	orr.w	r2, r2, #1
 8004992:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f7ff fc2d 	bl	80041f4 <UART_CheckIdleState>
 800499a:	4603      	mov	r3, r0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3718      	adds	r7, #24
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b08c      	sub	sp, #48	@ 0x30
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	4613      	mov	r3, r2
 80049c4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049cc:	2b20      	cmp	r3, #32
 80049ce:	d142      	bne.n	8004a56 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d002      	beq.n	80049dc <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80049d6:	88fb      	ldrh	r3, [r7, #6]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d101      	bne.n	80049e0 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e03b      	b.n	8004a58 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2201      	movs	r2, #1
 80049e4:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80049ec:	88fb      	ldrh	r3, [r7, #6]
 80049ee:	461a      	mov	r2, r3
 80049f0:	68b9      	ldr	r1, [r7, #8]
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f7ff fd14 	bl	8004420 <UART_Start_Receive_DMA>
 80049f8:	4603      	mov	r3, r0
 80049fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80049fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d124      	bne.n	8004a50 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d11d      	bne.n	8004a4a <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2210      	movs	r2, #16
 8004a14:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	e853 3f00 	ldrex	r3, [r3]
 8004a22:	617b      	str	r3, [r7, #20]
   return(result);
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	f043 0310 	orr.w	r3, r3, #16
 8004a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	461a      	mov	r2, r3
 8004a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a34:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a36:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a38:	6a39      	ldr	r1, [r7, #32]
 8004a3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a3c:	e841 2300 	strex	r3, r2, [r1]
 8004a40:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1e6      	bne.n	8004a16 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8004a48:	e002      	b.n	8004a50 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8004a50:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004a54:	e000      	b.n	8004a58 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004a56:	2302      	movs	r3, #2
  }
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3730      	adds	r7, #48	@ 0x30
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <std>:
 8004a60:	2300      	movs	r3, #0
 8004a62:	b510      	push	{r4, lr}
 8004a64:	4604      	mov	r4, r0
 8004a66:	e9c0 3300 	strd	r3, r3, [r0]
 8004a6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a6e:	6083      	str	r3, [r0, #8]
 8004a70:	8181      	strh	r1, [r0, #12]
 8004a72:	6643      	str	r3, [r0, #100]	@ 0x64
 8004a74:	81c2      	strh	r2, [r0, #14]
 8004a76:	6183      	str	r3, [r0, #24]
 8004a78:	4619      	mov	r1, r3
 8004a7a:	2208      	movs	r2, #8
 8004a7c:	305c      	adds	r0, #92	@ 0x5c
 8004a7e:	f000 f9f9 	bl	8004e74 <memset>
 8004a82:	4b0d      	ldr	r3, [pc, #52]	@ (8004ab8 <std+0x58>)
 8004a84:	6263      	str	r3, [r4, #36]	@ 0x24
 8004a86:	4b0d      	ldr	r3, [pc, #52]	@ (8004abc <std+0x5c>)
 8004a88:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ac0 <std+0x60>)
 8004a8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ac4 <std+0x64>)
 8004a90:	6323      	str	r3, [r4, #48]	@ 0x30
 8004a92:	4b0d      	ldr	r3, [pc, #52]	@ (8004ac8 <std+0x68>)
 8004a94:	6224      	str	r4, [r4, #32]
 8004a96:	429c      	cmp	r4, r3
 8004a98:	d006      	beq.n	8004aa8 <std+0x48>
 8004a9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004a9e:	4294      	cmp	r4, r2
 8004aa0:	d002      	beq.n	8004aa8 <std+0x48>
 8004aa2:	33d0      	adds	r3, #208	@ 0xd0
 8004aa4:	429c      	cmp	r4, r3
 8004aa6:	d105      	bne.n	8004ab4 <std+0x54>
 8004aa8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ab0:	f000 ba58 	b.w	8004f64 <__retarget_lock_init_recursive>
 8004ab4:	bd10      	pop	{r4, pc}
 8004ab6:	bf00      	nop
 8004ab8:	08004cc5 	.word	0x08004cc5
 8004abc:	08004ce7 	.word	0x08004ce7
 8004ac0:	08004d1f 	.word	0x08004d1f
 8004ac4:	08004d43 	.word	0x08004d43
 8004ac8:	20000444 	.word	0x20000444

08004acc <stdio_exit_handler>:
 8004acc:	4a02      	ldr	r2, [pc, #8]	@ (8004ad8 <stdio_exit_handler+0xc>)
 8004ace:	4903      	ldr	r1, [pc, #12]	@ (8004adc <stdio_exit_handler+0x10>)
 8004ad0:	4803      	ldr	r0, [pc, #12]	@ (8004ae0 <stdio_exit_handler+0x14>)
 8004ad2:	f000 b869 	b.w	8004ba8 <_fwalk_sglue>
 8004ad6:	bf00      	nop
 8004ad8:	20000034 	.word	0x20000034
 8004adc:	0800581d 	.word	0x0800581d
 8004ae0:	20000044 	.word	0x20000044

08004ae4 <cleanup_stdio>:
 8004ae4:	6841      	ldr	r1, [r0, #4]
 8004ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8004b18 <cleanup_stdio+0x34>)
 8004ae8:	4299      	cmp	r1, r3
 8004aea:	b510      	push	{r4, lr}
 8004aec:	4604      	mov	r4, r0
 8004aee:	d001      	beq.n	8004af4 <cleanup_stdio+0x10>
 8004af0:	f000 fe94 	bl	800581c <_fflush_r>
 8004af4:	68a1      	ldr	r1, [r4, #8]
 8004af6:	4b09      	ldr	r3, [pc, #36]	@ (8004b1c <cleanup_stdio+0x38>)
 8004af8:	4299      	cmp	r1, r3
 8004afa:	d002      	beq.n	8004b02 <cleanup_stdio+0x1e>
 8004afc:	4620      	mov	r0, r4
 8004afe:	f000 fe8d 	bl	800581c <_fflush_r>
 8004b02:	68e1      	ldr	r1, [r4, #12]
 8004b04:	4b06      	ldr	r3, [pc, #24]	@ (8004b20 <cleanup_stdio+0x3c>)
 8004b06:	4299      	cmp	r1, r3
 8004b08:	d004      	beq.n	8004b14 <cleanup_stdio+0x30>
 8004b0a:	4620      	mov	r0, r4
 8004b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b10:	f000 be84 	b.w	800581c <_fflush_r>
 8004b14:	bd10      	pop	{r4, pc}
 8004b16:	bf00      	nop
 8004b18:	20000444 	.word	0x20000444
 8004b1c:	200004ac 	.word	0x200004ac
 8004b20:	20000514 	.word	0x20000514

08004b24 <global_stdio_init.part.0>:
 8004b24:	b510      	push	{r4, lr}
 8004b26:	4b0b      	ldr	r3, [pc, #44]	@ (8004b54 <global_stdio_init.part.0+0x30>)
 8004b28:	4c0b      	ldr	r4, [pc, #44]	@ (8004b58 <global_stdio_init.part.0+0x34>)
 8004b2a:	4a0c      	ldr	r2, [pc, #48]	@ (8004b5c <global_stdio_init.part.0+0x38>)
 8004b2c:	601a      	str	r2, [r3, #0]
 8004b2e:	4620      	mov	r0, r4
 8004b30:	2200      	movs	r2, #0
 8004b32:	2104      	movs	r1, #4
 8004b34:	f7ff ff94 	bl	8004a60 <std>
 8004b38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	2109      	movs	r1, #9
 8004b40:	f7ff ff8e 	bl	8004a60 <std>
 8004b44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004b48:	2202      	movs	r2, #2
 8004b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b4e:	2112      	movs	r1, #18
 8004b50:	f7ff bf86 	b.w	8004a60 <std>
 8004b54:	2000057c 	.word	0x2000057c
 8004b58:	20000444 	.word	0x20000444
 8004b5c:	08004acd 	.word	0x08004acd

08004b60 <__sfp_lock_acquire>:
 8004b60:	4801      	ldr	r0, [pc, #4]	@ (8004b68 <__sfp_lock_acquire+0x8>)
 8004b62:	f000 ba00 	b.w	8004f66 <__retarget_lock_acquire_recursive>
 8004b66:	bf00      	nop
 8004b68:	20000585 	.word	0x20000585

08004b6c <__sfp_lock_release>:
 8004b6c:	4801      	ldr	r0, [pc, #4]	@ (8004b74 <__sfp_lock_release+0x8>)
 8004b6e:	f000 b9fb 	b.w	8004f68 <__retarget_lock_release_recursive>
 8004b72:	bf00      	nop
 8004b74:	20000585 	.word	0x20000585

08004b78 <__sinit>:
 8004b78:	b510      	push	{r4, lr}
 8004b7a:	4604      	mov	r4, r0
 8004b7c:	f7ff fff0 	bl	8004b60 <__sfp_lock_acquire>
 8004b80:	6a23      	ldr	r3, [r4, #32]
 8004b82:	b11b      	cbz	r3, 8004b8c <__sinit+0x14>
 8004b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b88:	f7ff bff0 	b.w	8004b6c <__sfp_lock_release>
 8004b8c:	4b04      	ldr	r3, [pc, #16]	@ (8004ba0 <__sinit+0x28>)
 8004b8e:	6223      	str	r3, [r4, #32]
 8004b90:	4b04      	ldr	r3, [pc, #16]	@ (8004ba4 <__sinit+0x2c>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1f5      	bne.n	8004b84 <__sinit+0xc>
 8004b98:	f7ff ffc4 	bl	8004b24 <global_stdio_init.part.0>
 8004b9c:	e7f2      	b.n	8004b84 <__sinit+0xc>
 8004b9e:	bf00      	nop
 8004ba0:	08004ae5 	.word	0x08004ae5
 8004ba4:	2000057c 	.word	0x2000057c

08004ba8 <_fwalk_sglue>:
 8004ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bac:	4607      	mov	r7, r0
 8004bae:	4688      	mov	r8, r1
 8004bb0:	4614      	mov	r4, r2
 8004bb2:	2600      	movs	r6, #0
 8004bb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bb8:	f1b9 0901 	subs.w	r9, r9, #1
 8004bbc:	d505      	bpl.n	8004bca <_fwalk_sglue+0x22>
 8004bbe:	6824      	ldr	r4, [r4, #0]
 8004bc0:	2c00      	cmp	r4, #0
 8004bc2:	d1f7      	bne.n	8004bb4 <_fwalk_sglue+0xc>
 8004bc4:	4630      	mov	r0, r6
 8004bc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bca:	89ab      	ldrh	r3, [r5, #12]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d907      	bls.n	8004be0 <_fwalk_sglue+0x38>
 8004bd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	d003      	beq.n	8004be0 <_fwalk_sglue+0x38>
 8004bd8:	4629      	mov	r1, r5
 8004bda:	4638      	mov	r0, r7
 8004bdc:	47c0      	blx	r8
 8004bde:	4306      	orrs	r6, r0
 8004be0:	3568      	adds	r5, #104	@ 0x68
 8004be2:	e7e9      	b.n	8004bb8 <_fwalk_sglue+0x10>

08004be4 <iprintf>:
 8004be4:	b40f      	push	{r0, r1, r2, r3}
 8004be6:	b507      	push	{r0, r1, r2, lr}
 8004be8:	4906      	ldr	r1, [pc, #24]	@ (8004c04 <iprintf+0x20>)
 8004bea:	ab04      	add	r3, sp, #16
 8004bec:	6808      	ldr	r0, [r1, #0]
 8004bee:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bf2:	6881      	ldr	r1, [r0, #8]
 8004bf4:	9301      	str	r3, [sp, #4]
 8004bf6:	f000 fae9 	bl	80051cc <_vfiprintf_r>
 8004bfa:	b003      	add	sp, #12
 8004bfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c00:	b004      	add	sp, #16
 8004c02:	4770      	bx	lr
 8004c04:	20000040 	.word	0x20000040

08004c08 <_puts_r>:
 8004c08:	6a03      	ldr	r3, [r0, #32]
 8004c0a:	b570      	push	{r4, r5, r6, lr}
 8004c0c:	6884      	ldr	r4, [r0, #8]
 8004c0e:	4605      	mov	r5, r0
 8004c10:	460e      	mov	r6, r1
 8004c12:	b90b      	cbnz	r3, 8004c18 <_puts_r+0x10>
 8004c14:	f7ff ffb0 	bl	8004b78 <__sinit>
 8004c18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c1a:	07db      	lsls	r3, r3, #31
 8004c1c:	d405      	bmi.n	8004c2a <_puts_r+0x22>
 8004c1e:	89a3      	ldrh	r3, [r4, #12]
 8004c20:	0598      	lsls	r0, r3, #22
 8004c22:	d402      	bmi.n	8004c2a <_puts_r+0x22>
 8004c24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c26:	f000 f99e 	bl	8004f66 <__retarget_lock_acquire_recursive>
 8004c2a:	89a3      	ldrh	r3, [r4, #12]
 8004c2c:	0719      	lsls	r1, r3, #28
 8004c2e:	d502      	bpl.n	8004c36 <_puts_r+0x2e>
 8004c30:	6923      	ldr	r3, [r4, #16]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d135      	bne.n	8004ca2 <_puts_r+0x9a>
 8004c36:	4621      	mov	r1, r4
 8004c38:	4628      	mov	r0, r5
 8004c3a:	f000 f8c5 	bl	8004dc8 <__swsetup_r>
 8004c3e:	b380      	cbz	r0, 8004ca2 <_puts_r+0x9a>
 8004c40:	f04f 35ff 	mov.w	r5, #4294967295
 8004c44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c46:	07da      	lsls	r2, r3, #31
 8004c48:	d405      	bmi.n	8004c56 <_puts_r+0x4e>
 8004c4a:	89a3      	ldrh	r3, [r4, #12]
 8004c4c:	059b      	lsls	r3, r3, #22
 8004c4e:	d402      	bmi.n	8004c56 <_puts_r+0x4e>
 8004c50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c52:	f000 f989 	bl	8004f68 <__retarget_lock_release_recursive>
 8004c56:	4628      	mov	r0, r5
 8004c58:	bd70      	pop	{r4, r5, r6, pc}
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	da04      	bge.n	8004c68 <_puts_r+0x60>
 8004c5e:	69a2      	ldr	r2, [r4, #24]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	dc17      	bgt.n	8004c94 <_puts_r+0x8c>
 8004c64:	290a      	cmp	r1, #10
 8004c66:	d015      	beq.n	8004c94 <_puts_r+0x8c>
 8004c68:	6823      	ldr	r3, [r4, #0]
 8004c6a:	1c5a      	adds	r2, r3, #1
 8004c6c:	6022      	str	r2, [r4, #0]
 8004c6e:	7019      	strb	r1, [r3, #0]
 8004c70:	68a3      	ldr	r3, [r4, #8]
 8004c72:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004c76:	3b01      	subs	r3, #1
 8004c78:	60a3      	str	r3, [r4, #8]
 8004c7a:	2900      	cmp	r1, #0
 8004c7c:	d1ed      	bne.n	8004c5a <_puts_r+0x52>
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	da11      	bge.n	8004ca6 <_puts_r+0x9e>
 8004c82:	4622      	mov	r2, r4
 8004c84:	210a      	movs	r1, #10
 8004c86:	4628      	mov	r0, r5
 8004c88:	f000 f85f 	bl	8004d4a <__swbuf_r>
 8004c8c:	3001      	adds	r0, #1
 8004c8e:	d0d7      	beq.n	8004c40 <_puts_r+0x38>
 8004c90:	250a      	movs	r5, #10
 8004c92:	e7d7      	b.n	8004c44 <_puts_r+0x3c>
 8004c94:	4622      	mov	r2, r4
 8004c96:	4628      	mov	r0, r5
 8004c98:	f000 f857 	bl	8004d4a <__swbuf_r>
 8004c9c:	3001      	adds	r0, #1
 8004c9e:	d1e7      	bne.n	8004c70 <_puts_r+0x68>
 8004ca0:	e7ce      	b.n	8004c40 <_puts_r+0x38>
 8004ca2:	3e01      	subs	r6, #1
 8004ca4:	e7e4      	b.n	8004c70 <_puts_r+0x68>
 8004ca6:	6823      	ldr	r3, [r4, #0]
 8004ca8:	1c5a      	adds	r2, r3, #1
 8004caa:	6022      	str	r2, [r4, #0]
 8004cac:	220a      	movs	r2, #10
 8004cae:	701a      	strb	r2, [r3, #0]
 8004cb0:	e7ee      	b.n	8004c90 <_puts_r+0x88>
	...

08004cb4 <puts>:
 8004cb4:	4b02      	ldr	r3, [pc, #8]	@ (8004cc0 <puts+0xc>)
 8004cb6:	4601      	mov	r1, r0
 8004cb8:	6818      	ldr	r0, [r3, #0]
 8004cba:	f7ff bfa5 	b.w	8004c08 <_puts_r>
 8004cbe:	bf00      	nop
 8004cc0:	20000040 	.word	0x20000040

08004cc4 <__sread>:
 8004cc4:	b510      	push	{r4, lr}
 8004cc6:	460c      	mov	r4, r1
 8004cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ccc:	f000 f8fc 	bl	8004ec8 <_read_r>
 8004cd0:	2800      	cmp	r0, #0
 8004cd2:	bfab      	itete	ge
 8004cd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004cd6:	89a3      	ldrhlt	r3, [r4, #12]
 8004cd8:	181b      	addge	r3, r3, r0
 8004cda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004cde:	bfac      	ite	ge
 8004ce0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004ce2:	81a3      	strhlt	r3, [r4, #12]
 8004ce4:	bd10      	pop	{r4, pc}

08004ce6 <__swrite>:
 8004ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cea:	461f      	mov	r7, r3
 8004cec:	898b      	ldrh	r3, [r1, #12]
 8004cee:	05db      	lsls	r3, r3, #23
 8004cf0:	4605      	mov	r5, r0
 8004cf2:	460c      	mov	r4, r1
 8004cf4:	4616      	mov	r6, r2
 8004cf6:	d505      	bpl.n	8004d04 <__swrite+0x1e>
 8004cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f000 f8d0 	bl	8004ea4 <_lseek_r>
 8004d04:	89a3      	ldrh	r3, [r4, #12]
 8004d06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d0e:	81a3      	strh	r3, [r4, #12]
 8004d10:	4632      	mov	r2, r6
 8004d12:	463b      	mov	r3, r7
 8004d14:	4628      	mov	r0, r5
 8004d16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d1a:	f000 b8e7 	b.w	8004eec <_write_r>

08004d1e <__sseek>:
 8004d1e:	b510      	push	{r4, lr}
 8004d20:	460c      	mov	r4, r1
 8004d22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d26:	f000 f8bd 	bl	8004ea4 <_lseek_r>
 8004d2a:	1c43      	adds	r3, r0, #1
 8004d2c:	89a3      	ldrh	r3, [r4, #12]
 8004d2e:	bf15      	itete	ne
 8004d30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004d32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004d36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004d3a:	81a3      	strheq	r3, [r4, #12]
 8004d3c:	bf18      	it	ne
 8004d3e:	81a3      	strhne	r3, [r4, #12]
 8004d40:	bd10      	pop	{r4, pc}

08004d42 <__sclose>:
 8004d42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d46:	f000 b89d 	b.w	8004e84 <_close_r>

08004d4a <__swbuf_r>:
 8004d4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d4c:	460e      	mov	r6, r1
 8004d4e:	4614      	mov	r4, r2
 8004d50:	4605      	mov	r5, r0
 8004d52:	b118      	cbz	r0, 8004d5c <__swbuf_r+0x12>
 8004d54:	6a03      	ldr	r3, [r0, #32]
 8004d56:	b90b      	cbnz	r3, 8004d5c <__swbuf_r+0x12>
 8004d58:	f7ff ff0e 	bl	8004b78 <__sinit>
 8004d5c:	69a3      	ldr	r3, [r4, #24]
 8004d5e:	60a3      	str	r3, [r4, #8]
 8004d60:	89a3      	ldrh	r3, [r4, #12]
 8004d62:	071a      	lsls	r2, r3, #28
 8004d64:	d501      	bpl.n	8004d6a <__swbuf_r+0x20>
 8004d66:	6923      	ldr	r3, [r4, #16]
 8004d68:	b943      	cbnz	r3, 8004d7c <__swbuf_r+0x32>
 8004d6a:	4621      	mov	r1, r4
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	f000 f82b 	bl	8004dc8 <__swsetup_r>
 8004d72:	b118      	cbz	r0, 8004d7c <__swbuf_r+0x32>
 8004d74:	f04f 37ff 	mov.w	r7, #4294967295
 8004d78:	4638      	mov	r0, r7
 8004d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d7c:	6823      	ldr	r3, [r4, #0]
 8004d7e:	6922      	ldr	r2, [r4, #16]
 8004d80:	1a98      	subs	r0, r3, r2
 8004d82:	6963      	ldr	r3, [r4, #20]
 8004d84:	b2f6      	uxtb	r6, r6
 8004d86:	4283      	cmp	r3, r0
 8004d88:	4637      	mov	r7, r6
 8004d8a:	dc05      	bgt.n	8004d98 <__swbuf_r+0x4e>
 8004d8c:	4621      	mov	r1, r4
 8004d8e:	4628      	mov	r0, r5
 8004d90:	f000 fd44 	bl	800581c <_fflush_r>
 8004d94:	2800      	cmp	r0, #0
 8004d96:	d1ed      	bne.n	8004d74 <__swbuf_r+0x2a>
 8004d98:	68a3      	ldr	r3, [r4, #8]
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	60a3      	str	r3, [r4, #8]
 8004d9e:	6823      	ldr	r3, [r4, #0]
 8004da0:	1c5a      	adds	r2, r3, #1
 8004da2:	6022      	str	r2, [r4, #0]
 8004da4:	701e      	strb	r6, [r3, #0]
 8004da6:	6962      	ldr	r2, [r4, #20]
 8004da8:	1c43      	adds	r3, r0, #1
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d004      	beq.n	8004db8 <__swbuf_r+0x6e>
 8004dae:	89a3      	ldrh	r3, [r4, #12]
 8004db0:	07db      	lsls	r3, r3, #31
 8004db2:	d5e1      	bpl.n	8004d78 <__swbuf_r+0x2e>
 8004db4:	2e0a      	cmp	r6, #10
 8004db6:	d1df      	bne.n	8004d78 <__swbuf_r+0x2e>
 8004db8:	4621      	mov	r1, r4
 8004dba:	4628      	mov	r0, r5
 8004dbc:	f000 fd2e 	bl	800581c <_fflush_r>
 8004dc0:	2800      	cmp	r0, #0
 8004dc2:	d0d9      	beq.n	8004d78 <__swbuf_r+0x2e>
 8004dc4:	e7d6      	b.n	8004d74 <__swbuf_r+0x2a>
	...

08004dc8 <__swsetup_r>:
 8004dc8:	b538      	push	{r3, r4, r5, lr}
 8004dca:	4b29      	ldr	r3, [pc, #164]	@ (8004e70 <__swsetup_r+0xa8>)
 8004dcc:	4605      	mov	r5, r0
 8004dce:	6818      	ldr	r0, [r3, #0]
 8004dd0:	460c      	mov	r4, r1
 8004dd2:	b118      	cbz	r0, 8004ddc <__swsetup_r+0x14>
 8004dd4:	6a03      	ldr	r3, [r0, #32]
 8004dd6:	b90b      	cbnz	r3, 8004ddc <__swsetup_r+0x14>
 8004dd8:	f7ff fece 	bl	8004b78 <__sinit>
 8004ddc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004de0:	0719      	lsls	r1, r3, #28
 8004de2:	d422      	bmi.n	8004e2a <__swsetup_r+0x62>
 8004de4:	06da      	lsls	r2, r3, #27
 8004de6:	d407      	bmi.n	8004df8 <__swsetup_r+0x30>
 8004de8:	2209      	movs	r2, #9
 8004dea:	602a      	str	r2, [r5, #0]
 8004dec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004df0:	81a3      	strh	r3, [r4, #12]
 8004df2:	f04f 30ff 	mov.w	r0, #4294967295
 8004df6:	e033      	b.n	8004e60 <__swsetup_r+0x98>
 8004df8:	0758      	lsls	r0, r3, #29
 8004dfa:	d512      	bpl.n	8004e22 <__swsetup_r+0x5a>
 8004dfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004dfe:	b141      	cbz	r1, 8004e12 <__swsetup_r+0x4a>
 8004e00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004e04:	4299      	cmp	r1, r3
 8004e06:	d002      	beq.n	8004e0e <__swsetup_r+0x46>
 8004e08:	4628      	mov	r0, r5
 8004e0a:	f000 f8bd 	bl	8004f88 <_free_r>
 8004e0e:	2300      	movs	r3, #0
 8004e10:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e12:	89a3      	ldrh	r3, [r4, #12]
 8004e14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004e18:	81a3      	strh	r3, [r4, #12]
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	6063      	str	r3, [r4, #4]
 8004e1e:	6923      	ldr	r3, [r4, #16]
 8004e20:	6023      	str	r3, [r4, #0]
 8004e22:	89a3      	ldrh	r3, [r4, #12]
 8004e24:	f043 0308 	orr.w	r3, r3, #8
 8004e28:	81a3      	strh	r3, [r4, #12]
 8004e2a:	6923      	ldr	r3, [r4, #16]
 8004e2c:	b94b      	cbnz	r3, 8004e42 <__swsetup_r+0x7a>
 8004e2e:	89a3      	ldrh	r3, [r4, #12]
 8004e30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004e34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e38:	d003      	beq.n	8004e42 <__swsetup_r+0x7a>
 8004e3a:	4621      	mov	r1, r4
 8004e3c:	4628      	mov	r0, r5
 8004e3e:	f000 fd3b 	bl	80058b8 <__smakebuf_r>
 8004e42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e46:	f013 0201 	ands.w	r2, r3, #1
 8004e4a:	d00a      	beq.n	8004e62 <__swsetup_r+0x9a>
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	60a2      	str	r2, [r4, #8]
 8004e50:	6962      	ldr	r2, [r4, #20]
 8004e52:	4252      	negs	r2, r2
 8004e54:	61a2      	str	r2, [r4, #24]
 8004e56:	6922      	ldr	r2, [r4, #16]
 8004e58:	b942      	cbnz	r2, 8004e6c <__swsetup_r+0xa4>
 8004e5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004e5e:	d1c5      	bne.n	8004dec <__swsetup_r+0x24>
 8004e60:	bd38      	pop	{r3, r4, r5, pc}
 8004e62:	0799      	lsls	r1, r3, #30
 8004e64:	bf58      	it	pl
 8004e66:	6962      	ldrpl	r2, [r4, #20]
 8004e68:	60a2      	str	r2, [r4, #8]
 8004e6a:	e7f4      	b.n	8004e56 <__swsetup_r+0x8e>
 8004e6c:	2000      	movs	r0, #0
 8004e6e:	e7f7      	b.n	8004e60 <__swsetup_r+0x98>
 8004e70:	20000040 	.word	0x20000040

08004e74 <memset>:
 8004e74:	4402      	add	r2, r0
 8004e76:	4603      	mov	r3, r0
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d100      	bne.n	8004e7e <memset+0xa>
 8004e7c:	4770      	bx	lr
 8004e7e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e82:	e7f9      	b.n	8004e78 <memset+0x4>

08004e84 <_close_r>:
 8004e84:	b538      	push	{r3, r4, r5, lr}
 8004e86:	4d06      	ldr	r5, [pc, #24]	@ (8004ea0 <_close_r+0x1c>)
 8004e88:	2300      	movs	r3, #0
 8004e8a:	4604      	mov	r4, r0
 8004e8c:	4608      	mov	r0, r1
 8004e8e:	602b      	str	r3, [r5, #0]
 8004e90:	f000 fe52 	bl	8005b38 <_close>
 8004e94:	1c43      	adds	r3, r0, #1
 8004e96:	d102      	bne.n	8004e9e <_close_r+0x1a>
 8004e98:	682b      	ldr	r3, [r5, #0]
 8004e9a:	b103      	cbz	r3, 8004e9e <_close_r+0x1a>
 8004e9c:	6023      	str	r3, [r4, #0]
 8004e9e:	bd38      	pop	{r3, r4, r5, pc}
 8004ea0:	20000580 	.word	0x20000580

08004ea4 <_lseek_r>:
 8004ea4:	b538      	push	{r3, r4, r5, lr}
 8004ea6:	4d07      	ldr	r5, [pc, #28]	@ (8004ec4 <_lseek_r+0x20>)
 8004ea8:	4604      	mov	r4, r0
 8004eaa:	4608      	mov	r0, r1
 8004eac:	4611      	mov	r1, r2
 8004eae:	2200      	movs	r2, #0
 8004eb0:	602a      	str	r2, [r5, #0]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	f000 fe01 	bl	8005aba <_lseek>
 8004eb8:	1c43      	adds	r3, r0, #1
 8004eba:	d102      	bne.n	8004ec2 <_lseek_r+0x1e>
 8004ebc:	682b      	ldr	r3, [r5, #0]
 8004ebe:	b103      	cbz	r3, 8004ec2 <_lseek_r+0x1e>
 8004ec0:	6023      	str	r3, [r4, #0]
 8004ec2:	bd38      	pop	{r3, r4, r5, pc}
 8004ec4:	20000580 	.word	0x20000580

08004ec8 <_read_r>:
 8004ec8:	b538      	push	{r3, r4, r5, lr}
 8004eca:	4d07      	ldr	r5, [pc, #28]	@ (8004ee8 <_read_r+0x20>)
 8004ecc:	4604      	mov	r4, r0
 8004ece:	4608      	mov	r0, r1
 8004ed0:	4611      	mov	r1, r2
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	602a      	str	r2, [r5, #0]
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	f000 fd99 	bl	8005a0e <_read>
 8004edc:	1c43      	adds	r3, r0, #1
 8004ede:	d102      	bne.n	8004ee6 <_read_r+0x1e>
 8004ee0:	682b      	ldr	r3, [r5, #0]
 8004ee2:	b103      	cbz	r3, 8004ee6 <_read_r+0x1e>
 8004ee4:	6023      	str	r3, [r4, #0]
 8004ee6:	bd38      	pop	{r3, r4, r5, pc}
 8004ee8:	20000580 	.word	0x20000580

08004eec <_write_r>:
 8004eec:	b538      	push	{r3, r4, r5, lr}
 8004eee:	4d07      	ldr	r5, [pc, #28]	@ (8004f0c <_write_r+0x20>)
 8004ef0:	4604      	mov	r4, r0
 8004ef2:	4608      	mov	r0, r1
 8004ef4:	4611      	mov	r1, r2
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	602a      	str	r2, [r5, #0]
 8004efa:	461a      	mov	r2, r3
 8004efc:	f000 fdef 	bl	8005ade <_write>
 8004f00:	1c43      	adds	r3, r0, #1
 8004f02:	d102      	bne.n	8004f0a <_write_r+0x1e>
 8004f04:	682b      	ldr	r3, [r5, #0]
 8004f06:	b103      	cbz	r3, 8004f0a <_write_r+0x1e>
 8004f08:	6023      	str	r3, [r4, #0]
 8004f0a:	bd38      	pop	{r3, r4, r5, pc}
 8004f0c:	20000580 	.word	0x20000580

08004f10 <__errno>:
 8004f10:	4b01      	ldr	r3, [pc, #4]	@ (8004f18 <__errno+0x8>)
 8004f12:	6818      	ldr	r0, [r3, #0]
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	20000040 	.word	0x20000040

08004f1c <__libc_init_array>:
 8004f1c:	b570      	push	{r4, r5, r6, lr}
 8004f1e:	4d0d      	ldr	r5, [pc, #52]	@ (8004f54 <__libc_init_array+0x38>)
 8004f20:	4c0d      	ldr	r4, [pc, #52]	@ (8004f58 <__libc_init_array+0x3c>)
 8004f22:	1b64      	subs	r4, r4, r5
 8004f24:	10a4      	asrs	r4, r4, #2
 8004f26:	2600      	movs	r6, #0
 8004f28:	42a6      	cmp	r6, r4
 8004f2a:	d109      	bne.n	8004f40 <__libc_init_array+0x24>
 8004f2c:	4d0b      	ldr	r5, [pc, #44]	@ (8004f5c <__libc_init_array+0x40>)
 8004f2e:	4c0c      	ldr	r4, [pc, #48]	@ (8004f60 <__libc_init_array+0x44>)
 8004f30:	f000 ffcc 	bl	8005ecc <_init>
 8004f34:	1b64      	subs	r4, r4, r5
 8004f36:	10a4      	asrs	r4, r4, #2
 8004f38:	2600      	movs	r6, #0
 8004f3a:	42a6      	cmp	r6, r4
 8004f3c:	d105      	bne.n	8004f4a <__libc_init_array+0x2e>
 8004f3e:	bd70      	pop	{r4, r5, r6, pc}
 8004f40:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f44:	4798      	blx	r3
 8004f46:	3601      	adds	r6, #1
 8004f48:	e7ee      	b.n	8004f28 <__libc_init_array+0xc>
 8004f4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f4e:	4798      	blx	r3
 8004f50:	3601      	adds	r6, #1
 8004f52:	e7f2      	b.n	8004f3a <__libc_init_array+0x1e>
 8004f54:	08006248 	.word	0x08006248
 8004f58:	08006248 	.word	0x08006248
 8004f5c:	08006248 	.word	0x08006248
 8004f60:	0800624c 	.word	0x0800624c

08004f64 <__retarget_lock_init_recursive>:
 8004f64:	4770      	bx	lr

08004f66 <__retarget_lock_acquire_recursive>:
 8004f66:	4770      	bx	lr

08004f68 <__retarget_lock_release_recursive>:
 8004f68:	4770      	bx	lr

08004f6a <memcpy>:
 8004f6a:	440a      	add	r2, r1
 8004f6c:	4291      	cmp	r1, r2
 8004f6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f72:	d100      	bne.n	8004f76 <memcpy+0xc>
 8004f74:	4770      	bx	lr
 8004f76:	b510      	push	{r4, lr}
 8004f78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f80:	4291      	cmp	r1, r2
 8004f82:	d1f9      	bne.n	8004f78 <memcpy+0xe>
 8004f84:	bd10      	pop	{r4, pc}
	...

08004f88 <_free_r>:
 8004f88:	b538      	push	{r3, r4, r5, lr}
 8004f8a:	4605      	mov	r5, r0
 8004f8c:	2900      	cmp	r1, #0
 8004f8e:	d041      	beq.n	8005014 <_free_r+0x8c>
 8004f90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f94:	1f0c      	subs	r4, r1, #4
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	bfb8      	it	lt
 8004f9a:	18e4      	addlt	r4, r4, r3
 8004f9c:	f000 f8e0 	bl	8005160 <__malloc_lock>
 8004fa0:	4a1d      	ldr	r2, [pc, #116]	@ (8005018 <_free_r+0x90>)
 8004fa2:	6813      	ldr	r3, [r2, #0]
 8004fa4:	b933      	cbnz	r3, 8004fb4 <_free_r+0x2c>
 8004fa6:	6063      	str	r3, [r4, #4]
 8004fa8:	6014      	str	r4, [r2, #0]
 8004faa:	4628      	mov	r0, r5
 8004fac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fb0:	f000 b8dc 	b.w	800516c <__malloc_unlock>
 8004fb4:	42a3      	cmp	r3, r4
 8004fb6:	d908      	bls.n	8004fca <_free_r+0x42>
 8004fb8:	6820      	ldr	r0, [r4, #0]
 8004fba:	1821      	adds	r1, r4, r0
 8004fbc:	428b      	cmp	r3, r1
 8004fbe:	bf01      	itttt	eq
 8004fc0:	6819      	ldreq	r1, [r3, #0]
 8004fc2:	685b      	ldreq	r3, [r3, #4]
 8004fc4:	1809      	addeq	r1, r1, r0
 8004fc6:	6021      	streq	r1, [r4, #0]
 8004fc8:	e7ed      	b.n	8004fa6 <_free_r+0x1e>
 8004fca:	461a      	mov	r2, r3
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	b10b      	cbz	r3, 8004fd4 <_free_r+0x4c>
 8004fd0:	42a3      	cmp	r3, r4
 8004fd2:	d9fa      	bls.n	8004fca <_free_r+0x42>
 8004fd4:	6811      	ldr	r1, [r2, #0]
 8004fd6:	1850      	adds	r0, r2, r1
 8004fd8:	42a0      	cmp	r0, r4
 8004fda:	d10b      	bne.n	8004ff4 <_free_r+0x6c>
 8004fdc:	6820      	ldr	r0, [r4, #0]
 8004fde:	4401      	add	r1, r0
 8004fe0:	1850      	adds	r0, r2, r1
 8004fe2:	4283      	cmp	r3, r0
 8004fe4:	6011      	str	r1, [r2, #0]
 8004fe6:	d1e0      	bne.n	8004faa <_free_r+0x22>
 8004fe8:	6818      	ldr	r0, [r3, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	6053      	str	r3, [r2, #4]
 8004fee:	4408      	add	r0, r1
 8004ff0:	6010      	str	r0, [r2, #0]
 8004ff2:	e7da      	b.n	8004faa <_free_r+0x22>
 8004ff4:	d902      	bls.n	8004ffc <_free_r+0x74>
 8004ff6:	230c      	movs	r3, #12
 8004ff8:	602b      	str	r3, [r5, #0]
 8004ffa:	e7d6      	b.n	8004faa <_free_r+0x22>
 8004ffc:	6820      	ldr	r0, [r4, #0]
 8004ffe:	1821      	adds	r1, r4, r0
 8005000:	428b      	cmp	r3, r1
 8005002:	bf04      	itt	eq
 8005004:	6819      	ldreq	r1, [r3, #0]
 8005006:	685b      	ldreq	r3, [r3, #4]
 8005008:	6063      	str	r3, [r4, #4]
 800500a:	bf04      	itt	eq
 800500c:	1809      	addeq	r1, r1, r0
 800500e:	6021      	streq	r1, [r4, #0]
 8005010:	6054      	str	r4, [r2, #4]
 8005012:	e7ca      	b.n	8004faa <_free_r+0x22>
 8005014:	bd38      	pop	{r3, r4, r5, pc}
 8005016:	bf00      	nop
 8005018:	2000058c 	.word	0x2000058c

0800501c <sbrk_aligned>:
 800501c:	b570      	push	{r4, r5, r6, lr}
 800501e:	4e0f      	ldr	r6, [pc, #60]	@ (800505c <sbrk_aligned+0x40>)
 8005020:	460c      	mov	r4, r1
 8005022:	6831      	ldr	r1, [r6, #0]
 8005024:	4605      	mov	r5, r0
 8005026:	b911      	cbnz	r1, 800502e <sbrk_aligned+0x12>
 8005028:	f000 fca4 	bl	8005974 <_sbrk_r>
 800502c:	6030      	str	r0, [r6, #0]
 800502e:	4621      	mov	r1, r4
 8005030:	4628      	mov	r0, r5
 8005032:	f000 fc9f 	bl	8005974 <_sbrk_r>
 8005036:	1c43      	adds	r3, r0, #1
 8005038:	d103      	bne.n	8005042 <sbrk_aligned+0x26>
 800503a:	f04f 34ff 	mov.w	r4, #4294967295
 800503e:	4620      	mov	r0, r4
 8005040:	bd70      	pop	{r4, r5, r6, pc}
 8005042:	1cc4      	adds	r4, r0, #3
 8005044:	f024 0403 	bic.w	r4, r4, #3
 8005048:	42a0      	cmp	r0, r4
 800504a:	d0f8      	beq.n	800503e <sbrk_aligned+0x22>
 800504c:	1a21      	subs	r1, r4, r0
 800504e:	4628      	mov	r0, r5
 8005050:	f000 fc90 	bl	8005974 <_sbrk_r>
 8005054:	3001      	adds	r0, #1
 8005056:	d1f2      	bne.n	800503e <sbrk_aligned+0x22>
 8005058:	e7ef      	b.n	800503a <sbrk_aligned+0x1e>
 800505a:	bf00      	nop
 800505c:	20000588 	.word	0x20000588

08005060 <_malloc_r>:
 8005060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005064:	1ccd      	adds	r5, r1, #3
 8005066:	f025 0503 	bic.w	r5, r5, #3
 800506a:	3508      	adds	r5, #8
 800506c:	2d0c      	cmp	r5, #12
 800506e:	bf38      	it	cc
 8005070:	250c      	movcc	r5, #12
 8005072:	2d00      	cmp	r5, #0
 8005074:	4606      	mov	r6, r0
 8005076:	db01      	blt.n	800507c <_malloc_r+0x1c>
 8005078:	42a9      	cmp	r1, r5
 800507a:	d904      	bls.n	8005086 <_malloc_r+0x26>
 800507c:	230c      	movs	r3, #12
 800507e:	6033      	str	r3, [r6, #0]
 8005080:	2000      	movs	r0, #0
 8005082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005086:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800515c <_malloc_r+0xfc>
 800508a:	f000 f869 	bl	8005160 <__malloc_lock>
 800508e:	f8d8 3000 	ldr.w	r3, [r8]
 8005092:	461c      	mov	r4, r3
 8005094:	bb44      	cbnz	r4, 80050e8 <_malloc_r+0x88>
 8005096:	4629      	mov	r1, r5
 8005098:	4630      	mov	r0, r6
 800509a:	f7ff ffbf 	bl	800501c <sbrk_aligned>
 800509e:	1c43      	adds	r3, r0, #1
 80050a0:	4604      	mov	r4, r0
 80050a2:	d158      	bne.n	8005156 <_malloc_r+0xf6>
 80050a4:	f8d8 4000 	ldr.w	r4, [r8]
 80050a8:	4627      	mov	r7, r4
 80050aa:	2f00      	cmp	r7, #0
 80050ac:	d143      	bne.n	8005136 <_malloc_r+0xd6>
 80050ae:	2c00      	cmp	r4, #0
 80050b0:	d04b      	beq.n	800514a <_malloc_r+0xea>
 80050b2:	6823      	ldr	r3, [r4, #0]
 80050b4:	4639      	mov	r1, r7
 80050b6:	4630      	mov	r0, r6
 80050b8:	eb04 0903 	add.w	r9, r4, r3
 80050bc:	f000 fc5a 	bl	8005974 <_sbrk_r>
 80050c0:	4581      	cmp	r9, r0
 80050c2:	d142      	bne.n	800514a <_malloc_r+0xea>
 80050c4:	6821      	ldr	r1, [r4, #0]
 80050c6:	1a6d      	subs	r5, r5, r1
 80050c8:	4629      	mov	r1, r5
 80050ca:	4630      	mov	r0, r6
 80050cc:	f7ff ffa6 	bl	800501c <sbrk_aligned>
 80050d0:	3001      	adds	r0, #1
 80050d2:	d03a      	beq.n	800514a <_malloc_r+0xea>
 80050d4:	6823      	ldr	r3, [r4, #0]
 80050d6:	442b      	add	r3, r5
 80050d8:	6023      	str	r3, [r4, #0]
 80050da:	f8d8 3000 	ldr.w	r3, [r8]
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	bb62      	cbnz	r2, 800513c <_malloc_r+0xdc>
 80050e2:	f8c8 7000 	str.w	r7, [r8]
 80050e6:	e00f      	b.n	8005108 <_malloc_r+0xa8>
 80050e8:	6822      	ldr	r2, [r4, #0]
 80050ea:	1b52      	subs	r2, r2, r5
 80050ec:	d420      	bmi.n	8005130 <_malloc_r+0xd0>
 80050ee:	2a0b      	cmp	r2, #11
 80050f0:	d917      	bls.n	8005122 <_malloc_r+0xc2>
 80050f2:	1961      	adds	r1, r4, r5
 80050f4:	42a3      	cmp	r3, r4
 80050f6:	6025      	str	r5, [r4, #0]
 80050f8:	bf18      	it	ne
 80050fa:	6059      	strne	r1, [r3, #4]
 80050fc:	6863      	ldr	r3, [r4, #4]
 80050fe:	bf08      	it	eq
 8005100:	f8c8 1000 	streq.w	r1, [r8]
 8005104:	5162      	str	r2, [r4, r5]
 8005106:	604b      	str	r3, [r1, #4]
 8005108:	4630      	mov	r0, r6
 800510a:	f000 f82f 	bl	800516c <__malloc_unlock>
 800510e:	f104 000b 	add.w	r0, r4, #11
 8005112:	1d23      	adds	r3, r4, #4
 8005114:	f020 0007 	bic.w	r0, r0, #7
 8005118:	1ac2      	subs	r2, r0, r3
 800511a:	bf1c      	itt	ne
 800511c:	1a1b      	subne	r3, r3, r0
 800511e:	50a3      	strne	r3, [r4, r2]
 8005120:	e7af      	b.n	8005082 <_malloc_r+0x22>
 8005122:	6862      	ldr	r2, [r4, #4]
 8005124:	42a3      	cmp	r3, r4
 8005126:	bf0c      	ite	eq
 8005128:	f8c8 2000 	streq.w	r2, [r8]
 800512c:	605a      	strne	r2, [r3, #4]
 800512e:	e7eb      	b.n	8005108 <_malloc_r+0xa8>
 8005130:	4623      	mov	r3, r4
 8005132:	6864      	ldr	r4, [r4, #4]
 8005134:	e7ae      	b.n	8005094 <_malloc_r+0x34>
 8005136:	463c      	mov	r4, r7
 8005138:	687f      	ldr	r7, [r7, #4]
 800513a:	e7b6      	b.n	80050aa <_malloc_r+0x4a>
 800513c:	461a      	mov	r2, r3
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	42a3      	cmp	r3, r4
 8005142:	d1fb      	bne.n	800513c <_malloc_r+0xdc>
 8005144:	2300      	movs	r3, #0
 8005146:	6053      	str	r3, [r2, #4]
 8005148:	e7de      	b.n	8005108 <_malloc_r+0xa8>
 800514a:	230c      	movs	r3, #12
 800514c:	6033      	str	r3, [r6, #0]
 800514e:	4630      	mov	r0, r6
 8005150:	f000 f80c 	bl	800516c <__malloc_unlock>
 8005154:	e794      	b.n	8005080 <_malloc_r+0x20>
 8005156:	6005      	str	r5, [r0, #0]
 8005158:	e7d6      	b.n	8005108 <_malloc_r+0xa8>
 800515a:	bf00      	nop
 800515c:	2000058c 	.word	0x2000058c

08005160 <__malloc_lock>:
 8005160:	4801      	ldr	r0, [pc, #4]	@ (8005168 <__malloc_lock+0x8>)
 8005162:	f7ff bf00 	b.w	8004f66 <__retarget_lock_acquire_recursive>
 8005166:	bf00      	nop
 8005168:	20000584 	.word	0x20000584

0800516c <__malloc_unlock>:
 800516c:	4801      	ldr	r0, [pc, #4]	@ (8005174 <__malloc_unlock+0x8>)
 800516e:	f7ff befb 	b.w	8004f68 <__retarget_lock_release_recursive>
 8005172:	bf00      	nop
 8005174:	20000584 	.word	0x20000584

08005178 <__sfputc_r>:
 8005178:	6893      	ldr	r3, [r2, #8]
 800517a:	3b01      	subs	r3, #1
 800517c:	2b00      	cmp	r3, #0
 800517e:	b410      	push	{r4}
 8005180:	6093      	str	r3, [r2, #8]
 8005182:	da08      	bge.n	8005196 <__sfputc_r+0x1e>
 8005184:	6994      	ldr	r4, [r2, #24]
 8005186:	42a3      	cmp	r3, r4
 8005188:	db01      	blt.n	800518e <__sfputc_r+0x16>
 800518a:	290a      	cmp	r1, #10
 800518c:	d103      	bne.n	8005196 <__sfputc_r+0x1e>
 800518e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005192:	f7ff bdda 	b.w	8004d4a <__swbuf_r>
 8005196:	6813      	ldr	r3, [r2, #0]
 8005198:	1c58      	adds	r0, r3, #1
 800519a:	6010      	str	r0, [r2, #0]
 800519c:	7019      	strb	r1, [r3, #0]
 800519e:	4608      	mov	r0, r1
 80051a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051a4:	4770      	bx	lr

080051a6 <__sfputs_r>:
 80051a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051a8:	4606      	mov	r6, r0
 80051aa:	460f      	mov	r7, r1
 80051ac:	4614      	mov	r4, r2
 80051ae:	18d5      	adds	r5, r2, r3
 80051b0:	42ac      	cmp	r4, r5
 80051b2:	d101      	bne.n	80051b8 <__sfputs_r+0x12>
 80051b4:	2000      	movs	r0, #0
 80051b6:	e007      	b.n	80051c8 <__sfputs_r+0x22>
 80051b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051bc:	463a      	mov	r2, r7
 80051be:	4630      	mov	r0, r6
 80051c0:	f7ff ffda 	bl	8005178 <__sfputc_r>
 80051c4:	1c43      	adds	r3, r0, #1
 80051c6:	d1f3      	bne.n	80051b0 <__sfputs_r+0xa>
 80051c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080051cc <_vfiprintf_r>:
 80051cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051d0:	460d      	mov	r5, r1
 80051d2:	b09d      	sub	sp, #116	@ 0x74
 80051d4:	4614      	mov	r4, r2
 80051d6:	4698      	mov	r8, r3
 80051d8:	4606      	mov	r6, r0
 80051da:	b118      	cbz	r0, 80051e4 <_vfiprintf_r+0x18>
 80051dc:	6a03      	ldr	r3, [r0, #32]
 80051de:	b90b      	cbnz	r3, 80051e4 <_vfiprintf_r+0x18>
 80051e0:	f7ff fcca 	bl	8004b78 <__sinit>
 80051e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80051e6:	07d9      	lsls	r1, r3, #31
 80051e8:	d405      	bmi.n	80051f6 <_vfiprintf_r+0x2a>
 80051ea:	89ab      	ldrh	r3, [r5, #12]
 80051ec:	059a      	lsls	r2, r3, #22
 80051ee:	d402      	bmi.n	80051f6 <_vfiprintf_r+0x2a>
 80051f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80051f2:	f7ff feb8 	bl	8004f66 <__retarget_lock_acquire_recursive>
 80051f6:	89ab      	ldrh	r3, [r5, #12]
 80051f8:	071b      	lsls	r3, r3, #28
 80051fa:	d501      	bpl.n	8005200 <_vfiprintf_r+0x34>
 80051fc:	692b      	ldr	r3, [r5, #16]
 80051fe:	b99b      	cbnz	r3, 8005228 <_vfiprintf_r+0x5c>
 8005200:	4629      	mov	r1, r5
 8005202:	4630      	mov	r0, r6
 8005204:	f7ff fde0 	bl	8004dc8 <__swsetup_r>
 8005208:	b170      	cbz	r0, 8005228 <_vfiprintf_r+0x5c>
 800520a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800520c:	07dc      	lsls	r4, r3, #31
 800520e:	d504      	bpl.n	800521a <_vfiprintf_r+0x4e>
 8005210:	f04f 30ff 	mov.w	r0, #4294967295
 8005214:	b01d      	add	sp, #116	@ 0x74
 8005216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800521a:	89ab      	ldrh	r3, [r5, #12]
 800521c:	0598      	lsls	r0, r3, #22
 800521e:	d4f7      	bmi.n	8005210 <_vfiprintf_r+0x44>
 8005220:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005222:	f7ff fea1 	bl	8004f68 <__retarget_lock_release_recursive>
 8005226:	e7f3      	b.n	8005210 <_vfiprintf_r+0x44>
 8005228:	2300      	movs	r3, #0
 800522a:	9309      	str	r3, [sp, #36]	@ 0x24
 800522c:	2320      	movs	r3, #32
 800522e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005232:	f8cd 800c 	str.w	r8, [sp, #12]
 8005236:	2330      	movs	r3, #48	@ 0x30
 8005238:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80053e8 <_vfiprintf_r+0x21c>
 800523c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005240:	f04f 0901 	mov.w	r9, #1
 8005244:	4623      	mov	r3, r4
 8005246:	469a      	mov	sl, r3
 8005248:	f813 2b01 	ldrb.w	r2, [r3], #1
 800524c:	b10a      	cbz	r2, 8005252 <_vfiprintf_r+0x86>
 800524e:	2a25      	cmp	r2, #37	@ 0x25
 8005250:	d1f9      	bne.n	8005246 <_vfiprintf_r+0x7a>
 8005252:	ebba 0b04 	subs.w	fp, sl, r4
 8005256:	d00b      	beq.n	8005270 <_vfiprintf_r+0xa4>
 8005258:	465b      	mov	r3, fp
 800525a:	4622      	mov	r2, r4
 800525c:	4629      	mov	r1, r5
 800525e:	4630      	mov	r0, r6
 8005260:	f7ff ffa1 	bl	80051a6 <__sfputs_r>
 8005264:	3001      	adds	r0, #1
 8005266:	f000 80a7 	beq.w	80053b8 <_vfiprintf_r+0x1ec>
 800526a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800526c:	445a      	add	r2, fp
 800526e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005270:	f89a 3000 	ldrb.w	r3, [sl]
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 809f 	beq.w	80053b8 <_vfiprintf_r+0x1ec>
 800527a:	2300      	movs	r3, #0
 800527c:	f04f 32ff 	mov.w	r2, #4294967295
 8005280:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005284:	f10a 0a01 	add.w	sl, sl, #1
 8005288:	9304      	str	r3, [sp, #16]
 800528a:	9307      	str	r3, [sp, #28]
 800528c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005290:	931a      	str	r3, [sp, #104]	@ 0x68
 8005292:	4654      	mov	r4, sl
 8005294:	2205      	movs	r2, #5
 8005296:	f814 1b01 	ldrb.w	r1, [r4], #1
 800529a:	4853      	ldr	r0, [pc, #332]	@ (80053e8 <_vfiprintf_r+0x21c>)
 800529c:	f7fa ff98 	bl	80001d0 <memchr>
 80052a0:	9a04      	ldr	r2, [sp, #16]
 80052a2:	b9d8      	cbnz	r0, 80052dc <_vfiprintf_r+0x110>
 80052a4:	06d1      	lsls	r1, r2, #27
 80052a6:	bf44      	itt	mi
 80052a8:	2320      	movmi	r3, #32
 80052aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052ae:	0713      	lsls	r3, r2, #28
 80052b0:	bf44      	itt	mi
 80052b2:	232b      	movmi	r3, #43	@ 0x2b
 80052b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052b8:	f89a 3000 	ldrb.w	r3, [sl]
 80052bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80052be:	d015      	beq.n	80052ec <_vfiprintf_r+0x120>
 80052c0:	9a07      	ldr	r2, [sp, #28]
 80052c2:	4654      	mov	r4, sl
 80052c4:	2000      	movs	r0, #0
 80052c6:	f04f 0c0a 	mov.w	ip, #10
 80052ca:	4621      	mov	r1, r4
 80052cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052d0:	3b30      	subs	r3, #48	@ 0x30
 80052d2:	2b09      	cmp	r3, #9
 80052d4:	d94b      	bls.n	800536e <_vfiprintf_r+0x1a2>
 80052d6:	b1b0      	cbz	r0, 8005306 <_vfiprintf_r+0x13a>
 80052d8:	9207      	str	r2, [sp, #28]
 80052da:	e014      	b.n	8005306 <_vfiprintf_r+0x13a>
 80052dc:	eba0 0308 	sub.w	r3, r0, r8
 80052e0:	fa09 f303 	lsl.w	r3, r9, r3
 80052e4:	4313      	orrs	r3, r2
 80052e6:	9304      	str	r3, [sp, #16]
 80052e8:	46a2      	mov	sl, r4
 80052ea:	e7d2      	b.n	8005292 <_vfiprintf_r+0xc6>
 80052ec:	9b03      	ldr	r3, [sp, #12]
 80052ee:	1d19      	adds	r1, r3, #4
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	9103      	str	r1, [sp, #12]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	bfbb      	ittet	lt
 80052f8:	425b      	neglt	r3, r3
 80052fa:	f042 0202 	orrlt.w	r2, r2, #2
 80052fe:	9307      	strge	r3, [sp, #28]
 8005300:	9307      	strlt	r3, [sp, #28]
 8005302:	bfb8      	it	lt
 8005304:	9204      	strlt	r2, [sp, #16]
 8005306:	7823      	ldrb	r3, [r4, #0]
 8005308:	2b2e      	cmp	r3, #46	@ 0x2e
 800530a:	d10a      	bne.n	8005322 <_vfiprintf_r+0x156>
 800530c:	7863      	ldrb	r3, [r4, #1]
 800530e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005310:	d132      	bne.n	8005378 <_vfiprintf_r+0x1ac>
 8005312:	9b03      	ldr	r3, [sp, #12]
 8005314:	1d1a      	adds	r2, r3, #4
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	9203      	str	r2, [sp, #12]
 800531a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800531e:	3402      	adds	r4, #2
 8005320:	9305      	str	r3, [sp, #20]
 8005322:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80053f8 <_vfiprintf_r+0x22c>
 8005326:	7821      	ldrb	r1, [r4, #0]
 8005328:	2203      	movs	r2, #3
 800532a:	4650      	mov	r0, sl
 800532c:	f7fa ff50 	bl	80001d0 <memchr>
 8005330:	b138      	cbz	r0, 8005342 <_vfiprintf_r+0x176>
 8005332:	9b04      	ldr	r3, [sp, #16]
 8005334:	eba0 000a 	sub.w	r0, r0, sl
 8005338:	2240      	movs	r2, #64	@ 0x40
 800533a:	4082      	lsls	r2, r0
 800533c:	4313      	orrs	r3, r2
 800533e:	3401      	adds	r4, #1
 8005340:	9304      	str	r3, [sp, #16]
 8005342:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005346:	4829      	ldr	r0, [pc, #164]	@ (80053ec <_vfiprintf_r+0x220>)
 8005348:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800534c:	2206      	movs	r2, #6
 800534e:	f7fa ff3f 	bl	80001d0 <memchr>
 8005352:	2800      	cmp	r0, #0
 8005354:	d03f      	beq.n	80053d6 <_vfiprintf_r+0x20a>
 8005356:	4b26      	ldr	r3, [pc, #152]	@ (80053f0 <_vfiprintf_r+0x224>)
 8005358:	bb1b      	cbnz	r3, 80053a2 <_vfiprintf_r+0x1d6>
 800535a:	9b03      	ldr	r3, [sp, #12]
 800535c:	3307      	adds	r3, #7
 800535e:	f023 0307 	bic.w	r3, r3, #7
 8005362:	3308      	adds	r3, #8
 8005364:	9303      	str	r3, [sp, #12]
 8005366:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005368:	443b      	add	r3, r7
 800536a:	9309      	str	r3, [sp, #36]	@ 0x24
 800536c:	e76a      	b.n	8005244 <_vfiprintf_r+0x78>
 800536e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005372:	460c      	mov	r4, r1
 8005374:	2001      	movs	r0, #1
 8005376:	e7a8      	b.n	80052ca <_vfiprintf_r+0xfe>
 8005378:	2300      	movs	r3, #0
 800537a:	3401      	adds	r4, #1
 800537c:	9305      	str	r3, [sp, #20]
 800537e:	4619      	mov	r1, r3
 8005380:	f04f 0c0a 	mov.w	ip, #10
 8005384:	4620      	mov	r0, r4
 8005386:	f810 2b01 	ldrb.w	r2, [r0], #1
 800538a:	3a30      	subs	r2, #48	@ 0x30
 800538c:	2a09      	cmp	r2, #9
 800538e:	d903      	bls.n	8005398 <_vfiprintf_r+0x1cc>
 8005390:	2b00      	cmp	r3, #0
 8005392:	d0c6      	beq.n	8005322 <_vfiprintf_r+0x156>
 8005394:	9105      	str	r1, [sp, #20]
 8005396:	e7c4      	b.n	8005322 <_vfiprintf_r+0x156>
 8005398:	fb0c 2101 	mla	r1, ip, r1, r2
 800539c:	4604      	mov	r4, r0
 800539e:	2301      	movs	r3, #1
 80053a0:	e7f0      	b.n	8005384 <_vfiprintf_r+0x1b8>
 80053a2:	ab03      	add	r3, sp, #12
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	462a      	mov	r2, r5
 80053a8:	4b12      	ldr	r3, [pc, #72]	@ (80053f4 <_vfiprintf_r+0x228>)
 80053aa:	a904      	add	r1, sp, #16
 80053ac:	4630      	mov	r0, r6
 80053ae:	f3af 8000 	nop.w
 80053b2:	4607      	mov	r7, r0
 80053b4:	1c78      	adds	r0, r7, #1
 80053b6:	d1d6      	bne.n	8005366 <_vfiprintf_r+0x19a>
 80053b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80053ba:	07d9      	lsls	r1, r3, #31
 80053bc:	d405      	bmi.n	80053ca <_vfiprintf_r+0x1fe>
 80053be:	89ab      	ldrh	r3, [r5, #12]
 80053c0:	059a      	lsls	r2, r3, #22
 80053c2:	d402      	bmi.n	80053ca <_vfiprintf_r+0x1fe>
 80053c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80053c6:	f7ff fdcf 	bl	8004f68 <__retarget_lock_release_recursive>
 80053ca:	89ab      	ldrh	r3, [r5, #12]
 80053cc:	065b      	lsls	r3, r3, #25
 80053ce:	f53f af1f 	bmi.w	8005210 <_vfiprintf_r+0x44>
 80053d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80053d4:	e71e      	b.n	8005214 <_vfiprintf_r+0x48>
 80053d6:	ab03      	add	r3, sp, #12
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	462a      	mov	r2, r5
 80053dc:	4b05      	ldr	r3, [pc, #20]	@ (80053f4 <_vfiprintf_r+0x228>)
 80053de:	a904      	add	r1, sp, #16
 80053e0:	4630      	mov	r0, r6
 80053e2:	f000 f879 	bl	80054d8 <_printf_i>
 80053e6:	e7e4      	b.n	80053b2 <_vfiprintf_r+0x1e6>
 80053e8:	080061f0 	.word	0x080061f0
 80053ec:	080061fa 	.word	0x080061fa
 80053f0:	00000000 	.word	0x00000000
 80053f4:	080051a7 	.word	0x080051a7
 80053f8:	080061f6 	.word	0x080061f6

080053fc <_printf_common>:
 80053fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005400:	4616      	mov	r6, r2
 8005402:	4698      	mov	r8, r3
 8005404:	688a      	ldr	r2, [r1, #8]
 8005406:	690b      	ldr	r3, [r1, #16]
 8005408:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800540c:	4293      	cmp	r3, r2
 800540e:	bfb8      	it	lt
 8005410:	4613      	movlt	r3, r2
 8005412:	6033      	str	r3, [r6, #0]
 8005414:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005418:	4607      	mov	r7, r0
 800541a:	460c      	mov	r4, r1
 800541c:	b10a      	cbz	r2, 8005422 <_printf_common+0x26>
 800541e:	3301      	adds	r3, #1
 8005420:	6033      	str	r3, [r6, #0]
 8005422:	6823      	ldr	r3, [r4, #0]
 8005424:	0699      	lsls	r1, r3, #26
 8005426:	bf42      	ittt	mi
 8005428:	6833      	ldrmi	r3, [r6, #0]
 800542a:	3302      	addmi	r3, #2
 800542c:	6033      	strmi	r3, [r6, #0]
 800542e:	6825      	ldr	r5, [r4, #0]
 8005430:	f015 0506 	ands.w	r5, r5, #6
 8005434:	d106      	bne.n	8005444 <_printf_common+0x48>
 8005436:	f104 0a19 	add.w	sl, r4, #25
 800543a:	68e3      	ldr	r3, [r4, #12]
 800543c:	6832      	ldr	r2, [r6, #0]
 800543e:	1a9b      	subs	r3, r3, r2
 8005440:	42ab      	cmp	r3, r5
 8005442:	dc26      	bgt.n	8005492 <_printf_common+0x96>
 8005444:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005448:	6822      	ldr	r2, [r4, #0]
 800544a:	3b00      	subs	r3, #0
 800544c:	bf18      	it	ne
 800544e:	2301      	movne	r3, #1
 8005450:	0692      	lsls	r2, r2, #26
 8005452:	d42b      	bmi.n	80054ac <_printf_common+0xb0>
 8005454:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005458:	4641      	mov	r1, r8
 800545a:	4638      	mov	r0, r7
 800545c:	47c8      	blx	r9
 800545e:	3001      	adds	r0, #1
 8005460:	d01e      	beq.n	80054a0 <_printf_common+0xa4>
 8005462:	6823      	ldr	r3, [r4, #0]
 8005464:	6922      	ldr	r2, [r4, #16]
 8005466:	f003 0306 	and.w	r3, r3, #6
 800546a:	2b04      	cmp	r3, #4
 800546c:	bf02      	ittt	eq
 800546e:	68e5      	ldreq	r5, [r4, #12]
 8005470:	6833      	ldreq	r3, [r6, #0]
 8005472:	1aed      	subeq	r5, r5, r3
 8005474:	68a3      	ldr	r3, [r4, #8]
 8005476:	bf0c      	ite	eq
 8005478:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800547c:	2500      	movne	r5, #0
 800547e:	4293      	cmp	r3, r2
 8005480:	bfc4      	itt	gt
 8005482:	1a9b      	subgt	r3, r3, r2
 8005484:	18ed      	addgt	r5, r5, r3
 8005486:	2600      	movs	r6, #0
 8005488:	341a      	adds	r4, #26
 800548a:	42b5      	cmp	r5, r6
 800548c:	d11a      	bne.n	80054c4 <_printf_common+0xc8>
 800548e:	2000      	movs	r0, #0
 8005490:	e008      	b.n	80054a4 <_printf_common+0xa8>
 8005492:	2301      	movs	r3, #1
 8005494:	4652      	mov	r2, sl
 8005496:	4641      	mov	r1, r8
 8005498:	4638      	mov	r0, r7
 800549a:	47c8      	blx	r9
 800549c:	3001      	adds	r0, #1
 800549e:	d103      	bne.n	80054a8 <_printf_common+0xac>
 80054a0:	f04f 30ff 	mov.w	r0, #4294967295
 80054a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054a8:	3501      	adds	r5, #1
 80054aa:	e7c6      	b.n	800543a <_printf_common+0x3e>
 80054ac:	18e1      	adds	r1, r4, r3
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	2030      	movs	r0, #48	@ 0x30
 80054b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80054b6:	4422      	add	r2, r4
 80054b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80054bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80054c0:	3302      	adds	r3, #2
 80054c2:	e7c7      	b.n	8005454 <_printf_common+0x58>
 80054c4:	2301      	movs	r3, #1
 80054c6:	4622      	mov	r2, r4
 80054c8:	4641      	mov	r1, r8
 80054ca:	4638      	mov	r0, r7
 80054cc:	47c8      	blx	r9
 80054ce:	3001      	adds	r0, #1
 80054d0:	d0e6      	beq.n	80054a0 <_printf_common+0xa4>
 80054d2:	3601      	adds	r6, #1
 80054d4:	e7d9      	b.n	800548a <_printf_common+0x8e>
	...

080054d8 <_printf_i>:
 80054d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054dc:	7e0f      	ldrb	r7, [r1, #24]
 80054de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80054e0:	2f78      	cmp	r7, #120	@ 0x78
 80054e2:	4691      	mov	r9, r2
 80054e4:	4680      	mov	r8, r0
 80054e6:	460c      	mov	r4, r1
 80054e8:	469a      	mov	sl, r3
 80054ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80054ee:	d807      	bhi.n	8005500 <_printf_i+0x28>
 80054f0:	2f62      	cmp	r7, #98	@ 0x62
 80054f2:	d80a      	bhi.n	800550a <_printf_i+0x32>
 80054f4:	2f00      	cmp	r7, #0
 80054f6:	f000 80d1 	beq.w	800569c <_printf_i+0x1c4>
 80054fa:	2f58      	cmp	r7, #88	@ 0x58
 80054fc:	f000 80b8 	beq.w	8005670 <_printf_i+0x198>
 8005500:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005504:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005508:	e03a      	b.n	8005580 <_printf_i+0xa8>
 800550a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800550e:	2b15      	cmp	r3, #21
 8005510:	d8f6      	bhi.n	8005500 <_printf_i+0x28>
 8005512:	a101      	add	r1, pc, #4	@ (adr r1, 8005518 <_printf_i+0x40>)
 8005514:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005518:	08005571 	.word	0x08005571
 800551c:	08005585 	.word	0x08005585
 8005520:	08005501 	.word	0x08005501
 8005524:	08005501 	.word	0x08005501
 8005528:	08005501 	.word	0x08005501
 800552c:	08005501 	.word	0x08005501
 8005530:	08005585 	.word	0x08005585
 8005534:	08005501 	.word	0x08005501
 8005538:	08005501 	.word	0x08005501
 800553c:	08005501 	.word	0x08005501
 8005540:	08005501 	.word	0x08005501
 8005544:	08005683 	.word	0x08005683
 8005548:	080055af 	.word	0x080055af
 800554c:	0800563d 	.word	0x0800563d
 8005550:	08005501 	.word	0x08005501
 8005554:	08005501 	.word	0x08005501
 8005558:	080056a5 	.word	0x080056a5
 800555c:	08005501 	.word	0x08005501
 8005560:	080055af 	.word	0x080055af
 8005564:	08005501 	.word	0x08005501
 8005568:	08005501 	.word	0x08005501
 800556c:	08005645 	.word	0x08005645
 8005570:	6833      	ldr	r3, [r6, #0]
 8005572:	1d1a      	adds	r2, r3, #4
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	6032      	str	r2, [r6, #0]
 8005578:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800557c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005580:	2301      	movs	r3, #1
 8005582:	e09c      	b.n	80056be <_printf_i+0x1e6>
 8005584:	6833      	ldr	r3, [r6, #0]
 8005586:	6820      	ldr	r0, [r4, #0]
 8005588:	1d19      	adds	r1, r3, #4
 800558a:	6031      	str	r1, [r6, #0]
 800558c:	0606      	lsls	r6, r0, #24
 800558e:	d501      	bpl.n	8005594 <_printf_i+0xbc>
 8005590:	681d      	ldr	r5, [r3, #0]
 8005592:	e003      	b.n	800559c <_printf_i+0xc4>
 8005594:	0645      	lsls	r5, r0, #25
 8005596:	d5fb      	bpl.n	8005590 <_printf_i+0xb8>
 8005598:	f9b3 5000 	ldrsh.w	r5, [r3]
 800559c:	2d00      	cmp	r5, #0
 800559e:	da03      	bge.n	80055a8 <_printf_i+0xd0>
 80055a0:	232d      	movs	r3, #45	@ 0x2d
 80055a2:	426d      	negs	r5, r5
 80055a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055a8:	4858      	ldr	r0, [pc, #352]	@ (800570c <_printf_i+0x234>)
 80055aa:	230a      	movs	r3, #10
 80055ac:	e011      	b.n	80055d2 <_printf_i+0xfa>
 80055ae:	6821      	ldr	r1, [r4, #0]
 80055b0:	6833      	ldr	r3, [r6, #0]
 80055b2:	0608      	lsls	r0, r1, #24
 80055b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80055b8:	d402      	bmi.n	80055c0 <_printf_i+0xe8>
 80055ba:	0649      	lsls	r1, r1, #25
 80055bc:	bf48      	it	mi
 80055be:	b2ad      	uxthmi	r5, r5
 80055c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80055c2:	4852      	ldr	r0, [pc, #328]	@ (800570c <_printf_i+0x234>)
 80055c4:	6033      	str	r3, [r6, #0]
 80055c6:	bf14      	ite	ne
 80055c8:	230a      	movne	r3, #10
 80055ca:	2308      	moveq	r3, #8
 80055cc:	2100      	movs	r1, #0
 80055ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80055d2:	6866      	ldr	r6, [r4, #4]
 80055d4:	60a6      	str	r6, [r4, #8]
 80055d6:	2e00      	cmp	r6, #0
 80055d8:	db05      	blt.n	80055e6 <_printf_i+0x10e>
 80055da:	6821      	ldr	r1, [r4, #0]
 80055dc:	432e      	orrs	r6, r5
 80055de:	f021 0104 	bic.w	r1, r1, #4
 80055e2:	6021      	str	r1, [r4, #0]
 80055e4:	d04b      	beq.n	800567e <_printf_i+0x1a6>
 80055e6:	4616      	mov	r6, r2
 80055e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80055ec:	fb03 5711 	mls	r7, r3, r1, r5
 80055f0:	5dc7      	ldrb	r7, [r0, r7]
 80055f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80055f6:	462f      	mov	r7, r5
 80055f8:	42bb      	cmp	r3, r7
 80055fa:	460d      	mov	r5, r1
 80055fc:	d9f4      	bls.n	80055e8 <_printf_i+0x110>
 80055fe:	2b08      	cmp	r3, #8
 8005600:	d10b      	bne.n	800561a <_printf_i+0x142>
 8005602:	6823      	ldr	r3, [r4, #0]
 8005604:	07df      	lsls	r7, r3, #31
 8005606:	d508      	bpl.n	800561a <_printf_i+0x142>
 8005608:	6923      	ldr	r3, [r4, #16]
 800560a:	6861      	ldr	r1, [r4, #4]
 800560c:	4299      	cmp	r1, r3
 800560e:	bfde      	ittt	le
 8005610:	2330      	movle	r3, #48	@ 0x30
 8005612:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005616:	f106 36ff 	addle.w	r6, r6, #4294967295
 800561a:	1b92      	subs	r2, r2, r6
 800561c:	6122      	str	r2, [r4, #16]
 800561e:	f8cd a000 	str.w	sl, [sp]
 8005622:	464b      	mov	r3, r9
 8005624:	aa03      	add	r2, sp, #12
 8005626:	4621      	mov	r1, r4
 8005628:	4640      	mov	r0, r8
 800562a:	f7ff fee7 	bl	80053fc <_printf_common>
 800562e:	3001      	adds	r0, #1
 8005630:	d14a      	bne.n	80056c8 <_printf_i+0x1f0>
 8005632:	f04f 30ff 	mov.w	r0, #4294967295
 8005636:	b004      	add	sp, #16
 8005638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800563c:	6823      	ldr	r3, [r4, #0]
 800563e:	f043 0320 	orr.w	r3, r3, #32
 8005642:	6023      	str	r3, [r4, #0]
 8005644:	4832      	ldr	r0, [pc, #200]	@ (8005710 <_printf_i+0x238>)
 8005646:	2778      	movs	r7, #120	@ 0x78
 8005648:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800564c:	6823      	ldr	r3, [r4, #0]
 800564e:	6831      	ldr	r1, [r6, #0]
 8005650:	061f      	lsls	r7, r3, #24
 8005652:	f851 5b04 	ldr.w	r5, [r1], #4
 8005656:	d402      	bmi.n	800565e <_printf_i+0x186>
 8005658:	065f      	lsls	r7, r3, #25
 800565a:	bf48      	it	mi
 800565c:	b2ad      	uxthmi	r5, r5
 800565e:	6031      	str	r1, [r6, #0]
 8005660:	07d9      	lsls	r1, r3, #31
 8005662:	bf44      	itt	mi
 8005664:	f043 0320 	orrmi.w	r3, r3, #32
 8005668:	6023      	strmi	r3, [r4, #0]
 800566a:	b11d      	cbz	r5, 8005674 <_printf_i+0x19c>
 800566c:	2310      	movs	r3, #16
 800566e:	e7ad      	b.n	80055cc <_printf_i+0xf4>
 8005670:	4826      	ldr	r0, [pc, #152]	@ (800570c <_printf_i+0x234>)
 8005672:	e7e9      	b.n	8005648 <_printf_i+0x170>
 8005674:	6823      	ldr	r3, [r4, #0]
 8005676:	f023 0320 	bic.w	r3, r3, #32
 800567a:	6023      	str	r3, [r4, #0]
 800567c:	e7f6      	b.n	800566c <_printf_i+0x194>
 800567e:	4616      	mov	r6, r2
 8005680:	e7bd      	b.n	80055fe <_printf_i+0x126>
 8005682:	6833      	ldr	r3, [r6, #0]
 8005684:	6825      	ldr	r5, [r4, #0]
 8005686:	6961      	ldr	r1, [r4, #20]
 8005688:	1d18      	adds	r0, r3, #4
 800568a:	6030      	str	r0, [r6, #0]
 800568c:	062e      	lsls	r6, r5, #24
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	d501      	bpl.n	8005696 <_printf_i+0x1be>
 8005692:	6019      	str	r1, [r3, #0]
 8005694:	e002      	b.n	800569c <_printf_i+0x1c4>
 8005696:	0668      	lsls	r0, r5, #25
 8005698:	d5fb      	bpl.n	8005692 <_printf_i+0x1ba>
 800569a:	8019      	strh	r1, [r3, #0]
 800569c:	2300      	movs	r3, #0
 800569e:	6123      	str	r3, [r4, #16]
 80056a0:	4616      	mov	r6, r2
 80056a2:	e7bc      	b.n	800561e <_printf_i+0x146>
 80056a4:	6833      	ldr	r3, [r6, #0]
 80056a6:	1d1a      	adds	r2, r3, #4
 80056a8:	6032      	str	r2, [r6, #0]
 80056aa:	681e      	ldr	r6, [r3, #0]
 80056ac:	6862      	ldr	r2, [r4, #4]
 80056ae:	2100      	movs	r1, #0
 80056b0:	4630      	mov	r0, r6
 80056b2:	f7fa fd8d 	bl	80001d0 <memchr>
 80056b6:	b108      	cbz	r0, 80056bc <_printf_i+0x1e4>
 80056b8:	1b80      	subs	r0, r0, r6
 80056ba:	6060      	str	r0, [r4, #4]
 80056bc:	6863      	ldr	r3, [r4, #4]
 80056be:	6123      	str	r3, [r4, #16]
 80056c0:	2300      	movs	r3, #0
 80056c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056c6:	e7aa      	b.n	800561e <_printf_i+0x146>
 80056c8:	6923      	ldr	r3, [r4, #16]
 80056ca:	4632      	mov	r2, r6
 80056cc:	4649      	mov	r1, r9
 80056ce:	4640      	mov	r0, r8
 80056d0:	47d0      	blx	sl
 80056d2:	3001      	adds	r0, #1
 80056d4:	d0ad      	beq.n	8005632 <_printf_i+0x15a>
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	079b      	lsls	r3, r3, #30
 80056da:	d413      	bmi.n	8005704 <_printf_i+0x22c>
 80056dc:	68e0      	ldr	r0, [r4, #12]
 80056de:	9b03      	ldr	r3, [sp, #12]
 80056e0:	4298      	cmp	r0, r3
 80056e2:	bfb8      	it	lt
 80056e4:	4618      	movlt	r0, r3
 80056e6:	e7a6      	b.n	8005636 <_printf_i+0x15e>
 80056e8:	2301      	movs	r3, #1
 80056ea:	4632      	mov	r2, r6
 80056ec:	4649      	mov	r1, r9
 80056ee:	4640      	mov	r0, r8
 80056f0:	47d0      	blx	sl
 80056f2:	3001      	adds	r0, #1
 80056f4:	d09d      	beq.n	8005632 <_printf_i+0x15a>
 80056f6:	3501      	adds	r5, #1
 80056f8:	68e3      	ldr	r3, [r4, #12]
 80056fa:	9903      	ldr	r1, [sp, #12]
 80056fc:	1a5b      	subs	r3, r3, r1
 80056fe:	42ab      	cmp	r3, r5
 8005700:	dcf2      	bgt.n	80056e8 <_printf_i+0x210>
 8005702:	e7eb      	b.n	80056dc <_printf_i+0x204>
 8005704:	2500      	movs	r5, #0
 8005706:	f104 0619 	add.w	r6, r4, #25
 800570a:	e7f5      	b.n	80056f8 <_printf_i+0x220>
 800570c:	08006201 	.word	0x08006201
 8005710:	08006212 	.word	0x08006212

08005714 <__sflush_r>:
 8005714:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800571c:	0716      	lsls	r6, r2, #28
 800571e:	4605      	mov	r5, r0
 8005720:	460c      	mov	r4, r1
 8005722:	d454      	bmi.n	80057ce <__sflush_r+0xba>
 8005724:	684b      	ldr	r3, [r1, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	dc02      	bgt.n	8005730 <__sflush_r+0x1c>
 800572a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800572c:	2b00      	cmp	r3, #0
 800572e:	dd48      	ble.n	80057c2 <__sflush_r+0xae>
 8005730:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005732:	2e00      	cmp	r6, #0
 8005734:	d045      	beq.n	80057c2 <__sflush_r+0xae>
 8005736:	2300      	movs	r3, #0
 8005738:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800573c:	682f      	ldr	r7, [r5, #0]
 800573e:	6a21      	ldr	r1, [r4, #32]
 8005740:	602b      	str	r3, [r5, #0]
 8005742:	d030      	beq.n	80057a6 <__sflush_r+0x92>
 8005744:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005746:	89a3      	ldrh	r3, [r4, #12]
 8005748:	0759      	lsls	r1, r3, #29
 800574a:	d505      	bpl.n	8005758 <__sflush_r+0x44>
 800574c:	6863      	ldr	r3, [r4, #4]
 800574e:	1ad2      	subs	r2, r2, r3
 8005750:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005752:	b10b      	cbz	r3, 8005758 <__sflush_r+0x44>
 8005754:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005756:	1ad2      	subs	r2, r2, r3
 8005758:	2300      	movs	r3, #0
 800575a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800575c:	6a21      	ldr	r1, [r4, #32]
 800575e:	4628      	mov	r0, r5
 8005760:	47b0      	blx	r6
 8005762:	1c43      	adds	r3, r0, #1
 8005764:	89a3      	ldrh	r3, [r4, #12]
 8005766:	d106      	bne.n	8005776 <__sflush_r+0x62>
 8005768:	6829      	ldr	r1, [r5, #0]
 800576a:	291d      	cmp	r1, #29
 800576c:	d82b      	bhi.n	80057c6 <__sflush_r+0xb2>
 800576e:	4a2a      	ldr	r2, [pc, #168]	@ (8005818 <__sflush_r+0x104>)
 8005770:	40ca      	lsrs	r2, r1
 8005772:	07d6      	lsls	r6, r2, #31
 8005774:	d527      	bpl.n	80057c6 <__sflush_r+0xb2>
 8005776:	2200      	movs	r2, #0
 8005778:	6062      	str	r2, [r4, #4]
 800577a:	04d9      	lsls	r1, r3, #19
 800577c:	6922      	ldr	r2, [r4, #16]
 800577e:	6022      	str	r2, [r4, #0]
 8005780:	d504      	bpl.n	800578c <__sflush_r+0x78>
 8005782:	1c42      	adds	r2, r0, #1
 8005784:	d101      	bne.n	800578a <__sflush_r+0x76>
 8005786:	682b      	ldr	r3, [r5, #0]
 8005788:	b903      	cbnz	r3, 800578c <__sflush_r+0x78>
 800578a:	6560      	str	r0, [r4, #84]	@ 0x54
 800578c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800578e:	602f      	str	r7, [r5, #0]
 8005790:	b1b9      	cbz	r1, 80057c2 <__sflush_r+0xae>
 8005792:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005796:	4299      	cmp	r1, r3
 8005798:	d002      	beq.n	80057a0 <__sflush_r+0x8c>
 800579a:	4628      	mov	r0, r5
 800579c:	f7ff fbf4 	bl	8004f88 <_free_r>
 80057a0:	2300      	movs	r3, #0
 80057a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80057a4:	e00d      	b.n	80057c2 <__sflush_r+0xae>
 80057a6:	2301      	movs	r3, #1
 80057a8:	4628      	mov	r0, r5
 80057aa:	47b0      	blx	r6
 80057ac:	4602      	mov	r2, r0
 80057ae:	1c50      	adds	r0, r2, #1
 80057b0:	d1c9      	bne.n	8005746 <__sflush_r+0x32>
 80057b2:	682b      	ldr	r3, [r5, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d0c6      	beq.n	8005746 <__sflush_r+0x32>
 80057b8:	2b1d      	cmp	r3, #29
 80057ba:	d001      	beq.n	80057c0 <__sflush_r+0xac>
 80057bc:	2b16      	cmp	r3, #22
 80057be:	d11e      	bne.n	80057fe <__sflush_r+0xea>
 80057c0:	602f      	str	r7, [r5, #0]
 80057c2:	2000      	movs	r0, #0
 80057c4:	e022      	b.n	800580c <__sflush_r+0xf8>
 80057c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057ca:	b21b      	sxth	r3, r3
 80057cc:	e01b      	b.n	8005806 <__sflush_r+0xf2>
 80057ce:	690f      	ldr	r7, [r1, #16]
 80057d0:	2f00      	cmp	r7, #0
 80057d2:	d0f6      	beq.n	80057c2 <__sflush_r+0xae>
 80057d4:	0793      	lsls	r3, r2, #30
 80057d6:	680e      	ldr	r6, [r1, #0]
 80057d8:	bf08      	it	eq
 80057da:	694b      	ldreq	r3, [r1, #20]
 80057dc:	600f      	str	r7, [r1, #0]
 80057de:	bf18      	it	ne
 80057e0:	2300      	movne	r3, #0
 80057e2:	eba6 0807 	sub.w	r8, r6, r7
 80057e6:	608b      	str	r3, [r1, #8]
 80057e8:	f1b8 0f00 	cmp.w	r8, #0
 80057ec:	dde9      	ble.n	80057c2 <__sflush_r+0xae>
 80057ee:	6a21      	ldr	r1, [r4, #32]
 80057f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80057f2:	4643      	mov	r3, r8
 80057f4:	463a      	mov	r2, r7
 80057f6:	4628      	mov	r0, r5
 80057f8:	47b0      	blx	r6
 80057fa:	2800      	cmp	r0, #0
 80057fc:	dc08      	bgt.n	8005810 <__sflush_r+0xfc>
 80057fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005802:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005806:	81a3      	strh	r3, [r4, #12]
 8005808:	f04f 30ff 	mov.w	r0, #4294967295
 800580c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005810:	4407      	add	r7, r0
 8005812:	eba8 0800 	sub.w	r8, r8, r0
 8005816:	e7e7      	b.n	80057e8 <__sflush_r+0xd4>
 8005818:	20400001 	.word	0x20400001

0800581c <_fflush_r>:
 800581c:	b538      	push	{r3, r4, r5, lr}
 800581e:	690b      	ldr	r3, [r1, #16]
 8005820:	4605      	mov	r5, r0
 8005822:	460c      	mov	r4, r1
 8005824:	b913      	cbnz	r3, 800582c <_fflush_r+0x10>
 8005826:	2500      	movs	r5, #0
 8005828:	4628      	mov	r0, r5
 800582a:	bd38      	pop	{r3, r4, r5, pc}
 800582c:	b118      	cbz	r0, 8005836 <_fflush_r+0x1a>
 800582e:	6a03      	ldr	r3, [r0, #32]
 8005830:	b90b      	cbnz	r3, 8005836 <_fflush_r+0x1a>
 8005832:	f7ff f9a1 	bl	8004b78 <__sinit>
 8005836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d0f3      	beq.n	8005826 <_fflush_r+0xa>
 800583e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005840:	07d0      	lsls	r0, r2, #31
 8005842:	d404      	bmi.n	800584e <_fflush_r+0x32>
 8005844:	0599      	lsls	r1, r3, #22
 8005846:	d402      	bmi.n	800584e <_fflush_r+0x32>
 8005848:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800584a:	f7ff fb8c 	bl	8004f66 <__retarget_lock_acquire_recursive>
 800584e:	4628      	mov	r0, r5
 8005850:	4621      	mov	r1, r4
 8005852:	f7ff ff5f 	bl	8005714 <__sflush_r>
 8005856:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005858:	07da      	lsls	r2, r3, #31
 800585a:	4605      	mov	r5, r0
 800585c:	d4e4      	bmi.n	8005828 <_fflush_r+0xc>
 800585e:	89a3      	ldrh	r3, [r4, #12]
 8005860:	059b      	lsls	r3, r3, #22
 8005862:	d4e1      	bmi.n	8005828 <_fflush_r+0xc>
 8005864:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005866:	f7ff fb7f 	bl	8004f68 <__retarget_lock_release_recursive>
 800586a:	e7dd      	b.n	8005828 <_fflush_r+0xc>

0800586c <__swhatbuf_r>:
 800586c:	b570      	push	{r4, r5, r6, lr}
 800586e:	460c      	mov	r4, r1
 8005870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005874:	2900      	cmp	r1, #0
 8005876:	b096      	sub	sp, #88	@ 0x58
 8005878:	4615      	mov	r5, r2
 800587a:	461e      	mov	r6, r3
 800587c:	da0d      	bge.n	800589a <__swhatbuf_r+0x2e>
 800587e:	89a3      	ldrh	r3, [r4, #12]
 8005880:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005884:	f04f 0100 	mov.w	r1, #0
 8005888:	bf14      	ite	ne
 800588a:	2340      	movne	r3, #64	@ 0x40
 800588c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005890:	2000      	movs	r0, #0
 8005892:	6031      	str	r1, [r6, #0]
 8005894:	602b      	str	r3, [r5, #0]
 8005896:	b016      	add	sp, #88	@ 0x58
 8005898:	bd70      	pop	{r4, r5, r6, pc}
 800589a:	466a      	mov	r2, sp
 800589c:	f000 f848 	bl	8005930 <_fstat_r>
 80058a0:	2800      	cmp	r0, #0
 80058a2:	dbec      	blt.n	800587e <__swhatbuf_r+0x12>
 80058a4:	9901      	ldr	r1, [sp, #4]
 80058a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80058aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80058ae:	4259      	negs	r1, r3
 80058b0:	4159      	adcs	r1, r3
 80058b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80058b6:	e7eb      	b.n	8005890 <__swhatbuf_r+0x24>

080058b8 <__smakebuf_r>:
 80058b8:	898b      	ldrh	r3, [r1, #12]
 80058ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058bc:	079d      	lsls	r5, r3, #30
 80058be:	4606      	mov	r6, r0
 80058c0:	460c      	mov	r4, r1
 80058c2:	d507      	bpl.n	80058d4 <__smakebuf_r+0x1c>
 80058c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80058c8:	6023      	str	r3, [r4, #0]
 80058ca:	6123      	str	r3, [r4, #16]
 80058cc:	2301      	movs	r3, #1
 80058ce:	6163      	str	r3, [r4, #20]
 80058d0:	b003      	add	sp, #12
 80058d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058d4:	ab01      	add	r3, sp, #4
 80058d6:	466a      	mov	r2, sp
 80058d8:	f7ff ffc8 	bl	800586c <__swhatbuf_r>
 80058dc:	9f00      	ldr	r7, [sp, #0]
 80058de:	4605      	mov	r5, r0
 80058e0:	4639      	mov	r1, r7
 80058e2:	4630      	mov	r0, r6
 80058e4:	f7ff fbbc 	bl	8005060 <_malloc_r>
 80058e8:	b948      	cbnz	r0, 80058fe <__smakebuf_r+0x46>
 80058ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058ee:	059a      	lsls	r2, r3, #22
 80058f0:	d4ee      	bmi.n	80058d0 <__smakebuf_r+0x18>
 80058f2:	f023 0303 	bic.w	r3, r3, #3
 80058f6:	f043 0302 	orr.w	r3, r3, #2
 80058fa:	81a3      	strh	r3, [r4, #12]
 80058fc:	e7e2      	b.n	80058c4 <__smakebuf_r+0xc>
 80058fe:	89a3      	ldrh	r3, [r4, #12]
 8005900:	6020      	str	r0, [r4, #0]
 8005902:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005906:	81a3      	strh	r3, [r4, #12]
 8005908:	9b01      	ldr	r3, [sp, #4]
 800590a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800590e:	b15b      	cbz	r3, 8005928 <__smakebuf_r+0x70>
 8005910:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005914:	4630      	mov	r0, r6
 8005916:	f000 f81d 	bl	8005954 <_isatty_r>
 800591a:	b128      	cbz	r0, 8005928 <__smakebuf_r+0x70>
 800591c:	89a3      	ldrh	r3, [r4, #12]
 800591e:	f023 0303 	bic.w	r3, r3, #3
 8005922:	f043 0301 	orr.w	r3, r3, #1
 8005926:	81a3      	strh	r3, [r4, #12]
 8005928:	89a3      	ldrh	r3, [r4, #12]
 800592a:	431d      	orrs	r5, r3
 800592c:	81a5      	strh	r5, [r4, #12]
 800592e:	e7cf      	b.n	80058d0 <__smakebuf_r+0x18>

08005930 <_fstat_r>:
 8005930:	b538      	push	{r3, r4, r5, lr}
 8005932:	4d07      	ldr	r5, [pc, #28]	@ (8005950 <_fstat_r+0x20>)
 8005934:	2300      	movs	r3, #0
 8005936:	4604      	mov	r4, r0
 8005938:	4608      	mov	r0, r1
 800593a:	4611      	mov	r1, r2
 800593c:	602b      	str	r3, [r5, #0]
 800593e:	f000 f942 	bl	8005bc6 <_fstat>
 8005942:	1c43      	adds	r3, r0, #1
 8005944:	d102      	bne.n	800594c <_fstat_r+0x1c>
 8005946:	682b      	ldr	r3, [r5, #0]
 8005948:	b103      	cbz	r3, 800594c <_fstat_r+0x1c>
 800594a:	6023      	str	r3, [r4, #0]
 800594c:	bd38      	pop	{r3, r4, r5, pc}
 800594e:	bf00      	nop
 8005950:	20000580 	.word	0x20000580

08005954 <_isatty_r>:
 8005954:	b538      	push	{r3, r4, r5, lr}
 8005956:	4d06      	ldr	r5, [pc, #24]	@ (8005970 <_isatty_r+0x1c>)
 8005958:	2300      	movs	r3, #0
 800595a:	4604      	mov	r4, r0
 800595c:	4608      	mov	r0, r1
 800595e:	602b      	str	r3, [r5, #0]
 8005960:	f000 fa96 	bl	8005e90 <_isatty>
 8005964:	1c43      	adds	r3, r0, #1
 8005966:	d102      	bne.n	800596e <_isatty_r+0x1a>
 8005968:	682b      	ldr	r3, [r5, #0]
 800596a:	b103      	cbz	r3, 800596e <_isatty_r+0x1a>
 800596c:	6023      	str	r3, [r4, #0]
 800596e:	bd38      	pop	{r3, r4, r5, pc}
 8005970:	20000580 	.word	0x20000580

08005974 <_sbrk_r>:
 8005974:	b538      	push	{r3, r4, r5, lr}
 8005976:	4d06      	ldr	r5, [pc, #24]	@ (8005990 <_sbrk_r+0x1c>)
 8005978:	2300      	movs	r3, #0
 800597a:	4604      	mov	r4, r0
 800597c:	4608      	mov	r0, r1
 800597e:	602b      	str	r3, [r5, #0]
 8005980:	f7fb fd86 	bl	8001490 <_sbrk>
 8005984:	1c43      	adds	r3, r0, #1
 8005986:	d102      	bne.n	800598e <_sbrk_r+0x1a>
 8005988:	682b      	ldr	r3, [r5, #0]
 800598a:	b103      	cbz	r3, 800598e <_sbrk_r+0x1a>
 800598c:	6023      	str	r3, [r4, #0]
 800598e:	bd38      	pop	{r3, r4, r5, pc}
 8005990:	20000580 	.word	0x20000580

08005994 <findslot>:
 8005994:	4b0a      	ldr	r3, [pc, #40]	@ (80059c0 <findslot+0x2c>)
 8005996:	b510      	push	{r4, lr}
 8005998:	4604      	mov	r4, r0
 800599a:	6818      	ldr	r0, [r3, #0]
 800599c:	b118      	cbz	r0, 80059a6 <findslot+0x12>
 800599e:	6a03      	ldr	r3, [r0, #32]
 80059a0:	b90b      	cbnz	r3, 80059a6 <findslot+0x12>
 80059a2:	f7ff f8e9 	bl	8004b78 <__sinit>
 80059a6:	2c13      	cmp	r4, #19
 80059a8:	d807      	bhi.n	80059ba <findslot+0x26>
 80059aa:	4806      	ldr	r0, [pc, #24]	@ (80059c4 <findslot+0x30>)
 80059ac:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80059b0:	3201      	adds	r2, #1
 80059b2:	d002      	beq.n	80059ba <findslot+0x26>
 80059b4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80059b8:	bd10      	pop	{r4, pc}
 80059ba:	2000      	movs	r0, #0
 80059bc:	e7fc      	b.n	80059b8 <findslot+0x24>
 80059be:	bf00      	nop
 80059c0:	20000040 	.word	0x20000040
 80059c4:	2000059c 	.word	0x2000059c

080059c8 <error>:
 80059c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ca:	4604      	mov	r4, r0
 80059cc:	f7ff faa0 	bl	8004f10 <__errno>
 80059d0:	2613      	movs	r6, #19
 80059d2:	4605      	mov	r5, r0
 80059d4:	2700      	movs	r7, #0
 80059d6:	4630      	mov	r0, r6
 80059d8:	4639      	mov	r1, r7
 80059da:	beab      	bkpt	0x00ab
 80059dc:	4606      	mov	r6, r0
 80059de:	602e      	str	r6, [r5, #0]
 80059e0:	4620      	mov	r0, r4
 80059e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080059e4 <checkerror>:
 80059e4:	1c43      	adds	r3, r0, #1
 80059e6:	d101      	bne.n	80059ec <checkerror+0x8>
 80059e8:	f7ff bfee 	b.w	80059c8 <error>
 80059ec:	4770      	bx	lr

080059ee <_swiread>:
 80059ee:	b530      	push	{r4, r5, lr}
 80059f0:	b085      	sub	sp, #20
 80059f2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80059f6:	9203      	str	r2, [sp, #12]
 80059f8:	2406      	movs	r4, #6
 80059fa:	ad01      	add	r5, sp, #4
 80059fc:	4620      	mov	r0, r4
 80059fe:	4629      	mov	r1, r5
 8005a00:	beab      	bkpt	0x00ab
 8005a02:	4604      	mov	r4, r0
 8005a04:	4620      	mov	r0, r4
 8005a06:	f7ff ffed 	bl	80059e4 <checkerror>
 8005a0a:	b005      	add	sp, #20
 8005a0c:	bd30      	pop	{r4, r5, pc}

08005a0e <_read>:
 8005a0e:	b570      	push	{r4, r5, r6, lr}
 8005a10:	460e      	mov	r6, r1
 8005a12:	4614      	mov	r4, r2
 8005a14:	f7ff ffbe 	bl	8005994 <findslot>
 8005a18:	4605      	mov	r5, r0
 8005a1a:	b930      	cbnz	r0, 8005a2a <_read+0x1c>
 8005a1c:	f7ff fa78 	bl	8004f10 <__errno>
 8005a20:	2309      	movs	r3, #9
 8005a22:	6003      	str	r3, [r0, #0]
 8005a24:	f04f 30ff 	mov.w	r0, #4294967295
 8005a28:	bd70      	pop	{r4, r5, r6, pc}
 8005a2a:	6800      	ldr	r0, [r0, #0]
 8005a2c:	4622      	mov	r2, r4
 8005a2e:	4631      	mov	r1, r6
 8005a30:	f7ff ffdd 	bl	80059ee <_swiread>
 8005a34:	1c43      	adds	r3, r0, #1
 8005a36:	d0f5      	beq.n	8005a24 <_read+0x16>
 8005a38:	686b      	ldr	r3, [r5, #4]
 8005a3a:	1a20      	subs	r0, r4, r0
 8005a3c:	4403      	add	r3, r0
 8005a3e:	606b      	str	r3, [r5, #4]
 8005a40:	e7f2      	b.n	8005a28 <_read+0x1a>

08005a42 <_swilseek>:
 8005a42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a44:	460c      	mov	r4, r1
 8005a46:	4616      	mov	r6, r2
 8005a48:	f7ff ffa4 	bl	8005994 <findslot>
 8005a4c:	4605      	mov	r5, r0
 8005a4e:	b940      	cbnz	r0, 8005a62 <_swilseek+0x20>
 8005a50:	f7ff fa5e 	bl	8004f10 <__errno>
 8005a54:	2309      	movs	r3, #9
 8005a56:	6003      	str	r3, [r0, #0]
 8005a58:	f04f 34ff 	mov.w	r4, #4294967295
 8005a5c:	4620      	mov	r0, r4
 8005a5e:	b003      	add	sp, #12
 8005a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a62:	2e02      	cmp	r6, #2
 8005a64:	d903      	bls.n	8005a6e <_swilseek+0x2c>
 8005a66:	f7ff fa53 	bl	8004f10 <__errno>
 8005a6a:	2316      	movs	r3, #22
 8005a6c:	e7f3      	b.n	8005a56 <_swilseek+0x14>
 8005a6e:	2e01      	cmp	r6, #1
 8005a70:	d112      	bne.n	8005a98 <_swilseek+0x56>
 8005a72:	6843      	ldr	r3, [r0, #4]
 8005a74:	18e4      	adds	r4, r4, r3
 8005a76:	d4f6      	bmi.n	8005a66 <_swilseek+0x24>
 8005a78:	682b      	ldr	r3, [r5, #0]
 8005a7a:	260a      	movs	r6, #10
 8005a7c:	e9cd 3400 	strd	r3, r4, [sp]
 8005a80:	466f      	mov	r7, sp
 8005a82:	4630      	mov	r0, r6
 8005a84:	4639      	mov	r1, r7
 8005a86:	beab      	bkpt	0x00ab
 8005a88:	4606      	mov	r6, r0
 8005a8a:	4630      	mov	r0, r6
 8005a8c:	f7ff ffaa 	bl	80059e4 <checkerror>
 8005a90:	2800      	cmp	r0, #0
 8005a92:	dbe1      	blt.n	8005a58 <_swilseek+0x16>
 8005a94:	606c      	str	r4, [r5, #4]
 8005a96:	e7e1      	b.n	8005a5c <_swilseek+0x1a>
 8005a98:	2e02      	cmp	r6, #2
 8005a9a:	6803      	ldr	r3, [r0, #0]
 8005a9c:	d1ec      	bne.n	8005a78 <_swilseek+0x36>
 8005a9e:	9300      	str	r3, [sp, #0]
 8005aa0:	260c      	movs	r6, #12
 8005aa2:	466f      	mov	r7, sp
 8005aa4:	4630      	mov	r0, r6
 8005aa6:	4639      	mov	r1, r7
 8005aa8:	beab      	bkpt	0x00ab
 8005aaa:	4606      	mov	r6, r0
 8005aac:	4630      	mov	r0, r6
 8005aae:	f7ff ff99 	bl	80059e4 <checkerror>
 8005ab2:	1c43      	adds	r3, r0, #1
 8005ab4:	d0d0      	beq.n	8005a58 <_swilseek+0x16>
 8005ab6:	4404      	add	r4, r0
 8005ab8:	e7de      	b.n	8005a78 <_swilseek+0x36>

08005aba <_lseek>:
 8005aba:	f7ff bfc2 	b.w	8005a42 <_swilseek>

08005abe <_swiwrite>:
 8005abe:	b530      	push	{r4, r5, lr}
 8005ac0:	b085      	sub	sp, #20
 8005ac2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8005ac6:	9203      	str	r2, [sp, #12]
 8005ac8:	2405      	movs	r4, #5
 8005aca:	ad01      	add	r5, sp, #4
 8005acc:	4620      	mov	r0, r4
 8005ace:	4629      	mov	r1, r5
 8005ad0:	beab      	bkpt	0x00ab
 8005ad2:	4604      	mov	r4, r0
 8005ad4:	4620      	mov	r0, r4
 8005ad6:	f7ff ff85 	bl	80059e4 <checkerror>
 8005ada:	b005      	add	sp, #20
 8005adc:	bd30      	pop	{r4, r5, pc}

08005ade <_write>:
 8005ade:	b570      	push	{r4, r5, r6, lr}
 8005ae0:	460e      	mov	r6, r1
 8005ae2:	4615      	mov	r5, r2
 8005ae4:	f7ff ff56 	bl	8005994 <findslot>
 8005ae8:	4604      	mov	r4, r0
 8005aea:	b930      	cbnz	r0, 8005afa <_write+0x1c>
 8005aec:	f7ff fa10 	bl	8004f10 <__errno>
 8005af0:	2309      	movs	r3, #9
 8005af2:	6003      	str	r3, [r0, #0]
 8005af4:	f04f 30ff 	mov.w	r0, #4294967295
 8005af8:	bd70      	pop	{r4, r5, r6, pc}
 8005afa:	6800      	ldr	r0, [r0, #0]
 8005afc:	462a      	mov	r2, r5
 8005afe:	4631      	mov	r1, r6
 8005b00:	f7ff ffdd 	bl	8005abe <_swiwrite>
 8005b04:	1e03      	subs	r3, r0, #0
 8005b06:	dbf5      	blt.n	8005af4 <_write+0x16>
 8005b08:	6862      	ldr	r2, [r4, #4]
 8005b0a:	1ae8      	subs	r0, r5, r3
 8005b0c:	4402      	add	r2, r0
 8005b0e:	42ab      	cmp	r3, r5
 8005b10:	6062      	str	r2, [r4, #4]
 8005b12:	d1f1      	bne.n	8005af8 <_write+0x1a>
 8005b14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005b18:	2000      	movs	r0, #0
 8005b1a:	f7ff bf55 	b.w	80059c8 <error>

08005b1e <_swiclose>:
 8005b1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b20:	2402      	movs	r4, #2
 8005b22:	9001      	str	r0, [sp, #4]
 8005b24:	ad01      	add	r5, sp, #4
 8005b26:	4620      	mov	r0, r4
 8005b28:	4629      	mov	r1, r5
 8005b2a:	beab      	bkpt	0x00ab
 8005b2c:	4604      	mov	r4, r0
 8005b2e:	4620      	mov	r0, r4
 8005b30:	f7ff ff58 	bl	80059e4 <checkerror>
 8005b34:	b003      	add	sp, #12
 8005b36:	bd30      	pop	{r4, r5, pc}

08005b38 <_close>:
 8005b38:	b538      	push	{r3, r4, r5, lr}
 8005b3a:	4605      	mov	r5, r0
 8005b3c:	f7ff ff2a 	bl	8005994 <findslot>
 8005b40:	4604      	mov	r4, r0
 8005b42:	b930      	cbnz	r0, 8005b52 <_close+0x1a>
 8005b44:	f7ff f9e4 	bl	8004f10 <__errno>
 8005b48:	2309      	movs	r3, #9
 8005b4a:	6003      	str	r3, [r0, #0]
 8005b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b50:	bd38      	pop	{r3, r4, r5, pc}
 8005b52:	3d01      	subs	r5, #1
 8005b54:	2d01      	cmp	r5, #1
 8005b56:	d809      	bhi.n	8005b6c <_close+0x34>
 8005b58:	4b09      	ldr	r3, [pc, #36]	@ (8005b80 <_close+0x48>)
 8005b5a:	689a      	ldr	r2, [r3, #8]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d104      	bne.n	8005b6c <_close+0x34>
 8005b62:	f04f 33ff 	mov.w	r3, #4294967295
 8005b66:	6003      	str	r3, [r0, #0]
 8005b68:	2000      	movs	r0, #0
 8005b6a:	e7f1      	b.n	8005b50 <_close+0x18>
 8005b6c:	6820      	ldr	r0, [r4, #0]
 8005b6e:	f7ff ffd6 	bl	8005b1e <_swiclose>
 8005b72:	2800      	cmp	r0, #0
 8005b74:	d1ec      	bne.n	8005b50 <_close+0x18>
 8005b76:	f04f 33ff 	mov.w	r3, #4294967295
 8005b7a:	6023      	str	r3, [r4, #0]
 8005b7c:	e7e8      	b.n	8005b50 <_close+0x18>
 8005b7e:	bf00      	nop
 8005b80:	2000059c 	.word	0x2000059c

08005b84 <_swistat>:
 8005b84:	b570      	push	{r4, r5, r6, lr}
 8005b86:	460c      	mov	r4, r1
 8005b88:	f7ff ff04 	bl	8005994 <findslot>
 8005b8c:	4605      	mov	r5, r0
 8005b8e:	b930      	cbnz	r0, 8005b9e <_swistat+0x1a>
 8005b90:	f7ff f9be 	bl	8004f10 <__errno>
 8005b94:	2309      	movs	r3, #9
 8005b96:	6003      	str	r3, [r0, #0]
 8005b98:	f04f 30ff 	mov.w	r0, #4294967295
 8005b9c:	bd70      	pop	{r4, r5, r6, pc}
 8005b9e:	6863      	ldr	r3, [r4, #4]
 8005ba0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005ba4:	6063      	str	r3, [r4, #4]
 8005ba6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005baa:	64a3      	str	r3, [r4, #72]	@ 0x48
 8005bac:	260c      	movs	r6, #12
 8005bae:	4630      	mov	r0, r6
 8005bb0:	4629      	mov	r1, r5
 8005bb2:	beab      	bkpt	0x00ab
 8005bb4:	4605      	mov	r5, r0
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	f7ff ff14 	bl	80059e4 <checkerror>
 8005bbc:	1c43      	adds	r3, r0, #1
 8005bbe:	d0eb      	beq.n	8005b98 <_swistat+0x14>
 8005bc0:	6120      	str	r0, [r4, #16]
 8005bc2:	2000      	movs	r0, #0
 8005bc4:	e7ea      	b.n	8005b9c <_swistat+0x18>

08005bc6 <_fstat>:
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	b510      	push	{r4, lr}
 8005bca:	2100      	movs	r1, #0
 8005bcc:	4604      	mov	r4, r0
 8005bce:	2258      	movs	r2, #88	@ 0x58
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7ff f94f 	bl	8004e74 <memset>
 8005bd6:	4601      	mov	r1, r0
 8005bd8:	4620      	mov	r0, r4
 8005bda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bde:	f7ff bfd1 	b.w	8005b84 <_swistat>

08005be2 <_stat>:
 8005be2:	b538      	push	{r3, r4, r5, lr}
 8005be4:	460d      	mov	r5, r1
 8005be6:	4604      	mov	r4, r0
 8005be8:	2258      	movs	r2, #88	@ 0x58
 8005bea:	2100      	movs	r1, #0
 8005bec:	4628      	mov	r0, r5
 8005bee:	f7ff f941 	bl	8004e74 <memset>
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	2100      	movs	r1, #0
 8005bf6:	f000 f811 	bl	8005c1c <_swiopen>
 8005bfa:	1c43      	adds	r3, r0, #1
 8005bfc:	4604      	mov	r4, r0
 8005bfe:	d00b      	beq.n	8005c18 <_stat+0x36>
 8005c00:	686b      	ldr	r3, [r5, #4]
 8005c02:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005c06:	606b      	str	r3, [r5, #4]
 8005c08:	4629      	mov	r1, r5
 8005c0a:	f7ff ffbb 	bl	8005b84 <_swistat>
 8005c0e:	4605      	mov	r5, r0
 8005c10:	4620      	mov	r0, r4
 8005c12:	f7ff ff91 	bl	8005b38 <_close>
 8005c16:	462c      	mov	r4, r5
 8005c18:	4620      	mov	r0, r4
 8005c1a:	bd38      	pop	{r3, r4, r5, pc}

08005c1c <_swiopen>:
 8005c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c20:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 8005ccc <_swiopen+0xb0>
 8005c24:	b096      	sub	sp, #88	@ 0x58
 8005c26:	4607      	mov	r7, r0
 8005c28:	460e      	mov	r6, r1
 8005c2a:	2400      	movs	r4, #0
 8005c2c:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 8005c30:	3301      	adds	r3, #1
 8005c32:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8005c36:	d032      	beq.n	8005c9e <_swiopen+0x82>
 8005c38:	3401      	adds	r4, #1
 8005c3a:	2c14      	cmp	r4, #20
 8005c3c:	d1f6      	bne.n	8005c2c <_swiopen+0x10>
 8005c3e:	f7ff f967 	bl	8004f10 <__errno>
 8005c42:	2318      	movs	r3, #24
 8005c44:	e03a      	b.n	8005cbc <_swiopen+0xa0>
 8005c46:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8005c4a:	f240 6301 	movw	r3, #1537	@ 0x601
 8005c4e:	07b2      	lsls	r2, r6, #30
 8005c50:	bf48      	it	mi
 8005c52:	f045 0502 	orrmi.w	r5, r5, #2
 8005c56:	421e      	tst	r6, r3
 8005c58:	bf18      	it	ne
 8005c5a:	f045 0504 	orrne.w	r5, r5, #4
 8005c5e:	0733      	lsls	r3, r6, #28
 8005c60:	bf48      	it	mi
 8005c62:	f025 0504 	bicmi.w	r5, r5, #4
 8005c66:	4638      	mov	r0, r7
 8005c68:	bf48      	it	mi
 8005c6a:	f045 0508 	orrmi.w	r5, r5, #8
 8005c6e:	9700      	str	r7, [sp, #0]
 8005c70:	f7fa fafe 	bl	8000270 <strlen>
 8005c74:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8005c78:	2501      	movs	r5, #1
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	4651      	mov	r1, sl
 8005c7e:	beab      	bkpt	0x00ab
 8005c80:	4605      	mov	r5, r0
 8005c82:	2d00      	cmp	r5, #0
 8005c84:	db06      	blt.n	8005c94 <_swiopen+0x78>
 8005c86:	44c8      	add	r8, r9
 8005c88:	2300      	movs	r3, #0
 8005c8a:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 8005c8e:	f8c8 3004 	str.w	r3, [r8, #4]
 8005c92:	e016      	b.n	8005cc2 <_swiopen+0xa6>
 8005c94:	4628      	mov	r0, r5
 8005c96:	f7ff fe97 	bl	80059c8 <error>
 8005c9a:	4604      	mov	r4, r0
 8005c9c:	e011      	b.n	8005cc2 <_swiopen+0xa6>
 8005c9e:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8005ca2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005ca6:	46ea      	mov	sl, sp
 8005ca8:	d1cd      	bne.n	8005c46 <_swiopen+0x2a>
 8005caa:	4651      	mov	r1, sl
 8005cac:	4638      	mov	r0, r7
 8005cae:	f7ff ff98 	bl	8005be2 <_stat>
 8005cb2:	3001      	adds	r0, #1
 8005cb4:	d0c7      	beq.n	8005c46 <_swiopen+0x2a>
 8005cb6:	f7ff f92b 	bl	8004f10 <__errno>
 8005cba:	2311      	movs	r3, #17
 8005cbc:	6003      	str	r3, [r0, #0]
 8005cbe:	f04f 34ff 	mov.w	r4, #4294967295
 8005cc2:	4620      	mov	r0, r4
 8005cc4:	b016      	add	sp, #88	@ 0x58
 8005cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cca:	bf00      	nop
 8005ccc:	2000059c 	.word	0x2000059c

08005cd0 <_get_semihosting_exts>:
 8005cd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005cd4:	4606      	mov	r6, r0
 8005cd6:	460f      	mov	r7, r1
 8005cd8:	4829      	ldr	r0, [pc, #164]	@ (8005d80 <_get_semihosting_exts+0xb0>)
 8005cda:	2100      	movs	r1, #0
 8005cdc:	4615      	mov	r5, r2
 8005cde:	f7ff ff9d 	bl	8005c1c <_swiopen>
 8005ce2:	462a      	mov	r2, r5
 8005ce4:	4604      	mov	r4, r0
 8005ce6:	2100      	movs	r1, #0
 8005ce8:	4630      	mov	r0, r6
 8005cea:	f7ff f8c3 	bl	8004e74 <memset>
 8005cee:	1c63      	adds	r3, r4, #1
 8005cf0:	d014      	beq.n	8005d1c <_get_semihosting_exts+0x4c>
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	f7ff fe4e 	bl	8005994 <findslot>
 8005cf8:	f04f 080c 	mov.w	r8, #12
 8005cfc:	4681      	mov	r9, r0
 8005cfe:	4640      	mov	r0, r8
 8005d00:	4649      	mov	r1, r9
 8005d02:	beab      	bkpt	0x00ab
 8005d04:	4680      	mov	r8, r0
 8005d06:	4640      	mov	r0, r8
 8005d08:	f7ff fe6c 	bl	80059e4 <checkerror>
 8005d0c:	2803      	cmp	r0, #3
 8005d0e:	dd02      	ble.n	8005d16 <_get_semihosting_exts+0x46>
 8005d10:	1ec3      	subs	r3, r0, #3
 8005d12:	42ab      	cmp	r3, r5
 8005d14:	dc07      	bgt.n	8005d26 <_get_semihosting_exts+0x56>
 8005d16:	4620      	mov	r0, r4
 8005d18:	f7ff ff0e 	bl	8005b38 <_close>
 8005d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d20:	b003      	add	sp, #12
 8005d22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d26:	2204      	movs	r2, #4
 8005d28:	eb0d 0102 	add.w	r1, sp, r2
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	f7ff fe6e 	bl	8005a0e <_read>
 8005d32:	2803      	cmp	r0, #3
 8005d34:	ddef      	ble.n	8005d16 <_get_semihosting_exts+0x46>
 8005d36:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005d3a:	2b53      	cmp	r3, #83	@ 0x53
 8005d3c:	d1eb      	bne.n	8005d16 <_get_semihosting_exts+0x46>
 8005d3e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005d42:	2b48      	cmp	r3, #72	@ 0x48
 8005d44:	d1e7      	bne.n	8005d16 <_get_semihosting_exts+0x46>
 8005d46:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005d4a:	2b46      	cmp	r3, #70	@ 0x46
 8005d4c:	d1e3      	bne.n	8005d16 <_get_semihosting_exts+0x46>
 8005d4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005d52:	2b42      	cmp	r3, #66	@ 0x42
 8005d54:	d1df      	bne.n	8005d16 <_get_semihosting_exts+0x46>
 8005d56:	2201      	movs	r2, #1
 8005d58:	4639      	mov	r1, r7
 8005d5a:	4620      	mov	r0, r4
 8005d5c:	f7ff fe71 	bl	8005a42 <_swilseek>
 8005d60:	2800      	cmp	r0, #0
 8005d62:	dbd8      	blt.n	8005d16 <_get_semihosting_exts+0x46>
 8005d64:	462a      	mov	r2, r5
 8005d66:	4631      	mov	r1, r6
 8005d68:	4620      	mov	r0, r4
 8005d6a:	f7ff fe50 	bl	8005a0e <_read>
 8005d6e:	4605      	mov	r5, r0
 8005d70:	4620      	mov	r0, r4
 8005d72:	f7ff fee1 	bl	8005b38 <_close>
 8005d76:	4628      	mov	r0, r5
 8005d78:	f7ff fe34 	bl	80059e4 <checkerror>
 8005d7c:	e7d0      	b.n	8005d20 <_get_semihosting_exts+0x50>
 8005d7e:	bf00      	nop
 8005d80:	08006223 	.word	0x08006223

08005d84 <initialise_semihosting_exts>:
 8005d84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d86:	4d0a      	ldr	r5, [pc, #40]	@ (8005db0 <initialise_semihosting_exts+0x2c>)
 8005d88:	4c0a      	ldr	r4, [pc, #40]	@ (8005db4 <initialise_semihosting_exts+0x30>)
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	a801      	add	r0, sp, #4
 8005d90:	6029      	str	r1, [r5, #0]
 8005d92:	6022      	str	r2, [r4, #0]
 8005d94:	f7ff ff9c 	bl	8005cd0 <_get_semihosting_exts>
 8005d98:	2800      	cmp	r0, #0
 8005d9a:	dd07      	ble.n	8005dac <initialise_semihosting_exts+0x28>
 8005d9c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005da0:	f003 0201 	and.w	r2, r3, #1
 8005da4:	f003 0302 	and.w	r3, r3, #2
 8005da8:	602a      	str	r2, [r5, #0]
 8005daa:	6023      	str	r3, [r4, #0]
 8005dac:	b003      	add	sp, #12
 8005dae:	bd30      	pop	{r4, r5, pc}
 8005db0:	20000094 	.word	0x20000094
 8005db4:	20000090 	.word	0x20000090

08005db8 <_has_ext_stdout_stderr>:
 8005db8:	b510      	push	{r4, lr}
 8005dba:	4c04      	ldr	r4, [pc, #16]	@ (8005dcc <_has_ext_stdout_stderr+0x14>)
 8005dbc:	6823      	ldr	r3, [r4, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	da01      	bge.n	8005dc6 <_has_ext_stdout_stderr+0xe>
 8005dc2:	f7ff ffdf 	bl	8005d84 <initialise_semihosting_exts>
 8005dc6:	6820      	ldr	r0, [r4, #0]
 8005dc8:	bd10      	pop	{r4, pc}
 8005dca:	bf00      	nop
 8005dcc:	20000090 	.word	0x20000090

08005dd0 <initialise_monitor_handles>:
 8005dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd4:	b085      	sub	sp, #20
 8005dd6:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8005e88 <initialise_monitor_handles+0xb8>
 8005dda:	f8cd 9004 	str.w	r9, [sp, #4]
 8005dde:	2303      	movs	r3, #3
 8005de0:	2400      	movs	r4, #0
 8005de2:	9303      	str	r3, [sp, #12]
 8005de4:	af01      	add	r7, sp, #4
 8005de6:	9402      	str	r4, [sp, #8]
 8005de8:	2501      	movs	r5, #1
 8005dea:	4628      	mov	r0, r5
 8005dec:	4639      	mov	r1, r7
 8005dee:	beab      	bkpt	0x00ab
 8005df0:	4605      	mov	r5, r0
 8005df2:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8005e8c <initialise_monitor_handles+0xbc>
 8005df6:	4623      	mov	r3, r4
 8005df8:	4c20      	ldr	r4, [pc, #128]	@ (8005e7c <initialise_monitor_handles+0xac>)
 8005dfa:	f8c8 5000 	str.w	r5, [r8]
 8005dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8005e02:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8005e06:	3301      	adds	r3, #1
 8005e08:	2b14      	cmp	r3, #20
 8005e0a:	d1fa      	bne.n	8005e02 <initialise_monitor_handles+0x32>
 8005e0c:	f7ff ffd4 	bl	8005db8 <_has_ext_stdout_stderr>
 8005e10:	4d1b      	ldr	r5, [pc, #108]	@ (8005e80 <initialise_monitor_handles+0xb0>)
 8005e12:	b1d0      	cbz	r0, 8005e4a <initialise_monitor_handles+0x7a>
 8005e14:	f04f 0a03 	mov.w	sl, #3
 8005e18:	2304      	movs	r3, #4
 8005e1a:	f8cd 9004 	str.w	r9, [sp, #4]
 8005e1e:	2601      	movs	r6, #1
 8005e20:	f8cd a00c 	str.w	sl, [sp, #12]
 8005e24:	9302      	str	r3, [sp, #8]
 8005e26:	4630      	mov	r0, r6
 8005e28:	4639      	mov	r1, r7
 8005e2a:	beab      	bkpt	0x00ab
 8005e2c:	4683      	mov	fp, r0
 8005e2e:	4b15      	ldr	r3, [pc, #84]	@ (8005e84 <initialise_monitor_handles+0xb4>)
 8005e30:	f8cd 9004 	str.w	r9, [sp, #4]
 8005e34:	f8c3 b000 	str.w	fp, [r3]
 8005e38:	2308      	movs	r3, #8
 8005e3a:	f8cd a00c 	str.w	sl, [sp, #12]
 8005e3e:	9302      	str	r3, [sp, #8]
 8005e40:	4630      	mov	r0, r6
 8005e42:	4639      	mov	r1, r7
 8005e44:	beab      	bkpt	0x00ab
 8005e46:	4606      	mov	r6, r0
 8005e48:	602e      	str	r6, [r5, #0]
 8005e4a:	682b      	ldr	r3, [r5, #0]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	bf02      	ittt	eq
 8005e50:	4b0c      	ldreq	r3, [pc, #48]	@ (8005e84 <initialise_monitor_handles+0xb4>)
 8005e52:	681b      	ldreq	r3, [r3, #0]
 8005e54:	602b      	streq	r3, [r5, #0]
 8005e56:	2600      	movs	r6, #0
 8005e58:	f8d8 3000 	ldr.w	r3, [r8]
 8005e5c:	6023      	str	r3, [r4, #0]
 8005e5e:	6066      	str	r6, [r4, #4]
 8005e60:	f7ff ffaa 	bl	8005db8 <_has_ext_stdout_stderr>
 8005e64:	b130      	cbz	r0, 8005e74 <initialise_monitor_handles+0xa4>
 8005e66:	4b07      	ldr	r3, [pc, #28]	@ (8005e84 <initialise_monitor_handles+0xb4>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8005e6e:	682b      	ldr	r3, [r5, #0]
 8005e70:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8005e74:	b005      	add	sp, #20
 8005e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e7a:	bf00      	nop
 8005e7c:	2000059c 	.word	0x2000059c
 8005e80:	20000590 	.word	0x20000590
 8005e84:	20000594 	.word	0x20000594
 8005e88:	08006239 	.word	0x08006239
 8005e8c:	20000598 	.word	0x20000598

08005e90 <_isatty>:
 8005e90:	b570      	push	{r4, r5, r6, lr}
 8005e92:	f7ff fd7f 	bl	8005994 <findslot>
 8005e96:	2409      	movs	r4, #9
 8005e98:	4605      	mov	r5, r0
 8005e9a:	b920      	cbnz	r0, 8005ea6 <_isatty+0x16>
 8005e9c:	f7ff f838 	bl	8004f10 <__errno>
 8005ea0:	6004      	str	r4, [r0, #0]
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	bd70      	pop	{r4, r5, r6, pc}
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	4629      	mov	r1, r5
 8005eaa:	beab      	bkpt	0x00ab
 8005eac:	4604      	mov	r4, r0
 8005eae:	2c01      	cmp	r4, #1
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	d0f7      	beq.n	8005ea4 <_isatty+0x14>
 8005eb4:	f7ff f82c 	bl	8004f10 <__errno>
 8005eb8:	2513      	movs	r5, #19
 8005eba:	4604      	mov	r4, r0
 8005ebc:	2600      	movs	r6, #0
 8005ebe:	4628      	mov	r0, r5
 8005ec0:	4631      	mov	r1, r6
 8005ec2:	beab      	bkpt	0x00ab
 8005ec4:	4605      	mov	r5, r0
 8005ec6:	6025      	str	r5, [r4, #0]
 8005ec8:	e7eb      	b.n	8005ea2 <_isatty+0x12>
	...

08005ecc <_init>:
 8005ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ece:	bf00      	nop
 8005ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ed2:	bc08      	pop	{r3}
 8005ed4:	469e      	mov	lr, r3
 8005ed6:	4770      	bx	lr

08005ed8 <_fini>:
 8005ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eda:	bf00      	nop
 8005edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ede:	bc08      	pop	{r3}
 8005ee0:	469e      	mov	lr, r3
 8005ee2:	4770      	bx	lr
