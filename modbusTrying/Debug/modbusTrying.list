
modbusTrying.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004af0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08004c78  08004c78  00005c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004eb0  08004eb0  00006034  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004eb0  08004eb0  00006034  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004eb0  08004eb0  00006034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004eb0  08004eb0  00005eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004eb4  08004eb4  00005eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000034  20000000  08004eb8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006034  2**0
                  CONTENTS
 10 .bss          000003bc  20000034  20000034  00006034  2**2
                  ALLOC
 11 ._user_heap_stack 00000c00  200003f0  200003f0  00006034  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c5e4  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002420  00000000  00000000  00012648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000930  00000000  00000000  00014a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006e9  00000000  00000000  00015398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001abc4  00000000  00000000  00015a81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d021  00000000  00000000  00030645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009af83  00000000  00000000  0003d666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d85e9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000022b0  00000000  00000000  000d862c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  000da8dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000034 	.word	0x20000034
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004c60 	.word	0x08004c60

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000038 	.word	0x20000038
 80001c4:	08004c60 	.word	0x08004c60

080001c8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80001cc:	f3bf 8f4f 	dsb	sy
}
 80001d0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80001d2:	4b06      	ldr	r3, [pc, #24]	@ (80001ec <__NVIC_SystemReset+0x24>)
 80001d4:	68db      	ldr	r3, [r3, #12]
 80001d6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80001da:	4904      	ldr	r1, [pc, #16]	@ (80001ec <__NVIC_SystemReset+0x24>)
 80001dc:	4b04      	ldr	r3, [pc, #16]	@ (80001f0 <__NVIC_SystemReset+0x28>)
 80001de:	4313      	orrs	r3, r2
 80001e0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80001e2:	f3bf 8f4f 	dsb	sy
}
 80001e6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80001e8:	bf00      	nop
 80001ea:	e7fd      	b.n	80001e8 <__NVIC_SystemReset+0x20>
 80001ec:	e000ed00 	.word	0xe000ed00
 80001f0:	05fa0004 	.word	0x05fa0004

080001f4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f8:	f001 fa28 	bl	800164c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001fc:	f000 f856 	bl	80002ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000200:	f000 f926 	bl	8000450 <MX_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); // Debug: Init step 1 - GPIO
 8000204:	2201      	movs	r2, #1
 8000206:	2101      	movs	r1, #1
 8000208:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800020c:	f001 ff4a 	bl	80020a4 <HAL_GPIO_WritePin>

  MX_DMA_Init();
 8000210:	f000 f8f8 	bl	8000404 <MX_DMA_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); // Debug: Init step 2 - DMA
 8000214:	2201      	movs	r2, #1
 8000216:	2102      	movs	r1, #2
 8000218:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800021c:	f001 ff42 	bl	80020a4 <HAL_GPIO_WritePin>

  SoftwareWatchdog_Init(); // Initialize software watchdog for system protection
 8000220:	f000 f8ca 	bl	80003b8 <SoftwareWatchdog_Init>

  MX_USART1_UART_Init();
 8000224:	f000 f87e 	bl	8000324 <MX_USART1_UART_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET); // Debug: Init step 3 - UART
 8000228:	2201      	movs	r2, #1
 800022a:	2104      	movs	r1, #4
 800022c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000230:	f001 ff38 	bl	80020a4 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN 2 */

  // printf("Starting Modbus RTU Slave...\n"); // Removed to prevent timing delays

  // Initialize UART callbacks
  UART_Callbacks_Init();
 8000234:	f001 f974 	bl	8001520 <UART_Callbacks_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET); // Debug: Init step 4 - UART callbacks
 8000238:	2201      	movs	r2, #1
 800023a:	2108      	movs	r1, #8
 800023c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000240:	f001 ff30 	bl	80020a4 <HAL_GPIO_WritePin>

  // Initialize Modbus RTU slave
  Modbus_Init();
 8000244:	f000 ff76 	bl	8001134 <Modbus_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); // Debug: Init step 5 - Modbus
 8000248:	2201      	movs	r2, #1
 800024a:	2110      	movs	r1, #16
 800024c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000250:	f001 ff28 	bl	80020a4 <HAL_GPIO_WritePin>
  // printf("Array check: [0]=0x%04X [1]=0x%04X [12]=0x%04X [13]=0x%04X\n",
  //        Modbus_Device_GetRegister(0), Modbus_Device_GetRegister(1),
  //        Modbus_Device_GetRegister(12), Modbus_Device_GetRegister(13));

  // Initialize test functions
  Modbus_Test_Init();
 8000254:	f001 f82a 	bl	80012ac <Modbus_Test_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // Debug: Init step 6 - Test functions
 8000258:	2201      	movs	r2, #1
 800025a:	2120      	movs	r1, #32
 800025c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000260:	f001 ff20 	bl	80020a4 <HAL_GPIO_WritePin>

  // Initialize Modbus recovery system
  ModbusRecovery_Init();
 8000264:	f000 f924 	bl	80004b0 <ModbusRecovery_Init>
  while (1)
  {
    /* USER CODE BEGIN 3 */

    // Refresh software watchdog to prevent system reset
    SoftwareWatchdog_Refresh();
 8000268:	f000 f8b2 	bl	80003d0 <SoftwareWatchdog_Refresh>

    // Optimized heartbeat LED - much less frequent to minimize interference
    static uint32_t heartbeat_counter = 0;
    heartbeat_counter++;
 800026c:	4b0e      	ldr	r3, [pc, #56]	@ (80002a8 <main+0xb4>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	3301      	adds	r3, #1
 8000272:	4a0d      	ldr	r2, [pc, #52]	@ (80002a8 <main+0xb4>)
 8000274:	6013      	str	r3, [r2, #0]
    if (heartbeat_counter >= 200) // 200 * 50ms = 10 seconds (very slow heartbeat)
 8000276:	4b0c      	ldr	r3, [pc, #48]	@ (80002a8 <main+0xb4>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	2bc7      	cmp	r3, #199	@ 0xc7
 800027c:	d907      	bls.n	800028e <main+0x9a>
    {
      heartbeat_counter = 0;
 800027e:	4b0a      	ldr	r3, [pc, #40]	@ (80002a8 <main+0xb4>)
 8000280:	2200      	movs	r2, #0
 8000282:	601a      	str	r2, [r3, #0]
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000284:	2140      	movs	r1, #64	@ 0x40
 8000286:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800028a:	f001 ff23 	bl	80020d4 <HAL_GPIO_TogglePin>
    }

    // Process Modbus first (highest priority)
    Modbus_Process();
 800028e:	f000 ffdb 	bl	8001248 <Modbus_Process>

    // Check and handle Modbus recovery if needed
    ModbusRecovery_Update();
 8000292:	f000 f937 	bl	8000504 <ModbusRecovery_Update>

    // Update sensor values periodically (lower priority)
    Modbus_Device_UpdateSensors();
 8000296:	f000 ff45 	bl	8001124 <Modbus_Device_UpdateSensors>

    // Update test values (lowest priority)
    Modbus_Test_Update(); // Test: Modify register values every 3 seconds to verify callbacks are working
 800029a:	f001 f80f 	bl	80012bc <Modbus_Test_Update>
      }
    }
    */

    // Very short delay - prioritize Modbus communication responsiveness
    HAL_Delay(10); // Reduced to 10ms for maximum Modbus responsiveness
 800029e:	200a      	movs	r0, #10
 80002a0:	f001 fa3a 	bl	8001718 <HAL_Delay>
  {
 80002a4:	e7e0      	b.n	8000268 <main+0x74>
 80002a6:	bf00      	nop
 80002a8:	20000174 	.word	0x20000174

080002ac <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b090      	sub	sp, #64	@ 0x40
 80002b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b2:	f107 0318 	add.w	r3, r7, #24
 80002b6:	2228      	movs	r2, #40	@ 0x28
 80002b8:	2100      	movs	r1, #0
 80002ba:	4618      	mov	r0, r3
 80002bc:	f004 fc96 	bl	8004bec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]
 80002cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ce:	2302      	movs	r3, #2
 80002d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d2:	2301      	movs	r3, #1
 80002d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d6:	2310      	movs	r3, #16
 80002d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002da:	2300      	movs	r3, #0
 80002dc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002de:	f107 0318 	add.w	r3, r7, #24
 80002e2:	4618      	mov	r0, r3
 80002e4:	f001 ff10 	bl	8002108 <HAL_RCC_OscConfig>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002ee:	f000 f9a3 	bl	8000638 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80002f2:	230f      	movs	r3, #15
 80002f4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002f6:	2300      	movs	r3, #0
 80002f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fa:	2300      	movs	r3, #0
 80002fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fe:	2300      	movs	r3, #0
 8000300:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000302:	2300      	movs	r3, #0
 8000304:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	2100      	movs	r1, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f002 ff0a 	bl	8003124 <HAL_RCC_ClockConfig>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000316:	f000 f98f 	bl	8000638 <Error_Handler>
  }
}
 800031a:	bf00      	nop
 800031c:	3740      	adds	r7, #64	@ 0x40
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
	...

08000324 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b086      	sub	sp, #24
 8000328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800032a:	463b      	mov	r3, r7
 800032c:	2200      	movs	r2, #0
 800032e:	601a      	str	r2, [r3, #0]
 8000330:	605a      	str	r2, [r3, #4]
 8000332:	609a      	str	r2, [r3, #8]
 8000334:	60da      	str	r2, [r3, #12]
 8000336:	611a      	str	r2, [r3, #16]
 8000338:	615a      	str	r2, [r3, #20]

  // Configure USART1 clock source
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800033a:	2301      	movs	r3, #1
 800033c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800033e:	2300      	movs	r3, #0
 8000340:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000342:	463b      	mov	r3, r7
 8000344:	4618      	mov	r0, r3
 8000346:	f003 f8ff 	bl	8003548 <HAL_RCCEx_PeriphCLKConfig>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <MX_USART1_UART_Init+0x30>
  {
    Error_Handler();
 8000350:	f000 f972 	bl	8000638 <Error_Handler>
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000354:	4b16      	ldr	r3, [pc, #88]	@ (80003b0 <MX_USART1_UART_Init+0x8c>)
 8000356:	4a17      	ldr	r2, [pc, #92]	@ (80003b4 <MX_USART1_UART_Init+0x90>)
 8000358:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800035a:	4b15      	ldr	r3, [pc, #84]	@ (80003b0 <MX_USART1_UART_Init+0x8c>)
 800035c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000360:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000362:	4b13      	ldr	r3, [pc, #76]	@ (80003b0 <MX_USART1_UART_Init+0x8c>)
 8000364:	2200      	movs	r2, #0
 8000366:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000368:	4b11      	ldr	r3, [pc, #68]	@ (80003b0 <MX_USART1_UART_Init+0x8c>)
 800036a:	2200      	movs	r2, #0
 800036c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800036e:	4b10      	ldr	r3, [pc, #64]	@ (80003b0 <MX_USART1_UART_Init+0x8c>)
 8000370:	2200      	movs	r2, #0
 8000372:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000374:	4b0e      	ldr	r3, [pc, #56]	@ (80003b0 <MX_USART1_UART_Init+0x8c>)
 8000376:	220c      	movs	r2, #12
 8000378:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800037a:	4b0d      	ldr	r3, [pc, #52]	@ (80003b0 <MX_USART1_UART_Init+0x8c>)
 800037c:	2200      	movs	r2, #0
 800037e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000380:	4b0b      	ldr	r3, [pc, #44]	@ (80003b0 <MX_USART1_UART_Init+0x8c>)
 8000382:	2200      	movs	r2, #0
 8000384:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000386:	4b0a      	ldr	r3, [pc, #40]	@ (80003b0 <MX_USART1_UART_Init+0x8c>)
 8000388:	2200      	movs	r2, #0
 800038a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800038c:	4b08      	ldr	r3, [pc, #32]	@ (80003b0 <MX_USART1_UART_Init+0x8c>)
 800038e:	2200      	movs	r2, #0
 8000390:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000392:	2300      	movs	r3, #0
 8000394:	2200      	movs	r2, #0
 8000396:	2100      	movs	r1, #0
 8000398:	4805      	ldr	r0, [pc, #20]	@ (80003b0 <MX_USART1_UART_Init+0x8c>)
 800039a:	f004 fb62 	bl	8004a62 <HAL_RS485Ex_Init>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <MX_USART1_UART_Init+0x84>
  {
    Error_Handler();
 80003a4:	f000 f948 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 80003a8:	bf00      	nop
 80003aa:	3718      	adds	r7, #24
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	20000050 	.word	0x20000050
 80003b4:	40013800 	.word	0x40013800

080003b8 <SoftwareWatchdog_Init>:
 * @brief Software Watchdog Initialization Function
 * @param None
 * @retval None
 */
void SoftwareWatchdog_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  software_watchdog_counter = HAL_GetTick();
 80003bc:	f001 f9a0 	bl	8001700 <HAL_GetTick>
 80003c0:	4603      	mov	r3, r0
 80003c2:	4a02      	ldr	r2, [pc, #8]	@ (80003cc <SoftwareWatchdog_Init+0x14>)
 80003c4:	6013      	str	r3, [r2, #0]
}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	20000160 	.word	0x20000160

080003d0 <SoftwareWatchdog_Refresh>:
 * @brief Refresh Software Watchdog
 * @param None
 * @retval None
 */
void SoftwareWatchdog_Refresh(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
  uint32_t current_tick = HAL_GetTick();
 80003d6:	f001 f993 	bl	8001700 <HAL_GetTick>
 80003da:	6078      	str	r0, [r7, #4]

  // Check if timeout occurred (accounting for tick overflow)
  if ((current_tick - software_watchdog_counter) > SOFTWARE_WATCHDOG_TIMEOUT_MS)
 80003dc:	4b08      	ldr	r3, [pc, #32]	@ (8000400 <SoftwareWatchdog_Refresh+0x30>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	687a      	ldr	r2, [r7, #4]
 80003e2:	1ad3      	subs	r3, r2, r3
 80003e4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d901      	bls.n	80003f0 <SoftwareWatchdog_Refresh+0x20>
  {
    // System appears to be stuck - perform reset
    NVIC_SystemReset();
 80003ec:	f7ff feec 	bl	80001c8 <__NVIC_SystemReset>
  }

  // Refresh the watchdog timer
  software_watchdog_counter = current_tick;
 80003f0:	4a03      	ldr	r2, [pc, #12]	@ (8000400 <SoftwareWatchdog_Refresh+0x30>)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	6013      	str	r3, [r2, #0]
}
 80003f6:	bf00      	nop
 80003f8:	3708      	adds	r7, #8
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	20000160 	.word	0x20000160

08000404 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800040a:	4b10      	ldr	r3, [pc, #64]	@ (800044c <MX_DMA_Init+0x48>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	4a0f      	ldr	r2, [pc, #60]	@ (800044c <MX_DMA_Init+0x48>)
 8000410:	f043 0301 	orr.w	r3, r3, #1
 8000414:	6153      	str	r3, [r2, #20]
 8000416:	4b0d      	ldr	r3, [pc, #52]	@ (800044c <MX_DMA_Init+0x48>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	f003 0301 	and.w	r3, r3, #1
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000422:	2200      	movs	r2, #0
 8000424:	2100      	movs	r1, #0
 8000426:	200e      	movs	r0, #14
 8000428:	f001 fa75 	bl	8001916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800042c:	200e      	movs	r0, #14
 800042e:	f001 fa8e 	bl	800194e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000432:	2200      	movs	r2, #0
 8000434:	2100      	movs	r1, #0
 8000436:	200f      	movs	r0, #15
 8000438:	f001 fa6d 	bl	8001916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800043c:	200f      	movs	r0, #15
 800043e:	f001 fa86 	bl	800194e <HAL_NVIC_EnableIRQ>
}
 8000442:	bf00      	nop
 8000444:	3708      	adds	r7, #8
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40021000 	.word	0x40021000

08000450 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b086      	sub	sp, #24
 8000454:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	2200      	movs	r2, #0
 800045a:	601a      	str	r2, [r3, #0]
 800045c:	605a      	str	r2, [r3, #4]
 800045e:	609a      	str	r2, [r3, #8]
 8000460:	60da      	str	r2, [r3, #12]
 8000462:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000464:	4b11      	ldr	r3, [pc, #68]	@ (80004ac <MX_GPIO_Init+0x5c>)
 8000466:	695b      	ldr	r3, [r3, #20]
 8000468:	4a10      	ldr	r2, [pc, #64]	@ (80004ac <MX_GPIO_Init+0x5c>)
 800046a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800046e:	6153      	str	r3, [r2, #20]
 8000470:	4b0e      	ldr	r3, [pc, #56]	@ (80004ac <MX_GPIO_Init+0x5c>)
 8000472:	695b      	ldr	r3, [r3, #20]
 8000474:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000478:	603b      	str	r3, [r7, #0]
 800047a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_RESET);
 800047c:	2200      	movs	r2, #0
 800047e:	21ff      	movs	r1, #255	@ 0xff
 8000480:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000484:	f001 fe0e 	bl	80020a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 8000488:	23ff      	movs	r3, #255	@ 0xff
 800048a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800048c:	2301      	movs	r3, #1
 800048e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000490:	2300      	movs	r3, #0
 8000492:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000494:	2300      	movs	r3, #0
 8000496:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	4619      	mov	r1, r3
 800049c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004a0:	f001 fc8e 	bl	8001dc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80004a4:	bf00      	nop
 80004a6:	3718      	adds	r7, #24
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	40021000 	.word	0x40021000

080004b0 <ModbusRecovery_Init>:
 * @brief Initialize Modbus Recovery System
 * @param None
 * @retval None
 */
void ModbusRecovery_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
  uint32_t current_tick = HAL_GetTick();
 80004b6:	f001 f923 	bl	8001700 <HAL_GetTick>
 80004ba:	6078      	str	r0, [r7, #4]
  modbus_last_activity = current_tick;
 80004bc:	4a07      	ldr	r2, [pc, #28]	@ (80004dc <ModbusRecovery_Init+0x2c>)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	6013      	str	r3, [r2, #0]
  modbus_recovery_counter = current_tick;
 80004c2:	4a07      	ldr	r2, [pc, #28]	@ (80004e0 <ModbusRecovery_Init+0x30>)
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	6013      	str	r3, [r2, #0]
  modbus_error_count = 0;
 80004c8:	4b06      	ldr	r3, [pc, #24]	@ (80004e4 <ModbusRecovery_Init+0x34>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
  modbus_last_error_reset = current_tick;
 80004ce:	4a06      	ldr	r2, [pc, #24]	@ (80004e8 <ModbusRecovery_Init+0x38>)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	6013      	str	r3, [r2, #0]
}
 80004d4:	bf00      	nop
 80004d6:	3708      	adds	r7, #8
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	20000164 	.word	0x20000164
 80004e0:	20000168 	.word	0x20000168
 80004e4:	2000016c 	.word	0x2000016c
 80004e8:	20000170 	.word	0x20000170

080004ec <ModbusRecovery_MarkActivity>:
 * @brief Mark Modbus Activity (call from UART callback)
 * @param None
 * @retval None
 */
void ModbusRecovery_MarkActivity(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  modbus_last_activity = HAL_GetTick();
 80004f0:	f001 f906 	bl	8001700 <HAL_GetTick>
 80004f4:	4603      	mov	r3, r0
 80004f6:	4a02      	ldr	r2, [pc, #8]	@ (8000500 <ModbusRecovery_MarkActivity+0x14>)
 80004f8:	6013      	str	r3, [r2, #0]
}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	20000164 	.word	0x20000164

08000504 <ModbusRecovery_Update>:
 * @brief Update Modbus Recovery System
 * @param None
 * @retval None
 */
void ModbusRecovery_Update(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
  uint32_t current_tick = HAL_GetTick();
 800050a:	f001 f8f9 	bl	8001700 <HAL_GetTick>
 800050e:	6078      	str	r0, [r7, #4]

  // Reset error count periodically
  if ((current_tick - modbus_last_error_reset) > MODBUS_ERROR_WINDOW_MS)
 8000510:	4b1c      	ldr	r3, [pc, #112]	@ (8000584 <ModbusRecovery_Update+0x80>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	687a      	ldr	r2, [r7, #4]
 8000516:	1ad3      	subs	r3, r2, r3
 8000518:	f241 3288 	movw	r2, #5000	@ 0x1388
 800051c:	4293      	cmp	r3, r2
 800051e:	d905      	bls.n	800052c <ModbusRecovery_Update+0x28>
  {
    modbus_error_count = 0;
 8000520:	4b19      	ldr	r3, [pc, #100]	@ (8000588 <ModbusRecovery_Update+0x84>)
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
    modbus_last_error_reset = current_tick;
 8000526:	4a17      	ldr	r2, [pc, #92]	@ (8000584 <ModbusRecovery_Update+0x80>)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	6013      	str	r3, [r2, #0]
  }

  // Check for error threshold (immediate recovery if too many errors)
  if (modbus_error_count >= MODBUS_ERROR_THRESHOLD)
 800052c:	4b16      	ldr	r3, [pc, #88]	@ (8000588 <ModbusRecovery_Update+0x84>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2b02      	cmp	r3, #2
 8000532:	d908      	bls.n	8000546 <ModbusRecovery_Update+0x42>
  {
    ModbusRecovery_ResetState();
 8000534:	f000 f82e 	bl	8000594 <ModbusRecovery_ResetState>
    modbus_error_count = 0;
 8000538:	4b13      	ldr	r3, [pc, #76]	@ (8000588 <ModbusRecovery_Update+0x84>)
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
    modbus_last_error_reset = current_tick;
 800053e:	4a11      	ldr	r2, [pc, #68]	@ (8000584 <ModbusRecovery_Update+0x80>)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	6013      	str	r3, [r2, #0]
  else if ((current_tick - modbus_last_activity) > MODBUS_RECOVERY_TIMEOUT_MS)
  {
    ModbusRecovery_ResetState();
    modbus_last_activity = current_tick; // Reset timer to prevent immediate re-trigger
  }
}
 8000544:	e01a      	b.n	800057c <ModbusRecovery_Update+0x78>
  else if ((current_tick - modbus_recovery_counter) > MODBUS_RECOVERY_INTERVAL_MS)
 8000546:	4b11      	ldr	r3, [pc, #68]	@ (800058c <ModbusRecovery_Update+0x88>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	1ad3      	subs	r3, r2, r3
 800054e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000552:	4293      	cmp	r3, r2
 8000554:	d905      	bls.n	8000562 <ModbusRecovery_Update+0x5e>
    ModbusRecovery_ResetState();
 8000556:	f000 f81d 	bl	8000594 <ModbusRecovery_ResetState>
    modbus_recovery_counter = current_tick;
 800055a:	4a0c      	ldr	r2, [pc, #48]	@ (800058c <ModbusRecovery_Update+0x88>)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	6013      	str	r3, [r2, #0]
}
 8000560:	e00c      	b.n	800057c <ModbusRecovery_Update+0x78>
  else if ((current_tick - modbus_last_activity) > MODBUS_RECOVERY_TIMEOUT_MS)
 8000562:	4b0b      	ldr	r3, [pc, #44]	@ (8000590 <ModbusRecovery_Update+0x8c>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	687a      	ldr	r2, [r7, #4]
 8000568:	1ad3      	subs	r3, r2, r3
 800056a:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 800056e:	4293      	cmp	r3, r2
 8000570:	d904      	bls.n	800057c <ModbusRecovery_Update+0x78>
    ModbusRecovery_ResetState();
 8000572:	f000 f80f 	bl	8000594 <ModbusRecovery_ResetState>
    modbus_last_activity = current_tick; // Reset timer to prevent immediate re-trigger
 8000576:	4a06      	ldr	r2, [pc, #24]	@ (8000590 <ModbusRecovery_Update+0x8c>)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	6013      	str	r3, [r2, #0]
}
 800057c:	bf00      	nop
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20000170 	.word	0x20000170
 8000588:	2000016c 	.word	0x2000016c
 800058c:	20000168 	.word	0x20000168
 8000590:	20000164 	.word	0x20000164

08000594 <ModbusRecovery_ResetState>:
 * @brief Reset Modbus State Machine
 * @param None
 * @retval None
 */
void ModbusRecovery_ResetState(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
  // Get Modbus context
  mbus_t modbus_ctx = Modbus_GetContext();
 800059a:	f000 fe7b 	bl	8001294 <Modbus_GetContext>
 800059e:	4603      	mov	r3, r0
 80005a0:	71fb      	strb	r3, [r7, #7]

  if (modbus_ctx >= 0)
 80005a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	db30      	blt.n	800060c <ModbusRecovery_ResetState+0x78>
  {
    // Flush any pending data/state
    mbus_flush(modbus_ctx);
 80005aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 f8d0 	bl	8000754 <mbus_flush>

    // Restart DMA reception to clear any stuck states
    HAL_UART_DMAStop(&huart1);
 80005b4:	4817      	ldr	r0, [pc, #92]	@ (8000614 <ModbusRecovery_ResetState+0x80>)
 80005b6:	f003 f974 	bl	80038a2 <HAL_UART_DMAStop>
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, modbus_rx_buffer, sizeof(modbus_rx_buffer));
 80005ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005be:	4916      	ldr	r1, [pc, #88]	@ (8000618 <ModbusRecovery_ResetState+0x84>)
 80005c0:	4814      	ldr	r0, [pc, #80]	@ (8000614 <ModbusRecovery_ResetState+0x80>)
 80005c2:	f004 fabf 	bl	8004b44 <HAL_UARTEx_ReceiveToIdle_DMA>

    // Clear any UART error flags
    __HAL_UART_CLEAR_OREFLAG(&huart1);
 80005c6:	4b13      	ldr	r3, [pc, #76]	@ (8000614 <ModbusRecovery_ResetState+0x80>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2208      	movs	r2, #8
 80005cc:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_NEFLAG(&huart1);
 80005ce:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <ModbusRecovery_ResetState+0x80>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2204      	movs	r2, #4
 80005d4:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_FEFLAG(&huart1);
 80005d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000614 <ModbusRecovery_ResetState+0x80>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	2202      	movs	r2, #2
 80005dc:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_PEFLAG(&huart1);
 80005de:	4b0d      	ldr	r3, [pc, #52]	@ (8000614 <ModbusRecovery_ResetState+0x80>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2201      	movs	r2, #1
 80005e4:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 80005e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000614 <ModbusRecovery_ResetState+0x80>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2210      	movs	r2, #16
 80005ec:	621a      	str	r2, [r3, #32]

    // Brief pulse on PA7 for debugging (if available)
    // This helps identify when recovery occurs during testing
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80005ee:	2201      	movs	r2, #1
 80005f0:	2180      	movs	r1, #128	@ 0x80
 80005f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005f6:	f001 fd55 	bl	80020a4 <HAL_GPIO_WritePin>
    HAL_Delay(1); // Very brief pulse
 80005fa:	2001      	movs	r0, #1
 80005fc:	f001 f88c 	bl	8001718 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	2180      	movs	r1, #128	@ 0x80
 8000604:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000608:	f001 fd4c 	bl	80020a4 <HAL_GPIO_WritePin>
  }
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000050 	.word	0x20000050
 8000618:	200001e8 	.word	0x200001e8

0800061c <ModbusRecovery_MarkError>:
 * @brief Mark Modbus Error (call when timeout/error detected)
 * @param None
 * @retval None
 */
void ModbusRecovery_MarkError(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  modbus_error_count++;
 8000620:	4b04      	ldr	r3, [pc, #16]	@ (8000634 <ModbusRecovery_MarkError+0x18>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	3301      	adds	r3, #1
 8000626:	4a03      	ldr	r2, [pc, #12]	@ (8000634 <ModbusRecovery_MarkError+0x18>)
 8000628:	6013      	str	r3, [r2, #0]
}
 800062a:	bf00      	nop
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	2000016c 	.word	0x2000016c

08000638 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800063c:	b672      	cpsid	i
}
 800063e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000640:	bf00      	nop
 8000642:	e7fd      	b.n	8000640 <Error_Handler+0x8>

08000644 <mbus_crc16>:
}

*/

uint16_t mbus_crc16(const uint16_t crc16, const uint8_t byte)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	460a      	mov	r2, r1
 800064e:	80fb      	strh	r3, [r7, #6]
 8000650:	4613      	mov	r3, r2
 8000652:	717b      	strb	r3, [r7, #5]
    const int index = (crc16 & 0xFF) ^ byte;
 8000654:	88fb      	ldrh	r3, [r7, #6]
 8000656:	b2da      	uxtb	r2, r3
 8000658:	797b      	ldrb	r3, [r7, #5]
 800065a:	4053      	eors	r3, r2
 800065c:	60fb      	str	r3, [r7, #12]
    return (aucCRCLo[index] << 8) | ((crc16 >> 8) ^ aucCRCHi[index]);
 800065e:	4a0d      	ldr	r2, [pc, #52]	@ (8000694 <mbus_crc16+0x50>)
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	4413      	add	r3, r2
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	b21b      	sxth	r3, r3
 8000668:	021b      	lsls	r3, r3, #8
 800066a:	b21a      	sxth	r2, r3
 800066c:	88fb      	ldrh	r3, [r7, #6]
 800066e:	0a1b      	lsrs	r3, r3, #8
 8000670:	b29b      	uxth	r3, r3
 8000672:	4809      	ldr	r0, [pc, #36]	@ (8000698 <mbus_crc16+0x54>)
 8000674:	68f9      	ldr	r1, [r7, #12]
 8000676:	4401      	add	r1, r0
 8000678:	7809      	ldrb	r1, [r1, #0]
 800067a:	404b      	eors	r3, r1
 800067c:	b29b      	uxth	r3, r3
 800067e:	b21b      	sxth	r3, r3
 8000680:	4313      	orrs	r3, r2
 8000682:	b21b      	sxth	r3, r3
 8000684:	b29b      	uxth	r3, r3
}
 8000686:	4618      	mov	r0, r3
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	08004d78 	.word	0x08004d78
 8000698:	08004c78 	.word	0x08004c78

0800069c <mbus_tickcount>:

__attribute__((weak)) uint32_t mbus_tickcount() { return 0; }
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
 80006a0:	2300      	movs	r3, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <mbus_open>:
   * function mbus_open()
   * open new modbus context for new port
   * return: MODBUS_ERROR - if can't open context
   */
  mbus_t mbus_open(Modbus_Conf_t *pconf)
  {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    mbus_t context;
    for (context = 0; context < STMODBUS_COUNT_CONTEXT; context++)
 80006b4:	2300      	movs	r3, #0
 80006b6:	73fb      	strb	r3, [r7, #15]
 80006b8:	e011      	b.n	80006de <mbus_open+0x32>
    {
      if (g_mbusContext[context].open == 0)
 80006ba:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80006be:	4924      	ldr	r1, [pc, #144]	@ (8000750 <mbus_open+0xa4>)
 80006c0:	4613      	mov	r3, r2
 80006c2:	011b      	lsls	r3, r3, #4
 80006c4:	4413      	add	r3, r2
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	440b      	add	r3, r1
 80006ca:	3328      	adds	r3, #40	@ 0x28
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d00a      	beq.n	80006e8 <mbus_open+0x3c>
    for (context = 0; context < STMODBUS_COUNT_CONTEXT; context++)
 80006d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	3301      	adds	r3, #1
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	73fb      	strb	r3, [r7, #15]
 80006de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	dde9      	ble.n	80006ba <mbus_open+0xe>
 80006e6:	e000      	b.n	80006ea <mbus_open+0x3e>
      {
        break;
 80006e8:	bf00      	nop
      }
    }
    if (context == STMODBUS_COUNT_CONTEXT)
 80006ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d102      	bne.n	80006f8 <mbus_open+0x4c>
      return (mbus_t)MBUS_ERROR;
 80006f2:	f04f 33ff 	mov.w	r3, #4294967295
 80006f6:	e026      	b.n	8000746 <mbus_open+0x9a>
    // Clear context
    memset(&g_mbusContext[context], 0, sizeof(_stmodbus_context_t));
 80006f8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80006fc:	4613      	mov	r3, r2
 80006fe:	011b      	lsls	r3, r3, #4
 8000700:	4413      	add	r3, r2
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	4a12      	ldr	r2, [pc, #72]	@ (8000750 <mbus_open+0xa4>)
 8000706:	4413      	add	r3, r2
 8000708:	2244      	movs	r2, #68	@ 0x44
 800070a:	2100      	movs	r1, #0
 800070c:	4618      	mov	r0, r3
 800070e:	f004 fa6d 	bl	8004bec <memset>
    // Copy config to context
    memcpy((void *)&g_mbusContext[context].conf, (void *)pconf,
 8000712:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000716:	4613      	mov	r3, r2
 8000718:	011b      	lsls	r3, r3, #4
 800071a:	4413      	add	r3, r2
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	4a0c      	ldr	r2, [pc, #48]	@ (8000750 <mbus_open+0xa4>)
 8000720:	4413      	add	r3, r2
 8000722:	2228      	movs	r2, #40	@ 0x28
 8000724:	6879      	ldr	r1, [r7, #4]
 8000726:	4618      	mov	r0, r3
 8000728:	f004 fa8c 	bl	8004c44 <memcpy>
           sizeof(Modbus_Conf_t));

    g_mbusContext[context].open = 1;
 800072c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000730:	4907      	ldr	r1, [pc, #28]	@ (8000750 <mbus_open+0xa4>)
 8000732:	4613      	mov	r3, r2
 8000734:	011b      	lsls	r3, r3, #4
 8000736:	4413      	add	r3, r2
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	440b      	add	r3, r1
 800073c:	3328      	adds	r3, #40	@ 0x28
 800073e:	2201      	movs	r2, #1
 8000740:	701a      	strb	r2, [r3, #0]
    return context;
 8000742:	f997 300f 	ldrsb.w	r3, [r7, #15]
  }
 8000746:	4618      	mov	r0, r3
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000178 	.word	0x20000178

08000754 <mbus_flush>:

  mbus_status_t mbus_flush(const mbus_t context)
  {
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
    g_mbusContext[context].crc16 = 0xFFFF;
 800075e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000762:	490e      	ldr	r1, [pc, #56]	@ (800079c <mbus_flush+0x48>)
 8000764:	4613      	mov	r3, r2
 8000766:	011b      	lsls	r3, r3, #4
 8000768:	4413      	add	r3, r2
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	440b      	add	r3, r1
 800076e:	332a      	adds	r3, #42	@ 0x2a
 8000770:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000774:	801a      	strh	r2, [r3, #0]
    g_mbusContext[context].state = MBUS_STATE_IDLE;
 8000776:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800077a:	4908      	ldr	r1, [pc, #32]	@ (800079c <mbus_flush+0x48>)
 800077c:	4613      	mov	r3, r2
 800077e:	011b      	lsls	r3, r3, #4
 8000780:	4413      	add	r3, r2
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	440b      	add	r3, r1
 8000786:	3329      	adds	r3, #41	@ 0x29
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
    return MBUS_OK;
 800078c:	2300      	movs	r3, #0
  }
 800078e:	4618      	mov	r0, r3
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	20000178 	.word	0x20000178

080007a0 <mbus_response>:

  mbus_status_t mbus_response(mbus_t mb_context, Modbus_ResponseType response)
  {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	460a      	mov	r2, r1
 80007aa:	71fb      	strb	r3, [r7, #7]
 80007ac:	4613      	mov	r3, r2
 80007ae:	71bb      	strb	r3, [r7, #6]

    if (response != MBUS_RESPONSE_OK)
 80007b0:	79bb      	ldrb	r3, [r7, #6]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d008      	beq.n	80007c8 <mbus_response+0x28>
    {
      return mbus_send_error(mb_context, response);
 80007b6:	79ba      	ldrb	r2, [r7, #6]
 80007b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007bc:	4611      	mov	r1, r2
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 fb66 	bl	8000e90 <mbus_send_error>
 80007c4:	4603      	mov	r3, r0
 80007c6:	e001      	b.n	80007cc <mbus_response+0x2c>
    }
    else
    {
    }
    return MBUS_ERROR;
 80007c8:	f04f 33ff 	mov.w	r3, #4294967295
  }
 80007cc:	4618      	mov	r0, r3
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <mbus_poll_response>:
    g_userError = error;
    return 0;
  }

  inline mbus_status_t mbus_poll_response(mbus_t mb_context)
  {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08a      	sub	sp, #40	@ 0x28
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
    stmbCallBackFunc func = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
    _stmodbus_context_t *ctx = &g_mbusContext[mb_context];
 80007e2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80007e6:	4613      	mov	r3, r2
 80007e8:	011b      	lsls	r3, r3, #4
 80007ea:	4413      	add	r3, r2
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	4a9b      	ldr	r2, [pc, #620]	@ (8000a5c <mbus_poll_response+0x288>)
 80007f0:	4413      	add	r3, r2
 80007f2:	613b      	str	r3, [r7, #16]
    int read = 1, la;
 80007f4:	2301      	movs	r3, #1
 80007f6:	60bb      	str	r3, [r7, #8]
    uint16_t d;

    if (ctx->header.func == 0x04)
 80007f8:	693b      	ldr	r3, [r7, #16]
 80007fa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80007fe:	2b04      	cmp	r3, #4
 8000800:	d101      	bne.n	8000806 <mbus_poll_response+0x32>
    {
      la = 10;
 8000802:	230a      	movs	r3, #10
 8000804:	627b      	str	r3, [r7, #36]	@ 0x24
        func = ctx->func[i].func;
        break;
      }
    }
#endif
    switch (ctx->header.func)
 8000806:	693b      	ldr	r3, [r7, #16]
 8000808:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800080c:	2b0f      	cmp	r3, #15
 800080e:	d006      	beq.n	800081e <mbus_poll_response+0x4a>
 8000810:	2b0f      	cmp	r3, #15
 8000812:	dc4a      	bgt.n	80008aa <mbus_poll_response+0xd6>
 8000814:	2b01      	cmp	r3, #1
 8000816:	d002      	beq.n	800081e <mbus_poll_response+0x4a>
 8000818:	2b02      	cmp	r3, #2
 800081a:	d023      	beq.n	8000864 <mbus_poll_response+0x90>
      {
        return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_ADDRESS);
      }
      break;
    default:
      break;
 800081c:	e045      	b.n	80008aa <mbus_poll_response+0xd6>
      if ((ctx->header.num == 0) || (ctx->header.num > 0x07D0))
 800081e:	693b      	ldr	r3, [r7, #16]
 8000820:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000822:	2b00      	cmp	r3, #0
 8000824:	d004      	beq.n	8000830 <mbus_poll_response+0x5c>
 8000826:	693b      	ldr	r3, [r7, #16]
 8000828:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800082a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800082e:	d907      	bls.n	8000840 <mbus_poll_response+0x6c>
        return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_VALUE);
 8000830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000834:	2103      	movs	r1, #3
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ffb2 	bl	80007a0 <mbus_response>
 800083c:	4603      	mov	r3, r0
 800083e:	e155      	b.n	8000aec <mbus_poll_response+0x318>
      if ((ctx->header.addr + ctx->header.num) >= ctx->conf.coils)
 8000840:	693b      	ldr	r3, [r7, #16]
 8000842:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000844:	461a      	mov	r2, r3
 8000846:	693b      	ldr	r3, [r7, #16]
 8000848:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800084a:	4413      	add	r3, r2
 800084c:	693a      	ldr	r2, [r7, #16]
 800084e:	8852      	ldrh	r2, [r2, #2]
 8000850:	4293      	cmp	r3, r2
 8000852:	db2c      	blt.n	80008ae <mbus_poll_response+0xda>
        return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_ADDRESS);
 8000854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000858:	2102      	movs	r1, #2
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff ffa0 	bl	80007a0 <mbus_response>
 8000860:	4603      	mov	r3, r0
 8000862:	e143      	b.n	8000aec <mbus_poll_response+0x318>
      if ((ctx->header.num == 0) || (ctx->header.num > 0x07D0))
 8000864:	693b      	ldr	r3, [r7, #16]
 8000866:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000868:	2b00      	cmp	r3, #0
 800086a:	d004      	beq.n	8000876 <mbus_poll_response+0xa2>
 800086c:	693b      	ldr	r3, [r7, #16]
 800086e:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000870:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000874:	d907      	bls.n	8000886 <mbus_poll_response+0xb2>
        return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_VALUE);
 8000876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087a:	2103      	movs	r1, #3
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff ff8f 	bl	80007a0 <mbus_response>
 8000882:	4603      	mov	r3, r0
 8000884:	e132      	b.n	8000aec <mbus_poll_response+0x318>
      if ((ctx->header.addr + ctx->header.num) > ctx->conf.discrete)
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800088a:	461a      	mov	r2, r3
 800088c:	693b      	ldr	r3, [r7, #16]
 800088e:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000890:	4413      	add	r3, r2
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	8892      	ldrh	r2, [r2, #4]
 8000896:	4293      	cmp	r3, r2
 8000898:	dd0b      	ble.n	80008b2 <mbus_poll_response+0xde>
        return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_ADDRESS);
 800089a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089e:	2102      	movs	r1, #2
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff ff7d 	bl	80007a0 <mbus_response>
 80008a6:	4603      	mov	r3, r0
 80008a8:	e120      	b.n	8000aec <mbus_poll_response+0x318>
      break;
 80008aa:	bf00      	nop
 80008ac:	e002      	b.n	80008b4 <mbus_poll_response+0xe0>
      break;
 80008ae:	bf00      	nop
 80008b0:	e000      	b.n	80008b4 <mbus_poll_response+0xe0>
      break;
 80008b2:	bf00      	nop
    }

    if (func != 0)
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d006      	beq.n	80008c8 <mbus_poll_response+0xf4>
    {
      return func(mb_context);
 80008ba:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	4610      	mov	r0, r2
 80008c2:	4798      	blx	r3
 80008c4:	4603      	mov	r3, r0
 80008c6:	e111      	b.n	8000aec <mbus_poll_response+0x318>
    }

    la = mbus_proto_address((Modbus_ConnectFuncType)ctx->header.func, (int *)&read);
 80008c8:	693b      	ldr	r3, [r7, #16]
 80008ca:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80008ce:	f107 0208 	add.w	r2, r7, #8
 80008d2:	4611      	mov	r1, r2
 80008d4:	4618      	mov	r0, r3
 80008d6:	f000 fb6d 	bl	8000fb4 <mbus_proto_address>
 80008da:	6278      	str	r0, [r7, #36]	@ 0x24
    if (la > 0)
 80008dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008de:	2b00      	cmp	r3, #0
 80008e0:	dd05      	ble.n	80008ee <mbus_poll_response+0x11a>
    {
      la += ctx->header.addr;
 80008e2:	693b      	ldr	r3, [r7, #16]
 80008e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80008e6:	461a      	mov	r2, r3
 80008e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008ea:	4413      	add	r3, r2
 80008ec:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    if (la < 50001)
 80008ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008f0:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80008f4:	4293      	cmp	r3, r2
 80008f6:	f300 80f2 	bgt.w	8000ade <mbus_poll_response+0x30a>
    {
      ctx->conf.sendbuf[0] = ctx->header.devaddr;
 80008fa:	693b      	ldr	r3, [r7, #16]
 80008fc:	699b      	ldr	r3, [r3, #24]
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 8000904:	701a      	strb	r2, [r3, #0]
      ctx->conf.sendbuf[1] = ctx->header.func;
 8000906:	693b      	ldr	r3, [r7, #16]
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	3301      	adds	r3, #1
 800090c:	693a      	ldr	r2, [r7, #16]
 800090e:	f892 2031 	ldrb.w	r2, [r2, #49]	@ 0x31
 8000912:	701a      	strb	r2, [r3, #0]
      ctx->conf.sendbuf[2] = ctx->header.num * 2;
 8000914:	693b      	ldr	r3, [r7, #16]
 8000916:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000918:	b2da      	uxtb	r2, r3
 800091a:	693b      	ldr	r3, [r7, #16]
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	3302      	adds	r3, #2
 8000920:	0052      	lsls	r2, r2, #1
 8000922:	b2d2      	uxtb	r2, r2
 8000924:	701a      	strb	r2, [r3, #0]
      if (read && ctx->conf.read)
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d04b      	beq.n	80009c4 <mbus_poll_response+0x1f0>
 800092c:	693b      	ldr	r3, [r7, #16]
 800092e:	691b      	ldr	r3, [r3, #16]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d047      	beq.n	80009c4 <mbus_poll_response+0x1f0>
      {
        g_userError = MBUS_RESPONSE_OK;
 8000934:	4b4a      	ldr	r3, [pc, #296]	@ (8000a60 <mbus_poll_response+0x28c>)
 8000936:	2200      	movs	r2, #0
 8000938:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < ctx->header.num; i++)
 800093a:	2300      	movs	r3, #0
 800093c:	623b      	str	r3, [r7, #32]
 800093e:	e01f      	b.n	8000980 <mbus_poll_response+0x1ac>
        {

          d = ctx->conf.read(la + i);
 8000940:	693b      	ldr	r3, [r7, #16]
 8000942:	691b      	ldr	r3, [r3, #16]
 8000944:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000946:	6a3a      	ldr	r2, [r7, #32]
 8000948:	440a      	add	r2, r1
 800094a:	4610      	mov	r0, r2
 800094c:	4798      	blx	r3
 800094e:	4603      	mov	r3, r0
 8000950:	81fb      	strh	r3, [r7, #14]
          ctx->conf.sendbuf[3 + (i << 1)] = d >> 8;
 8000952:	89fb      	ldrh	r3, [r7, #14]
 8000954:	0a1b      	lsrs	r3, r3, #8
 8000956:	b299      	uxth	r1, r3
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	6a3a      	ldr	r2, [r7, #32]
 800095e:	0052      	lsls	r2, r2, #1
 8000960:	3203      	adds	r2, #3
 8000962:	4413      	add	r3, r2
 8000964:	b2ca      	uxtb	r2, r1
 8000966:	701a      	strb	r2, [r3, #0]
          ctx->conf.sendbuf[3 + (i << 1) + 1] = d & 0xFF;
 8000968:	693b      	ldr	r3, [r7, #16]
 800096a:	699a      	ldr	r2, [r3, #24]
 800096c:	6a3b      	ldr	r3, [r7, #32]
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	3304      	adds	r3, #4
 8000972:	4413      	add	r3, r2
 8000974:	89fa      	ldrh	r2, [r7, #14]
 8000976:	b2d2      	uxtb	r2, r2
 8000978:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < ctx->header.num; i++)
 800097a:	6a3b      	ldr	r3, [r7, #32]
 800097c:	3301      	adds	r3, #1
 800097e:	623b      	str	r3, [r7, #32]
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000984:	461a      	mov	r2, r3
 8000986:	6a3b      	ldr	r3, [r7, #32]
 8000988:	4293      	cmp	r3, r2
 800098a:	dbd9      	blt.n	8000940 <mbus_poll_response+0x16c>
        }
        if (g_userError == MBUS_RESPONSE_OK)
 800098c:	4b34      	ldr	r3, [pc, #208]	@ (8000a60 <mbus_poll_response+0x28c>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d10d      	bne.n	80009b0 <mbus_poll_response+0x1dc>
        {
          return mbus_send_data(mb_context, 3 + ctx->conf.sendbuf[2]);
 8000994:	693b      	ldr	r3, [r7, #16]
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	3302      	adds	r3, #2
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	3303      	adds	r3, #3
 800099e:	b29a      	uxth	r2, r3
 80009a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a4:	4611      	mov	r1, r2
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 fa9e 	bl	8000ee8 <mbus_send_data>
 80009ac:	4603      	mov	r3, r0
 80009ae:	e09d      	b.n	8000aec <mbus_poll_response+0x318>
        }
        else
        {
          return mbus_response(mb_context, g_userError);
 80009b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000a60 <mbus_poll_response+0x28c>)
 80009b2:	781a      	ldrb	r2, [r3, #0]
 80009b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b8:	4611      	mov	r1, r2
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff fef0 	bl	80007a0 <mbus_response>
 80009c0:	4603      	mov	r3, r0
 80009c2:	e093      	b.n	8000aec <mbus_poll_response+0x318>
        }
      }
      else if (ctx->conf.write)
 80009c4:	693b      	ldr	r3, [r7, #16]
 80009c6:	695b      	ldr	r3, [r3, #20]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	f000 8088 	beq.w	8000ade <mbus_poll_response+0x30a>
      {
        uint16_t *value;
        ctx->conf.sendbuf[2] = 0;
 80009ce:	693b      	ldr	r3, [r7, #16]
 80009d0:	699b      	ldr	r3, [r3, #24]
 80009d2:	3302      	adds	r3, #2
 80009d4:	2200      	movs	r2, #0
 80009d6:	701a      	strb	r2, [r3, #0]
        switch (ctx->header.func)
 80009d8:	693b      	ldr	r3, [r7, #16]
 80009da:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80009de:	2b06      	cmp	r3, #6
 80009e0:	dc02      	bgt.n	80009e8 <mbus_poll_response+0x214>
 80009e2:	2b05      	cmp	r3, #5
 80009e4:	da03      	bge.n	80009ee <mbus_poll_response+0x21a>
 80009e6:	e07a      	b.n	8000ade <mbus_poll_response+0x30a>
 80009e8:	2b10      	cmp	r3, #16
 80009ea:	d030      	beq.n	8000a4e <mbus_poll_response+0x27a>
 80009ec:	e077      	b.n	8000ade <mbus_poll_response+0x30a>
        case MBUS_FUNC_WRITE_REG:
        case MBUS_FUNC_WRITE_COIL:
          // in both these cases, we should return the same packet that we
          // received. in both cases, the packes have 6 bytes of data + 2 CRC
          // bytes = 8 bytes
          value = (uint16_t *)ctx->conf.recvbuf;
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	6a1b      	ldr	r3, [r3, #32]
 80009f2:	61fb      	str	r3, [r7, #28]
          ctx->conf.write(la, *value);
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	695b      	ldr	r3, [r3, #20]
 80009f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80009fa:	69fa      	ldr	r2, [r7, #28]
 80009fc:	8812      	ldrh	r2, [r2, #0]
 80009fe:	4611      	mov	r1, r2
 8000a00:	4798      	blx	r3
          ctx->conf.sendbuf[2] = ctx->header.addr >> 8;
 8000a02:	693b      	ldr	r3, [r7, #16]
 8000a04:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000a06:	0a1b      	lsrs	r3, r3, #8
 8000a08:	b29a      	uxth	r2, r3
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	3302      	adds	r3, #2
 8000a10:	b2d2      	uxtb	r2, r2
 8000a12:	701a      	strb	r2, [r3, #0]
          ctx->conf.sendbuf[3] = ctx->header.addr & 0xFF;
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	3303      	adds	r3, #3
 8000a1e:	b2d2      	uxtb	r2, r2
 8000a20:	701a      	strb	r2, [r3, #0]
          ctx->conf.sendbuf[4] = ctx->conf.recvbuf[1];
 8000a22:	693b      	ldr	r3, [r7, #16]
 8000a24:	6a1a      	ldr	r2, [r3, #32]
 8000a26:	693b      	ldr	r3, [r7, #16]
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	3304      	adds	r3, #4
 8000a2c:	7852      	ldrb	r2, [r2, #1]
 8000a2e:	701a      	strb	r2, [r3, #0]
          ctx->conf.sendbuf[5] = ctx->conf.recvbuf[0];
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	6a1a      	ldr	r2, [r3, #32]
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	3305      	adds	r3, #5
 8000a3a:	7812      	ldrb	r2, [r2, #0]
 8000a3c:	701a      	strb	r2, [r3, #0]
          return mbus_send_data(mb_context, 6);
 8000a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a42:	2106      	movs	r1, #6
 8000a44:	4618      	mov	r0, r3
 8000a46:	f000 fa4f 	bl	8000ee8 <mbus_send_data>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	e04e      	b.n	8000aec <mbus_poll_response+0x318>

        case MBUS_FUNC_WRITE_REGS:
          value = (uint16_t *)ctx->conf.recvbuf;
 8000a4e:	693b      	ldr	r3, [r7, #16]
 8000a50:	6a1b      	ldr	r3, [r3, #32]
 8000a52:	61fb      	str	r3, [r7, #28]
          for (int i = 0; i < ctx->header.num; i++)
 8000a54:	2300      	movs	r3, #0
 8000a56:	61bb      	str	r3, [r7, #24]
 8000a58:	e013      	b.n	8000a82 <mbus_poll_response+0x2ae>
 8000a5a:	bf00      	nop
 8000a5c:	20000178 	.word	0x20000178
 8000a60:	200001bc 	.word	0x200001bc
          {
            ctx->conf.write(la + i, *value++);
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	695a      	ldr	r2, [r3, #20]
 8000a68:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	440b      	add	r3, r1
 8000a6e:	4618      	mov	r0, r3
 8000a70:	69fb      	ldr	r3, [r7, #28]
 8000a72:	1c99      	adds	r1, r3, #2
 8000a74:	61f9      	str	r1, [r7, #28]
 8000a76:	881b      	ldrh	r3, [r3, #0]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4790      	blx	r2
          for (int i = 0; i < ctx->header.num; i++)
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	61bb      	str	r3, [r7, #24]
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000a86:	461a      	mov	r2, r3
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	dbea      	blt.n	8000a64 <mbus_poll_response+0x290>
          }
          ctx->conf.sendbuf[2] = ctx->header.addr >> 8;
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000a92:	0a1b      	lsrs	r3, r3, #8
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	693b      	ldr	r3, [r7, #16]
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	3302      	adds	r3, #2
 8000a9c:	b2d2      	uxtb	r2, r2
 8000a9e:	701a      	strb	r2, [r3, #0]
          ctx->conf.sendbuf[3] = ctx->header.addr & 0xFF;
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	3303      	adds	r3, #3
 8000aaa:	b2d2      	uxtb	r2, r2
 8000aac:	701a      	strb	r2, [r3, #0]
          ctx->conf.sendbuf[4] = ctx->header.num >> 8;
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000ab2:	0a1b      	lsrs	r3, r3, #8
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	699b      	ldr	r3, [r3, #24]
 8000aba:	3304      	adds	r3, #4
 8000abc:	b2d2      	uxtb	r2, r2
 8000abe:	701a      	strb	r2, [r3, #0]
          ctx->conf.sendbuf[5] = ctx->header.num & 0xFF;
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	3305      	adds	r3, #5
 8000aca:	b2d2      	uxtb	r2, r2
 8000acc:	701a      	strb	r2, [r3, #0]
          return mbus_send_data(mb_context, 6);
 8000ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad2:	2106      	movs	r1, #6
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 fa07 	bl	8000ee8 <mbus_send_data>
 8000ada:	4603      	mov	r3, r0
 8000adc:	e006      	b.n	8000aec <mbus_poll_response+0x318>
        } // end of switch
      }
    }
    return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_FUNCTION);
 8000ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff fe5b 	bl	80007a0 <mbus_response>
 8000aea:	4603      	mov	r3, r0
  }
 8000aec:	4618      	mov	r0, r3
 8000aee:	3728      	adds	r7, #40	@ 0x28
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <mbus_poll>:
   * function mbus_close()
   * close modbus context
   * return: none
   */
  mbus_status_t mbus_poll(mbus_t mb_context, uint8_t byte)
  {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	460a      	mov	r2, r1
 8000afe:	71fb      	strb	r3, [r7, #7]
 8000b00:	4613      	mov	r3, r2
 8000b02:	71bb      	strb	r3, [r7, #6]
    // State machine
    _stmodbus_context_t *ctx = &g_mbusContext[mb_context];
 8000b04:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000b08:	4613      	mov	r3, r2
 8000b0a:	011b      	lsls	r3, r3, #4
 8000b0c:	4413      	add	r3, r2
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	4ab1      	ldr	r2, [pc, #708]	@ (8000dd8 <mbus_poll+0x2e4>)
 8000b12:	4413      	add	r3, r2
 8000b14:	60fb      	str	r3, [r7, #12]

    if (mbus_tickcount() - ctx->timer > 4)
 8000b16:	f7ff fdc1 	bl	800069c <mbus_tickcount>
 8000b1a:	4602      	mov	r2, r0
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	2b04      	cmp	r3, #4
 8000b24:	d904      	bls.n	8000b30 <mbus_poll+0x3c>
    {
      mbus_flush(mb_context);
 8000b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff fe12 	bl	8000754 <mbus_flush>
    }
    ctx->timer = mbus_tickcount();
 8000b30:	f7ff fdb4 	bl	800069c <mbus_tickcount>
 8000b34:	4602      	mov	r2, r0
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	62da      	str	r2, [r3, #44]	@ 0x2c

    switch (ctx->state)
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8000b40:	2b0e      	cmp	r3, #14
 8000b42:	f200 8153 	bhi.w	8000dec <mbus_poll+0x2f8>
 8000b46:	a201      	add	r2, pc, #4	@ (adr r2, 8000b4c <mbus_poll+0x58>)
 8000b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b4c:	08000b89 	.word	0x08000b89
 8000b50:	08000ded 	.word	0x08000ded
 8000b54:	08000ba5 	.word	0x08000ba5
 8000b58:	08000c79 	.word	0x08000c79
 8000b5c:	08000c63 	.word	0x08000c63
 8000b60:	08000d7f 	.word	0x08000d7f
 8000b64:	08000d69 	.word	0x08000d69
 8000b68:	08000cd1 	.word	0x08000cd1
 8000b6c:	08000cad 	.word	0x08000cad
 8000b70:	08000d11 	.word	0x08000d11
 8000b74:	08000d2b 	.word	0x08000d2b
 8000b78:	08000dcd 	.word	0x08000dcd
 8000b7c:	08000ddd 	.word	0x08000ddd
 8000b80:	08000ded 	.word	0x08000ded
 8000b84:	08000de7 	.word	0x08000de7
    {
    case MBUS_STATE_IDLE:
      mbus_flush(mb_context);
 8000b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff fde1 	bl	8000754 <mbus_flush>
      ctx->state = MBUS_STATE_FUNCTION;
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	2202      	movs	r2, #2
 8000b96:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      ctx->header.devaddr = byte;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	79ba      	ldrb	r2, [r7, #6]
 8000b9e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      break;
 8000ba2:	e12c      	b.n	8000dfe <mbus_poll+0x30a>
    case MBUS_STATE_FUNCTION:
      ctx->header.func = byte;
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	79ba      	ldrb	r2, [r7, #6]
 8000ba8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      switch (byte)
 8000bac:	79bb      	ldrb	r3, [r7, #6]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	2b0f      	cmp	r3, #15
 8000bb2:	d84f      	bhi.n	8000c54 <mbus_poll+0x160>
 8000bb4:	a201      	add	r2, pc, #4	@ (adr r2, 8000bbc <mbus_poll+0xc8>)
 8000bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bba:	bf00      	nop
 8000bbc:	08000c29 	.word	0x08000c29
 8000bc0:	08000c55 	.word	0x08000c55
 8000bc4:	08000c29 	.word	0x08000c29
 8000bc8:	08000c29 	.word	0x08000c29
 8000bcc:	08000c3f 	.word	0x08000c3f
 8000bd0:	08000bfd 	.word	0x08000bfd
 8000bd4:	08000c55 	.word	0x08000c55
 8000bd8:	08000c55 	.word	0x08000c55
 8000bdc:	08000c55 	.word	0x08000c55
 8000be0:	08000c55 	.word	0x08000c55
 8000be4:	08000c55 	.word	0x08000c55
 8000be8:	08000c55 	.word	0x08000c55
 8000bec:	08000c55 	.word	0x08000c55
 8000bf0:	08000c55 	.word	0x08000c55
 8000bf4:	08000c13 	.word	0x08000c13
 8000bf8:	08000c13 	.word	0x08000c13
      {
      case MBUS_FUNC_WRITE_REG:
        ctx->header.rnum = 1;
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	2201      	movs	r2, #1
 8000c00:	86da      	strh	r2, [r3, #54]	@ 0x36
        ctx->header.num = 1;
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	2201      	movs	r2, #1
 8000c06:	869a      	strh	r2, [r3, #52]	@ 0x34
        ctx->state = MBUS_STATE_REGADDR_HI;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	2204      	movs	r2, #4
 8000c0c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        break;
 8000c10:	e026      	b.n	8000c60 <mbus_poll+0x16c>
      case MBUS_FUNC_WRITE_REGS:
      case MBUS_FUNC_WRITE_COILS:
        ctx->header.rnum = 1;
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	2201      	movs	r2, #1
 8000c16:	86da      	strh	r2, [r3, #54]	@ 0x36
        ctx->header.num = 0;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	869a      	strh	r2, [r3, #52]	@ 0x34
        ctx->state = MBUS_STATE_REGADDR_HI;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	2204      	movs	r2, #4
 8000c22:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        break;
 8000c26:	e01b      	b.n	8000c60 <mbus_poll+0x16c>
      case MBUS_FUNC_READ_INPUT_REGS:
      case MBUS_FUNC_READ_COILS:
      case MBUS_FUNC_READ_REGS:
        ctx->state = MBUS_STATE_REGADDR_HI;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	2204      	movs	r2, #4
 8000c2c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        ctx->header.rnum = 0;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	2200      	movs	r2, #0
 8000c34:	86da      	strh	r2, [r3, #54]	@ 0x36
        ctx->header.num = 0;
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	869a      	strh	r2, [r3, #52]	@ 0x34
        break;
 8000c3c:	e010      	b.n	8000c60 <mbus_poll+0x16c>
      case MBUS_FUNC_WRITE_COIL:
        ctx->header.rnum = 1;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	2201      	movs	r2, #1
 8000c42:	86da      	strh	r2, [r3, #54]	@ 0x36
        ctx->header.num = 1;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	2201      	movs	r2, #1
 8000c48:	869a      	strh	r2, [r3, #52]	@ 0x34
        ctx->state = MBUS_STATE_REGADDR_HI;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	2204      	movs	r2, #4
 8000c4e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        break;
 8000c52:	e005      	b.n	8000c60 <mbus_poll+0x16c>
      default:
        // ctx->state = MBUS_STATE_IDLE;
        mbus_flush(mb_context);
 8000c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fd7b 	bl	8000754 <mbus_flush>
        break;
 8000c5e:	bf00      	nop
      }
      break;
 8000c60:	e0cd      	b.n	8000dfe <mbus_poll+0x30a>
    case MBUS_STATE_REGADDR_HI:
      ctx->state = MBUS_STATE_REGADDR_LO;
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	2203      	movs	r2, #3
 8000c66:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      ctx->header.addr = byte << 8;
 8000c6a:	79bb      	ldrb	r3, [r7, #6]
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	021b      	lsls	r3, r3, #8
 8000c70:	b29a      	uxth	r2, r3
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	865a      	strh	r2, [r3, #50]	@ 0x32
      break;
 8000c76:	e0c2      	b.n	8000dfe <mbus_poll+0x30a>
    case MBUS_STATE_REGADDR_LO:
      ctx->header.addr |= byte;
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8000c7c:	79bb      	ldrb	r3, [r7, #6]
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	4313      	orrs	r3, r2
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	865a      	strh	r2, [r3, #50]	@ 0x32
      if (ctx->header.num == 1 && ctx->header.rnum == 1)
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d108      	bne.n	8000ca2 <mbus_poll+0x1ae>
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d104      	bne.n	8000ca2 <mbus_poll+0x1ae>
      {
        ctx->state = MBUS_STATE_DATA_HI;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	2208      	movs	r2, #8
 8000c9c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      }
      else
      {
        ctx->state = MBUS_STATE_REGNUM_HI;
      }
      break;
 8000ca0:	e0ad      	b.n	8000dfe <mbus_poll+0x30a>
        ctx->state = MBUS_STATE_REGNUM_HI;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	2206      	movs	r2, #6
 8000ca6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      break;
 8000caa:	e0a8      	b.n	8000dfe <mbus_poll+0x30a>
    case MBUS_STATE_DATA_HI:
      ctx->state = MBUS_STATE_DATA_LO;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	2207      	movs	r2, #7
 8000cb0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      ctx->conf.recvbuf[2 * (ctx->header.num - ctx->header.rnum) + 1] = byte;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	6a1a      	ldr	r2, [r3, #32]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000cc2:	1acb      	subs	r3, r1, r3
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	4413      	add	r3, r2
 8000cca:	79ba      	ldrb	r2, [r7, #6]
 8000ccc:	701a      	strb	r2, [r3, #0]
      break;
 8000cce:	e096      	b.n	8000dfe <mbus_poll+0x30a>
    case MBUS_STATE_DATA_LO:
      ctx->conf.recvbuf[2 * (ctx->header.num - ctx->header.rnum)] = byte;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	6a1b      	ldr	r3, [r3, #32]
 8000cd4:	68fa      	ldr	r2, [r7, #12]
 8000cd6:	8e92      	ldrh	r2, [r2, #52]	@ 0x34
 8000cd8:	4611      	mov	r1, r2
 8000cda:	68fa      	ldr	r2, [r7, #12]
 8000cdc:	8ed2      	ldrh	r2, [r2, #54]	@ 0x36
 8000cde:	1a8a      	subs	r2, r1, r2
 8000ce0:	0052      	lsls	r2, r2, #1
 8000ce2:	4413      	add	r3, r2
 8000ce4:	79ba      	ldrb	r2, [r7, #6]
 8000ce6:	701a      	strb	r2, [r3, #0]
      ctx->header.rnum--;
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000cec:	3b01      	subs	r3, #1
 8000cee:	b29a      	uxth	r2, r3
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	86da      	strh	r2, [r3, #54]	@ 0x36
      if (ctx->header.rnum == 0)
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d104      	bne.n	8000d06 <mbus_poll+0x212>
      {
        ctx->state = MBUS_STATE_CRC_LO;
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	220b      	movs	r2, #11
 8000d00:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      }
      else
      {
        ctx->state = MBUS_STATE_DATA_HI;
      }
      break;
 8000d04:	e07b      	b.n	8000dfe <mbus_poll+0x30a>
        ctx->state = MBUS_STATE_DATA_HI;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	2208      	movs	r2, #8
 8000d0a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      break;
 8000d0e:	e076      	b.n	8000dfe <mbus_poll+0x30a>
    case MBUS_STATE_DATA_SIZE:
      ctx->state = MBUS_STATE_DATA;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	220a      	movs	r2, #10
 8000d14:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      ctx->header.size = byte;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	79ba      	ldrb	r2, [r7, #6]
 8000d1c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
      ctx->header.rsize = byte;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	79ba      	ldrb	r2, [r7, #6]
 8000d24:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
      break;
 8000d28:	e069      	b.n	8000dfe <mbus_poll+0x30a>
    case MBUS_STATE_DATA:
      ctx->conf.recvbuf[ctx->header.size - ctx->header.rsize] = byte;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	6a1b      	ldr	r3, [r3, #32]
 8000d2e:	68fa      	ldr	r2, [r7, #12]
 8000d30:	f892 2038 	ldrb.w	r2, [r2, #56]	@ 0x38
 8000d34:	4611      	mov	r1, r2
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 8000d3c:	1a8a      	subs	r2, r1, r2
 8000d3e:	4413      	add	r3, r2
 8000d40:	79ba      	ldrb	r2, [r7, #6]
 8000d42:	701a      	strb	r2, [r3, #0]
      ctx->header.rsize--;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
      if (ctx->header.rsize == 0)
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d14c      	bne.n	8000df8 <mbus_poll+0x304>
      {
        ctx->state = MBUS_STATE_CRC_LO;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	220b      	movs	r2, #11
 8000d62:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      }
      break;
 8000d66:	e047      	b.n	8000df8 <mbus_poll+0x304>
    case MBUS_STATE_REGNUM_HI:
      ctx->state = MBUS_STATE_REGNUM_LO;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	2205      	movs	r2, #5
 8000d6c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      ctx->header.num = byte << 8;
 8000d70:	79bb      	ldrb	r3, [r7, #6]
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	021b      	lsls	r3, r3, #8
 8000d76:	b29a      	uxth	r2, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	869a      	strh	r2, [r3, #52]	@ 0x34
      break;
 8000d7c:	e03f      	b.n	8000dfe <mbus_poll+0x30a>
    case MBUS_STATE_REGNUM_LO:
      ctx->state = MBUS_STATE_CRC_LO;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	220b      	movs	r2, #11
 8000d82:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      ctx->header.num |= byte;
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8000d8a:	79bb      	ldrb	r3, [r7, #6]
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	b29a      	uxth	r2, r3
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	869a      	strh	r2, [r3, #52]	@ 0x34
      if (ctx->header.rnum == 0)
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d104      	bne.n	8000da8 <mbus_poll+0x2b4>
      {
        ctx->state = MBUS_STATE_CRC_LO;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	220b      	movs	r2, #11
 8000da2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        {
          ctx->state = MBUS_STATE_DATA_SIZE;
        }
      }

      break;
 8000da6:	e029      	b.n	8000dfc <mbus_poll+0x308>
        ctx->header.rnum = ctx->header.num;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	86da      	strh	r2, [r3, #54]	@ 0x36
        ctx->state = MBUS_STATE_DATA_HI;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	2208      	movs	r2, #8
 8000db4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        if (ctx->header.func == MBUS_FUNC_WRITE_REGS)
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8000dbe:	2b10      	cmp	r3, #16
 8000dc0:	d11c      	bne.n	8000dfc <mbus_poll+0x308>
          ctx->state = MBUS_STATE_DATA_SIZE;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	2209      	movs	r2, #9
 8000dc6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      break;
 8000dca:	e017      	b.n	8000dfc <mbus_poll+0x308>
    case MBUS_STATE_CRC_LO:
      ctx->state = MBUS_STATE_CRC_HI;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	220c      	movs	r2, #12
 8000dd0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      break;
 8000dd4:	e013      	b.n	8000dfe <mbus_poll+0x30a>
 8000dd6:	bf00      	nop
 8000dd8:	20000178 	.word	0x20000178
    case MBUS_STATE_CRC_HI:
      ctx->state = MBUS_STATE_FINISH;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	220d      	movs	r2, #13
 8000de0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      break;
 8000de4:	e00b      	b.n	8000dfe <mbus_poll+0x30a>
    // We can't processing any more before callback not returned
    case MBUS_STATE_RESPONSE:
      return MBUS_ERROR;
 8000de6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dea:	e04c      	b.n	8000e86 <mbus_poll+0x392>
    default:
      mbus_flush(mb_context);
 8000dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fcaf 	bl	8000754 <mbus_flush>
      break;
 8000df6:	e002      	b.n	8000dfe <mbus_poll+0x30a>
      break;
 8000df8:	bf00      	nop
 8000dfa:	e000      	b.n	8000dfe <mbus_poll+0x30a>
      break;
 8000dfc:	bf00      	nop
    }

    ctx->crc16 = mbus_crc16(ctx->crc16, byte);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000e02:	79ba      	ldrb	r2, [r7, #6]
 8000e04:	4611      	mov	r1, r2
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fc1c 	bl	8000644 <mbus_crc16>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	461a      	mov	r2, r3
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (ctx->state == MBUS_STATE_FINISH)
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8000e1a:	2b0d      	cmp	r3, #13
 8000e1c:	d132      	bne.n	8000e84 <mbus_poll+0x390>
    {
      // CRC error
      if (ctx->crc16 != 0)
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d007      	beq.n	8000e36 <mbus_poll+0x342>
      {
        mbus_flush(mb_context);
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff fc92 	bl	8000754 <mbus_flush>
        return MBUS_ERROR;
 8000e30:	f04f 33ff 	mov.w	r3, #4294967295
 8000e34:	e027      	b.n	8000e86 <mbus_poll+0x392>
      }

      // TODO: Add broadcast messages
      if (ctx->header.devaddr == ctx->conf.devaddr)
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d11a      	bne.n	8000e7a <mbus_poll+0x386>
      {
        ctx->state = MBUS_STATE_RESPONSE;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	220e      	movs	r2, #14
 8000e48:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        if (mbus_poll_response(mb_context) == MBUS_OK)
 8000e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fcbf 	bl	80007d4 <mbus_poll_response>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d106      	bne.n	8000e6a <mbus_poll+0x376>
        {
          mbus_flush(mb_context);
 8000e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fc77 	bl	8000754 <mbus_flush>
          return MBUS_OK;
 8000e66:	2300      	movs	r3, #0
 8000e68:	e00d      	b.n	8000e86 <mbus_poll+0x392>
        }
        mbus_flush(mb_context);
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff fc70 	bl	8000754 <mbus_flush>
        return MBUS_ERROR;
 8000e74:	f04f 33ff 	mov.w	r3, #4294967295
 8000e78:	e005      	b.n	8000e86 <mbus_poll+0x392>
      }
      mbus_flush(mb_context);
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff fc68 	bl	8000754 <mbus_flush>
    }
    return MBUS_OK;
 8000e84:	2300      	movs	r3, #0
  }
 8000e86:	4618      	mov	r0, r3
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop

08000e90 <mbus_send_error>:
      return (mbus_context_t)&g_mbusContext[mb_context];
    return 0;
  }

  mbus_status_t mbus_send_error(mbus_t mb_context, Modbus_ResponseType response)
  {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	460a      	mov	r2, r1
 8000e9a:	71fb      	strb	r3, [r7, #7]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	71bb      	strb	r3, [r7, #6]
    uint16_t *pbuf = (uint16_t *)(g_mbusContext[mb_context].conf.sendbuf + 2);
 8000ea0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000ea4:	490e      	ldr	r1, [pc, #56]	@ (8000ee0 <mbus_send_error+0x50>)
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	011b      	lsls	r3, r3, #4
 8000eaa:	4413      	add	r3, r2
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	440b      	add	r3, r1
 8000eb0:	3318      	adds	r3, #24
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	3302      	adds	r3, #2
 8000eb6:	60fb      	str	r3, [r7, #12]
    *pbuf = 0x8300 | (uint8_t)response;
 8000eb8:	79bb      	ldrb	r3, [r7, #6]
 8000eba:	b21a      	sxth	r2, r3
 8000ebc:	4b09      	ldr	r3, [pc, #36]	@ (8000ee4 <mbus_send_error+0x54>)
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	b21b      	sxth	r3, r3
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	801a      	strh	r2, [r3, #0]
    return mbus_send_data(mb_context, 4);
 8000ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ecc:	2104      	movs	r1, #4
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 f80a 	bl	8000ee8 <mbus_send_data>
 8000ed4:	4603      	mov	r3, r0
  }
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000178 	.word	0x20000178
 8000ee4:	ffff8300 	.word	0xffff8300

08000ee8 <mbus_send_data>:

  mbus_status_t mbus_send_data(mbus_t mb_context, uint16_t size)
  {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	460a      	mov	r2, r1
 8000ef2:	71fb      	strb	r3, [r7, #7]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	80bb      	strh	r3, [r7, #4]
    // if size > ( conf.send_sz-2) error
    uint16_t crc32 = 0xFFFF;
 8000ef8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000efc:	82fb      	strh	r3, [r7, #22]
    const _stmodbus_context_t *ctx = &g_mbusContext[mb_context];
 8000efe:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000f02:	4613      	mov	r3, r2
 8000f04:	011b      	lsls	r3, r3, #4
 8000f06:	4413      	add	r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	4a29      	ldr	r2, [pc, #164]	@ (8000fb0 <mbus_send_data+0xc8>)
 8000f0c:	4413      	add	r3, r2
 8000f0e:	60fb      	str	r3, [r7, #12]
    uint8_t *pbuf = ctx->conf.sendbuf;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	60bb      	str	r3, [r7, #8]
    if (ctx->conf.send == 0 || pbuf == 0 || ctx->conf.sendbuf_sz < (size + 2))
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d008      	beq.n	8000f30 <mbus_send_data+0x48>
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d005      	beq.n	8000f30 <mbus_send_data+0x48>
 8000f24:	88bb      	ldrh	r3, [r7, #4]
 8000f26:	3301      	adds	r3, #1
 8000f28:	68fa      	ldr	r2, [r7, #12]
 8000f2a:	8b92      	ldrh	r2, [r2, #28]
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	db02      	blt.n	8000f36 <mbus_send_data+0x4e>
      return MBUS_ERROR;
 8000f30:	f04f 33ff 	mov.w	r3, #4294967295
 8000f34:	e037      	b.n	8000fa6 <mbus_send_data+0xbe>
    for (int i = 0; i < size; i++)
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]
 8000f3a:	e00d      	b.n	8000f58 <mbus_send_data+0x70>
    {
      crc32 = mbus_crc16(crc32, pbuf[i]);
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	68ba      	ldr	r2, [r7, #8]
 8000f40:	4413      	add	r3, r2
 8000f42:	781a      	ldrb	r2, [r3, #0]
 8000f44:	8afb      	ldrh	r3, [r7, #22]
 8000f46:	4611      	mov	r1, r2
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fb7b 	bl	8000644 <mbus_crc16>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	82fb      	strh	r3, [r7, #22]
    for (int i = 0; i < size; i++)
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	3301      	adds	r3, #1
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	88bb      	ldrh	r3, [r7, #4]
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	dbed      	blt.n	8000f3c <mbus_send_data+0x54>
    }
    pbuf[size++] = crc32 & 0xFF;
 8000f60:	88bb      	ldrh	r3, [r7, #4]
 8000f62:	1c5a      	adds	r2, r3, #1
 8000f64:	80ba      	strh	r2, [r7, #4]
 8000f66:	461a      	mov	r2, r3
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	8afa      	ldrh	r2, [r7, #22]
 8000f6e:	b2d2      	uxtb	r2, r2
 8000f70:	701a      	strb	r2, [r3, #0]
    pbuf[size++] = (crc32 >> 8);
 8000f72:	8afb      	ldrh	r3, [r7, #22]
 8000f74:	0a1b      	lsrs	r3, r3, #8
 8000f76:	b29a      	uxth	r2, r3
 8000f78:	88bb      	ldrh	r3, [r7, #4]
 8000f7a:	1c59      	adds	r1, r3, #1
 8000f7c:	80b9      	strh	r1, [r7, #4]
 8000f7e:	4619      	mov	r1, r3
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	440b      	add	r3, r1
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	701a      	strb	r2, [r3, #0]

    if (ctx->conf.send(mb_context, pbuf, size) != size)
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	88ba      	ldrh	r2, [r7, #4]
 8000f8e:	f997 0007 	ldrsb.w	r0, [r7, #7]
 8000f92:	68b9      	ldr	r1, [r7, #8]
 8000f94:	4798      	blx	r3
 8000f96:	4602      	mov	r2, r0
 8000f98:	88bb      	ldrh	r3, [r7, #4]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d002      	beq.n	8000fa4 <mbus_send_data+0xbc>
      return MBUS_ERROR;
 8000f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa2:	e000      	b.n	8000fa6 <mbus_send_data+0xbe>
    return MBUS_OK;
 8000fa4:	2300      	movs	r3, #0
  }
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000178 	.word	0x20000178

08000fb4 <mbus_proto_address>:
#endif
    return MBUS_ERROR;
  }

  int mbus_proto_address(Modbus_ConnectFuncType func, int *r)
  {
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	6039      	str	r1, [r7, #0]
 8000fbe:	71fb      	strb	r3, [r7, #7]
    int adr = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
    *r = 1;
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	601a      	str	r2, [r3, #0]
    switch (func)
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	2b17      	cmp	r3, #23
 8000fce:	dc3f      	bgt.n	8001050 <mbus_proto_address+0x9c>
 8000fd0:	2b04      	cmp	r3, #4
 8000fd2:	da08      	bge.n	8000fe6 <mbus_proto_address+0x32>
 8000fd4:	2b03      	cmp	r3, #3
 8000fd6:	d029      	beq.n	800102c <mbus_proto_address+0x78>
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	dc39      	bgt.n	8001050 <mbus_proto_address+0x9c>
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d034      	beq.n	800104a <mbus_proto_address+0x96>
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d02b      	beq.n	800103c <mbus_proto_address+0x88>
      *r = 0;
    case MBUS_FUNC_READ_COILS:
      adr = 0001;
      break;
    default:
      break;
 8000fe4:	e034      	b.n	8001050 <mbus_proto_address+0x9c>
    switch (func)
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	2301      	movs	r3, #1
 8000fea:	4093      	lsls	r3, r2
 8000fec:	4a1c      	ldr	r2, [pc, #112]	@ (8001060 <mbus_proto_address+0xac>)
 8000fee:	401a      	ands	r2, r3
 8000ff0:	2a00      	cmp	r2, #0
 8000ff2:	bf14      	ite	ne
 8000ff4:	2201      	movne	r2, #1
 8000ff6:	2200      	moveq	r2, #0
 8000ff8:	b2d2      	uxtb	r2, r2
 8000ffa:	2a00      	cmp	r2, #0
 8000ffc:	d113      	bne.n	8001026 <mbus_proto_address+0x72>
 8000ffe:	f248 0220 	movw	r2, #32800	@ 0x8020
 8001002:	401a      	ands	r2, r3
 8001004:	2a00      	cmp	r2, #0
 8001006:	bf14      	ite	ne
 8001008:	2201      	movne	r2, #1
 800100a:	2200      	moveq	r2, #0
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	2a00      	cmp	r2, #0
 8001010:	d118      	bne.n	8001044 <mbus_proto_address+0x90>
 8001012:	f003 0310 	and.w	r3, r3, #16
 8001016:	2b00      	cmp	r3, #0
 8001018:	bf14      	ite	ne
 800101a:	2301      	movne	r3, #1
 800101c:	2300      	moveq	r3, #0
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b00      	cmp	r3, #0
 8001022:	d107      	bne.n	8001034 <mbus_proto_address+0x80>
      break;
 8001024:	e014      	b.n	8001050 <mbus_proto_address+0x9c>
      *r = 0;
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
      adr = 40001;
 800102c:	f649 4341 	movw	r3, #40001	@ 0x9c41
 8001030:	60fb      	str	r3, [r7, #12]
      break;
 8001032:	e00e      	b.n	8001052 <mbus_proto_address+0x9e>
      adr = 30001;
 8001034:	f247 5331 	movw	r3, #30001	@ 0x7531
 8001038:	60fb      	str	r3, [r7, #12]
      break;
 800103a:	e00a      	b.n	8001052 <mbus_proto_address+0x9e>
      adr = 10001;
 800103c:	f242 7311 	movw	r3, #10001	@ 0x2711
 8001040:	60fb      	str	r3, [r7, #12]
      break;
 8001042:	e006      	b.n	8001052 <mbus_proto_address+0x9e>
      *r = 0;
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
      adr = 0001;
 800104a:	2301      	movs	r3, #1
 800104c:	60fb      	str	r3, [r7, #12]
      break;
 800104e:	e000      	b.n	8001052 <mbus_proto_address+0x9e>
      break;
 8001050:	bf00      	nop
    }
    return adr;
 8001052:	68fb      	ldr	r3, [r7, #12]
  }
 8001054:	4618      	mov	r0, r3
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	00c10040 	.word	0x00c10040

08001064 <Modbus_Device_Read>:
 * @brief  Modbus device read callback
 * @param  logical_address: Modbus logical address (40001, 40002, etc.)
 * @retval Register value
 */
uint16_t Modbus_Device_Read(uint32_t logical_address)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
    // Simple direct array access like the sample code
    if (logical_address >= 40001 && logical_address <= 40020)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8001072:	4293      	cmp	r3, r2
 8001074:	d911      	bls.n	800109a <Modbus_Device_Read+0x36>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f649 4254 	movw	r2, #40020	@ 0x9c54
 800107c:	4293      	cmp	r3, r2
 800107e:	d80c      	bhi.n	800109a <Modbus_Device_Read+0x36>
    {
        uint16_t index = logical_address - 40001;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	b29b      	uxth	r3, r3
 8001084:	f503 43c7 	add.w	r3, r3, #25472	@ 0x6380
 8001088:	333f      	adds	r3, #63	@ 0x3f
 800108a:	81fb      	strh	r3, [r7, #14]
        uint16_t value = device_registers[index];
 800108c:	89fb      	ldrh	r3, [r7, #14]
 800108e:	4a06      	ldr	r2, [pc, #24]	@ (80010a8 <Modbus_Device_Read+0x44>)
 8001090:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001094:	81bb      	strh	r3, [r7, #12]

        // Debug: Show what we're returning for ALL registers
        // printf("READ: addr=%lu, index=%d, returning %d (0x%04X)\n", logical_address, index, value, value); // Removed to prevent timeouts

        return value;
 8001096:	89bb      	ldrh	r3, [r7, #12]
 8001098:	e000      	b.n	800109c <Modbus_Device_Read+0x38>
    }

    return 0; // Invalid address
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	20000000 	.word	0x20000000

080010ac <Modbus_Device_Write>:
 * @param  logical_address: Modbus logical address (40001, 40002, etc.)
 * @param  value: Value to write
 * @retval Written value
 */
uint16_t Modbus_Device_Write(uint32_t logical_address, uint16_t value)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	460b      	mov	r3, r1
 80010b6:	807b      	strh	r3, [r7, #2]
    // Convert logical address to array index
    if (logical_address >= 40001 && logical_address <= 40020)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f649 4240 	movw	r2, #40000	@ 0x9c40
 80010be:	4293      	cmp	r3, r2
 80010c0:	d926      	bls.n	8001110 <Modbus_Device_Write+0x64>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f649 4254 	movw	r2, #40020	@ 0x9c54
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d821      	bhi.n	8001110 <Modbus_Device_Write+0x64>
    {
        uint16_t index = logical_address - 40001;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	f503 43c7 	add.w	r3, r3, #25472	@ 0x6380
 80010d4:	333f      	adds	r3, #63	@ 0x3f
 80010d6:	81fb      	strh	r3, [r7, #14]

        // Handle special write operations
        switch (logical_address)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f5a3 431c 	sub.w	r3, r3, #39936	@ 0x9c00
 80010de:	3b4f      	subs	r3, #79	@ 0x4f
 80010e0:	2b04      	cmp	r3, #4
 80010e2:	d80d      	bhi.n	8001100 <Modbus_Device_Write+0x54>
 80010e4:	a201      	add	r2, pc, #4	@ (adr r2, 80010ec <Modbus_Device_Write+0x40>)
 80010e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ea:	bf00      	nop
 80010ec:	08001101 	.word	0x08001101
 80010f0:	08001101 	.word	0x08001101
 80010f4:	08001101 	.word	0x08001101
 80010f8:	08001101 	.word	0x08001101
 80010fc:	08001101 	.word	0x08001101
            // Handle test operations
            break;

        default:
            // Store value for other registers
            break;
 8001100:	bf00      	nop
        }

        // Store the value
        device_registers[index] = value;
 8001102:	89fb      	ldrh	r3, [r7, #14]
 8001104:	4906      	ldr	r1, [pc, #24]	@ (8001120 <Modbus_Device_Write+0x74>)
 8001106:	887a      	ldrh	r2, [r7, #2]
 8001108:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        return value;
 800110c:	887b      	ldrh	r3, [r7, #2]
 800110e:	e000      	b.n	8001112 <Modbus_Device_Write+0x66>
    }

    return 0; // Invalid address
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3714      	adds	r7, #20
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	20000000 	.word	0x20000000

08001124 <Modbus_Device_UpdateSensors>:
 * @brief  Update sensor values (call this periodically)
 * @param  None
 * @retval None
 */
void Modbus_Device_UpdateSensors(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
    // device_registers[0] = Read_Sensor1_Value();  // 40001
    // device_registers[1] = Read_Sensor2_Value();  // 40002
    // device_registers[4] = Read_Temperature();    // 40005
    // device_registers[5] = Read_Humidity();       // 40006
    // etc.
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
	...

08001134 <Modbus_Init>:
 * @brief  Initialize Modbus RTU slave
 * @param  None
 * @retval None
 */
void Modbus_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
    // printf("Initializing Modbus...\n"); // Removed to prevent timing delays

    // Configure Modbus
    modbus_config.devaddr = 0x01; // Slave address
 8001138:	4b3a      	ldr	r3, [pc, #232]	@ (8001224 <Modbus_Init+0xf0>)
 800113a:	2201      	movs	r2, #1
 800113c:	701a      	strb	r2, [r3, #0]
    modbus_config.coils = 0;      // No internal coil handling
 800113e:	4b39      	ldr	r3, [pc, #228]	@ (8001224 <Modbus_Init+0xf0>)
 8001140:	2200      	movs	r2, #0
 8001142:	805a      	strh	r2, [r3, #2]
    modbus_config.discrete = 0;   // No internal discrete handling
 8001144:	4b37      	ldr	r3, [pc, #220]	@ (8001224 <Modbus_Init+0xf0>)
 8001146:	2200      	movs	r2, #0
 8001148:	809a      	strh	r2, [r3, #4]
    modbus_config.device = NULL;  // No device pointer needed
 800114a:	4b36      	ldr	r3, [pc, #216]	@ (8001224 <Modbus_Init+0xf0>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
    modbus_config.send = Modbus_SendData;
 8001150:	4b34      	ldr	r3, [pc, #208]	@ (8001224 <Modbus_Init+0xf0>)
 8001152:	4a35      	ldr	r2, [pc, #212]	@ (8001228 <Modbus_Init+0xf4>)
 8001154:	60da      	str	r2, [r3, #12]
    modbus_config.read = Modbus_Device_Read;
 8001156:	4b33      	ldr	r3, [pc, #204]	@ (8001224 <Modbus_Init+0xf0>)
 8001158:	4a34      	ldr	r2, [pc, #208]	@ (800122c <Modbus_Init+0xf8>)
 800115a:	611a      	str	r2, [r3, #16]
    modbus_config.write = Modbus_Device_Write;
 800115c:	4b31      	ldr	r3, [pc, #196]	@ (8001224 <Modbus_Init+0xf0>)
 800115e:	4a34      	ldr	r2, [pc, #208]	@ (8001230 <Modbus_Init+0xfc>)
 8001160:	615a      	str	r2, [r3, #20]
    modbus_config.sendbuf = modbus_tx_buffer;
 8001162:	4b30      	ldr	r3, [pc, #192]	@ (8001224 <Modbus_Init+0xf0>)
 8001164:	4a33      	ldr	r2, [pc, #204]	@ (8001234 <Modbus_Init+0x100>)
 8001166:	619a      	str	r2, [r3, #24]
    modbus_config.sendbuf_sz = sizeof(modbus_tx_buffer);
 8001168:	4b2e      	ldr	r3, [pc, #184]	@ (8001224 <Modbus_Init+0xf0>)
 800116a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800116e:	839a      	strh	r2, [r3, #28]
    modbus_config.recvbuf = modbus_rx_buffer;
 8001170:	4b2c      	ldr	r3, [pc, #176]	@ (8001224 <Modbus_Init+0xf0>)
 8001172:	4a31      	ldr	r2, [pc, #196]	@ (8001238 <Modbus_Init+0x104>)
 8001174:	621a      	str	r2, [r3, #32]
    modbus_config.recvbuf_sz = sizeof(modbus_rx_buffer);
 8001176:	4b2b      	ldr	r3, [pc, #172]	@ (8001224 <Modbus_Init+0xf0>)
 8001178:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800117c:	849a      	strh	r2, [r3, #36]	@ 0x24

    // printf("Modbus config: addr=0x%02X, buffers=%d/%d bytes\n",
    //        modbus_config.devaddr, modbus_config.sendbuf_sz, modbus_config.recvbuf_sz); // Removed

    // Initialize Modbus context
    modbus_context = mbus_open(&modbus_config);
 800117e:	4829      	ldr	r0, [pc, #164]	@ (8001224 <Modbus_Init+0xf0>)
 8001180:	f7ff fa94 	bl	80006ac <mbus_open>
 8001184:	4603      	mov	r3, r0
 8001186:	461a      	mov	r2, r3
 8001188:	4b2c      	ldr	r3, [pc, #176]	@ (800123c <Modbus_Init+0x108>)
 800118a:	701a      	strb	r2, [r3, #0]
    // printf("Modbus context opened: %d\n", modbus_context); // Removed

    // Set register values AFTER mbus_open (like sample code does)
    device_registers[0] = 20;  // 40001
 800118c:	4b2c      	ldr	r3, [pc, #176]	@ (8001240 <Modbus_Init+0x10c>)
 800118e:	2214      	movs	r2, #20
 8001190:	801a      	strh	r2, [r3, #0]
    device_registers[1] = 19;  // 40002
 8001192:	4b2b      	ldr	r3, [pc, #172]	@ (8001240 <Modbus_Init+0x10c>)
 8001194:	2213      	movs	r2, #19
 8001196:	805a      	strh	r2, [r3, #2]
    device_registers[2] = 18;  // 40003
 8001198:	4b29      	ldr	r3, [pc, #164]	@ (8001240 <Modbus_Init+0x10c>)
 800119a:	2212      	movs	r2, #18
 800119c:	809a      	strh	r2, [r3, #4]
    device_registers[3] = 17;  // 40004
 800119e:	4b28      	ldr	r3, [pc, #160]	@ (8001240 <Modbus_Init+0x10c>)
 80011a0:	2211      	movs	r2, #17
 80011a2:	80da      	strh	r2, [r3, #6]
    device_registers[4] = 16;  // 40005
 80011a4:	4b26      	ldr	r3, [pc, #152]	@ (8001240 <Modbus_Init+0x10c>)
 80011a6:	2210      	movs	r2, #16
 80011a8:	811a      	strh	r2, [r3, #8]
    device_registers[5] = 15;  // 40006
 80011aa:	4b25      	ldr	r3, [pc, #148]	@ (8001240 <Modbus_Init+0x10c>)
 80011ac:	220f      	movs	r2, #15
 80011ae:	815a      	strh	r2, [r3, #10]
    device_registers[6] = 14;  // 40007
 80011b0:	4b23      	ldr	r3, [pc, #140]	@ (8001240 <Modbus_Init+0x10c>)
 80011b2:	220e      	movs	r2, #14
 80011b4:	819a      	strh	r2, [r3, #12]
    device_registers[7] = 13;  // 40008
 80011b6:	4b22      	ldr	r3, [pc, #136]	@ (8001240 <Modbus_Init+0x10c>)
 80011b8:	220d      	movs	r2, #13
 80011ba:	81da      	strh	r2, [r3, #14]
    device_registers[8] = 12;  // 40009
 80011bc:	4b20      	ldr	r3, [pc, #128]	@ (8001240 <Modbus_Init+0x10c>)
 80011be:	220c      	movs	r2, #12
 80011c0:	821a      	strh	r2, [r3, #16]
    device_registers[9] = 11;  // 40010
 80011c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001240 <Modbus_Init+0x10c>)
 80011c4:	220b      	movs	r2, #11
 80011c6:	825a      	strh	r2, [r3, #18]
    device_registers[10] = 10; // 40011
 80011c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001240 <Modbus_Init+0x10c>)
 80011ca:	220a      	movs	r2, #10
 80011cc:	829a      	strh	r2, [r3, #20]
    device_registers[11] = 9;  // 40012
 80011ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001240 <Modbus_Init+0x10c>)
 80011d0:	2209      	movs	r2, #9
 80011d2:	82da      	strh	r2, [r3, #22]
    device_registers[12] = 8;  // 40013
 80011d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001240 <Modbus_Init+0x10c>)
 80011d6:	2208      	movs	r2, #8
 80011d8:	831a      	strh	r2, [r3, #24]
    device_registers[13] = 7;  // 40014
 80011da:	4b19      	ldr	r3, [pc, #100]	@ (8001240 <Modbus_Init+0x10c>)
 80011dc:	2207      	movs	r2, #7
 80011de:	835a      	strh	r2, [r3, #26]
    device_registers[14] = 6;  // 40015
 80011e0:	4b17      	ldr	r3, [pc, #92]	@ (8001240 <Modbus_Init+0x10c>)
 80011e2:	2206      	movs	r2, #6
 80011e4:	839a      	strh	r2, [r3, #28]
    device_registers[15] = 5;  // 40016
 80011e6:	4b16      	ldr	r3, [pc, #88]	@ (8001240 <Modbus_Init+0x10c>)
 80011e8:	2205      	movs	r2, #5
 80011ea:	83da      	strh	r2, [r3, #30]
    device_registers[16] = 4;  // 40017
 80011ec:	4b14      	ldr	r3, [pc, #80]	@ (8001240 <Modbus_Init+0x10c>)
 80011ee:	2204      	movs	r2, #4
 80011f0:	841a      	strh	r2, [r3, #32]
    device_registers[17] = 3;  // 40018
 80011f2:	4b13      	ldr	r3, [pc, #76]	@ (8001240 <Modbus_Init+0x10c>)
 80011f4:	2203      	movs	r2, #3
 80011f6:	845a      	strh	r2, [r3, #34]	@ 0x22
    device_registers[18] = 2;  // 40019
 80011f8:	4b11      	ldr	r3, [pc, #68]	@ (8001240 <Modbus_Init+0x10c>)
 80011fa:	2202      	movs	r2, #2
 80011fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    device_registers[19] = 1;  // 40020
 80011fe:	4b10      	ldr	r3, [pc, #64]	@ (8001240 <Modbus_Init+0x10c>)
 8001200:	2201      	movs	r2, #1
 8001202:	84da      	strh	r2, [r3, #38]	@ 0x26
    //     printf("Reg[%d] = %d\n", i, device_registers[i]);
    // }
    // printf("Registers initialized. Ready for ModbusPoll connection.\n"); // Removed to prevent timeouts

    // Start UART DMA reception
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, modbus_rx_buffer, sizeof(modbus_rx_buffer));
 8001204:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001208:	490b      	ldr	r1, [pc, #44]	@ (8001238 <Modbus_Init+0x104>)
 800120a:	480e      	ldr	r0, [pc, #56]	@ (8001244 <Modbus_Init+0x110>)
 800120c:	f003 fc9a 	bl	8004b44 <HAL_UARTEx_ReceiveToIdle_DMA>
    // printf("DMA reception started: %d\n", dma_status); // Removed

    // Enable UART idle line interrupt for Modbus frame detection
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8001210:	4b0c      	ldr	r3, [pc, #48]	@ (8001244 <Modbus_Init+0x110>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	4b0b      	ldr	r3, [pc, #44]	@ (8001244 <Modbus_Init+0x110>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f042 0210 	orr.w	r2, r2, #16
 800121e:	601a      	str	r2, [r3, #0]
    // printf("UART idle interrupt enabled\n"); // Removed
}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	200001c0 	.word	0x200001c0
 8001228:	08001259 	.word	0x08001259
 800122c:	08001065 	.word	0x08001065
 8001230:	080010ad 	.word	0x080010ad
 8001234:	200002e8 	.word	0x200002e8
 8001238:	200001e8 	.word	0x200001e8
 800123c:	200001bd 	.word	0x200001bd
 8001240:	20000000 	.word	0x20000000
 8001244:	20000050 	.word	0x20000050

08001248 <Modbus_Process>:
 * @brief  Process Modbus communication
 * @param  None
 * @retval None
 */
void Modbus_Process(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
    // This function can be called in main loop if needed
    // Currently, processing is handled in UART callback
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
	...

08001258 <Modbus_SendData>:
 * @param  data: Data to send
 * @param  size: Size of data
 * @retval Number of bytes sent
 */
static int Modbus_SendData(const mbus_t context, const uint8_t *data, const uint16_t size)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	6039      	str	r1, [r7, #0]
 8001262:	71fb      	strb	r3, [r7, #7]
 8001264:	4613      	mov	r3, r2
 8001266:	80bb      	strh	r3, [r7, #4]
    // {
    //     printf("0x%02X ", data[i]);
    // }
    // printf("\n");

    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, (uint8_t *)data, size, 1000);
 8001268:	88ba      	ldrh	r2, [r7, #4]
 800126a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800126e:	6839      	ldr	r1, [r7, #0]
 8001270:	4807      	ldr	r0, [pc, #28]	@ (8001290 <Modbus_SendData+0x38>)
 8001272:	f002 fa8d 	bl	8003790 <HAL_UART_Transmit>
 8001276:	4603      	mov	r3, r0
 8001278:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d101      	bne.n	8001284 <Modbus_SendData+0x2c>
    {
        // printf("TX Success\n"); // Removed to prevent timing delays
        return size;
 8001280:	88bb      	ldrh	r3, [r7, #4]
 8001282:	e000      	b.n	8001286 <Modbus_SendData+0x2e>
    }
    else
    {
        // printf("TX Failed: %d\n", status); // Removed to prevent timing delays
        return 0;
 8001284:	2300      	movs	r3, #0
    }
}
 8001286:	4618      	mov	r0, r3
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000050 	.word	0x20000050

08001294 <Modbus_GetContext>:
 * @brief  Get Modbus context (for external access)
 * @param  None
 * @retval Modbus context
 */
mbus_t Modbus_GetContext(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
    return modbus_context;
 8001298:	4b03      	ldr	r3, [pc, #12]	@ (80012a8 <Modbus_GetContext+0x14>)
 800129a:	f993 3000 	ldrsb.w	r3, [r3]
 800129e:	4618      	mov	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	200001bd 	.word	0x200001bd

080012ac <Modbus_Test_Init>:
 * @brief  Initialize Modbus test functions
 * @param  None
 * @retval None
 */
void Modbus_Test_Init(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
    // Set initial test values - DISABLED to preserve sequential test data (1-20)
    // Modbus_Device_SetRegister(0, 0x1234);  // 40001: Test sensor 1
    // Modbus_Device_SetRegister(1, 0x5678);  // 40002: Test sensor 2
    // Modbus_Device_SetRegister(9, 0x0001);  // 40010: Status (bit 0 = ready)
    // Modbus_Device_SetRegister(11, 0x0100); // 40012: Firmware version 1.0
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <Modbus_Test_Update>:
 * @brief  Update test values periodically
 * @param  None
 * @retval None
 */
void Modbus_Test_Update(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
    test_counter++;
 80012c0:	4b04      	ldr	r3, [pc, #16]	@ (80012d4 <Modbus_Test_Update+0x18>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	3301      	adds	r3, #1
 80012c6:	4a03      	ldr	r2, [pc, #12]	@ (80012d4 <Modbus_Test_Update+0x18>)
 80012c8:	6013      	str	r3, [r2, #0]
    // Simulate temperature reading (25.00°C = 9472) - Commented out to preserve test data
    // Modbus_Device_SetRegister(4, 205); // 40005

    // Simulate humidity reading (65.00% = 25856) - Commented out to preserve test data
    // Modbus_Device_SetRegister(5, 652); // 40006
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	200003e8 	.word	0x200003e8

080012d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012de:	4b0f      	ldr	r3, [pc, #60]	@ (800131c <HAL_MspInit+0x44>)
 80012e0:	699b      	ldr	r3, [r3, #24]
 80012e2:	4a0e      	ldr	r2, [pc, #56]	@ (800131c <HAL_MspInit+0x44>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6193      	str	r3, [r2, #24]
 80012ea:	4b0c      	ldr	r3, [pc, #48]	@ (800131c <HAL_MspInit+0x44>)
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f6:	4b09      	ldr	r3, [pc, #36]	@ (800131c <HAL_MspInit+0x44>)
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	4a08      	ldr	r2, [pc, #32]	@ (800131c <HAL_MspInit+0x44>)
 80012fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001300:	61d3      	str	r3, [r2, #28]
 8001302:	4b06      	ldr	r3, [pc, #24]	@ (800131c <HAL_MspInit+0x44>)
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	40021000 	.word	0x40021000

08001320 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	@ 0x28
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a42      	ldr	r2, [pc, #264]	@ (8001448 <HAL_UART_MspInit+0x128>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d17d      	bne.n	800143e <HAL_UART_MspInit+0x11e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001342:	4b42      	ldr	r3, [pc, #264]	@ (800144c <HAL_UART_MspInit+0x12c>)
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	4a41      	ldr	r2, [pc, #260]	@ (800144c <HAL_UART_MspInit+0x12c>)
 8001348:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800134c:	6193      	str	r3, [r2, #24]
 800134e:	4b3f      	ldr	r3, [pc, #252]	@ (800144c <HAL_UART_MspInit+0x12c>)
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135a:	4b3c      	ldr	r3, [pc, #240]	@ (800144c <HAL_UART_MspInit+0x12c>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	4a3b      	ldr	r2, [pc, #236]	@ (800144c <HAL_UART_MspInit+0x12c>)
 8001360:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001364:	6153      	str	r3, [r2, #20]
 8001366:	4b39      	ldr	r3, [pc, #228]	@ (800144c <HAL_UART_MspInit+0x12c>)
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA12     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8001372:	f44f 53b0 	mov.w	r3, #5632	@ 0x1600
 8001376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001378:	2302      	movs	r3, #2
 800137a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001380:	2303      	movs	r3, #3
 8001382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001384:	2307      	movs	r3, #7
 8001386:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	4619      	mov	r1, r3
 800138e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001392:	f000 fd15 	bl	8001dc0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001396:	4b2e      	ldr	r3, [pc, #184]	@ (8001450 <HAL_UART_MspInit+0x130>)
 8001398:	4a2e      	ldr	r2, [pc, #184]	@ (8001454 <HAL_UART_MspInit+0x134>)
 800139a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800139c:	4b2c      	ldr	r3, [pc, #176]	@ (8001450 <HAL_UART_MspInit+0x130>)
 800139e:	2200      	movs	r2, #0
 80013a0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001450 <HAL_UART_MspInit+0x130>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013a8:	4b29      	ldr	r3, [pc, #164]	@ (8001450 <HAL_UART_MspInit+0x130>)
 80013aa:	2280      	movs	r2, #128	@ 0x80
 80013ac:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013ae:	4b28      	ldr	r3, [pc, #160]	@ (8001450 <HAL_UART_MspInit+0x130>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013b4:	4b26      	ldr	r3, [pc, #152]	@ (8001450 <HAL_UART_MspInit+0x130>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80013ba:	4b25      	ldr	r3, [pc, #148]	@ (8001450 <HAL_UART_MspInit+0x130>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013c0:	4b23      	ldr	r3, [pc, #140]	@ (8001450 <HAL_UART_MspInit+0x130>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80013c6:	4822      	ldr	r0, [pc, #136]	@ (8001450 <HAL_UART_MspInit+0x130>)
 80013c8:	f000 fadb 	bl	8001982 <HAL_DMA_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 80013d2:	f7ff f931 	bl	8000638 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001450 <HAL_UART_MspInit+0x130>)
 80013da:	675a      	str	r2, [r3, #116]	@ 0x74
 80013dc:	4a1c      	ldr	r2, [pc, #112]	@ (8001450 <HAL_UART_MspInit+0x130>)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80013e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001458 <HAL_UART_MspInit+0x138>)
 80013e4:	4a1d      	ldr	r2, [pc, #116]	@ (800145c <HAL_UART_MspInit+0x13c>)
 80013e6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001458 <HAL_UART_MspInit+0x138>)
 80013ea:	2210      	movs	r2, #16
 80013ec:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001458 <HAL_UART_MspInit+0x138>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013f4:	4b18      	ldr	r3, [pc, #96]	@ (8001458 <HAL_UART_MspInit+0x138>)
 80013f6:	2280      	movs	r2, #128	@ 0x80
 80013f8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013fa:	4b17      	ldr	r3, [pc, #92]	@ (8001458 <HAL_UART_MspInit+0x138>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001400:	4b15      	ldr	r3, [pc, #84]	@ (8001458 <HAL_UART_MspInit+0x138>)
 8001402:	2200      	movs	r2, #0
 8001404:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001406:	4b14      	ldr	r3, [pc, #80]	@ (8001458 <HAL_UART_MspInit+0x138>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800140c:	4b12      	ldr	r3, [pc, #72]	@ (8001458 <HAL_UART_MspInit+0x138>)
 800140e:	2200      	movs	r2, #0
 8001410:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001412:	4811      	ldr	r0, [pc, #68]	@ (8001458 <HAL_UART_MspInit+0x138>)
 8001414:	f000 fab5 	bl	8001982 <HAL_DMA_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 800141e:	f7ff f90b 	bl	8000638 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a0c      	ldr	r2, [pc, #48]	@ (8001458 <HAL_UART_MspInit+0x138>)
 8001426:	671a      	str	r2, [r3, #112]	@ 0x70
 8001428:	4a0b      	ldr	r2, [pc, #44]	@ (8001458 <HAL_UART_MspInit+0x138>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800142e:	2200      	movs	r2, #0
 8001430:	2100      	movs	r1, #0
 8001432:	2025      	movs	r0, #37	@ 0x25
 8001434:	f000 fa6f 	bl	8001916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001438:	2025      	movs	r0, #37	@ 0x25
 800143a:	f000 fa88 	bl	800194e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800143e:	bf00      	nop
 8001440:	3728      	adds	r7, #40	@ 0x28
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40013800 	.word	0x40013800
 800144c:	40021000 	.word	0x40021000
 8001450:	200000d8 	.word	0x200000d8
 8001454:	40020058 	.word	0x40020058
 8001458:	2000011c 	.word	0x2000011c
 800145c:	40020044 	.word	0x40020044

08001460 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001464:	bf00      	nop
 8001466:	e7fd      	b.n	8001464 <NMI_Handler+0x4>

08001468 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800146c:	bf00      	nop
 800146e:	e7fd      	b.n	800146c <HardFault_Handler+0x4>

08001470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001474:	bf00      	nop
 8001476:	e7fd      	b.n	8001474 <MemManage_Handler+0x4>

08001478 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800147c:	bf00      	nop
 800147e:	e7fd      	b.n	800147c <BusFault_Handler+0x4>

08001480 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001484:	bf00      	nop
 8001486:	e7fd      	b.n	8001484 <UsageFault_Handler+0x4>

08001488 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b6:	f000 f90f 	bl	80016d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80014c4:	4802      	ldr	r0, [pc, #8]	@ (80014d0 <DMA1_Channel4_IRQHandler+0x10>)
 80014c6:	f000 fb7e 	bl	8001bc6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	2000011c 	.word	0x2000011c

080014d4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80014d8:	4802      	ldr	r0, [pc, #8]	@ (80014e4 <DMA1_Channel5_IRQHandler+0x10>)
 80014da:	f000 fb74 	bl	8001bc6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200000d8 	.word	0x200000d8

080014e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014ec:	4802      	ldr	r0, [pc, #8]	@ (80014f8 <USART1_IRQHandler+0x10>)
 80014ee:	f002 fa6b 	bl	80039c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000050 	.word	0x20000050

080014fc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001500:	4b06      	ldr	r3, [pc, #24]	@ (800151c <SystemInit+0x20>)
 8001502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001506:	4a05      	ldr	r2, [pc, #20]	@ (800151c <SystemInit+0x20>)
 8001508:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800150c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <UART_Callbacks_Init>:
 * @brief  Initialize UART callbacks
 * @param  None
 * @retval None
 */
void UART_Callbacks_Init(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
    // UART callbacks are handled by HAL, this function can be used
    // for any additional initialization if needed
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
	...

08001530 <HAL_UARTEx_RxEventCallback>:
 * @param  huart: UART handle
 * @param  Size: Number of bytes received
 * @retval None
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	807b      	strh	r3, [r7, #2]
    if (huart == &huart1 && Size > 0)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a1a      	ldr	r2, [pc, #104]	@ (80015a8 <HAL_UARTEx_RxEventCallback+0x78>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d12c      	bne.n	800159e <HAL_UARTEx_RxEventCallback+0x6e>
 8001544:	887b      	ldrh	r3, [r7, #2]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d029      	beq.n	800159e <HAL_UARTEx_RxEventCallback+0x6e>
    {
        // Get Modbus context
        mbus_t modbus_ctx = Modbus_GetContext();
 800154a:	f7ff fea3 	bl	8001294 <Modbus_GetContext>
 800154e:	4603      	mov	r3, r0
 8001550:	737b      	strb	r3, [r7, #13]

        // Mark Modbus activity for recovery system
        ModbusRecovery_MarkActivity();
 8001552:	f7fe ffcb 	bl	80004ec <ModbusRecovery_MarkActivity>

        // Validate context before processing
        if (modbus_ctx >= 0)
 8001556:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800155a:	2b00      	cmp	r3, #0
 800155c:	db15      	blt.n	800158a <HAL_UARTEx_RxEventCallback+0x5a>
        {
            // Process received Modbus data byte by byte
            for (uint16_t i = 0; i < Size && i < sizeof(modbus_rx_buffer); i++)
 800155e:	2300      	movs	r3, #0
 8001560:	81fb      	strh	r3, [r7, #14]
 8001562:	e00b      	b.n	800157c <HAL_UARTEx_RxEventCallback+0x4c>
            {
                mbus_poll(modbus_ctx, modbus_rx_buffer[i]);
 8001564:	89fb      	ldrh	r3, [r7, #14]
 8001566:	4a11      	ldr	r2, [pc, #68]	@ (80015ac <HAL_UARTEx_RxEventCallback+0x7c>)
 8001568:	5cd2      	ldrb	r2, [r2, r3]
 800156a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800156e:	4611      	mov	r1, r2
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fabf 	bl	8000af4 <mbus_poll>
            for (uint16_t i = 0; i < Size && i < sizeof(modbus_rx_buffer); i++)
 8001576:	89fb      	ldrh	r3, [r7, #14]
 8001578:	3301      	adds	r3, #1
 800157a:	81fb      	strh	r3, [r7, #14]
 800157c:	89fa      	ldrh	r2, [r7, #14]
 800157e:	887b      	ldrh	r3, [r7, #2]
 8001580:	429a      	cmp	r2, r3
 8001582:	d202      	bcs.n	800158a <HAL_UARTEx_RxEventCallback+0x5a>
 8001584:	89fb      	ldrh	r3, [r7, #14]
 8001586:	2bff      	cmp	r3, #255	@ 0xff
 8001588:	d9ec      	bls.n	8001564 <HAL_UARTEx_RxEventCallback+0x34>
            }
        } // Clear the UART idle flag
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2210      	movs	r2, #16
 8001590:	621a      	str	r2, [r3, #32]

        // Restart DMA reception for next frame
        HAL_UARTEx_ReceiveToIdle_DMA(&huart1, modbus_rx_buffer, sizeof(modbus_rx_buffer));
 8001592:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001596:	4905      	ldr	r1, [pc, #20]	@ (80015ac <HAL_UARTEx_RxEventCallback+0x7c>)
 8001598:	4803      	ldr	r0, [pc, #12]	@ (80015a8 <HAL_UARTEx_RxEventCallback+0x78>)
 800159a:	f003 fad3 	bl	8004b44 <HAL_UARTEx_ReceiveToIdle_DMA>
    }
}
 800159e:	bf00      	nop
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000050 	.word	0x20000050
 80015ac:	200001e8 	.word	0x200001e8

080015b0 <HAL_UART_ErrorCallback>:
 * @brief  UART error callback
 * @param  huart: UART handle
 * @retval None
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
    if (huart == &huart1)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a0d      	ldr	r2, [pc, #52]	@ (80015f0 <HAL_UART_ErrorCallback+0x40>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d113      	bne.n	80015e8 <HAL_UART_ErrorCallback+0x38>
    {
        // Mark error for recovery system
        ModbusRecovery_MarkError();
 80015c0:	f7ff f82c 	bl	800061c <ModbusRecovery_MarkError>

        // Handle UART errors
        __HAL_UART_CLEAR_OREFLAG(huart);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2208      	movs	r2, #8
 80015ca:	621a      	str	r2, [r3, #32]
        __HAL_UART_CLEAR_NEFLAG(huart);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2204      	movs	r2, #4
 80015d2:	621a      	str	r2, [r3, #32]
        __HAL_UART_CLEAR_FEFLAG(huart);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2202      	movs	r2, #2
 80015da:	621a      	str	r2, [r3, #32]

        // Restart DMA reception
        HAL_UARTEx_ReceiveToIdle_DMA(&huart1, modbus_rx_buffer, sizeof(modbus_rx_buffer));
 80015dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015e0:	4904      	ldr	r1, [pc, #16]	@ (80015f4 <HAL_UART_ErrorCallback+0x44>)
 80015e2:	4803      	ldr	r0, [pc, #12]	@ (80015f0 <HAL_UART_ErrorCallback+0x40>)
 80015e4:	f003 faae 	bl	8004b44 <HAL_UARTEx_ReceiveToIdle_DMA>
    }
}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000050 	.word	0x20000050
 80015f4:	200001e8 	.word	0x200001e8

080015f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001630 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80015fc:	f7ff ff7e 	bl	80014fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001600:	480c      	ldr	r0, [pc, #48]	@ (8001634 <LoopForever+0x6>)
  ldr r1, =_edata
 8001602:	490d      	ldr	r1, [pc, #52]	@ (8001638 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001604:	4a0d      	ldr	r2, [pc, #52]	@ (800163c <LoopForever+0xe>)
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001608:	e002      	b.n	8001610 <LoopCopyDataInit>

0800160a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800160c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160e:	3304      	adds	r3, #4

08001610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001614:	d3f9      	bcc.n	800160a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001616:	4a0a      	ldr	r2, [pc, #40]	@ (8001640 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001618:	4c0a      	ldr	r4, [pc, #40]	@ (8001644 <LoopForever+0x16>)
  movs r3, #0
 800161a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800161c:	e001      	b.n	8001622 <LoopFillZerobss>

0800161e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001620:	3204      	adds	r2, #4

08001622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001624:	d3fb      	bcc.n	800161e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001626:	f003 fae9 	bl	8004bfc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800162a:	f7fe fde3 	bl	80001f4 <main>

0800162e <LoopForever>:

LoopForever:
    b LoopForever
 800162e:	e7fe      	b.n	800162e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001630:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001638:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 800163c:	08004eb8 	.word	0x08004eb8
  ldr r2, =_sbss
 8001640:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8001644:	200003f0 	.word	0x200003f0

08001648 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001648:	e7fe      	b.n	8001648 <ADC1_2_IRQHandler>
	...

0800164c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001650:	4b08      	ldr	r3, [pc, #32]	@ (8001674 <HAL_Init+0x28>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a07      	ldr	r2, [pc, #28]	@ (8001674 <HAL_Init+0x28>)
 8001656:	f043 0310 	orr.w	r3, r3, #16
 800165a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800165c:	2003      	movs	r0, #3
 800165e:	f000 f94f 	bl	8001900 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001662:	200f      	movs	r0, #15
 8001664:	f000 f808 	bl	8001678 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001668:	f7ff fe36 	bl	80012d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40022000 	.word	0x40022000

08001678 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001680:	4b12      	ldr	r3, [pc, #72]	@ (80016cc <HAL_InitTick+0x54>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b12      	ldr	r3, [pc, #72]	@ (80016d0 <HAL_InitTick+0x58>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	4619      	mov	r1, r3
 800168a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800168e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001692:	fbb2 f3f3 	udiv	r3, r2, r3
 8001696:	4618      	mov	r0, r3
 8001698:	f000 f967 	bl	800196a <HAL_SYSTICK_Config>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e00e      	b.n	80016c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b0f      	cmp	r3, #15
 80016aa:	d80a      	bhi.n	80016c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ac:	2200      	movs	r2, #0
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295
 80016b4:	f000 f92f 	bl	8001916 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b8:	4a06      	ldr	r2, [pc, #24]	@ (80016d4 <HAL_InitTick+0x5c>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	e000      	b.n	80016c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000028 	.word	0x20000028
 80016d0:	20000030 	.word	0x20000030
 80016d4:	2000002c 	.word	0x2000002c

080016d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016dc:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <HAL_IncTick+0x20>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <HAL_IncTick+0x24>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4413      	add	r3, r2
 80016e8:	4a04      	ldr	r2, [pc, #16]	@ (80016fc <HAL_IncTick+0x24>)
 80016ea:	6013      	str	r3, [r2, #0]
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	20000030 	.word	0x20000030
 80016fc:	200003ec 	.word	0x200003ec

08001700 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return uwTick;  
 8001704:	4b03      	ldr	r3, [pc, #12]	@ (8001714 <HAL_GetTick+0x14>)
 8001706:	681b      	ldr	r3, [r3, #0]
}
 8001708:	4618      	mov	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	200003ec 	.word	0x200003ec

08001718 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001720:	f7ff ffee 	bl	8001700 <HAL_GetTick>
 8001724:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001730:	d005      	beq.n	800173e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001732:	4b0a      	ldr	r3, [pc, #40]	@ (800175c <HAL_Delay+0x44>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4413      	add	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800173e:	bf00      	nop
 8001740:	f7ff ffde 	bl	8001700 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	429a      	cmp	r2, r3
 800174e:	d8f7      	bhi.n	8001740 <HAL_Delay+0x28>
  {
  }
}
 8001750:	bf00      	nop
 8001752:	bf00      	nop
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000030 	.word	0x20000030

08001760 <__NVIC_SetPriorityGrouping>:
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001770:	4b0c      	ldr	r3, [pc, #48]	@ (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800177c:	4013      	ands	r3, r2
 800177e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001788:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800178c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001792:	4a04      	ldr	r2, [pc, #16]	@ (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	60d3      	str	r3, [r2, #12]
}
 8001798:	bf00      	nop
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <__NVIC_GetPriorityGrouping>:
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ac:	4b04      	ldr	r3, [pc, #16]	@ (80017c0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	0a1b      	lsrs	r3, r3, #8
 80017b2:	f003 0307 	and.w	r3, r3, #7
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <__NVIC_EnableIRQ>:
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	db0b      	blt.n	80017ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	f003 021f 	and.w	r2, r3, #31
 80017dc:	4907      	ldr	r1, [pc, #28]	@ (80017fc <__NVIC_EnableIRQ+0x38>)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	095b      	lsrs	r3, r3, #5
 80017e4:	2001      	movs	r0, #1
 80017e6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000e100 	.word	0xe000e100

08001800 <__NVIC_SetPriority>:
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	6039      	str	r1, [r7, #0]
 800180a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001810:	2b00      	cmp	r3, #0
 8001812:	db0a      	blt.n	800182a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	b2da      	uxtb	r2, r3
 8001818:	490c      	ldr	r1, [pc, #48]	@ (800184c <__NVIC_SetPriority+0x4c>)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	0112      	lsls	r2, r2, #4
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	440b      	add	r3, r1
 8001824:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001828:	e00a      	b.n	8001840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	b2da      	uxtb	r2, r3
 800182e:	4908      	ldr	r1, [pc, #32]	@ (8001850 <__NVIC_SetPriority+0x50>)
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	f003 030f 	and.w	r3, r3, #15
 8001836:	3b04      	subs	r3, #4
 8001838:	0112      	lsls	r2, r2, #4
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	440b      	add	r3, r1
 800183e:	761a      	strb	r2, [r3, #24]
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000e100 	.word	0xe000e100
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <NVIC_EncodePriority>:
{
 8001854:	b480      	push	{r7}
 8001856:	b089      	sub	sp, #36	@ 0x24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f1c3 0307 	rsb	r3, r3, #7
 800186e:	2b04      	cmp	r3, #4
 8001870:	bf28      	it	cs
 8001872:	2304      	movcs	r3, #4
 8001874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3304      	adds	r3, #4
 800187a:	2b06      	cmp	r3, #6
 800187c:	d902      	bls.n	8001884 <NVIC_EncodePriority+0x30>
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3b03      	subs	r3, #3
 8001882:	e000      	b.n	8001886 <NVIC_EncodePriority+0x32>
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001888:	f04f 32ff 	mov.w	r2, #4294967295
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43da      	mvns	r2, r3
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	401a      	ands	r2, r3
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800189c:	f04f 31ff 	mov.w	r1, #4294967295
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	fa01 f303 	lsl.w	r3, r1, r3
 80018a6:	43d9      	mvns	r1, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ac:	4313      	orrs	r3, r2
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3724      	adds	r7, #36	@ 0x24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
	...

080018bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018cc:	d301      	bcc.n	80018d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ce:	2301      	movs	r3, #1
 80018d0:	e00f      	b.n	80018f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018d2:	4a0a      	ldr	r2, [pc, #40]	@ (80018fc <SysTick_Config+0x40>)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018da:	210f      	movs	r1, #15
 80018dc:	f04f 30ff 	mov.w	r0, #4294967295
 80018e0:	f7ff ff8e 	bl	8001800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e4:	4b05      	ldr	r3, [pc, #20]	@ (80018fc <SysTick_Config+0x40>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ea:	4b04      	ldr	r3, [pc, #16]	@ (80018fc <SysTick_Config+0x40>)
 80018ec:	2207      	movs	r2, #7
 80018ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	e000e010 	.word	0xe000e010

08001900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff ff29 	bl	8001760 <__NVIC_SetPriorityGrouping>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b086      	sub	sp, #24
 800191a:	af00      	add	r7, sp, #0
 800191c:	4603      	mov	r3, r0
 800191e:	60b9      	str	r1, [r7, #8]
 8001920:	607a      	str	r2, [r7, #4]
 8001922:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001928:	f7ff ff3e 	bl	80017a8 <__NVIC_GetPriorityGrouping>
 800192c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	68b9      	ldr	r1, [r7, #8]
 8001932:	6978      	ldr	r0, [r7, #20]
 8001934:	f7ff ff8e 	bl	8001854 <NVIC_EncodePriority>
 8001938:	4602      	mov	r2, r0
 800193a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800193e:	4611      	mov	r1, r2
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff5d 	bl	8001800 <__NVIC_SetPriority>
}
 8001946:	bf00      	nop
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	4603      	mov	r3, r0
 8001956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff ff31 	bl	80017c4 <__NVIC_EnableIRQ>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff ffa2 	bl	80018bc <SysTick_Config>
 8001978:	4603      	mov	r3, r0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b084      	sub	sp, #16
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e037      	b.n	8001a08 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2202      	movs	r2, #2
 800199c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80019ae:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80019b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80019bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	4313      	orrs	r3, r2
 80019e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f000 f9c8 	bl	8001d80 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
 8001a1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d101      	bne.n	8001a30 <HAL_DMA_Start_IT+0x20>
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	e04a      	b.n	8001ac6 <HAL_DMA_Start_IT+0xb6>
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d13a      	bne.n	8001ab8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2202      	movs	r2, #2
 8001a46:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 0201 	bic.w	r2, r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	68b9      	ldr	r1, [r7, #8]
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f000 f95c 	bl	8001d24 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d008      	beq.n	8001a86 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f042 020e 	orr.w	r2, r2, #14
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	e00f      	b.n	8001aa6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f042 020a 	orr.w	r2, r2, #10
 8001a94:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 0204 	bic.w	r2, r2, #4
 8001aa4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f042 0201 	orr.w	r2, r2, #1
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	e005      	b.n	8001ac4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d101      	bne.n	8001ae0 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e02e      	b.n	8001b3e <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d008      	beq.n	8001afc <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2204      	movs	r2, #4
 8001aee:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e020      	b.n	8001b3e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 020e 	bic.w	r2, r2, #14
 8001b0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 0201 	bic.w	r2, r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b24:	2101      	movs	r1, #1
 8001b26:	fa01 f202 	lsl.w	r2, r1, r2
 8001b2a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b084      	sub	sp, #16
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b52:	2300      	movs	r3, #0
 8001b54:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d005      	beq.n	8001b6c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2204      	movs	r2, #4
 8001b64:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	73fb      	strb	r3, [r7, #15]
 8001b6a:	e027      	b.n	8001bbc <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 020e 	bic.w	r2, r2, #14
 8001b7a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 0201 	bic.w	r2, r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b94:	2101      	movs	r1, #1
 8001b96:	fa01 f202 	lsl.w	r2, r1, r2
 8001b9a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	4798      	blx	r3
    }
  }
  return status;
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b084      	sub	sp, #16
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be2:	2204      	movs	r2, #4
 8001be4:	409a      	lsls	r2, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4013      	ands	r3, r2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d024      	beq.n	8001c38 <HAL_DMA_IRQHandler+0x72>
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d01f      	beq.n	8001c38 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0320 	and.w	r3, r3, #32
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d107      	bne.n	8001c16 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 0204 	bic.w	r2, r2, #4
 8001c14:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c1e:	2104      	movs	r1, #4
 8001c20:	fa01 f202 	lsl.w	r2, r1, r2
 8001c24:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d06a      	beq.n	8001d04 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001c36:	e065      	b.n	8001d04 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	409a      	lsls	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4013      	ands	r3, r2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d02c      	beq.n	8001ca2 <HAL_DMA_IRQHandler+0xdc>
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d027      	beq.n	8001ca2 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0320 	and.w	r3, r3, #32
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d10b      	bne.n	8001c78 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 020a 	bic.w	r2, r2, #10
 8001c6e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c80:	2102      	movs	r1, #2
 8001c82:	fa01 f202 	lsl.w	r2, r1, r2
 8001c86:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d035      	beq.n	8001d04 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001ca0:	e030      	b.n	8001d04 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca6:	2208      	movs	r2, #8
 8001ca8:	409a      	lsls	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	4013      	ands	r3, r2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d028      	beq.n	8001d04 <HAL_DMA_IRQHandler+0x13e>
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	f003 0308 	and.w	r3, r3, #8
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d023      	beq.n	8001d04 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 020e 	bic.w	r2, r2, #14
 8001cca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cda:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d004      	beq.n	8001d04 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	4798      	blx	r3
    }
  }
}
 8001d02:	e7ff      	b.n	8001d04 <HAL_DMA_IRQHandler+0x13e>
 8001d04:	bf00      	nop
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
 8001d30:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d40:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b10      	cmp	r3, #16
 8001d50:	d108      	bne.n	8001d64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d62:	e007      	b.n	8001d74 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68ba      	ldr	r2, [r7, #8]
 8001d6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	60da      	str	r2, [r3, #12]
}
 8001d74:	bf00      	nop
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4b09      	ldr	r3, [pc, #36]	@ (8001db4 <DMA_CalcBaseAndBitshift+0x34>)
 8001d90:	4413      	add	r3, r2
 8001d92:	4a09      	ldr	r2, [pc, #36]	@ (8001db8 <DMA_CalcBaseAndBitshift+0x38>)
 8001d94:	fba2 2303 	umull	r2, r3, r2, r3
 8001d98:	091b      	lsrs	r3, r3, #4
 8001d9a:	009a      	lsls	r2, r3, #2
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a06      	ldr	r2, [pc, #24]	@ (8001dbc <DMA_CalcBaseAndBitshift+0x3c>)
 8001da4:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	bffdfff8 	.word	0xbffdfff8
 8001db8:	cccccccd 	.word	0xcccccccd
 8001dbc:	40020000 	.word	0x40020000

08001dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b087      	sub	sp, #28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dce:	e14e      	b.n	800206e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ddc:	4013      	ands	r3, r2
 8001dde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 8140 	beq.w	8002068 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 0303 	and.w	r3, r3, #3
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d005      	beq.n	8001e00 <HAL_GPIO_Init+0x40>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 0303 	and.w	r3, r3, #3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d130      	bne.n	8001e62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	2203      	movs	r2, #3
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4013      	ands	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	68da      	ldr	r2, [r3, #12]
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e36:	2201      	movs	r2, #1
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4013      	ands	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	091b      	lsrs	r3, r3, #4
 8001e4c:	f003 0201 	and.w	r2, r3, #1
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	2b03      	cmp	r3, #3
 8001e6c:	d017      	beq.n	8001e9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	2203      	movs	r2, #3
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	4013      	ands	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d123      	bne.n	8001ef2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	08da      	lsrs	r2, r3, #3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3208      	adds	r2, #8
 8001eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	220f      	movs	r2, #15
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	691a      	ldr	r2, [r3, #16]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	08da      	lsrs	r2, r3, #3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3208      	adds	r2, #8
 8001eec:	6939      	ldr	r1, [r7, #16]
 8001eee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	2203      	movs	r2, #3
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4013      	ands	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f003 0203 	and.w	r2, r3, #3
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f000 809a 	beq.w	8002068 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f34:	4b55      	ldr	r3, [pc, #340]	@ (800208c <HAL_GPIO_Init+0x2cc>)
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	4a54      	ldr	r2, [pc, #336]	@ (800208c <HAL_GPIO_Init+0x2cc>)
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	6193      	str	r3, [r2, #24]
 8001f40:	4b52      	ldr	r3, [pc, #328]	@ (800208c <HAL_GPIO_Init+0x2cc>)
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	60bb      	str	r3, [r7, #8]
 8001f4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f4c:	4a50      	ldr	r2, [pc, #320]	@ (8002090 <HAL_GPIO_Init+0x2d0>)
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	089b      	lsrs	r3, r3, #2
 8001f52:	3302      	adds	r3, #2
 8001f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	220f      	movs	r2, #15
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f76:	d013      	beq.n	8001fa0 <HAL_GPIO_Init+0x1e0>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a46      	ldr	r2, [pc, #280]	@ (8002094 <HAL_GPIO_Init+0x2d4>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d00d      	beq.n	8001f9c <HAL_GPIO_Init+0x1dc>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a45      	ldr	r2, [pc, #276]	@ (8002098 <HAL_GPIO_Init+0x2d8>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d007      	beq.n	8001f98 <HAL_GPIO_Init+0x1d8>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a44      	ldr	r2, [pc, #272]	@ (800209c <HAL_GPIO_Init+0x2dc>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d101      	bne.n	8001f94 <HAL_GPIO_Init+0x1d4>
 8001f90:	2303      	movs	r3, #3
 8001f92:	e006      	b.n	8001fa2 <HAL_GPIO_Init+0x1e2>
 8001f94:	2305      	movs	r3, #5
 8001f96:	e004      	b.n	8001fa2 <HAL_GPIO_Init+0x1e2>
 8001f98:	2302      	movs	r3, #2
 8001f9a:	e002      	b.n	8001fa2 <HAL_GPIO_Init+0x1e2>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <HAL_GPIO_Init+0x1e2>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	f002 0203 	and.w	r2, r2, #3
 8001fa8:	0092      	lsls	r2, r2, #2
 8001faa:	4093      	lsls	r3, r2
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fb2:	4937      	ldr	r1, [pc, #220]	@ (8002090 <HAL_GPIO_Init+0x2d0>)
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	089b      	lsrs	r3, r3, #2
 8001fb8:	3302      	adds	r3, #2
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fc0:	4b37      	ldr	r3, [pc, #220]	@ (80020a0 <HAL_GPIO_Init+0x2e0>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001fe4:	4a2e      	ldr	r2, [pc, #184]	@ (80020a0 <HAL_GPIO_Init+0x2e0>)
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fea:	4b2d      	ldr	r3, [pc, #180]	@ (80020a0 <HAL_GPIO_Init+0x2e0>)
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4313      	orrs	r3, r2
 800200c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800200e:	4a24      	ldr	r2, [pc, #144]	@ (80020a0 <HAL_GPIO_Init+0x2e0>)
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002014:	4b22      	ldr	r3, [pc, #136]	@ (80020a0 <HAL_GPIO_Init+0x2e0>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	43db      	mvns	r3, r3
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	4013      	ands	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	4313      	orrs	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002038:	4a19      	ldr	r2, [pc, #100]	@ (80020a0 <HAL_GPIO_Init+0x2e0>)
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800203e:	4b18      	ldr	r3, [pc, #96]	@ (80020a0 <HAL_GPIO_Init+0x2e0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	43db      	mvns	r3, r3
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	4013      	ands	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4313      	orrs	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002062:	4a0f      	ldr	r2, [pc, #60]	@ (80020a0 <HAL_GPIO_Init+0x2e0>)
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	3301      	adds	r3, #1
 800206c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	fa22 f303 	lsr.w	r3, r2, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	f47f aea9 	bne.w	8001dd0 <HAL_GPIO_Init+0x10>
  }
}
 800207e:	bf00      	nop
 8002080:	bf00      	nop
 8002082:	371c      	adds	r7, #28
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	40021000 	.word	0x40021000
 8002090:	40010000 	.word	0x40010000
 8002094:	48000400 	.word	0x48000400
 8002098:	48000800 	.word	0x48000800
 800209c:	48000c00 	.word	0x48000c00
 80020a0:	40010400 	.word	0x40010400

080020a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	807b      	strh	r3, [r7, #2]
 80020b0:	4613      	mov	r3, r2
 80020b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020b4:	787b      	ldrb	r3, [r7, #1]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020ba:	887a      	ldrh	r2, [r7, #2]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020c0:	e002      	b.n	80020c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020c2:	887a      	ldrh	r2, [r7, #2]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020e6:	887a      	ldrh	r2, [r7, #2]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4013      	ands	r3, r2
 80020ec:	041a      	lsls	r2, r3, #16
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	43d9      	mvns	r1, r3
 80020f2:	887b      	ldrh	r3, [r7, #2]
 80020f4:	400b      	ands	r3, r1
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	619a      	str	r2, [r3, #24]
}
 80020fc:	bf00      	nop
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800210e:	af00      	add	r7, sp, #0
 8002110:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002114:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002118:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800211a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800211e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d102      	bne.n	800212e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	f000 bff4 	b.w	8003116 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800212e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002132:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b00      	cmp	r3, #0
 8002140:	f000 816d 	beq.w	800241e <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002144:	4bb4      	ldr	r3, [pc, #720]	@ (8002418 <HAL_RCC_OscConfig+0x310>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 030c 	and.w	r3, r3, #12
 800214c:	2b04      	cmp	r3, #4
 800214e:	d00c      	beq.n	800216a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002150:	4bb1      	ldr	r3, [pc, #708]	@ (8002418 <HAL_RCC_OscConfig+0x310>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 030c 	and.w	r3, r3, #12
 8002158:	2b08      	cmp	r3, #8
 800215a:	d157      	bne.n	800220c <HAL_RCC_OscConfig+0x104>
 800215c:	4bae      	ldr	r3, [pc, #696]	@ (8002418 <HAL_RCC_OscConfig+0x310>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002168:	d150      	bne.n	800220c <HAL_RCC_OscConfig+0x104>
 800216a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800216e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002172:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002176:	fa93 f3a3 	rbit	r3, r3
 800217a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800217e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002182:	fab3 f383 	clz	r3, r3
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b3f      	cmp	r3, #63	@ 0x3f
 800218a:	d802      	bhi.n	8002192 <HAL_RCC_OscConfig+0x8a>
 800218c:	4ba2      	ldr	r3, [pc, #648]	@ (8002418 <HAL_RCC_OscConfig+0x310>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	e015      	b.n	80021be <HAL_RCC_OscConfig+0xb6>
 8002192:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002196:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800219e:	fa93 f3a3 	rbit	r3, r3
 80021a2:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80021a6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021aa:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80021ae:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80021b2:	fa93 f3a3 	rbit	r3, r3
 80021b6:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80021ba:	4b97      	ldr	r3, [pc, #604]	@ (8002418 <HAL_RCC_OscConfig+0x310>)
 80021bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021be:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80021c2:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80021c6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80021ca:	fa92 f2a2 	rbit	r2, r2
 80021ce:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80021d2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80021d6:	fab2 f282 	clz	r2, r2
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	f042 0220 	orr.w	r2, r2, #32
 80021e0:	b2d2      	uxtb	r2, r2
 80021e2:	f002 021f 	and.w	r2, r2, #31
 80021e6:	2101      	movs	r1, #1
 80021e8:	fa01 f202 	lsl.w	r2, r1, r2
 80021ec:	4013      	ands	r3, r2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 8114 	beq.w	800241c <HAL_RCC_OscConfig+0x314>
 80021f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	f040 810b 	bne.w	800241c <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	f000 bf85 	b.w	8003116 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800220c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002210:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800221c:	d106      	bne.n	800222c <HAL_RCC_OscConfig+0x124>
 800221e:	4b7e      	ldr	r3, [pc, #504]	@ (8002418 <HAL_RCC_OscConfig+0x310>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a7d      	ldr	r2, [pc, #500]	@ (8002418 <HAL_RCC_OscConfig+0x310>)
 8002224:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	e036      	b.n	800229a <HAL_RCC_OscConfig+0x192>
 800222c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002230:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10c      	bne.n	8002256 <HAL_RCC_OscConfig+0x14e>
 800223c:	4b76      	ldr	r3, [pc, #472]	@ (8002418 <HAL_RCC_OscConfig+0x310>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a75      	ldr	r2, [pc, #468]	@ (8002418 <HAL_RCC_OscConfig+0x310>)
 8002242:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002246:	6013      	str	r3, [r2, #0]
 8002248:	4b73      	ldr	r3, [pc, #460]	@ (8002418 <HAL_RCC_OscConfig+0x310>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a72      	ldr	r2, [pc, #456]	@ (8002418 <HAL_RCC_OscConfig+0x310>)
 800224e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002252:	6013      	str	r3, [r2, #0]
 8002254:	e021      	b.n	800229a <HAL_RCC_OscConfig+0x192>
 8002256:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800225a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002266:	d10c      	bne.n	8002282 <HAL_RCC_OscConfig+0x17a>
 8002268:	4b6b      	ldr	r3, [pc, #428]	@ (8002418 <HAL_RCC_OscConfig+0x310>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a6a      	ldr	r2, [pc, #424]	@ (8002418 <HAL_RCC_OscConfig+0x310>)
 800226e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002272:	6013      	str	r3, [r2, #0]
 8002274:	4b68      	ldr	r3, [pc, #416]	@ (8002418 <HAL_RCC_OscConfig+0x310>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a67      	ldr	r2, [pc, #412]	@ (8002418 <HAL_RCC_OscConfig+0x310>)
 800227a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800227e:	6013      	str	r3, [r2, #0]
 8002280:	e00b      	b.n	800229a <HAL_RCC_OscConfig+0x192>
 8002282:	4b65      	ldr	r3, [pc, #404]	@ (8002418 <HAL_RCC_OscConfig+0x310>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a64      	ldr	r2, [pc, #400]	@ (8002418 <HAL_RCC_OscConfig+0x310>)
 8002288:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	4b62      	ldr	r3, [pc, #392]	@ (8002418 <HAL_RCC_OscConfig+0x310>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a61      	ldr	r2, [pc, #388]	@ (8002418 <HAL_RCC_OscConfig+0x310>)
 8002294:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002298:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800229a:	4b5f      	ldr	r3, [pc, #380]	@ (8002418 <HAL_RCC_OscConfig+0x310>)
 800229c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800229e:	f023 020f 	bic.w	r2, r3, #15
 80022a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	495a      	ldr	r1, [pc, #360]	@ (8002418 <HAL_RCC_OscConfig+0x310>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d054      	beq.n	800236e <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c4:	f7ff fa1c 	bl	8001700 <HAL_GetTick>
 80022c8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022cc:	e00a      	b.n	80022e4 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022ce:	f7ff fa17 	bl	8001700 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b64      	cmp	r3, #100	@ 0x64
 80022dc:	d902      	bls.n	80022e4 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	f000 bf19 	b.w	8003116 <HAL_RCC_OscConfig+0x100e>
 80022e4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022e8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ec:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80022f0:	fa93 f3a3 	rbit	r3, r3
 80022f4:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80022f8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fc:	fab3 f383 	clz	r3, r3
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b3f      	cmp	r3, #63	@ 0x3f
 8002304:	d802      	bhi.n	800230c <HAL_RCC_OscConfig+0x204>
 8002306:	4b44      	ldr	r3, [pc, #272]	@ (8002418 <HAL_RCC_OscConfig+0x310>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	e015      	b.n	8002338 <HAL_RCC_OscConfig+0x230>
 800230c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002310:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002314:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002318:	fa93 f3a3 	rbit	r3, r3
 800231c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002320:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002324:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002328:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800232c:	fa93 f3a3 	rbit	r3, r3
 8002330:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002334:	4b38      	ldr	r3, [pc, #224]	@ (8002418 <HAL_RCC_OscConfig+0x310>)
 8002336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002338:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800233c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002340:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002344:	fa92 f2a2 	rbit	r2, r2
 8002348:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 800234c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002350:	fab2 f282 	clz	r2, r2
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	f042 0220 	orr.w	r2, r2, #32
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	f002 021f 	and.w	r2, r2, #31
 8002360:	2101      	movs	r1, #1
 8002362:	fa01 f202 	lsl.w	r2, r1, r2
 8002366:	4013      	ands	r3, r2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0b0      	beq.n	80022ce <HAL_RCC_OscConfig+0x1c6>
 800236c:	e057      	b.n	800241e <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236e:	f7ff f9c7 	bl	8001700 <HAL_GetTick>
 8002372:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002376:	e00a      	b.n	800238e <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002378:	f7ff f9c2 	bl	8001700 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b64      	cmp	r3, #100	@ 0x64
 8002386:	d902      	bls.n	800238e <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	f000 bec4 	b.w	8003116 <HAL_RCC_OscConfig+0x100e>
 800238e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002392:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002396:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800239a:	fa93 f3a3 	rbit	r3, r3
 800239e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80023a2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023a6:	fab3 f383 	clz	r3, r3
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b3f      	cmp	r3, #63	@ 0x3f
 80023ae:	d802      	bhi.n	80023b6 <HAL_RCC_OscConfig+0x2ae>
 80023b0:	4b19      	ldr	r3, [pc, #100]	@ (8002418 <HAL_RCC_OscConfig+0x310>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	e015      	b.n	80023e2 <HAL_RCC_OscConfig+0x2da>
 80023b6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023ba:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023be:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80023c2:	fa93 f3a3 	rbit	r3, r3
 80023c6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80023ca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023ce:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80023d2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80023d6:	fa93 f3a3 	rbit	r3, r3
 80023da:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80023de:	4b0e      	ldr	r3, [pc, #56]	@ (8002418 <HAL_RCC_OscConfig+0x310>)
 80023e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80023e6:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80023ea:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80023ee:	fa92 f2a2 	rbit	r2, r2
 80023f2:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80023f6:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80023fa:	fab2 f282 	clz	r2, r2
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	f042 0220 	orr.w	r2, r2, #32
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	f002 021f 	and.w	r2, r2, #31
 800240a:	2101      	movs	r1, #1
 800240c:	fa01 f202 	lsl.w	r2, r1, r2
 8002410:	4013      	ands	r3, r2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1b0      	bne.n	8002378 <HAL_RCC_OscConfig+0x270>
 8002416:	e002      	b.n	800241e <HAL_RCC_OscConfig+0x316>
 8002418:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800241c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800241e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002422:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 816c 	beq.w	800270c <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002434:	4bcc      	ldr	r3, [pc, #816]	@ (8002768 <HAL_RCC_OscConfig+0x660>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 030c 	and.w	r3, r3, #12
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00b      	beq.n	8002458 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002440:	4bc9      	ldr	r3, [pc, #804]	@ (8002768 <HAL_RCC_OscConfig+0x660>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 030c 	and.w	r3, r3, #12
 8002448:	2b08      	cmp	r3, #8
 800244a:	d16d      	bne.n	8002528 <HAL_RCC_OscConfig+0x420>
 800244c:	4bc6      	ldr	r3, [pc, #792]	@ (8002768 <HAL_RCC_OscConfig+0x660>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d167      	bne.n	8002528 <HAL_RCC_OscConfig+0x420>
 8002458:	2302      	movs	r3, #2
 800245a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002462:	fa93 f3a3 	rbit	r3, r3
 8002466:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800246a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800246e:	fab3 f383 	clz	r3, r3
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b3f      	cmp	r3, #63	@ 0x3f
 8002476:	d802      	bhi.n	800247e <HAL_RCC_OscConfig+0x376>
 8002478:	4bbb      	ldr	r3, [pc, #748]	@ (8002768 <HAL_RCC_OscConfig+0x660>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	e013      	b.n	80024a6 <HAL_RCC_OscConfig+0x39e>
 800247e:	2302      	movs	r3, #2
 8002480:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002484:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002488:	fa93 f3a3 	rbit	r3, r3
 800248c:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002490:	2302      	movs	r3, #2
 8002492:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002496:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800249a:	fa93 f3a3 	rbit	r3, r3
 800249e:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80024a2:	4bb1      	ldr	r3, [pc, #708]	@ (8002768 <HAL_RCC_OscConfig+0x660>)
 80024a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a6:	2202      	movs	r2, #2
 80024a8:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80024ac:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80024b0:	fa92 f2a2 	rbit	r2, r2
 80024b4:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80024b8:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80024bc:	fab2 f282 	clz	r2, r2
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	f042 0220 	orr.w	r2, r2, #32
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	f002 021f 	and.w	r2, r2, #31
 80024cc:	2101      	movs	r1, #1
 80024ce:	fa01 f202 	lsl.w	r2, r1, r2
 80024d2:	4013      	ands	r3, r2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00a      	beq.n	80024ee <HAL_RCC_OscConfig+0x3e6>
 80024d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d002      	beq.n	80024ee <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	f000 be14 	b.w	8003116 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ee:	4b9e      	ldr	r3, [pc, #632]	@ (8002768 <HAL_RCC_OscConfig+0x660>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	21f8      	movs	r1, #248	@ 0xf8
 8002504:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800250c:	fa91 f1a1 	rbit	r1, r1
 8002510:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002514:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002518:	fab1 f181 	clz	r1, r1
 800251c:	b2c9      	uxtb	r1, r1
 800251e:	408b      	lsls	r3, r1
 8002520:	4991      	ldr	r1, [pc, #580]	@ (8002768 <HAL_RCC_OscConfig+0x660>)
 8002522:	4313      	orrs	r3, r2
 8002524:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002526:	e0f1      	b.n	800270c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002528:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800252c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 8083 	beq.w	8002640 <HAL_RCC_OscConfig+0x538>
 800253a:	2301      	movs	r3, #1
 800253c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002540:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002544:	fa93 f3a3 	rbit	r3, r3
 8002548:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800254c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002550:	fab3 f383 	clz	r3, r3
 8002554:	b2db      	uxtb	r3, r3
 8002556:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800255a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	461a      	mov	r2, r3
 8002562:	2301      	movs	r3, #1
 8002564:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002566:	f7ff f8cb 	bl	8001700 <HAL_GetTick>
 800256a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800256e:	e00a      	b.n	8002586 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002570:	f7ff f8c6 	bl	8001700 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d902      	bls.n	8002586 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	f000 bdc8 	b.w	8003116 <HAL_RCC_OscConfig+0x100e>
 8002586:	2302      	movs	r3, #2
 8002588:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002590:	fa93 f3a3 	rbit	r3, r3
 8002594:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002598:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259c:	fab3 f383 	clz	r3, r3
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b3f      	cmp	r3, #63	@ 0x3f
 80025a4:	d802      	bhi.n	80025ac <HAL_RCC_OscConfig+0x4a4>
 80025a6:	4b70      	ldr	r3, [pc, #448]	@ (8002768 <HAL_RCC_OscConfig+0x660>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	e013      	b.n	80025d4 <HAL_RCC_OscConfig+0x4cc>
 80025ac:	2302      	movs	r3, #2
 80025ae:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80025b6:	fa93 f3a3 	rbit	r3, r3
 80025ba:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80025be:	2302      	movs	r3, #2
 80025c0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80025c4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80025c8:	fa93 f3a3 	rbit	r3, r3
 80025cc:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80025d0:	4b65      	ldr	r3, [pc, #404]	@ (8002768 <HAL_RCC_OscConfig+0x660>)
 80025d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d4:	2202      	movs	r2, #2
 80025d6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80025da:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80025de:	fa92 f2a2 	rbit	r2, r2
 80025e2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80025e6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80025ea:	fab2 f282 	clz	r2, r2
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	f042 0220 	orr.w	r2, r2, #32
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	f002 021f 	and.w	r2, r2, #31
 80025fa:	2101      	movs	r1, #1
 80025fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002600:	4013      	ands	r3, r2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0b4      	beq.n	8002570 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002606:	4b58      	ldr	r3, [pc, #352]	@ (8002768 <HAL_RCC_OscConfig+0x660>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800260e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002612:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	21f8      	movs	r1, #248	@ 0xf8
 800261c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002620:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002624:	fa91 f1a1 	rbit	r1, r1
 8002628:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800262c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002630:	fab1 f181 	clz	r1, r1
 8002634:	b2c9      	uxtb	r1, r1
 8002636:	408b      	lsls	r3, r1
 8002638:	494b      	ldr	r1, [pc, #300]	@ (8002768 <HAL_RCC_OscConfig+0x660>)
 800263a:	4313      	orrs	r3, r2
 800263c:	600b      	str	r3, [r1, #0]
 800263e:	e065      	b.n	800270c <HAL_RCC_OscConfig+0x604>
 8002640:	2301      	movs	r3, #1
 8002642:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002646:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800264a:	fa93 f3a3 	rbit	r3, r3
 800264e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002652:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002656:	fab3 f383 	clz	r3, r3
 800265a:	b2db      	uxtb	r3, r3
 800265c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002660:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	461a      	mov	r2, r3
 8002668:	2300      	movs	r3, #0
 800266a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266c:	f7ff f848 	bl	8001700 <HAL_GetTick>
 8002670:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002674:	e00a      	b.n	800268c <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002676:	f7ff f843 	bl	8001700 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d902      	bls.n	800268c <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	f000 bd45 	b.w	8003116 <HAL_RCC_OscConfig+0x100e>
 800268c:	2302      	movs	r3, #2
 800268e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002692:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002696:	fa93 f3a3 	rbit	r3, r3
 800269a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800269e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026a2:	fab3 f383 	clz	r3, r3
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b3f      	cmp	r3, #63	@ 0x3f
 80026aa:	d802      	bhi.n	80026b2 <HAL_RCC_OscConfig+0x5aa>
 80026ac:	4b2e      	ldr	r3, [pc, #184]	@ (8002768 <HAL_RCC_OscConfig+0x660>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	e013      	b.n	80026da <HAL_RCC_OscConfig+0x5d2>
 80026b2:	2302      	movs	r3, #2
 80026b4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80026bc:	fa93 f3a3 	rbit	r3, r3
 80026c0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80026c4:	2302      	movs	r3, #2
 80026c6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80026ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80026ce:	fa93 f3a3 	rbit	r3, r3
 80026d2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80026d6:	4b24      	ldr	r3, [pc, #144]	@ (8002768 <HAL_RCC_OscConfig+0x660>)
 80026d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026da:	2202      	movs	r2, #2
 80026dc:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80026e0:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80026e4:	fa92 f2a2 	rbit	r2, r2
 80026e8:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80026ec:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80026f0:	fab2 f282 	clz	r2, r2
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	f042 0220 	orr.w	r2, r2, #32
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	f002 021f 	and.w	r2, r2, #31
 8002700:	2101      	movs	r1, #1
 8002702:	fa01 f202 	lsl.w	r2, r1, r2
 8002706:	4013      	ands	r3, r2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1b4      	bne.n	8002676 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800270c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002710:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0308 	and.w	r3, r3, #8
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 8115 	beq.w	800294c <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002722:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002726:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d07e      	beq.n	8002830 <HAL_RCC_OscConfig+0x728>
 8002732:	2301      	movs	r3, #1
 8002734:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002738:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800273c:	fa93 f3a3 	rbit	r3, r3
 8002740:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002744:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002748:	fab3 f383 	clz	r3, r3
 800274c:	b2db      	uxtb	r3, r3
 800274e:	461a      	mov	r2, r3
 8002750:	4b06      	ldr	r3, [pc, #24]	@ (800276c <HAL_RCC_OscConfig+0x664>)
 8002752:	4413      	add	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	461a      	mov	r2, r3
 8002758:	2301      	movs	r3, #1
 800275a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800275c:	f7fe ffd0 	bl	8001700 <HAL_GetTick>
 8002760:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002764:	e00f      	b.n	8002786 <HAL_RCC_OscConfig+0x67e>
 8002766:	bf00      	nop
 8002768:	40021000 	.word	0x40021000
 800276c:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002770:	f7fe ffc6 	bl	8001700 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d902      	bls.n	8002786 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	f000 bcc8 	b.w	8003116 <HAL_RCC_OscConfig+0x100e>
 8002786:	2302      	movs	r3, #2
 8002788:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002790:	fa93 f3a3 	rbit	r3, r3
 8002794:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002798:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800279c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80027a0:	2202      	movs	r2, #2
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	fa93 f2a3 	rbit	r2, r3
 80027b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80027c4:	2202      	movs	r2, #2
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	fa93 f2a3 	rbit	r2, r3
 80027d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027da:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80027de:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027e0:	4bb0      	ldr	r3, [pc, #704]	@ (8002aa4 <HAL_RCC_OscConfig+0x99c>)
 80027e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80027ec:	2102      	movs	r1, #2
 80027ee:	6019      	str	r1, [r3, #0]
 80027f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	fa93 f1a3 	rbit	r1, r3
 80027fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002802:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002806:	6019      	str	r1, [r3, #0]
  return result;
 8002808:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800280c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	fab3 f383 	clz	r3, r3
 8002816:	b2db      	uxtb	r3, r3
 8002818:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800281c:	b2db      	uxtb	r3, r3
 800281e:	f003 031f 	and.w	r3, r3, #31
 8002822:	2101      	movs	r1, #1
 8002824:	fa01 f303 	lsl.w	r3, r1, r3
 8002828:	4013      	ands	r3, r2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0a0      	beq.n	8002770 <HAL_RCC_OscConfig+0x668>
 800282e:	e08d      	b.n	800294c <HAL_RCC_OscConfig+0x844>
 8002830:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002834:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002838:	2201      	movs	r2, #1
 800283a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002840:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	fa93 f2a3 	rbit	r2, r3
 800284a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800284e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002852:	601a      	str	r2, [r3, #0]
  return result;
 8002854:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002858:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800285c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800285e:	fab3 f383 	clz	r3, r3
 8002862:	b2db      	uxtb	r3, r3
 8002864:	461a      	mov	r2, r3
 8002866:	4b90      	ldr	r3, [pc, #576]	@ (8002aa8 <HAL_RCC_OscConfig+0x9a0>)
 8002868:	4413      	add	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	461a      	mov	r2, r3
 800286e:	2300      	movs	r3, #0
 8002870:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002872:	f7fe ff45 	bl	8001700 <HAL_GetTick>
 8002876:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800287a:	e00a      	b.n	8002892 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800287c:	f7fe ff40 	bl	8001700 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d902      	bls.n	8002892 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	f000 bc42 	b.w	8003116 <HAL_RCC_OscConfig+0x100e>
 8002892:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002896:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800289a:	2202      	movs	r2, #2
 800289c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	fa93 f2a3 	rbit	r2, r3
 80028ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ba:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80028be:	2202      	movs	r2, #2
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	fa93 f2a3 	rbit	r2, r3
 80028d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028de:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80028e2:	2202      	movs	r2, #2
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ea:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	fa93 f2a3 	rbit	r2, r3
 80028f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80028fc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028fe:	4b69      	ldr	r3, [pc, #420]	@ (8002aa4 <HAL_RCC_OscConfig+0x99c>)
 8002900:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002902:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002906:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800290a:	2102      	movs	r1, #2
 800290c:	6019      	str	r1, [r3, #0]
 800290e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002912:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	fa93 f1a3 	rbit	r1, r3
 800291c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002920:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002924:	6019      	str	r1, [r3, #0]
  return result;
 8002926:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800292a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	fab3 f383 	clz	r3, r3
 8002934:	b2db      	uxtb	r3, r3
 8002936:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800293a:	b2db      	uxtb	r3, r3
 800293c:	f003 031f 	and.w	r3, r3, #31
 8002940:	2101      	movs	r1, #1
 8002942:	fa01 f303 	lsl.w	r3, r1, r3
 8002946:	4013      	ands	r3, r2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d197      	bne.n	800287c <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800294c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002950:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 819e 	beq.w	8002c9e <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002962:	2300      	movs	r3, #0
 8002964:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002968:	4b4e      	ldr	r3, [pc, #312]	@ (8002aa4 <HAL_RCC_OscConfig+0x99c>)
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d116      	bne.n	80029a2 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002974:	4b4b      	ldr	r3, [pc, #300]	@ (8002aa4 <HAL_RCC_OscConfig+0x99c>)
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	4a4a      	ldr	r2, [pc, #296]	@ (8002aa4 <HAL_RCC_OscConfig+0x99c>)
 800297a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800297e:	61d3      	str	r3, [r2, #28]
 8002980:	4b48      	ldr	r3, [pc, #288]	@ (8002aa4 <HAL_RCC_OscConfig+0x99c>)
 8002982:	69db      	ldr	r3, [r3, #28]
 8002984:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002988:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800298c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002996:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800299a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800299c:	2301      	movs	r3, #1
 800299e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a2:	4b42      	ldr	r3, [pc, #264]	@ (8002aac <HAL_RCC_OscConfig+0x9a4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d11a      	bne.n	80029e4 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ae:	4b3f      	ldr	r3, [pc, #252]	@ (8002aac <HAL_RCC_OscConfig+0x9a4>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a3e      	ldr	r2, [pc, #248]	@ (8002aac <HAL_RCC_OscConfig+0x9a4>)
 80029b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ba:	f7fe fea1 	bl	8001700 <HAL_GetTick>
 80029be:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c2:	e009      	b.n	80029d8 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029c4:	f7fe fe9c 	bl	8001700 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b64      	cmp	r3, #100	@ 0x64
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e39e      	b.n	8003116 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d8:	4b34      	ldr	r3, [pc, #208]	@ (8002aac <HAL_RCC_OscConfig+0x9a4>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0ef      	beq.n	80029c4 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d106      	bne.n	8002a02 <HAL_RCC_OscConfig+0x8fa>
 80029f4:	4b2b      	ldr	r3, [pc, #172]	@ (8002aa4 <HAL_RCC_OscConfig+0x99c>)
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	4a2a      	ldr	r2, [pc, #168]	@ (8002aa4 <HAL_RCC_OscConfig+0x99c>)
 80029fa:	f043 0301 	orr.w	r3, r3, #1
 80029fe:	6213      	str	r3, [r2, #32]
 8002a00:	e035      	b.n	8002a6e <HAL_RCC_OscConfig+0x966>
 8002a02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10c      	bne.n	8002a2c <HAL_RCC_OscConfig+0x924>
 8002a12:	4b24      	ldr	r3, [pc, #144]	@ (8002aa4 <HAL_RCC_OscConfig+0x99c>)
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	4a23      	ldr	r2, [pc, #140]	@ (8002aa4 <HAL_RCC_OscConfig+0x99c>)
 8002a18:	f023 0301 	bic.w	r3, r3, #1
 8002a1c:	6213      	str	r3, [r2, #32]
 8002a1e:	4b21      	ldr	r3, [pc, #132]	@ (8002aa4 <HAL_RCC_OscConfig+0x99c>)
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	4a20      	ldr	r2, [pc, #128]	@ (8002aa4 <HAL_RCC_OscConfig+0x99c>)
 8002a24:	f023 0304 	bic.w	r3, r3, #4
 8002a28:	6213      	str	r3, [r2, #32]
 8002a2a:	e020      	b.n	8002a6e <HAL_RCC_OscConfig+0x966>
 8002a2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a30:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	2b05      	cmp	r3, #5
 8002a3a:	d10c      	bne.n	8002a56 <HAL_RCC_OscConfig+0x94e>
 8002a3c:	4b19      	ldr	r3, [pc, #100]	@ (8002aa4 <HAL_RCC_OscConfig+0x99c>)
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	4a18      	ldr	r2, [pc, #96]	@ (8002aa4 <HAL_RCC_OscConfig+0x99c>)
 8002a42:	f043 0304 	orr.w	r3, r3, #4
 8002a46:	6213      	str	r3, [r2, #32]
 8002a48:	4b16      	ldr	r3, [pc, #88]	@ (8002aa4 <HAL_RCC_OscConfig+0x99c>)
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	4a15      	ldr	r2, [pc, #84]	@ (8002aa4 <HAL_RCC_OscConfig+0x99c>)
 8002a4e:	f043 0301 	orr.w	r3, r3, #1
 8002a52:	6213      	str	r3, [r2, #32]
 8002a54:	e00b      	b.n	8002a6e <HAL_RCC_OscConfig+0x966>
 8002a56:	4b13      	ldr	r3, [pc, #76]	@ (8002aa4 <HAL_RCC_OscConfig+0x99c>)
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	4a12      	ldr	r2, [pc, #72]	@ (8002aa4 <HAL_RCC_OscConfig+0x99c>)
 8002a5c:	f023 0301 	bic.w	r3, r3, #1
 8002a60:	6213      	str	r3, [r2, #32]
 8002a62:	4b10      	ldr	r3, [pc, #64]	@ (8002aa4 <HAL_RCC_OscConfig+0x99c>)
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	4a0f      	ldr	r2, [pc, #60]	@ (8002aa4 <HAL_RCC_OscConfig+0x99c>)
 8002a68:	f023 0304 	bic.w	r3, r3, #4
 8002a6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f000 8087 	beq.w	8002b8e <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a80:	f7fe fe3e 	bl	8001700 <HAL_GetTick>
 8002a84:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a88:	e012      	b.n	8002ab0 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a8a:	f7fe fe39 	bl	8001700 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d908      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e339      	b.n	8003116 <HAL_RCC_OscConfig+0x100e>
 8002aa2:	bf00      	nop
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	10908120 	.word	0x10908120
 8002aac:	40007000 	.word	0x40007000
 8002ab0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ab4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002ab8:	2202      	movs	r2, #2
 8002aba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	fa93 f2a3 	rbit	r2, r3
 8002aca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ace:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002adc:	2202      	movs	r2, #2
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ae4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	fa93 f2a3 	rbit	r2, r3
 8002aee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002af2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002af6:	601a      	str	r2, [r3, #0]
  return result;
 8002af8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002afc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002b00:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b02:	fab3 f383 	clz	r3, r3
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d102      	bne.n	8002b18 <HAL_RCC_OscConfig+0xa10>
 8002b12:	4b98      	ldr	r3, [pc, #608]	@ (8002d74 <HAL_RCC_OscConfig+0xc6c>)
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	e013      	b.n	8002b40 <HAL_RCC_OscConfig+0xa38>
 8002b18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b1c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002b20:	2202      	movs	r2, #2
 8002b22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b28:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	fa93 f2a3 	rbit	r2, r3
 8002b32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b36:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	4b8d      	ldr	r3, [pc, #564]	@ (8002d74 <HAL_RCC_OscConfig+0xc6c>)
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b40:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b44:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002b48:	2102      	movs	r1, #2
 8002b4a:	6011      	str	r1, [r2, #0]
 8002b4c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b50:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002b54:	6812      	ldr	r2, [r2, #0]
 8002b56:	fa92 f1a2 	rbit	r1, r2
 8002b5a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b5e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002b62:	6011      	str	r1, [r2, #0]
  return result;
 8002b64:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b68:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002b6c:	6812      	ldr	r2, [r2, #0]
 8002b6e:	fab2 f282 	clz	r2, r2
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	f002 021f 	and.w	r2, r2, #31
 8002b7e:	2101      	movs	r1, #1
 8002b80:	fa01 f202 	lsl.w	r2, r1, r2
 8002b84:	4013      	ands	r3, r2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f43f af7f 	beq.w	8002a8a <HAL_RCC_OscConfig+0x982>
 8002b8c:	e07d      	b.n	8002c8a <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b8e:	f7fe fdb7 	bl	8001700 <HAL_GetTick>
 8002b92:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b96:	e00b      	b.n	8002bb0 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b98:	f7fe fdb2 	bl	8001700 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e2b2      	b.n	8003116 <HAL_RCC_OscConfig+0x100e>
 8002bb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002bb8:	2202      	movs	r2, #2
 8002bba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bc0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	fa93 f2a3 	rbit	r2, r3
 8002bca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bce:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bd8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002bdc:	2202      	movs	r2, #2
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	fa93 f2a3 	rbit	r2, r3
 8002bee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bf2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002bf6:	601a      	str	r2, [r3, #0]
  return result;
 8002bf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bfc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002c00:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c02:	fab3 f383 	clz	r3, r3
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d102      	bne.n	8002c18 <HAL_RCC_OscConfig+0xb10>
 8002c12:	4b58      	ldr	r3, [pc, #352]	@ (8002d74 <HAL_RCC_OscConfig+0xc6c>)
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	e013      	b.n	8002c40 <HAL_RCC_OscConfig+0xb38>
 8002c18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c1c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002c20:	2202      	movs	r2, #2
 8002c22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c28:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	fa93 f2a3 	rbit	r2, r3
 8002c32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c36:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	4b4d      	ldr	r3, [pc, #308]	@ (8002d74 <HAL_RCC_OscConfig+0xc6c>)
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c40:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c44:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002c48:	2102      	movs	r1, #2
 8002c4a:	6011      	str	r1, [r2, #0]
 8002c4c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c50:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002c54:	6812      	ldr	r2, [r2, #0]
 8002c56:	fa92 f1a2 	rbit	r1, r2
 8002c5a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c5e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002c62:	6011      	str	r1, [r2, #0]
  return result;
 8002c64:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c68:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002c6c:	6812      	ldr	r2, [r2, #0]
 8002c6e:	fab2 f282 	clz	r2, r2
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c78:	b2d2      	uxtb	r2, r2
 8002c7a:	f002 021f 	and.w	r2, r2, #31
 8002c7e:	2101      	movs	r1, #1
 8002c80:	fa01 f202 	lsl.w	r2, r1, r2
 8002c84:	4013      	ands	r3, r2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d186      	bne.n	8002b98 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c8a:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d105      	bne.n	8002c9e <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c92:	4b38      	ldr	r3, [pc, #224]	@ (8002d74 <HAL_RCC_OscConfig+0xc6c>)
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	4a37      	ldr	r2, [pc, #220]	@ (8002d74 <HAL_RCC_OscConfig+0xc6c>)
 8002c98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c9c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 8232 	beq.w	8003114 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cb0:	4b30      	ldr	r3, [pc, #192]	@ (8002d74 <HAL_RCC_OscConfig+0xc6c>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 030c 	and.w	r3, r3, #12
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	f000 8201 	beq.w	80030c0 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cc2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	f040 8157 	bne.w	8002f7e <HAL_RCC_OscConfig+0xe76>
 8002cd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002cd8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002cdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce2:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	fa93 f2a3 	rbit	r2, r3
 8002cec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cf0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002cf4:	601a      	str	r2, [r3, #0]
  return result;
 8002cf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cfa:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002cfe:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d00:	fab3 f383 	clz	r3, r3
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d0a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	461a      	mov	r2, r3
 8002d12:	2300      	movs	r3, #0
 8002d14:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d16:	f7fe fcf3 	bl	8001700 <HAL_GetTick>
 8002d1a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d1e:	e009      	b.n	8002d34 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d20:	f7fe fcee 	bl	8001700 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e1f0      	b.n	8003116 <HAL_RCC_OscConfig+0x100e>
 8002d34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d38:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002d3c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d46:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	fa93 f2a3 	rbit	r2, r3
 8002d50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d54:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002d58:	601a      	str	r2, [r3, #0]
  return result;
 8002d5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d5e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002d62:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d64:	fab3 f383 	clz	r3, r3
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b3f      	cmp	r3, #63	@ 0x3f
 8002d6c:	d804      	bhi.n	8002d78 <HAL_RCC_OscConfig+0xc70>
 8002d6e:	4b01      	ldr	r3, [pc, #4]	@ (8002d74 <HAL_RCC_OscConfig+0xc6c>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	e029      	b.n	8002dc8 <HAL_RCC_OscConfig+0xcc0>
 8002d74:	40021000 	.word	0x40021000
 8002d78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d7c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002d80:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d8a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	fa93 f2a3 	rbit	r2, r3
 8002d94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d98:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002da2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002da6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002db0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	fa93 f2a3 	rbit	r2, r3
 8002dba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dbe:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	4bc3      	ldr	r3, [pc, #780]	@ (80030d4 <HAL_RCC_OscConfig+0xfcc>)
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002dcc:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002dd0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002dd4:	6011      	str	r1, [r2, #0]
 8002dd6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002dda:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002dde:	6812      	ldr	r2, [r2, #0]
 8002de0:	fa92 f1a2 	rbit	r1, r2
 8002de4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002de8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002dec:	6011      	str	r1, [r2, #0]
  return result;
 8002dee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002df2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002df6:	6812      	ldr	r2, [r2, #0]
 8002df8:	fab2 f282 	clz	r2, r2
 8002dfc:	b2d2      	uxtb	r2, r2
 8002dfe:	f042 0220 	orr.w	r2, r2, #32
 8002e02:	b2d2      	uxtb	r2, r2
 8002e04:	f002 021f 	and.w	r2, r2, #31
 8002e08:	2101      	movs	r1, #1
 8002e0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e0e:	4013      	ands	r3, r2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d185      	bne.n	8002d20 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e14:	4baf      	ldr	r3, [pc, #700]	@ (80030d4 <HAL_RCC_OscConfig+0xfcc>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002e1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e20:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002e28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e2c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	430b      	orrs	r3, r1
 8002e36:	49a7      	ldr	r1, [pc, #668]	@ (80030d4 <HAL_RCC_OscConfig+0xfcc>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	604b      	str	r3, [r1, #4]
 8002e3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e40:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002e44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e4e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	fa93 f2a3 	rbit	r2, r3
 8002e58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e5c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002e60:	601a      	str	r2, [r3, #0]
  return result;
 8002e62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e66:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002e6a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e6c:	fab3 f383 	clz	r3, r3
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002e76:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	2301      	movs	r3, #1
 8002e80:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e82:	f7fe fc3d 	bl	8001700 <HAL_GetTick>
 8002e86:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e8a:	e009      	b.n	8002ea0 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e8c:	f7fe fc38 	bl	8001700 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e13a      	b.n	8003116 <HAL_RCC_OscConfig+0x100e>
 8002ea0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ea4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002ea8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002eac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eb2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	fa93 f2a3 	rbit	r2, r3
 8002ebc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ec0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002ec4:	601a      	str	r2, [r3, #0]
  return result;
 8002ec6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eca:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002ece:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ed0:	fab3 f383 	clz	r3, r3
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b3f      	cmp	r3, #63	@ 0x3f
 8002ed8:	d802      	bhi.n	8002ee0 <HAL_RCC_OscConfig+0xdd8>
 8002eda:	4b7e      	ldr	r3, [pc, #504]	@ (80030d4 <HAL_RCC_OscConfig+0xfcc>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	e027      	b.n	8002f30 <HAL_RCC_OscConfig+0xe28>
 8002ee0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002ee8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002eec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	fa93 f2a3 	rbit	r2, r3
 8002efc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f00:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f0a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002f0e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f18:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	fa93 f2a3 	rbit	r2, r3
 8002f22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f26:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	4b69      	ldr	r3, [pc, #420]	@ (80030d4 <HAL_RCC_OscConfig+0xfcc>)
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f30:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f34:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002f38:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002f3c:	6011      	str	r1, [r2, #0]
 8002f3e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f42:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002f46:	6812      	ldr	r2, [r2, #0]
 8002f48:	fa92 f1a2 	rbit	r1, r2
 8002f4c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f50:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002f54:	6011      	str	r1, [r2, #0]
  return result;
 8002f56:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f5a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002f5e:	6812      	ldr	r2, [r2, #0]
 8002f60:	fab2 f282 	clz	r2, r2
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	f042 0220 	orr.w	r2, r2, #32
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	f002 021f 	and.w	r2, r2, #31
 8002f70:	2101      	movs	r1, #1
 8002f72:	fa01 f202 	lsl.w	r2, r1, r2
 8002f76:	4013      	ands	r3, r2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d087      	beq.n	8002e8c <HAL_RCC_OscConfig+0xd84>
 8002f7c:	e0ca      	b.n	8003114 <HAL_RCC_OscConfig+0x100c>
 8002f7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f82:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002f86:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f90:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	fa93 f2a3 	rbit	r2, r3
 8002f9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f9e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002fa2:	601a      	str	r2, [r3, #0]
  return result;
 8002fa4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fa8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002fac:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fae:	fab3 f383 	clz	r3, r3
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002fb8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc4:	f7fe fb9c 	bl	8001700 <HAL_GetTick>
 8002fc8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fcc:	e009      	b.n	8002fe2 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fce:	f7fe fb97 	bl	8001700 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e099      	b.n	8003116 <HAL_RCC_OscConfig+0x100e>
 8002fe2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002fea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	fa93 f2a3 	rbit	r2, r3
 8002ffe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003002:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003006:	601a      	str	r2, [r3, #0]
  return result;
 8003008:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800300c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003010:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003012:	fab3 f383 	clz	r3, r3
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b3f      	cmp	r3, #63	@ 0x3f
 800301a:	d802      	bhi.n	8003022 <HAL_RCC_OscConfig+0xf1a>
 800301c:	4b2d      	ldr	r3, [pc, #180]	@ (80030d4 <HAL_RCC_OscConfig+0xfcc>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	e027      	b.n	8003072 <HAL_RCC_OscConfig+0xf6a>
 8003022:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003026:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800302a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800302e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003030:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003034:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	fa93 f2a3 	rbit	r2, r3
 800303e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003042:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800304c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003050:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800305a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	fa93 f2a3 	rbit	r2, r3
 8003064:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003068:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	4b19      	ldr	r3, [pc, #100]	@ (80030d4 <HAL_RCC_OscConfig+0xfcc>)
 8003070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003072:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003076:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800307a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800307e:	6011      	str	r1, [r2, #0]
 8003080:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003084:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003088:	6812      	ldr	r2, [r2, #0]
 800308a:	fa92 f1a2 	rbit	r1, r2
 800308e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003092:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003096:	6011      	str	r1, [r2, #0]
  return result;
 8003098:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800309c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80030a0:	6812      	ldr	r2, [r2, #0]
 80030a2:	fab2 f282 	clz	r2, r2
 80030a6:	b2d2      	uxtb	r2, r2
 80030a8:	f042 0220 	orr.w	r2, r2, #32
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	f002 021f 	and.w	r2, r2, #31
 80030b2:	2101      	movs	r1, #1
 80030b4:	fa01 f202 	lsl.w	r2, r1, r2
 80030b8:	4013      	ands	r3, r2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d187      	bne.n	8002fce <HAL_RCC_OscConfig+0xec6>
 80030be:	e029      	b.n	8003114 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d103      	bne.n	80030d8 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e020      	b.n	8003116 <HAL_RCC_OscConfig+0x100e>
 80030d4:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030d8:	4b11      	ldr	r3, [pc, #68]	@ (8003120 <HAL_RCC_OscConfig+0x1018>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80030e0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80030e4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80030e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d10b      	bne.n	8003110 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80030f8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80030fc:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003100:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003104:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800310c:	429a      	cmp	r2, r3
 800310e:	d001      	beq.n	8003114 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e000      	b.n	8003116 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40021000 	.word	0x40021000

08003124 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b09e      	sub	sp, #120	@ 0x78
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800312e:	2300      	movs	r3, #0
 8003130:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d101      	bne.n	800313c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e154      	b.n	80033e6 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800313c:	4b89      	ldr	r3, [pc, #548]	@ (8003364 <HAL_RCC_ClockConfig+0x240>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	429a      	cmp	r2, r3
 8003148:	d910      	bls.n	800316c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314a:	4b86      	ldr	r3, [pc, #536]	@ (8003364 <HAL_RCC_ClockConfig+0x240>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f023 0207 	bic.w	r2, r3, #7
 8003152:	4984      	ldr	r1, [pc, #528]	@ (8003364 <HAL_RCC_ClockConfig+0x240>)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	4313      	orrs	r3, r2
 8003158:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800315a:	4b82      	ldr	r3, [pc, #520]	@ (8003364 <HAL_RCC_ClockConfig+0x240>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0307 	and.w	r3, r3, #7
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	429a      	cmp	r2, r3
 8003166:	d001      	beq.n	800316c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e13c      	b.n	80033e6 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d008      	beq.n	800318a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003178:	4b7b      	ldr	r3, [pc, #492]	@ (8003368 <HAL_RCC_ClockConfig+0x244>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	4978      	ldr	r1, [pc, #480]	@ (8003368 <HAL_RCC_ClockConfig+0x244>)
 8003186:	4313      	orrs	r3, r2
 8003188:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 80cd 	beq.w	8003332 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d137      	bne.n	8003210 <HAL_RCC_ClockConfig+0xec>
 80031a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031a8:	fa93 f3a3 	rbit	r3, r3
 80031ac:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80031ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b0:	fab3 f383 	clz	r3, r3
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b3f      	cmp	r3, #63	@ 0x3f
 80031b8:	d802      	bhi.n	80031c0 <HAL_RCC_ClockConfig+0x9c>
 80031ba:	4b6b      	ldr	r3, [pc, #428]	@ (8003368 <HAL_RCC_ClockConfig+0x244>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	e00f      	b.n	80031e0 <HAL_RCC_ClockConfig+0xbc>
 80031c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80031c8:	fa93 f3a3 	rbit	r3, r3
 80031cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80031ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80031d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031d6:	fa93 f3a3 	rbit	r3, r3
 80031da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80031dc:	4b62      	ldr	r3, [pc, #392]	@ (8003368 <HAL_RCC_ClockConfig+0x244>)
 80031de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80031e4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80031e6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80031e8:	fa92 f2a2 	rbit	r2, r2
 80031ec:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80031ee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80031f0:	fab2 f282 	clz	r2, r2
 80031f4:	b2d2      	uxtb	r2, r2
 80031f6:	f042 0220 	orr.w	r2, r2, #32
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	f002 021f 	and.w	r2, r2, #31
 8003200:	2101      	movs	r1, #1
 8003202:	fa01 f202 	lsl.w	r2, r1, r2
 8003206:	4013      	ands	r3, r2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d171      	bne.n	80032f0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e0ea      	b.n	80033e6 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2b02      	cmp	r3, #2
 8003216:	d137      	bne.n	8003288 <HAL_RCC_ClockConfig+0x164>
 8003218:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800321c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003220:	fa93 f3a3 	rbit	r3, r3
 8003224:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003226:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003228:	fab3 f383 	clz	r3, r3
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003230:	d802      	bhi.n	8003238 <HAL_RCC_ClockConfig+0x114>
 8003232:	4b4d      	ldr	r3, [pc, #308]	@ (8003368 <HAL_RCC_ClockConfig+0x244>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	e00f      	b.n	8003258 <HAL_RCC_ClockConfig+0x134>
 8003238:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800323c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003240:	fa93 f3a3 	rbit	r3, r3
 8003244:	647b      	str	r3, [r7, #68]	@ 0x44
 8003246:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800324a:	643b      	str	r3, [r7, #64]	@ 0x40
 800324c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800324e:	fa93 f3a3 	rbit	r3, r3
 8003252:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003254:	4b44      	ldr	r3, [pc, #272]	@ (8003368 <HAL_RCC_ClockConfig+0x244>)
 8003256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003258:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800325c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800325e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003260:	fa92 f2a2 	rbit	r2, r2
 8003264:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003266:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003268:	fab2 f282 	clz	r2, r2
 800326c:	b2d2      	uxtb	r2, r2
 800326e:	f042 0220 	orr.w	r2, r2, #32
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	f002 021f 	and.w	r2, r2, #31
 8003278:	2101      	movs	r1, #1
 800327a:	fa01 f202 	lsl.w	r2, r1, r2
 800327e:	4013      	ands	r3, r2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d135      	bne.n	80032f0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e0ae      	b.n	80033e6 <HAL_RCC_ClockConfig+0x2c2>
 8003288:	2302      	movs	r3, #2
 800328a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800328e:	fa93 f3a3 	rbit	r3, r3
 8003292:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003296:	fab3 f383 	clz	r3, r3
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b3f      	cmp	r3, #63	@ 0x3f
 800329e:	d802      	bhi.n	80032a6 <HAL_RCC_ClockConfig+0x182>
 80032a0:	4b31      	ldr	r3, [pc, #196]	@ (8003368 <HAL_RCC_ClockConfig+0x244>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	e00d      	b.n	80032c2 <HAL_RCC_ClockConfig+0x19e>
 80032a6:	2302      	movs	r3, #2
 80032a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ac:	fa93 f3a3 	rbit	r3, r3
 80032b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80032b2:	2302      	movs	r3, #2
 80032b4:	623b      	str	r3, [r7, #32]
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	fa93 f3a3 	rbit	r3, r3
 80032bc:	61fb      	str	r3, [r7, #28]
 80032be:	4b2a      	ldr	r3, [pc, #168]	@ (8003368 <HAL_RCC_ClockConfig+0x244>)
 80032c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c2:	2202      	movs	r2, #2
 80032c4:	61ba      	str	r2, [r7, #24]
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	fa92 f2a2 	rbit	r2, r2
 80032cc:	617a      	str	r2, [r7, #20]
  return result;
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	fab2 f282 	clz	r2, r2
 80032d4:	b2d2      	uxtb	r2, r2
 80032d6:	f042 0220 	orr.w	r2, r2, #32
 80032da:	b2d2      	uxtb	r2, r2
 80032dc:	f002 021f 	and.w	r2, r2, #31
 80032e0:	2101      	movs	r1, #1
 80032e2:	fa01 f202 	lsl.w	r2, r1, r2
 80032e6:	4013      	ands	r3, r2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d101      	bne.n	80032f0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e07a      	b.n	80033e6 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003368 <HAL_RCC_ClockConfig+0x244>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f023 0203 	bic.w	r2, r3, #3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	491a      	ldr	r1, [pc, #104]	@ (8003368 <HAL_RCC_ClockConfig+0x244>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003302:	f7fe f9fd 	bl	8001700 <HAL_GetTick>
 8003306:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003308:	e00a      	b.n	8003320 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800330a:	f7fe f9f9 	bl	8001700 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003318:	4293      	cmp	r3, r2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e062      	b.n	80033e6 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003320:	4b11      	ldr	r3, [pc, #68]	@ (8003368 <HAL_RCC_ClockConfig+0x244>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f003 020c 	and.w	r2, r3, #12
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	429a      	cmp	r2, r3
 8003330:	d1eb      	bne.n	800330a <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003332:	4b0c      	ldr	r3, [pc, #48]	@ (8003364 <HAL_RCC_ClockConfig+0x240>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0307 	and.w	r3, r3, #7
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	429a      	cmp	r2, r3
 800333e:	d215      	bcs.n	800336c <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003340:	4b08      	ldr	r3, [pc, #32]	@ (8003364 <HAL_RCC_ClockConfig+0x240>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f023 0207 	bic.w	r2, r3, #7
 8003348:	4906      	ldr	r1, [pc, #24]	@ (8003364 <HAL_RCC_ClockConfig+0x240>)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	4313      	orrs	r3, r2
 800334e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003350:	4b04      	ldr	r3, [pc, #16]	@ (8003364 <HAL_RCC_ClockConfig+0x240>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	429a      	cmp	r2, r3
 800335c:	d006      	beq.n	800336c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e041      	b.n	80033e6 <HAL_RCC_ClockConfig+0x2c2>
 8003362:	bf00      	nop
 8003364:	40022000 	.word	0x40022000
 8003368:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	d008      	beq.n	800338a <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003378:	4b1d      	ldr	r3, [pc, #116]	@ (80033f0 <HAL_RCC_ClockConfig+0x2cc>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	491a      	ldr	r1, [pc, #104]	@ (80033f0 <HAL_RCC_ClockConfig+0x2cc>)
 8003386:	4313      	orrs	r3, r2
 8003388:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0308 	and.w	r3, r3, #8
 8003392:	2b00      	cmp	r3, #0
 8003394:	d009      	beq.n	80033aa <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003396:	4b16      	ldr	r3, [pc, #88]	@ (80033f0 <HAL_RCC_ClockConfig+0x2cc>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	4912      	ldr	r1, [pc, #72]	@ (80033f0 <HAL_RCC_ClockConfig+0x2cc>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80033aa:	f000 f829 	bl	8003400 <HAL_RCC_GetSysClockFreq>
 80033ae:	4601      	mov	r1, r0
 80033b0:	4b0f      	ldr	r3, [pc, #60]	@ (80033f0 <HAL_RCC_ClockConfig+0x2cc>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033b8:	22f0      	movs	r2, #240	@ 0xf0
 80033ba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	fa92 f2a2 	rbit	r2, r2
 80033c2:	60fa      	str	r2, [r7, #12]
  return result;
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	fab2 f282 	clz	r2, r2
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	40d3      	lsrs	r3, r2
 80033ce:	4a09      	ldr	r2, [pc, #36]	@ (80033f4 <HAL_RCC_ClockConfig+0x2d0>)
 80033d0:	5cd3      	ldrb	r3, [r2, r3]
 80033d2:	fa21 f303 	lsr.w	r3, r1, r3
 80033d6:	4a08      	ldr	r2, [pc, #32]	@ (80033f8 <HAL_RCC_ClockConfig+0x2d4>)
 80033d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80033da:	4b08      	ldr	r3, [pc, #32]	@ (80033fc <HAL_RCC_ClockConfig+0x2d8>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fe f94a 	bl	8001678 <HAL_InitTick>
  
  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3778      	adds	r7, #120	@ 0x78
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40021000 	.word	0x40021000
 80033f4:	08004e78 	.word	0x08004e78
 80033f8:	20000028 	.word	0x20000028
 80033fc:	2000002c 	.word	0x2000002c

08003400 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003400:	b480      	push	{r7}
 8003402:	b087      	sub	sp, #28
 8003404:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003406:	2300      	movs	r3, #0
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	2300      	movs	r3, #0
 800340c:	60bb      	str	r3, [r7, #8]
 800340e:	2300      	movs	r3, #0
 8003410:	617b      	str	r3, [r7, #20]
 8003412:	2300      	movs	r3, #0
 8003414:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003416:	2300      	movs	r3, #0
 8003418:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800341a:	4b1e      	ldr	r3, [pc, #120]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x94>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	2b04      	cmp	r3, #4
 8003428:	d002      	beq.n	8003430 <HAL_RCC_GetSysClockFreq+0x30>
 800342a:	2b08      	cmp	r3, #8
 800342c:	d003      	beq.n	8003436 <HAL_RCC_GetSysClockFreq+0x36>
 800342e:	e026      	b.n	800347e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003430:	4b19      	ldr	r3, [pc, #100]	@ (8003498 <HAL_RCC_GetSysClockFreq+0x98>)
 8003432:	613b      	str	r3, [r7, #16]
      break;
 8003434:	e026      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	0c9b      	lsrs	r3, r3, #18
 800343a:	f003 030f 	and.w	r3, r3, #15
 800343e:	4a17      	ldr	r2, [pc, #92]	@ (800349c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003440:	5cd3      	ldrb	r3, [r2, r3]
 8003442:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003444:	4b13      	ldr	r3, [pc, #76]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x94>)
 8003446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003448:	f003 030f 	and.w	r3, r3, #15
 800344c:	4a14      	ldr	r2, [pc, #80]	@ (80034a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800344e:	5cd3      	ldrb	r3, [r2, r3]
 8003450:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d008      	beq.n	800346e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800345c:	4a0e      	ldr	r2, [pc, #56]	@ (8003498 <HAL_RCC_GetSysClockFreq+0x98>)
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	fbb2 f2f3 	udiv	r2, r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	fb02 f303 	mul.w	r3, r2, r3
 800346a:	617b      	str	r3, [r7, #20]
 800346c:	e004      	b.n	8003478 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a0c      	ldr	r2, [pc, #48]	@ (80034a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003472:	fb02 f303 	mul.w	r3, r2, r3
 8003476:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	613b      	str	r3, [r7, #16]
      break;
 800347c:	e002      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800347e:	4b06      	ldr	r3, [pc, #24]	@ (8003498 <HAL_RCC_GetSysClockFreq+0x98>)
 8003480:	613b      	str	r3, [r7, #16]
      break;
 8003482:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003484:	693b      	ldr	r3, [r7, #16]
}
 8003486:	4618      	mov	r0, r3
 8003488:	371c      	adds	r7, #28
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	40021000 	.word	0x40021000
 8003498:	007a1200 	.word	0x007a1200
 800349c:	08004e90 	.word	0x08004e90
 80034a0:	08004ea0 	.word	0x08004ea0
 80034a4:	003d0900 	.word	0x003d0900

080034a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034ac:	4b03      	ldr	r3, [pc, #12]	@ (80034bc <HAL_RCC_GetHCLKFreq+0x14>)
 80034ae:	681b      	ldr	r3, [r3, #0]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	20000028 	.word	0x20000028

080034c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80034c6:	f7ff ffef 	bl	80034a8 <HAL_RCC_GetHCLKFreq>
 80034ca:	4601      	mov	r1, r0
 80034cc:	4b0b      	ldr	r3, [pc, #44]	@ (80034fc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80034d4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80034d8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	fa92 f2a2 	rbit	r2, r2
 80034e0:	603a      	str	r2, [r7, #0]
  return result;
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	fab2 f282 	clz	r2, r2
 80034e8:	b2d2      	uxtb	r2, r2
 80034ea:	40d3      	lsrs	r3, r2
 80034ec:	4a04      	ldr	r2, [pc, #16]	@ (8003500 <HAL_RCC_GetPCLK1Freq+0x40>)
 80034ee:	5cd3      	ldrb	r3, [r2, r3]
 80034f0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80034f4:	4618      	mov	r0, r3
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40021000 	.word	0x40021000
 8003500:	08004e88 	.word	0x08004e88

08003504 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800350a:	f7ff ffcd 	bl	80034a8 <HAL_RCC_GetHCLKFreq>
 800350e:	4601      	mov	r1, r0
 8003510:	4b0b      	ldr	r3, [pc, #44]	@ (8003540 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003518:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800351c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	fa92 f2a2 	rbit	r2, r2
 8003524:	603a      	str	r2, [r7, #0]
  return result;
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	fab2 f282 	clz	r2, r2
 800352c:	b2d2      	uxtb	r2, r2
 800352e:	40d3      	lsrs	r3, r2
 8003530:	4a04      	ldr	r2, [pc, #16]	@ (8003544 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003532:	5cd3      	ldrb	r3, [r2, r3]
 8003534:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003538:	4618      	mov	r0, r3
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40021000 	.word	0x40021000
 8003544:	08004e88 	.word	0x08004e88

08003548 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b092      	sub	sp, #72	@ 0x48
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003554:	2300      	movs	r3, #0
 8003556:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003558:	2300      	movs	r3, #0
 800355a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 80cb 	beq.w	8003702 <HAL_RCCEx_PeriphCLKConfig+0x1ba>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800356c:	4b85      	ldr	r3, [pc, #532]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800356e:	69db      	ldr	r3, [r3, #28]
 8003570:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10e      	bne.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003578:	4b82      	ldr	r3, [pc, #520]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800357a:	69db      	ldr	r3, [r3, #28]
 800357c:	4a81      	ldr	r2, [pc, #516]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800357e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003582:	61d3      	str	r3, [r2, #28]
 8003584:	4b7f      	ldr	r3, [pc, #508]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800358c:	60bb      	str	r3, [r7, #8]
 800358e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003590:	2301      	movs	r3, #1
 8003592:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003596:	4b7c      	ldr	r3, [pc, #496]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d118      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035a2:	4b79      	ldr	r3, [pc, #484]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a78      	ldr	r2, [pc, #480]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80035a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ae:	f7fe f8a7 	bl	8001700 <HAL_GetTick>
 80035b2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b4:	e008      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b6:	f7fe f8a3 	bl	8001700 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b64      	cmp	r3, #100	@ 0x64
 80035c2:	d901      	bls.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e0d9      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x234>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c8:	4b6f      	ldr	r3, [pc, #444]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0f0      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035d4:	4b6b      	ldr	r3, [pc, #428]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d07b      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x194>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d074      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035f2:	4b64      	ldr	r3, [pc, #400]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003600:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003604:	fa93 f3a3 	rbit	r3, r3
 8003608:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800360a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800360c:	fab3 f383 	clz	r3, r3
 8003610:	b2db      	uxtb	r3, r3
 8003612:	461a      	mov	r2, r3
 8003614:	4b5d      	ldr	r3, [pc, #372]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003616:	4413      	add	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	461a      	mov	r2, r3
 800361c:	2301      	movs	r3, #1
 800361e:	6013      	str	r3, [r2, #0]
 8003620:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003624:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003628:	fa93 f3a3 	rbit	r3, r3
 800362c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800362e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003630:	fab3 f383 	clz	r3, r3
 8003634:	b2db      	uxtb	r3, r3
 8003636:	461a      	mov	r2, r3
 8003638:	4b54      	ldr	r3, [pc, #336]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800363a:	4413      	add	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	461a      	mov	r2, r3
 8003640:	2300      	movs	r3, #0
 8003642:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003644:	4a4f      	ldr	r2, [pc, #316]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003648:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800364a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	2b00      	cmp	r3, #0
 8003652:	d043      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003654:	f7fe f854 	bl	8001700 <HAL_GetTick>
 8003658:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800365a:	e00a      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800365c:	f7fe f850 	bl	8001700 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800366a:	4293      	cmp	r3, r2
 800366c:	d901      	bls.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e084      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003672:	2302      	movs	r3, #2
 8003674:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003678:	fa93 f3a3 	rbit	r3, r3
 800367c:	627b      	str	r3, [r7, #36]	@ 0x24
 800367e:	2302      	movs	r3, #2
 8003680:	623b      	str	r3, [r7, #32]
 8003682:	6a3b      	ldr	r3, [r7, #32]
 8003684:	fa93 f3a3 	rbit	r3, r3
 8003688:	61fb      	str	r3, [r7, #28]
  return result;
 800368a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800368c:	fab3 f383 	clz	r3, r3
 8003690:	b2db      	uxtb	r3, r3
 8003692:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b00      	cmp	r3, #0
 800369a:	d102      	bne.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800369c:	4b39      	ldr	r3, [pc, #228]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	e007      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 80036a2:	2302      	movs	r3, #2
 80036a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	fa93 f3a3 	rbit	r3, r3
 80036ac:	617b      	str	r3, [r7, #20]
 80036ae:	4b35      	ldr	r3, [pc, #212]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80036b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b2:	2202      	movs	r2, #2
 80036b4:	613a      	str	r2, [r7, #16]
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	fa92 f2a2 	rbit	r2, r2
 80036bc:	60fa      	str	r2, [r7, #12]
  return result;
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	fab2 f282 	clz	r2, r2
 80036c4:	b2d2      	uxtb	r2, r2
 80036c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	f002 021f 	and.w	r2, r2, #31
 80036d0:	2101      	movs	r1, #1
 80036d2:	fa01 f202 	lsl.w	r2, r1, r2
 80036d6:	4013      	ands	r3, r2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0bf      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80036dc:	4b29      	ldr	r3, [pc, #164]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	4926      	ldr	r1, [pc, #152]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036ee:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d105      	bne.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036f6:	4b23      	ldr	r3, [pc, #140]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	4a22      	ldr	r2, [pc, #136]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80036fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003700:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d008      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800370e:	4b1d      	ldr	r3, [pc, #116]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003712:	f023 0203 	bic.w	r2, r3, #3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	491a      	ldr	r1, [pc, #104]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800371c:	4313      	orrs	r3, r2
 800371e:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0320 	and.w	r3, r3, #32
 8003728:	2b00      	cmp	r3, #0
 800372a:	d008      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800372c:	4b15      	ldr	r3, [pc, #84]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800372e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003730:	f023 0210 	bic.w	r2, r3, #16
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	4912      	ldr	r1, [pc, #72]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800373a:	4313      	orrs	r3, r2
 800373c:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003746:	2b00      	cmp	r3, #0
 8003748:	d008      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800374a:	4b0e      	ldr	r3, [pc, #56]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800374c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800374e:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	490b      	ldr	r1, [pc, #44]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003758:	4313      	orrs	r3, r2
 800375a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d008      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003768:	4b06      	ldr	r3, [pc, #24]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800376a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800376c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	4903      	ldr	r1, [pc, #12]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003776:	4313      	orrs	r3, r2
 8003778:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3748      	adds	r7, #72	@ 0x48
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40021000 	.word	0x40021000
 8003788:	40007000 	.word	0x40007000
 800378c:	10908100 	.word	0x10908100

08003790 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b08a      	sub	sp, #40	@ 0x28
 8003794:	af02      	add	r7, sp, #8
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	603b      	str	r3, [r7, #0]
 800379c:	4613      	mov	r3, r2
 800379e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037a4:	2b20      	cmp	r3, #32
 80037a6:	d177      	bne.n	8003898 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d002      	beq.n	80037b4 <HAL_UART_Transmit+0x24>
 80037ae:	88fb      	ldrh	r3, [r7, #6]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e070      	b.n	800389a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2221      	movs	r2, #33	@ 0x21
 80037c4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037c6:	f7fd ff9b 	bl	8001700 <HAL_GetTick>
 80037ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	88fa      	ldrh	r2, [r7, #6]
 80037d0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	88fa      	ldrh	r2, [r7, #6]
 80037d8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037e4:	d108      	bne.n	80037f8 <HAL_UART_Transmit+0x68>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d104      	bne.n	80037f8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80037ee:	2300      	movs	r3, #0
 80037f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	61bb      	str	r3, [r7, #24]
 80037f6:	e003      	b.n	8003800 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037fc:	2300      	movs	r3, #0
 80037fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003800:	e02f      	b.n	8003862 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	2200      	movs	r2, #0
 800380a:	2180      	movs	r1, #128	@ 0x80
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 fe5f 	bl	80044d0 <UART_WaitOnFlagUntilTimeout>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d004      	beq.n	8003822 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2220      	movs	r2, #32
 800381c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e03b      	b.n	800389a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10b      	bne.n	8003840 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	881a      	ldrh	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003834:	b292      	uxth	r2, r2
 8003836:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	3302      	adds	r3, #2
 800383c:	61bb      	str	r3, [r7, #24]
 800383e:	e007      	b.n	8003850 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	781a      	ldrb	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	3301      	adds	r3, #1
 800384e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003856:	b29b      	uxth	r3, r3
 8003858:	3b01      	subs	r3, #1
 800385a:	b29a      	uxth	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1c9      	bne.n	8003802 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2200      	movs	r2, #0
 8003876:	2140      	movs	r1, #64	@ 0x40
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 fe29 	bl	80044d0 <UART_WaitOnFlagUntilTimeout>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d004      	beq.n	800388e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2220      	movs	r2, #32
 8003888:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e005      	b.n	800389a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2220      	movs	r2, #32
 8003892:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003894:	2300      	movs	r3, #0
 8003896:	e000      	b.n	800389a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003898:	2302      	movs	r3, #2
  }
}
 800389a:	4618      	mov	r0, r3
 800389c:	3720      	adds	r7, #32
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b090      	sub	sp, #64	@ 0x40
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038b6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038c2:	2b80      	cmp	r3, #128	@ 0x80
 80038c4:	d139      	bne.n	800393a <HAL_UART_DMAStop+0x98>
 80038c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038c8:	2b21      	cmp	r3, #33	@ 0x21
 80038ca:	d136      	bne.n	800393a <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	3308      	adds	r3, #8
 80038d2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d4:	6a3b      	ldr	r3, [r7, #32]
 80038d6:	e853 3f00 	ldrex	r3, [r3]
 80038da:	61fb      	str	r3, [r7, #28]
   return(result);
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	3308      	adds	r3, #8
 80038ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80038ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038f4:	e841 2300 	strex	r3, r2, [r1]
 80038f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80038fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1e5      	bne.n	80038cc <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003904:	2b00      	cmp	r3, #0
 8003906:	d015      	beq.n	8003934 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800390c:	4618      	mov	r0, r3
 800390e:	f7fe f8de 	bl	8001ace <HAL_DMA_Abort>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00d      	beq.n	8003934 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800391c:	4618      	mov	r0, r3
 800391e:	f7fe f9f5 	bl	8001d0c <HAL_DMA_GetError>
 8003922:	4603      	mov	r3, r0
 8003924:	2b20      	cmp	r3, #32
 8003926:	d105      	bne.n	8003934 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2210      	movs	r2, #16
 800392c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e044      	b.n	80039be <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 fed9 	bl	80046ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003944:	2b40      	cmp	r3, #64	@ 0x40
 8003946:	d139      	bne.n	80039bc <HAL_UART_DMAStop+0x11a>
 8003948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800394a:	2b22      	cmp	r3, #34	@ 0x22
 800394c:	d136      	bne.n	80039bc <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	3308      	adds	r3, #8
 8003954:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	e853 3f00 	ldrex	r3, [r3]
 800395c:	60bb      	str	r3, [r7, #8]
   return(result);
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003964:	633b      	str	r3, [r7, #48]	@ 0x30
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	3308      	adds	r3, #8
 800396c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800396e:	61ba      	str	r2, [r7, #24]
 8003970:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003972:	6979      	ldr	r1, [r7, #20]
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	e841 2300 	strex	r3, r2, [r1]
 800397a:	613b      	str	r3, [r7, #16]
   return(result);
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1e5      	bne.n	800394e <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003986:	2b00      	cmp	r3, #0
 8003988:	d015      	beq.n	80039b6 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800398e:	4618      	mov	r0, r3
 8003990:	f7fe f89d 	bl	8001ace <HAL_DMA_Abort>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00d      	beq.n	80039b6 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fe f9b4 	bl	8001d0c <HAL_DMA_GetError>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b20      	cmp	r3, #32
 80039a8:	d105      	bne.n	80039b6 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2210      	movs	r2, #16
 80039ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e003      	b.n	80039be <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 febe 	bl	8004738 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3740      	adds	r7, #64	@ 0x40
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
	...

080039c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b0ba      	sub	sp, #232	@ 0xe8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80039ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80039f2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80039f6:	4013      	ands	r3, r2
 80039f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80039fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d115      	bne.n	8003a30 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a08:	f003 0320 	and.w	r3, r3, #32
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00f      	beq.n	8003a30 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a14:	f003 0320 	and.w	r3, r3, #32
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d009      	beq.n	8003a30 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 82ab 	beq.w	8003f7c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	4798      	blx	r3
      }
      return;
 8003a2e:	e2a5      	b.n	8003f7c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003a30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 8117 	beq.w	8003c68 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003a3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d106      	bne.n	8003a54 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003a46:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003a4a:	4b85      	ldr	r3, [pc, #532]	@ (8003c60 <HAL_UART_IRQHandler+0x298>)
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 810a 	beq.w	8003c68 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d011      	beq.n	8003a84 <HAL_UART_IRQHandler+0xbc>
 8003a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00b      	beq.n	8003a84 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2201      	movs	r2, #1
 8003a72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a7a:	f043 0201 	orr.w	r2, r3, #1
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d011      	beq.n	8003ab4 <HAL_UART_IRQHandler+0xec>
 8003a90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00b      	beq.n	8003ab4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003aaa:	f043 0204 	orr.w	r2, r3, #4
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d011      	beq.n	8003ae4 <HAL_UART_IRQHandler+0x11c>
 8003ac0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00b      	beq.n	8003ae4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2204      	movs	r2, #4
 8003ad2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ada:	f043 0202 	orr.w	r2, r3, #2
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ae8:	f003 0308 	and.w	r3, r3, #8
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d017      	beq.n	8003b20 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003af4:	f003 0320 	and.w	r3, r3, #32
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d105      	bne.n	8003b08 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003afc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b00:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00b      	beq.n	8003b20 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2208      	movs	r2, #8
 8003b0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b16:	f043 0208 	orr.w	r2, r3, #8
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d012      	beq.n	8003b52 <HAL_UART_IRQHandler+0x18a>
 8003b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b30:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00c      	beq.n	8003b52 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b48:	f043 0220 	orr.w	r2, r3, #32
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 8211 	beq.w	8003f80 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00d      	beq.n	8003b86 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b6e:	f003 0320 	and.w	r3, r3, #32
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d007      	beq.n	8003b86 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b8c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b9a:	2b40      	cmp	r3, #64	@ 0x40
 8003b9c:	d005      	beq.n	8003baa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003b9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ba2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d04f      	beq.n	8003c4a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 fdc4 	bl	8004738 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bba:	2b40      	cmp	r3, #64	@ 0x40
 8003bbc:	d141      	bne.n	8003c42 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	3308      	adds	r3, #8
 8003bc4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003bcc:	e853 3f00 	ldrex	r3, [r3]
 8003bd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003bd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003bd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	3308      	adds	r3, #8
 8003be6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003bea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003bee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003bf6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003bfa:	e841 2300 	strex	r3, r2, [r1]
 8003bfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003c02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1d9      	bne.n	8003bbe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d013      	beq.n	8003c3a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c16:	4a13      	ldr	r2, [pc, #76]	@ (8003c64 <HAL_UART_IRQHandler+0x29c>)
 8003c18:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fd ff93 	bl	8001b4a <HAL_DMA_Abort_IT>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d017      	beq.n	8003c5a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003c34:	4610      	mov	r0, r2
 8003c36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c38:	e00f      	b.n	8003c5a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7fd fcb8 	bl	80015b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c40:	e00b      	b.n	8003c5a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7fd fcb4 	bl	80015b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c48:	e007      	b.n	8003c5a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7fd fcb0 	bl	80015b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003c58:	e192      	b.n	8003f80 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c5a:	bf00      	nop
    return;
 8003c5c:	e190      	b.n	8003f80 <HAL_UART_IRQHandler+0x5b8>
 8003c5e:	bf00      	nop
 8003c60:	04000120 	.word	0x04000120
 8003c64:	080049e3 	.word	0x080049e3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	f040 814b 	bne.w	8003f08 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c76:	f003 0310 	and.w	r3, r3, #16
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 8144 	beq.w	8003f08 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c84:	f003 0310 	and.w	r3, r3, #16
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 813d 	beq.w	8003f08 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2210      	movs	r2, #16
 8003c94:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ca0:	2b40      	cmp	r3, #64	@ 0x40
 8003ca2:	f040 80b5 	bne.w	8003e10 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003cb2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 8164 	beq.w	8003f84 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003cc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	f080 815c 	bcs.w	8003f84 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003cd2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	2b20      	cmp	r3, #32
 8003cde:	f000 8086 	beq.w	8003dee <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003cee:	e853 3f00 	ldrex	r3, [r3]
 8003cf2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003cf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003cfa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cfe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	461a      	mov	r2, r3
 8003d08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003d0c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003d10:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d14:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003d18:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003d1c:	e841 2300 	strex	r3, r2, [r1]
 8003d20:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003d24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1da      	bne.n	8003ce2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	3308      	adds	r3, #8
 8003d32:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d36:	e853 3f00 	ldrex	r3, [r3]
 8003d3a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003d3c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d3e:	f023 0301 	bic.w	r3, r3, #1
 8003d42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	3308      	adds	r3, #8
 8003d4c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003d50:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003d54:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d56:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003d58:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003d5c:	e841 2300 	strex	r3, r2, [r1]
 8003d60:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003d62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1e1      	bne.n	8003d2c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3308      	adds	r3, #8
 8003d6e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d70:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d72:	e853 3f00 	ldrex	r3, [r3]
 8003d76:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003d78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	3308      	adds	r3, #8
 8003d88:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003d8c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003d8e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d90:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003d92:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003d94:	e841 2300 	strex	r3, r2, [r1]
 8003d98:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003d9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1e3      	bne.n	8003d68 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003db6:	e853 3f00 	ldrex	r3, [r3]
 8003dba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003dbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003dbe:	f023 0310 	bic.w	r3, r3, #16
 8003dc2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003dd0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003dd2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003dd6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003dd8:	e841 2300 	strex	r3, r2, [r1]
 8003ddc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003dde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1e4      	bne.n	8003dae <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7fd fe70 	bl	8001ace <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2202      	movs	r2, #2
 8003df2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	4619      	mov	r1, r3
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f7fd fb91 	bl	8001530 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e0e:	e0b9      	b.n	8003f84 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 80ab 	beq.w	8003f88 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003e32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 80a6 	beq.w	8003f88 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e44:	e853 3f00 	ldrex	r3, [r3]
 8003e48:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e50:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	461a      	mov	r2, r3
 8003e5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003e5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e60:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e62:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e66:	e841 2300 	strex	r3, r2, [r1]
 8003e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1e4      	bne.n	8003e3c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	3308      	adds	r3, #8
 8003e78:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7c:	e853 3f00 	ldrex	r3, [r3]
 8003e80:	623b      	str	r3, [r7, #32]
   return(result);
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	f023 0301 	bic.w	r3, r3, #1
 8003e88:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	3308      	adds	r3, #8
 8003e92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003e96:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e9e:	e841 2300 	strex	r3, r2, [r1]
 8003ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1e3      	bne.n	8003e72 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2220      	movs	r2, #32
 8003eae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	e853 3f00 	ldrex	r3, [r3]
 8003eca:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f023 0310 	bic.w	r3, r3, #16
 8003ed2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	461a      	mov	r2, r3
 8003edc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ee0:	61fb      	str	r3, [r7, #28]
 8003ee2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee4:	69b9      	ldr	r1, [r7, #24]
 8003ee6:	69fa      	ldr	r2, [r7, #28]
 8003ee8:	e841 2300 	strex	r3, r2, [r1]
 8003eec:	617b      	str	r3, [r7, #20]
   return(result);
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1e4      	bne.n	8003ebe <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003efa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003efe:	4619      	mov	r1, r3
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f7fd fb15 	bl	8001530 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f06:	e03f      	b.n	8003f88 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00e      	beq.n	8003f32 <HAL_UART_IRQHandler+0x56a>
 8003f14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d008      	beq.n	8003f32 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003f28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 fe00 	bl	8004b30 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f30:	e02d      	b.n	8003f8e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00e      	beq.n	8003f5c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d008      	beq.n	8003f5c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d01c      	beq.n	8003f8c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	4798      	blx	r3
    }
    return;
 8003f5a:	e017      	b.n	8003f8c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d012      	beq.n	8003f8e <HAL_UART_IRQHandler+0x5c6>
 8003f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00c      	beq.n	8003f8e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 fd4a 	bl	8004a0e <UART_EndTransmit_IT>
    return;
 8003f7a:	e008      	b.n	8003f8e <HAL_UART_IRQHandler+0x5c6>
      return;
 8003f7c:	bf00      	nop
 8003f7e:	e006      	b.n	8003f8e <HAL_UART_IRQHandler+0x5c6>
    return;
 8003f80:	bf00      	nop
 8003f82:	e004      	b.n	8003f8e <HAL_UART_IRQHandler+0x5c6>
      return;
 8003f84:	bf00      	nop
 8003f86:	e002      	b.n	8003f8e <HAL_UART_IRQHandler+0x5c6>
      return;
 8003f88:	bf00      	nop
 8003f8a:	e000      	b.n	8003f8e <HAL_UART_IRQHandler+0x5c6>
    return;
 8003f8c:	bf00      	nop
  }

}
 8003f8e:	37e8      	adds	r7, #232	@ 0xe8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	431a      	orrs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	69db      	ldr	r3, [r3, #28]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	4b8a      	ldr	r3, [pc, #552]	@ (8004224 <UART_SetConfig+0x254>)
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6812      	ldr	r2, [r2, #0]
 8004002:	6979      	ldr	r1, [r7, #20]
 8004004:	430b      	orrs	r3, r1
 8004006:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68da      	ldr	r2, [r3, #12]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	4313      	orrs	r3, r2
 800402c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	430a      	orrs	r2, r1
 8004040:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a78      	ldr	r2, [pc, #480]	@ (8004228 <UART_SetConfig+0x258>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d120      	bne.n	800408e <UART_SetConfig+0xbe>
 800404c:	4b77      	ldr	r3, [pc, #476]	@ (800422c <UART_SetConfig+0x25c>)
 800404e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004050:	f003 0303 	and.w	r3, r3, #3
 8004054:	2b03      	cmp	r3, #3
 8004056:	d817      	bhi.n	8004088 <UART_SetConfig+0xb8>
 8004058:	a201      	add	r2, pc, #4	@ (adr r2, 8004060 <UART_SetConfig+0x90>)
 800405a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800405e:	bf00      	nop
 8004060:	08004071 	.word	0x08004071
 8004064:	0800407d 	.word	0x0800407d
 8004068:	08004083 	.word	0x08004083
 800406c:	08004077 	.word	0x08004077
 8004070:	2300      	movs	r3, #0
 8004072:	77fb      	strb	r3, [r7, #31]
 8004074:	e01d      	b.n	80040b2 <UART_SetConfig+0xe2>
 8004076:	2302      	movs	r3, #2
 8004078:	77fb      	strb	r3, [r7, #31]
 800407a:	e01a      	b.n	80040b2 <UART_SetConfig+0xe2>
 800407c:	2304      	movs	r3, #4
 800407e:	77fb      	strb	r3, [r7, #31]
 8004080:	e017      	b.n	80040b2 <UART_SetConfig+0xe2>
 8004082:	2308      	movs	r3, #8
 8004084:	77fb      	strb	r3, [r7, #31]
 8004086:	e014      	b.n	80040b2 <UART_SetConfig+0xe2>
 8004088:	2310      	movs	r3, #16
 800408a:	77fb      	strb	r3, [r7, #31]
 800408c:	e011      	b.n	80040b2 <UART_SetConfig+0xe2>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a67      	ldr	r2, [pc, #412]	@ (8004230 <UART_SetConfig+0x260>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d102      	bne.n	800409e <UART_SetConfig+0xce>
 8004098:	2300      	movs	r3, #0
 800409a:	77fb      	strb	r3, [r7, #31]
 800409c:	e009      	b.n	80040b2 <UART_SetConfig+0xe2>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a64      	ldr	r2, [pc, #400]	@ (8004234 <UART_SetConfig+0x264>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d102      	bne.n	80040ae <UART_SetConfig+0xde>
 80040a8:	2300      	movs	r3, #0
 80040aa:	77fb      	strb	r3, [r7, #31]
 80040ac:	e001      	b.n	80040b2 <UART_SetConfig+0xe2>
 80040ae:	2310      	movs	r3, #16
 80040b0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040ba:	d15a      	bne.n	8004172 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80040bc:	7ffb      	ldrb	r3, [r7, #31]
 80040be:	2b08      	cmp	r3, #8
 80040c0:	d827      	bhi.n	8004112 <UART_SetConfig+0x142>
 80040c2:	a201      	add	r2, pc, #4	@ (adr r2, 80040c8 <UART_SetConfig+0xf8>)
 80040c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c8:	080040ed 	.word	0x080040ed
 80040cc:	080040f5 	.word	0x080040f5
 80040d0:	080040fd 	.word	0x080040fd
 80040d4:	08004113 	.word	0x08004113
 80040d8:	08004103 	.word	0x08004103
 80040dc:	08004113 	.word	0x08004113
 80040e0:	08004113 	.word	0x08004113
 80040e4:	08004113 	.word	0x08004113
 80040e8:	0800410b 	.word	0x0800410b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040ec:	f7ff f9e8 	bl	80034c0 <HAL_RCC_GetPCLK1Freq>
 80040f0:	61b8      	str	r0, [r7, #24]
        break;
 80040f2:	e013      	b.n	800411c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040f4:	f7ff fa06 	bl	8003504 <HAL_RCC_GetPCLK2Freq>
 80040f8:	61b8      	str	r0, [r7, #24]
        break;
 80040fa:	e00f      	b.n	800411c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040fc:	4b4e      	ldr	r3, [pc, #312]	@ (8004238 <UART_SetConfig+0x268>)
 80040fe:	61bb      	str	r3, [r7, #24]
        break;
 8004100:	e00c      	b.n	800411c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004102:	f7ff f97d 	bl	8003400 <HAL_RCC_GetSysClockFreq>
 8004106:	61b8      	str	r0, [r7, #24]
        break;
 8004108:	e008      	b.n	800411c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800410a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800410e:	61bb      	str	r3, [r7, #24]
        break;
 8004110:	e004      	b.n	800411c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004112:	2300      	movs	r3, #0
 8004114:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	77bb      	strb	r3, [r7, #30]
        break;
 800411a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d074      	beq.n	800420c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	005a      	lsls	r2, r3, #1
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	085b      	lsrs	r3, r3, #1
 800412c:	441a      	add	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	fbb2 f3f3 	udiv	r3, r2, r3
 8004136:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	2b0f      	cmp	r3, #15
 800413c:	d916      	bls.n	800416c <UART_SetConfig+0x19c>
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004144:	d212      	bcs.n	800416c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	b29b      	uxth	r3, r3
 800414a:	f023 030f 	bic.w	r3, r3, #15
 800414e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	085b      	lsrs	r3, r3, #1
 8004154:	b29b      	uxth	r3, r3
 8004156:	f003 0307 	and.w	r3, r3, #7
 800415a:	b29a      	uxth	r2, r3
 800415c:	89fb      	ldrh	r3, [r7, #14]
 800415e:	4313      	orrs	r3, r2
 8004160:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	89fa      	ldrh	r2, [r7, #14]
 8004168:	60da      	str	r2, [r3, #12]
 800416a:	e04f      	b.n	800420c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	77bb      	strb	r3, [r7, #30]
 8004170:	e04c      	b.n	800420c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004172:	7ffb      	ldrb	r3, [r7, #31]
 8004174:	2b08      	cmp	r3, #8
 8004176:	d828      	bhi.n	80041ca <UART_SetConfig+0x1fa>
 8004178:	a201      	add	r2, pc, #4	@ (adr r2, 8004180 <UART_SetConfig+0x1b0>)
 800417a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417e:	bf00      	nop
 8004180:	080041a5 	.word	0x080041a5
 8004184:	080041ad 	.word	0x080041ad
 8004188:	080041b5 	.word	0x080041b5
 800418c:	080041cb 	.word	0x080041cb
 8004190:	080041bb 	.word	0x080041bb
 8004194:	080041cb 	.word	0x080041cb
 8004198:	080041cb 	.word	0x080041cb
 800419c:	080041cb 	.word	0x080041cb
 80041a0:	080041c3 	.word	0x080041c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041a4:	f7ff f98c 	bl	80034c0 <HAL_RCC_GetPCLK1Freq>
 80041a8:	61b8      	str	r0, [r7, #24]
        break;
 80041aa:	e013      	b.n	80041d4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041ac:	f7ff f9aa 	bl	8003504 <HAL_RCC_GetPCLK2Freq>
 80041b0:	61b8      	str	r0, [r7, #24]
        break;
 80041b2:	e00f      	b.n	80041d4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041b4:	4b20      	ldr	r3, [pc, #128]	@ (8004238 <UART_SetConfig+0x268>)
 80041b6:	61bb      	str	r3, [r7, #24]
        break;
 80041b8:	e00c      	b.n	80041d4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041ba:	f7ff f921 	bl	8003400 <HAL_RCC_GetSysClockFreq>
 80041be:	61b8      	str	r0, [r7, #24]
        break;
 80041c0:	e008      	b.n	80041d4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041c6:	61bb      	str	r3, [r7, #24]
        break;
 80041c8:	e004      	b.n	80041d4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80041ca:	2300      	movs	r3, #0
 80041cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	77bb      	strb	r3, [r7, #30]
        break;
 80041d2:	bf00      	nop
    }

    if (pclk != 0U)
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d018      	beq.n	800420c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	085a      	lsrs	r2, r3, #1
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	441a      	add	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	2b0f      	cmp	r3, #15
 80041f2:	d909      	bls.n	8004208 <UART_SetConfig+0x238>
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041fa:	d205      	bcs.n	8004208 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	b29a      	uxth	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	60da      	str	r2, [r3, #12]
 8004206:	e001      	b.n	800420c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004218:	7fbb      	ldrb	r3, [r7, #30]
}
 800421a:	4618      	mov	r0, r3
 800421c:	3720      	adds	r7, #32
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	efff69f3 	.word	0xefff69f3
 8004228:	40013800 	.word	0x40013800
 800422c:	40021000 	.word	0x40021000
 8004230:	40004400 	.word	0x40004400
 8004234:	40004800 	.word	0x40004800
 8004238:	007a1200 	.word	0x007a1200

0800423c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004248:	f003 0308 	and.w	r3, r3, #8
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00a      	beq.n	8004266 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	430a      	orrs	r2, r1
 8004264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00a      	beq.n	8004288 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	430a      	orrs	r2, r1
 8004286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00a      	beq.n	80042aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ae:	f003 0304 	and.w	r3, r3, #4
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00a      	beq.n	80042cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	430a      	orrs	r2, r1
 80042ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d0:	f003 0310 	and.w	r3, r3, #16
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00a      	beq.n	80042ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f2:	f003 0320 	and.w	r3, r3, #32
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00a      	beq.n	8004310 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	430a      	orrs	r2, r1
 800430e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004318:	2b00      	cmp	r3, #0
 800431a:	d01a      	beq.n	8004352 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	430a      	orrs	r2, r1
 8004330:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004336:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800433a:	d10a      	bne.n	8004352 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00a      	beq.n	8004374 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	430a      	orrs	r2, r1
 8004372:	605a      	str	r2, [r3, #4]
  }
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b098      	sub	sp, #96	@ 0x60
 8004384:	af02      	add	r7, sp, #8
 8004386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004390:	f7fd f9b6 	bl	8001700 <HAL_GetTick>
 8004394:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0308 	and.w	r3, r3, #8
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d12e      	bne.n	8004402 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043ac:	2200      	movs	r2, #0
 80043ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f88c 	bl	80044d0 <UART_WaitOnFlagUntilTimeout>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d021      	beq.n	8004402 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043c6:	e853 3f00 	ldrex	r3, [r3]
 80043ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	461a      	mov	r2, r3
 80043da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80043de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043e4:	e841 2300 	strex	r3, r2, [r1]
 80043e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80043ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1e6      	bne.n	80043be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2220      	movs	r2, #32
 80043f4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e062      	b.n	80044c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0304 	and.w	r3, r3, #4
 800440c:	2b04      	cmp	r3, #4
 800440e:	d149      	bne.n	80044a4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004410:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004418:	2200      	movs	r2, #0
 800441a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f856 	bl	80044d0 <UART_WaitOnFlagUntilTimeout>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d03c      	beq.n	80044a4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004432:	e853 3f00 	ldrex	r3, [r3]
 8004436:	623b      	str	r3, [r7, #32]
   return(result);
 8004438:	6a3b      	ldr	r3, [r7, #32]
 800443a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800443e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	461a      	mov	r2, r3
 8004446:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004448:	633b      	str	r3, [r7, #48]	@ 0x30
 800444a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800444e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004450:	e841 2300 	strex	r3, r2, [r1]
 8004454:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1e6      	bne.n	800442a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	3308      	adds	r3, #8
 8004462:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	e853 3f00 	ldrex	r3, [r3]
 800446a:	60fb      	str	r3, [r7, #12]
   return(result);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f023 0301 	bic.w	r3, r3, #1
 8004472:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	3308      	adds	r3, #8
 800447a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800447c:	61fa      	str	r2, [r7, #28]
 800447e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004480:	69b9      	ldr	r1, [r7, #24]
 8004482:	69fa      	ldr	r2, [r7, #28]
 8004484:	e841 2300 	strex	r3, r2, [r1]
 8004488:	617b      	str	r3, [r7, #20]
   return(result);
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1e5      	bne.n	800445c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2220      	movs	r2, #32
 8004494:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e011      	b.n	80044c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2220      	movs	r2, #32
 80044a8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2220      	movs	r2, #32
 80044ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3758      	adds	r7, #88	@ 0x58
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	603b      	str	r3, [r7, #0]
 80044dc:	4613      	mov	r3, r2
 80044de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044e0:	e04f      	b.n	8004582 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e8:	d04b      	beq.n	8004582 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ea:	f7fd f909 	bl	8001700 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d302      	bcc.n	8004500 <UART_WaitOnFlagUntilTimeout+0x30>
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d101      	bne.n	8004504 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e04e      	b.n	80045a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0304 	and.w	r3, r3, #4
 800450e:	2b00      	cmp	r3, #0
 8004510:	d037      	beq.n	8004582 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	2b80      	cmp	r3, #128	@ 0x80
 8004516:	d034      	beq.n	8004582 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	2b40      	cmp	r3, #64	@ 0x40
 800451c:	d031      	beq.n	8004582 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	69db      	ldr	r3, [r3, #28]
 8004524:	f003 0308 	and.w	r3, r3, #8
 8004528:	2b08      	cmp	r3, #8
 800452a:	d110      	bne.n	800454e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2208      	movs	r2, #8
 8004532:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f000 f8ff 	bl	8004738 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2208      	movs	r2, #8
 800453e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e029      	b.n	80045a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	69db      	ldr	r3, [r3, #28]
 8004554:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004558:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800455c:	d111      	bne.n	8004582 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004566:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 f8e5 	bl	8004738 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2220      	movs	r2, #32
 8004572:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e00f      	b.n	80045a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	69da      	ldr	r2, [r3, #28]
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	4013      	ands	r3, r2
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	429a      	cmp	r2, r3
 8004590:	bf0c      	ite	eq
 8004592:	2301      	moveq	r3, #1
 8004594:	2300      	movne	r3, #0
 8004596:	b2db      	uxtb	r3, r3
 8004598:	461a      	mov	r2, r3
 800459a:	79fb      	ldrb	r3, [r7, #7]
 800459c:	429a      	cmp	r2, r3
 800459e:	d0a0      	beq.n	80044e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
	...

080045ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b096      	sub	sp, #88	@ 0x58
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	4613      	mov	r3, r2
 80045b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	88fa      	ldrh	r2, [r7, #6]
 80045c4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2222      	movs	r2, #34	@ 0x22
 80045d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d028      	beq.n	8004632 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045e4:	4a3e      	ldr	r2, [pc, #248]	@ (80046e0 <UART_Start_Receive_DMA+0x134>)
 80045e6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045ec:	4a3d      	ldr	r2, [pc, #244]	@ (80046e4 <UART_Start_Receive_DMA+0x138>)
 80045ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045f4:	4a3c      	ldr	r2, [pc, #240]	@ (80046e8 <UART_Start_Receive_DMA+0x13c>)
 80045f6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045fc:	2200      	movs	r2, #0
 80045fe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	3324      	adds	r3, #36	@ 0x24
 800460a:	4619      	mov	r1, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004610:	461a      	mov	r2, r3
 8004612:	88fb      	ldrh	r3, [r7, #6]
 8004614:	f7fd f9fc 	bl	8001a10 <HAL_DMA_Start_IT>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d009      	beq.n	8004632 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2210      	movs	r2, #16
 8004622:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2220      	movs	r2, #32
 800462a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e051      	b.n	80046d6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d018      	beq.n	800466c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004640:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004642:	e853 3f00 	ldrex	r3, [r3]
 8004646:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800464a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800464e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	461a      	mov	r2, r3
 8004656:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004658:	64bb      	str	r3, [r7, #72]	@ 0x48
 800465a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800465e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004660:	e841 2300 	strex	r3, r2, [r1]
 8004664:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004666:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1e6      	bne.n	800463a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	3308      	adds	r3, #8
 8004672:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004676:	e853 3f00 	ldrex	r3, [r3]
 800467a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800467c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467e:	f043 0301 	orr.w	r3, r3, #1
 8004682:	653b      	str	r3, [r7, #80]	@ 0x50
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	3308      	adds	r3, #8
 800468a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800468c:	637a      	str	r2, [r7, #52]	@ 0x34
 800468e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004690:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004692:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004694:	e841 2300 	strex	r3, r2, [r1]
 8004698:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800469a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1e5      	bne.n	800466c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	3308      	adds	r3, #8
 80046a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	e853 3f00 	ldrex	r3, [r3]
 80046ae:	613b      	str	r3, [r7, #16]
   return(result);
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	3308      	adds	r3, #8
 80046be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80046c0:	623a      	str	r2, [r7, #32]
 80046c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c4:	69f9      	ldr	r1, [r7, #28]
 80046c6:	6a3a      	ldr	r2, [r7, #32]
 80046c8:	e841 2300 	strex	r3, r2, [r1]
 80046cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1e5      	bne.n	80046a0 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3758      	adds	r7, #88	@ 0x58
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	08004801 	.word	0x08004801
 80046e4:	08004927 	.word	0x08004927
 80046e8:	08004965 	.word	0x08004965

080046ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b089      	sub	sp, #36	@ 0x24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	e853 3f00 	ldrex	r3, [r3]
 8004700:	60bb      	str	r3, [r7, #8]
   return(result);
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004708:	61fb      	str	r3, [r7, #28]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	461a      	mov	r2, r3
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	61bb      	str	r3, [r7, #24]
 8004714:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004716:	6979      	ldr	r1, [r7, #20]
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	e841 2300 	strex	r3, r2, [r1]
 800471e:	613b      	str	r3, [r7, #16]
   return(result);
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1e6      	bne.n	80046f4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2220      	movs	r2, #32
 800472a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800472c:	bf00      	nop
 800472e:	3724      	adds	r7, #36	@ 0x24
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004738:	b480      	push	{r7}
 800473a:	b095      	sub	sp, #84	@ 0x54
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004748:	e853 3f00 	ldrex	r3, [r3]
 800474c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800474e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004750:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004754:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	461a      	mov	r2, r3
 800475c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800475e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004760:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004762:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004764:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004766:	e841 2300 	strex	r3, r2, [r1]
 800476a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800476c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1e6      	bne.n	8004740 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	3308      	adds	r3, #8
 8004778:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477a:	6a3b      	ldr	r3, [r7, #32]
 800477c:	e853 3f00 	ldrex	r3, [r3]
 8004780:	61fb      	str	r3, [r7, #28]
   return(result);
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	f023 0301 	bic.w	r3, r3, #1
 8004788:	64bb      	str	r3, [r7, #72]	@ 0x48
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	3308      	adds	r3, #8
 8004790:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004792:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004794:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004796:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004798:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800479a:	e841 2300 	strex	r3, r2, [r1]
 800479e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80047a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1e5      	bne.n	8004772 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d118      	bne.n	80047e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	e853 3f00 	ldrex	r3, [r3]
 80047ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	f023 0310 	bic.w	r3, r3, #16
 80047c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	461a      	mov	r2, r3
 80047ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047cc:	61bb      	str	r3, [r7, #24]
 80047ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d0:	6979      	ldr	r1, [r7, #20]
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	e841 2300 	strex	r3, r2, [r1]
 80047d8:	613b      	str	r3, [r7, #16]
   return(result);
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1e6      	bne.n	80047ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2220      	movs	r2, #32
 80047e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80047f4:	bf00      	nop
 80047f6:	3754      	adds	r7, #84	@ 0x54
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b09c      	sub	sp, #112	@ 0x70
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	2b20      	cmp	r3, #32
 8004814:	d071      	beq.n	80048fa <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8004816:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004818:	2200      	movs	r2, #0
 800481a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800481e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004824:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004826:	e853 3f00 	ldrex	r3, [r3]
 800482a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800482c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800482e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004832:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004834:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	461a      	mov	r2, r3
 800483a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800483c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800483e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004840:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004842:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004844:	e841 2300 	strex	r3, r2, [r1]
 8004848:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800484a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1e6      	bne.n	800481e <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004850:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	3308      	adds	r3, #8
 8004856:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800485a:	e853 3f00 	ldrex	r3, [r3]
 800485e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004862:	f023 0301 	bic.w	r3, r3, #1
 8004866:	667b      	str	r3, [r7, #100]	@ 0x64
 8004868:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	3308      	adds	r3, #8
 800486e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004870:	647a      	str	r2, [r7, #68]	@ 0x44
 8004872:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004874:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004876:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004878:	e841 2300 	strex	r3, r2, [r1]
 800487c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800487e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1e5      	bne.n	8004850 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004884:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	3308      	adds	r3, #8
 800488a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488e:	e853 3f00 	ldrex	r3, [r3]
 8004892:	623b      	str	r3, [r7, #32]
   return(result);
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800489a:	663b      	str	r3, [r7, #96]	@ 0x60
 800489c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	3308      	adds	r3, #8
 80048a2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80048a4:	633a      	str	r2, [r7, #48]	@ 0x30
 80048a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048ac:	e841 2300 	strex	r3, r2, [r1]
 80048b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1e5      	bne.n	8004884 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80048b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048ba:	2220      	movs	r2, #32
 80048bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d118      	bne.n	80048fa <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	e853 3f00 	ldrex	r3, [r3]
 80048d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f023 0310 	bic.w	r3, r3, #16
 80048dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	461a      	mov	r2, r3
 80048e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048e6:	61fb      	str	r3, [r7, #28]
 80048e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ea:	69b9      	ldr	r1, [r7, #24]
 80048ec:	69fa      	ldr	r2, [r7, #28]
 80048ee:	e841 2300 	strex	r3, r2, [r1]
 80048f2:	617b      	str	r3, [r7, #20]
   return(result);
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1e6      	bne.n	80048c8 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048fc:	2200      	movs	r2, #0
 80048fe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004900:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004902:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004904:	2b01      	cmp	r3, #1
 8004906:	d107      	bne.n	8004918 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004908:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800490a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800490e:	4619      	mov	r1, r3
 8004910:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004912:	f7fc fe0d 	bl	8001530 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004916:	e002      	b.n	800491e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004918:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800491a:	f7ff fb45 	bl	8003fa8 <HAL_UART_RxCpltCallback>
}
 800491e:	bf00      	nop
 8004920:	3770      	adds	r7, #112	@ 0x70
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b084      	sub	sp, #16
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004932:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2201      	movs	r2, #1
 8004938:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800493e:	2b01      	cmp	r3, #1
 8004940:	d109      	bne.n	8004956 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004948:	085b      	lsrs	r3, r3, #1
 800494a:	b29b      	uxth	r3, r3
 800494c:	4619      	mov	r1, r3
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f7fc fdee 	bl	8001530 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004954:	e002      	b.n	800495c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f7ff fb30 	bl	8003fbc <HAL_UART_RxHalfCpltCallback>
}
 800495c:	bf00      	nop
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004970:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004976:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800497e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800498a:	2b80      	cmp	r3, #128	@ 0x80
 800498c:	d109      	bne.n	80049a2 <UART_DMAError+0x3e>
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	2b21      	cmp	r3, #33	@ 0x21
 8004992:	d106      	bne.n	80049a2 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	2200      	movs	r2, #0
 8004998:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800499c:	6978      	ldr	r0, [r7, #20]
 800499e:	f7ff fea5 	bl	80046ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ac:	2b40      	cmp	r3, #64	@ 0x40
 80049ae:	d109      	bne.n	80049c4 <UART_DMAError+0x60>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2b22      	cmp	r3, #34	@ 0x22
 80049b4:	d106      	bne.n	80049c4 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80049be:	6978      	ldr	r0, [r7, #20]
 80049c0:	f7ff feba 	bl	8004738 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049ca:	f043 0210 	orr.w	r2, r3, #16
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049d4:	6978      	ldr	r0, [r7, #20]
 80049d6:	f7fc fdeb 	bl	80015b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049da:	bf00      	nop
 80049dc:	3718      	adds	r7, #24
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b084      	sub	sp, #16
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f7fc fdd5 	bl	80015b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a06:	bf00      	nop
 8004a08:	3710      	adds	r7, #16
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b088      	sub	sp, #32
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	e853 3f00 	ldrex	r3, [r3]
 8004a22:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a2a:	61fb      	str	r3, [r7, #28]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	461a      	mov	r2, r3
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	61bb      	str	r3, [r7, #24]
 8004a36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a38:	6979      	ldr	r1, [r7, #20]
 8004a3a:	69ba      	ldr	r2, [r7, #24]
 8004a3c:	e841 2300 	strex	r3, r2, [r1]
 8004a40:	613b      	str	r3, [r7, #16]
   return(result);
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1e6      	bne.n	8004a16 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f7ff fa9d 	bl	8003f94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a5a:	bf00      	nop
 8004a5c:	3720      	adds	r7, #32
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b086      	sub	sp, #24
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	60f8      	str	r0, [r7, #12]
 8004a6a:	60b9      	str	r1, [r7, #8]
 8004a6c:	607a      	str	r2, [r7, #4]
 8004a6e:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e056      	b.n	8004b28 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d106      	bne.n	8004a90 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f7fc fc48 	bl	8001320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2224      	movs	r2, #36	@ 0x24
 8004a94:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f022 0201 	bic.w	r2, r2, #1
 8004aa4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d002      	beq.n	8004ab4 <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f7ff fbc4 	bl	800423c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f7ff fa8b 	bl	8003fd0 <UART_SetConfig>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d101      	bne.n	8004ac4 <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e031      	b.n	8004b28 <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689a      	ldr	r2, [r3, #8]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ad2:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	055b      	lsls	r3, r3, #21
 8004aec:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	041b      	lsls	r3, r3, #16
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 8004b02:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	6812      	ldr	r2, [r2, #0]
 8004b0a:	6979      	ldr	r1, [r7, #20]
 8004b0c:	430b      	orrs	r3, r1
 8004b0e:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f042 0201 	orr.w	r2, r2, #1
 8004b1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f7ff fc2d 	bl	8004380 <UART_CheckIdleState>
 8004b26:	4603      	mov	r3, r0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3718      	adds	r7, #24
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b08c      	sub	sp, #48	@ 0x30
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b58:	2b20      	cmp	r3, #32
 8004b5a:	d142      	bne.n	8004be2 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d002      	beq.n	8004b68 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8004b62:	88fb      	ldrh	r3, [r7, #6]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d101      	bne.n	8004b6c <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e03b      	b.n	8004be4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004b78:	88fb      	ldrh	r3, [r7, #6]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	68b9      	ldr	r1, [r7, #8]
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f7ff fd14 	bl	80045ac <UART_Start_Receive_DMA>
 8004b84:	4603      	mov	r3, r0
 8004b86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004b8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d124      	bne.n	8004bdc <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d11d      	bne.n	8004bd6 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2210      	movs	r2, #16
 8004ba0:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	e853 3f00 	ldrex	r3, [r3]
 8004bae:	617b      	str	r3, [r7, #20]
   return(result);
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f043 0310 	orr.w	r3, r3, #16
 8004bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bc2:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc4:	6a39      	ldr	r1, [r7, #32]
 8004bc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bc8:	e841 2300 	strex	r3, r2, [r1]
 8004bcc:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1e6      	bne.n	8004ba2 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8004bd4:	e002      	b.n	8004bdc <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8004bdc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004be0:	e000      	b.n	8004be4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004be2:	2302      	movs	r3, #2
  }
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3730      	adds	r7, #48	@ 0x30
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <memset>:
 8004bec:	4402      	add	r2, r0
 8004bee:	4603      	mov	r3, r0
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d100      	bne.n	8004bf6 <memset+0xa>
 8004bf4:	4770      	bx	lr
 8004bf6:	f803 1b01 	strb.w	r1, [r3], #1
 8004bfa:	e7f9      	b.n	8004bf0 <memset+0x4>

08004bfc <__libc_init_array>:
 8004bfc:	b570      	push	{r4, r5, r6, lr}
 8004bfe:	4d0d      	ldr	r5, [pc, #52]	@ (8004c34 <__libc_init_array+0x38>)
 8004c00:	4c0d      	ldr	r4, [pc, #52]	@ (8004c38 <__libc_init_array+0x3c>)
 8004c02:	1b64      	subs	r4, r4, r5
 8004c04:	10a4      	asrs	r4, r4, #2
 8004c06:	2600      	movs	r6, #0
 8004c08:	42a6      	cmp	r6, r4
 8004c0a:	d109      	bne.n	8004c20 <__libc_init_array+0x24>
 8004c0c:	4d0b      	ldr	r5, [pc, #44]	@ (8004c3c <__libc_init_array+0x40>)
 8004c0e:	4c0c      	ldr	r4, [pc, #48]	@ (8004c40 <__libc_init_array+0x44>)
 8004c10:	f000 f826 	bl	8004c60 <_init>
 8004c14:	1b64      	subs	r4, r4, r5
 8004c16:	10a4      	asrs	r4, r4, #2
 8004c18:	2600      	movs	r6, #0
 8004c1a:	42a6      	cmp	r6, r4
 8004c1c:	d105      	bne.n	8004c2a <__libc_init_array+0x2e>
 8004c1e:	bd70      	pop	{r4, r5, r6, pc}
 8004c20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c24:	4798      	blx	r3
 8004c26:	3601      	adds	r6, #1
 8004c28:	e7ee      	b.n	8004c08 <__libc_init_array+0xc>
 8004c2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c2e:	4798      	blx	r3
 8004c30:	3601      	adds	r6, #1
 8004c32:	e7f2      	b.n	8004c1a <__libc_init_array+0x1e>
 8004c34:	08004eb0 	.word	0x08004eb0
 8004c38:	08004eb0 	.word	0x08004eb0
 8004c3c:	08004eb0 	.word	0x08004eb0
 8004c40:	08004eb4 	.word	0x08004eb4

08004c44 <memcpy>:
 8004c44:	440a      	add	r2, r1
 8004c46:	4291      	cmp	r1, r2
 8004c48:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c4c:	d100      	bne.n	8004c50 <memcpy+0xc>
 8004c4e:	4770      	bx	lr
 8004c50:	b510      	push	{r4, lr}
 8004c52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c5a:	4291      	cmp	r1, r2
 8004c5c:	d1f9      	bne.n	8004c52 <memcpy+0xe>
 8004c5e:	bd10      	pop	{r4, pc}

08004c60 <_init>:
 8004c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c62:	bf00      	nop
 8004c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c66:	bc08      	pop	{r3}
 8004c68:	469e      	mov	lr, r3
 8004c6a:	4770      	bx	lr

08004c6c <_fini>:
 8004c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c6e:	bf00      	nop
 8004c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c72:	bc08      	pop	{r3}
 8004c74:	469e      	mov	lr, r3
 8004c76:	4770      	bx	lr
