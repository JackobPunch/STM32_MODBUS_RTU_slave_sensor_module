
modbusTrying.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005088  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  08005210  08005210  00006210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005464  08005464  00007098  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005464  08005464  00006464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800546c  0800546c  00007098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800546c  0800546c  0000646c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005470  08005470  00006470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  08005474  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007098  2**0
                  CONTENTS
 10 .bss          00000598  20000098  20000098  00007098  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000630  20000630  00007098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c228  00000000  00000000  000070c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023a0  00000000  00000000  000132f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008f8  00000000  00000000  00015690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006bb  00000000  00000000  00015f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b293  00000000  00000000  00016643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d435  00000000  00000000  000318d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b40a  00000000  00000000  0003ed0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000da115  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002a34  00000000  00000000  000da158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  000dcb8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000098 	.word	0x20000098
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080051f8 	.word	0x080051f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000009c 	.word	0x2000009c
 80001c4:	080051f8 	.word	0x080051f8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  initialise_monitor_handles();
 80001dc:	f004 ffac 	bl	8005138 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e0:	f001 f8f0 	bl	80013c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e4:	f000 f817 	bl	8000216 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e8:	f000 f8c0 	bl	800036c <MX_GPIO_Init>
  MX_DMA_Init();
 80001ec:	f000 f898 	bl	8000320 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80001f0:	f000 f864 	bl	80002bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // printf("Starting Modbus RTU Slave...\n"); // Removed to prevent timing delays

  // Initialize UART callbacks
  UART_Callbacks_Init();
 80001f4:	f001 f85e 	bl	80012b4 <UART_Callbacks_Init>
  // printf("UART callbacks initialized\n"); // Removed

  // Initialize Modbus RTU slave
  Modbus_Init();
 80001f8:	f000 fe66 	bl	8000ec8 <Modbus_Init>
  // printf("Array check: [0]=0x%04X [1]=0x%04X [12]=0x%04X [13]=0x%04X\n",
  //        Modbus_Device_GetRegister(0), Modbus_Device_GetRegister(1),
  //        Modbus_Device_GetRegister(12), Modbus_Device_GetRegister(13));

  // Initialize test functions
  Modbus_Test_Init();
 80001fc:	f000 ff20 	bl	8001040 <Modbus_Test_Init>
  while (1)
  {
    /* USER CODE BEGIN 3 */

    // Update sensor values periodically
    Modbus_Device_UpdateSensors();
 8000200:	f000 fe5a 	bl	8000eb8 <Modbus_Device_UpdateSensors>

    // Update test values
    Modbus_Test_Update();
 8000204:	f000 ff24 	bl	8001050 <Modbus_Test_Update>

    // Process Modbus (if needed)
    Modbus_Process();
 8000208:	f000 fee8 	bl	8000fdc <Modbus_Process>

    // Add small delay to prevent busy waiting
    HAL_Delay(100);
 800020c:	2064      	movs	r0, #100	@ 0x64
 800020e:	f001 f93f 	bl	8001490 <HAL_Delay>
    Modbus_Device_UpdateSensors();
 8000212:	bf00      	nop
 8000214:	e7f4      	b.n	8000200 <main+0x28>

08000216 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000216:	b580      	push	{r7, lr}
 8000218:	b096      	sub	sp, #88	@ 0x58
 800021a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000220:	2228      	movs	r2, #40	@ 0x28
 8000222:	2100      	movs	r1, #0
 8000224:	4618      	mov	r0, r3
 8000226:	f004 fbea 	bl	80049fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022a:	f107 031c 	add.w	r3, r7, #28
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]
 8000238:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800023a:	1d3b      	adds	r3, r7, #4
 800023c:	2200      	movs	r2, #0
 800023e:	601a      	str	r2, [r3, #0]
 8000240:	605a      	str	r2, [r3, #4]
 8000242:	609a      	str	r2, [r3, #8]
 8000244:	60da      	str	r2, [r3, #12]
 8000246:	611a      	str	r2, [r3, #16]
 8000248:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800024a:	2302      	movs	r3, #2
 800024c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024e:	2301      	movs	r3, #1
 8000250:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000252:	2310      	movs	r3, #16
 8000254:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000256:	2300      	movs	r3, #0
 8000258:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800025e:	4618      	mov	r0, r3
 8000260:	f001 fde8 	bl	8001e34 <HAL_RCC_OscConfig>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x58>
  {
    Error_Handler();
 800026a:	f000 f8af 	bl	80003cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800026e:	230f      	movs	r3, #15
 8000270:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000272:	2300      	movs	r3, #0
 8000274:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000282:	f107 031c 	add.w	r3, r7, #28
 8000286:	2100      	movs	r1, #0
 8000288:	4618      	mov	r0, r3
 800028a:	f002 fde1 	bl	8002e50 <HAL_RCC_ClockConfig>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000294:	f000 f89a 	bl	80003cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000298:	2301      	movs	r3, #1
 800029a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800029c:	2300      	movs	r3, #0
 800029e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	4618      	mov	r0, r3
 80002a4:	f002 ffe6 	bl	8003274 <HAL_RCCEx_PeriphCLKConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80002ae:	f000 f88d 	bl	80003cc <Error_Handler>
  }
}
 80002b2:	bf00      	nop
 80002b4:	3758      	adds	r7, #88	@ 0x58
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
	...

080002bc <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002c0:	4b15      	ldr	r3, [pc, #84]	@ (8000318 <MX_USART1_UART_Init+0x5c>)
 80002c2:	4a16      	ldr	r2, [pc, #88]	@ (800031c <MX_USART1_UART_Init+0x60>)
 80002c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80002c6:	4b14      	ldr	r3, [pc, #80]	@ (8000318 <MX_USART1_UART_Init+0x5c>)
 80002c8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80002cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002ce:	4b12      	ldr	r3, [pc, #72]	@ (8000318 <MX_USART1_UART_Init+0x5c>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002d4:	4b10      	ldr	r3, [pc, #64]	@ (8000318 <MX_USART1_UART_Init+0x5c>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002da:	4b0f      	ldr	r3, [pc, #60]	@ (8000318 <MX_USART1_UART_Init+0x5c>)
 80002dc:	2200      	movs	r2, #0
 80002de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000318 <MX_USART1_UART_Init+0x5c>)
 80002e2:	220c      	movs	r2, #12
 80002e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000318 <MX_USART1_UART_Init+0x5c>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000318 <MX_USART1_UART_Init+0x5c>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80002f2:	4b09      	ldr	r3, [pc, #36]	@ (8000318 <MX_USART1_UART_Init+0x5c>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80002f8:	4b07      	ldr	r3, [pc, #28]	@ (8000318 <MX_USART1_UART_Init+0x5c>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80002fe:	2300      	movs	r3, #0
 8000300:	2200      	movs	r2, #0
 8000302:	2100      	movs	r1, #0
 8000304:	4804      	ldr	r0, [pc, #16]	@ (8000318 <MX_USART1_UART_Init+0x5c>)
 8000306:	f004 f9b0 	bl	800466a <HAL_RS485Ex_Init>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000310:	f000 f85c 	bl	80003cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8000314:	bf00      	nop
 8000316:	bd80      	pop	{r7, pc}
 8000318:	200000b4 	.word	0x200000b4
 800031c:	40013800 	.word	0x40013800

08000320 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000326:	4b10      	ldr	r3, [pc, #64]	@ (8000368 <MX_DMA_Init+0x48>)
 8000328:	695b      	ldr	r3, [r3, #20]
 800032a:	4a0f      	ldr	r2, [pc, #60]	@ (8000368 <MX_DMA_Init+0x48>)
 800032c:	f043 0301 	orr.w	r3, r3, #1
 8000330:	6153      	str	r3, [r2, #20]
 8000332:	4b0d      	ldr	r3, [pc, #52]	@ (8000368 <MX_DMA_Init+0x48>)
 8000334:	695b      	ldr	r3, [r3, #20]
 8000336:	f003 0301 	and.w	r3, r3, #1
 800033a:	607b      	str	r3, [r7, #4]
 800033c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800033e:	2200      	movs	r2, #0
 8000340:	2100      	movs	r1, #0
 8000342:	200e      	movs	r0, #14
 8000344:	f001 f9a3 	bl	800168e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000348:	200e      	movs	r0, #14
 800034a:	f001 f9bc 	bl	80016c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800034e:	2200      	movs	r2, #0
 8000350:	2100      	movs	r1, #0
 8000352:	200f      	movs	r0, #15
 8000354:	f001 f99b 	bl	800168e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000358:	200f      	movs	r0, #15
 800035a:	f001 f9b4 	bl	80016c6 <HAL_NVIC_EnableIRQ>
}
 800035e:	bf00      	nop
 8000360:	3708      	adds	r7, #8
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	40021000 	.word	0x40021000

0800036c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b086      	sub	sp, #24
 8000370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
 8000378:	605a      	str	r2, [r3, #4]
 800037a:	609a      	str	r2, [r3, #8]
 800037c:	60da      	str	r2, [r3, #12]
 800037e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000380:	4b11      	ldr	r3, [pc, #68]	@ (80003c8 <MX_GPIO_Init+0x5c>)
 8000382:	695b      	ldr	r3, [r3, #20]
 8000384:	4a10      	ldr	r2, [pc, #64]	@ (80003c8 <MX_GPIO_Init+0x5c>)
 8000386:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800038a:	6153      	str	r3, [r2, #20]
 800038c:	4b0e      	ldr	r3, [pc, #56]	@ (80003c8 <MX_GPIO_Init+0x5c>)
 800038e:	695b      	ldr	r3, [r3, #20]
 8000390:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000394:	603b      	str	r3, [r7, #0]
 8000396:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	2110      	movs	r1, #16
 800039c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003a0:	f001 fd30 	bl	8001e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80003a4:	2310      	movs	r3, #16
 80003a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a8:	2301      	movs	r3, #1
 80003aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ac:	2300      	movs	r3, #0
 80003ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b0:	2300      	movs	r3, #0
 80003b2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003b4:	1d3b      	adds	r3, r7, #4
 80003b6:	4619      	mov	r1, r3
 80003b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003bc:	f001 fbb0 	bl	8001b20 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80003c0:	bf00      	nop
 80003c2:	3718      	adds	r7, #24
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	40021000 	.word	0x40021000

080003cc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003d0:	b672      	cpsid	i
}
 80003d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003d4:	bf00      	nop
 80003d6:	e7fd      	b.n	80003d4 <Error_Handler+0x8>

080003d8 <mbus_crc16>:
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
}

*/

uint16_t mbus_crc16(const uint16_t crc16, const uint8_t byte) {
 80003d8:	b480      	push	{r7}
 80003da:	b085      	sub	sp, #20
 80003dc:	af00      	add	r7, sp, #0
 80003de:	4603      	mov	r3, r0
 80003e0:	460a      	mov	r2, r1
 80003e2:	80fb      	strh	r3, [r7, #6]
 80003e4:	4613      	mov	r3, r2
 80003e6:	717b      	strb	r3, [r7, #5]
  const int index = (crc16 & 0xFF) ^ byte;
 80003e8:	88fb      	ldrh	r3, [r7, #6]
 80003ea:	b2da      	uxtb	r2, r3
 80003ec:	797b      	ldrb	r3, [r7, #5]
 80003ee:	4053      	eors	r3, r2
 80003f0:	60fb      	str	r3, [r7, #12]
  return (aucCRCLo[index] << 8) | ((crc16 >> 8) ^ aucCRCHi[index]);
 80003f2:	4a0d      	ldr	r2, [pc, #52]	@ (8000428 <mbus_crc16+0x50>)
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	4413      	add	r3, r2
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	b21b      	sxth	r3, r3
 80003fc:	021b      	lsls	r3, r3, #8
 80003fe:	b21a      	sxth	r2, r3
 8000400:	88fb      	ldrh	r3, [r7, #6]
 8000402:	0a1b      	lsrs	r3, r3, #8
 8000404:	b29b      	uxth	r3, r3
 8000406:	4809      	ldr	r0, [pc, #36]	@ (800042c <mbus_crc16+0x54>)
 8000408:	68f9      	ldr	r1, [r7, #12]
 800040a:	4401      	add	r1, r0
 800040c:	7809      	ldrb	r1, [r1, #0]
 800040e:	404b      	eors	r3, r1
 8000410:	b29b      	uxth	r3, r3
 8000412:	b21b      	sxth	r3, r3
 8000414:	4313      	orrs	r3, r2
 8000416:	b21b      	sxth	r3, r3
 8000418:	b29b      	uxth	r3, r3
}
 800041a:	4618      	mov	r0, r3
 800041c:	3714      	adds	r7, #20
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	08005310 	.word	0x08005310
 800042c:	08005210 	.word	0x08005210

08000430 <mbus_tickcount>:

__attribute__((weak)) uint32_t mbus_tickcount() { return 0; }
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
 8000434:	2300      	movs	r3, #0
 8000436:	4618      	mov	r0, r3
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr

08000440 <mbus_open>:
/*
 * function mbus_open()
 * open new modbus context for new port
 * return: MODBUS_ERROR - if can't open context
 */
mbus_t mbus_open(Modbus_Conf_t *pconf) {
 8000440:	b580      	push	{r7, lr}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  mbus_t context;
  for (context = 0; context < STMODBUS_COUNT_CONTEXT; context++) {
 8000448:	2300      	movs	r3, #0
 800044a:	73fb      	strb	r3, [r7, #15]
 800044c:	e011      	b.n	8000472 <mbus_open+0x32>
    if (g_mbusContext[context].open == 0) {
 800044e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000452:	4924      	ldr	r1, [pc, #144]	@ (80004e4 <mbus_open+0xa4>)
 8000454:	4613      	mov	r3, r2
 8000456:	011b      	lsls	r3, r3, #4
 8000458:	4413      	add	r3, r2
 800045a:	009b      	lsls	r3, r3, #2
 800045c:	440b      	add	r3, r1
 800045e:	3328      	adds	r3, #40	@ 0x28
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	2b00      	cmp	r3, #0
 8000464:	d00a      	beq.n	800047c <mbus_open+0x3c>
  for (context = 0; context < STMODBUS_COUNT_CONTEXT; context++) {
 8000466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800046a:	b2db      	uxtb	r3, r3
 800046c:	3301      	adds	r3, #1
 800046e:	b2db      	uxtb	r3, r3
 8000470:	73fb      	strb	r3, [r7, #15]
 8000472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000476:	2b00      	cmp	r3, #0
 8000478:	dde9      	ble.n	800044e <mbus_open+0xe>
 800047a:	e000      	b.n	800047e <mbus_open+0x3e>
      break;
 800047c:	bf00      	nop
    }
  }
  if (context == STMODBUS_COUNT_CONTEXT)
 800047e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000482:	2b01      	cmp	r3, #1
 8000484:	d102      	bne.n	800048c <mbus_open+0x4c>
    return (mbus_t)MBUS_ERROR;
 8000486:	f04f 33ff 	mov.w	r3, #4294967295
 800048a:	e026      	b.n	80004da <mbus_open+0x9a>
  // Clear context
  memset(&g_mbusContext[context], 0, sizeof(_stmodbus_context_t));
 800048c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000490:	4613      	mov	r3, r2
 8000492:	011b      	lsls	r3, r3, #4
 8000494:	4413      	add	r3, r2
 8000496:	009b      	lsls	r3, r3, #2
 8000498:	4a12      	ldr	r2, [pc, #72]	@ (80004e4 <mbus_open+0xa4>)
 800049a:	4413      	add	r3, r2
 800049c:	2244      	movs	r2, #68	@ 0x44
 800049e:	2100      	movs	r1, #0
 80004a0:	4618      	mov	r0, r3
 80004a2:	f004 faac 	bl	80049fe <memset>
  // Copy config to context
  memcpy((void *)&g_mbusContext[context].conf, (void *)pconf,
 80004a6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80004aa:	4613      	mov	r3, r2
 80004ac:	011b      	lsls	r3, r3, #4
 80004ae:	4413      	add	r3, r2
 80004b0:	009b      	lsls	r3, r3, #2
 80004b2:	4a0c      	ldr	r2, [pc, #48]	@ (80004e4 <mbus_open+0xa4>)
 80004b4:	4413      	add	r3, r2
 80004b6:	2228      	movs	r2, #40	@ 0x28
 80004b8:	6879      	ldr	r1, [r7, #4]
 80004ba:	4618      	mov	r0, r3
 80004bc:	f004 fb1b 	bl	8004af6 <memcpy>
         sizeof(Modbus_Conf_t));

  g_mbusContext[context].open = 1;
 80004c0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80004c4:	4907      	ldr	r1, [pc, #28]	@ (80004e4 <mbus_open+0xa4>)
 80004c6:	4613      	mov	r3, r2
 80004c8:	011b      	lsls	r3, r3, #4
 80004ca:	4413      	add	r3, r2
 80004cc:	009b      	lsls	r3, r3, #2
 80004ce:	440b      	add	r3, r1
 80004d0:	3328      	adds	r3, #40	@ 0x28
 80004d2:	2201      	movs	r2, #1
 80004d4:	701a      	strb	r2, [r3, #0]
  return context;
 80004d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80004da:	4618      	mov	r0, r3
 80004dc:	3710      	adds	r7, #16
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	200001c4 	.word	0x200001c4

080004e8 <mbus_flush>:

mbus_status_t mbus_flush(const mbus_t context) {
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	71fb      	strb	r3, [r7, #7]
  g_mbusContext[context].crc16 = 0xFFFF;
 80004f2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80004f6:	490e      	ldr	r1, [pc, #56]	@ (8000530 <mbus_flush+0x48>)
 80004f8:	4613      	mov	r3, r2
 80004fa:	011b      	lsls	r3, r3, #4
 80004fc:	4413      	add	r3, r2
 80004fe:	009b      	lsls	r3, r3, #2
 8000500:	440b      	add	r3, r1
 8000502:	332a      	adds	r3, #42	@ 0x2a
 8000504:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000508:	801a      	strh	r2, [r3, #0]
  g_mbusContext[context].state = MBUS_STATE_IDLE;
 800050a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800050e:	4908      	ldr	r1, [pc, #32]	@ (8000530 <mbus_flush+0x48>)
 8000510:	4613      	mov	r3, r2
 8000512:	011b      	lsls	r3, r3, #4
 8000514:	4413      	add	r3, r2
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	440b      	add	r3, r1
 800051a:	3329      	adds	r3, #41	@ 0x29
 800051c:	2200      	movs	r2, #0
 800051e:	701a      	strb	r2, [r3, #0]
  return MBUS_OK;
 8000520:	2300      	movs	r3, #0
}
 8000522:	4618      	mov	r0, r3
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	200001c4 	.word	0x200001c4

08000534 <mbus_response>:

mbus_status_t mbus_response(mbus_t mb_context, Modbus_ResponseType response) {
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	460a      	mov	r2, r1
 800053e:	71fb      	strb	r3, [r7, #7]
 8000540:	4613      	mov	r3, r2
 8000542:	71bb      	strb	r3, [r7, #6]

  if (response != MBUS_RESPONSE_OK) {
 8000544:	79bb      	ldrb	r3, [r7, #6]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d008      	beq.n	800055c <mbus_response+0x28>
    return mbus_send_error(mb_context, response);
 800054a:	79ba      	ldrb	r2, [r7, #6]
 800054c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000550:	4611      	mov	r1, r2
 8000552:	4618      	mov	r0, r3
 8000554:	f000 fb66 	bl	8000c24 <mbus_send_error>
 8000558:	4603      	mov	r3, r0
 800055a:	e001      	b.n	8000560 <mbus_response+0x2c>
  } else {
  }
  return MBUS_ERROR;
 800055c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000560:	4618      	mov	r0, r3
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <mbus_poll_response>:
uint16_t mbus_error(Modbus_ResponseType error) {
    g_userError = error;
    return 0;
}

inline mbus_status_t mbus_poll_response(mbus_t mb_context) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	@ 0x28
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]
  stmbCallBackFunc func = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	617b      	str	r3, [r7, #20]
  _stmodbus_context_t *ctx = &g_mbusContext[mb_context];
 8000576:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800057a:	4613      	mov	r3, r2
 800057c:	011b      	lsls	r3, r3, #4
 800057e:	4413      	add	r3, r2
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	4a9b      	ldr	r2, [pc, #620]	@ (80007f0 <mbus_poll_response+0x288>)
 8000584:	4413      	add	r3, r2
 8000586:	613b      	str	r3, [r7, #16]
  int read = 1, la;
 8000588:	2301      	movs	r3, #1
 800058a:	60bb      	str	r3, [r7, #8]
  uint16_t d;

  if (ctx->header.func == 0x04) {
 800058c:	693b      	ldr	r3, [r7, #16]
 800058e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8000592:	2b04      	cmp	r3, #4
 8000594:	d101      	bne.n	800059a <mbus_poll_response+0x32>
    la = 10;
 8000596:	230a      	movs	r3, #10
 8000598:	627b      	str	r3, [r7, #36]	@ 0x24
      func = ctx->func[i].func;
      break;
    }
  }
#endif
  switch (ctx->header.func) {
 800059a:	693b      	ldr	r3, [r7, #16]
 800059c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80005a0:	2b0f      	cmp	r3, #15
 80005a2:	d006      	beq.n	80005b2 <mbus_poll_response+0x4a>
 80005a4:	2b0f      	cmp	r3, #15
 80005a6:	dc4a      	bgt.n	800063e <mbus_poll_response+0xd6>
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d002      	beq.n	80005b2 <mbus_poll_response+0x4a>
 80005ac:	2b02      	cmp	r3, #2
 80005ae:	d023      	beq.n	80005f8 <mbus_poll_response+0x90>
    if ((ctx->header.addr + ctx->header.num) > ctx->conf.discrete) {
      return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_ADDRESS);
    }
    break;
  default:
    break;
 80005b0:	e045      	b.n	800063e <mbus_poll_response+0xd6>
    if ((ctx->header.num == 0) || (ctx->header.num > 0x07D0)) {
 80005b2:	693b      	ldr	r3, [r7, #16]
 80005b4:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d004      	beq.n	80005c4 <mbus_poll_response+0x5c>
 80005ba:	693b      	ldr	r3, [r7, #16]
 80005bc:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80005be:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80005c2:	d907      	bls.n	80005d4 <mbus_poll_response+0x6c>
      return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_VALUE);
 80005c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c8:	2103      	movs	r1, #3
 80005ca:	4618      	mov	r0, r3
 80005cc:	f7ff ffb2 	bl	8000534 <mbus_response>
 80005d0:	4603      	mov	r3, r0
 80005d2:	e155      	b.n	8000880 <mbus_poll_response+0x318>
    if ((ctx->header.addr + ctx->header.num) >= ctx->conf.coils) {
 80005d4:	693b      	ldr	r3, [r7, #16]
 80005d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80005d8:	461a      	mov	r2, r3
 80005da:	693b      	ldr	r3, [r7, #16]
 80005dc:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80005de:	4413      	add	r3, r2
 80005e0:	693a      	ldr	r2, [r7, #16]
 80005e2:	8852      	ldrh	r2, [r2, #2]
 80005e4:	4293      	cmp	r3, r2
 80005e6:	db2c      	blt.n	8000642 <mbus_poll_response+0xda>
      return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_ADDRESS);
 80005e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ec:	2102      	movs	r1, #2
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff ffa0 	bl	8000534 <mbus_response>
 80005f4:	4603      	mov	r3, r0
 80005f6:	e143      	b.n	8000880 <mbus_poll_response+0x318>
    if ((ctx->header.num == 0) || (ctx->header.num > 0x07D0)) {
 80005f8:	693b      	ldr	r3, [r7, #16]
 80005fa:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d004      	beq.n	800060a <mbus_poll_response+0xa2>
 8000600:	693b      	ldr	r3, [r7, #16]
 8000602:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000604:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000608:	d907      	bls.n	800061a <mbus_poll_response+0xb2>
      return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_VALUE);
 800060a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060e:	2103      	movs	r1, #3
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff ff8f 	bl	8000534 <mbus_response>
 8000616:	4603      	mov	r3, r0
 8000618:	e132      	b.n	8000880 <mbus_poll_response+0x318>
    if ((ctx->header.addr + ctx->header.num) > ctx->conf.discrete) {
 800061a:	693b      	ldr	r3, [r7, #16]
 800061c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800061e:	461a      	mov	r2, r3
 8000620:	693b      	ldr	r3, [r7, #16]
 8000622:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000624:	4413      	add	r3, r2
 8000626:	693a      	ldr	r2, [r7, #16]
 8000628:	8892      	ldrh	r2, [r2, #4]
 800062a:	4293      	cmp	r3, r2
 800062c:	dd0b      	ble.n	8000646 <mbus_poll_response+0xde>
      return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_ADDRESS);
 800062e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000632:	2102      	movs	r1, #2
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff ff7d 	bl	8000534 <mbus_response>
 800063a:	4603      	mov	r3, r0
 800063c:	e120      	b.n	8000880 <mbus_poll_response+0x318>
    break;
 800063e:	bf00      	nop
 8000640:	e002      	b.n	8000648 <mbus_poll_response+0xe0>
    break;
 8000642:	bf00      	nop
 8000644:	e000      	b.n	8000648 <mbus_poll_response+0xe0>
    break;
 8000646:	bf00      	nop
  }

  if (func != 0) {
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d006      	beq.n	800065c <mbus_poll_response+0xf4>
    return func(mb_context);
 800064e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	4610      	mov	r0, r2
 8000656:	4798      	blx	r3
 8000658:	4603      	mov	r3, r0
 800065a:	e111      	b.n	8000880 <mbus_poll_response+0x318>
  }

  la = mbus_proto_address((Modbus_ConnectFuncType)ctx->header.func, (int*)&read);
 800065c:	693b      	ldr	r3, [r7, #16]
 800065e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8000662:	f107 0208 	add.w	r2, r7, #8
 8000666:	4611      	mov	r1, r2
 8000668:	4618      	mov	r0, r3
 800066a:	f000 fb6d 	bl	8000d48 <mbus_proto_address>
 800066e:	6278      	str	r0, [r7, #36]	@ 0x24
  if (la > 0) {
 8000670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000672:	2b00      	cmp	r3, #0
 8000674:	dd05      	ble.n	8000682 <mbus_poll_response+0x11a>
    la += ctx->header.addr;
 8000676:	693b      	ldr	r3, [r7, #16]
 8000678:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800067a:	461a      	mov	r2, r3
 800067c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800067e:	4413      	add	r3, r2
 8000680:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  if (la < 50001) {
 8000682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000684:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8000688:	4293      	cmp	r3, r2
 800068a:	f300 80f2 	bgt.w	8000872 <mbus_poll_response+0x30a>
    ctx->conf.sendbuf[0] = ctx->header.devaddr;
 800068e:	693b      	ldr	r3, [r7, #16]
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	693a      	ldr	r2, [r7, #16]
 8000694:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 8000698:	701a      	strb	r2, [r3, #0]
    ctx->conf.sendbuf[1] = ctx->header.func;
 800069a:	693b      	ldr	r3, [r7, #16]
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	3301      	adds	r3, #1
 80006a0:	693a      	ldr	r2, [r7, #16]
 80006a2:	f892 2031 	ldrb.w	r2, [r2, #49]	@ 0x31
 80006a6:	701a      	strb	r2, [r3, #0]
    ctx->conf.sendbuf[2] = ctx->header.num * 2;
 80006a8:	693b      	ldr	r3, [r7, #16]
 80006aa:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	693b      	ldr	r3, [r7, #16]
 80006b0:	699b      	ldr	r3, [r3, #24]
 80006b2:	3302      	adds	r3, #2
 80006b4:	0052      	lsls	r2, r2, #1
 80006b6:	b2d2      	uxtb	r2, r2
 80006b8:	701a      	strb	r2, [r3, #0]
    if (read && ctx->conf.read) {
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d04b      	beq.n	8000758 <mbus_poll_response+0x1f0>
 80006c0:	693b      	ldr	r3, [r7, #16]
 80006c2:	691b      	ldr	r3, [r3, #16]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d047      	beq.n	8000758 <mbus_poll_response+0x1f0>
      g_userError = MBUS_RESPONSE_OK;
 80006c8:	4b4a      	ldr	r3, [pc, #296]	@ (80007f4 <mbus_poll_response+0x28c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < ctx->header.num; i++) {
 80006ce:	2300      	movs	r3, #0
 80006d0:	623b      	str	r3, [r7, #32]
 80006d2:	e01f      	b.n	8000714 <mbus_poll_response+0x1ac>
        
        d = ctx->conf.read(la + i);
 80006d4:	693b      	ldr	r3, [r7, #16]
 80006d6:	691b      	ldr	r3, [r3, #16]
 80006d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80006da:	6a3a      	ldr	r2, [r7, #32]
 80006dc:	440a      	add	r2, r1
 80006de:	4610      	mov	r0, r2
 80006e0:	4798      	blx	r3
 80006e2:	4603      	mov	r3, r0
 80006e4:	81fb      	strh	r3, [r7, #14]
        ctx->conf.sendbuf[3 + (i << 1)] = d >> 8;
 80006e6:	89fb      	ldrh	r3, [r7, #14]
 80006e8:	0a1b      	lsrs	r3, r3, #8
 80006ea:	b299      	uxth	r1, r3
 80006ec:	693b      	ldr	r3, [r7, #16]
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	6a3a      	ldr	r2, [r7, #32]
 80006f2:	0052      	lsls	r2, r2, #1
 80006f4:	3203      	adds	r2, #3
 80006f6:	4413      	add	r3, r2
 80006f8:	b2ca      	uxtb	r2, r1
 80006fa:	701a      	strb	r2, [r3, #0]
        ctx->conf.sendbuf[3 + (i << 1) + 1] = d & 0xFF;
 80006fc:	693b      	ldr	r3, [r7, #16]
 80006fe:	699a      	ldr	r2, [r3, #24]
 8000700:	6a3b      	ldr	r3, [r7, #32]
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	3304      	adds	r3, #4
 8000706:	4413      	add	r3, r2
 8000708:	89fa      	ldrh	r2, [r7, #14]
 800070a:	b2d2      	uxtb	r2, r2
 800070c:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < ctx->header.num; i++) {
 800070e:	6a3b      	ldr	r3, [r7, #32]
 8000710:	3301      	adds	r3, #1
 8000712:	623b      	str	r3, [r7, #32]
 8000714:	693b      	ldr	r3, [r7, #16]
 8000716:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000718:	461a      	mov	r2, r3
 800071a:	6a3b      	ldr	r3, [r7, #32]
 800071c:	4293      	cmp	r3, r2
 800071e:	dbd9      	blt.n	80006d4 <mbus_poll_response+0x16c>
      }
      if (g_userError == MBUS_RESPONSE_OK) {
 8000720:	4b34      	ldr	r3, [pc, #208]	@ (80007f4 <mbus_poll_response+0x28c>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d10d      	bne.n	8000744 <mbus_poll_response+0x1dc>
          return mbus_send_data(mb_context, 3 + ctx->conf.sendbuf[2]);
 8000728:	693b      	ldr	r3, [r7, #16]
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	3302      	adds	r3, #2
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	3303      	adds	r3, #3
 8000732:	b29a      	uxth	r2, r3
 8000734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000738:	4611      	mov	r1, r2
 800073a:	4618      	mov	r0, r3
 800073c:	f000 fa9e 	bl	8000c7c <mbus_send_data>
 8000740:	4603      	mov	r3, r0
 8000742:	e09d      	b.n	8000880 <mbus_poll_response+0x318>
      }else {
          return mbus_response(mb_context, g_userError);
 8000744:	4b2b      	ldr	r3, [pc, #172]	@ (80007f4 <mbus_poll_response+0x28c>)
 8000746:	781a      	ldrb	r2, [r3, #0]
 8000748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074c:	4611      	mov	r1, r2
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff fef0 	bl	8000534 <mbus_response>
 8000754:	4603      	mov	r3, r0
 8000756:	e093      	b.n	8000880 <mbus_poll_response+0x318>
      }
    } else if (ctx->conf.write) {
 8000758:	693b      	ldr	r3, [r7, #16]
 800075a:	695b      	ldr	r3, [r3, #20]
 800075c:	2b00      	cmp	r3, #0
 800075e:	f000 8088 	beq.w	8000872 <mbus_poll_response+0x30a>
      uint16_t *value;
      ctx->conf.sendbuf[2] = 0;
 8000762:	693b      	ldr	r3, [r7, #16]
 8000764:	699b      	ldr	r3, [r3, #24]
 8000766:	3302      	adds	r3, #2
 8000768:	2200      	movs	r2, #0
 800076a:	701a      	strb	r2, [r3, #0]
      switch (ctx->header.func) {
 800076c:	693b      	ldr	r3, [r7, #16]
 800076e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8000772:	2b06      	cmp	r3, #6
 8000774:	dc02      	bgt.n	800077c <mbus_poll_response+0x214>
 8000776:	2b05      	cmp	r3, #5
 8000778:	da03      	bge.n	8000782 <mbus_poll_response+0x21a>
 800077a:	e07a      	b.n	8000872 <mbus_poll_response+0x30a>
 800077c:	2b10      	cmp	r3, #16
 800077e:	d030      	beq.n	80007e2 <mbus_poll_response+0x27a>
 8000780:	e077      	b.n	8000872 <mbus_poll_response+0x30a>
      case MBUS_FUNC_WRITE_REG:
      case MBUS_FUNC_WRITE_COIL:
        // in both these cases, we should return the same packet that we
        // received. in both cases, the packes have 6 bytes of data + 2 CRC
        // bytes = 8 bytes
        value = (uint16_t *)ctx->conf.recvbuf;
 8000782:	693b      	ldr	r3, [r7, #16]
 8000784:	6a1b      	ldr	r3, [r3, #32]
 8000786:	61fb      	str	r3, [r7, #28]
        ctx->conf.write(la, *value);
 8000788:	693b      	ldr	r3, [r7, #16]
 800078a:	695b      	ldr	r3, [r3, #20]
 800078c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800078e:	69fa      	ldr	r2, [r7, #28]
 8000790:	8812      	ldrh	r2, [r2, #0]
 8000792:	4611      	mov	r1, r2
 8000794:	4798      	blx	r3
        ctx->conf.sendbuf[2] = ctx->header.addr >> 8;
 8000796:	693b      	ldr	r3, [r7, #16]
 8000798:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800079a:	0a1b      	lsrs	r3, r3, #8
 800079c:	b29a      	uxth	r2, r3
 800079e:	693b      	ldr	r3, [r7, #16]
 80007a0:	699b      	ldr	r3, [r3, #24]
 80007a2:	3302      	adds	r3, #2
 80007a4:	b2d2      	uxtb	r2, r2
 80007a6:	701a      	strb	r2, [r3, #0]
        ctx->conf.sendbuf[3] = ctx->header.addr & 0xFF;
 80007a8:	693b      	ldr	r3, [r7, #16]
 80007aa:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80007ac:	693b      	ldr	r3, [r7, #16]
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	3303      	adds	r3, #3
 80007b2:	b2d2      	uxtb	r2, r2
 80007b4:	701a      	strb	r2, [r3, #0]
        ctx->conf.sendbuf[4] = ctx->conf.recvbuf[1];
 80007b6:	693b      	ldr	r3, [r7, #16]
 80007b8:	6a1a      	ldr	r2, [r3, #32]
 80007ba:	693b      	ldr	r3, [r7, #16]
 80007bc:	699b      	ldr	r3, [r3, #24]
 80007be:	3304      	adds	r3, #4
 80007c0:	7852      	ldrb	r2, [r2, #1]
 80007c2:	701a      	strb	r2, [r3, #0]
        ctx->conf.sendbuf[5] = ctx->conf.recvbuf[0];
 80007c4:	693b      	ldr	r3, [r7, #16]
 80007c6:	6a1a      	ldr	r2, [r3, #32]
 80007c8:	693b      	ldr	r3, [r7, #16]
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	3305      	adds	r3, #5
 80007ce:	7812      	ldrb	r2, [r2, #0]
 80007d0:	701a      	strb	r2, [r3, #0]
        return mbus_send_data(mb_context, 6);
 80007d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d6:	2106      	movs	r1, #6
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 fa4f 	bl	8000c7c <mbus_send_data>
 80007de:	4603      	mov	r3, r0
 80007e0:	e04e      	b.n	8000880 <mbus_poll_response+0x318>

      case MBUS_FUNC_WRITE_REGS:
        value = (uint16_t *)ctx->conf.recvbuf;
 80007e2:	693b      	ldr	r3, [r7, #16]
 80007e4:	6a1b      	ldr	r3, [r3, #32]
 80007e6:	61fb      	str	r3, [r7, #28]
        for (int i = 0; i < ctx->header.num; i++) {
 80007e8:	2300      	movs	r3, #0
 80007ea:	61bb      	str	r3, [r7, #24]
 80007ec:	e013      	b.n	8000816 <mbus_poll_response+0x2ae>
 80007ee:	bf00      	nop
 80007f0:	200001c4 	.word	0x200001c4
 80007f4:	20000208 	.word	0x20000208
          ctx->conf.write(la + i, *value++);
 80007f8:	693b      	ldr	r3, [r7, #16]
 80007fa:	695a      	ldr	r2, [r3, #20]
 80007fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80007fe:	69bb      	ldr	r3, [r7, #24]
 8000800:	440b      	add	r3, r1
 8000802:	4618      	mov	r0, r3
 8000804:	69fb      	ldr	r3, [r7, #28]
 8000806:	1c99      	adds	r1, r3, #2
 8000808:	61f9      	str	r1, [r7, #28]
 800080a:	881b      	ldrh	r3, [r3, #0]
 800080c:	4619      	mov	r1, r3
 800080e:	4790      	blx	r2
        for (int i = 0; i < ctx->header.num; i++) {
 8000810:	69bb      	ldr	r3, [r7, #24]
 8000812:	3301      	adds	r3, #1
 8000814:	61bb      	str	r3, [r7, #24]
 8000816:	693b      	ldr	r3, [r7, #16]
 8000818:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800081a:	461a      	mov	r2, r3
 800081c:	69bb      	ldr	r3, [r7, #24]
 800081e:	4293      	cmp	r3, r2
 8000820:	dbea      	blt.n	80007f8 <mbus_poll_response+0x290>
        }
        ctx->conf.sendbuf[2] = ctx->header.addr >> 8;
 8000822:	693b      	ldr	r3, [r7, #16]
 8000824:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000826:	0a1b      	lsrs	r3, r3, #8
 8000828:	b29a      	uxth	r2, r3
 800082a:	693b      	ldr	r3, [r7, #16]
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	3302      	adds	r3, #2
 8000830:	b2d2      	uxtb	r2, r2
 8000832:	701a      	strb	r2, [r3, #0]
        ctx->conf.sendbuf[3] = ctx->header.addr & 0xFF;
 8000834:	693b      	ldr	r3, [r7, #16]
 8000836:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8000838:	693b      	ldr	r3, [r7, #16]
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	3303      	adds	r3, #3
 800083e:	b2d2      	uxtb	r2, r2
 8000840:	701a      	strb	r2, [r3, #0]
        ctx->conf.sendbuf[4] = ctx->header.num >> 8;
 8000842:	693b      	ldr	r3, [r7, #16]
 8000844:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000846:	0a1b      	lsrs	r3, r3, #8
 8000848:	b29a      	uxth	r2, r3
 800084a:	693b      	ldr	r3, [r7, #16]
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	3304      	adds	r3, #4
 8000850:	b2d2      	uxtb	r2, r2
 8000852:	701a      	strb	r2, [r3, #0]
        ctx->conf.sendbuf[5] = ctx->header.num & 0xFF;
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	3305      	adds	r3, #5
 800085e:	b2d2      	uxtb	r2, r2
 8000860:	701a      	strb	r2, [r3, #0]
        return mbus_send_data(mb_context, 6);
 8000862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000866:	2106      	movs	r1, #6
 8000868:	4618      	mov	r0, r3
 800086a:	f000 fa07 	bl	8000c7c <mbus_send_data>
 800086e:	4603      	mov	r3, r0
 8000870:	e006      	b.n	8000880 <mbus_poll_response+0x318>
      } // end of switch
    }
  }
  return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_FUNCTION);
 8000872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000876:	2101      	movs	r1, #1
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff fe5b 	bl	8000534 <mbus_response>
 800087e:	4603      	mov	r3, r0
}
 8000880:	4618      	mov	r0, r3
 8000882:	3728      	adds	r7, #40	@ 0x28
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <mbus_poll>:
/*
 * function mbus_close()
 * close modbus context
 * return: none
 */
mbus_status_t mbus_poll(mbus_t mb_context, uint8_t byte) {
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	460a      	mov	r2, r1
 8000892:	71fb      	strb	r3, [r7, #7]
 8000894:	4613      	mov	r3, r2
 8000896:	71bb      	strb	r3, [r7, #6]
  // State machine
  _stmodbus_context_t *ctx = &g_mbusContext[mb_context];
 8000898:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800089c:	4613      	mov	r3, r2
 800089e:	011b      	lsls	r3, r3, #4
 80008a0:	4413      	add	r3, r2
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	4ab1      	ldr	r2, [pc, #708]	@ (8000b6c <mbus_poll+0x2e4>)
 80008a6:	4413      	add	r3, r2
 80008a8:	60fb      	str	r3, [r7, #12]

  if (mbus_tickcount() - ctx->timer > 4) {
 80008aa:	f7ff fdc1 	bl	8000430 <mbus_tickcount>
 80008ae:	4602      	mov	r2, r0
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008b4:	1ad3      	subs	r3, r2, r3
 80008b6:	2b04      	cmp	r3, #4
 80008b8:	d904      	bls.n	80008c4 <mbus_poll+0x3c>
    mbus_flush(mb_context);
 80008ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff fe12 	bl	80004e8 <mbus_flush>
  }
  ctx->timer = mbus_tickcount();
 80008c4:	f7ff fdb4 	bl	8000430 <mbus_tickcount>
 80008c8:	4602      	mov	r2, r0
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  switch (ctx->state) {
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80008d4:	2b0e      	cmp	r3, #14
 80008d6:	f200 8153 	bhi.w	8000b80 <mbus_poll+0x2f8>
 80008da:	a201      	add	r2, pc, #4	@ (adr r2, 80008e0 <mbus_poll+0x58>)
 80008dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e0:	0800091d 	.word	0x0800091d
 80008e4:	08000b81 	.word	0x08000b81
 80008e8:	08000939 	.word	0x08000939
 80008ec:	08000a0d 	.word	0x08000a0d
 80008f0:	080009f7 	.word	0x080009f7
 80008f4:	08000b13 	.word	0x08000b13
 80008f8:	08000afd 	.word	0x08000afd
 80008fc:	08000a65 	.word	0x08000a65
 8000900:	08000a41 	.word	0x08000a41
 8000904:	08000aa5 	.word	0x08000aa5
 8000908:	08000abf 	.word	0x08000abf
 800090c:	08000b61 	.word	0x08000b61
 8000910:	08000b71 	.word	0x08000b71
 8000914:	08000b81 	.word	0x08000b81
 8000918:	08000b7b 	.word	0x08000b7b
  case MBUS_STATE_IDLE:
    mbus_flush(mb_context);
 800091c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff fde1 	bl	80004e8 <mbus_flush>
    ctx->state = MBUS_STATE_FUNCTION;
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	2202      	movs	r2, #2
 800092a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    ctx->header.devaddr = byte;
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	79ba      	ldrb	r2, [r7, #6]
 8000932:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    break;
 8000936:	e12c      	b.n	8000b92 <mbus_poll+0x30a>
  case MBUS_STATE_FUNCTION:
    ctx->header.func = byte;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	79ba      	ldrb	r2, [r7, #6]
 800093c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    switch (byte) {
 8000940:	79bb      	ldrb	r3, [r7, #6]
 8000942:	3b01      	subs	r3, #1
 8000944:	2b0f      	cmp	r3, #15
 8000946:	d84f      	bhi.n	80009e8 <mbus_poll+0x160>
 8000948:	a201      	add	r2, pc, #4	@ (adr r2, 8000950 <mbus_poll+0xc8>)
 800094a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800094e:	bf00      	nop
 8000950:	080009bd 	.word	0x080009bd
 8000954:	080009e9 	.word	0x080009e9
 8000958:	080009bd 	.word	0x080009bd
 800095c:	080009bd 	.word	0x080009bd
 8000960:	080009d3 	.word	0x080009d3
 8000964:	08000991 	.word	0x08000991
 8000968:	080009e9 	.word	0x080009e9
 800096c:	080009e9 	.word	0x080009e9
 8000970:	080009e9 	.word	0x080009e9
 8000974:	080009e9 	.word	0x080009e9
 8000978:	080009e9 	.word	0x080009e9
 800097c:	080009e9 	.word	0x080009e9
 8000980:	080009e9 	.word	0x080009e9
 8000984:	080009e9 	.word	0x080009e9
 8000988:	080009a7 	.word	0x080009a7
 800098c:	080009a7 	.word	0x080009a7
    case MBUS_FUNC_WRITE_REG:
      ctx->header.rnum = 1;
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	2201      	movs	r2, #1
 8000994:	86da      	strh	r2, [r3, #54]	@ 0x36
      ctx->header.num = 1;
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	2201      	movs	r2, #1
 800099a:	869a      	strh	r2, [r3, #52]	@ 0x34
      ctx->state = MBUS_STATE_REGADDR_HI;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	2204      	movs	r2, #4
 80009a0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      break;
 80009a4:	e026      	b.n	80009f4 <mbus_poll+0x16c>
    case MBUS_FUNC_WRITE_REGS:
    case MBUS_FUNC_WRITE_COILS:
      ctx->header.rnum = 1;
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	2201      	movs	r2, #1
 80009aa:	86da      	strh	r2, [r3, #54]	@ 0x36
      ctx->header.num = 0;
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	2200      	movs	r2, #0
 80009b0:	869a      	strh	r2, [r3, #52]	@ 0x34
      ctx->state = MBUS_STATE_REGADDR_HI;
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	2204      	movs	r2, #4
 80009b6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      break;
 80009ba:	e01b      	b.n	80009f4 <mbus_poll+0x16c>
    case MBUS_FUNC_READ_INPUT_REGS:
    case MBUS_FUNC_READ_COILS:
    case MBUS_FUNC_READ_REGS:
      ctx->state = MBUS_STATE_REGADDR_HI;
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	2204      	movs	r2, #4
 80009c0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      ctx->header.rnum = 0;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	2200      	movs	r2, #0
 80009c8:	86da      	strh	r2, [r3, #54]	@ 0x36
      ctx->header.num = 0;
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	2200      	movs	r2, #0
 80009ce:	869a      	strh	r2, [r3, #52]	@ 0x34
      break;
 80009d0:	e010      	b.n	80009f4 <mbus_poll+0x16c>
    case MBUS_FUNC_WRITE_COIL:
      ctx->header.rnum = 1;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	2201      	movs	r2, #1
 80009d6:	86da      	strh	r2, [r3, #54]	@ 0x36
      ctx->header.num = 1;
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	2201      	movs	r2, #1
 80009dc:	869a      	strh	r2, [r3, #52]	@ 0x34
      ctx->state = MBUS_STATE_REGADDR_HI;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	2204      	movs	r2, #4
 80009e2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      break;
 80009e6:	e005      	b.n	80009f4 <mbus_poll+0x16c>
    default:
      // ctx->state = MBUS_STATE_IDLE;
      mbus_flush(mb_context);
 80009e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff fd7b 	bl	80004e8 <mbus_flush>
      break;
 80009f2:	bf00      	nop
    }
    break;
 80009f4:	e0cd      	b.n	8000b92 <mbus_poll+0x30a>
  case MBUS_STATE_REGADDR_HI:
    ctx->state = MBUS_STATE_REGADDR_LO;
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	2203      	movs	r2, #3
 80009fa:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    ctx->header.addr = byte << 8;
 80009fe:	79bb      	ldrb	r3, [r7, #6]
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	021b      	lsls	r3, r3, #8
 8000a04:	b29a      	uxth	r2, r3
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	865a      	strh	r2, [r3, #50]	@ 0x32
    break;
 8000a0a:	e0c2      	b.n	8000b92 <mbus_poll+0x30a>
  case MBUS_STATE_REGADDR_LO:
    ctx->header.addr |= byte;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8000a10:	79bb      	ldrb	r3, [r7, #6]
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	4313      	orrs	r3, r2
 8000a16:	b29a      	uxth	r2, r3
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	865a      	strh	r2, [r3, #50]	@ 0x32
    if (ctx->header.num == 1 && ctx->header.rnum == 1) {
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d108      	bne.n	8000a36 <mbus_poll+0x1ae>
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d104      	bne.n	8000a36 <mbus_poll+0x1ae>
      ctx->state = MBUS_STATE_DATA_HI;
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	2208      	movs	r2, #8
 8000a30:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    } else {
      ctx->state = MBUS_STATE_REGNUM_HI;
    }
    break;
 8000a34:	e0ad      	b.n	8000b92 <mbus_poll+0x30a>
      ctx->state = MBUS_STATE_REGNUM_HI;
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	2206      	movs	r2, #6
 8000a3a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    break;
 8000a3e:	e0a8      	b.n	8000b92 <mbus_poll+0x30a>
  case MBUS_STATE_DATA_HI:
    ctx->state = MBUS_STATE_DATA_LO;
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	2207      	movs	r2, #7
 8000a44:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    ctx->conf.recvbuf[2 * (ctx->header.num - ctx->header.rnum) + 1] = byte;
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	6a1a      	ldr	r2, [r3, #32]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000a50:	4619      	mov	r1, r3
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000a56:	1acb      	subs	r3, r1, r3
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	4413      	add	r3, r2
 8000a5e:	79ba      	ldrb	r2, [r7, #6]
 8000a60:	701a      	strb	r2, [r3, #0]
    break;
 8000a62:	e096      	b.n	8000b92 <mbus_poll+0x30a>
  case MBUS_STATE_DATA_LO:
    ctx->conf.recvbuf[2 * (ctx->header.num - ctx->header.rnum)] = byte;
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	6a1b      	ldr	r3, [r3, #32]
 8000a68:	68fa      	ldr	r2, [r7, #12]
 8000a6a:	8e92      	ldrh	r2, [r2, #52]	@ 0x34
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	68fa      	ldr	r2, [r7, #12]
 8000a70:	8ed2      	ldrh	r2, [r2, #54]	@ 0x36
 8000a72:	1a8a      	subs	r2, r1, r2
 8000a74:	0052      	lsls	r2, r2, #1
 8000a76:	4413      	add	r3, r2
 8000a78:	79ba      	ldrb	r2, [r7, #6]
 8000a7a:	701a      	strb	r2, [r3, #0]
    ctx->header.rnum--;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000a80:	3b01      	subs	r3, #1
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	86da      	strh	r2, [r3, #54]	@ 0x36
    if (ctx->header.rnum == 0) {
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d104      	bne.n	8000a9a <mbus_poll+0x212>
      ctx->state = MBUS_STATE_CRC_LO;
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	220b      	movs	r2, #11
 8000a94:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    } else {
      ctx->state = MBUS_STATE_DATA_HI;
    }
    break;
 8000a98:	e07b      	b.n	8000b92 <mbus_poll+0x30a>
      ctx->state = MBUS_STATE_DATA_HI;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	2208      	movs	r2, #8
 8000a9e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    break;
 8000aa2:	e076      	b.n	8000b92 <mbus_poll+0x30a>
  case MBUS_STATE_DATA_SIZE:
    ctx->state = MBUS_STATE_DATA;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	220a      	movs	r2, #10
 8000aa8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    ctx->header.size = byte;
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	79ba      	ldrb	r2, [r7, #6]
 8000ab0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    ctx->header.rsize = byte;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	79ba      	ldrb	r2, [r7, #6]
 8000ab8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    break;
 8000abc:	e069      	b.n	8000b92 <mbus_poll+0x30a>
  case MBUS_STATE_DATA:
    ctx->conf.recvbuf[ctx->header.size - ctx->header.rsize] = byte;
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	6a1b      	ldr	r3, [r3, #32]
 8000ac2:	68fa      	ldr	r2, [r7, #12]
 8000ac4:	f892 2038 	ldrb.w	r2, [r2, #56]	@ 0x38
 8000ac8:	4611      	mov	r1, r2
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 8000ad0:	1a8a      	subs	r2, r1, r2
 8000ad2:	4413      	add	r3, r2
 8000ad4:	79ba      	ldrb	r2, [r7, #6]
 8000ad6:	701a      	strb	r2, [r3, #0]
    ctx->header.rsize--;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    if (ctx->header.rsize == 0) {
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d14c      	bne.n	8000b8c <mbus_poll+0x304>
      ctx->state = MBUS_STATE_CRC_LO;
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	220b      	movs	r2, #11
 8000af6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    }
    break;
 8000afa:	e047      	b.n	8000b8c <mbus_poll+0x304>
  case MBUS_STATE_REGNUM_HI:
    ctx->state = MBUS_STATE_REGNUM_LO;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	2205      	movs	r2, #5
 8000b00:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    ctx->header.num = byte << 8;
 8000b04:	79bb      	ldrb	r3, [r7, #6]
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	021b      	lsls	r3, r3, #8
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	869a      	strh	r2, [r3, #52]	@ 0x34
    break;
 8000b10:	e03f      	b.n	8000b92 <mbus_poll+0x30a>
  case MBUS_STATE_REGNUM_LO:
    ctx->state = MBUS_STATE_CRC_LO;
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	220b      	movs	r2, #11
 8000b16:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    ctx->header.num |= byte;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8000b1e:	79bb      	ldrb	r3, [r7, #6]
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	4313      	orrs	r3, r2
 8000b24:	b29a      	uxth	r2, r3
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	869a      	strh	r2, [r3, #52]	@ 0x34
    if (ctx->header.rnum == 0) {
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d104      	bne.n	8000b3c <mbus_poll+0x2b4>
      ctx->state = MBUS_STATE_CRC_LO;
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	220b      	movs	r2, #11
 8000b36:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      if (ctx->header.func == MBUS_FUNC_WRITE_REGS) {
        ctx->state = MBUS_STATE_DATA_SIZE;
      }
    }

    break;
 8000b3a:	e029      	b.n	8000b90 <mbus_poll+0x308>
      ctx->header.rnum = ctx->header.num;
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	86da      	strh	r2, [r3, #54]	@ 0x36
      ctx->state = MBUS_STATE_DATA_HI;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	2208      	movs	r2, #8
 8000b48:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      if (ctx->header.func == MBUS_FUNC_WRITE_REGS) {
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8000b52:	2b10      	cmp	r3, #16
 8000b54:	d11c      	bne.n	8000b90 <mbus_poll+0x308>
        ctx->state = MBUS_STATE_DATA_SIZE;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	2209      	movs	r2, #9
 8000b5a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    break;
 8000b5e:	e017      	b.n	8000b90 <mbus_poll+0x308>
  case MBUS_STATE_CRC_LO:
    ctx->state = MBUS_STATE_CRC_HI;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	220c      	movs	r2, #12
 8000b64:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    break;
 8000b68:	e013      	b.n	8000b92 <mbus_poll+0x30a>
 8000b6a:	bf00      	nop
 8000b6c:	200001c4 	.word	0x200001c4
  case MBUS_STATE_CRC_HI:
    ctx->state = MBUS_STATE_FINISH;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	220d      	movs	r2, #13
 8000b74:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    break;
 8000b78:	e00b      	b.n	8000b92 <mbus_poll+0x30a>
  // We can't processing any more before callback not returned
  case MBUS_STATE_RESPONSE:
    return MBUS_ERROR;
 8000b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7e:	e04c      	b.n	8000c1a <mbus_poll+0x392>
  default:
    mbus_flush(mb_context);
 8000b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fcaf 	bl	80004e8 <mbus_flush>
    break;
 8000b8a:	e002      	b.n	8000b92 <mbus_poll+0x30a>
    break;
 8000b8c:	bf00      	nop
 8000b8e:	e000      	b.n	8000b92 <mbus_poll+0x30a>
    break;
 8000b90:	bf00      	nop
  }

  ctx->crc16 = mbus_crc16(ctx->crc16, byte);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000b96:	79ba      	ldrb	r2, [r7, #6]
 8000b98:	4611      	mov	r1, r2
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff fc1c 	bl	80003d8 <mbus_crc16>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (ctx->state == MBUS_STATE_FINISH) {
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8000bae:	2b0d      	cmp	r3, #13
 8000bb0:	d132      	bne.n	8000c18 <mbus_poll+0x390>
    // CRC error
    if (ctx->crc16 != 0) {
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d007      	beq.n	8000bca <mbus_poll+0x342>
      mbus_flush(mb_context);
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff fc92 	bl	80004e8 <mbus_flush>
      return MBUS_ERROR;
 8000bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc8:	e027      	b.n	8000c1a <mbus_poll+0x392>
    }

    // TODO: Add broadcast messages
    if (ctx->header.devaddr == ctx->conf.devaddr) {
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d11a      	bne.n	8000c0e <mbus_poll+0x386>
      ctx->state = MBUS_STATE_RESPONSE;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	220e      	movs	r2, #14
 8000bdc:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      if (mbus_poll_response(mb_context) == MBUS_OK) {
 8000be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fcbf 	bl	8000568 <mbus_poll_response>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d106      	bne.n	8000bfe <mbus_poll+0x376>
        mbus_flush(mb_context);
 8000bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff fc77 	bl	80004e8 <mbus_flush>
        return MBUS_OK;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	e00d      	b.n	8000c1a <mbus_poll+0x392>
      }
      mbus_flush(mb_context);
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff fc70 	bl	80004e8 <mbus_flush>
      return MBUS_ERROR;
 8000c08:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0c:	e005      	b.n	8000c1a <mbus_poll+0x392>
    }
    mbus_flush(mb_context);
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fc68 	bl	80004e8 <mbus_flush>
  }
  return MBUS_OK;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop

08000c24 <mbus_send_error>:
  if (g_mbusContext[mb_context].open)
    return (mbus_context_t)&g_mbusContext[mb_context];
  return 0;
}

mbus_status_t mbus_send_error(mbus_t mb_context, Modbus_ResponseType response) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	460a      	mov	r2, r1
 8000c2e:	71fb      	strb	r3, [r7, #7]
 8000c30:	4613      	mov	r3, r2
 8000c32:	71bb      	strb	r3, [r7, #6]
  uint16_t *pbuf = (uint16_t *)(g_mbusContext[mb_context].conf.sendbuf + 2);
 8000c34:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000c38:	490e      	ldr	r1, [pc, #56]	@ (8000c74 <mbus_send_error+0x50>)
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	011b      	lsls	r3, r3, #4
 8000c3e:	4413      	add	r3, r2
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	440b      	add	r3, r1
 8000c44:	3318      	adds	r3, #24
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	3302      	adds	r3, #2
 8000c4a:	60fb      	str	r3, [r7, #12]
  *pbuf = 0x8300 | (uint8_t)response;
 8000c4c:	79bb      	ldrb	r3, [r7, #6]
 8000c4e:	b21a      	sxth	r2, r3
 8000c50:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <mbus_send_error+0x54>)
 8000c52:	4313      	orrs	r3, r2
 8000c54:	b21b      	sxth	r3, r3
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	801a      	strh	r2, [r3, #0]
  return mbus_send_data(mb_context, 4);
 8000c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c60:	2104      	movs	r1, #4
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 f80a 	bl	8000c7c <mbus_send_data>
 8000c68:	4603      	mov	r3, r0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200001c4 	.word	0x200001c4
 8000c78:	ffff8300 	.word	0xffff8300

08000c7c <mbus_send_data>:

mbus_status_t mbus_send_data(mbus_t mb_context, uint16_t size) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	460a      	mov	r2, r1
 8000c86:	71fb      	strb	r3, [r7, #7]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	80bb      	strh	r3, [r7, #4]
  // if size > ( conf.send_sz-2) error
  uint16_t crc32 = 0xFFFF;
 8000c8c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c90:	82fb      	strh	r3, [r7, #22]
  const _stmodbus_context_t *ctx = &g_mbusContext[mb_context];
 8000c92:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000c96:	4613      	mov	r3, r2
 8000c98:	011b      	lsls	r3, r3, #4
 8000c9a:	4413      	add	r3, r2
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	4a29      	ldr	r2, [pc, #164]	@ (8000d44 <mbus_send_data+0xc8>)
 8000ca0:	4413      	add	r3, r2
 8000ca2:	60fb      	str	r3, [r7, #12]
  uint8_t *pbuf = ctx->conf.sendbuf;
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	60bb      	str	r3, [r7, #8]
  if (ctx->conf.send == 0 || pbuf == 0 || ctx->conf.sendbuf_sz < (size + 2))
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	68db      	ldr	r3, [r3, #12]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d008      	beq.n	8000cc4 <mbus_send_data+0x48>
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d005      	beq.n	8000cc4 <mbus_send_data+0x48>
 8000cb8:	88bb      	ldrh	r3, [r7, #4]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	68fa      	ldr	r2, [r7, #12]
 8000cbe:	8b92      	ldrh	r2, [r2, #28]
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	db02      	blt.n	8000cca <mbus_send_data+0x4e>
    return MBUS_ERROR;
 8000cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc8:	e037      	b.n	8000d3a <mbus_send_data+0xbe>
  for (int i = 0; i < size; i++) {
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	e00d      	b.n	8000cec <mbus_send_data+0x70>
    crc32 = mbus_crc16(crc32, pbuf[i]);
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	68ba      	ldr	r2, [r7, #8]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	781a      	ldrb	r2, [r3, #0]
 8000cd8:	8afb      	ldrh	r3, [r7, #22]
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fb7b 	bl	80003d8 <mbus_crc16>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	82fb      	strh	r3, [r7, #22]
  for (int i = 0; i < size; i++) {
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	88bb      	ldrh	r3, [r7, #4]
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	dbed      	blt.n	8000cd0 <mbus_send_data+0x54>
  }
  pbuf[size++] = crc32 & 0xFF;
 8000cf4:	88bb      	ldrh	r3, [r7, #4]
 8000cf6:	1c5a      	adds	r2, r3, #1
 8000cf8:	80ba      	strh	r2, [r7, #4]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	4413      	add	r3, r2
 8000d00:	8afa      	ldrh	r2, [r7, #22]
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	701a      	strb	r2, [r3, #0]
  pbuf[size++] = (crc32 >> 8);
 8000d06:	8afb      	ldrh	r3, [r7, #22]
 8000d08:	0a1b      	lsrs	r3, r3, #8
 8000d0a:	b29a      	uxth	r2, r3
 8000d0c:	88bb      	ldrh	r3, [r7, #4]
 8000d0e:	1c59      	adds	r1, r3, #1
 8000d10:	80b9      	strh	r1, [r7, #4]
 8000d12:	4619      	mov	r1, r3
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	440b      	add	r3, r1
 8000d18:	b2d2      	uxtb	r2, r2
 8000d1a:	701a      	strb	r2, [r3, #0]

  if (ctx->conf.send(mb_context, pbuf, size) != size)
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	88ba      	ldrh	r2, [r7, #4]
 8000d22:	f997 0007 	ldrsb.w	r0, [r7, #7]
 8000d26:	68b9      	ldr	r1, [r7, #8]
 8000d28:	4798      	blx	r3
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	88bb      	ldrh	r3, [r7, #4]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d002      	beq.n	8000d38 <mbus_send_data+0xbc>
    return MBUS_ERROR;
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295
 8000d36:	e000      	b.n	8000d3a <mbus_send_data+0xbe>
  return MBUS_OK;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200001c4 	.word	0x200001c4

08000d48 <mbus_proto_address>:
  }
#endif
  return MBUS_ERROR;
}

int mbus_proto_address( Modbus_ConnectFuncType func, int *r) {
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	6039      	str	r1, [r7, #0]
 8000d52:	71fb      	strb	r3, [r7, #7]
  int adr = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]
  *r = 1;
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	601a      	str	r2, [r3, #0]
  switch (func) {
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	2b17      	cmp	r3, #23
 8000d62:	dc3f      	bgt.n	8000de4 <mbus_proto_address+0x9c>
 8000d64:	2b04      	cmp	r3, #4
 8000d66:	da08      	bge.n	8000d7a <mbus_proto_address+0x32>
 8000d68:	2b03      	cmp	r3, #3
 8000d6a:	d029      	beq.n	8000dc0 <mbus_proto_address+0x78>
 8000d6c:	2b03      	cmp	r3, #3
 8000d6e:	dc39      	bgt.n	8000de4 <mbus_proto_address+0x9c>
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d034      	beq.n	8000dde <mbus_proto_address+0x96>
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d02b      	beq.n	8000dd0 <mbus_proto_address+0x88>
    *r = 0;
  case MBUS_FUNC_READ_COILS:
    adr = 0001;
    break;
  default:
    break;
 8000d78:	e034      	b.n	8000de4 <mbus_proto_address+0x9c>
  switch (func) {
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	4093      	lsls	r3, r2
 8000d80:	4a1c      	ldr	r2, [pc, #112]	@ (8000df4 <mbus_proto_address+0xac>)
 8000d82:	401a      	ands	r2, r3
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	bf14      	ite	ne
 8000d88:	2201      	movne	r2, #1
 8000d8a:	2200      	moveq	r2, #0
 8000d8c:	b2d2      	uxtb	r2, r2
 8000d8e:	2a00      	cmp	r2, #0
 8000d90:	d113      	bne.n	8000dba <mbus_proto_address+0x72>
 8000d92:	f248 0220 	movw	r2, #32800	@ 0x8020
 8000d96:	401a      	ands	r2, r3
 8000d98:	2a00      	cmp	r2, #0
 8000d9a:	bf14      	ite	ne
 8000d9c:	2201      	movne	r2, #1
 8000d9e:	2200      	moveq	r2, #0
 8000da0:	b2d2      	uxtb	r2, r2
 8000da2:	2a00      	cmp	r2, #0
 8000da4:	d118      	bne.n	8000dd8 <mbus_proto_address+0x90>
 8000da6:	f003 0310 	and.w	r3, r3, #16
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	bf14      	ite	ne
 8000dae:	2301      	movne	r3, #1
 8000db0:	2300      	moveq	r3, #0
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d107      	bne.n	8000dc8 <mbus_proto_address+0x80>
    break;
 8000db8:	e014      	b.n	8000de4 <mbus_proto_address+0x9c>
    *r = 0;
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
    adr = 40001;
 8000dc0:	f649 4341 	movw	r3, #40001	@ 0x9c41
 8000dc4:	60fb      	str	r3, [r7, #12]
    break;
 8000dc6:	e00e      	b.n	8000de6 <mbus_proto_address+0x9e>
    adr = 30001;
 8000dc8:	f247 5331 	movw	r3, #30001	@ 0x7531
 8000dcc:	60fb      	str	r3, [r7, #12]
    break;
 8000dce:	e00a      	b.n	8000de6 <mbus_proto_address+0x9e>
    adr = 10001;
 8000dd0:	f242 7311 	movw	r3, #10001	@ 0x2711
 8000dd4:	60fb      	str	r3, [r7, #12]
    break;
 8000dd6:	e006      	b.n	8000de6 <mbus_proto_address+0x9e>
    *r = 0;
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
    adr = 0001;
 8000dde:	2301      	movs	r3, #1
 8000de0:	60fb      	str	r3, [r7, #12]
    break;
 8000de2:	e000      	b.n	8000de6 <mbus_proto_address+0x9e>
    break;
 8000de4:	bf00      	nop
  }
  return adr;
 8000de6:	68fb      	ldr	r3, [r7, #12]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	00c10040 	.word	0x00c10040

08000df8 <Modbus_Device_Read>:
 * @brief  Modbus device read callback
 * @param  logical_address: Modbus logical address (40001, 40002, etc.)
 * @retval Register value
 */
uint16_t Modbus_Device_Read(uint32_t logical_address)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
    // Simple direct array access like the sample code
    if (logical_address >= 40001 && logical_address <= 40020)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d911      	bls.n	8000e2e <Modbus_Device_Read+0x36>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f649 4254 	movw	r2, #40020	@ 0x9c54
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d80c      	bhi.n	8000e2e <Modbus_Device_Read+0x36>
    {
        uint16_t index = logical_address - 40001;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	f503 43c7 	add.w	r3, r3, #25472	@ 0x6380
 8000e1c:	333f      	adds	r3, #63	@ 0x3f
 8000e1e:	81fb      	strh	r3, [r7, #14]
        uint16_t value = device_registers[index];
 8000e20:	89fb      	ldrh	r3, [r7, #14]
 8000e22:	4a06      	ldr	r2, [pc, #24]	@ (8000e3c <Modbus_Device_Read+0x44>)
 8000e24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e28:	81bb      	strh	r3, [r7, #12]

        // Debug: Show what we're returning for ALL registers
        // printf("READ: addr=%lu, index=%d, returning %d (0x%04X)\n", logical_address, index, value, value); // Removed to prevent timeouts

        return value;
 8000e2a:	89bb      	ldrh	r3, [r7, #12]
 8000e2c:	e000      	b.n	8000e30 <Modbus_Device_Read+0x38>
    }

    return 0; // Invalid address
 8000e2e:	2300      	movs	r3, #0
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	20000000 	.word	0x20000000

08000e40 <Modbus_Device_Write>:
 * @param  logical_address: Modbus logical address (40001, 40002, etc.)
 * @param  value: Value to write
 * @retval Written value
 */
uint16_t Modbus_Device_Write(uint32_t logical_address, uint16_t value)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	807b      	strh	r3, [r7, #2]
    // Convert logical address to array index
    if (logical_address >= 40001 && logical_address <= 40020)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d926      	bls.n	8000ea4 <Modbus_Device_Write+0x64>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f649 4254 	movw	r2, #40020	@ 0x9c54
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d821      	bhi.n	8000ea4 <Modbus_Device_Write+0x64>
    {
        uint16_t index = logical_address - 40001;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	f503 43c7 	add.w	r3, r3, #25472	@ 0x6380
 8000e68:	333f      	adds	r3, #63	@ 0x3f
 8000e6a:	81fb      	strh	r3, [r7, #14]

        // Handle special write operations
        switch (logical_address)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f5a3 431c 	sub.w	r3, r3, #39936	@ 0x9c00
 8000e72:	3b4f      	subs	r3, #79	@ 0x4f
 8000e74:	2b04      	cmp	r3, #4
 8000e76:	d80d      	bhi.n	8000e94 <Modbus_Device_Write+0x54>
 8000e78:	a201      	add	r2, pc, #4	@ (adr r2, 8000e80 <Modbus_Device_Write+0x40>)
 8000e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e7e:	bf00      	nop
 8000e80:	08000e95 	.word	0x08000e95
 8000e84:	08000e95 	.word	0x08000e95
 8000e88:	08000e95 	.word	0x08000e95
 8000e8c:	08000e95 	.word	0x08000e95
 8000e90:	08000e95 	.word	0x08000e95
            // Handle test operations
            break;

        default:
            // Store value for other registers
            break;
 8000e94:	bf00      	nop
        }

        // Store the value
        device_registers[index] = value;
 8000e96:	89fb      	ldrh	r3, [r7, #14]
 8000e98:	4906      	ldr	r1, [pc, #24]	@ (8000eb4 <Modbus_Device_Write+0x74>)
 8000e9a:	887a      	ldrh	r2, [r7, #2]
 8000e9c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        return value;
 8000ea0:	887b      	ldrh	r3, [r7, #2]
 8000ea2:	e000      	b.n	8000ea6 <Modbus_Device_Write+0x66>
    }

    return 0; // Invalid address
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3714      	adds	r7, #20
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	20000000 	.word	0x20000000

08000eb8 <Modbus_Device_UpdateSensors>:
 * @brief  Update sensor values (call this periodically)
 * @param  None
 * @retval None
 */
void Modbus_Device_UpdateSensors(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
    // device_registers[0] = Read_Sensor1_Value();  // 40001
    // device_registers[1] = Read_Sensor2_Value();  // 40002
    // device_registers[4] = Read_Temperature();    // 40005
    // device_registers[5] = Read_Humidity();       // 40006
    // etc.
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
	...

08000ec8 <Modbus_Init>:
 * @brief  Initialize Modbus RTU slave
 * @param  None
 * @retval None
 */
void Modbus_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
    // printf("Initializing Modbus...\n"); // Removed to prevent timing delays

    // Configure Modbus
    modbus_config.devaddr = 0x01; // Slave address
 8000ecc:	4b3a      	ldr	r3, [pc, #232]	@ (8000fb8 <Modbus_Init+0xf0>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	701a      	strb	r2, [r3, #0]
    modbus_config.coils = 0;      // No internal coil handling
 8000ed2:	4b39      	ldr	r3, [pc, #228]	@ (8000fb8 <Modbus_Init+0xf0>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	805a      	strh	r2, [r3, #2]
    modbus_config.discrete = 0;   // No internal discrete handling
 8000ed8:	4b37      	ldr	r3, [pc, #220]	@ (8000fb8 <Modbus_Init+0xf0>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	809a      	strh	r2, [r3, #4]
    modbus_config.device = NULL;  // No device pointer needed
 8000ede:	4b36      	ldr	r3, [pc, #216]	@ (8000fb8 <Modbus_Init+0xf0>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
    modbus_config.send = Modbus_SendData;
 8000ee4:	4b34      	ldr	r3, [pc, #208]	@ (8000fb8 <Modbus_Init+0xf0>)
 8000ee6:	4a35      	ldr	r2, [pc, #212]	@ (8000fbc <Modbus_Init+0xf4>)
 8000ee8:	60da      	str	r2, [r3, #12]
    modbus_config.read = Modbus_Device_Read;
 8000eea:	4b33      	ldr	r3, [pc, #204]	@ (8000fb8 <Modbus_Init+0xf0>)
 8000eec:	4a34      	ldr	r2, [pc, #208]	@ (8000fc0 <Modbus_Init+0xf8>)
 8000eee:	611a      	str	r2, [r3, #16]
    modbus_config.write = Modbus_Device_Write;
 8000ef0:	4b31      	ldr	r3, [pc, #196]	@ (8000fb8 <Modbus_Init+0xf0>)
 8000ef2:	4a34      	ldr	r2, [pc, #208]	@ (8000fc4 <Modbus_Init+0xfc>)
 8000ef4:	615a      	str	r2, [r3, #20]
    modbus_config.sendbuf = modbus_tx_buffer;
 8000ef6:	4b30      	ldr	r3, [pc, #192]	@ (8000fb8 <Modbus_Init+0xf0>)
 8000ef8:	4a33      	ldr	r2, [pc, #204]	@ (8000fc8 <Modbus_Init+0x100>)
 8000efa:	619a      	str	r2, [r3, #24]
    modbus_config.sendbuf_sz = sizeof(modbus_tx_buffer);
 8000efc:	4b2e      	ldr	r3, [pc, #184]	@ (8000fb8 <Modbus_Init+0xf0>)
 8000efe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f02:	839a      	strh	r2, [r3, #28]
    modbus_config.recvbuf = modbus_rx_buffer;
 8000f04:	4b2c      	ldr	r3, [pc, #176]	@ (8000fb8 <Modbus_Init+0xf0>)
 8000f06:	4a31      	ldr	r2, [pc, #196]	@ (8000fcc <Modbus_Init+0x104>)
 8000f08:	621a      	str	r2, [r3, #32]
    modbus_config.recvbuf_sz = sizeof(modbus_rx_buffer);
 8000f0a:	4b2b      	ldr	r3, [pc, #172]	@ (8000fb8 <Modbus_Init+0xf0>)
 8000f0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f10:	849a      	strh	r2, [r3, #36]	@ 0x24

    // printf("Modbus config: addr=0x%02X, buffers=%d/%d bytes\n",
    //        modbus_config.devaddr, modbus_config.sendbuf_sz, modbus_config.recvbuf_sz); // Removed

    // Initialize Modbus context
    modbus_context = mbus_open(&modbus_config);
 8000f12:	4829      	ldr	r0, [pc, #164]	@ (8000fb8 <Modbus_Init+0xf0>)
 8000f14:	f7ff fa94 	bl	8000440 <mbus_open>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	4b2c      	ldr	r3, [pc, #176]	@ (8000fd0 <Modbus_Init+0x108>)
 8000f1e:	701a      	strb	r2, [r3, #0]
    // printf("Modbus context opened: %d\n", modbus_context); // Removed

    // Set register values AFTER mbus_open (like sample code does)
    device_registers[0] = 20;  // 40001
 8000f20:	4b2c      	ldr	r3, [pc, #176]	@ (8000fd4 <Modbus_Init+0x10c>)
 8000f22:	2214      	movs	r2, #20
 8000f24:	801a      	strh	r2, [r3, #0]
    device_registers[1] = 19;  // 40002
 8000f26:	4b2b      	ldr	r3, [pc, #172]	@ (8000fd4 <Modbus_Init+0x10c>)
 8000f28:	2213      	movs	r2, #19
 8000f2a:	805a      	strh	r2, [r3, #2]
    device_registers[2] = 18;  // 40003
 8000f2c:	4b29      	ldr	r3, [pc, #164]	@ (8000fd4 <Modbus_Init+0x10c>)
 8000f2e:	2212      	movs	r2, #18
 8000f30:	809a      	strh	r2, [r3, #4]
    device_registers[3] = 17;  // 40004
 8000f32:	4b28      	ldr	r3, [pc, #160]	@ (8000fd4 <Modbus_Init+0x10c>)
 8000f34:	2211      	movs	r2, #17
 8000f36:	80da      	strh	r2, [r3, #6]
    device_registers[4] = 16;  // 40005
 8000f38:	4b26      	ldr	r3, [pc, #152]	@ (8000fd4 <Modbus_Init+0x10c>)
 8000f3a:	2210      	movs	r2, #16
 8000f3c:	811a      	strh	r2, [r3, #8]
    device_registers[5] = 15;  // 40006
 8000f3e:	4b25      	ldr	r3, [pc, #148]	@ (8000fd4 <Modbus_Init+0x10c>)
 8000f40:	220f      	movs	r2, #15
 8000f42:	815a      	strh	r2, [r3, #10]
    device_registers[6] = 14;  // 40007
 8000f44:	4b23      	ldr	r3, [pc, #140]	@ (8000fd4 <Modbus_Init+0x10c>)
 8000f46:	220e      	movs	r2, #14
 8000f48:	819a      	strh	r2, [r3, #12]
    device_registers[7] = 13;  // 40008
 8000f4a:	4b22      	ldr	r3, [pc, #136]	@ (8000fd4 <Modbus_Init+0x10c>)
 8000f4c:	220d      	movs	r2, #13
 8000f4e:	81da      	strh	r2, [r3, #14]
    device_registers[8] = 12;  // 40009
 8000f50:	4b20      	ldr	r3, [pc, #128]	@ (8000fd4 <Modbus_Init+0x10c>)
 8000f52:	220c      	movs	r2, #12
 8000f54:	821a      	strh	r2, [r3, #16]
    device_registers[9] = 11;  // 40010
 8000f56:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd4 <Modbus_Init+0x10c>)
 8000f58:	220b      	movs	r2, #11
 8000f5a:	825a      	strh	r2, [r3, #18]
    device_registers[10] = 10; // 40011
 8000f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd4 <Modbus_Init+0x10c>)
 8000f5e:	220a      	movs	r2, #10
 8000f60:	829a      	strh	r2, [r3, #20]
    device_registers[11] = 9;  // 40012
 8000f62:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd4 <Modbus_Init+0x10c>)
 8000f64:	2209      	movs	r2, #9
 8000f66:	82da      	strh	r2, [r3, #22]
    device_registers[12] = 8;  // 40013
 8000f68:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd4 <Modbus_Init+0x10c>)
 8000f6a:	2208      	movs	r2, #8
 8000f6c:	831a      	strh	r2, [r3, #24]
    device_registers[13] = 7;  // 40014
 8000f6e:	4b19      	ldr	r3, [pc, #100]	@ (8000fd4 <Modbus_Init+0x10c>)
 8000f70:	2207      	movs	r2, #7
 8000f72:	835a      	strh	r2, [r3, #26]
    device_registers[14] = 6;  // 40015
 8000f74:	4b17      	ldr	r3, [pc, #92]	@ (8000fd4 <Modbus_Init+0x10c>)
 8000f76:	2206      	movs	r2, #6
 8000f78:	839a      	strh	r2, [r3, #28]
    device_registers[15] = 5;  // 40016
 8000f7a:	4b16      	ldr	r3, [pc, #88]	@ (8000fd4 <Modbus_Init+0x10c>)
 8000f7c:	2205      	movs	r2, #5
 8000f7e:	83da      	strh	r2, [r3, #30]
    device_registers[16] = 4;  // 40017
 8000f80:	4b14      	ldr	r3, [pc, #80]	@ (8000fd4 <Modbus_Init+0x10c>)
 8000f82:	2204      	movs	r2, #4
 8000f84:	841a      	strh	r2, [r3, #32]
    device_registers[17] = 3;  // 40018
 8000f86:	4b13      	ldr	r3, [pc, #76]	@ (8000fd4 <Modbus_Init+0x10c>)
 8000f88:	2203      	movs	r2, #3
 8000f8a:	845a      	strh	r2, [r3, #34]	@ 0x22
    device_registers[18] = 2;  // 40019
 8000f8c:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <Modbus_Init+0x10c>)
 8000f8e:	2202      	movs	r2, #2
 8000f90:	849a      	strh	r2, [r3, #36]	@ 0x24
    device_registers[19] = 1;  // 40020
 8000f92:	4b10      	ldr	r3, [pc, #64]	@ (8000fd4 <Modbus_Init+0x10c>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	84da      	strh	r2, [r3, #38]	@ 0x26
    //     printf("Reg[%d] = %d\n", i, device_registers[i]);
    // }
    // printf("Registers initialized. Ready for ModbusPoll connection.\n"); // Removed to prevent timeouts

    // Start UART DMA reception
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, modbus_rx_buffer, sizeof(modbus_rx_buffer));
 8000f98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f9c:	490b      	ldr	r1, [pc, #44]	@ (8000fcc <Modbus_Init+0x104>)
 8000f9e:	480e      	ldr	r0, [pc, #56]	@ (8000fd8 <Modbus_Init+0x110>)
 8000fa0:	f003 fbd4 	bl	800474c <HAL_UARTEx_ReceiveToIdle_DMA>
    // printf("DMA reception started: %d\n", dma_status); // Removed

    // Enable UART idle line interrupt for Modbus frame detection
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd8 <Modbus_Init+0x110>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd8 <Modbus_Init+0x110>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f042 0210 	orr.w	r2, r2, #16
 8000fb2:	601a      	str	r2, [r3, #0]
    // printf("UART idle interrupt enabled\n"); // Removed
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	2000020c 	.word	0x2000020c
 8000fbc:	08000fed 	.word	0x08000fed
 8000fc0:	08000df9 	.word	0x08000df9
 8000fc4:	08000e41 	.word	0x08000e41
 8000fc8:	20000334 	.word	0x20000334
 8000fcc:	20000234 	.word	0x20000234
 8000fd0:	20000209 	.word	0x20000209
 8000fd4:	20000000 	.word	0x20000000
 8000fd8:	200000b4 	.word	0x200000b4

08000fdc <Modbus_Process>:
 * @brief  Process Modbus communication
 * @param  None
 * @retval None
 */
void Modbus_Process(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
    // This function can be called in main loop if needed
    // Currently, processing is handled in UART callback
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
	...

08000fec <Modbus_SendData>:
 * @param  data: Data to send
 * @param  size: Size of data
 * @retval Number of bytes sent
 */
static int Modbus_SendData(const mbus_t context, const uint8_t *data, const uint16_t size)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	6039      	str	r1, [r7, #0]
 8000ff6:	71fb      	strb	r3, [r7, #7]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	80bb      	strh	r3, [r7, #4]
    // {
    //     printf("0x%02X ", data[i]);
    // }
    // printf("\n");

    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, (uint8_t *)data, size, 1000);
 8000ffc:	88ba      	ldrh	r2, [r7, #4]
 8000ffe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001002:	6839      	ldr	r1, [r7, #0]
 8001004:	4807      	ldr	r0, [pc, #28]	@ (8001024 <Modbus_SendData+0x38>)
 8001006:	f002 fa59 	bl	80034bc <HAL_UART_Transmit>
 800100a:	4603      	mov	r3, r0
 800100c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d101      	bne.n	8001018 <Modbus_SendData+0x2c>
    {
        // printf("TX Success\n"); // Removed to prevent timing delays
        return size;
 8001014:	88bb      	ldrh	r3, [r7, #4]
 8001016:	e000      	b.n	800101a <Modbus_SendData+0x2e>
    }
    else
    {
        // printf("TX Failed: %d\n", status); // Removed to prevent timing delays
        return 0;
 8001018:	2300      	movs	r3, #0
    }
}
 800101a:	4618      	mov	r0, r3
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200000b4 	.word	0x200000b4

08001028 <Modbus_GetContext>:
 * @brief  Get Modbus context (for external access)
 * @param  None
 * @retval Modbus context
 */
mbus_t Modbus_GetContext(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
    return modbus_context;
 800102c:	4b03      	ldr	r3, [pc, #12]	@ (800103c <Modbus_GetContext+0x14>)
 800102e:	f993 3000 	ldrsb.w	r3, [r3]
 8001032:	4618      	mov	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	20000209 	.word	0x20000209

08001040 <Modbus_Test_Init>:
 * @brief  Initialize Modbus test functions
 * @param  None
 * @retval None
 */
void Modbus_Test_Init(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
    // Set initial test values - DISABLED to preserve sequential test data (1-20)
    // Modbus_Device_SetRegister(0, 0x1234);  // 40001: Test sensor 1
    // Modbus_Device_SetRegister(1, 0x5678);  // 40002: Test sensor 2
    // Modbus_Device_SetRegister(9, 0x0001);  // 40010: Status (bit 0 = ready)
    // Modbus_Device_SetRegister(11, 0x0100); // 40012: Firmware version 1.0
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <Modbus_Test_Update>:
 * @brief  Update test values periodically
 * @param  None
 * @retval None
 */
void Modbus_Test_Update(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
    test_counter++;
 8001054:	4b04      	ldr	r3, [pc, #16]	@ (8001068 <Modbus_Test_Update+0x18>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	3301      	adds	r3, #1
 800105a:	4a03      	ldr	r2, [pc, #12]	@ (8001068 <Modbus_Test_Update+0x18>)
 800105c:	6013      	str	r3, [r2, #0]
    // Simulate temperature reading (25.00°C = 9472) - Commented out to preserve test data
    // Modbus_Device_SetRegister(4, 205); // 40005

    // Simulate humidity reading (65.00% = 25856) - Commented out to preserve test data
    // Modbus_Device_SetRegister(5, 652); // 40006
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	20000434 	.word	0x20000434

0800106c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001072:	4b0f      	ldr	r3, [pc, #60]	@ (80010b0 <HAL_MspInit+0x44>)
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	4a0e      	ldr	r2, [pc, #56]	@ (80010b0 <HAL_MspInit+0x44>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	6193      	str	r3, [r2, #24]
 800107e:	4b0c      	ldr	r3, [pc, #48]	@ (80010b0 <HAL_MspInit+0x44>)
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800108a:	4b09      	ldr	r3, [pc, #36]	@ (80010b0 <HAL_MspInit+0x44>)
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	4a08      	ldr	r2, [pc, #32]	@ (80010b0 <HAL_MspInit+0x44>)
 8001090:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001094:	61d3      	str	r3, [r2, #28]
 8001096:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <HAL_MspInit+0x44>)
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800109e:	603b      	str	r3, [r7, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	40021000 	.word	0x40021000

080010b4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	@ 0x28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a42      	ldr	r2, [pc, #264]	@ (80011dc <HAL_UART_MspInit+0x128>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d17d      	bne.n	80011d2 <HAL_UART_MspInit+0x11e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010d6:	4b42      	ldr	r3, [pc, #264]	@ (80011e0 <HAL_UART_MspInit+0x12c>)
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	4a41      	ldr	r2, [pc, #260]	@ (80011e0 <HAL_UART_MspInit+0x12c>)
 80010dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010e0:	6193      	str	r3, [r2, #24]
 80010e2:	4b3f      	ldr	r3, [pc, #252]	@ (80011e0 <HAL_UART_MspInit+0x12c>)
 80010e4:	699b      	ldr	r3, [r3, #24]
 80010e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	4b3c      	ldr	r3, [pc, #240]	@ (80011e0 <HAL_UART_MspInit+0x12c>)
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	4a3b      	ldr	r2, [pc, #236]	@ (80011e0 <HAL_UART_MspInit+0x12c>)
 80010f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010f8:	6153      	str	r3, [r2, #20]
 80010fa:	4b39      	ldr	r3, [pc, #228]	@ (80011e0 <HAL_UART_MspInit+0x12c>)
 80010fc:	695b      	ldr	r3, [r3, #20]
 80010fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA12     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8001106:	f44f 53b0 	mov.w	r3, #5632	@ 0x1600
 800110a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110c:	2302      	movs	r3, #2
 800110e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001114:	2303      	movs	r3, #3
 8001116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001118:	2307      	movs	r3, #7
 800111a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	4619      	mov	r1, r3
 8001122:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001126:	f000 fcfb 	bl	8001b20 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800112a:	4b2e      	ldr	r3, [pc, #184]	@ (80011e4 <HAL_UART_MspInit+0x130>)
 800112c:	4a2e      	ldr	r2, [pc, #184]	@ (80011e8 <HAL_UART_MspInit+0x134>)
 800112e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001130:	4b2c      	ldr	r3, [pc, #176]	@ (80011e4 <HAL_UART_MspInit+0x130>)
 8001132:	2200      	movs	r2, #0
 8001134:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001136:	4b2b      	ldr	r3, [pc, #172]	@ (80011e4 <HAL_UART_MspInit+0x130>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800113c:	4b29      	ldr	r3, [pc, #164]	@ (80011e4 <HAL_UART_MspInit+0x130>)
 800113e:	2280      	movs	r2, #128	@ 0x80
 8001140:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001142:	4b28      	ldr	r3, [pc, #160]	@ (80011e4 <HAL_UART_MspInit+0x130>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001148:	4b26      	ldr	r3, [pc, #152]	@ (80011e4 <HAL_UART_MspInit+0x130>)
 800114a:	2200      	movs	r2, #0
 800114c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800114e:	4b25      	ldr	r3, [pc, #148]	@ (80011e4 <HAL_UART_MspInit+0x130>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001154:	4b23      	ldr	r3, [pc, #140]	@ (80011e4 <HAL_UART_MspInit+0x130>)
 8001156:	2200      	movs	r2, #0
 8001158:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800115a:	4822      	ldr	r0, [pc, #136]	@ (80011e4 <HAL_UART_MspInit+0x130>)
 800115c:	f000 facd 	bl	80016fa <HAL_DMA_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8001166:	f7ff f931 	bl	80003cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a1d      	ldr	r2, [pc, #116]	@ (80011e4 <HAL_UART_MspInit+0x130>)
 800116e:	675a      	str	r2, [r3, #116]	@ 0x74
 8001170:	4a1c      	ldr	r2, [pc, #112]	@ (80011e4 <HAL_UART_MspInit+0x130>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001176:	4b1d      	ldr	r3, [pc, #116]	@ (80011ec <HAL_UART_MspInit+0x138>)
 8001178:	4a1d      	ldr	r2, [pc, #116]	@ (80011f0 <HAL_UART_MspInit+0x13c>)
 800117a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800117c:	4b1b      	ldr	r3, [pc, #108]	@ (80011ec <HAL_UART_MspInit+0x138>)
 800117e:	2210      	movs	r2, #16
 8001180:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001182:	4b1a      	ldr	r3, [pc, #104]	@ (80011ec <HAL_UART_MspInit+0x138>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001188:	4b18      	ldr	r3, [pc, #96]	@ (80011ec <HAL_UART_MspInit+0x138>)
 800118a:	2280      	movs	r2, #128	@ 0x80
 800118c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800118e:	4b17      	ldr	r3, [pc, #92]	@ (80011ec <HAL_UART_MspInit+0x138>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001194:	4b15      	ldr	r3, [pc, #84]	@ (80011ec <HAL_UART_MspInit+0x138>)
 8001196:	2200      	movs	r2, #0
 8001198:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800119a:	4b14      	ldr	r3, [pc, #80]	@ (80011ec <HAL_UART_MspInit+0x138>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011a0:	4b12      	ldr	r3, [pc, #72]	@ (80011ec <HAL_UART_MspInit+0x138>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80011a6:	4811      	ldr	r0, [pc, #68]	@ (80011ec <HAL_UART_MspInit+0x138>)
 80011a8:	f000 faa7 	bl	80016fa <HAL_DMA_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 80011b2:	f7ff f90b 	bl	80003cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a0c      	ldr	r2, [pc, #48]	@ (80011ec <HAL_UART_MspInit+0x138>)
 80011ba:	671a      	str	r2, [r3, #112]	@ 0x70
 80011bc:	4a0b      	ldr	r2, [pc, #44]	@ (80011ec <HAL_UART_MspInit+0x138>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2100      	movs	r1, #0
 80011c6:	2025      	movs	r0, #37	@ 0x25
 80011c8:	f000 fa61 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011cc:	2025      	movs	r0, #37	@ 0x25
 80011ce:	f000 fa7a 	bl	80016c6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80011d2:	bf00      	nop
 80011d4:	3728      	adds	r7, #40	@ 0x28
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40013800 	.word	0x40013800
 80011e0:	40021000 	.word	0x40021000
 80011e4:	2000013c 	.word	0x2000013c
 80011e8:	40020058 	.word	0x40020058
 80011ec:	20000180 	.word	0x20000180
 80011f0:	40020044 	.word	0x40020044

080011f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011f8:	bf00      	nop
 80011fa:	e7fd      	b.n	80011f8 <NMI_Handler+0x4>

080011fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <HardFault_Handler+0x4>

08001204 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001208:	bf00      	nop
 800120a:	e7fd      	b.n	8001208 <MemManage_Handler+0x4>

0800120c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <BusFault_Handler+0x4>

08001214 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001218:	bf00      	nop
 800121a:	e7fd      	b.n	8001218 <UsageFault_Handler+0x4>

0800121c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800124a:	f000 f901 	bl	8001450 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001258:	4802      	ldr	r0, [pc, #8]	@ (8001264 <DMA1_Channel4_IRQHandler+0x10>)
 800125a:	f000 fb70 	bl	800193e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000180 	.word	0x20000180

08001268 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800126c:	4802      	ldr	r0, [pc, #8]	@ (8001278 <DMA1_Channel5_IRQHandler+0x10>)
 800126e:	f000 fb66 	bl	800193e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	2000013c 	.word	0x2000013c

0800127c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001280:	4802      	ldr	r0, [pc, #8]	@ (800128c <USART1_IRQHandler+0x10>)
 8001282:	f002 f9a5 	bl	80035d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200000b4 	.word	0x200000b4

08001290 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001294:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <SystemInit+0x20>)
 8001296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800129a:	4a05      	ldr	r2, [pc, #20]	@ (80012b0 <SystemInit+0x20>)
 800129c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <UART_Callbacks_Init>:
 * @brief  Initialize UART callbacks
 * @param  None
 * @retval None
 */
void UART_Callbacks_Init(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
    // UART callbacks are handled by HAL, this function can be used
    // for any additional initialization if needed
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <HAL_UARTEx_RxEventCallback>:
 * @param  huart: UART handle
 * @param  Size: Number of bytes received
 * @retval None
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	807b      	strh	r3, [r7, #2]
    if (huart == &huart1)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a14      	ldr	r2, [pc, #80]	@ (8001324 <HAL_UARTEx_RxEventCallback+0x60>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d120      	bne.n	800131a <HAL_UARTEx_RxEventCallback+0x56>
        // HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4); // Commented out to eliminate timing delays

        // printf("UART RX: Received %d bytes\n", Size); // Commented out to prevent timeouts

        // Get Modbus context
        mbus_t modbus_ctx = Modbus_GetContext();
 80012d8:	f7ff fea6 	bl	8001028 <Modbus_GetContext>
 80012dc:	4603      	mov	r3, r0
 80012de:	737b      	strb	r3, [r7, #13]

        // Process received Modbus data byte by byte
        for (uint16_t i = 0; i < Size; i++)
 80012e0:	2300      	movs	r3, #0
 80012e2:	81fb      	strh	r3, [r7, #14]
 80012e4:	e00b      	b.n	80012fe <HAL_UARTEx_RxEventCallback+0x3a>
        {
            // printf("Byte %d: 0x%02X\n", i, modbus_rx_buffer[i]); // Commented out to prevent timeouts
            mbus_poll(modbus_ctx, modbus_rx_buffer[i]);
 80012e6:	89fb      	ldrh	r3, [r7, #14]
 80012e8:	4a0f      	ldr	r2, [pc, #60]	@ (8001328 <HAL_UARTEx_RxEventCallback+0x64>)
 80012ea:	5cd2      	ldrb	r2, [r2, r3]
 80012ec:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80012f0:	4611      	mov	r1, r2
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fac8 	bl	8000888 <mbus_poll>
        for (uint16_t i = 0; i < Size; i++)
 80012f8:	89fb      	ldrh	r3, [r7, #14]
 80012fa:	3301      	adds	r3, #1
 80012fc:	81fb      	strh	r3, [r7, #14]
 80012fe:	89fa      	ldrh	r2, [r7, #14]
 8001300:	887b      	ldrh	r3, [r7, #2]
 8001302:	429a      	cmp	r2, r3
 8001304:	d3ef      	bcc.n	80012e6 <HAL_UARTEx_RxEventCallback+0x22>
        }

        // Clear the UART idle flag
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2210      	movs	r2, #16
 800130c:	621a      	str	r2, [r3, #32]

        // Restart DMA reception for next frame
        HAL_UARTEx_ReceiveToIdle_DMA(&huart1, modbus_rx_buffer, sizeof(modbus_rx_buffer));
 800130e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001312:	4905      	ldr	r1, [pc, #20]	@ (8001328 <HAL_UARTEx_RxEventCallback+0x64>)
 8001314:	4803      	ldr	r0, [pc, #12]	@ (8001324 <HAL_UARTEx_RxEventCallback+0x60>)
 8001316:	f003 fa19 	bl	800474c <HAL_UARTEx_ReceiveToIdle_DMA>
    }
}
 800131a:	bf00      	nop
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200000b4 	.word	0x200000b4
 8001328:	20000234 	.word	0x20000234

0800132c <HAL_UART_ErrorCallback>:
 * @brief  UART error callback
 * @param  huart: UART handle
 * @retval None
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
    if (huart == &huart1)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a0c      	ldr	r2, [pc, #48]	@ (8001368 <HAL_UART_ErrorCallback+0x3c>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d111      	bne.n	8001360 <HAL_UART_ErrorCallback+0x34>
    {
        // Handle UART errors
        __HAL_UART_CLEAR_OREFLAG(huart);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2208      	movs	r2, #8
 8001342:	621a      	str	r2, [r3, #32]
        __HAL_UART_CLEAR_NEFLAG(huart);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2204      	movs	r2, #4
 800134a:	621a      	str	r2, [r3, #32]
        __HAL_UART_CLEAR_FEFLAG(huart);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2202      	movs	r2, #2
 8001352:	621a      	str	r2, [r3, #32]

        // Restart DMA reception
        HAL_UARTEx_ReceiveToIdle_DMA(&huart1, modbus_rx_buffer, sizeof(modbus_rx_buffer));
 8001354:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001358:	4904      	ldr	r1, [pc, #16]	@ (800136c <HAL_UART_ErrorCallback+0x40>)
 800135a:	4803      	ldr	r0, [pc, #12]	@ (8001368 <HAL_UART_ErrorCallback+0x3c>)
 800135c:	f003 f9f6 	bl	800474c <HAL_UARTEx_ReceiveToIdle_DMA>
    }
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	200000b4 	.word	0x200000b4
 800136c:	20000234 	.word	0x20000234

08001370 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001370:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013a8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001374:	f7ff ff8c 	bl	8001290 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001378:	480c      	ldr	r0, [pc, #48]	@ (80013ac <LoopForever+0x6>)
  ldr r1, =_edata
 800137a:	490d      	ldr	r1, [pc, #52]	@ (80013b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800137c:	4a0d      	ldr	r2, [pc, #52]	@ (80013b4 <LoopForever+0xe>)
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001380:	e002      	b.n	8001388 <LoopCopyDataInit>

08001382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001386:	3304      	adds	r3, #4

08001388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800138c:	d3f9      	bcc.n	8001382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800138e:	4a0a      	ldr	r2, [pc, #40]	@ (80013b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001390:	4c0a      	ldr	r4, [pc, #40]	@ (80013bc <LoopForever+0x16>)
  movs r3, #0
 8001392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001394:	e001      	b.n	800139a <LoopFillZerobss>

08001396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001398:	3204      	adds	r2, #4

0800139a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800139c:	d3fb      	bcc.n	8001396 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800139e:	f003 fb83 	bl	8004aa8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013a2:	f7fe ff19 	bl	80001d8 <main>

080013a6 <LoopForever>:

LoopForever:
    b LoopForever
 80013a6:	e7fe      	b.n	80013a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013a8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80013ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b0:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80013b4:	08005474 	.word	0x08005474
  ldr r2, =_sbss
 80013b8:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80013bc:	20000630 	.word	0x20000630

080013c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013c0:	e7fe      	b.n	80013c0 <ADC1_2_IRQHandler>
	...

080013c4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c8:	4b08      	ldr	r3, [pc, #32]	@ (80013ec <HAL_Init+0x28>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a07      	ldr	r2, [pc, #28]	@ (80013ec <HAL_Init+0x28>)
 80013ce:	f043 0310 	orr.w	r3, r3, #16
 80013d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d4:	2003      	movs	r0, #3
 80013d6:	f000 f94f 	bl	8001678 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013da:	200f      	movs	r0, #15
 80013dc:	f000 f808 	bl	80013f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e0:	f7ff fe44 	bl	800106c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40022000 	.word	0x40022000

080013f0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013f8:	4b12      	ldr	r3, [pc, #72]	@ (8001444 <HAL_InitTick+0x54>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b12      	ldr	r3, [pc, #72]	@ (8001448 <HAL_InitTick+0x58>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	4619      	mov	r1, r3
 8001402:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001406:	fbb3 f3f1 	udiv	r3, r3, r1
 800140a:	fbb2 f3f3 	udiv	r3, r2, r3
 800140e:	4618      	mov	r0, r3
 8001410:	f000 f967 	bl	80016e2 <HAL_SYSTICK_Config>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e00e      	b.n	800143c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2b0f      	cmp	r3, #15
 8001422:	d80a      	bhi.n	800143a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001424:	2200      	movs	r2, #0
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	f04f 30ff 	mov.w	r0, #4294967295
 800142c:	f000 f92f 	bl	800168e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001430:	4a06      	ldr	r2, [pc, #24]	@ (800144c <HAL_InitTick+0x5c>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001436:	2300      	movs	r3, #0
 8001438:	e000      	b.n	800143c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
}
 800143c:	4618      	mov	r0, r3
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000028 	.word	0x20000028
 8001448:	20000030 	.word	0x20000030
 800144c:	2000002c 	.word	0x2000002c

08001450 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001454:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <HAL_IncTick+0x20>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	461a      	mov	r2, r3
 800145a:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <HAL_IncTick+0x24>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4413      	add	r3, r2
 8001460:	4a04      	ldr	r2, [pc, #16]	@ (8001474 <HAL_IncTick+0x24>)
 8001462:	6013      	str	r3, [r2, #0]
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	20000030 	.word	0x20000030
 8001474:	20000438 	.word	0x20000438

08001478 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return uwTick;  
 800147c:	4b03      	ldr	r3, [pc, #12]	@ (800148c <HAL_GetTick+0x14>)
 800147e:	681b      	ldr	r3, [r3, #0]
}
 8001480:	4618      	mov	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	20000438 	.word	0x20000438

08001490 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001498:	f7ff ffee 	bl	8001478 <HAL_GetTick>
 800149c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a8:	d005      	beq.n	80014b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014aa:	4b0a      	ldr	r3, [pc, #40]	@ (80014d4 <HAL_Delay+0x44>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	461a      	mov	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4413      	add	r3, r2
 80014b4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80014b6:	bf00      	nop
 80014b8:	f7ff ffde 	bl	8001478 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d8f7      	bhi.n	80014b8 <HAL_Delay+0x28>
  {
  }
}
 80014c8:	bf00      	nop
 80014ca:	bf00      	nop
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000030 	.word	0x20000030

080014d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e8:	4b0c      	ldr	r3, [pc, #48]	@ (800151c <__NVIC_SetPriorityGrouping+0x44>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014f4:	4013      	ands	r3, r2
 80014f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001500:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001504:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800150a:	4a04      	ldr	r2, [pc, #16]	@ (800151c <__NVIC_SetPriorityGrouping+0x44>)
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	60d3      	str	r3, [r2, #12]
}
 8001510:	bf00      	nop
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001524:	4b04      	ldr	r3, [pc, #16]	@ (8001538 <__NVIC_GetPriorityGrouping+0x18>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	0a1b      	lsrs	r3, r3, #8
 800152a:	f003 0307 	and.w	r3, r3, #7
}
 800152e:	4618      	mov	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	2b00      	cmp	r3, #0
 800154c:	db0b      	blt.n	8001566 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	f003 021f 	and.w	r2, r3, #31
 8001554:	4907      	ldr	r1, [pc, #28]	@ (8001574 <__NVIC_EnableIRQ+0x38>)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	095b      	lsrs	r3, r3, #5
 800155c:	2001      	movs	r0, #1
 800155e:	fa00 f202 	lsl.w	r2, r0, r2
 8001562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000e100 	.word	0xe000e100

08001578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	6039      	str	r1, [r7, #0]
 8001582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001588:	2b00      	cmp	r3, #0
 800158a:	db0a      	blt.n	80015a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	b2da      	uxtb	r2, r3
 8001590:	490c      	ldr	r1, [pc, #48]	@ (80015c4 <__NVIC_SetPriority+0x4c>)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	0112      	lsls	r2, r2, #4
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	440b      	add	r3, r1
 800159c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a0:	e00a      	b.n	80015b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	4908      	ldr	r1, [pc, #32]	@ (80015c8 <__NVIC_SetPriority+0x50>)
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	3b04      	subs	r3, #4
 80015b0:	0112      	lsls	r2, r2, #4
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	440b      	add	r3, r1
 80015b6:	761a      	strb	r2, [r3, #24]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000e100 	.word	0xe000e100
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b089      	sub	sp, #36	@ 0x24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f1c3 0307 	rsb	r3, r3, #7
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	bf28      	it	cs
 80015ea:	2304      	movcs	r3, #4
 80015ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3304      	adds	r3, #4
 80015f2:	2b06      	cmp	r3, #6
 80015f4:	d902      	bls.n	80015fc <NVIC_EncodePriority+0x30>
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3b03      	subs	r3, #3
 80015fa:	e000      	b.n	80015fe <NVIC_EncodePriority+0x32>
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001600:	f04f 32ff 	mov.w	r2, #4294967295
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43da      	mvns	r2, r3
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	401a      	ands	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001614:	f04f 31ff 	mov.w	r1, #4294967295
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	fa01 f303 	lsl.w	r3, r1, r3
 800161e:	43d9      	mvns	r1, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	4313      	orrs	r3, r2
         );
}
 8001626:	4618      	mov	r0, r3
 8001628:	3724      	adds	r7, #36	@ 0x24
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3b01      	subs	r3, #1
 8001640:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001644:	d301      	bcc.n	800164a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001646:	2301      	movs	r3, #1
 8001648:	e00f      	b.n	800166a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164a:	4a0a      	ldr	r2, [pc, #40]	@ (8001674 <SysTick_Config+0x40>)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3b01      	subs	r3, #1
 8001650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001652:	210f      	movs	r1, #15
 8001654:	f04f 30ff 	mov.w	r0, #4294967295
 8001658:	f7ff ff8e 	bl	8001578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800165c:	4b05      	ldr	r3, [pc, #20]	@ (8001674 <SysTick_Config+0x40>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001662:	4b04      	ldr	r3, [pc, #16]	@ (8001674 <SysTick_Config+0x40>)
 8001664:	2207      	movs	r2, #7
 8001666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	e000e010 	.word	0xe000e010

08001678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff ff29 	bl	80014d8 <__NVIC_SetPriorityGrouping>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b086      	sub	sp, #24
 8001692:	af00      	add	r7, sp, #0
 8001694:	4603      	mov	r3, r0
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
 800169a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a0:	f7ff ff3e 	bl	8001520 <__NVIC_GetPriorityGrouping>
 80016a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	68b9      	ldr	r1, [r7, #8]
 80016aa:	6978      	ldr	r0, [r7, #20]
 80016ac:	f7ff ff8e 	bl	80015cc <NVIC_EncodePriority>
 80016b0:	4602      	mov	r2, r0
 80016b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b6:	4611      	mov	r1, r2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff5d 	bl	8001578 <__NVIC_SetPriority>
}
 80016be:	bf00      	nop
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	4603      	mov	r3, r0
 80016ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff31 	bl	800153c <__NVIC_EnableIRQ>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff ffa2 	bl	8001634 <SysTick_Config>
 80016f0:	4603      	mov	r3, r0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b084      	sub	sp, #16
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d101      	bne.n	8001710 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e037      	b.n	8001780 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2202      	movs	r2, #2
 8001714:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001726:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800172a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001734:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001740:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800174c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	4313      	orrs	r3, r2
 8001758:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 f9bc 	bl	8001ae0 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
 8001794:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d101      	bne.n	80017a8 <HAL_DMA_Start_IT+0x20>
 80017a4:	2302      	movs	r3, #2
 80017a6:	e04a      	b.n	800183e <HAL_DMA_Start_IT+0xb6>
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d13a      	bne.n	8001830 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2202      	movs	r2, #2
 80017be:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2200      	movs	r2, #0
 80017c6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f022 0201 	bic.w	r2, r2, #1
 80017d6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	68b9      	ldr	r1, [r7, #8]
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	f000 f950 	bl	8001a84 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d008      	beq.n	80017fe <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 020e 	orr.w	r2, r2, #14
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	e00f      	b.n	800181e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f042 020a 	orr.w	r2, r2, #10
 800180c:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f022 0204 	bic.w	r2, r2, #4
 800181c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f042 0201 	orr.w	r2, r2, #1
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	e005      	b.n	800183c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001838:	2302      	movs	r3, #2
 800183a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800183c:	7dfb      	ldrb	r3, [r7, #23]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d101      	bne.n	8001858 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e02e      	b.n	80018b6 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800185e:	2b02      	cmp	r3, #2
 8001860:	d008      	beq.n	8001874 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2204      	movs	r2, #4
 8001866:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e020      	b.n	80018b6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 020e 	bic.w	r2, r2, #14
 8001882:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 0201 	bic.w	r2, r2, #1
 8001892:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800189c:	2101      	movs	r1, #1
 800189e:	fa01 f202 	lsl.w	r2, r1, r2
 80018a2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b084      	sub	sp, #16
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018ca:	2300      	movs	r3, #0
 80018cc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d005      	beq.n	80018e4 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2204      	movs	r2, #4
 80018dc:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	73fb      	strb	r3, [r7, #15]
 80018e2:	e027      	b.n	8001934 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f022 020e 	bic.w	r2, r2, #14
 80018f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f022 0201 	bic.w	r2, r2, #1
 8001902:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800190c:	2101      	movs	r1, #1
 800190e:	fa01 f202 	lsl.w	r2, r1, r2
 8001912:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001928:	2b00      	cmp	r3, #0
 800192a:	d003      	beq.n	8001934 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	4798      	blx	r3
    }
  }
  return status;
 8001934:	7bfb      	ldrb	r3, [r7, #15]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b084      	sub	sp, #16
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195a:	2204      	movs	r2, #4
 800195c:	409a      	lsls	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	4013      	ands	r3, r2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d024      	beq.n	80019b0 <HAL_DMA_IRQHandler+0x72>
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	d01f      	beq.n	80019b0 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0320 	and.w	r3, r3, #32
 800197a:	2b00      	cmp	r3, #0
 800197c:	d107      	bne.n	800198e <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 0204 	bic.w	r2, r2, #4
 800198c:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001996:	2104      	movs	r1, #4
 8001998:	fa01 f202 	lsl.w	r2, r1, r2
 800199c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d06a      	beq.n	8001a7c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80019ae:	e065      	b.n	8001a7c <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b4:	2202      	movs	r2, #2
 80019b6:	409a      	lsls	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4013      	ands	r3, r2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d02c      	beq.n	8001a1a <HAL_DMA_IRQHandler+0xdc>
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d027      	beq.n	8001a1a <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0320 	and.w	r3, r3, #32
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d10b      	bne.n	80019f0 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 020a 	bic.w	r2, r2, #10
 80019e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019f8:	2102      	movs	r1, #2
 80019fa:	fa01 f202 	lsl.w	r2, r1, r2
 80019fe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d035      	beq.n	8001a7c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a18:	e030      	b.n	8001a7c <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1e:	2208      	movs	r2, #8
 8001a20:	409a      	lsls	r2, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	4013      	ands	r3, r2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d028      	beq.n	8001a7c <HAL_DMA_IRQHandler+0x13e>
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	f003 0308 	and.w	r3, r3, #8
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d023      	beq.n	8001a7c <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f022 020e 	bic.w	r2, r2, #14
 8001a42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a52:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d004      	beq.n	8001a7c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	4798      	blx	r3
    }
  }
}
 8001a7a:	e7ff      	b.n	8001a7c <HAL_DMA_IRQHandler+0x13e>
 8001a7c:	bf00      	nop
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
 8001a90:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001aa0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b10      	cmp	r3, #16
 8001ab0:	d108      	bne.n	8001ac4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68ba      	ldr	r2, [r7, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ac2:	e007      	b.n	8001ad4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68ba      	ldr	r2, [r7, #8]
 8001aca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	60da      	str	r2, [r3, #12]
}
 8001ad4:	bf00      	nop
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	461a      	mov	r2, r3
 8001aee:	4b09      	ldr	r3, [pc, #36]	@ (8001b14 <DMA_CalcBaseAndBitshift+0x34>)
 8001af0:	4413      	add	r3, r2
 8001af2:	4a09      	ldr	r2, [pc, #36]	@ (8001b18 <DMA_CalcBaseAndBitshift+0x38>)
 8001af4:	fba2 2303 	umull	r2, r3, r2, r3
 8001af8:	091b      	lsrs	r3, r3, #4
 8001afa:	009a      	lsls	r2, r3, #2
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a06      	ldr	r2, [pc, #24]	@ (8001b1c <DMA_CalcBaseAndBitshift+0x3c>)
 8001b04:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	bffdfff8 	.word	0xbffdfff8
 8001b18:	cccccccd 	.word	0xcccccccd
 8001b1c:	40020000 	.word	0x40020000

08001b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b087      	sub	sp, #28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b2e:	e14e      	b.n	8001dce <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	2101      	movs	r1, #1
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 8140 	beq.w	8001dc8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d005      	beq.n	8001b60 <HAL_GPIO_Init+0x40>
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 0303 	and.w	r3, r3, #3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d130      	bne.n	8001bc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	4013      	ands	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	68da      	ldr	r2, [r3, #12]
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b96:	2201      	movs	r2, #1
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	091b      	lsrs	r3, r3, #4
 8001bac:	f003 0201 	and.w	r2, r3, #1
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	2b03      	cmp	r3, #3
 8001bcc:	d017      	beq.n	8001bfe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	2203      	movs	r2, #3
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43db      	mvns	r3, r3
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4013      	ands	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d123      	bne.n	8001c52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	08da      	lsrs	r2, r3, #3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3208      	adds	r2, #8
 8001c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	220f      	movs	r2, #15
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43db      	mvns	r3, r3
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	691a      	ldr	r2, [r3, #16]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	08da      	lsrs	r2, r3, #3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3208      	adds	r2, #8
 8001c4c:	6939      	ldr	r1, [r7, #16]
 8001c4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43db      	mvns	r3, r3
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	4013      	ands	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f003 0203 	and.w	r2, r3, #3
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 809a 	beq.w	8001dc8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c94:	4b55      	ldr	r3, [pc, #340]	@ (8001dec <HAL_GPIO_Init+0x2cc>)
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	4a54      	ldr	r2, [pc, #336]	@ (8001dec <HAL_GPIO_Init+0x2cc>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	6193      	str	r3, [r2, #24]
 8001ca0:	4b52      	ldr	r3, [pc, #328]	@ (8001dec <HAL_GPIO_Init+0x2cc>)
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cac:	4a50      	ldr	r2, [pc, #320]	@ (8001df0 <HAL_GPIO_Init+0x2d0>)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	089b      	lsrs	r3, r3, #2
 8001cb2:	3302      	adds	r3, #2
 8001cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	220f      	movs	r2, #15
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001cd6:	d013      	beq.n	8001d00 <HAL_GPIO_Init+0x1e0>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a46      	ldr	r2, [pc, #280]	@ (8001df4 <HAL_GPIO_Init+0x2d4>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d00d      	beq.n	8001cfc <HAL_GPIO_Init+0x1dc>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a45      	ldr	r2, [pc, #276]	@ (8001df8 <HAL_GPIO_Init+0x2d8>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d007      	beq.n	8001cf8 <HAL_GPIO_Init+0x1d8>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a44      	ldr	r2, [pc, #272]	@ (8001dfc <HAL_GPIO_Init+0x2dc>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d101      	bne.n	8001cf4 <HAL_GPIO_Init+0x1d4>
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e006      	b.n	8001d02 <HAL_GPIO_Init+0x1e2>
 8001cf4:	2305      	movs	r3, #5
 8001cf6:	e004      	b.n	8001d02 <HAL_GPIO_Init+0x1e2>
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	e002      	b.n	8001d02 <HAL_GPIO_Init+0x1e2>
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e000      	b.n	8001d02 <HAL_GPIO_Init+0x1e2>
 8001d00:	2300      	movs	r3, #0
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	f002 0203 	and.w	r2, r2, #3
 8001d08:	0092      	lsls	r2, r2, #2
 8001d0a:	4093      	lsls	r3, r2
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d12:	4937      	ldr	r1, [pc, #220]	@ (8001df0 <HAL_GPIO_Init+0x2d0>)
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	089b      	lsrs	r3, r3, #2
 8001d18:	3302      	adds	r3, #2
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d20:	4b37      	ldr	r3, [pc, #220]	@ (8001e00 <HAL_GPIO_Init+0x2e0>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d44:	4a2e      	ldr	r2, [pc, #184]	@ (8001e00 <HAL_GPIO_Init+0x2e0>)
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d4a:	4b2d      	ldr	r3, [pc, #180]	@ (8001e00 <HAL_GPIO_Init+0x2e0>)
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	43db      	mvns	r3, r3
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	4013      	ands	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d6e:	4a24      	ldr	r2, [pc, #144]	@ (8001e00 <HAL_GPIO_Init+0x2e0>)
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d74:	4b22      	ldr	r3, [pc, #136]	@ (8001e00 <HAL_GPIO_Init+0x2e0>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	4013      	ands	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d98:	4a19      	ldr	r2, [pc, #100]	@ (8001e00 <HAL_GPIO_Init+0x2e0>)
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d9e:	4b18      	ldr	r3, [pc, #96]	@ (8001e00 <HAL_GPIO_Init+0x2e0>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	43db      	mvns	r3, r3
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	4013      	ands	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001dc2:	4a0f      	ldr	r2, [pc, #60]	@ (8001e00 <HAL_GPIO_Init+0x2e0>)
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f47f aea9 	bne.w	8001b30 <HAL_GPIO_Init+0x10>
  }
}
 8001dde:	bf00      	nop
 8001de0:	bf00      	nop
 8001de2:	371c      	adds	r7, #28
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	40021000 	.word	0x40021000
 8001df0:	40010000 	.word	0x40010000
 8001df4:	48000400 	.word	0x48000400
 8001df8:	48000800 	.word	0x48000800
 8001dfc:	48000c00 	.word	0x48000c00
 8001e00:	40010400 	.word	0x40010400

08001e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	807b      	strh	r3, [r7, #2]
 8001e10:	4613      	mov	r3, r2
 8001e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e14:	787b      	ldrb	r3, [r7, #1]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e1a:	887a      	ldrh	r2, [r7, #2]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e20:	e002      	b.n	8001e28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e22:	887a      	ldrh	r2, [r7, #2]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e40:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e44:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e4a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d102      	bne.n	8001e5a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	f000 bff4 	b.w	8002e42 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 816d 	beq.w	800214a <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e70:	4bb4      	ldr	r3, [pc, #720]	@ (8002144 <HAL_RCC_OscConfig+0x310>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 030c 	and.w	r3, r3, #12
 8001e78:	2b04      	cmp	r3, #4
 8001e7a:	d00c      	beq.n	8001e96 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e7c:	4bb1      	ldr	r3, [pc, #708]	@ (8002144 <HAL_RCC_OscConfig+0x310>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 030c 	and.w	r3, r3, #12
 8001e84:	2b08      	cmp	r3, #8
 8001e86:	d157      	bne.n	8001f38 <HAL_RCC_OscConfig+0x104>
 8001e88:	4bae      	ldr	r3, [pc, #696]	@ (8002144 <HAL_RCC_OscConfig+0x310>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e94:	d150      	bne.n	8001f38 <HAL_RCC_OscConfig+0x104>
 8001e96:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e9a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001ea2:	fa93 f3a3 	rbit	r3, r3
 8001ea6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001eaa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eae:	fab3 f383 	clz	r3, r3
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b3f      	cmp	r3, #63	@ 0x3f
 8001eb6:	d802      	bhi.n	8001ebe <HAL_RCC_OscConfig+0x8a>
 8001eb8:	4ba2      	ldr	r3, [pc, #648]	@ (8002144 <HAL_RCC_OscConfig+0x310>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	e015      	b.n	8001eea <HAL_RCC_OscConfig+0xb6>
 8001ebe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ec2:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001eca:	fa93 f3a3 	rbit	r3, r3
 8001ece:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001ed2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ed6:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001eda:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001ede:	fa93 f3a3 	rbit	r3, r3
 8001ee2:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001ee6:	4b97      	ldr	r3, [pc, #604]	@ (8002144 <HAL_RCC_OscConfig+0x310>)
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eea:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001eee:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001ef2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001ef6:	fa92 f2a2 	rbit	r2, r2
 8001efa:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001efe:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001f02:	fab2 f282 	clz	r2, r2
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	f042 0220 	orr.w	r2, r2, #32
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	f002 021f 	and.w	r2, r2, #31
 8001f12:	2101      	movs	r1, #1
 8001f14:	fa01 f202 	lsl.w	r2, r1, r2
 8001f18:	4013      	ands	r3, r2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f000 8114 	beq.w	8002148 <HAL_RCC_OscConfig+0x314>
 8001f20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f24:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f040 810b 	bne.w	8002148 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	f000 bf85 	b.w	8002e42 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f3c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f48:	d106      	bne.n	8001f58 <HAL_RCC_OscConfig+0x124>
 8001f4a:	4b7e      	ldr	r3, [pc, #504]	@ (8002144 <HAL_RCC_OscConfig+0x310>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a7d      	ldr	r2, [pc, #500]	@ (8002144 <HAL_RCC_OscConfig+0x310>)
 8001f50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	e036      	b.n	8001fc6 <HAL_RCC_OscConfig+0x192>
 8001f58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f5c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d10c      	bne.n	8001f82 <HAL_RCC_OscConfig+0x14e>
 8001f68:	4b76      	ldr	r3, [pc, #472]	@ (8002144 <HAL_RCC_OscConfig+0x310>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a75      	ldr	r2, [pc, #468]	@ (8002144 <HAL_RCC_OscConfig+0x310>)
 8001f6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f72:	6013      	str	r3, [r2, #0]
 8001f74:	4b73      	ldr	r3, [pc, #460]	@ (8002144 <HAL_RCC_OscConfig+0x310>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a72      	ldr	r2, [pc, #456]	@ (8002144 <HAL_RCC_OscConfig+0x310>)
 8001f7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f7e:	6013      	str	r3, [r2, #0]
 8001f80:	e021      	b.n	8001fc6 <HAL_RCC_OscConfig+0x192>
 8001f82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f92:	d10c      	bne.n	8001fae <HAL_RCC_OscConfig+0x17a>
 8001f94:	4b6b      	ldr	r3, [pc, #428]	@ (8002144 <HAL_RCC_OscConfig+0x310>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a6a      	ldr	r2, [pc, #424]	@ (8002144 <HAL_RCC_OscConfig+0x310>)
 8001f9a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f9e:	6013      	str	r3, [r2, #0]
 8001fa0:	4b68      	ldr	r3, [pc, #416]	@ (8002144 <HAL_RCC_OscConfig+0x310>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a67      	ldr	r2, [pc, #412]	@ (8002144 <HAL_RCC_OscConfig+0x310>)
 8001fa6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001faa:	6013      	str	r3, [r2, #0]
 8001fac:	e00b      	b.n	8001fc6 <HAL_RCC_OscConfig+0x192>
 8001fae:	4b65      	ldr	r3, [pc, #404]	@ (8002144 <HAL_RCC_OscConfig+0x310>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a64      	ldr	r2, [pc, #400]	@ (8002144 <HAL_RCC_OscConfig+0x310>)
 8001fb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fb8:	6013      	str	r3, [r2, #0]
 8001fba:	4b62      	ldr	r3, [pc, #392]	@ (8002144 <HAL_RCC_OscConfig+0x310>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a61      	ldr	r2, [pc, #388]	@ (8002144 <HAL_RCC_OscConfig+0x310>)
 8001fc0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fc4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fc6:	4b5f      	ldr	r3, [pc, #380]	@ (8002144 <HAL_RCC_OscConfig+0x310>)
 8001fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fca:	f023 020f 	bic.w	r2, r3, #15
 8001fce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fd2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	495a      	ldr	r1, [pc, #360]	@ (8002144 <HAL_RCC_OscConfig+0x310>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fe0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fe4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d054      	beq.n	800209a <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff0:	f7ff fa42 	bl	8001478 <HAL_GetTick>
 8001ff4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ff8:	e00a      	b.n	8002010 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ffa:	f7ff fa3d 	bl	8001478 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b64      	cmp	r3, #100	@ 0x64
 8002008:	d902      	bls.n	8002010 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	f000 bf19 	b.w	8002e42 <HAL_RCC_OscConfig+0x100e>
 8002010:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002014:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002018:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800201c:	fa93 f3a3 	rbit	r3, r3
 8002020:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002024:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002028:	fab3 f383 	clz	r3, r3
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002030:	d802      	bhi.n	8002038 <HAL_RCC_OscConfig+0x204>
 8002032:	4b44      	ldr	r3, [pc, #272]	@ (8002144 <HAL_RCC_OscConfig+0x310>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	e015      	b.n	8002064 <HAL_RCC_OscConfig+0x230>
 8002038:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800203c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002040:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002044:	fa93 f3a3 	rbit	r3, r3
 8002048:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800204c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002050:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002054:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002058:	fa93 f3a3 	rbit	r3, r3
 800205c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002060:	4b38      	ldr	r3, [pc, #224]	@ (8002144 <HAL_RCC_OscConfig+0x310>)
 8002062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002064:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002068:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 800206c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002070:	fa92 f2a2 	rbit	r2, r2
 8002074:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002078:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800207c:	fab2 f282 	clz	r2, r2
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	f042 0220 	orr.w	r2, r2, #32
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	f002 021f 	and.w	r2, r2, #31
 800208c:	2101      	movs	r1, #1
 800208e:	fa01 f202 	lsl.w	r2, r1, r2
 8002092:	4013      	ands	r3, r2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0b0      	beq.n	8001ffa <HAL_RCC_OscConfig+0x1c6>
 8002098:	e057      	b.n	800214a <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209a:	f7ff f9ed 	bl	8001478 <HAL_GetTick>
 800209e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020a2:	e00a      	b.n	80020ba <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020a4:	f7ff f9e8 	bl	8001478 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b64      	cmp	r3, #100	@ 0x64
 80020b2:	d902      	bls.n	80020ba <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	f000 bec4 	b.w	8002e42 <HAL_RCC_OscConfig+0x100e>
 80020ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020be:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80020c6:	fa93 f3a3 	rbit	r3, r3
 80020ca:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80020ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020d2:	fab3 f383 	clz	r3, r3
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b3f      	cmp	r3, #63	@ 0x3f
 80020da:	d802      	bhi.n	80020e2 <HAL_RCC_OscConfig+0x2ae>
 80020dc:	4b19      	ldr	r3, [pc, #100]	@ (8002144 <HAL_RCC_OscConfig+0x310>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	e015      	b.n	800210e <HAL_RCC_OscConfig+0x2da>
 80020e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020e6:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ea:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80020ee:	fa93 f3a3 	rbit	r3, r3
 80020f2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80020f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020fa:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80020fe:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002102:	fa93 f3a3 	rbit	r3, r3
 8002106:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800210a:	4b0e      	ldr	r3, [pc, #56]	@ (8002144 <HAL_RCC_OscConfig+0x310>)
 800210c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002112:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002116:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800211a:	fa92 f2a2 	rbit	r2, r2
 800211e:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002122:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002126:	fab2 f282 	clz	r2, r2
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	f042 0220 	orr.w	r2, r2, #32
 8002130:	b2d2      	uxtb	r2, r2
 8002132:	f002 021f 	and.w	r2, r2, #31
 8002136:	2101      	movs	r1, #1
 8002138:	fa01 f202 	lsl.w	r2, r1, r2
 800213c:	4013      	ands	r3, r2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1b0      	bne.n	80020a4 <HAL_RCC_OscConfig+0x270>
 8002142:	e002      	b.n	800214a <HAL_RCC_OscConfig+0x316>
 8002144:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800214a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800214e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 816c 	beq.w	8002438 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002160:	4bcc      	ldr	r3, [pc, #816]	@ (8002494 <HAL_RCC_OscConfig+0x660>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 030c 	and.w	r3, r3, #12
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00b      	beq.n	8002184 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800216c:	4bc9      	ldr	r3, [pc, #804]	@ (8002494 <HAL_RCC_OscConfig+0x660>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 030c 	and.w	r3, r3, #12
 8002174:	2b08      	cmp	r3, #8
 8002176:	d16d      	bne.n	8002254 <HAL_RCC_OscConfig+0x420>
 8002178:	4bc6      	ldr	r3, [pc, #792]	@ (8002494 <HAL_RCC_OscConfig+0x660>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d167      	bne.n	8002254 <HAL_RCC_OscConfig+0x420>
 8002184:	2302      	movs	r3, #2
 8002186:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800218e:	fa93 f3a3 	rbit	r3, r3
 8002192:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002196:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800219a:	fab3 f383 	clz	r3, r3
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b3f      	cmp	r3, #63	@ 0x3f
 80021a2:	d802      	bhi.n	80021aa <HAL_RCC_OscConfig+0x376>
 80021a4:	4bbb      	ldr	r3, [pc, #748]	@ (8002494 <HAL_RCC_OscConfig+0x660>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	e013      	b.n	80021d2 <HAL_RCC_OscConfig+0x39e>
 80021aa:	2302      	movs	r3, #2
 80021ac:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b0:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80021b4:	fa93 f3a3 	rbit	r3, r3
 80021b8:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80021bc:	2302      	movs	r3, #2
 80021be:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80021c2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80021c6:	fa93 f3a3 	rbit	r3, r3
 80021ca:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80021ce:	4bb1      	ldr	r3, [pc, #708]	@ (8002494 <HAL_RCC_OscConfig+0x660>)
 80021d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d2:	2202      	movs	r2, #2
 80021d4:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80021d8:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80021dc:	fa92 f2a2 	rbit	r2, r2
 80021e0:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80021e4:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80021e8:	fab2 f282 	clz	r2, r2
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	f042 0220 	orr.w	r2, r2, #32
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	f002 021f 	and.w	r2, r2, #31
 80021f8:	2101      	movs	r1, #1
 80021fa:	fa01 f202 	lsl.w	r2, r1, r2
 80021fe:	4013      	ands	r3, r2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00a      	beq.n	800221a <HAL_RCC_OscConfig+0x3e6>
 8002204:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002208:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d002      	beq.n	800221a <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	f000 be14 	b.w	8002e42 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800221a:	4b9e      	ldr	r3, [pc, #632]	@ (8002494 <HAL_RCC_OscConfig+0x660>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002222:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002226:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	21f8      	movs	r1, #248	@ 0xf8
 8002230:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002234:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002238:	fa91 f1a1 	rbit	r1, r1
 800223c:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002240:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002244:	fab1 f181 	clz	r1, r1
 8002248:	b2c9      	uxtb	r1, r1
 800224a:	408b      	lsls	r3, r1
 800224c:	4991      	ldr	r1, [pc, #580]	@ (8002494 <HAL_RCC_OscConfig+0x660>)
 800224e:	4313      	orrs	r3, r2
 8002250:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002252:	e0f1      	b.n	8002438 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002254:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002258:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 8083 	beq.w	800236c <HAL_RCC_OscConfig+0x538>
 8002266:	2301      	movs	r3, #1
 8002268:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002270:	fa93 f3a3 	rbit	r3, r3
 8002274:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002278:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800227c:	fab3 f383 	clz	r3, r3
 8002280:	b2db      	uxtb	r3, r3
 8002282:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002286:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	461a      	mov	r2, r3
 800228e:	2301      	movs	r3, #1
 8002290:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002292:	f7ff f8f1 	bl	8001478 <HAL_GetTick>
 8002296:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800229a:	e00a      	b.n	80022b2 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800229c:	f7ff f8ec 	bl	8001478 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d902      	bls.n	80022b2 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	f000 bdc8 	b.w	8002e42 <HAL_RCC_OscConfig+0x100e>
 80022b2:	2302      	movs	r3, #2
 80022b4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80022bc:	fa93 f3a3 	rbit	r3, r3
 80022c0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80022c4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c8:	fab3 f383 	clz	r3, r3
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80022d0:	d802      	bhi.n	80022d8 <HAL_RCC_OscConfig+0x4a4>
 80022d2:	4b70      	ldr	r3, [pc, #448]	@ (8002494 <HAL_RCC_OscConfig+0x660>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	e013      	b.n	8002300 <HAL_RCC_OscConfig+0x4cc>
 80022d8:	2302      	movs	r3, #2
 80022da:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80022e2:	fa93 f3a3 	rbit	r3, r3
 80022e6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80022ea:	2302      	movs	r3, #2
 80022ec:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80022f0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80022f4:	fa93 f3a3 	rbit	r3, r3
 80022f8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80022fc:	4b65      	ldr	r3, [pc, #404]	@ (8002494 <HAL_RCC_OscConfig+0x660>)
 80022fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002300:	2202      	movs	r2, #2
 8002302:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002306:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800230a:	fa92 f2a2 	rbit	r2, r2
 800230e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002312:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002316:	fab2 f282 	clz	r2, r2
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	f042 0220 	orr.w	r2, r2, #32
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	f002 021f 	and.w	r2, r2, #31
 8002326:	2101      	movs	r1, #1
 8002328:	fa01 f202 	lsl.w	r2, r1, r2
 800232c:	4013      	ands	r3, r2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0b4      	beq.n	800229c <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002332:	4b58      	ldr	r3, [pc, #352]	@ (8002494 <HAL_RCC_OscConfig+0x660>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800233a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800233e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	21f8      	movs	r1, #248	@ 0xf8
 8002348:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002350:	fa91 f1a1 	rbit	r1, r1
 8002354:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002358:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800235c:	fab1 f181 	clz	r1, r1
 8002360:	b2c9      	uxtb	r1, r1
 8002362:	408b      	lsls	r3, r1
 8002364:	494b      	ldr	r1, [pc, #300]	@ (8002494 <HAL_RCC_OscConfig+0x660>)
 8002366:	4313      	orrs	r3, r2
 8002368:	600b      	str	r3, [r1, #0]
 800236a:	e065      	b.n	8002438 <HAL_RCC_OscConfig+0x604>
 800236c:	2301      	movs	r3, #1
 800236e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002372:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002376:	fa93 f3a3 	rbit	r3, r3
 800237a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800237e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002382:	fab3 f383 	clz	r3, r3
 8002386:	b2db      	uxtb	r3, r3
 8002388:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800238c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	461a      	mov	r2, r3
 8002394:	2300      	movs	r3, #0
 8002396:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002398:	f7ff f86e 	bl	8001478 <HAL_GetTick>
 800239c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023a0:	e00a      	b.n	80023b8 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023a2:	f7ff f869 	bl	8001478 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d902      	bls.n	80023b8 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	f000 bd45 	b.w	8002e42 <HAL_RCC_OscConfig+0x100e>
 80023b8:	2302      	movs	r3, #2
 80023ba:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023be:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80023c2:	fa93 f3a3 	rbit	r3, r3
 80023c6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80023ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ce:	fab3 f383 	clz	r3, r3
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b3f      	cmp	r3, #63	@ 0x3f
 80023d6:	d802      	bhi.n	80023de <HAL_RCC_OscConfig+0x5aa>
 80023d8:	4b2e      	ldr	r3, [pc, #184]	@ (8002494 <HAL_RCC_OscConfig+0x660>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	e013      	b.n	8002406 <HAL_RCC_OscConfig+0x5d2>
 80023de:	2302      	movs	r3, #2
 80023e0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80023e8:	fa93 f3a3 	rbit	r3, r3
 80023ec:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80023f0:	2302      	movs	r3, #2
 80023f2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80023f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80023fa:	fa93 f3a3 	rbit	r3, r3
 80023fe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002402:	4b24      	ldr	r3, [pc, #144]	@ (8002494 <HAL_RCC_OscConfig+0x660>)
 8002404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002406:	2202      	movs	r2, #2
 8002408:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800240c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002410:	fa92 f2a2 	rbit	r2, r2
 8002414:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002418:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800241c:	fab2 f282 	clz	r2, r2
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	f042 0220 	orr.w	r2, r2, #32
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	f002 021f 	and.w	r2, r2, #31
 800242c:	2101      	movs	r1, #1
 800242e:	fa01 f202 	lsl.w	r2, r1, r2
 8002432:	4013      	ands	r3, r2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1b4      	bne.n	80023a2 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002438:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800243c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0308 	and.w	r3, r3, #8
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 8115 	beq.w	8002678 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800244e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002452:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d07e      	beq.n	800255c <HAL_RCC_OscConfig+0x728>
 800245e:	2301      	movs	r3, #1
 8002460:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002464:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002468:	fa93 f3a3 	rbit	r3, r3
 800246c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002470:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002474:	fab3 f383 	clz	r3, r3
 8002478:	b2db      	uxtb	r3, r3
 800247a:	461a      	mov	r2, r3
 800247c:	4b06      	ldr	r3, [pc, #24]	@ (8002498 <HAL_RCC_OscConfig+0x664>)
 800247e:	4413      	add	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	461a      	mov	r2, r3
 8002484:	2301      	movs	r3, #1
 8002486:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002488:	f7fe fff6 	bl	8001478 <HAL_GetTick>
 800248c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002490:	e00f      	b.n	80024b2 <HAL_RCC_OscConfig+0x67e>
 8002492:	bf00      	nop
 8002494:	40021000 	.word	0x40021000
 8002498:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800249c:	f7fe ffec 	bl	8001478 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d902      	bls.n	80024b2 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	f000 bcc8 	b.w	8002e42 <HAL_RCC_OscConfig+0x100e>
 80024b2:	2302      	movs	r3, #2
 80024b4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80024bc:	fa93 f3a3 	rbit	r3, r3
 80024c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80024c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80024cc:	2202      	movs	r2, #2
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	fa93 f2a3 	rbit	r2, r3
 80024de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80024f0:	2202      	movs	r2, #2
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	fa93 f2a3 	rbit	r2, r3
 8002502:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002506:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800250a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800250c:	4bb0      	ldr	r3, [pc, #704]	@ (80027d0 <HAL_RCC_OscConfig+0x99c>)
 800250e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002510:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002514:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002518:	2102      	movs	r1, #2
 800251a:	6019      	str	r1, [r3, #0]
 800251c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002520:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	fa93 f1a3 	rbit	r1, r3
 800252a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800252e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002532:	6019      	str	r1, [r3, #0]
  return result;
 8002534:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002538:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	fab3 f383 	clz	r3, r3
 8002542:	b2db      	uxtb	r3, r3
 8002544:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002548:	b2db      	uxtb	r3, r3
 800254a:	f003 031f 	and.w	r3, r3, #31
 800254e:	2101      	movs	r1, #1
 8002550:	fa01 f303 	lsl.w	r3, r1, r3
 8002554:	4013      	ands	r3, r2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0a0      	beq.n	800249c <HAL_RCC_OscConfig+0x668>
 800255a:	e08d      	b.n	8002678 <HAL_RCC_OscConfig+0x844>
 800255c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002560:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002564:	2201      	movs	r2, #1
 8002566:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002568:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800256c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	fa93 f2a3 	rbit	r2, r3
 8002576:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800257a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800257e:	601a      	str	r2, [r3, #0]
  return result;
 8002580:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002584:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002588:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800258a:	fab3 f383 	clz	r3, r3
 800258e:	b2db      	uxtb	r3, r3
 8002590:	461a      	mov	r2, r3
 8002592:	4b90      	ldr	r3, [pc, #576]	@ (80027d4 <HAL_RCC_OscConfig+0x9a0>)
 8002594:	4413      	add	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	461a      	mov	r2, r3
 800259a:	2300      	movs	r3, #0
 800259c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259e:	f7fe ff6b 	bl	8001478 <HAL_GetTick>
 80025a2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a6:	e00a      	b.n	80025be <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025a8:	f7fe ff66 	bl	8001478 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d902      	bls.n	80025be <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	f000 bc42 	b.w	8002e42 <HAL_RCC_OscConfig+0x100e>
 80025be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80025c6:	2202      	movs	r2, #2
 80025c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ce:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	fa93 f2a3 	rbit	r2, r3
 80025d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025dc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80025ea:	2202      	movs	r2, #2
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	fa93 f2a3 	rbit	r2, r3
 80025fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002600:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800260a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800260e:	2202      	movs	r2, #2
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002616:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	fa93 f2a3 	rbit	r2, r3
 8002620:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002624:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002628:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800262a:	4b69      	ldr	r3, [pc, #420]	@ (80027d0 <HAL_RCC_OscConfig+0x99c>)
 800262c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800262e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002632:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002636:	2102      	movs	r1, #2
 8002638:	6019      	str	r1, [r3, #0]
 800263a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800263e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	fa93 f1a3 	rbit	r1, r3
 8002648:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800264c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002650:	6019      	str	r1, [r3, #0]
  return result;
 8002652:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002656:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	fab3 f383 	clz	r3, r3
 8002660:	b2db      	uxtb	r3, r3
 8002662:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002666:	b2db      	uxtb	r3, r3
 8002668:	f003 031f 	and.w	r3, r3, #31
 800266c:	2101      	movs	r1, #1
 800266e:	fa01 f303 	lsl.w	r3, r1, r3
 8002672:	4013      	ands	r3, r2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d197      	bne.n	80025a8 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002678:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800267c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 819e 	beq.w	80029ca <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 800268e:	2300      	movs	r3, #0
 8002690:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002694:	4b4e      	ldr	r3, [pc, #312]	@ (80027d0 <HAL_RCC_OscConfig+0x99c>)
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d116      	bne.n	80026ce <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a0:	4b4b      	ldr	r3, [pc, #300]	@ (80027d0 <HAL_RCC_OscConfig+0x99c>)
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	4a4a      	ldr	r2, [pc, #296]	@ (80027d0 <HAL_RCC_OscConfig+0x99c>)
 80026a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026aa:	61d3      	str	r3, [r2, #28]
 80026ac:	4b48      	ldr	r3, [pc, #288]	@ (80027d0 <HAL_RCC_OscConfig+0x99c>)
 80026ae:	69db      	ldr	r3, [r3, #28]
 80026b0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80026b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80026c6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80026c8:	2301      	movs	r3, #1
 80026ca:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ce:	4b42      	ldr	r3, [pc, #264]	@ (80027d8 <HAL_RCC_OscConfig+0x9a4>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d11a      	bne.n	8002710 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026da:	4b3f      	ldr	r3, [pc, #252]	@ (80027d8 <HAL_RCC_OscConfig+0x9a4>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a3e      	ldr	r2, [pc, #248]	@ (80027d8 <HAL_RCC_OscConfig+0x9a4>)
 80026e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026e4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026e6:	f7fe fec7 	bl	8001478 <HAL_GetTick>
 80026ea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ee:	e009      	b.n	8002704 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f0:	f7fe fec2 	bl	8001478 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b64      	cmp	r3, #100	@ 0x64
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e39e      	b.n	8002e42 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002704:	4b34      	ldr	r3, [pc, #208]	@ (80027d8 <HAL_RCC_OscConfig+0x9a4>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0ef      	beq.n	80026f0 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002710:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002714:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d106      	bne.n	800272e <HAL_RCC_OscConfig+0x8fa>
 8002720:	4b2b      	ldr	r3, [pc, #172]	@ (80027d0 <HAL_RCC_OscConfig+0x99c>)
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	4a2a      	ldr	r2, [pc, #168]	@ (80027d0 <HAL_RCC_OscConfig+0x99c>)
 8002726:	f043 0301 	orr.w	r3, r3, #1
 800272a:	6213      	str	r3, [r2, #32]
 800272c:	e035      	b.n	800279a <HAL_RCC_OscConfig+0x966>
 800272e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002732:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10c      	bne.n	8002758 <HAL_RCC_OscConfig+0x924>
 800273e:	4b24      	ldr	r3, [pc, #144]	@ (80027d0 <HAL_RCC_OscConfig+0x99c>)
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	4a23      	ldr	r2, [pc, #140]	@ (80027d0 <HAL_RCC_OscConfig+0x99c>)
 8002744:	f023 0301 	bic.w	r3, r3, #1
 8002748:	6213      	str	r3, [r2, #32]
 800274a:	4b21      	ldr	r3, [pc, #132]	@ (80027d0 <HAL_RCC_OscConfig+0x99c>)
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	4a20      	ldr	r2, [pc, #128]	@ (80027d0 <HAL_RCC_OscConfig+0x99c>)
 8002750:	f023 0304 	bic.w	r3, r3, #4
 8002754:	6213      	str	r3, [r2, #32]
 8002756:	e020      	b.n	800279a <HAL_RCC_OscConfig+0x966>
 8002758:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800275c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	2b05      	cmp	r3, #5
 8002766:	d10c      	bne.n	8002782 <HAL_RCC_OscConfig+0x94e>
 8002768:	4b19      	ldr	r3, [pc, #100]	@ (80027d0 <HAL_RCC_OscConfig+0x99c>)
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	4a18      	ldr	r2, [pc, #96]	@ (80027d0 <HAL_RCC_OscConfig+0x99c>)
 800276e:	f043 0304 	orr.w	r3, r3, #4
 8002772:	6213      	str	r3, [r2, #32]
 8002774:	4b16      	ldr	r3, [pc, #88]	@ (80027d0 <HAL_RCC_OscConfig+0x99c>)
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	4a15      	ldr	r2, [pc, #84]	@ (80027d0 <HAL_RCC_OscConfig+0x99c>)
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	6213      	str	r3, [r2, #32]
 8002780:	e00b      	b.n	800279a <HAL_RCC_OscConfig+0x966>
 8002782:	4b13      	ldr	r3, [pc, #76]	@ (80027d0 <HAL_RCC_OscConfig+0x99c>)
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	4a12      	ldr	r2, [pc, #72]	@ (80027d0 <HAL_RCC_OscConfig+0x99c>)
 8002788:	f023 0301 	bic.w	r3, r3, #1
 800278c:	6213      	str	r3, [r2, #32]
 800278e:	4b10      	ldr	r3, [pc, #64]	@ (80027d0 <HAL_RCC_OscConfig+0x99c>)
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	4a0f      	ldr	r2, [pc, #60]	@ (80027d0 <HAL_RCC_OscConfig+0x99c>)
 8002794:	f023 0304 	bic.w	r3, r3, #4
 8002798:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800279a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800279e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 8087 	beq.w	80028ba <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ac:	f7fe fe64 	bl	8001478 <HAL_GetTick>
 80027b0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b4:	e012      	b.n	80027dc <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027b6:	f7fe fe5f 	bl	8001478 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d908      	bls.n	80027dc <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e339      	b.n	8002e42 <HAL_RCC_OscConfig+0x100e>
 80027ce:	bf00      	nop
 80027d0:	40021000 	.word	0x40021000
 80027d4:	10908120 	.word	0x10908120
 80027d8:	40007000 	.word	0x40007000
 80027dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80027e4:	2202      	movs	r2, #2
 80027e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ec:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	fa93 f2a3 	rbit	r2, r3
 80027f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027fa:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002804:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002808:	2202      	movs	r2, #2
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002810:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	fa93 f2a3 	rbit	r2, r3
 800281a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800281e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002822:	601a      	str	r2, [r3, #0]
  return result;
 8002824:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002828:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800282c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800282e:	fab3 f383 	clz	r3, r3
 8002832:	b2db      	uxtb	r3, r3
 8002834:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d102      	bne.n	8002844 <HAL_RCC_OscConfig+0xa10>
 800283e:	4b98      	ldr	r3, [pc, #608]	@ (8002aa0 <HAL_RCC_OscConfig+0xc6c>)
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	e013      	b.n	800286c <HAL_RCC_OscConfig+0xa38>
 8002844:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002848:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800284c:	2202      	movs	r2, #2
 800284e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002850:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002854:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	fa93 f2a3 	rbit	r2, r3
 800285e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002862:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	4b8d      	ldr	r3, [pc, #564]	@ (8002aa0 <HAL_RCC_OscConfig+0xc6c>)
 800286a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002870:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002874:	2102      	movs	r1, #2
 8002876:	6011      	str	r1, [r2, #0]
 8002878:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800287c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002880:	6812      	ldr	r2, [r2, #0]
 8002882:	fa92 f1a2 	rbit	r1, r2
 8002886:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800288a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800288e:	6011      	str	r1, [r2, #0]
  return result;
 8002890:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002894:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002898:	6812      	ldr	r2, [r2, #0]
 800289a:	fab2 f282 	clz	r2, r2
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	f002 021f 	and.w	r2, r2, #31
 80028aa:	2101      	movs	r1, #1
 80028ac:	fa01 f202 	lsl.w	r2, r1, r2
 80028b0:	4013      	ands	r3, r2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f43f af7f 	beq.w	80027b6 <HAL_RCC_OscConfig+0x982>
 80028b8:	e07d      	b.n	80029b6 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ba:	f7fe fddd 	bl	8001478 <HAL_GetTick>
 80028be:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c2:	e00b      	b.n	80028dc <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028c4:	f7fe fdd8 	bl	8001478 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e2b2      	b.n	8002e42 <HAL_RCC_OscConfig+0x100e>
 80028dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80028e4:	2202      	movs	r2, #2
 80028e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ec:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	fa93 f2a3 	rbit	r2, r3
 80028f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028fa:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002904:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002908:	2202      	movs	r2, #2
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002910:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	fa93 f2a3 	rbit	r2, r3
 800291a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800291e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002922:	601a      	str	r2, [r3, #0]
  return result;
 8002924:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002928:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800292c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800292e:	fab3 f383 	clz	r3, r3
 8002932:	b2db      	uxtb	r3, r3
 8002934:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d102      	bne.n	8002944 <HAL_RCC_OscConfig+0xb10>
 800293e:	4b58      	ldr	r3, [pc, #352]	@ (8002aa0 <HAL_RCC_OscConfig+0xc6c>)
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	e013      	b.n	800296c <HAL_RCC_OscConfig+0xb38>
 8002944:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002948:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800294c:	2202      	movs	r2, #2
 800294e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002950:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002954:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	fa93 f2a3 	rbit	r2, r3
 800295e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002962:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	4b4d      	ldr	r3, [pc, #308]	@ (8002aa0 <HAL_RCC_OscConfig+0xc6c>)
 800296a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002970:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002974:	2102      	movs	r1, #2
 8002976:	6011      	str	r1, [r2, #0]
 8002978:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800297c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002980:	6812      	ldr	r2, [r2, #0]
 8002982:	fa92 f1a2 	rbit	r1, r2
 8002986:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800298a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800298e:	6011      	str	r1, [r2, #0]
  return result;
 8002990:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002994:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002998:	6812      	ldr	r2, [r2, #0]
 800299a:	fab2 f282 	clz	r2, r2
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	f002 021f 	and.w	r2, r2, #31
 80029aa:	2101      	movs	r1, #1
 80029ac:	fa01 f202 	lsl.w	r2, r1, r2
 80029b0:	4013      	ands	r3, r2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d186      	bne.n	80028c4 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029b6:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d105      	bne.n	80029ca <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029be:	4b38      	ldr	r3, [pc, #224]	@ (8002aa0 <HAL_RCC_OscConfig+0xc6c>)
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	4a37      	ldr	r2, [pc, #220]	@ (8002aa0 <HAL_RCC_OscConfig+0xc6c>)
 80029c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029c8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 8232 	beq.w	8002e40 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029dc:	4b30      	ldr	r3, [pc, #192]	@ (8002aa0 <HAL_RCC_OscConfig+0xc6c>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 030c 	and.w	r3, r3, #12
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	f000 8201 	beq.w	8002dec <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	f040 8157 	bne.w	8002caa <HAL_RCC_OscConfig+0xe76>
 80029fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a00:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002a04:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a0e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	fa93 f2a3 	rbit	r2, r3
 8002a18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a1c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002a20:	601a      	str	r2, [r3, #0]
  return result;
 8002a22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a26:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002a2a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a2c:	fab3 f383 	clz	r3, r3
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a36:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	2300      	movs	r3, #0
 8002a40:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a42:	f7fe fd19 	bl	8001478 <HAL_GetTick>
 8002a46:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a4a:	e009      	b.n	8002a60 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a4c:	f7fe fd14 	bl	8001478 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e1f0      	b.n	8002e42 <HAL_RCC_OscConfig+0x100e>
 8002a60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a64:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002a68:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a72:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	fa93 f2a3 	rbit	r2, r3
 8002a7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a80:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002a84:	601a      	str	r2, [r3, #0]
  return result;
 8002a86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a8a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002a8e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a90:	fab3 f383 	clz	r3, r3
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a98:	d804      	bhi.n	8002aa4 <HAL_RCC_OscConfig+0xc70>
 8002a9a:	4b01      	ldr	r3, [pc, #4]	@ (8002aa0 <HAL_RCC_OscConfig+0xc6c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	e029      	b.n	8002af4 <HAL_RCC_OscConfig+0xcc0>
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002aac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ab0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ab6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	fa93 f2a3 	rbit	r2, r3
 8002ac0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ace:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002ad2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002adc:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	fa93 f2a3 	rbit	r2, r3
 8002ae6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aea:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	4bc3      	ldr	r3, [pc, #780]	@ (8002e00 <HAL_RCC_OscConfig+0xfcc>)
 8002af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002af8:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002afc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002b00:	6011      	str	r1, [r2, #0]
 8002b02:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b06:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002b0a:	6812      	ldr	r2, [r2, #0]
 8002b0c:	fa92 f1a2 	rbit	r1, r2
 8002b10:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b14:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002b18:	6011      	str	r1, [r2, #0]
  return result;
 8002b1a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b1e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002b22:	6812      	ldr	r2, [r2, #0]
 8002b24:	fab2 f282 	clz	r2, r2
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	f042 0220 	orr.w	r2, r2, #32
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	f002 021f 	and.w	r2, r2, #31
 8002b34:	2101      	movs	r1, #1
 8002b36:	fa01 f202 	lsl.w	r2, r1, r2
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d185      	bne.n	8002a4c <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b40:	4baf      	ldr	r3, [pc, #700]	@ (8002e00 <HAL_RCC_OscConfig+0xfcc>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002b48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b4c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002b54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b58:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	430b      	orrs	r3, r1
 8002b62:	49a7      	ldr	r1, [pc, #668]	@ (8002e00 <HAL_RCC_OscConfig+0xfcc>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	604b      	str	r3, [r1, #4]
 8002b68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b6c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002b70:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b7a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	fa93 f2a3 	rbit	r2, r3
 8002b84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b88:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002b8c:	601a      	str	r2, [r3, #0]
  return result;
 8002b8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b92:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002b96:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b98:	fab3 f383 	clz	r3, r3
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002ba2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	461a      	mov	r2, r3
 8002baa:	2301      	movs	r3, #1
 8002bac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bae:	f7fe fc63 	bl	8001478 <HAL_GetTick>
 8002bb2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bb6:	e009      	b.n	8002bcc <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb8:	f7fe fc5e 	bl	8001478 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e13a      	b.n	8002e42 <HAL_RCC_OscConfig+0x100e>
 8002bcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bd0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002bd4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bde:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	fa93 f2a3 	rbit	r2, r3
 8002be8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bec:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002bf0:	601a      	str	r2, [r3, #0]
  return result;
 8002bf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bf6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002bfa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bfc:	fab3 f383 	clz	r3, r3
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b3f      	cmp	r3, #63	@ 0x3f
 8002c04:	d802      	bhi.n	8002c0c <HAL_RCC_OscConfig+0xdd8>
 8002c06:	4b7e      	ldr	r3, [pc, #504]	@ (8002e00 <HAL_RCC_OscConfig+0xfcc>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	e027      	b.n	8002c5c <HAL_RCC_OscConfig+0xe28>
 8002c0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c10:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002c14:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c1e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	fa93 f2a3 	rbit	r2, r3
 8002c28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c2c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c36:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002c3a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c44:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	fa93 f2a3 	rbit	r2, r3
 8002c4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c52:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	4b69      	ldr	r3, [pc, #420]	@ (8002e00 <HAL_RCC_OscConfig+0xfcc>)
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c60:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002c64:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002c68:	6011      	str	r1, [r2, #0]
 8002c6a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c6e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002c72:	6812      	ldr	r2, [r2, #0]
 8002c74:	fa92 f1a2 	rbit	r1, r2
 8002c78:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c7c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002c80:	6011      	str	r1, [r2, #0]
  return result;
 8002c82:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c86:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002c8a:	6812      	ldr	r2, [r2, #0]
 8002c8c:	fab2 f282 	clz	r2, r2
 8002c90:	b2d2      	uxtb	r2, r2
 8002c92:	f042 0220 	orr.w	r2, r2, #32
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	f002 021f 	and.w	r2, r2, #31
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d087      	beq.n	8002bb8 <HAL_RCC_OscConfig+0xd84>
 8002ca8:	e0ca      	b.n	8002e40 <HAL_RCC_OscConfig+0x100c>
 8002caa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cae:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002cb2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002cb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cbc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	fa93 f2a3 	rbit	r2, r3
 8002cc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cca:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002cce:	601a      	str	r2, [r3, #0]
  return result;
 8002cd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002cd8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cda:	fab3 f383 	clz	r3, r3
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002ce4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	461a      	mov	r2, r3
 8002cec:	2300      	movs	r3, #0
 8002cee:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf0:	f7fe fbc2 	bl	8001478 <HAL_GetTick>
 8002cf4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cf8:	e009      	b.n	8002d0e <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cfa:	f7fe fbbd 	bl	8001478 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e099      	b.n	8002e42 <HAL_RCC_OscConfig+0x100e>
 8002d0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d12:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002d16:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d20:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	fa93 f2a3 	rbit	r2, r3
 8002d2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d2e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002d32:	601a      	str	r2, [r3, #0]
  return result;
 8002d34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d38:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002d3c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d3e:	fab3 f383 	clz	r3, r3
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b3f      	cmp	r3, #63	@ 0x3f
 8002d46:	d802      	bhi.n	8002d4e <HAL_RCC_OscConfig+0xf1a>
 8002d48:	4b2d      	ldr	r3, [pc, #180]	@ (8002e00 <HAL_RCC_OscConfig+0xfcc>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	e027      	b.n	8002d9e <HAL_RCC_OscConfig+0xf6a>
 8002d4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d52:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002d56:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d60:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	fa93 f2a3 	rbit	r2, r3
 8002d6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d6e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d78:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002d7c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d86:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	fa93 f2a3 	rbit	r2, r3
 8002d90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d94:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	4b19      	ldr	r3, [pc, #100]	@ (8002e00 <HAL_RCC_OscConfig+0xfcc>)
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002da2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002da6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002daa:	6011      	str	r1, [r2, #0]
 8002dac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002db0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002db4:	6812      	ldr	r2, [r2, #0]
 8002db6:	fa92 f1a2 	rbit	r1, r2
 8002dba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002dbe:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002dc2:	6011      	str	r1, [r2, #0]
  return result;
 8002dc4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002dc8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002dcc:	6812      	ldr	r2, [r2, #0]
 8002dce:	fab2 f282 	clz	r2, r2
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	f042 0220 	orr.w	r2, r2, #32
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	f002 021f 	and.w	r2, r2, #31
 8002dde:	2101      	movs	r1, #1
 8002de0:	fa01 f202 	lsl.w	r2, r1, r2
 8002de4:	4013      	ands	r3, r2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d187      	bne.n	8002cfa <HAL_RCC_OscConfig+0xec6>
 8002dea:	e029      	b.n	8002e40 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002df0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d103      	bne.n	8002e04 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e020      	b.n	8002e42 <HAL_RCC_OscConfig+0x100e>
 8002e00:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e04:	4b11      	ldr	r3, [pc, #68]	@ (8002e4c <HAL_RCC_OscConfig+0x1018>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e0c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002e10:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d10b      	bne.n	8002e3c <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002e24:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002e28:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002e2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e30:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e000      	b.n	8002e42 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40021000 	.word	0x40021000

08002e50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b09e      	sub	sp, #120	@ 0x78
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e154      	b.n	8003112 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e68:	4b89      	ldr	r3, [pc, #548]	@ (8003090 <HAL_RCC_ClockConfig+0x240>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d910      	bls.n	8002e98 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e76:	4b86      	ldr	r3, [pc, #536]	@ (8003090 <HAL_RCC_ClockConfig+0x240>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f023 0207 	bic.w	r2, r3, #7
 8002e7e:	4984      	ldr	r1, [pc, #528]	@ (8003090 <HAL_RCC_ClockConfig+0x240>)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e86:	4b82      	ldr	r3, [pc, #520]	@ (8003090 <HAL_RCC_ClockConfig+0x240>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d001      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e13c      	b.n	8003112 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d008      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea4:	4b7b      	ldr	r3, [pc, #492]	@ (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	4978      	ldr	r1, [pc, #480]	@ (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 80cd 	beq.w	800305e <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d137      	bne.n	8002f3c <HAL_RCC_ClockConfig+0xec>
 8002ecc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ed0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ed4:	fa93 f3a3 	rbit	r3, r3
 8002ed8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002eda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002edc:	fab3 f383 	clz	r3, r3
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b3f      	cmp	r3, #63	@ 0x3f
 8002ee4:	d802      	bhi.n	8002eec <HAL_RCC_ClockConfig+0x9c>
 8002ee6:	4b6b      	ldr	r3, [pc, #428]	@ (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	e00f      	b.n	8002f0c <HAL_RCC_ClockConfig+0xbc>
 8002eec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ef0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ef4:	fa93 f3a3 	rbit	r3, r3
 8002ef8:	667b      	str	r3, [r7, #100]	@ 0x64
 8002efa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002efe:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f02:	fa93 f3a3 	rbit	r3, r3
 8002f06:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f08:	4b62      	ldr	r3, [pc, #392]	@ (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002f10:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002f12:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002f14:	fa92 f2a2 	rbit	r2, r2
 8002f18:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002f1a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002f1c:	fab2 f282 	clz	r2, r2
 8002f20:	b2d2      	uxtb	r2, r2
 8002f22:	f042 0220 	orr.w	r2, r2, #32
 8002f26:	b2d2      	uxtb	r2, r2
 8002f28:	f002 021f 	and.w	r2, r2, #31
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f32:	4013      	ands	r3, r2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d171      	bne.n	800301c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e0ea      	b.n	8003112 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d137      	bne.n	8002fb4 <HAL_RCC_ClockConfig+0x164>
 8002f44:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f48:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f4c:	fa93 f3a3 	rbit	r3, r3
 8002f50:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002f52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f54:	fab3 f383 	clz	r3, r3
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b3f      	cmp	r3, #63	@ 0x3f
 8002f5c:	d802      	bhi.n	8002f64 <HAL_RCC_ClockConfig+0x114>
 8002f5e:	4b4d      	ldr	r3, [pc, #308]	@ (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	e00f      	b.n	8002f84 <HAL_RCC_ClockConfig+0x134>
 8002f64:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f68:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f6c:	fa93 f3a3 	rbit	r3, r3
 8002f70:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f76:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f7a:	fa93 f3a3 	rbit	r3, r3
 8002f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f80:	4b44      	ldr	r3, [pc, #272]	@ (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f84:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f88:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002f8a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002f8c:	fa92 f2a2 	rbit	r2, r2
 8002f90:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002f92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f94:	fab2 f282 	clz	r2, r2
 8002f98:	b2d2      	uxtb	r2, r2
 8002f9a:	f042 0220 	orr.w	r2, r2, #32
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	f002 021f 	and.w	r2, r2, #31
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8002faa:	4013      	ands	r3, r2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d135      	bne.n	800301c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e0ae      	b.n	8003112 <HAL_RCC_ClockConfig+0x2c2>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fba:	fa93 f3a3 	rbit	r3, r3
 8002fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc2:	fab3 f383 	clz	r3, r3
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b3f      	cmp	r3, #63	@ 0x3f
 8002fca:	d802      	bhi.n	8002fd2 <HAL_RCC_ClockConfig+0x182>
 8002fcc:	4b31      	ldr	r3, [pc, #196]	@ (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	e00d      	b.n	8002fee <HAL_RCC_ClockConfig+0x19e>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fd8:	fa93 f3a3 	rbit	r3, r3
 8002fdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fde:	2302      	movs	r3, #2
 8002fe0:	623b      	str	r3, [r7, #32]
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	fa93 f3a3 	rbit	r3, r3
 8002fe8:	61fb      	str	r3, [r7, #28]
 8002fea:	4b2a      	ldr	r3, [pc, #168]	@ (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fee:	2202      	movs	r2, #2
 8002ff0:	61ba      	str	r2, [r7, #24]
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	fa92 f2a2 	rbit	r2, r2
 8002ff8:	617a      	str	r2, [r7, #20]
  return result;
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	fab2 f282 	clz	r2, r2
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	f042 0220 	orr.w	r2, r2, #32
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	f002 021f 	and.w	r2, r2, #31
 800300c:	2101      	movs	r1, #1
 800300e:	fa01 f202 	lsl.w	r2, r1, r2
 8003012:	4013      	ands	r3, r2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e07a      	b.n	8003112 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800301c:	4b1d      	ldr	r3, [pc, #116]	@ (8003094 <HAL_RCC_ClockConfig+0x244>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f023 0203 	bic.w	r2, r3, #3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	491a      	ldr	r1, [pc, #104]	@ (8003094 <HAL_RCC_ClockConfig+0x244>)
 800302a:	4313      	orrs	r3, r2
 800302c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800302e:	f7fe fa23 	bl	8001478 <HAL_GetTick>
 8003032:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003034:	e00a      	b.n	800304c <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003036:	f7fe fa1f 	bl	8001478 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003044:	4293      	cmp	r3, r2
 8003046:	d901      	bls.n	800304c <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e062      	b.n	8003112 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304c:	4b11      	ldr	r3, [pc, #68]	@ (8003094 <HAL_RCC_ClockConfig+0x244>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f003 020c 	and.w	r2, r3, #12
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	429a      	cmp	r2, r3
 800305c:	d1eb      	bne.n	8003036 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800305e:	4b0c      	ldr	r3, [pc, #48]	@ (8003090 <HAL_RCC_ClockConfig+0x240>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	429a      	cmp	r2, r3
 800306a:	d215      	bcs.n	8003098 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306c:	4b08      	ldr	r3, [pc, #32]	@ (8003090 <HAL_RCC_ClockConfig+0x240>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f023 0207 	bic.w	r2, r3, #7
 8003074:	4906      	ldr	r1, [pc, #24]	@ (8003090 <HAL_RCC_ClockConfig+0x240>)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	4313      	orrs	r3, r2
 800307a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800307c:	4b04      	ldr	r3, [pc, #16]	@ (8003090 <HAL_RCC_ClockConfig+0x240>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	429a      	cmp	r2, r3
 8003088:	d006      	beq.n	8003098 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e041      	b.n	8003112 <HAL_RCC_ClockConfig+0x2c2>
 800308e:	bf00      	nop
 8003090:	40022000 	.word	0x40022000
 8003094:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d008      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030a4:	4b1d      	ldr	r3, [pc, #116]	@ (800311c <HAL_RCC_ClockConfig+0x2cc>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	491a      	ldr	r1, [pc, #104]	@ (800311c <HAL_RCC_ClockConfig+0x2cc>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d009      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030c2:	4b16      	ldr	r3, [pc, #88]	@ (800311c <HAL_RCC_ClockConfig+0x2cc>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	4912      	ldr	r1, [pc, #72]	@ (800311c <HAL_RCC_ClockConfig+0x2cc>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80030d6:	f000 f829 	bl	800312c <HAL_RCC_GetSysClockFreq>
 80030da:	4601      	mov	r1, r0
 80030dc:	4b0f      	ldr	r3, [pc, #60]	@ (800311c <HAL_RCC_ClockConfig+0x2cc>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030e4:	22f0      	movs	r2, #240	@ 0xf0
 80030e6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	fa92 f2a2 	rbit	r2, r2
 80030ee:	60fa      	str	r2, [r7, #12]
  return result;
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	fab2 f282 	clz	r2, r2
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	40d3      	lsrs	r3, r2
 80030fa:	4a09      	ldr	r2, [pc, #36]	@ (8003120 <HAL_RCC_ClockConfig+0x2d0>)
 80030fc:	5cd3      	ldrb	r3, [r2, r3]
 80030fe:	fa21 f303 	lsr.w	r3, r1, r3
 8003102:	4a08      	ldr	r2, [pc, #32]	@ (8003124 <HAL_RCC_ClockConfig+0x2d4>)
 8003104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003106:	4b08      	ldr	r3, [pc, #32]	@ (8003128 <HAL_RCC_ClockConfig+0x2d8>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f7fe f970 	bl	80013f0 <HAL_InitTick>
  
  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3778      	adds	r7, #120	@ 0x78
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40021000 	.word	0x40021000
 8003120:	08005410 	.word	0x08005410
 8003124:	20000028 	.word	0x20000028
 8003128:	2000002c 	.word	0x2000002c

0800312c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800312c:	b480      	push	{r7}
 800312e:	b087      	sub	sp, #28
 8003130:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003132:	2300      	movs	r3, #0
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	2300      	movs	r3, #0
 8003138:	60bb      	str	r3, [r7, #8]
 800313a:	2300      	movs	r3, #0
 800313c:	617b      	str	r3, [r7, #20]
 800313e:	2300      	movs	r3, #0
 8003140:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003142:	2300      	movs	r3, #0
 8003144:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003146:	4b1e      	ldr	r3, [pc, #120]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f003 030c 	and.w	r3, r3, #12
 8003152:	2b04      	cmp	r3, #4
 8003154:	d002      	beq.n	800315c <HAL_RCC_GetSysClockFreq+0x30>
 8003156:	2b08      	cmp	r3, #8
 8003158:	d003      	beq.n	8003162 <HAL_RCC_GetSysClockFreq+0x36>
 800315a:	e026      	b.n	80031aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800315c:	4b19      	ldr	r3, [pc, #100]	@ (80031c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800315e:	613b      	str	r3, [r7, #16]
      break;
 8003160:	e026      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	0c9b      	lsrs	r3, r3, #18
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	4a17      	ldr	r2, [pc, #92]	@ (80031c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800316c:	5cd3      	ldrb	r3, [r2, r3]
 800316e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003170:	4b13      	ldr	r3, [pc, #76]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003174:	f003 030f 	and.w	r3, r3, #15
 8003178:	4a14      	ldr	r2, [pc, #80]	@ (80031cc <HAL_RCC_GetSysClockFreq+0xa0>)
 800317a:	5cd3      	ldrb	r3, [r2, r3]
 800317c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d008      	beq.n	800319a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003188:	4a0e      	ldr	r2, [pc, #56]	@ (80031c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	fb02 f303 	mul.w	r3, r2, r3
 8003196:	617b      	str	r3, [r7, #20]
 8003198:	e004      	b.n	80031a4 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a0c      	ldr	r2, [pc, #48]	@ (80031d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800319e:	fb02 f303 	mul.w	r3, r2, r3
 80031a2:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	613b      	str	r3, [r7, #16]
      break;
 80031a8:	e002      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031aa:	4b06      	ldr	r3, [pc, #24]	@ (80031c4 <HAL_RCC_GetSysClockFreq+0x98>)
 80031ac:	613b      	str	r3, [r7, #16]
      break;
 80031ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031b0:	693b      	ldr	r3, [r7, #16]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	371c      	adds	r7, #28
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	40021000 	.word	0x40021000
 80031c4:	007a1200 	.word	0x007a1200
 80031c8:	08005428 	.word	0x08005428
 80031cc:	08005438 	.word	0x08005438
 80031d0:	003d0900 	.word	0x003d0900

080031d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031d8:	4b03      	ldr	r3, [pc, #12]	@ (80031e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80031da:	681b      	ldr	r3, [r3, #0]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	20000028 	.word	0x20000028

080031ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80031f2:	f7ff ffef 	bl	80031d4 <HAL_RCC_GetHCLKFreq>
 80031f6:	4601      	mov	r1, r0
 80031f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003228 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003200:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003204:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	fa92 f2a2 	rbit	r2, r2
 800320c:	603a      	str	r2, [r7, #0]
  return result;
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	fab2 f282 	clz	r2, r2
 8003214:	b2d2      	uxtb	r2, r2
 8003216:	40d3      	lsrs	r3, r2
 8003218:	4a04      	ldr	r2, [pc, #16]	@ (800322c <HAL_RCC_GetPCLK1Freq+0x40>)
 800321a:	5cd3      	ldrb	r3, [r2, r3]
 800321c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003220:	4618      	mov	r0, r3
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40021000 	.word	0x40021000
 800322c:	08005420 	.word	0x08005420

08003230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003236:	f7ff ffcd 	bl	80031d4 <HAL_RCC_GetHCLKFreq>
 800323a:	4601      	mov	r1, r0
 800323c:	4b0b      	ldr	r3, [pc, #44]	@ (800326c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003244:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003248:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	fa92 f2a2 	rbit	r2, r2
 8003250:	603a      	str	r2, [r7, #0]
  return result;
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	fab2 f282 	clz	r2, r2
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	40d3      	lsrs	r3, r2
 800325c:	4a04      	ldr	r2, [pc, #16]	@ (8003270 <HAL_RCC_GetPCLK2Freq+0x40>)
 800325e:	5cd3      	ldrb	r3, [r2, r3]
 8003260:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003264:	4618      	mov	r0, r3
 8003266:	3708      	adds	r7, #8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40021000 	.word	0x40021000
 8003270:	08005420 	.word	0x08005420

08003274 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b092      	sub	sp, #72	@ 0x48
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800327c:	2300      	movs	r3, #0
 800327e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003284:	2300      	movs	r3, #0
 8003286:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 80cb 	beq.w	800342e <HAL_RCCEx_PeriphCLKConfig+0x1ba>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003298:	4b85      	ldr	r3, [pc, #532]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800329a:	69db      	ldr	r3, [r3, #28]
 800329c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10e      	bne.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032a4:	4b82      	ldr	r3, [pc, #520]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	4a81      	ldr	r2, [pc, #516]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80032aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032ae:	61d3      	str	r3, [r2, #28]
 80032b0:	4b7f      	ldr	r3, [pc, #508]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032b8:	60bb      	str	r3, [r7, #8]
 80032ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032bc:	2301      	movs	r3, #1
 80032be:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c2:	4b7c      	ldr	r3, [pc, #496]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d118      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ce:	4b79      	ldr	r3, [pc, #484]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a78      	ldr	r2, [pc, #480]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032d8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032da:	f7fe f8cd 	bl	8001478 <HAL_GetTick>
 80032de:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e0:	e008      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032e2:	f7fe f8c9 	bl	8001478 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b64      	cmp	r3, #100	@ 0x64
 80032ee:	d901      	bls.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e0d9      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f4:	4b6f      	ldr	r3, [pc, #444]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0f0      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003300:	4b6b      	ldr	r3, [pc, #428]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003308:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800330a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800330c:	2b00      	cmp	r3, #0
 800330e:	d07b      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003318:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800331a:	429a      	cmp	r2, r3
 800331c:	d074      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800331e:	4b64      	ldr	r3, [pc, #400]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003326:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003328:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800332c:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003330:	fa93 f3a3 	rbit	r3, r3
 8003334:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003338:	fab3 f383 	clz	r3, r3
 800333c:	b2db      	uxtb	r3, r3
 800333e:	461a      	mov	r2, r3
 8003340:	4b5d      	ldr	r3, [pc, #372]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003342:	4413      	add	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	461a      	mov	r2, r3
 8003348:	2301      	movs	r3, #1
 800334a:	6013      	str	r3, [r2, #0]
 800334c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003350:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003354:	fa93 f3a3 	rbit	r3, r3
 8003358:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800335a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800335c:	fab3 f383 	clz	r3, r3
 8003360:	b2db      	uxtb	r3, r3
 8003362:	461a      	mov	r2, r3
 8003364:	4b54      	ldr	r3, [pc, #336]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003366:	4413      	add	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	461a      	mov	r2, r3
 800336c:	2300      	movs	r3, #0
 800336e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003370:	4a4f      	ldr	r2, [pc, #316]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003374:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	d043      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003380:	f7fe f87a 	bl	8001478 <HAL_GetTick>
 8003384:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003386:	e00a      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003388:	f7fe f876 	bl	8001478 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003396:	4293      	cmp	r3, r2
 8003398:	d901      	bls.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e084      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800339e:	2302      	movs	r3, #2
 80033a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033a4:	fa93 f3a3 	rbit	r3, r3
 80033a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80033aa:	2302      	movs	r3, #2
 80033ac:	623b      	str	r3, [r7, #32]
 80033ae:	6a3b      	ldr	r3, [r7, #32]
 80033b0:	fa93 f3a3 	rbit	r3, r3
 80033b4:	61fb      	str	r3, [r7, #28]
  return result;
 80033b6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b8:	fab3 f383 	clz	r3, r3
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d102      	bne.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80033c8:	4b39      	ldr	r3, [pc, #228]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	e007      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x16a>
 80033ce:	2302      	movs	r3, #2
 80033d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	fa93 f3a3 	rbit	r3, r3
 80033d8:	617b      	str	r3, [r7, #20]
 80033da:	4b35      	ldr	r3, [pc, #212]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80033dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033de:	2202      	movs	r2, #2
 80033e0:	613a      	str	r2, [r7, #16]
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	fa92 f2a2 	rbit	r2, r2
 80033e8:	60fa      	str	r2, [r7, #12]
  return result;
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	fab2 f282 	clz	r2, r2
 80033f0:	b2d2      	uxtb	r2, r2
 80033f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033f6:	b2d2      	uxtb	r2, r2
 80033f8:	f002 021f 	and.w	r2, r2, #31
 80033fc:	2101      	movs	r1, #1
 80033fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003402:	4013      	ands	r3, r2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0bf      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003408:	4b29      	ldr	r3, [pc, #164]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	4926      	ldr	r1, [pc, #152]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003416:	4313      	orrs	r3, r2
 8003418:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800341a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800341e:	2b01      	cmp	r3, #1
 8003420:	d105      	bne.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003422:	4b23      	ldr	r3, [pc, #140]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	4a22      	ldr	r2, [pc, #136]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003428:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800342c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d008      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800343a:	4b1d      	ldr	r3, [pc, #116]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343e:	f023 0203 	bic.w	r2, r3, #3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	491a      	ldr	r1, [pc, #104]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003448:	4313      	orrs	r3, r2
 800344a:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0320 	and.w	r3, r3, #32
 8003454:	2b00      	cmp	r3, #0
 8003456:	d008      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003458:	4b15      	ldr	r3, [pc, #84]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800345a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800345c:	f023 0210 	bic.w	r2, r3, #16
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	4912      	ldr	r1, [pc, #72]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003466:	4313      	orrs	r3, r2
 8003468:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003472:	2b00      	cmp	r3, #0
 8003474:	d008      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003476:	4b0e      	ldr	r3, [pc, #56]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	490b      	ldr	r1, [pc, #44]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003484:	4313      	orrs	r3, r2
 8003486:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d008      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003494:	4b06      	ldr	r3, [pc, #24]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003498:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	4903      	ldr	r1, [pc, #12]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3748      	adds	r7, #72	@ 0x48
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40021000 	.word	0x40021000
 80034b4:	40007000 	.word	0x40007000
 80034b8:	10908100 	.word	0x10908100

080034bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b08a      	sub	sp, #40	@ 0x28
 80034c0:	af02      	add	r7, sp, #8
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	603b      	str	r3, [r7, #0]
 80034c8:	4613      	mov	r3, r2
 80034ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034d0:	2b20      	cmp	r3, #32
 80034d2:	d177      	bne.n	80035c4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d002      	beq.n	80034e0 <HAL_UART_Transmit+0x24>
 80034da:	88fb      	ldrh	r3, [r7, #6]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e070      	b.n	80035c6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2221      	movs	r2, #33	@ 0x21
 80034f0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034f2:	f7fd ffc1 	bl	8001478 <HAL_GetTick>
 80034f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	88fa      	ldrh	r2, [r7, #6]
 80034fc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	88fa      	ldrh	r2, [r7, #6]
 8003504:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003510:	d108      	bne.n	8003524 <HAL_UART_Transmit+0x68>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d104      	bne.n	8003524 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800351a:	2300      	movs	r3, #0
 800351c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	61bb      	str	r3, [r7, #24]
 8003522:	e003      	b.n	800352c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003528:	2300      	movs	r3, #0
 800352a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800352c:	e02f      	b.n	800358e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2200      	movs	r2, #0
 8003536:	2180      	movs	r1, #128	@ 0x80
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 fdcd 	bl	80040d8 <UART_WaitOnFlagUntilTimeout>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d004      	beq.n	800354e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2220      	movs	r2, #32
 8003548:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e03b      	b.n	80035c6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10b      	bne.n	800356c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	881a      	ldrh	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003560:	b292      	uxth	r2, r2
 8003562:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	3302      	adds	r3, #2
 8003568:	61bb      	str	r3, [r7, #24]
 800356a:	e007      	b.n	800357c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	781a      	ldrb	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	3301      	adds	r3, #1
 800357a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003582:	b29b      	uxth	r3, r3
 8003584:	3b01      	subs	r3, #1
 8003586:	b29a      	uxth	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003594:	b29b      	uxth	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1c9      	bne.n	800352e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2200      	movs	r2, #0
 80035a2:	2140      	movs	r1, #64	@ 0x40
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 fd97 	bl	80040d8 <UART_WaitOnFlagUntilTimeout>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d004      	beq.n	80035ba <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2220      	movs	r2, #32
 80035b4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e005      	b.n	80035c6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2220      	movs	r2, #32
 80035be:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80035c0:	2300      	movs	r3, #0
 80035c2:	e000      	b.n	80035c6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80035c4:	2302      	movs	r3, #2
  }
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3720      	adds	r7, #32
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
	...

080035d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b0ba      	sub	sp, #232	@ 0xe8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80035f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80035fa:	f640 030f 	movw	r3, #2063	@ 0x80f
 80035fe:	4013      	ands	r3, r2
 8003600:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003604:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003608:	2b00      	cmp	r3, #0
 800360a:	d115      	bne.n	8003638 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800360c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003610:	f003 0320 	and.w	r3, r3, #32
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00f      	beq.n	8003638 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800361c:	f003 0320 	and.w	r3, r3, #32
 8003620:	2b00      	cmp	r3, #0
 8003622:	d009      	beq.n	8003638 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003628:	2b00      	cmp	r3, #0
 800362a:	f000 82ab 	beq.w	8003b84 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	4798      	blx	r3
      }
      return;
 8003636:	e2a5      	b.n	8003b84 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003638:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 8117 	beq.w	8003870 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003642:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d106      	bne.n	800365c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800364e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003652:	4b85      	ldr	r3, [pc, #532]	@ (8003868 <HAL_UART_IRQHandler+0x298>)
 8003654:	4013      	ands	r3, r2
 8003656:	2b00      	cmp	r3, #0
 8003658:	f000 810a 	beq.w	8003870 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800365c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	d011      	beq.n	800368c <HAL_UART_IRQHandler+0xbc>
 8003668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800366c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00b      	beq.n	800368c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2201      	movs	r2, #1
 800367a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003682:	f043 0201 	orr.w	r2, r3, #1
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800368c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d011      	beq.n	80036bc <HAL_UART_IRQHandler+0xec>
 8003698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00b      	beq.n	80036bc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2202      	movs	r2, #2
 80036aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036b2:	f043 0204 	orr.w	r2, r3, #4
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d011      	beq.n	80036ec <HAL_UART_IRQHandler+0x11c>
 80036c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00b      	beq.n	80036ec <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2204      	movs	r2, #4
 80036da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036e2:	f043 0202 	orr.w	r2, r3, #2
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80036ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036f0:	f003 0308 	and.w	r3, r3, #8
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d017      	beq.n	8003728 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036fc:	f003 0320 	and.w	r3, r3, #32
 8003700:	2b00      	cmp	r3, #0
 8003702:	d105      	bne.n	8003710 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003704:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003708:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00b      	beq.n	8003728 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2208      	movs	r2, #8
 8003716:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800371e:	f043 0208 	orr.w	r2, r3, #8
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800372c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003730:	2b00      	cmp	r3, #0
 8003732:	d012      	beq.n	800375a <HAL_UART_IRQHandler+0x18a>
 8003734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003738:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00c      	beq.n	800375a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003748:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003750:	f043 0220 	orr.w	r2, r3, #32
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 8211 	beq.w	8003b88 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800376a:	f003 0320 	and.w	r3, r3, #32
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00d      	beq.n	800378e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003776:	f003 0320 	and.w	r3, r3, #32
 800377a:	2b00      	cmp	r3, #0
 800377c:	d007      	beq.n	800378e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003794:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037a2:	2b40      	cmp	r3, #64	@ 0x40
 80037a4:	d005      	beq.n	80037b2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80037a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037aa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d04f      	beq.n	8003852 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 fdc4 	bl	8004340 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037c2:	2b40      	cmp	r3, #64	@ 0x40
 80037c4:	d141      	bne.n	800384a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	3308      	adds	r3, #8
 80037cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037d4:	e853 3f00 	ldrex	r3, [r3]
 80037d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80037dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	3308      	adds	r3, #8
 80037ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80037f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80037f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80037fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003802:	e841 2300 	strex	r3, r2, [r1]
 8003806:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800380a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1d9      	bne.n	80037c6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003816:	2b00      	cmp	r3, #0
 8003818:	d013      	beq.n	8003842 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800381e:	4a13      	ldr	r2, [pc, #76]	@ (800386c <HAL_UART_IRQHandler+0x29c>)
 8003820:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003826:	4618      	mov	r0, r3
 8003828:	f7fe f84b 	bl	80018c2 <HAL_DMA_Abort_IT>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d017      	beq.n	8003862 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003836:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800383c:	4610      	mov	r0, r2
 800383e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003840:	e00f      	b.n	8003862 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7fd fd72 	bl	800132c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003848:	e00b      	b.n	8003862 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7fd fd6e 	bl	800132c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003850:	e007      	b.n	8003862 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7fd fd6a 	bl	800132c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003860:	e192      	b.n	8003b88 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003862:	bf00      	nop
    return;
 8003864:	e190      	b.n	8003b88 <HAL_UART_IRQHandler+0x5b8>
 8003866:	bf00      	nop
 8003868:	04000120 	.word	0x04000120
 800386c:	080045eb 	.word	0x080045eb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003874:	2b01      	cmp	r3, #1
 8003876:	f040 814b 	bne.w	8003b10 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800387a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800387e:	f003 0310 	and.w	r3, r3, #16
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 8144 	beq.w	8003b10 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800388c:	f003 0310 	and.w	r3, r3, #16
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 813d 	beq.w	8003b10 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2210      	movs	r2, #16
 800389c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a8:	2b40      	cmp	r3, #64	@ 0x40
 80038aa:	f040 80b5 	bne.w	8003a18 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038ba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 8164 	beq.w	8003b8c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80038ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038ce:	429a      	cmp	r2, r3
 80038d0:	f080 815c 	bcs.w	8003b8c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038da:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	2b20      	cmp	r3, #32
 80038e6:	f000 8086 	beq.w	80039f6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038f6:	e853 3f00 	ldrex	r3, [r3]
 80038fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80038fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003902:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003906:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	461a      	mov	r2, r3
 8003910:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003914:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003918:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003920:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003924:	e841 2300 	strex	r3, r2, [r1]
 8003928:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800392c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1da      	bne.n	80038ea <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	3308      	adds	r3, #8
 800393a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800393e:	e853 3f00 	ldrex	r3, [r3]
 8003942:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003944:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003946:	f023 0301 	bic.w	r3, r3, #1
 800394a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	3308      	adds	r3, #8
 8003954:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003958:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800395c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003960:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003964:	e841 2300 	strex	r3, r2, [r1]
 8003968:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800396a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1e1      	bne.n	8003934 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	3308      	adds	r3, #8
 8003976:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003978:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800397a:	e853 3f00 	ldrex	r3, [r3]
 800397e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003980:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003982:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003986:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	3308      	adds	r3, #8
 8003990:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003994:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003996:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003998:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800399a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800399c:	e841 2300 	strex	r3, r2, [r1]
 80039a0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80039a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1e3      	bne.n	8003970 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2220      	movs	r2, #32
 80039ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039be:	e853 3f00 	ldrex	r3, [r3]
 80039c2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80039c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039c6:	f023 0310 	bic.w	r3, r3, #16
 80039ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	461a      	mov	r2, r3
 80039d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80039d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80039da:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039e0:	e841 2300 	strex	r3, r2, [r1]
 80039e4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80039e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1e4      	bne.n	80039b6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7fd ff28 	bl	8001846 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2202      	movs	r2, #2
 80039fa:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	4619      	mov	r1, r3
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f7fd fc57 	bl	80012c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a16:	e0b9      	b.n	8003b8c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 80ab 	beq.w	8003b90 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003a3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 80a6 	beq.w	8003b90 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a4c:	e853 3f00 	ldrex	r3, [r3]
 8003a50:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	461a      	mov	r2, r3
 8003a62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003a66:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a68:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a6e:	e841 2300 	strex	r3, r2, [r1]
 8003a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1e4      	bne.n	8003a44 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	3308      	adds	r3, #8
 8003a80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a84:	e853 3f00 	ldrex	r3, [r3]
 8003a88:	623b      	str	r3, [r7, #32]
   return(result);
 8003a8a:	6a3b      	ldr	r3, [r7, #32]
 8003a8c:	f023 0301 	bic.w	r3, r3, #1
 8003a90:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	3308      	adds	r3, #8
 8003a9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003a9e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003aa4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003aa6:	e841 2300 	strex	r3, r2, [r1]
 8003aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1e3      	bne.n	8003a7a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	e853 3f00 	ldrex	r3, [r3]
 8003ad2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f023 0310 	bic.w	r3, r3, #16
 8003ada:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ae8:	61fb      	str	r3, [r7, #28]
 8003aea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aec:	69b9      	ldr	r1, [r7, #24]
 8003aee:	69fa      	ldr	r2, [r7, #28]
 8003af0:	e841 2300 	strex	r3, r2, [r1]
 8003af4:	617b      	str	r3, [r7, #20]
   return(result);
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1e4      	bne.n	8003ac6 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2202      	movs	r2, #2
 8003b00:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b06:	4619      	mov	r1, r3
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f7fd fbdb 	bl	80012c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b0e:	e03f      	b.n	8003b90 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00e      	beq.n	8003b3a <HAL_UART_IRQHandler+0x56a>
 8003b1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d008      	beq.n	8003b3a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003b30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 fe00 	bl	8004738 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b38:	e02d      	b.n	8003b96 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00e      	beq.n	8003b64 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d008      	beq.n	8003b64 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d01c      	beq.n	8003b94 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	4798      	blx	r3
    }
    return;
 8003b62:	e017      	b.n	8003b94 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d012      	beq.n	8003b96 <HAL_UART_IRQHandler+0x5c6>
 8003b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00c      	beq.n	8003b96 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 fd4a 	bl	8004616 <UART_EndTransmit_IT>
    return;
 8003b82:	e008      	b.n	8003b96 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003b84:	bf00      	nop
 8003b86:	e006      	b.n	8003b96 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003b88:	bf00      	nop
 8003b8a:	e004      	b.n	8003b96 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003b8c:	bf00      	nop
 8003b8e:	e002      	b.n	8003b96 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003b90:	bf00      	nop
 8003b92:	e000      	b.n	8003b96 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003b94:	bf00      	nop
  }

}
 8003b96:	37e8      	adds	r7, #232	@ 0xe8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b088      	sub	sp, #32
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003be0:	2300      	movs	r3, #0
 8003be2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	431a      	orrs	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	4b8a      	ldr	r3, [pc, #552]	@ (8003e2c <UART_SetConfig+0x254>)
 8003c04:	4013      	ands	r3, r2
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6812      	ldr	r2, [r2, #0]
 8003c0a:	6979      	ldr	r1, [r7, #20]
 8003c0c:	430b      	orrs	r3, r1
 8003c0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68da      	ldr	r2, [r3, #12]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a78      	ldr	r2, [pc, #480]	@ (8003e30 <UART_SetConfig+0x258>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d120      	bne.n	8003c96 <UART_SetConfig+0xbe>
 8003c54:	4b77      	ldr	r3, [pc, #476]	@ (8003e34 <UART_SetConfig+0x25c>)
 8003c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c58:	f003 0303 	and.w	r3, r3, #3
 8003c5c:	2b03      	cmp	r3, #3
 8003c5e:	d817      	bhi.n	8003c90 <UART_SetConfig+0xb8>
 8003c60:	a201      	add	r2, pc, #4	@ (adr r2, 8003c68 <UART_SetConfig+0x90>)
 8003c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c66:	bf00      	nop
 8003c68:	08003c79 	.word	0x08003c79
 8003c6c:	08003c85 	.word	0x08003c85
 8003c70:	08003c8b 	.word	0x08003c8b
 8003c74:	08003c7f 	.word	0x08003c7f
 8003c78:	2300      	movs	r3, #0
 8003c7a:	77fb      	strb	r3, [r7, #31]
 8003c7c:	e01d      	b.n	8003cba <UART_SetConfig+0xe2>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	77fb      	strb	r3, [r7, #31]
 8003c82:	e01a      	b.n	8003cba <UART_SetConfig+0xe2>
 8003c84:	2304      	movs	r3, #4
 8003c86:	77fb      	strb	r3, [r7, #31]
 8003c88:	e017      	b.n	8003cba <UART_SetConfig+0xe2>
 8003c8a:	2308      	movs	r3, #8
 8003c8c:	77fb      	strb	r3, [r7, #31]
 8003c8e:	e014      	b.n	8003cba <UART_SetConfig+0xe2>
 8003c90:	2310      	movs	r3, #16
 8003c92:	77fb      	strb	r3, [r7, #31]
 8003c94:	e011      	b.n	8003cba <UART_SetConfig+0xe2>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a67      	ldr	r2, [pc, #412]	@ (8003e38 <UART_SetConfig+0x260>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d102      	bne.n	8003ca6 <UART_SetConfig+0xce>
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	77fb      	strb	r3, [r7, #31]
 8003ca4:	e009      	b.n	8003cba <UART_SetConfig+0xe2>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a64      	ldr	r2, [pc, #400]	@ (8003e3c <UART_SetConfig+0x264>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d102      	bne.n	8003cb6 <UART_SetConfig+0xde>
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	77fb      	strb	r3, [r7, #31]
 8003cb4:	e001      	b.n	8003cba <UART_SetConfig+0xe2>
 8003cb6:	2310      	movs	r3, #16
 8003cb8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cc2:	d15a      	bne.n	8003d7a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003cc4:	7ffb      	ldrb	r3, [r7, #31]
 8003cc6:	2b08      	cmp	r3, #8
 8003cc8:	d827      	bhi.n	8003d1a <UART_SetConfig+0x142>
 8003cca:	a201      	add	r2, pc, #4	@ (adr r2, 8003cd0 <UART_SetConfig+0xf8>)
 8003ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd0:	08003cf5 	.word	0x08003cf5
 8003cd4:	08003cfd 	.word	0x08003cfd
 8003cd8:	08003d05 	.word	0x08003d05
 8003cdc:	08003d1b 	.word	0x08003d1b
 8003ce0:	08003d0b 	.word	0x08003d0b
 8003ce4:	08003d1b 	.word	0x08003d1b
 8003ce8:	08003d1b 	.word	0x08003d1b
 8003cec:	08003d1b 	.word	0x08003d1b
 8003cf0:	08003d13 	.word	0x08003d13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cf4:	f7ff fa7a 	bl	80031ec <HAL_RCC_GetPCLK1Freq>
 8003cf8:	61b8      	str	r0, [r7, #24]
        break;
 8003cfa:	e013      	b.n	8003d24 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cfc:	f7ff fa98 	bl	8003230 <HAL_RCC_GetPCLK2Freq>
 8003d00:	61b8      	str	r0, [r7, #24]
        break;
 8003d02:	e00f      	b.n	8003d24 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d04:	4b4e      	ldr	r3, [pc, #312]	@ (8003e40 <UART_SetConfig+0x268>)
 8003d06:	61bb      	str	r3, [r7, #24]
        break;
 8003d08:	e00c      	b.n	8003d24 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d0a:	f7ff fa0f 	bl	800312c <HAL_RCC_GetSysClockFreq>
 8003d0e:	61b8      	str	r0, [r7, #24]
        break;
 8003d10:	e008      	b.n	8003d24 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d16:	61bb      	str	r3, [r7, #24]
        break;
 8003d18:	e004      	b.n	8003d24 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	77bb      	strb	r3, [r7, #30]
        break;
 8003d22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d074      	beq.n	8003e14 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	005a      	lsls	r2, r3, #1
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	085b      	lsrs	r3, r3, #1
 8003d34:	441a      	add	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	2b0f      	cmp	r3, #15
 8003d44:	d916      	bls.n	8003d74 <UART_SetConfig+0x19c>
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d4c:	d212      	bcs.n	8003d74 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	f023 030f 	bic.w	r3, r3, #15
 8003d56:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	085b      	lsrs	r3, r3, #1
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	f003 0307 	and.w	r3, r3, #7
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	89fb      	ldrh	r3, [r7, #14]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	89fa      	ldrh	r2, [r7, #14]
 8003d70:	60da      	str	r2, [r3, #12]
 8003d72:	e04f      	b.n	8003e14 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	77bb      	strb	r3, [r7, #30]
 8003d78:	e04c      	b.n	8003e14 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d7a:	7ffb      	ldrb	r3, [r7, #31]
 8003d7c:	2b08      	cmp	r3, #8
 8003d7e:	d828      	bhi.n	8003dd2 <UART_SetConfig+0x1fa>
 8003d80:	a201      	add	r2, pc, #4	@ (adr r2, 8003d88 <UART_SetConfig+0x1b0>)
 8003d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d86:	bf00      	nop
 8003d88:	08003dad 	.word	0x08003dad
 8003d8c:	08003db5 	.word	0x08003db5
 8003d90:	08003dbd 	.word	0x08003dbd
 8003d94:	08003dd3 	.word	0x08003dd3
 8003d98:	08003dc3 	.word	0x08003dc3
 8003d9c:	08003dd3 	.word	0x08003dd3
 8003da0:	08003dd3 	.word	0x08003dd3
 8003da4:	08003dd3 	.word	0x08003dd3
 8003da8:	08003dcb 	.word	0x08003dcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dac:	f7ff fa1e 	bl	80031ec <HAL_RCC_GetPCLK1Freq>
 8003db0:	61b8      	str	r0, [r7, #24]
        break;
 8003db2:	e013      	b.n	8003ddc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003db4:	f7ff fa3c 	bl	8003230 <HAL_RCC_GetPCLK2Freq>
 8003db8:	61b8      	str	r0, [r7, #24]
        break;
 8003dba:	e00f      	b.n	8003ddc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dbc:	4b20      	ldr	r3, [pc, #128]	@ (8003e40 <UART_SetConfig+0x268>)
 8003dbe:	61bb      	str	r3, [r7, #24]
        break;
 8003dc0:	e00c      	b.n	8003ddc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dc2:	f7ff f9b3 	bl	800312c <HAL_RCC_GetSysClockFreq>
 8003dc6:	61b8      	str	r0, [r7, #24]
        break;
 8003dc8:	e008      	b.n	8003ddc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dce:	61bb      	str	r3, [r7, #24]
        break;
 8003dd0:	e004      	b.n	8003ddc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	77bb      	strb	r3, [r7, #30]
        break;
 8003dda:	bf00      	nop
    }

    if (pclk != 0U)
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d018      	beq.n	8003e14 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	085a      	lsrs	r2, r3, #1
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	441a      	add	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	2b0f      	cmp	r3, #15
 8003dfa:	d909      	bls.n	8003e10 <UART_SetConfig+0x238>
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e02:	d205      	bcs.n	8003e10 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	60da      	str	r2, [r3, #12]
 8003e0e:	e001      	b.n	8003e14 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003e20:	7fbb      	ldrb	r3, [r7, #30]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3720      	adds	r7, #32
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	efff69f3 	.word	0xefff69f3
 8003e30:	40013800 	.word	0x40013800
 8003e34:	40021000 	.word	0x40021000
 8003e38:	40004400 	.word	0x40004400
 8003e3c:	40004800 	.word	0x40004800
 8003e40:	007a1200 	.word	0x007a1200

08003e44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e50:	f003 0308 	and.w	r3, r3, #8
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00a      	beq.n	8003e6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00a      	beq.n	8003e90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00a      	beq.n	8003eb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb6:	f003 0304 	and.w	r3, r3, #4
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00a      	beq.n	8003ed4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed8:	f003 0310 	and.w	r3, r3, #16
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00a      	beq.n	8003ef6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efa:	f003 0320 	and.w	r3, r3, #32
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	430a      	orrs	r2, r1
 8003f16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d01a      	beq.n	8003f5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f42:	d10a      	bne.n	8003f5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00a      	beq.n	8003f7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	605a      	str	r2, [r3, #4]
  }
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b098      	sub	sp, #96	@ 0x60
 8003f8c:	af02      	add	r7, sp, #8
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f98:	f7fd fa6e 	bl	8001478 <HAL_GetTick>
 8003f9c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0308 	and.w	r3, r3, #8
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	d12e      	bne.n	800400a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f88c 	bl	80040d8 <UART_WaitOnFlagUntilTimeout>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d021      	beq.n	800400a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fce:	e853 3f00 	ldrex	r3, [r3]
 8003fd2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fda:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fe4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fe6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003fea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fec:	e841 2300 	strex	r3, r2, [r1]
 8003ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ff2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1e6      	bne.n	8003fc6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e062      	b.n	80040d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b04      	cmp	r3, #4
 8004016:	d149      	bne.n	80040ac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004018:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004020:	2200      	movs	r2, #0
 8004022:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f856 	bl	80040d8 <UART_WaitOnFlagUntilTimeout>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d03c      	beq.n	80040ac <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403a:	e853 3f00 	ldrex	r3, [r3]
 800403e:	623b      	str	r3, [r7, #32]
   return(result);
 8004040:	6a3b      	ldr	r3, [r7, #32]
 8004042:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004046:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	461a      	mov	r2, r3
 800404e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004050:	633b      	str	r3, [r7, #48]	@ 0x30
 8004052:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004054:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004056:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004058:	e841 2300 	strex	r3, r2, [r1]
 800405c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800405e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1e6      	bne.n	8004032 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	3308      	adds	r3, #8
 800406a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	e853 3f00 	ldrex	r3, [r3]
 8004072:	60fb      	str	r3, [r7, #12]
   return(result);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f023 0301 	bic.w	r3, r3, #1
 800407a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	3308      	adds	r3, #8
 8004082:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004084:	61fa      	str	r2, [r7, #28]
 8004086:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004088:	69b9      	ldr	r1, [r7, #24]
 800408a:	69fa      	ldr	r2, [r7, #28]
 800408c:	e841 2300 	strex	r3, r2, [r1]
 8004090:	617b      	str	r3, [r7, #20]
   return(result);
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1e5      	bne.n	8004064 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2220      	movs	r2, #32
 800409c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e011      	b.n	80040d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2220      	movs	r2, #32
 80040b0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2220      	movs	r2, #32
 80040b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3758      	adds	r7, #88	@ 0x58
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	603b      	str	r3, [r7, #0]
 80040e4:	4613      	mov	r3, r2
 80040e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040e8:	e04f      	b.n	800418a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f0:	d04b      	beq.n	800418a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040f2:	f7fd f9c1 	bl	8001478 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d302      	bcc.n	8004108 <UART_WaitOnFlagUntilTimeout+0x30>
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d101      	bne.n	800410c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e04e      	b.n	80041aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0304 	and.w	r3, r3, #4
 8004116:	2b00      	cmp	r3, #0
 8004118:	d037      	beq.n	800418a <UART_WaitOnFlagUntilTimeout+0xb2>
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	2b80      	cmp	r3, #128	@ 0x80
 800411e:	d034      	beq.n	800418a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	2b40      	cmp	r3, #64	@ 0x40
 8004124:	d031      	beq.n	800418a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	69db      	ldr	r3, [r3, #28]
 800412c:	f003 0308 	and.w	r3, r3, #8
 8004130:	2b08      	cmp	r3, #8
 8004132:	d110      	bne.n	8004156 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2208      	movs	r2, #8
 800413a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f000 f8ff 	bl	8004340 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2208      	movs	r2, #8
 8004146:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e029      	b.n	80041aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	69db      	ldr	r3, [r3, #28]
 800415c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004160:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004164:	d111      	bne.n	800418a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800416e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 f8e5 	bl	8004340 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2220      	movs	r2, #32
 800417a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e00f      	b.n	80041aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	69da      	ldr	r2, [r3, #28]
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	4013      	ands	r3, r2
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	429a      	cmp	r2, r3
 8004198:	bf0c      	ite	eq
 800419a:	2301      	moveq	r3, #1
 800419c:	2300      	movne	r3, #0
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	461a      	mov	r2, r3
 80041a2:	79fb      	ldrb	r3, [r7, #7]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d0a0      	beq.n	80040ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
	...

080041b4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b096      	sub	sp, #88	@ 0x58
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	4613      	mov	r3, r2
 80041c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	88fa      	ldrh	r2, [r7, #6]
 80041cc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2222      	movs	r2, #34	@ 0x22
 80041dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d028      	beq.n	800423a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041ec:	4a3e      	ldr	r2, [pc, #248]	@ (80042e8 <UART_Start_Receive_DMA+0x134>)
 80041ee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041f4:	4a3d      	ldr	r2, [pc, #244]	@ (80042ec <UART_Start_Receive_DMA+0x138>)
 80041f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041fc:	4a3c      	ldr	r2, [pc, #240]	@ (80042f0 <UART_Start_Receive_DMA+0x13c>)
 80041fe:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004204:	2200      	movs	r2, #0
 8004206:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	3324      	adds	r3, #36	@ 0x24
 8004212:	4619      	mov	r1, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004218:	461a      	mov	r2, r3
 800421a:	88fb      	ldrh	r3, [r7, #6]
 800421c:	f7fd fab4 	bl	8001788 <HAL_DMA_Start_IT>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d009      	beq.n	800423a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2210      	movs	r2, #16
 800422a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2220      	movs	r2, #32
 8004232:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e051      	b.n	80042de <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d018      	beq.n	8004274 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004248:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800424a:	e853 3f00 	ldrex	r3, [r3]
 800424e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004252:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004256:	657b      	str	r3, [r7, #84]	@ 0x54
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	461a      	mov	r2, r3
 800425e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004260:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004262:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004264:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004266:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004268:	e841 2300 	strex	r3, r2, [r1]
 800426c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800426e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1e6      	bne.n	8004242 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3308      	adds	r3, #8
 800427a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800427e:	e853 3f00 	ldrex	r3, [r3]
 8004282:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004286:	f043 0301 	orr.w	r3, r3, #1
 800428a:	653b      	str	r3, [r7, #80]	@ 0x50
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	3308      	adds	r3, #8
 8004292:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004294:	637a      	str	r2, [r7, #52]	@ 0x34
 8004296:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004298:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800429a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800429c:	e841 2300 	strex	r3, r2, [r1]
 80042a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80042a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1e5      	bne.n	8004274 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	3308      	adds	r3, #8
 80042ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	e853 3f00 	ldrex	r3, [r3]
 80042b6:	613b      	str	r3, [r7, #16]
   return(result);
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	3308      	adds	r3, #8
 80042c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042c8:	623a      	str	r2, [r7, #32]
 80042ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042cc:	69f9      	ldr	r1, [r7, #28]
 80042ce:	6a3a      	ldr	r2, [r7, #32]
 80042d0:	e841 2300 	strex	r3, r2, [r1]
 80042d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1e5      	bne.n	80042a8 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3758      	adds	r7, #88	@ 0x58
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	08004409 	.word	0x08004409
 80042ec:	0800452f 	.word	0x0800452f
 80042f0:	0800456d 	.word	0x0800456d

080042f4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b089      	sub	sp, #36	@ 0x24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	e853 3f00 	ldrex	r3, [r3]
 8004308:	60bb      	str	r3, [r7, #8]
   return(result);
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004310:	61fb      	str	r3, [r7, #28]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	461a      	mov	r2, r3
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	61bb      	str	r3, [r7, #24]
 800431c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431e:	6979      	ldr	r1, [r7, #20]
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	e841 2300 	strex	r3, r2, [r1]
 8004326:	613b      	str	r3, [r7, #16]
   return(result);
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1e6      	bne.n	80042fc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2220      	movs	r2, #32
 8004332:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004334:	bf00      	nop
 8004336:	3724      	adds	r7, #36	@ 0x24
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004340:	b480      	push	{r7}
 8004342:	b095      	sub	sp, #84	@ 0x54
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004350:	e853 3f00 	ldrex	r3, [r3]
 8004354:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004358:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800435c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	461a      	mov	r2, r3
 8004364:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004366:	643b      	str	r3, [r7, #64]	@ 0x40
 8004368:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800436c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800436e:	e841 2300 	strex	r3, r2, [r1]
 8004372:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1e6      	bne.n	8004348 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	3308      	adds	r3, #8
 8004380:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004382:	6a3b      	ldr	r3, [r7, #32]
 8004384:	e853 3f00 	ldrex	r3, [r3]
 8004388:	61fb      	str	r3, [r7, #28]
   return(result);
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	f023 0301 	bic.w	r3, r3, #1
 8004390:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	3308      	adds	r3, #8
 8004398:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800439a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800439c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043a2:	e841 2300 	strex	r3, r2, [r1]
 80043a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1e5      	bne.n	800437a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d118      	bne.n	80043e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	e853 3f00 	ldrex	r3, [r3]
 80043c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	f023 0310 	bic.w	r3, r3, #16
 80043ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	461a      	mov	r2, r3
 80043d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043d4:	61bb      	str	r3, [r7, #24]
 80043d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d8:	6979      	ldr	r1, [r7, #20]
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	e841 2300 	strex	r3, r2, [r1]
 80043e0:	613b      	str	r3, [r7, #16]
   return(result);
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1e6      	bne.n	80043b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80043fc:	bf00      	nop
 80043fe:	3754      	adds	r7, #84	@ 0x54
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b09c      	sub	sp, #112	@ 0x70
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004414:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	2b20      	cmp	r3, #32
 800441c:	d071      	beq.n	8004502 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800441e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004420:	2200      	movs	r2, #0
 8004422:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004426:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800442e:	e853 3f00 	ldrex	r3, [r3]
 8004432:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004434:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004436:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800443a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800443c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	461a      	mov	r2, r3
 8004442:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004444:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004446:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004448:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800444a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800444c:	e841 2300 	strex	r3, r2, [r1]
 8004450:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004452:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1e6      	bne.n	8004426 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004458:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	3308      	adds	r3, #8
 800445e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004462:	e853 3f00 	ldrex	r3, [r3]
 8004466:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800446a:	f023 0301 	bic.w	r3, r3, #1
 800446e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004470:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	3308      	adds	r3, #8
 8004476:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004478:	647a      	str	r2, [r7, #68]	@ 0x44
 800447a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800447e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004480:	e841 2300 	strex	r3, r2, [r1]
 8004484:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004486:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1e5      	bne.n	8004458 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800448c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	3308      	adds	r3, #8
 8004492:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004496:	e853 3f00 	ldrex	r3, [r3]
 800449a:	623b      	str	r3, [r7, #32]
   return(result);
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80044a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	3308      	adds	r3, #8
 80044aa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80044ac:	633a      	str	r2, [r7, #48]	@ 0x30
 80044ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044b4:	e841 2300 	strex	r3, r2, [r1]
 80044b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1e5      	bne.n	800448c <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80044c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044c2:	2220      	movs	r2, #32
 80044c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d118      	bne.n	8004502 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	e853 3f00 	ldrex	r3, [r3]
 80044dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f023 0310 	bic.w	r3, r3, #16
 80044e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	461a      	mov	r2, r3
 80044ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044ee:	61fb      	str	r3, [r7, #28]
 80044f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f2:	69b9      	ldr	r1, [r7, #24]
 80044f4:	69fa      	ldr	r2, [r7, #28]
 80044f6:	e841 2300 	strex	r3, r2, [r1]
 80044fa:	617b      	str	r3, [r7, #20]
   return(result);
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1e6      	bne.n	80044d0 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004502:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004504:	2200      	movs	r2, #0
 8004506:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004508:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800450a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800450c:	2b01      	cmp	r3, #1
 800450e:	d107      	bne.n	8004520 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004510:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004512:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004516:	4619      	mov	r1, r3
 8004518:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800451a:	f7fc fed3 	bl	80012c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800451e:	e002      	b.n	8004526 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004520:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004522:	f7ff fb45 	bl	8003bb0 <HAL_UART_RxCpltCallback>
}
 8004526:	bf00      	nop
 8004528:	3770      	adds	r7, #112	@ 0x70
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b084      	sub	sp, #16
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800453a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2201      	movs	r2, #1
 8004540:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004546:	2b01      	cmp	r3, #1
 8004548:	d109      	bne.n	800455e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004550:	085b      	lsrs	r3, r3, #1
 8004552:	b29b      	uxth	r3, r3
 8004554:	4619      	mov	r1, r3
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f7fc feb4 	bl	80012c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800455c:	e002      	b.n	8004564 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f7ff fb30 	bl	8003bc4 <HAL_UART_RxHalfCpltCallback>
}
 8004564:	bf00      	nop
 8004566:	3710      	adds	r7, #16
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004578:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800457e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004586:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004592:	2b80      	cmp	r3, #128	@ 0x80
 8004594:	d109      	bne.n	80045aa <UART_DMAError+0x3e>
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	2b21      	cmp	r3, #33	@ 0x21
 800459a:	d106      	bne.n	80045aa <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	2200      	movs	r2, #0
 80045a0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80045a4:	6978      	ldr	r0, [r7, #20]
 80045a6:	f7ff fea5 	bl	80042f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b4:	2b40      	cmp	r3, #64	@ 0x40
 80045b6:	d109      	bne.n	80045cc <UART_DMAError+0x60>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2b22      	cmp	r3, #34	@ 0x22
 80045bc:	d106      	bne.n	80045cc <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80045c6:	6978      	ldr	r0, [r7, #20]
 80045c8:	f7ff feba 	bl	8004340 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045d2:	f043 0210 	orr.w	r2, r3, #16
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045dc:	6978      	ldr	r0, [r7, #20]
 80045de:	f7fc fea5 	bl	800132c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045e2:	bf00      	nop
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b084      	sub	sp, #16
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f7fc fe8f 	bl	800132c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800460e:	bf00      	nop
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b088      	sub	sp, #32
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	e853 3f00 	ldrex	r3, [r3]
 800462a:	60bb      	str	r3, [r7, #8]
   return(result);
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004632:	61fb      	str	r3, [r7, #28]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	461a      	mov	r2, r3
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	61bb      	str	r3, [r7, #24]
 800463e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004640:	6979      	ldr	r1, [r7, #20]
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	e841 2300 	strex	r3, r2, [r1]
 8004648:	613b      	str	r3, [r7, #16]
   return(result);
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1e6      	bne.n	800461e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2220      	movs	r2, #32
 8004654:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f7ff fa9d 	bl	8003b9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004662:	bf00      	nop
 8004664:	3720      	adds	r7, #32
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b086      	sub	sp, #24
 800466e:	af00      	add	r7, sp, #0
 8004670:	60f8      	str	r0, [r7, #12]
 8004672:	60b9      	str	r1, [r7, #8]
 8004674:	607a      	str	r2, [r7, #4]
 8004676:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e056      	b.n	8004730 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004686:	2b00      	cmp	r3, #0
 8004688:	d106      	bne.n	8004698 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f7fc fd0e 	bl	80010b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2224      	movs	r2, #36	@ 0x24
 800469c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 0201 	bic.w	r2, r2, #1
 80046ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d002      	beq.n	80046bc <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f7ff fbc4 	bl	8003e44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f7ff fa8b 	bl	8003bd8 <UART_SetConfig>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d101      	bne.n	80046cc <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e031      	b.n	8004730 <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689a      	ldr	r2, [r3, #8]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80046da:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	055b      	lsls	r3, r3, #21
 80046f4:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	041b      	lsls	r3, r3, #16
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 800470a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	6812      	ldr	r2, [r2, #0]
 8004712:	6979      	ldr	r1, [r7, #20]
 8004714:	430b      	orrs	r3, r1
 8004716:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f042 0201 	orr.w	r2, r2, #1
 8004726:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f7ff fc2d 	bl	8003f88 <UART_CheckIdleState>
 800472e:	4603      	mov	r3, r0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3718      	adds	r7, #24
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b08c      	sub	sp, #48	@ 0x30
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	4613      	mov	r3, r2
 8004758:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004760:	2b20      	cmp	r3, #32
 8004762:	d142      	bne.n	80047ea <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d002      	beq.n	8004770 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800476a:	88fb      	ldrh	r3, [r7, #6]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e03b      	b.n	80047ec <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2201      	movs	r2, #1
 8004778:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004780:	88fb      	ldrh	r3, [r7, #6]
 8004782:	461a      	mov	r2, r3
 8004784:	68b9      	ldr	r1, [r7, #8]
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f7ff fd14 	bl	80041b4 <UART_Start_Receive_DMA>
 800478c:	4603      	mov	r3, r0
 800478e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004792:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004796:	2b00      	cmp	r3, #0
 8004798:	d124      	bne.n	80047e4 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d11d      	bne.n	80047de <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2210      	movs	r2, #16
 80047a8:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	e853 3f00 	ldrex	r3, [r3]
 80047b6:	617b      	str	r3, [r7, #20]
   return(result);
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	f043 0310 	orr.w	r3, r3, #16
 80047be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	461a      	mov	r2, r3
 80047c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80047ca:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047cc:	6a39      	ldr	r1, [r7, #32]
 80047ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047d0:	e841 2300 	strex	r3, r2, [r1]
 80047d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1e6      	bne.n	80047aa <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80047dc:	e002      	b.n	80047e4 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80047e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80047e8:	e000      	b.n	80047ec <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80047ea:	2302      	movs	r3, #2
  }
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3730      	adds	r7, #48	@ 0x30
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <std>:
 80047f4:	2300      	movs	r3, #0
 80047f6:	b510      	push	{r4, lr}
 80047f8:	4604      	mov	r4, r0
 80047fa:	e9c0 3300 	strd	r3, r3, [r0]
 80047fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004802:	6083      	str	r3, [r0, #8]
 8004804:	8181      	strh	r1, [r0, #12]
 8004806:	6643      	str	r3, [r0, #100]	@ 0x64
 8004808:	81c2      	strh	r2, [r0, #14]
 800480a:	6183      	str	r3, [r0, #24]
 800480c:	4619      	mov	r1, r3
 800480e:	2208      	movs	r2, #8
 8004810:	305c      	adds	r0, #92	@ 0x5c
 8004812:	f000 f8f4 	bl	80049fe <memset>
 8004816:	4b0d      	ldr	r3, [pc, #52]	@ (800484c <std+0x58>)
 8004818:	6263      	str	r3, [r4, #36]	@ 0x24
 800481a:	4b0d      	ldr	r3, [pc, #52]	@ (8004850 <std+0x5c>)
 800481c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800481e:	4b0d      	ldr	r3, [pc, #52]	@ (8004854 <std+0x60>)
 8004820:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004822:	4b0d      	ldr	r3, [pc, #52]	@ (8004858 <std+0x64>)
 8004824:	6323      	str	r3, [r4, #48]	@ 0x30
 8004826:	4b0d      	ldr	r3, [pc, #52]	@ (800485c <std+0x68>)
 8004828:	6224      	str	r4, [r4, #32]
 800482a:	429c      	cmp	r4, r3
 800482c:	d006      	beq.n	800483c <std+0x48>
 800482e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004832:	4294      	cmp	r4, r2
 8004834:	d002      	beq.n	800483c <std+0x48>
 8004836:	33d0      	adds	r3, #208	@ 0xd0
 8004838:	429c      	cmp	r4, r3
 800483a:	d105      	bne.n	8004848 <std+0x54>
 800483c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004844:	f000 b954 	b.w	8004af0 <__retarget_lock_init_recursive>
 8004848:	bd10      	pop	{r4, pc}
 800484a:	bf00      	nop
 800484c:	08004979 	.word	0x08004979
 8004850:	0800499b 	.word	0x0800499b
 8004854:	080049d3 	.word	0x080049d3
 8004858:	080049f7 	.word	0x080049f7
 800485c:	2000043c 	.word	0x2000043c

08004860 <stdio_exit_handler>:
 8004860:	4a02      	ldr	r2, [pc, #8]	@ (800486c <stdio_exit_handler+0xc>)
 8004862:	4903      	ldr	r1, [pc, #12]	@ (8004870 <stdio_exit_handler+0x10>)
 8004864:	4803      	ldr	r0, [pc, #12]	@ (8004874 <stdio_exit_handler+0x14>)
 8004866:	f000 b869 	b.w	800493c <_fwalk_sglue>
 800486a:	bf00      	nop
 800486c:	20000034 	.word	0x20000034
 8004870:	08004cc9 	.word	0x08004cc9
 8004874:	20000044 	.word	0x20000044

08004878 <cleanup_stdio>:
 8004878:	6841      	ldr	r1, [r0, #4]
 800487a:	4b0c      	ldr	r3, [pc, #48]	@ (80048ac <cleanup_stdio+0x34>)
 800487c:	4299      	cmp	r1, r3
 800487e:	b510      	push	{r4, lr}
 8004880:	4604      	mov	r4, r0
 8004882:	d001      	beq.n	8004888 <cleanup_stdio+0x10>
 8004884:	f000 fa20 	bl	8004cc8 <_fflush_r>
 8004888:	68a1      	ldr	r1, [r4, #8]
 800488a:	4b09      	ldr	r3, [pc, #36]	@ (80048b0 <cleanup_stdio+0x38>)
 800488c:	4299      	cmp	r1, r3
 800488e:	d002      	beq.n	8004896 <cleanup_stdio+0x1e>
 8004890:	4620      	mov	r0, r4
 8004892:	f000 fa19 	bl	8004cc8 <_fflush_r>
 8004896:	68e1      	ldr	r1, [r4, #12]
 8004898:	4b06      	ldr	r3, [pc, #24]	@ (80048b4 <cleanup_stdio+0x3c>)
 800489a:	4299      	cmp	r1, r3
 800489c:	d004      	beq.n	80048a8 <cleanup_stdio+0x30>
 800489e:	4620      	mov	r0, r4
 80048a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048a4:	f000 ba10 	b.w	8004cc8 <_fflush_r>
 80048a8:	bd10      	pop	{r4, pc}
 80048aa:	bf00      	nop
 80048ac:	2000043c 	.word	0x2000043c
 80048b0:	200004a4 	.word	0x200004a4
 80048b4:	2000050c 	.word	0x2000050c

080048b8 <global_stdio_init.part.0>:
 80048b8:	b510      	push	{r4, lr}
 80048ba:	4b0b      	ldr	r3, [pc, #44]	@ (80048e8 <global_stdio_init.part.0+0x30>)
 80048bc:	4c0b      	ldr	r4, [pc, #44]	@ (80048ec <global_stdio_init.part.0+0x34>)
 80048be:	4a0c      	ldr	r2, [pc, #48]	@ (80048f0 <global_stdio_init.part.0+0x38>)
 80048c0:	601a      	str	r2, [r3, #0]
 80048c2:	4620      	mov	r0, r4
 80048c4:	2200      	movs	r2, #0
 80048c6:	2104      	movs	r1, #4
 80048c8:	f7ff ff94 	bl	80047f4 <std>
 80048cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80048d0:	2201      	movs	r2, #1
 80048d2:	2109      	movs	r1, #9
 80048d4:	f7ff ff8e 	bl	80047f4 <std>
 80048d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80048dc:	2202      	movs	r2, #2
 80048de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048e2:	2112      	movs	r1, #18
 80048e4:	f7ff bf86 	b.w	80047f4 <std>
 80048e8:	20000574 	.word	0x20000574
 80048ec:	2000043c 	.word	0x2000043c
 80048f0:	08004861 	.word	0x08004861

080048f4 <__sfp_lock_acquire>:
 80048f4:	4801      	ldr	r0, [pc, #4]	@ (80048fc <__sfp_lock_acquire+0x8>)
 80048f6:	f000 b8fc 	b.w	8004af2 <__retarget_lock_acquire_recursive>
 80048fa:	bf00      	nop
 80048fc:	2000057d 	.word	0x2000057d

08004900 <__sfp_lock_release>:
 8004900:	4801      	ldr	r0, [pc, #4]	@ (8004908 <__sfp_lock_release+0x8>)
 8004902:	f000 b8f7 	b.w	8004af4 <__retarget_lock_release_recursive>
 8004906:	bf00      	nop
 8004908:	2000057d 	.word	0x2000057d

0800490c <__sinit>:
 800490c:	b510      	push	{r4, lr}
 800490e:	4604      	mov	r4, r0
 8004910:	f7ff fff0 	bl	80048f4 <__sfp_lock_acquire>
 8004914:	6a23      	ldr	r3, [r4, #32]
 8004916:	b11b      	cbz	r3, 8004920 <__sinit+0x14>
 8004918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800491c:	f7ff bff0 	b.w	8004900 <__sfp_lock_release>
 8004920:	4b04      	ldr	r3, [pc, #16]	@ (8004934 <__sinit+0x28>)
 8004922:	6223      	str	r3, [r4, #32]
 8004924:	4b04      	ldr	r3, [pc, #16]	@ (8004938 <__sinit+0x2c>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1f5      	bne.n	8004918 <__sinit+0xc>
 800492c:	f7ff ffc4 	bl	80048b8 <global_stdio_init.part.0>
 8004930:	e7f2      	b.n	8004918 <__sinit+0xc>
 8004932:	bf00      	nop
 8004934:	08004879 	.word	0x08004879
 8004938:	20000574 	.word	0x20000574

0800493c <_fwalk_sglue>:
 800493c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004940:	4607      	mov	r7, r0
 8004942:	4688      	mov	r8, r1
 8004944:	4614      	mov	r4, r2
 8004946:	2600      	movs	r6, #0
 8004948:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800494c:	f1b9 0901 	subs.w	r9, r9, #1
 8004950:	d505      	bpl.n	800495e <_fwalk_sglue+0x22>
 8004952:	6824      	ldr	r4, [r4, #0]
 8004954:	2c00      	cmp	r4, #0
 8004956:	d1f7      	bne.n	8004948 <_fwalk_sglue+0xc>
 8004958:	4630      	mov	r0, r6
 800495a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800495e:	89ab      	ldrh	r3, [r5, #12]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d907      	bls.n	8004974 <_fwalk_sglue+0x38>
 8004964:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004968:	3301      	adds	r3, #1
 800496a:	d003      	beq.n	8004974 <_fwalk_sglue+0x38>
 800496c:	4629      	mov	r1, r5
 800496e:	4638      	mov	r0, r7
 8004970:	47c0      	blx	r8
 8004972:	4306      	orrs	r6, r0
 8004974:	3568      	adds	r5, #104	@ 0x68
 8004976:	e7e9      	b.n	800494c <_fwalk_sglue+0x10>

08004978 <__sread>:
 8004978:	b510      	push	{r4, lr}
 800497a:	460c      	mov	r4, r1
 800497c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004980:	f000 f868 	bl	8004a54 <_read_r>
 8004984:	2800      	cmp	r0, #0
 8004986:	bfab      	itete	ge
 8004988:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800498a:	89a3      	ldrhlt	r3, [r4, #12]
 800498c:	181b      	addge	r3, r3, r0
 800498e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004992:	bfac      	ite	ge
 8004994:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004996:	81a3      	strhlt	r3, [r4, #12]
 8004998:	bd10      	pop	{r4, pc}

0800499a <__swrite>:
 800499a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800499e:	461f      	mov	r7, r3
 80049a0:	898b      	ldrh	r3, [r1, #12]
 80049a2:	05db      	lsls	r3, r3, #23
 80049a4:	4605      	mov	r5, r0
 80049a6:	460c      	mov	r4, r1
 80049a8:	4616      	mov	r6, r2
 80049aa:	d505      	bpl.n	80049b8 <__swrite+0x1e>
 80049ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049b0:	2302      	movs	r3, #2
 80049b2:	2200      	movs	r2, #0
 80049b4:	f000 f83c 	bl	8004a30 <_lseek_r>
 80049b8:	89a3      	ldrh	r3, [r4, #12]
 80049ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80049c2:	81a3      	strh	r3, [r4, #12]
 80049c4:	4632      	mov	r2, r6
 80049c6:	463b      	mov	r3, r7
 80049c8:	4628      	mov	r0, r5
 80049ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049ce:	f000 b853 	b.w	8004a78 <_write_r>

080049d2 <__sseek>:
 80049d2:	b510      	push	{r4, lr}
 80049d4:	460c      	mov	r4, r1
 80049d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049da:	f000 f829 	bl	8004a30 <_lseek_r>
 80049de:	1c43      	adds	r3, r0, #1
 80049e0:	89a3      	ldrh	r3, [r4, #12]
 80049e2:	bf15      	itete	ne
 80049e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80049e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80049ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80049ee:	81a3      	strheq	r3, [r4, #12]
 80049f0:	bf18      	it	ne
 80049f2:	81a3      	strhne	r3, [r4, #12]
 80049f4:	bd10      	pop	{r4, pc}

080049f6 <__sclose>:
 80049f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049fa:	f000 b809 	b.w	8004a10 <_close_r>

080049fe <memset>:
 80049fe:	4402      	add	r2, r0
 8004a00:	4603      	mov	r3, r0
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d100      	bne.n	8004a08 <memset+0xa>
 8004a06:	4770      	bx	lr
 8004a08:	f803 1b01 	strb.w	r1, [r3], #1
 8004a0c:	e7f9      	b.n	8004a02 <memset+0x4>
	...

08004a10 <_close_r>:
 8004a10:	b538      	push	{r3, r4, r5, lr}
 8004a12:	4d06      	ldr	r5, [pc, #24]	@ (8004a2c <_close_r+0x1c>)
 8004a14:	2300      	movs	r3, #0
 8004a16:	4604      	mov	r4, r0
 8004a18:	4608      	mov	r0, r1
 8004a1a:	602b      	str	r3, [r5, #0]
 8004a1c:	f000 fa4e 	bl	8004ebc <_close>
 8004a20:	1c43      	adds	r3, r0, #1
 8004a22:	d102      	bne.n	8004a2a <_close_r+0x1a>
 8004a24:	682b      	ldr	r3, [r5, #0]
 8004a26:	b103      	cbz	r3, 8004a2a <_close_r+0x1a>
 8004a28:	6023      	str	r3, [r4, #0]
 8004a2a:	bd38      	pop	{r3, r4, r5, pc}
 8004a2c:	20000578 	.word	0x20000578

08004a30 <_lseek_r>:
 8004a30:	b538      	push	{r3, r4, r5, lr}
 8004a32:	4d07      	ldr	r5, [pc, #28]	@ (8004a50 <_lseek_r+0x20>)
 8004a34:	4604      	mov	r4, r0
 8004a36:	4608      	mov	r0, r1
 8004a38:	4611      	mov	r1, r2
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	602a      	str	r2, [r5, #0]
 8004a3e:	461a      	mov	r2, r3
 8004a40:	f000 f9fd 	bl	8004e3e <_lseek>
 8004a44:	1c43      	adds	r3, r0, #1
 8004a46:	d102      	bne.n	8004a4e <_lseek_r+0x1e>
 8004a48:	682b      	ldr	r3, [r5, #0]
 8004a4a:	b103      	cbz	r3, 8004a4e <_lseek_r+0x1e>
 8004a4c:	6023      	str	r3, [r4, #0]
 8004a4e:	bd38      	pop	{r3, r4, r5, pc}
 8004a50:	20000578 	.word	0x20000578

08004a54 <_read_r>:
 8004a54:	b538      	push	{r3, r4, r5, lr}
 8004a56:	4d07      	ldr	r5, [pc, #28]	@ (8004a74 <_read_r+0x20>)
 8004a58:	4604      	mov	r4, r0
 8004a5a:	4608      	mov	r0, r1
 8004a5c:	4611      	mov	r1, r2
 8004a5e:	2200      	movs	r2, #0
 8004a60:	602a      	str	r2, [r5, #0]
 8004a62:	461a      	mov	r2, r3
 8004a64:	f000 f995 	bl	8004d92 <_read>
 8004a68:	1c43      	adds	r3, r0, #1
 8004a6a:	d102      	bne.n	8004a72 <_read_r+0x1e>
 8004a6c:	682b      	ldr	r3, [r5, #0]
 8004a6e:	b103      	cbz	r3, 8004a72 <_read_r+0x1e>
 8004a70:	6023      	str	r3, [r4, #0]
 8004a72:	bd38      	pop	{r3, r4, r5, pc}
 8004a74:	20000578 	.word	0x20000578

08004a78 <_write_r>:
 8004a78:	b538      	push	{r3, r4, r5, lr}
 8004a7a:	4d07      	ldr	r5, [pc, #28]	@ (8004a98 <_write_r+0x20>)
 8004a7c:	4604      	mov	r4, r0
 8004a7e:	4608      	mov	r0, r1
 8004a80:	4611      	mov	r1, r2
 8004a82:	2200      	movs	r2, #0
 8004a84:	602a      	str	r2, [r5, #0]
 8004a86:	461a      	mov	r2, r3
 8004a88:	f000 f9eb 	bl	8004e62 <_write>
 8004a8c:	1c43      	adds	r3, r0, #1
 8004a8e:	d102      	bne.n	8004a96 <_write_r+0x1e>
 8004a90:	682b      	ldr	r3, [r5, #0]
 8004a92:	b103      	cbz	r3, 8004a96 <_write_r+0x1e>
 8004a94:	6023      	str	r3, [r4, #0]
 8004a96:	bd38      	pop	{r3, r4, r5, pc}
 8004a98:	20000578 	.word	0x20000578

08004a9c <__errno>:
 8004a9c:	4b01      	ldr	r3, [pc, #4]	@ (8004aa4 <__errno+0x8>)
 8004a9e:	6818      	ldr	r0, [r3, #0]
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	20000040 	.word	0x20000040

08004aa8 <__libc_init_array>:
 8004aa8:	b570      	push	{r4, r5, r6, lr}
 8004aaa:	4d0d      	ldr	r5, [pc, #52]	@ (8004ae0 <__libc_init_array+0x38>)
 8004aac:	4c0d      	ldr	r4, [pc, #52]	@ (8004ae4 <__libc_init_array+0x3c>)
 8004aae:	1b64      	subs	r4, r4, r5
 8004ab0:	10a4      	asrs	r4, r4, #2
 8004ab2:	2600      	movs	r6, #0
 8004ab4:	42a6      	cmp	r6, r4
 8004ab6:	d109      	bne.n	8004acc <__libc_init_array+0x24>
 8004ab8:	4d0b      	ldr	r5, [pc, #44]	@ (8004ae8 <__libc_init_array+0x40>)
 8004aba:	4c0c      	ldr	r4, [pc, #48]	@ (8004aec <__libc_init_array+0x44>)
 8004abc:	f000 fb9c 	bl	80051f8 <_init>
 8004ac0:	1b64      	subs	r4, r4, r5
 8004ac2:	10a4      	asrs	r4, r4, #2
 8004ac4:	2600      	movs	r6, #0
 8004ac6:	42a6      	cmp	r6, r4
 8004ac8:	d105      	bne.n	8004ad6 <__libc_init_array+0x2e>
 8004aca:	bd70      	pop	{r4, r5, r6, pc}
 8004acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ad0:	4798      	blx	r3
 8004ad2:	3601      	adds	r6, #1
 8004ad4:	e7ee      	b.n	8004ab4 <__libc_init_array+0xc>
 8004ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ada:	4798      	blx	r3
 8004adc:	3601      	adds	r6, #1
 8004ade:	e7f2      	b.n	8004ac6 <__libc_init_array+0x1e>
 8004ae0:	0800546c 	.word	0x0800546c
 8004ae4:	0800546c 	.word	0x0800546c
 8004ae8:	0800546c 	.word	0x0800546c
 8004aec:	08005470 	.word	0x08005470

08004af0 <__retarget_lock_init_recursive>:
 8004af0:	4770      	bx	lr

08004af2 <__retarget_lock_acquire_recursive>:
 8004af2:	4770      	bx	lr

08004af4 <__retarget_lock_release_recursive>:
 8004af4:	4770      	bx	lr

08004af6 <memcpy>:
 8004af6:	440a      	add	r2, r1
 8004af8:	4291      	cmp	r1, r2
 8004afa:	f100 33ff 	add.w	r3, r0, #4294967295
 8004afe:	d100      	bne.n	8004b02 <memcpy+0xc>
 8004b00:	4770      	bx	lr
 8004b02:	b510      	push	{r4, lr}
 8004b04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b0c:	4291      	cmp	r1, r2
 8004b0e:	d1f9      	bne.n	8004b04 <memcpy+0xe>
 8004b10:	bd10      	pop	{r4, pc}
	...

08004b14 <_free_r>:
 8004b14:	b538      	push	{r3, r4, r5, lr}
 8004b16:	4605      	mov	r5, r0
 8004b18:	2900      	cmp	r1, #0
 8004b1a:	d041      	beq.n	8004ba0 <_free_r+0x8c>
 8004b1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b20:	1f0c      	subs	r4, r1, #4
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	bfb8      	it	lt
 8004b26:	18e4      	addlt	r4, r4, r3
 8004b28:	f000 f83e 	bl	8004ba8 <__malloc_lock>
 8004b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ba4 <_free_r+0x90>)
 8004b2e:	6813      	ldr	r3, [r2, #0]
 8004b30:	b933      	cbnz	r3, 8004b40 <_free_r+0x2c>
 8004b32:	6063      	str	r3, [r4, #4]
 8004b34:	6014      	str	r4, [r2, #0]
 8004b36:	4628      	mov	r0, r5
 8004b38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b3c:	f000 b83a 	b.w	8004bb4 <__malloc_unlock>
 8004b40:	42a3      	cmp	r3, r4
 8004b42:	d908      	bls.n	8004b56 <_free_r+0x42>
 8004b44:	6820      	ldr	r0, [r4, #0]
 8004b46:	1821      	adds	r1, r4, r0
 8004b48:	428b      	cmp	r3, r1
 8004b4a:	bf01      	itttt	eq
 8004b4c:	6819      	ldreq	r1, [r3, #0]
 8004b4e:	685b      	ldreq	r3, [r3, #4]
 8004b50:	1809      	addeq	r1, r1, r0
 8004b52:	6021      	streq	r1, [r4, #0]
 8004b54:	e7ed      	b.n	8004b32 <_free_r+0x1e>
 8004b56:	461a      	mov	r2, r3
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	b10b      	cbz	r3, 8004b60 <_free_r+0x4c>
 8004b5c:	42a3      	cmp	r3, r4
 8004b5e:	d9fa      	bls.n	8004b56 <_free_r+0x42>
 8004b60:	6811      	ldr	r1, [r2, #0]
 8004b62:	1850      	adds	r0, r2, r1
 8004b64:	42a0      	cmp	r0, r4
 8004b66:	d10b      	bne.n	8004b80 <_free_r+0x6c>
 8004b68:	6820      	ldr	r0, [r4, #0]
 8004b6a:	4401      	add	r1, r0
 8004b6c:	1850      	adds	r0, r2, r1
 8004b6e:	4283      	cmp	r3, r0
 8004b70:	6011      	str	r1, [r2, #0]
 8004b72:	d1e0      	bne.n	8004b36 <_free_r+0x22>
 8004b74:	6818      	ldr	r0, [r3, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	6053      	str	r3, [r2, #4]
 8004b7a:	4408      	add	r0, r1
 8004b7c:	6010      	str	r0, [r2, #0]
 8004b7e:	e7da      	b.n	8004b36 <_free_r+0x22>
 8004b80:	d902      	bls.n	8004b88 <_free_r+0x74>
 8004b82:	230c      	movs	r3, #12
 8004b84:	602b      	str	r3, [r5, #0]
 8004b86:	e7d6      	b.n	8004b36 <_free_r+0x22>
 8004b88:	6820      	ldr	r0, [r4, #0]
 8004b8a:	1821      	adds	r1, r4, r0
 8004b8c:	428b      	cmp	r3, r1
 8004b8e:	bf04      	itt	eq
 8004b90:	6819      	ldreq	r1, [r3, #0]
 8004b92:	685b      	ldreq	r3, [r3, #4]
 8004b94:	6063      	str	r3, [r4, #4]
 8004b96:	bf04      	itt	eq
 8004b98:	1809      	addeq	r1, r1, r0
 8004b9a:	6021      	streq	r1, [r4, #0]
 8004b9c:	6054      	str	r4, [r2, #4]
 8004b9e:	e7ca      	b.n	8004b36 <_free_r+0x22>
 8004ba0:	bd38      	pop	{r3, r4, r5, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20000580 	.word	0x20000580

08004ba8 <__malloc_lock>:
 8004ba8:	4801      	ldr	r0, [pc, #4]	@ (8004bb0 <__malloc_lock+0x8>)
 8004baa:	f7ff bfa2 	b.w	8004af2 <__retarget_lock_acquire_recursive>
 8004bae:	bf00      	nop
 8004bb0:	2000057c 	.word	0x2000057c

08004bb4 <__malloc_unlock>:
 8004bb4:	4801      	ldr	r0, [pc, #4]	@ (8004bbc <__malloc_unlock+0x8>)
 8004bb6:	f7ff bf9d 	b.w	8004af4 <__retarget_lock_release_recursive>
 8004bba:	bf00      	nop
 8004bbc:	2000057c 	.word	0x2000057c

08004bc0 <__sflush_r>:
 8004bc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bc8:	0716      	lsls	r6, r2, #28
 8004bca:	4605      	mov	r5, r0
 8004bcc:	460c      	mov	r4, r1
 8004bce:	d454      	bmi.n	8004c7a <__sflush_r+0xba>
 8004bd0:	684b      	ldr	r3, [r1, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	dc02      	bgt.n	8004bdc <__sflush_r+0x1c>
 8004bd6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	dd48      	ble.n	8004c6e <__sflush_r+0xae>
 8004bdc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004bde:	2e00      	cmp	r6, #0
 8004be0:	d045      	beq.n	8004c6e <__sflush_r+0xae>
 8004be2:	2300      	movs	r3, #0
 8004be4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004be8:	682f      	ldr	r7, [r5, #0]
 8004bea:	6a21      	ldr	r1, [r4, #32]
 8004bec:	602b      	str	r3, [r5, #0]
 8004bee:	d030      	beq.n	8004c52 <__sflush_r+0x92>
 8004bf0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004bf2:	89a3      	ldrh	r3, [r4, #12]
 8004bf4:	0759      	lsls	r1, r3, #29
 8004bf6:	d505      	bpl.n	8004c04 <__sflush_r+0x44>
 8004bf8:	6863      	ldr	r3, [r4, #4]
 8004bfa:	1ad2      	subs	r2, r2, r3
 8004bfc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004bfe:	b10b      	cbz	r3, 8004c04 <__sflush_r+0x44>
 8004c00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004c02:	1ad2      	subs	r2, r2, r3
 8004c04:	2300      	movs	r3, #0
 8004c06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004c08:	6a21      	ldr	r1, [r4, #32]
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	47b0      	blx	r6
 8004c0e:	1c43      	adds	r3, r0, #1
 8004c10:	89a3      	ldrh	r3, [r4, #12]
 8004c12:	d106      	bne.n	8004c22 <__sflush_r+0x62>
 8004c14:	6829      	ldr	r1, [r5, #0]
 8004c16:	291d      	cmp	r1, #29
 8004c18:	d82b      	bhi.n	8004c72 <__sflush_r+0xb2>
 8004c1a:	4a2a      	ldr	r2, [pc, #168]	@ (8004cc4 <__sflush_r+0x104>)
 8004c1c:	40ca      	lsrs	r2, r1
 8004c1e:	07d6      	lsls	r6, r2, #31
 8004c20:	d527      	bpl.n	8004c72 <__sflush_r+0xb2>
 8004c22:	2200      	movs	r2, #0
 8004c24:	6062      	str	r2, [r4, #4]
 8004c26:	04d9      	lsls	r1, r3, #19
 8004c28:	6922      	ldr	r2, [r4, #16]
 8004c2a:	6022      	str	r2, [r4, #0]
 8004c2c:	d504      	bpl.n	8004c38 <__sflush_r+0x78>
 8004c2e:	1c42      	adds	r2, r0, #1
 8004c30:	d101      	bne.n	8004c36 <__sflush_r+0x76>
 8004c32:	682b      	ldr	r3, [r5, #0]
 8004c34:	b903      	cbnz	r3, 8004c38 <__sflush_r+0x78>
 8004c36:	6560      	str	r0, [r4, #84]	@ 0x54
 8004c38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c3a:	602f      	str	r7, [r5, #0]
 8004c3c:	b1b9      	cbz	r1, 8004c6e <__sflush_r+0xae>
 8004c3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c42:	4299      	cmp	r1, r3
 8004c44:	d002      	beq.n	8004c4c <__sflush_r+0x8c>
 8004c46:	4628      	mov	r0, r5
 8004c48:	f7ff ff64 	bl	8004b14 <_free_r>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c50:	e00d      	b.n	8004c6e <__sflush_r+0xae>
 8004c52:	2301      	movs	r3, #1
 8004c54:	4628      	mov	r0, r5
 8004c56:	47b0      	blx	r6
 8004c58:	4602      	mov	r2, r0
 8004c5a:	1c50      	adds	r0, r2, #1
 8004c5c:	d1c9      	bne.n	8004bf2 <__sflush_r+0x32>
 8004c5e:	682b      	ldr	r3, [r5, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d0c6      	beq.n	8004bf2 <__sflush_r+0x32>
 8004c64:	2b1d      	cmp	r3, #29
 8004c66:	d001      	beq.n	8004c6c <__sflush_r+0xac>
 8004c68:	2b16      	cmp	r3, #22
 8004c6a:	d11e      	bne.n	8004caa <__sflush_r+0xea>
 8004c6c:	602f      	str	r7, [r5, #0]
 8004c6e:	2000      	movs	r0, #0
 8004c70:	e022      	b.n	8004cb8 <__sflush_r+0xf8>
 8004c72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c76:	b21b      	sxth	r3, r3
 8004c78:	e01b      	b.n	8004cb2 <__sflush_r+0xf2>
 8004c7a:	690f      	ldr	r7, [r1, #16]
 8004c7c:	2f00      	cmp	r7, #0
 8004c7e:	d0f6      	beq.n	8004c6e <__sflush_r+0xae>
 8004c80:	0793      	lsls	r3, r2, #30
 8004c82:	680e      	ldr	r6, [r1, #0]
 8004c84:	bf08      	it	eq
 8004c86:	694b      	ldreq	r3, [r1, #20]
 8004c88:	600f      	str	r7, [r1, #0]
 8004c8a:	bf18      	it	ne
 8004c8c:	2300      	movne	r3, #0
 8004c8e:	eba6 0807 	sub.w	r8, r6, r7
 8004c92:	608b      	str	r3, [r1, #8]
 8004c94:	f1b8 0f00 	cmp.w	r8, #0
 8004c98:	dde9      	ble.n	8004c6e <__sflush_r+0xae>
 8004c9a:	6a21      	ldr	r1, [r4, #32]
 8004c9c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004c9e:	4643      	mov	r3, r8
 8004ca0:	463a      	mov	r2, r7
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	47b0      	blx	r6
 8004ca6:	2800      	cmp	r0, #0
 8004ca8:	dc08      	bgt.n	8004cbc <__sflush_r+0xfc>
 8004caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cb2:	81a3      	strh	r3, [r4, #12]
 8004cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cbc:	4407      	add	r7, r0
 8004cbe:	eba8 0800 	sub.w	r8, r8, r0
 8004cc2:	e7e7      	b.n	8004c94 <__sflush_r+0xd4>
 8004cc4:	20400001 	.word	0x20400001

08004cc8 <_fflush_r>:
 8004cc8:	b538      	push	{r3, r4, r5, lr}
 8004cca:	690b      	ldr	r3, [r1, #16]
 8004ccc:	4605      	mov	r5, r0
 8004cce:	460c      	mov	r4, r1
 8004cd0:	b913      	cbnz	r3, 8004cd8 <_fflush_r+0x10>
 8004cd2:	2500      	movs	r5, #0
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	bd38      	pop	{r3, r4, r5, pc}
 8004cd8:	b118      	cbz	r0, 8004ce2 <_fflush_r+0x1a>
 8004cda:	6a03      	ldr	r3, [r0, #32]
 8004cdc:	b90b      	cbnz	r3, 8004ce2 <_fflush_r+0x1a>
 8004cde:	f7ff fe15 	bl	800490c <__sinit>
 8004ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0f3      	beq.n	8004cd2 <_fflush_r+0xa>
 8004cea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004cec:	07d0      	lsls	r0, r2, #31
 8004cee:	d404      	bmi.n	8004cfa <_fflush_r+0x32>
 8004cf0:	0599      	lsls	r1, r3, #22
 8004cf2:	d402      	bmi.n	8004cfa <_fflush_r+0x32>
 8004cf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004cf6:	f7ff fefc 	bl	8004af2 <__retarget_lock_acquire_recursive>
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	4621      	mov	r1, r4
 8004cfe:	f7ff ff5f 	bl	8004bc0 <__sflush_r>
 8004d02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d04:	07da      	lsls	r2, r3, #31
 8004d06:	4605      	mov	r5, r0
 8004d08:	d4e4      	bmi.n	8004cd4 <_fflush_r+0xc>
 8004d0a:	89a3      	ldrh	r3, [r4, #12]
 8004d0c:	059b      	lsls	r3, r3, #22
 8004d0e:	d4e1      	bmi.n	8004cd4 <_fflush_r+0xc>
 8004d10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d12:	f7ff feef 	bl	8004af4 <__retarget_lock_release_recursive>
 8004d16:	e7dd      	b.n	8004cd4 <_fflush_r+0xc>

08004d18 <findslot>:
 8004d18:	4b0a      	ldr	r3, [pc, #40]	@ (8004d44 <findslot+0x2c>)
 8004d1a:	b510      	push	{r4, lr}
 8004d1c:	4604      	mov	r4, r0
 8004d1e:	6818      	ldr	r0, [r3, #0]
 8004d20:	b118      	cbz	r0, 8004d2a <findslot+0x12>
 8004d22:	6a03      	ldr	r3, [r0, #32]
 8004d24:	b90b      	cbnz	r3, 8004d2a <findslot+0x12>
 8004d26:	f7ff fdf1 	bl	800490c <__sinit>
 8004d2a:	2c13      	cmp	r4, #19
 8004d2c:	d807      	bhi.n	8004d3e <findslot+0x26>
 8004d2e:	4806      	ldr	r0, [pc, #24]	@ (8004d48 <findslot+0x30>)
 8004d30:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8004d34:	3201      	adds	r2, #1
 8004d36:	d002      	beq.n	8004d3e <findslot+0x26>
 8004d38:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8004d3c:	bd10      	pop	{r4, pc}
 8004d3e:	2000      	movs	r0, #0
 8004d40:	e7fc      	b.n	8004d3c <findslot+0x24>
 8004d42:	bf00      	nop
 8004d44:	20000040 	.word	0x20000040
 8004d48:	20000590 	.word	0x20000590

08004d4c <error>:
 8004d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d4e:	4604      	mov	r4, r0
 8004d50:	f7ff fea4 	bl	8004a9c <__errno>
 8004d54:	2613      	movs	r6, #19
 8004d56:	4605      	mov	r5, r0
 8004d58:	2700      	movs	r7, #0
 8004d5a:	4630      	mov	r0, r6
 8004d5c:	4639      	mov	r1, r7
 8004d5e:	beab      	bkpt	0x00ab
 8004d60:	4606      	mov	r6, r0
 8004d62:	602e      	str	r6, [r5, #0]
 8004d64:	4620      	mov	r0, r4
 8004d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004d68 <checkerror>:
 8004d68:	1c43      	adds	r3, r0, #1
 8004d6a:	d101      	bne.n	8004d70 <checkerror+0x8>
 8004d6c:	f7ff bfee 	b.w	8004d4c <error>
 8004d70:	4770      	bx	lr

08004d72 <_swiread>:
 8004d72:	b530      	push	{r4, r5, lr}
 8004d74:	b085      	sub	sp, #20
 8004d76:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8004d7a:	9203      	str	r2, [sp, #12]
 8004d7c:	2406      	movs	r4, #6
 8004d7e:	ad01      	add	r5, sp, #4
 8004d80:	4620      	mov	r0, r4
 8004d82:	4629      	mov	r1, r5
 8004d84:	beab      	bkpt	0x00ab
 8004d86:	4604      	mov	r4, r0
 8004d88:	4620      	mov	r0, r4
 8004d8a:	f7ff ffed 	bl	8004d68 <checkerror>
 8004d8e:	b005      	add	sp, #20
 8004d90:	bd30      	pop	{r4, r5, pc}

08004d92 <_read>:
 8004d92:	b570      	push	{r4, r5, r6, lr}
 8004d94:	460e      	mov	r6, r1
 8004d96:	4614      	mov	r4, r2
 8004d98:	f7ff ffbe 	bl	8004d18 <findslot>
 8004d9c:	4605      	mov	r5, r0
 8004d9e:	b930      	cbnz	r0, 8004dae <_read+0x1c>
 8004da0:	f7ff fe7c 	bl	8004a9c <__errno>
 8004da4:	2309      	movs	r3, #9
 8004da6:	6003      	str	r3, [r0, #0]
 8004da8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dac:	bd70      	pop	{r4, r5, r6, pc}
 8004dae:	6800      	ldr	r0, [r0, #0]
 8004db0:	4622      	mov	r2, r4
 8004db2:	4631      	mov	r1, r6
 8004db4:	f7ff ffdd 	bl	8004d72 <_swiread>
 8004db8:	1c43      	adds	r3, r0, #1
 8004dba:	d0f5      	beq.n	8004da8 <_read+0x16>
 8004dbc:	686b      	ldr	r3, [r5, #4]
 8004dbe:	1a20      	subs	r0, r4, r0
 8004dc0:	4403      	add	r3, r0
 8004dc2:	606b      	str	r3, [r5, #4]
 8004dc4:	e7f2      	b.n	8004dac <_read+0x1a>

08004dc6 <_swilseek>:
 8004dc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004dc8:	460c      	mov	r4, r1
 8004dca:	4616      	mov	r6, r2
 8004dcc:	f7ff ffa4 	bl	8004d18 <findslot>
 8004dd0:	4605      	mov	r5, r0
 8004dd2:	b940      	cbnz	r0, 8004de6 <_swilseek+0x20>
 8004dd4:	f7ff fe62 	bl	8004a9c <__errno>
 8004dd8:	2309      	movs	r3, #9
 8004dda:	6003      	str	r3, [r0, #0]
 8004ddc:	f04f 34ff 	mov.w	r4, #4294967295
 8004de0:	4620      	mov	r0, r4
 8004de2:	b003      	add	sp, #12
 8004de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004de6:	2e02      	cmp	r6, #2
 8004de8:	d903      	bls.n	8004df2 <_swilseek+0x2c>
 8004dea:	f7ff fe57 	bl	8004a9c <__errno>
 8004dee:	2316      	movs	r3, #22
 8004df0:	e7f3      	b.n	8004dda <_swilseek+0x14>
 8004df2:	2e01      	cmp	r6, #1
 8004df4:	d112      	bne.n	8004e1c <_swilseek+0x56>
 8004df6:	6843      	ldr	r3, [r0, #4]
 8004df8:	18e4      	adds	r4, r4, r3
 8004dfa:	d4f6      	bmi.n	8004dea <_swilseek+0x24>
 8004dfc:	682b      	ldr	r3, [r5, #0]
 8004dfe:	260a      	movs	r6, #10
 8004e00:	e9cd 3400 	strd	r3, r4, [sp]
 8004e04:	466f      	mov	r7, sp
 8004e06:	4630      	mov	r0, r6
 8004e08:	4639      	mov	r1, r7
 8004e0a:	beab      	bkpt	0x00ab
 8004e0c:	4606      	mov	r6, r0
 8004e0e:	4630      	mov	r0, r6
 8004e10:	f7ff ffaa 	bl	8004d68 <checkerror>
 8004e14:	2800      	cmp	r0, #0
 8004e16:	dbe1      	blt.n	8004ddc <_swilseek+0x16>
 8004e18:	606c      	str	r4, [r5, #4]
 8004e1a:	e7e1      	b.n	8004de0 <_swilseek+0x1a>
 8004e1c:	2e02      	cmp	r6, #2
 8004e1e:	6803      	ldr	r3, [r0, #0]
 8004e20:	d1ec      	bne.n	8004dfc <_swilseek+0x36>
 8004e22:	9300      	str	r3, [sp, #0]
 8004e24:	260c      	movs	r6, #12
 8004e26:	466f      	mov	r7, sp
 8004e28:	4630      	mov	r0, r6
 8004e2a:	4639      	mov	r1, r7
 8004e2c:	beab      	bkpt	0x00ab
 8004e2e:	4606      	mov	r6, r0
 8004e30:	4630      	mov	r0, r6
 8004e32:	f7ff ff99 	bl	8004d68 <checkerror>
 8004e36:	1c43      	adds	r3, r0, #1
 8004e38:	d0d0      	beq.n	8004ddc <_swilseek+0x16>
 8004e3a:	4404      	add	r4, r0
 8004e3c:	e7de      	b.n	8004dfc <_swilseek+0x36>

08004e3e <_lseek>:
 8004e3e:	f7ff bfc2 	b.w	8004dc6 <_swilseek>

08004e42 <_swiwrite>:
 8004e42:	b530      	push	{r4, r5, lr}
 8004e44:	b085      	sub	sp, #20
 8004e46:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8004e4a:	9203      	str	r2, [sp, #12]
 8004e4c:	2405      	movs	r4, #5
 8004e4e:	ad01      	add	r5, sp, #4
 8004e50:	4620      	mov	r0, r4
 8004e52:	4629      	mov	r1, r5
 8004e54:	beab      	bkpt	0x00ab
 8004e56:	4604      	mov	r4, r0
 8004e58:	4620      	mov	r0, r4
 8004e5a:	f7ff ff85 	bl	8004d68 <checkerror>
 8004e5e:	b005      	add	sp, #20
 8004e60:	bd30      	pop	{r4, r5, pc}

08004e62 <_write>:
 8004e62:	b570      	push	{r4, r5, r6, lr}
 8004e64:	460e      	mov	r6, r1
 8004e66:	4615      	mov	r5, r2
 8004e68:	f7ff ff56 	bl	8004d18 <findslot>
 8004e6c:	4604      	mov	r4, r0
 8004e6e:	b930      	cbnz	r0, 8004e7e <_write+0x1c>
 8004e70:	f7ff fe14 	bl	8004a9c <__errno>
 8004e74:	2309      	movs	r3, #9
 8004e76:	6003      	str	r3, [r0, #0]
 8004e78:	f04f 30ff 	mov.w	r0, #4294967295
 8004e7c:	bd70      	pop	{r4, r5, r6, pc}
 8004e7e:	6800      	ldr	r0, [r0, #0]
 8004e80:	462a      	mov	r2, r5
 8004e82:	4631      	mov	r1, r6
 8004e84:	f7ff ffdd 	bl	8004e42 <_swiwrite>
 8004e88:	1e03      	subs	r3, r0, #0
 8004e8a:	dbf5      	blt.n	8004e78 <_write+0x16>
 8004e8c:	6862      	ldr	r2, [r4, #4]
 8004e8e:	1ae8      	subs	r0, r5, r3
 8004e90:	4402      	add	r2, r0
 8004e92:	42ab      	cmp	r3, r5
 8004e94:	6062      	str	r2, [r4, #4]
 8004e96:	d1f1      	bne.n	8004e7c <_write+0x1a>
 8004e98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004e9c:	2000      	movs	r0, #0
 8004e9e:	f7ff bf55 	b.w	8004d4c <error>

08004ea2 <_swiclose>:
 8004ea2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ea4:	2402      	movs	r4, #2
 8004ea6:	9001      	str	r0, [sp, #4]
 8004ea8:	ad01      	add	r5, sp, #4
 8004eaa:	4620      	mov	r0, r4
 8004eac:	4629      	mov	r1, r5
 8004eae:	beab      	bkpt	0x00ab
 8004eb0:	4604      	mov	r4, r0
 8004eb2:	4620      	mov	r0, r4
 8004eb4:	f7ff ff58 	bl	8004d68 <checkerror>
 8004eb8:	b003      	add	sp, #12
 8004eba:	bd30      	pop	{r4, r5, pc}

08004ebc <_close>:
 8004ebc:	b538      	push	{r3, r4, r5, lr}
 8004ebe:	4605      	mov	r5, r0
 8004ec0:	f7ff ff2a 	bl	8004d18 <findslot>
 8004ec4:	4604      	mov	r4, r0
 8004ec6:	b930      	cbnz	r0, 8004ed6 <_close+0x1a>
 8004ec8:	f7ff fde8 	bl	8004a9c <__errno>
 8004ecc:	2309      	movs	r3, #9
 8004ece:	6003      	str	r3, [r0, #0]
 8004ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed4:	bd38      	pop	{r3, r4, r5, pc}
 8004ed6:	3d01      	subs	r5, #1
 8004ed8:	2d01      	cmp	r5, #1
 8004eda:	d809      	bhi.n	8004ef0 <_close+0x34>
 8004edc:	4b09      	ldr	r3, [pc, #36]	@ (8004f04 <_close+0x48>)
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d104      	bne.n	8004ef0 <_close+0x34>
 8004ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8004eea:	6003      	str	r3, [r0, #0]
 8004eec:	2000      	movs	r0, #0
 8004eee:	e7f1      	b.n	8004ed4 <_close+0x18>
 8004ef0:	6820      	ldr	r0, [r4, #0]
 8004ef2:	f7ff ffd6 	bl	8004ea2 <_swiclose>
 8004ef6:	2800      	cmp	r0, #0
 8004ef8:	d1ec      	bne.n	8004ed4 <_close+0x18>
 8004efa:	f04f 33ff 	mov.w	r3, #4294967295
 8004efe:	6023      	str	r3, [r4, #0]
 8004f00:	e7e8      	b.n	8004ed4 <_close+0x18>
 8004f02:	bf00      	nop
 8004f04:	20000590 	.word	0x20000590

08004f08 <_swistat>:
 8004f08:	b570      	push	{r4, r5, r6, lr}
 8004f0a:	460c      	mov	r4, r1
 8004f0c:	f7ff ff04 	bl	8004d18 <findslot>
 8004f10:	4605      	mov	r5, r0
 8004f12:	b930      	cbnz	r0, 8004f22 <_swistat+0x1a>
 8004f14:	f7ff fdc2 	bl	8004a9c <__errno>
 8004f18:	2309      	movs	r3, #9
 8004f1a:	6003      	str	r3, [r0, #0]
 8004f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f20:	bd70      	pop	{r4, r5, r6, pc}
 8004f22:	6863      	ldr	r3, [r4, #4]
 8004f24:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004f28:	6063      	str	r3, [r4, #4]
 8004f2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f2e:	64a3      	str	r3, [r4, #72]	@ 0x48
 8004f30:	260c      	movs	r6, #12
 8004f32:	4630      	mov	r0, r6
 8004f34:	4629      	mov	r1, r5
 8004f36:	beab      	bkpt	0x00ab
 8004f38:	4605      	mov	r5, r0
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	f7ff ff14 	bl	8004d68 <checkerror>
 8004f40:	1c43      	adds	r3, r0, #1
 8004f42:	d0eb      	beq.n	8004f1c <_swistat+0x14>
 8004f44:	6120      	str	r0, [r4, #16]
 8004f46:	2000      	movs	r0, #0
 8004f48:	e7ea      	b.n	8004f20 <_swistat+0x18>

08004f4a <_stat>:
 8004f4a:	b538      	push	{r3, r4, r5, lr}
 8004f4c:	460d      	mov	r5, r1
 8004f4e:	4604      	mov	r4, r0
 8004f50:	2258      	movs	r2, #88	@ 0x58
 8004f52:	2100      	movs	r1, #0
 8004f54:	4628      	mov	r0, r5
 8004f56:	f7ff fd52 	bl	80049fe <memset>
 8004f5a:	4620      	mov	r0, r4
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	f000 f811 	bl	8004f84 <_swiopen>
 8004f62:	1c43      	adds	r3, r0, #1
 8004f64:	4604      	mov	r4, r0
 8004f66:	d00b      	beq.n	8004f80 <_stat+0x36>
 8004f68:	686b      	ldr	r3, [r5, #4]
 8004f6a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004f6e:	606b      	str	r3, [r5, #4]
 8004f70:	4629      	mov	r1, r5
 8004f72:	f7ff ffc9 	bl	8004f08 <_swistat>
 8004f76:	4605      	mov	r5, r0
 8004f78:	4620      	mov	r0, r4
 8004f7a:	f7ff ff9f 	bl	8004ebc <_close>
 8004f7e:	462c      	mov	r4, r5
 8004f80:	4620      	mov	r0, r4
 8004f82:	bd38      	pop	{r3, r4, r5, pc}

08004f84 <_swiopen>:
 8004f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f88:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 8005034 <_swiopen+0xb0>
 8004f8c:	b096      	sub	sp, #88	@ 0x58
 8004f8e:	4607      	mov	r7, r0
 8004f90:	460e      	mov	r6, r1
 8004f92:	2400      	movs	r4, #0
 8004f94:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8004f9e:	d032      	beq.n	8005006 <_swiopen+0x82>
 8004fa0:	3401      	adds	r4, #1
 8004fa2:	2c14      	cmp	r4, #20
 8004fa4:	d1f6      	bne.n	8004f94 <_swiopen+0x10>
 8004fa6:	f7ff fd79 	bl	8004a9c <__errno>
 8004faa:	2318      	movs	r3, #24
 8004fac:	e03a      	b.n	8005024 <_swiopen+0xa0>
 8004fae:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8004fb2:	f240 6301 	movw	r3, #1537	@ 0x601
 8004fb6:	07b2      	lsls	r2, r6, #30
 8004fb8:	bf48      	it	mi
 8004fba:	f045 0502 	orrmi.w	r5, r5, #2
 8004fbe:	421e      	tst	r6, r3
 8004fc0:	bf18      	it	ne
 8004fc2:	f045 0504 	orrne.w	r5, r5, #4
 8004fc6:	0733      	lsls	r3, r6, #28
 8004fc8:	bf48      	it	mi
 8004fca:	f025 0504 	bicmi.w	r5, r5, #4
 8004fce:	4638      	mov	r0, r7
 8004fd0:	bf48      	it	mi
 8004fd2:	f045 0508 	orrmi.w	r5, r5, #8
 8004fd6:	9700      	str	r7, [sp, #0]
 8004fd8:	f7fb f8f6 	bl	80001c8 <strlen>
 8004fdc:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8004fe0:	2501      	movs	r5, #1
 8004fe2:	4628      	mov	r0, r5
 8004fe4:	4651      	mov	r1, sl
 8004fe6:	beab      	bkpt	0x00ab
 8004fe8:	4605      	mov	r5, r0
 8004fea:	2d00      	cmp	r5, #0
 8004fec:	db06      	blt.n	8004ffc <_swiopen+0x78>
 8004fee:	44c8      	add	r8, r9
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 8004ff6:	f8c8 3004 	str.w	r3, [r8, #4]
 8004ffa:	e016      	b.n	800502a <_swiopen+0xa6>
 8004ffc:	4628      	mov	r0, r5
 8004ffe:	f7ff fea5 	bl	8004d4c <error>
 8005002:	4604      	mov	r4, r0
 8005004:	e011      	b.n	800502a <_swiopen+0xa6>
 8005006:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 800500a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800500e:	46ea      	mov	sl, sp
 8005010:	d1cd      	bne.n	8004fae <_swiopen+0x2a>
 8005012:	4651      	mov	r1, sl
 8005014:	4638      	mov	r0, r7
 8005016:	f7ff ff98 	bl	8004f4a <_stat>
 800501a:	3001      	adds	r0, #1
 800501c:	d0c7      	beq.n	8004fae <_swiopen+0x2a>
 800501e:	f7ff fd3d 	bl	8004a9c <__errno>
 8005022:	2311      	movs	r3, #17
 8005024:	6003      	str	r3, [r0, #0]
 8005026:	f04f 34ff 	mov.w	r4, #4294967295
 800502a:	4620      	mov	r0, r4
 800502c:	b016      	add	sp, #88	@ 0x58
 800502e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005032:	bf00      	nop
 8005034:	20000590 	.word	0x20000590

08005038 <_get_semihosting_exts>:
 8005038:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800503c:	4606      	mov	r6, r0
 800503e:	460f      	mov	r7, r1
 8005040:	4829      	ldr	r0, [pc, #164]	@ (80050e8 <_get_semihosting_exts+0xb0>)
 8005042:	2100      	movs	r1, #0
 8005044:	4615      	mov	r5, r2
 8005046:	f7ff ff9d 	bl	8004f84 <_swiopen>
 800504a:	462a      	mov	r2, r5
 800504c:	4604      	mov	r4, r0
 800504e:	2100      	movs	r1, #0
 8005050:	4630      	mov	r0, r6
 8005052:	f7ff fcd4 	bl	80049fe <memset>
 8005056:	1c63      	adds	r3, r4, #1
 8005058:	d014      	beq.n	8005084 <_get_semihosting_exts+0x4c>
 800505a:	4620      	mov	r0, r4
 800505c:	f7ff fe5c 	bl	8004d18 <findslot>
 8005060:	f04f 080c 	mov.w	r8, #12
 8005064:	4681      	mov	r9, r0
 8005066:	4640      	mov	r0, r8
 8005068:	4649      	mov	r1, r9
 800506a:	beab      	bkpt	0x00ab
 800506c:	4680      	mov	r8, r0
 800506e:	4640      	mov	r0, r8
 8005070:	f7ff fe7a 	bl	8004d68 <checkerror>
 8005074:	2803      	cmp	r0, #3
 8005076:	dd02      	ble.n	800507e <_get_semihosting_exts+0x46>
 8005078:	1ec3      	subs	r3, r0, #3
 800507a:	42ab      	cmp	r3, r5
 800507c:	dc07      	bgt.n	800508e <_get_semihosting_exts+0x56>
 800507e:	4620      	mov	r0, r4
 8005080:	f7ff ff1c 	bl	8004ebc <_close>
 8005084:	f04f 30ff 	mov.w	r0, #4294967295
 8005088:	b003      	add	sp, #12
 800508a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800508e:	2204      	movs	r2, #4
 8005090:	eb0d 0102 	add.w	r1, sp, r2
 8005094:	4620      	mov	r0, r4
 8005096:	f7ff fe7c 	bl	8004d92 <_read>
 800509a:	2803      	cmp	r0, #3
 800509c:	ddef      	ble.n	800507e <_get_semihosting_exts+0x46>
 800509e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80050a2:	2b53      	cmp	r3, #83	@ 0x53
 80050a4:	d1eb      	bne.n	800507e <_get_semihosting_exts+0x46>
 80050a6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80050aa:	2b48      	cmp	r3, #72	@ 0x48
 80050ac:	d1e7      	bne.n	800507e <_get_semihosting_exts+0x46>
 80050ae:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80050b2:	2b46      	cmp	r3, #70	@ 0x46
 80050b4:	d1e3      	bne.n	800507e <_get_semihosting_exts+0x46>
 80050b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80050ba:	2b42      	cmp	r3, #66	@ 0x42
 80050bc:	d1df      	bne.n	800507e <_get_semihosting_exts+0x46>
 80050be:	2201      	movs	r2, #1
 80050c0:	4639      	mov	r1, r7
 80050c2:	4620      	mov	r0, r4
 80050c4:	f7ff fe7f 	bl	8004dc6 <_swilseek>
 80050c8:	2800      	cmp	r0, #0
 80050ca:	dbd8      	blt.n	800507e <_get_semihosting_exts+0x46>
 80050cc:	462a      	mov	r2, r5
 80050ce:	4631      	mov	r1, r6
 80050d0:	4620      	mov	r0, r4
 80050d2:	f7ff fe5e 	bl	8004d92 <_read>
 80050d6:	4605      	mov	r5, r0
 80050d8:	4620      	mov	r0, r4
 80050da:	f7ff feef 	bl	8004ebc <_close>
 80050de:	4628      	mov	r0, r5
 80050e0:	f7ff fe42 	bl	8004d68 <checkerror>
 80050e4:	e7d0      	b.n	8005088 <_get_semihosting_exts+0x50>
 80050e6:	bf00      	nop
 80050e8:	08005448 	.word	0x08005448

080050ec <initialise_semihosting_exts>:
 80050ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050ee:	4d0a      	ldr	r5, [pc, #40]	@ (8005118 <initialise_semihosting_exts+0x2c>)
 80050f0:	4c0a      	ldr	r4, [pc, #40]	@ (800511c <initialise_semihosting_exts+0x30>)
 80050f2:	2100      	movs	r1, #0
 80050f4:	2201      	movs	r2, #1
 80050f6:	a801      	add	r0, sp, #4
 80050f8:	6029      	str	r1, [r5, #0]
 80050fa:	6022      	str	r2, [r4, #0]
 80050fc:	f7ff ff9c 	bl	8005038 <_get_semihosting_exts>
 8005100:	2800      	cmp	r0, #0
 8005102:	dd07      	ble.n	8005114 <initialise_semihosting_exts+0x28>
 8005104:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005108:	f003 0201 	and.w	r2, r3, #1
 800510c:	f003 0302 	and.w	r3, r3, #2
 8005110:	602a      	str	r2, [r5, #0]
 8005112:	6023      	str	r3, [r4, #0]
 8005114:	b003      	add	sp, #12
 8005116:	bd30      	pop	{r4, r5, pc}
 8005118:	20000094 	.word	0x20000094
 800511c:	20000090 	.word	0x20000090

08005120 <_has_ext_stdout_stderr>:
 8005120:	b510      	push	{r4, lr}
 8005122:	4c04      	ldr	r4, [pc, #16]	@ (8005134 <_has_ext_stdout_stderr+0x14>)
 8005124:	6823      	ldr	r3, [r4, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	da01      	bge.n	800512e <_has_ext_stdout_stderr+0xe>
 800512a:	f7ff ffdf 	bl	80050ec <initialise_semihosting_exts>
 800512e:	6820      	ldr	r0, [r4, #0]
 8005130:	bd10      	pop	{r4, pc}
 8005132:	bf00      	nop
 8005134:	20000090 	.word	0x20000090

08005138 <initialise_monitor_handles>:
 8005138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800513c:	b085      	sub	sp, #20
 800513e:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 80051f0 <initialise_monitor_handles+0xb8>
 8005142:	f8cd 9004 	str.w	r9, [sp, #4]
 8005146:	2303      	movs	r3, #3
 8005148:	2400      	movs	r4, #0
 800514a:	9303      	str	r3, [sp, #12]
 800514c:	af01      	add	r7, sp, #4
 800514e:	9402      	str	r4, [sp, #8]
 8005150:	2501      	movs	r5, #1
 8005152:	4628      	mov	r0, r5
 8005154:	4639      	mov	r1, r7
 8005156:	beab      	bkpt	0x00ab
 8005158:	4605      	mov	r5, r0
 800515a:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80051f4 <initialise_monitor_handles+0xbc>
 800515e:	4623      	mov	r3, r4
 8005160:	4c20      	ldr	r4, [pc, #128]	@ (80051e4 <initialise_monitor_handles+0xac>)
 8005162:	f8c8 5000 	str.w	r5, [r8]
 8005166:	f04f 32ff 	mov.w	r2, #4294967295
 800516a:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800516e:	3301      	adds	r3, #1
 8005170:	2b14      	cmp	r3, #20
 8005172:	d1fa      	bne.n	800516a <initialise_monitor_handles+0x32>
 8005174:	f7ff ffd4 	bl	8005120 <_has_ext_stdout_stderr>
 8005178:	4d1b      	ldr	r5, [pc, #108]	@ (80051e8 <initialise_monitor_handles+0xb0>)
 800517a:	b1d0      	cbz	r0, 80051b2 <initialise_monitor_handles+0x7a>
 800517c:	f04f 0a03 	mov.w	sl, #3
 8005180:	2304      	movs	r3, #4
 8005182:	f8cd 9004 	str.w	r9, [sp, #4]
 8005186:	2601      	movs	r6, #1
 8005188:	f8cd a00c 	str.w	sl, [sp, #12]
 800518c:	9302      	str	r3, [sp, #8]
 800518e:	4630      	mov	r0, r6
 8005190:	4639      	mov	r1, r7
 8005192:	beab      	bkpt	0x00ab
 8005194:	4683      	mov	fp, r0
 8005196:	4b15      	ldr	r3, [pc, #84]	@ (80051ec <initialise_monitor_handles+0xb4>)
 8005198:	f8cd 9004 	str.w	r9, [sp, #4]
 800519c:	f8c3 b000 	str.w	fp, [r3]
 80051a0:	2308      	movs	r3, #8
 80051a2:	f8cd a00c 	str.w	sl, [sp, #12]
 80051a6:	9302      	str	r3, [sp, #8]
 80051a8:	4630      	mov	r0, r6
 80051aa:	4639      	mov	r1, r7
 80051ac:	beab      	bkpt	0x00ab
 80051ae:	4606      	mov	r6, r0
 80051b0:	602e      	str	r6, [r5, #0]
 80051b2:	682b      	ldr	r3, [r5, #0]
 80051b4:	3301      	adds	r3, #1
 80051b6:	bf02      	ittt	eq
 80051b8:	4b0c      	ldreq	r3, [pc, #48]	@ (80051ec <initialise_monitor_handles+0xb4>)
 80051ba:	681b      	ldreq	r3, [r3, #0]
 80051bc:	602b      	streq	r3, [r5, #0]
 80051be:	2600      	movs	r6, #0
 80051c0:	f8d8 3000 	ldr.w	r3, [r8]
 80051c4:	6023      	str	r3, [r4, #0]
 80051c6:	6066      	str	r6, [r4, #4]
 80051c8:	f7ff ffaa 	bl	8005120 <_has_ext_stdout_stderr>
 80051cc:	b130      	cbz	r0, 80051dc <initialise_monitor_handles+0xa4>
 80051ce:	4b07      	ldr	r3, [pc, #28]	@ (80051ec <initialise_monitor_handles+0xb4>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80051d6:	682b      	ldr	r3, [r5, #0]
 80051d8:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80051dc:	b005      	add	sp, #20
 80051de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051e2:	bf00      	nop
 80051e4:	20000590 	.word	0x20000590
 80051e8:	20000584 	.word	0x20000584
 80051ec:	20000588 	.word	0x20000588
 80051f0:	0800545e 	.word	0x0800545e
 80051f4:	2000058c 	.word	0x2000058c

080051f8 <_init>:
 80051f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051fa:	bf00      	nop
 80051fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051fe:	bc08      	pop	{r3}
 8005200:	469e      	mov	lr, r3
 8005202:	4770      	bx	lr

08005204 <_fini>:
 8005204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005206:	bf00      	nop
 8005208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800520a:	bc08      	pop	{r3}
 800520c:	469e      	mov	lr, r3
 800520e:	4770      	bx	lr
