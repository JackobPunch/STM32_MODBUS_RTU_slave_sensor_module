
modbusTrying.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004784  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  0800490c  0800490c  0000590c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b44  08004b44  00006034  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004b44  08004b44  00006034  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004b44  08004b44  00006034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b44  08004b44  00005b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b48  08004b48  00005b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000034  20000000  08004b4c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006034  2**0
                  CONTENTS
 10 .bss          000003a8  20000034  20000034  00006034  2**2
                  ALLOC
 11 ._user_heap_stack 00000c04  200003dc  200003dc  00006034  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c1e7  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002361  00000000  00000000  0001224b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008f0  00000000  00000000  000145b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006b6  00000000  00000000  00014ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aba6  00000000  00000000  00015556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cea1  00000000  00000000  000300fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009adc2  00000000  00000000  0003cf9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d7d5f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000021a8  00000000  00000000  000d7da4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  000d9f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000034 	.word	0x20000034
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080048f4 	.word	0x080048f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000038 	.word	0x20000038
 80001c4:	080048f4 	.word	0x080048f4

080001c8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f001 f926 	bl	800141c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f84e 	bl	8000270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8f6 	bl	80003c4 <MX_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); // Debug: Init step 1 - GPIO
 80001d8:	2201      	movs	r2, #1
 80001da:	2101      	movs	r1, #1
 80001dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80001e0:	f001 fe3c 	bl	8001e5c <HAL_GPIO_WritePin>

  MX_DMA_Init();
 80001e4:	f000 f8c8 	bl	8000378 <MX_DMA_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); // Debug: Init step 2 - DMA
 80001e8:	2201      	movs	r2, #1
 80001ea:	2102      	movs	r1, #2
 80001ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80001f0:	f001 fe34 	bl	8001e5c <HAL_GPIO_WritePin>

  MX_USART1_UART_Init();
 80001f4:	f000 f88e 	bl	8000314 <MX_USART1_UART_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET); // Debug: Init step 3 - UART
 80001f8:	2201      	movs	r2, #1
 80001fa:	2104      	movs	r1, #4
 80001fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000200:	f001 fe2c 	bl	8001e5c <HAL_GPIO_WritePin>
  /* USER CODE BEGIN 2 */

  // printf("Starting Modbus RTU Slave...\n"); // Removed to prevent timing delays

  // Initialize UART callbacks
  UART_Callbacks_Init();
 8000204:	f001 f882 	bl	800130c <UART_Callbacks_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET); // Debug: Init step 4 - UART callbacks
 8000208:	2201      	movs	r2, #1
 800020a:	2108      	movs	r1, #8
 800020c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000210:	f001 fe24 	bl	8001e5c <HAL_GPIO_WritePin>

  // Initialize Modbus RTU slave
  Modbus_Init();
 8000214:	f000 fe84 	bl	8000f20 <Modbus_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); // Debug: Init step 5 - Modbus
 8000218:	2201      	movs	r2, #1
 800021a:	2110      	movs	r1, #16
 800021c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000220:	f001 fe1c 	bl	8001e5c <HAL_GPIO_WritePin>
  // printf("Array check: [0]=0x%04X [1]=0x%04X [12]=0x%04X [13]=0x%04X\n",
  //        Modbus_Device_GetRegister(0), Modbus_Device_GetRegister(1),
  //        Modbus_Device_GetRegister(12), Modbus_Device_GetRegister(13));

  // Initialize test functions
  Modbus_Test_Init();
 8000224:	f000 ff38 	bl	8001098 <Modbus_Test_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // Debug: Init step 6 - Test functions
 8000228:	2201      	movs	r2, #1
 800022a:	2120      	movs	r1, #32
 800022c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000230:	f001 fe14 	bl	8001e5c <HAL_GPIO_WritePin>
  {
    /* USER CODE BEGIN 3 */

    // Heartbeat LED toggle every second for standalone debugging
    static uint32_t heartbeat_counter = 0;
    heartbeat_counter++;
 8000234:	4b0d      	ldr	r3, [pc, #52]	@ (800026c <main+0xa4>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	3301      	adds	r3, #1
 800023a:	4a0c      	ldr	r2, [pc, #48]	@ (800026c <main+0xa4>)
 800023c:	6013      	str	r3, [r2, #0]
    if (heartbeat_counter >= 10) // 10 * 100ms = 1 second
 800023e:	4b0b      	ldr	r3, [pc, #44]	@ (800026c <main+0xa4>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	2b09      	cmp	r3, #9
 8000244:	d907      	bls.n	8000256 <main+0x8e>
    {
      heartbeat_counter = 0;
 8000246:	4b09      	ldr	r3, [pc, #36]	@ (800026c <main+0xa4>)
 8000248:	2200      	movs	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 800024c:	2140      	movs	r1, #64	@ 0x40
 800024e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000252:	f001 fe1b 	bl	8001e8c <HAL_GPIO_TogglePin>
    }

    // Update sensor values periodically
    Modbus_Device_UpdateSensors();
 8000256:	f000 fe5b 	bl	8000f10 <Modbus_Device_UpdateSensors>

    // Update test values
    Modbus_Test_Update();
 800025a:	f000 ff25 	bl	80010a8 <Modbus_Test_Update>

    // Process Modbus (if needed)
    Modbus_Process();
 800025e:	f000 fee9 	bl	8001034 <Modbus_Process>
        device_registers[i] += 1;
      }
    }
    */
    // Add small delay to prevent busy waiting
    HAL_Delay(100);
 8000262:	2064      	movs	r0, #100	@ 0x64
 8000264:	f001 f940 	bl	80014e8 <HAL_Delay>
  {
 8000268:	e7e4      	b.n	8000234 <main+0x6c>
 800026a:	bf00      	nop
 800026c:	20000160 	.word	0x20000160

08000270 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b096      	sub	sp, #88	@ 0x58
 8000274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000276:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800027a:	2228      	movs	r2, #40	@ 0x28
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f004 fafe 	bl	8004880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000284:	f107 031c 	add.w	r3, r7, #28
 8000288:	2200      	movs	r2, #0
 800028a:	601a      	str	r2, [r3, #0]
 800028c:	605a      	str	r2, [r3, #4]
 800028e:	609a      	str	r2, [r3, #8]
 8000290:	60da      	str	r2, [r3, #12]
 8000292:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]
 800029c:	609a      	str	r2, [r3, #8]
 800029e:	60da      	str	r2, [r3, #12]
 80002a0:	611a      	str	r2, [r3, #16]
 80002a2:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a4:	2302      	movs	r3, #2
 80002a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a8:	2301      	movs	r3, #1
 80002aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ac:	2310      	movs	r3, #16
 80002ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002b0:	2300      	movs	r3, #0
 80002b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80002b8:	4618      	mov	r0, r3
 80002ba:	f001 fe01 	bl	8001ec0 <HAL_RCC_OscConfig>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002c4:	f000 f8ae 	bl	8000424 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80002c8:	230f      	movs	r3, #15
 80002ca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002cc:	2300      	movs	r3, #0
 80002ce:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d4:	2300      	movs	r3, #0
 80002d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d8:	2300      	movs	r3, #0
 80002da:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002dc:	f107 031c 	add.w	r3, r7, #28
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f002 fdfa 	bl	8002edc <HAL_RCC_ClockConfig>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002ee:	f000 f899 	bl	8000424 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80002f2:	2301      	movs	r3, #1
 80002f4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	4618      	mov	r0, r3
 80002fe:	f002 ffff 	bl	8003300 <HAL_RCCEx_PeriphCLKConfig>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000308:	f000 f88c 	bl	8000424 <Error_Handler>
  }
}
 800030c:	bf00      	nop
 800030e:	3758      	adds	r7, #88	@ 0x58
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}

08000314 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000318:	4b15      	ldr	r3, [pc, #84]	@ (8000370 <MX_USART1_UART_Init+0x5c>)
 800031a:	4a16      	ldr	r2, [pc, #88]	@ (8000374 <MX_USART1_UART_Init+0x60>)
 800031c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800031e:	4b14      	ldr	r3, [pc, #80]	@ (8000370 <MX_USART1_UART_Init+0x5c>)
 8000320:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000324:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000326:	4b12      	ldr	r3, [pc, #72]	@ (8000370 <MX_USART1_UART_Init+0x5c>)
 8000328:	2200      	movs	r2, #0
 800032a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800032c:	4b10      	ldr	r3, [pc, #64]	@ (8000370 <MX_USART1_UART_Init+0x5c>)
 800032e:	2200      	movs	r2, #0
 8000330:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000332:	4b0f      	ldr	r3, [pc, #60]	@ (8000370 <MX_USART1_UART_Init+0x5c>)
 8000334:	2200      	movs	r2, #0
 8000336:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000338:	4b0d      	ldr	r3, [pc, #52]	@ (8000370 <MX_USART1_UART_Init+0x5c>)
 800033a:	220c      	movs	r2, #12
 800033c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800033e:	4b0c      	ldr	r3, [pc, #48]	@ (8000370 <MX_USART1_UART_Init+0x5c>)
 8000340:	2200      	movs	r2, #0
 8000342:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000344:	4b0a      	ldr	r3, [pc, #40]	@ (8000370 <MX_USART1_UART_Init+0x5c>)
 8000346:	2200      	movs	r2, #0
 8000348:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800034a:	4b09      	ldr	r3, [pc, #36]	@ (8000370 <MX_USART1_UART_Init+0x5c>)
 800034c:	2200      	movs	r2, #0
 800034e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000350:	4b07      	ldr	r3, [pc, #28]	@ (8000370 <MX_USART1_UART_Init+0x5c>)
 8000352:	2200      	movs	r2, #0
 8000354:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000356:	2300      	movs	r3, #0
 8000358:	2200      	movs	r2, #0
 800035a:	2100      	movs	r1, #0
 800035c:	4804      	ldr	r0, [pc, #16]	@ (8000370 <MX_USART1_UART_Init+0x5c>)
 800035e:	f004 f9ca 	bl	80046f6 <HAL_RS485Ex_Init>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000368:	f000 f85c 	bl	8000424 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 800036c:	bf00      	nop
 800036e:	bd80      	pop	{r7, pc}
 8000370:	20000050 	.word	0x20000050
 8000374:	40013800 	.word	0x40013800

08000378 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800037e:	4b10      	ldr	r3, [pc, #64]	@ (80003c0 <MX_DMA_Init+0x48>)
 8000380:	695b      	ldr	r3, [r3, #20]
 8000382:	4a0f      	ldr	r2, [pc, #60]	@ (80003c0 <MX_DMA_Init+0x48>)
 8000384:	f043 0301 	orr.w	r3, r3, #1
 8000388:	6153      	str	r3, [r2, #20]
 800038a:	4b0d      	ldr	r3, [pc, #52]	@ (80003c0 <MX_DMA_Init+0x48>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	f003 0301 	and.w	r3, r3, #1
 8000392:	607b      	str	r3, [r7, #4]
 8000394:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000396:	2200      	movs	r2, #0
 8000398:	2100      	movs	r1, #0
 800039a:	200e      	movs	r0, #14
 800039c:	f001 f9a3 	bl	80016e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80003a0:	200e      	movs	r0, #14
 80003a2:	f001 f9bc 	bl	800171e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80003a6:	2200      	movs	r2, #0
 80003a8:	2100      	movs	r1, #0
 80003aa:	200f      	movs	r0, #15
 80003ac:	f001 f99b 	bl	80016e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80003b0:	200f      	movs	r0, #15
 80003b2:	f001 f9b4 	bl	800171e <HAL_NVIC_EnableIRQ>
}
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	40021000 	.word	0x40021000

080003c4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b086      	sub	sp, #24
 80003c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	605a      	str	r2, [r3, #4]
 80003d2:	609a      	str	r2, [r3, #8]
 80003d4:	60da      	str	r2, [r3, #12]
 80003d6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d8:	4b11      	ldr	r3, [pc, #68]	@ (8000420 <MX_GPIO_Init+0x5c>)
 80003da:	695b      	ldr	r3, [r3, #20]
 80003dc:	4a10      	ldr	r2, [pc, #64]	@ (8000420 <MX_GPIO_Init+0x5c>)
 80003de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003e2:	6153      	str	r3, [r2, #20]
 80003e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000420 <MX_GPIO_Init+0x5c>)
 80003e6:	695b      	ldr	r3, [r3, #20]
 80003e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003ec:	603b      	str	r3, [r7, #0]
 80003ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6, GPIO_PIN_RESET);
 80003f0:	2200      	movs	r2, #0
 80003f2:	217f      	movs	r1, #127	@ 0x7f
 80003f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003f8:	f001 fd30 	bl	8001e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 80003fc:	237f      	movs	r3, #127	@ 0x7f
 80003fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000400:	2301      	movs	r3, #1
 8000402:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000404:	2300      	movs	r3, #0
 8000406:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000408:	2300      	movs	r3, #0
 800040a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	4619      	mov	r1, r3
 8000410:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000414:	f001 fbb0 	bl	8001b78 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000418:	bf00      	nop
 800041a:	3718      	adds	r7, #24
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	40021000 	.word	0x40021000

08000424 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000428:	b672      	cpsid	i
}
 800042a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800042c:	bf00      	nop
 800042e:	e7fd      	b.n	800042c <Error_Handler+0x8>

08000430 <mbus_crc16>:
}

*/

uint16_t mbus_crc16(const uint16_t crc16, const uint8_t byte)
{
 8000430:	b480      	push	{r7}
 8000432:	b085      	sub	sp, #20
 8000434:	af00      	add	r7, sp, #0
 8000436:	4603      	mov	r3, r0
 8000438:	460a      	mov	r2, r1
 800043a:	80fb      	strh	r3, [r7, #6]
 800043c:	4613      	mov	r3, r2
 800043e:	717b      	strb	r3, [r7, #5]
    const int index = (crc16 & 0xFF) ^ byte;
 8000440:	88fb      	ldrh	r3, [r7, #6]
 8000442:	b2da      	uxtb	r2, r3
 8000444:	797b      	ldrb	r3, [r7, #5]
 8000446:	4053      	eors	r3, r2
 8000448:	60fb      	str	r3, [r7, #12]
    return (aucCRCLo[index] << 8) | ((crc16 >> 8) ^ aucCRCHi[index]);
 800044a:	4a0d      	ldr	r2, [pc, #52]	@ (8000480 <mbus_crc16+0x50>)
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	4413      	add	r3, r2
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	b21b      	sxth	r3, r3
 8000454:	021b      	lsls	r3, r3, #8
 8000456:	b21a      	sxth	r2, r3
 8000458:	88fb      	ldrh	r3, [r7, #6]
 800045a:	0a1b      	lsrs	r3, r3, #8
 800045c:	b29b      	uxth	r3, r3
 800045e:	4809      	ldr	r0, [pc, #36]	@ (8000484 <mbus_crc16+0x54>)
 8000460:	68f9      	ldr	r1, [r7, #12]
 8000462:	4401      	add	r1, r0
 8000464:	7809      	ldrb	r1, [r1, #0]
 8000466:	404b      	eors	r3, r1
 8000468:	b29b      	uxth	r3, r3
 800046a:	b21b      	sxth	r3, r3
 800046c:	4313      	orrs	r3, r2
 800046e:	b21b      	sxth	r3, r3
 8000470:	b29b      	uxth	r3, r3
}
 8000472:	4618      	mov	r0, r3
 8000474:	3714      	adds	r7, #20
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	08004a0c 	.word	0x08004a0c
 8000484:	0800490c 	.word	0x0800490c

08000488 <mbus_tickcount>:

__attribute__((weak)) uint32_t mbus_tickcount() { return 0; }
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
 800048c:	2300      	movs	r3, #0
 800048e:	4618      	mov	r0, r3
 8000490:	46bd      	mov	sp, r7
 8000492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000496:	4770      	bx	lr

08000498 <mbus_open>:
   * function mbus_open()
   * open new modbus context for new port
   * return: MODBUS_ERROR - if can't open context
   */
  mbus_t mbus_open(Modbus_Conf_t *pconf)
  {
 8000498:	b580      	push	{r7, lr}
 800049a:	b084      	sub	sp, #16
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
    mbus_t context;
    for (context = 0; context < STMODBUS_COUNT_CONTEXT; context++)
 80004a0:	2300      	movs	r3, #0
 80004a2:	73fb      	strb	r3, [r7, #15]
 80004a4:	e011      	b.n	80004ca <mbus_open+0x32>
    {
      if (g_mbusContext[context].open == 0)
 80004a6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80004aa:	4924      	ldr	r1, [pc, #144]	@ (800053c <mbus_open+0xa4>)
 80004ac:	4613      	mov	r3, r2
 80004ae:	011b      	lsls	r3, r3, #4
 80004b0:	4413      	add	r3, r2
 80004b2:	009b      	lsls	r3, r3, #2
 80004b4:	440b      	add	r3, r1
 80004b6:	3328      	adds	r3, #40	@ 0x28
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d00a      	beq.n	80004d4 <mbus_open+0x3c>
    for (context = 0; context < STMODBUS_COUNT_CONTEXT; context++)
 80004be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004c2:	b2db      	uxtb	r3, r3
 80004c4:	3301      	adds	r3, #1
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	73fb      	strb	r3, [r7, #15]
 80004ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	dde9      	ble.n	80004a6 <mbus_open+0xe>
 80004d2:	e000      	b.n	80004d6 <mbus_open+0x3e>
      {
        break;
 80004d4:	bf00      	nop
      }
    }
    if (context == STMODBUS_COUNT_CONTEXT)
 80004d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d102      	bne.n	80004e4 <mbus_open+0x4c>
      return (mbus_t)MBUS_ERROR;
 80004de:	f04f 33ff 	mov.w	r3, #4294967295
 80004e2:	e026      	b.n	8000532 <mbus_open+0x9a>
    // Clear context
    memset(&g_mbusContext[context], 0, sizeof(_stmodbus_context_t));
 80004e4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80004e8:	4613      	mov	r3, r2
 80004ea:	011b      	lsls	r3, r3, #4
 80004ec:	4413      	add	r3, r2
 80004ee:	009b      	lsls	r3, r3, #2
 80004f0:	4a12      	ldr	r2, [pc, #72]	@ (800053c <mbus_open+0xa4>)
 80004f2:	4413      	add	r3, r2
 80004f4:	2244      	movs	r2, #68	@ 0x44
 80004f6:	2100      	movs	r1, #0
 80004f8:	4618      	mov	r0, r3
 80004fa:	f004 f9c1 	bl	8004880 <memset>
    // Copy config to context
    memcpy((void *)&g_mbusContext[context].conf, (void *)pconf,
 80004fe:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000502:	4613      	mov	r3, r2
 8000504:	011b      	lsls	r3, r3, #4
 8000506:	4413      	add	r3, r2
 8000508:	009b      	lsls	r3, r3, #2
 800050a:	4a0c      	ldr	r2, [pc, #48]	@ (800053c <mbus_open+0xa4>)
 800050c:	4413      	add	r3, r2
 800050e:	2228      	movs	r2, #40	@ 0x28
 8000510:	6879      	ldr	r1, [r7, #4]
 8000512:	4618      	mov	r0, r3
 8000514:	f004 f9e0 	bl	80048d8 <memcpy>
           sizeof(Modbus_Conf_t));

    g_mbusContext[context].open = 1;
 8000518:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800051c:	4907      	ldr	r1, [pc, #28]	@ (800053c <mbus_open+0xa4>)
 800051e:	4613      	mov	r3, r2
 8000520:	011b      	lsls	r3, r3, #4
 8000522:	4413      	add	r3, r2
 8000524:	009b      	lsls	r3, r3, #2
 8000526:	440b      	add	r3, r1
 8000528:	3328      	adds	r3, #40	@ 0x28
 800052a:	2201      	movs	r2, #1
 800052c:	701a      	strb	r2, [r3, #0]
    return context;
 800052e:	f997 300f 	ldrsb.w	r3, [r7, #15]
  }
 8000532:	4618      	mov	r0, r3
 8000534:	3710      	adds	r7, #16
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20000164 	.word	0x20000164

08000540 <mbus_flush>:

  mbus_status_t mbus_flush(const mbus_t context)
  {
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	71fb      	strb	r3, [r7, #7]
    g_mbusContext[context].crc16 = 0xFFFF;
 800054a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800054e:	490e      	ldr	r1, [pc, #56]	@ (8000588 <mbus_flush+0x48>)
 8000550:	4613      	mov	r3, r2
 8000552:	011b      	lsls	r3, r3, #4
 8000554:	4413      	add	r3, r2
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	440b      	add	r3, r1
 800055a:	332a      	adds	r3, #42	@ 0x2a
 800055c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000560:	801a      	strh	r2, [r3, #0]
    g_mbusContext[context].state = MBUS_STATE_IDLE;
 8000562:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000566:	4908      	ldr	r1, [pc, #32]	@ (8000588 <mbus_flush+0x48>)
 8000568:	4613      	mov	r3, r2
 800056a:	011b      	lsls	r3, r3, #4
 800056c:	4413      	add	r3, r2
 800056e:	009b      	lsls	r3, r3, #2
 8000570:	440b      	add	r3, r1
 8000572:	3329      	adds	r3, #41	@ 0x29
 8000574:	2200      	movs	r2, #0
 8000576:	701a      	strb	r2, [r3, #0]
    return MBUS_OK;
 8000578:	2300      	movs	r3, #0
  }
 800057a:	4618      	mov	r0, r3
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	20000164 	.word	0x20000164

0800058c <mbus_response>:

  mbus_status_t mbus_response(mbus_t mb_context, Modbus_ResponseType response)
  {
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	460a      	mov	r2, r1
 8000596:	71fb      	strb	r3, [r7, #7]
 8000598:	4613      	mov	r3, r2
 800059a:	71bb      	strb	r3, [r7, #6]

    if (response != MBUS_RESPONSE_OK)
 800059c:	79bb      	ldrb	r3, [r7, #6]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d008      	beq.n	80005b4 <mbus_response+0x28>
    {
      return mbus_send_error(mb_context, response);
 80005a2:	79ba      	ldrb	r2, [r7, #6]
 80005a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a8:	4611      	mov	r1, r2
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 fb66 	bl	8000c7c <mbus_send_error>
 80005b0:	4603      	mov	r3, r0
 80005b2:	e001      	b.n	80005b8 <mbus_response+0x2c>
    }
    else
    {
    }
    return MBUS_ERROR;
 80005b4:	f04f 33ff 	mov.w	r3, #4294967295
  }
 80005b8:	4618      	mov	r0, r3
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <mbus_poll_response>:
    g_userError = error;
    return 0;
  }

  inline mbus_status_t mbus_poll_response(mbus_t mb_context)
  {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08a      	sub	sp, #40	@ 0x28
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
    stmbCallBackFunc func = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]
    _stmodbus_context_t *ctx = &g_mbusContext[mb_context];
 80005ce:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80005d2:	4613      	mov	r3, r2
 80005d4:	011b      	lsls	r3, r3, #4
 80005d6:	4413      	add	r3, r2
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	4a9b      	ldr	r2, [pc, #620]	@ (8000848 <mbus_poll_response+0x288>)
 80005dc:	4413      	add	r3, r2
 80005de:	613b      	str	r3, [r7, #16]
    int read = 1, la;
 80005e0:	2301      	movs	r3, #1
 80005e2:	60bb      	str	r3, [r7, #8]
    uint16_t d;

    if (ctx->header.func == 0x04)
 80005e4:	693b      	ldr	r3, [r7, #16]
 80005e6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80005ea:	2b04      	cmp	r3, #4
 80005ec:	d101      	bne.n	80005f2 <mbus_poll_response+0x32>
    {
      la = 10;
 80005ee:	230a      	movs	r3, #10
 80005f0:	627b      	str	r3, [r7, #36]	@ 0x24
        func = ctx->func[i].func;
        break;
      }
    }
#endif
    switch (ctx->header.func)
 80005f2:	693b      	ldr	r3, [r7, #16]
 80005f4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80005f8:	2b0f      	cmp	r3, #15
 80005fa:	d006      	beq.n	800060a <mbus_poll_response+0x4a>
 80005fc:	2b0f      	cmp	r3, #15
 80005fe:	dc4a      	bgt.n	8000696 <mbus_poll_response+0xd6>
 8000600:	2b01      	cmp	r3, #1
 8000602:	d002      	beq.n	800060a <mbus_poll_response+0x4a>
 8000604:	2b02      	cmp	r3, #2
 8000606:	d023      	beq.n	8000650 <mbus_poll_response+0x90>
      {
        return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_ADDRESS);
      }
      break;
    default:
      break;
 8000608:	e045      	b.n	8000696 <mbus_poll_response+0xd6>
      if ((ctx->header.num == 0) || (ctx->header.num > 0x07D0))
 800060a:	693b      	ldr	r3, [r7, #16]
 800060c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800060e:	2b00      	cmp	r3, #0
 8000610:	d004      	beq.n	800061c <mbus_poll_response+0x5c>
 8000612:	693b      	ldr	r3, [r7, #16]
 8000614:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000616:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800061a:	d907      	bls.n	800062c <mbus_poll_response+0x6c>
        return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_VALUE);
 800061c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000620:	2103      	movs	r1, #3
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff ffb2 	bl	800058c <mbus_response>
 8000628:	4603      	mov	r3, r0
 800062a:	e155      	b.n	80008d8 <mbus_poll_response+0x318>
      if ((ctx->header.addr + ctx->header.num) >= ctx->conf.coils)
 800062c:	693b      	ldr	r3, [r7, #16]
 800062e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000630:	461a      	mov	r2, r3
 8000632:	693b      	ldr	r3, [r7, #16]
 8000634:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000636:	4413      	add	r3, r2
 8000638:	693a      	ldr	r2, [r7, #16]
 800063a:	8852      	ldrh	r2, [r2, #2]
 800063c:	4293      	cmp	r3, r2
 800063e:	db2c      	blt.n	800069a <mbus_poll_response+0xda>
        return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_ADDRESS);
 8000640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000644:	2102      	movs	r1, #2
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff ffa0 	bl	800058c <mbus_response>
 800064c:	4603      	mov	r3, r0
 800064e:	e143      	b.n	80008d8 <mbus_poll_response+0x318>
      if ((ctx->header.num == 0) || (ctx->header.num > 0x07D0))
 8000650:	693b      	ldr	r3, [r7, #16]
 8000652:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000654:	2b00      	cmp	r3, #0
 8000656:	d004      	beq.n	8000662 <mbus_poll_response+0xa2>
 8000658:	693b      	ldr	r3, [r7, #16]
 800065a:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800065c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000660:	d907      	bls.n	8000672 <mbus_poll_response+0xb2>
        return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_VALUE);
 8000662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000666:	2103      	movs	r1, #3
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ff8f 	bl	800058c <mbus_response>
 800066e:	4603      	mov	r3, r0
 8000670:	e132      	b.n	80008d8 <mbus_poll_response+0x318>
      if ((ctx->header.addr + ctx->header.num) > ctx->conf.discrete)
 8000672:	693b      	ldr	r3, [r7, #16]
 8000674:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000676:	461a      	mov	r2, r3
 8000678:	693b      	ldr	r3, [r7, #16]
 800067a:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800067c:	4413      	add	r3, r2
 800067e:	693a      	ldr	r2, [r7, #16]
 8000680:	8892      	ldrh	r2, [r2, #4]
 8000682:	4293      	cmp	r3, r2
 8000684:	dd0b      	ble.n	800069e <mbus_poll_response+0xde>
        return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_ADDRESS);
 8000686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068a:	2102      	movs	r1, #2
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ff7d 	bl	800058c <mbus_response>
 8000692:	4603      	mov	r3, r0
 8000694:	e120      	b.n	80008d8 <mbus_poll_response+0x318>
      break;
 8000696:	bf00      	nop
 8000698:	e002      	b.n	80006a0 <mbus_poll_response+0xe0>
      break;
 800069a:	bf00      	nop
 800069c:	e000      	b.n	80006a0 <mbus_poll_response+0xe0>
      break;
 800069e:	bf00      	nop
    }

    if (func != 0)
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d006      	beq.n	80006b4 <mbus_poll_response+0xf4>
    {
      return func(mb_context);
 80006a6:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	4610      	mov	r0, r2
 80006ae:	4798      	blx	r3
 80006b0:	4603      	mov	r3, r0
 80006b2:	e111      	b.n	80008d8 <mbus_poll_response+0x318>
    }

    la = mbus_proto_address((Modbus_ConnectFuncType)ctx->header.func, (int *)&read);
 80006b4:	693b      	ldr	r3, [r7, #16]
 80006b6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80006ba:	f107 0208 	add.w	r2, r7, #8
 80006be:	4611      	mov	r1, r2
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 fb6d 	bl	8000da0 <mbus_proto_address>
 80006c6:	6278      	str	r0, [r7, #36]	@ 0x24
    if (la > 0)
 80006c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	dd05      	ble.n	80006da <mbus_poll_response+0x11a>
    {
      la += ctx->header.addr;
 80006ce:	693b      	ldr	r3, [r7, #16]
 80006d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80006d2:	461a      	mov	r2, r3
 80006d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006d6:	4413      	add	r3, r2
 80006d8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    if (la < 50001)
 80006da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006dc:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80006e0:	4293      	cmp	r3, r2
 80006e2:	f300 80f2 	bgt.w	80008ca <mbus_poll_response+0x30a>
    {
      ctx->conf.sendbuf[0] = ctx->header.devaddr;
 80006e6:	693b      	ldr	r3, [r7, #16]
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	693a      	ldr	r2, [r7, #16]
 80006ec:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 80006f0:	701a      	strb	r2, [r3, #0]
      ctx->conf.sendbuf[1] = ctx->header.func;
 80006f2:	693b      	ldr	r3, [r7, #16]
 80006f4:	699b      	ldr	r3, [r3, #24]
 80006f6:	3301      	adds	r3, #1
 80006f8:	693a      	ldr	r2, [r7, #16]
 80006fa:	f892 2031 	ldrb.w	r2, [r2, #49]	@ 0x31
 80006fe:	701a      	strb	r2, [r3, #0]
      ctx->conf.sendbuf[2] = ctx->header.num * 2;
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000704:	b2da      	uxtb	r2, r3
 8000706:	693b      	ldr	r3, [r7, #16]
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	3302      	adds	r3, #2
 800070c:	0052      	lsls	r2, r2, #1
 800070e:	b2d2      	uxtb	r2, r2
 8000710:	701a      	strb	r2, [r3, #0]
      if (read && ctx->conf.read)
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d04b      	beq.n	80007b0 <mbus_poll_response+0x1f0>
 8000718:	693b      	ldr	r3, [r7, #16]
 800071a:	691b      	ldr	r3, [r3, #16]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d047      	beq.n	80007b0 <mbus_poll_response+0x1f0>
      {
        g_userError = MBUS_RESPONSE_OK;
 8000720:	4b4a      	ldr	r3, [pc, #296]	@ (800084c <mbus_poll_response+0x28c>)
 8000722:	2200      	movs	r2, #0
 8000724:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < ctx->header.num; i++)
 8000726:	2300      	movs	r3, #0
 8000728:	623b      	str	r3, [r7, #32]
 800072a:	e01f      	b.n	800076c <mbus_poll_response+0x1ac>
        {

          d = ctx->conf.read(la + i);
 800072c:	693b      	ldr	r3, [r7, #16]
 800072e:	691b      	ldr	r3, [r3, #16]
 8000730:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000732:	6a3a      	ldr	r2, [r7, #32]
 8000734:	440a      	add	r2, r1
 8000736:	4610      	mov	r0, r2
 8000738:	4798      	blx	r3
 800073a:	4603      	mov	r3, r0
 800073c:	81fb      	strh	r3, [r7, #14]
          ctx->conf.sendbuf[3 + (i << 1)] = d >> 8;
 800073e:	89fb      	ldrh	r3, [r7, #14]
 8000740:	0a1b      	lsrs	r3, r3, #8
 8000742:	b299      	uxth	r1, r3
 8000744:	693b      	ldr	r3, [r7, #16]
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	6a3a      	ldr	r2, [r7, #32]
 800074a:	0052      	lsls	r2, r2, #1
 800074c:	3203      	adds	r2, #3
 800074e:	4413      	add	r3, r2
 8000750:	b2ca      	uxtb	r2, r1
 8000752:	701a      	strb	r2, [r3, #0]
          ctx->conf.sendbuf[3 + (i << 1) + 1] = d & 0xFF;
 8000754:	693b      	ldr	r3, [r7, #16]
 8000756:	699a      	ldr	r2, [r3, #24]
 8000758:	6a3b      	ldr	r3, [r7, #32]
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	3304      	adds	r3, #4
 800075e:	4413      	add	r3, r2
 8000760:	89fa      	ldrh	r2, [r7, #14]
 8000762:	b2d2      	uxtb	r2, r2
 8000764:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < ctx->header.num; i++)
 8000766:	6a3b      	ldr	r3, [r7, #32]
 8000768:	3301      	adds	r3, #1
 800076a:	623b      	str	r3, [r7, #32]
 800076c:	693b      	ldr	r3, [r7, #16]
 800076e:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000770:	461a      	mov	r2, r3
 8000772:	6a3b      	ldr	r3, [r7, #32]
 8000774:	4293      	cmp	r3, r2
 8000776:	dbd9      	blt.n	800072c <mbus_poll_response+0x16c>
        }
        if (g_userError == MBUS_RESPONSE_OK)
 8000778:	4b34      	ldr	r3, [pc, #208]	@ (800084c <mbus_poll_response+0x28c>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d10d      	bne.n	800079c <mbus_poll_response+0x1dc>
        {
          return mbus_send_data(mb_context, 3 + ctx->conf.sendbuf[2]);
 8000780:	693b      	ldr	r3, [r7, #16]
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	3302      	adds	r3, #2
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	3303      	adds	r3, #3
 800078a:	b29a      	uxth	r2, r3
 800078c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000790:	4611      	mov	r1, r2
 8000792:	4618      	mov	r0, r3
 8000794:	f000 fa9e 	bl	8000cd4 <mbus_send_data>
 8000798:	4603      	mov	r3, r0
 800079a:	e09d      	b.n	80008d8 <mbus_poll_response+0x318>
        }
        else
        {
          return mbus_response(mb_context, g_userError);
 800079c:	4b2b      	ldr	r3, [pc, #172]	@ (800084c <mbus_poll_response+0x28c>)
 800079e:	781a      	ldrb	r2, [r3, #0]
 80007a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a4:	4611      	mov	r1, r2
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff fef0 	bl	800058c <mbus_response>
 80007ac:	4603      	mov	r3, r0
 80007ae:	e093      	b.n	80008d8 <mbus_poll_response+0x318>
        }
      }
      else if (ctx->conf.write)
 80007b0:	693b      	ldr	r3, [r7, #16]
 80007b2:	695b      	ldr	r3, [r3, #20]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	f000 8088 	beq.w	80008ca <mbus_poll_response+0x30a>
      {
        uint16_t *value;
        ctx->conf.sendbuf[2] = 0;
 80007ba:	693b      	ldr	r3, [r7, #16]
 80007bc:	699b      	ldr	r3, [r3, #24]
 80007be:	3302      	adds	r3, #2
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]
        switch (ctx->header.func)
 80007c4:	693b      	ldr	r3, [r7, #16]
 80007c6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80007ca:	2b06      	cmp	r3, #6
 80007cc:	dc02      	bgt.n	80007d4 <mbus_poll_response+0x214>
 80007ce:	2b05      	cmp	r3, #5
 80007d0:	da03      	bge.n	80007da <mbus_poll_response+0x21a>
 80007d2:	e07a      	b.n	80008ca <mbus_poll_response+0x30a>
 80007d4:	2b10      	cmp	r3, #16
 80007d6:	d030      	beq.n	800083a <mbus_poll_response+0x27a>
 80007d8:	e077      	b.n	80008ca <mbus_poll_response+0x30a>
        case MBUS_FUNC_WRITE_REG:
        case MBUS_FUNC_WRITE_COIL:
          // in both these cases, we should return the same packet that we
          // received. in both cases, the packes have 6 bytes of data + 2 CRC
          // bytes = 8 bytes
          value = (uint16_t *)ctx->conf.recvbuf;
 80007da:	693b      	ldr	r3, [r7, #16]
 80007dc:	6a1b      	ldr	r3, [r3, #32]
 80007de:	61fb      	str	r3, [r7, #28]
          ctx->conf.write(la, *value);
 80007e0:	693b      	ldr	r3, [r7, #16]
 80007e2:	695b      	ldr	r3, [r3, #20]
 80007e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80007e6:	69fa      	ldr	r2, [r7, #28]
 80007e8:	8812      	ldrh	r2, [r2, #0]
 80007ea:	4611      	mov	r1, r2
 80007ec:	4798      	blx	r3
          ctx->conf.sendbuf[2] = ctx->header.addr >> 8;
 80007ee:	693b      	ldr	r3, [r7, #16]
 80007f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80007f2:	0a1b      	lsrs	r3, r3, #8
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	693b      	ldr	r3, [r7, #16]
 80007f8:	699b      	ldr	r3, [r3, #24]
 80007fa:	3302      	adds	r3, #2
 80007fc:	b2d2      	uxtb	r2, r2
 80007fe:	701a      	strb	r2, [r3, #0]
          ctx->conf.sendbuf[3] = ctx->header.addr & 0xFF;
 8000800:	693b      	ldr	r3, [r7, #16]
 8000802:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8000804:	693b      	ldr	r3, [r7, #16]
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	3303      	adds	r3, #3
 800080a:	b2d2      	uxtb	r2, r2
 800080c:	701a      	strb	r2, [r3, #0]
          ctx->conf.sendbuf[4] = ctx->conf.recvbuf[1];
 800080e:	693b      	ldr	r3, [r7, #16]
 8000810:	6a1a      	ldr	r2, [r3, #32]
 8000812:	693b      	ldr	r3, [r7, #16]
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	3304      	adds	r3, #4
 8000818:	7852      	ldrb	r2, [r2, #1]
 800081a:	701a      	strb	r2, [r3, #0]
          ctx->conf.sendbuf[5] = ctx->conf.recvbuf[0];
 800081c:	693b      	ldr	r3, [r7, #16]
 800081e:	6a1a      	ldr	r2, [r3, #32]
 8000820:	693b      	ldr	r3, [r7, #16]
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	3305      	adds	r3, #5
 8000826:	7812      	ldrb	r2, [r2, #0]
 8000828:	701a      	strb	r2, [r3, #0]
          return mbus_send_data(mb_context, 6);
 800082a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082e:	2106      	movs	r1, #6
 8000830:	4618      	mov	r0, r3
 8000832:	f000 fa4f 	bl	8000cd4 <mbus_send_data>
 8000836:	4603      	mov	r3, r0
 8000838:	e04e      	b.n	80008d8 <mbus_poll_response+0x318>

        case MBUS_FUNC_WRITE_REGS:
          value = (uint16_t *)ctx->conf.recvbuf;
 800083a:	693b      	ldr	r3, [r7, #16]
 800083c:	6a1b      	ldr	r3, [r3, #32]
 800083e:	61fb      	str	r3, [r7, #28]
          for (int i = 0; i < ctx->header.num; i++)
 8000840:	2300      	movs	r3, #0
 8000842:	61bb      	str	r3, [r7, #24]
 8000844:	e013      	b.n	800086e <mbus_poll_response+0x2ae>
 8000846:	bf00      	nop
 8000848:	20000164 	.word	0x20000164
 800084c:	200001a8 	.word	0x200001a8
          {
            ctx->conf.write(la + i, *value++);
 8000850:	693b      	ldr	r3, [r7, #16]
 8000852:	695a      	ldr	r2, [r3, #20]
 8000854:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000856:	69bb      	ldr	r3, [r7, #24]
 8000858:	440b      	add	r3, r1
 800085a:	4618      	mov	r0, r3
 800085c:	69fb      	ldr	r3, [r7, #28]
 800085e:	1c99      	adds	r1, r3, #2
 8000860:	61f9      	str	r1, [r7, #28]
 8000862:	881b      	ldrh	r3, [r3, #0]
 8000864:	4619      	mov	r1, r3
 8000866:	4790      	blx	r2
          for (int i = 0; i < ctx->header.num; i++)
 8000868:	69bb      	ldr	r3, [r7, #24]
 800086a:	3301      	adds	r3, #1
 800086c:	61bb      	str	r3, [r7, #24]
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000872:	461a      	mov	r2, r3
 8000874:	69bb      	ldr	r3, [r7, #24]
 8000876:	4293      	cmp	r3, r2
 8000878:	dbea      	blt.n	8000850 <mbus_poll_response+0x290>
          }
          ctx->conf.sendbuf[2] = ctx->header.addr >> 8;
 800087a:	693b      	ldr	r3, [r7, #16]
 800087c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800087e:	0a1b      	lsrs	r3, r3, #8
 8000880:	b29a      	uxth	r2, r3
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	3302      	adds	r3, #2
 8000888:	b2d2      	uxtb	r2, r2
 800088a:	701a      	strb	r2, [r3, #0]
          ctx->conf.sendbuf[3] = ctx->header.addr & 0xFF;
 800088c:	693b      	ldr	r3, [r7, #16]
 800088e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8000890:	693b      	ldr	r3, [r7, #16]
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	3303      	adds	r3, #3
 8000896:	b2d2      	uxtb	r2, r2
 8000898:	701a      	strb	r2, [r3, #0]
          ctx->conf.sendbuf[4] = ctx->header.num >> 8;
 800089a:	693b      	ldr	r3, [r7, #16]
 800089c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800089e:	0a1b      	lsrs	r3, r3, #8
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	3304      	adds	r3, #4
 80008a8:	b2d2      	uxtb	r2, r2
 80008aa:	701a      	strb	r2, [r3, #0]
          ctx->conf.sendbuf[5] = ctx->header.num & 0xFF;
 80008ac:	693b      	ldr	r3, [r7, #16]
 80008ae:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	3305      	adds	r3, #5
 80008b6:	b2d2      	uxtb	r2, r2
 80008b8:	701a      	strb	r2, [r3, #0]
          return mbus_send_data(mb_context, 6);
 80008ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008be:	2106      	movs	r1, #6
 80008c0:	4618      	mov	r0, r3
 80008c2:	f000 fa07 	bl	8000cd4 <mbus_send_data>
 80008c6:	4603      	mov	r3, r0
 80008c8:	e006      	b.n	80008d8 <mbus_poll_response+0x318>
        } // end of switch
      }
    }
    return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_FUNCTION);
 80008ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ce:	2101      	movs	r1, #1
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff fe5b 	bl	800058c <mbus_response>
 80008d6:	4603      	mov	r3, r0
  }
 80008d8:	4618      	mov	r0, r3
 80008da:	3728      	adds	r7, #40	@ 0x28
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <mbus_poll>:
   * function mbus_close()
   * close modbus context
   * return: none
   */
  mbus_status_t mbus_poll(mbus_t mb_context, uint8_t byte)
  {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	460a      	mov	r2, r1
 80008ea:	71fb      	strb	r3, [r7, #7]
 80008ec:	4613      	mov	r3, r2
 80008ee:	71bb      	strb	r3, [r7, #6]
    // State machine
    _stmodbus_context_t *ctx = &g_mbusContext[mb_context];
 80008f0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80008f4:	4613      	mov	r3, r2
 80008f6:	011b      	lsls	r3, r3, #4
 80008f8:	4413      	add	r3, r2
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	4ab1      	ldr	r2, [pc, #708]	@ (8000bc4 <mbus_poll+0x2e4>)
 80008fe:	4413      	add	r3, r2
 8000900:	60fb      	str	r3, [r7, #12]

    if (mbus_tickcount() - ctx->timer > 4)
 8000902:	f7ff fdc1 	bl	8000488 <mbus_tickcount>
 8000906:	4602      	mov	r2, r0
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800090c:	1ad3      	subs	r3, r2, r3
 800090e:	2b04      	cmp	r3, #4
 8000910:	d904      	bls.n	800091c <mbus_poll+0x3c>
    {
      mbus_flush(mb_context);
 8000912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff fe12 	bl	8000540 <mbus_flush>
    }
    ctx->timer = mbus_tickcount();
 800091c:	f7ff fdb4 	bl	8000488 <mbus_tickcount>
 8000920:	4602      	mov	r2, r0
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	62da      	str	r2, [r3, #44]	@ 0x2c

    switch (ctx->state)
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800092c:	2b0e      	cmp	r3, #14
 800092e:	f200 8153 	bhi.w	8000bd8 <mbus_poll+0x2f8>
 8000932:	a201      	add	r2, pc, #4	@ (adr r2, 8000938 <mbus_poll+0x58>)
 8000934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000938:	08000975 	.word	0x08000975
 800093c:	08000bd9 	.word	0x08000bd9
 8000940:	08000991 	.word	0x08000991
 8000944:	08000a65 	.word	0x08000a65
 8000948:	08000a4f 	.word	0x08000a4f
 800094c:	08000b6b 	.word	0x08000b6b
 8000950:	08000b55 	.word	0x08000b55
 8000954:	08000abd 	.word	0x08000abd
 8000958:	08000a99 	.word	0x08000a99
 800095c:	08000afd 	.word	0x08000afd
 8000960:	08000b17 	.word	0x08000b17
 8000964:	08000bb9 	.word	0x08000bb9
 8000968:	08000bc9 	.word	0x08000bc9
 800096c:	08000bd9 	.word	0x08000bd9
 8000970:	08000bd3 	.word	0x08000bd3
    {
    case MBUS_STATE_IDLE:
      mbus_flush(mb_context);
 8000974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff fde1 	bl	8000540 <mbus_flush>
      ctx->state = MBUS_STATE_FUNCTION;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	2202      	movs	r2, #2
 8000982:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      ctx->header.devaddr = byte;
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	79ba      	ldrb	r2, [r7, #6]
 800098a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      break;
 800098e:	e12c      	b.n	8000bea <mbus_poll+0x30a>
    case MBUS_STATE_FUNCTION:
      ctx->header.func = byte;
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	79ba      	ldrb	r2, [r7, #6]
 8000994:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      switch (byte)
 8000998:	79bb      	ldrb	r3, [r7, #6]
 800099a:	3b01      	subs	r3, #1
 800099c:	2b0f      	cmp	r3, #15
 800099e:	d84f      	bhi.n	8000a40 <mbus_poll+0x160>
 80009a0:	a201      	add	r2, pc, #4	@ (adr r2, 80009a8 <mbus_poll+0xc8>)
 80009a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a6:	bf00      	nop
 80009a8:	08000a15 	.word	0x08000a15
 80009ac:	08000a41 	.word	0x08000a41
 80009b0:	08000a15 	.word	0x08000a15
 80009b4:	08000a15 	.word	0x08000a15
 80009b8:	08000a2b 	.word	0x08000a2b
 80009bc:	080009e9 	.word	0x080009e9
 80009c0:	08000a41 	.word	0x08000a41
 80009c4:	08000a41 	.word	0x08000a41
 80009c8:	08000a41 	.word	0x08000a41
 80009cc:	08000a41 	.word	0x08000a41
 80009d0:	08000a41 	.word	0x08000a41
 80009d4:	08000a41 	.word	0x08000a41
 80009d8:	08000a41 	.word	0x08000a41
 80009dc:	08000a41 	.word	0x08000a41
 80009e0:	080009ff 	.word	0x080009ff
 80009e4:	080009ff 	.word	0x080009ff
      {
      case MBUS_FUNC_WRITE_REG:
        ctx->header.rnum = 1;
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	2201      	movs	r2, #1
 80009ec:	86da      	strh	r2, [r3, #54]	@ 0x36
        ctx->header.num = 1;
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	2201      	movs	r2, #1
 80009f2:	869a      	strh	r2, [r3, #52]	@ 0x34
        ctx->state = MBUS_STATE_REGADDR_HI;
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	2204      	movs	r2, #4
 80009f8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        break;
 80009fc:	e026      	b.n	8000a4c <mbus_poll+0x16c>
      case MBUS_FUNC_WRITE_REGS:
      case MBUS_FUNC_WRITE_COILS:
        ctx->header.rnum = 1;
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	2201      	movs	r2, #1
 8000a02:	86da      	strh	r2, [r3, #54]	@ 0x36
        ctx->header.num = 0;
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	2200      	movs	r2, #0
 8000a08:	869a      	strh	r2, [r3, #52]	@ 0x34
        ctx->state = MBUS_STATE_REGADDR_HI;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	2204      	movs	r2, #4
 8000a0e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        break;
 8000a12:	e01b      	b.n	8000a4c <mbus_poll+0x16c>
      case MBUS_FUNC_READ_INPUT_REGS:
      case MBUS_FUNC_READ_COILS:
      case MBUS_FUNC_READ_REGS:
        ctx->state = MBUS_STATE_REGADDR_HI;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	2204      	movs	r2, #4
 8000a18:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        ctx->header.rnum = 0;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	86da      	strh	r2, [r3, #54]	@ 0x36
        ctx->header.num = 0;
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	2200      	movs	r2, #0
 8000a26:	869a      	strh	r2, [r3, #52]	@ 0x34
        break;
 8000a28:	e010      	b.n	8000a4c <mbus_poll+0x16c>
      case MBUS_FUNC_WRITE_COIL:
        ctx->header.rnum = 1;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	86da      	strh	r2, [r3, #54]	@ 0x36
        ctx->header.num = 1;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	2201      	movs	r2, #1
 8000a34:	869a      	strh	r2, [r3, #52]	@ 0x34
        ctx->state = MBUS_STATE_REGADDR_HI;
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	2204      	movs	r2, #4
 8000a3a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        break;
 8000a3e:	e005      	b.n	8000a4c <mbus_poll+0x16c>
      default:
        // ctx->state = MBUS_STATE_IDLE;
        mbus_flush(mb_context);
 8000a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fd7b 	bl	8000540 <mbus_flush>
        break;
 8000a4a:	bf00      	nop
      }
      break;
 8000a4c:	e0cd      	b.n	8000bea <mbus_poll+0x30a>
    case MBUS_STATE_REGADDR_HI:
      ctx->state = MBUS_STATE_REGADDR_LO;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	2203      	movs	r2, #3
 8000a52:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      ctx->header.addr = byte << 8;
 8000a56:	79bb      	ldrb	r3, [r7, #6]
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	021b      	lsls	r3, r3, #8
 8000a5c:	b29a      	uxth	r2, r3
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	865a      	strh	r2, [r3, #50]	@ 0x32
      break;
 8000a62:	e0c2      	b.n	8000bea <mbus_poll+0x30a>
    case MBUS_STATE_REGADDR_LO:
      ctx->header.addr |= byte;
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8000a68:	79bb      	ldrb	r3, [r7, #6]
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	b29a      	uxth	r2, r3
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	865a      	strh	r2, [r3, #50]	@ 0x32
      if (ctx->header.num == 1 && ctx->header.rnum == 1)
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d108      	bne.n	8000a8e <mbus_poll+0x1ae>
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d104      	bne.n	8000a8e <mbus_poll+0x1ae>
      {
        ctx->state = MBUS_STATE_DATA_HI;
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	2208      	movs	r2, #8
 8000a88:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      }
      else
      {
        ctx->state = MBUS_STATE_REGNUM_HI;
      }
      break;
 8000a8c:	e0ad      	b.n	8000bea <mbus_poll+0x30a>
        ctx->state = MBUS_STATE_REGNUM_HI;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	2206      	movs	r2, #6
 8000a92:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      break;
 8000a96:	e0a8      	b.n	8000bea <mbus_poll+0x30a>
    case MBUS_STATE_DATA_HI:
      ctx->state = MBUS_STATE_DATA_LO;
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	2207      	movs	r2, #7
 8000a9c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      ctx->conf.recvbuf[2 * (ctx->header.num - ctx->header.rnum) + 1] = byte;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	6a1a      	ldr	r2, [r3, #32]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000aae:	1acb      	subs	r3, r1, r3
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	4413      	add	r3, r2
 8000ab6:	79ba      	ldrb	r2, [r7, #6]
 8000ab8:	701a      	strb	r2, [r3, #0]
      break;
 8000aba:	e096      	b.n	8000bea <mbus_poll+0x30a>
    case MBUS_STATE_DATA_LO:
      ctx->conf.recvbuf[2 * (ctx->header.num - ctx->header.rnum)] = byte;
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	6a1b      	ldr	r3, [r3, #32]
 8000ac0:	68fa      	ldr	r2, [r7, #12]
 8000ac2:	8e92      	ldrh	r2, [r2, #52]	@ 0x34
 8000ac4:	4611      	mov	r1, r2
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	8ed2      	ldrh	r2, [r2, #54]	@ 0x36
 8000aca:	1a8a      	subs	r2, r1, r2
 8000acc:	0052      	lsls	r2, r2, #1
 8000ace:	4413      	add	r3, r2
 8000ad0:	79ba      	ldrb	r2, [r7, #6]
 8000ad2:	701a      	strb	r2, [r3, #0]
      ctx->header.rnum--;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000ad8:	3b01      	subs	r3, #1
 8000ada:	b29a      	uxth	r2, r3
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	86da      	strh	r2, [r3, #54]	@ 0x36
      if (ctx->header.rnum == 0)
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d104      	bne.n	8000af2 <mbus_poll+0x212>
      {
        ctx->state = MBUS_STATE_CRC_LO;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	220b      	movs	r2, #11
 8000aec:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      }
      else
      {
        ctx->state = MBUS_STATE_DATA_HI;
      }
      break;
 8000af0:	e07b      	b.n	8000bea <mbus_poll+0x30a>
        ctx->state = MBUS_STATE_DATA_HI;
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	2208      	movs	r2, #8
 8000af6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      break;
 8000afa:	e076      	b.n	8000bea <mbus_poll+0x30a>
    case MBUS_STATE_DATA_SIZE:
      ctx->state = MBUS_STATE_DATA;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	220a      	movs	r2, #10
 8000b00:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      ctx->header.size = byte;
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	79ba      	ldrb	r2, [r7, #6]
 8000b08:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
      ctx->header.rsize = byte;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	79ba      	ldrb	r2, [r7, #6]
 8000b10:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
      break;
 8000b14:	e069      	b.n	8000bea <mbus_poll+0x30a>
    case MBUS_STATE_DATA:
      ctx->conf.recvbuf[ctx->header.size - ctx->header.rsize] = byte;
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	6a1b      	ldr	r3, [r3, #32]
 8000b1a:	68fa      	ldr	r2, [r7, #12]
 8000b1c:	f892 2038 	ldrb.w	r2, [r2, #56]	@ 0x38
 8000b20:	4611      	mov	r1, r2
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 8000b28:	1a8a      	subs	r2, r1, r2
 8000b2a:	4413      	add	r3, r2
 8000b2c:	79ba      	ldrb	r2, [r7, #6]
 8000b2e:	701a      	strb	r2, [r3, #0]
      ctx->header.rsize--;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8000b36:	3b01      	subs	r3, #1
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
      if (ctx->header.rsize == 0)
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14c      	bne.n	8000be4 <mbus_poll+0x304>
      {
        ctx->state = MBUS_STATE_CRC_LO;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	220b      	movs	r2, #11
 8000b4e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      }
      break;
 8000b52:	e047      	b.n	8000be4 <mbus_poll+0x304>
    case MBUS_STATE_REGNUM_HI:
      ctx->state = MBUS_STATE_REGNUM_LO;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	2205      	movs	r2, #5
 8000b58:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      ctx->header.num = byte << 8;
 8000b5c:	79bb      	ldrb	r3, [r7, #6]
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	021b      	lsls	r3, r3, #8
 8000b62:	b29a      	uxth	r2, r3
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	869a      	strh	r2, [r3, #52]	@ 0x34
      break;
 8000b68:	e03f      	b.n	8000bea <mbus_poll+0x30a>
    case MBUS_STATE_REGNUM_LO:
      ctx->state = MBUS_STATE_CRC_LO;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	220b      	movs	r2, #11
 8000b6e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      ctx->header.num |= byte;
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8000b76:	79bb      	ldrb	r3, [r7, #6]
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	b29a      	uxth	r2, r3
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	869a      	strh	r2, [r3, #52]	@ 0x34
      if (ctx->header.rnum == 0)
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d104      	bne.n	8000b94 <mbus_poll+0x2b4>
      {
        ctx->state = MBUS_STATE_CRC_LO;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	220b      	movs	r2, #11
 8000b8e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        {
          ctx->state = MBUS_STATE_DATA_SIZE;
        }
      }

      break;
 8000b92:	e029      	b.n	8000be8 <mbus_poll+0x308>
        ctx->header.rnum = ctx->header.num;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	86da      	strh	r2, [r3, #54]	@ 0x36
        ctx->state = MBUS_STATE_DATA_HI;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	2208      	movs	r2, #8
 8000ba0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        if (ctx->header.func == MBUS_FUNC_WRITE_REGS)
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8000baa:	2b10      	cmp	r3, #16
 8000bac:	d11c      	bne.n	8000be8 <mbus_poll+0x308>
          ctx->state = MBUS_STATE_DATA_SIZE;
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	2209      	movs	r2, #9
 8000bb2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      break;
 8000bb6:	e017      	b.n	8000be8 <mbus_poll+0x308>
    case MBUS_STATE_CRC_LO:
      ctx->state = MBUS_STATE_CRC_HI;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	220c      	movs	r2, #12
 8000bbc:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      break;
 8000bc0:	e013      	b.n	8000bea <mbus_poll+0x30a>
 8000bc2:	bf00      	nop
 8000bc4:	20000164 	.word	0x20000164
    case MBUS_STATE_CRC_HI:
      ctx->state = MBUS_STATE_FINISH;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	220d      	movs	r2, #13
 8000bcc:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      break;
 8000bd0:	e00b      	b.n	8000bea <mbus_poll+0x30a>
    // We can't processing any more before callback not returned
    case MBUS_STATE_RESPONSE:
      return MBUS_ERROR;
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd6:	e04c      	b.n	8000c72 <mbus_poll+0x392>
    default:
      mbus_flush(mb_context);
 8000bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff fcaf 	bl	8000540 <mbus_flush>
      break;
 8000be2:	e002      	b.n	8000bea <mbus_poll+0x30a>
      break;
 8000be4:	bf00      	nop
 8000be6:	e000      	b.n	8000bea <mbus_poll+0x30a>
      break;
 8000be8:	bf00      	nop
    }

    ctx->crc16 = mbus_crc16(ctx->crc16, byte);
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000bee:	79ba      	ldrb	r2, [r7, #6]
 8000bf0:	4611      	mov	r1, r2
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fc1c 	bl	8000430 <mbus_crc16>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (ctx->state == MBUS_STATE_FINISH)
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8000c06:	2b0d      	cmp	r3, #13
 8000c08:	d132      	bne.n	8000c70 <mbus_poll+0x390>
    {
      // CRC error
      if (ctx->crc16 != 0)
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d007      	beq.n	8000c22 <mbus_poll+0x342>
      {
        mbus_flush(mb_context);
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff fc92 	bl	8000540 <mbus_flush>
        return MBUS_ERROR;
 8000c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c20:	e027      	b.n	8000c72 <mbus_poll+0x392>
      }

      // TODO: Add broadcast messages
      if (ctx->header.devaddr == ctx->conf.devaddr)
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d11a      	bne.n	8000c66 <mbus_poll+0x386>
      {
        ctx->state = MBUS_STATE_RESPONSE;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	220e      	movs	r2, #14
 8000c34:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        if (mbus_poll_response(mb_context) == MBUS_OK)
 8000c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fcbf 	bl	80005c0 <mbus_poll_response>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d106      	bne.n	8000c56 <mbus_poll+0x376>
        {
          mbus_flush(mb_context);
 8000c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff fc77 	bl	8000540 <mbus_flush>
          return MBUS_OK;
 8000c52:	2300      	movs	r3, #0
 8000c54:	e00d      	b.n	8000c72 <mbus_poll+0x392>
        }
        mbus_flush(mb_context);
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fc70 	bl	8000540 <mbus_flush>
        return MBUS_ERROR;
 8000c60:	f04f 33ff 	mov.w	r3, #4294967295
 8000c64:	e005      	b.n	8000c72 <mbus_poll+0x392>
      }
      mbus_flush(mb_context);
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fc68 	bl	8000540 <mbus_flush>
    }
    return MBUS_OK;
 8000c70:	2300      	movs	r3, #0
  }
 8000c72:	4618      	mov	r0, r3
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop

08000c7c <mbus_send_error>:
      return (mbus_context_t)&g_mbusContext[mb_context];
    return 0;
  }

  mbus_status_t mbus_send_error(mbus_t mb_context, Modbus_ResponseType response)
  {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	460a      	mov	r2, r1
 8000c86:	71fb      	strb	r3, [r7, #7]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	71bb      	strb	r3, [r7, #6]
    uint16_t *pbuf = (uint16_t *)(g_mbusContext[mb_context].conf.sendbuf + 2);
 8000c8c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000c90:	490e      	ldr	r1, [pc, #56]	@ (8000ccc <mbus_send_error+0x50>)
 8000c92:	4613      	mov	r3, r2
 8000c94:	011b      	lsls	r3, r3, #4
 8000c96:	4413      	add	r3, r2
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	440b      	add	r3, r1
 8000c9c:	3318      	adds	r3, #24
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	3302      	adds	r3, #2
 8000ca2:	60fb      	str	r3, [r7, #12]
    *pbuf = 0x8300 | (uint8_t)response;
 8000ca4:	79bb      	ldrb	r3, [r7, #6]
 8000ca6:	b21a      	sxth	r2, r3
 8000ca8:	4b09      	ldr	r3, [pc, #36]	@ (8000cd0 <mbus_send_error+0x54>)
 8000caa:	4313      	orrs	r3, r2
 8000cac:	b21b      	sxth	r3, r3
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	801a      	strh	r2, [r3, #0]
    return mbus_send_data(mb_context, 4);
 8000cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb8:	2104      	movs	r1, #4
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 f80a 	bl	8000cd4 <mbus_send_data>
 8000cc0:	4603      	mov	r3, r0
  }
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000164 	.word	0x20000164
 8000cd0:	ffff8300 	.word	0xffff8300

08000cd4 <mbus_send_data>:

  mbus_status_t mbus_send_data(mbus_t mb_context, uint16_t size)
  {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	460a      	mov	r2, r1
 8000cde:	71fb      	strb	r3, [r7, #7]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	80bb      	strh	r3, [r7, #4]
    // if size > ( conf.send_sz-2) error
    uint16_t crc32 = 0xFFFF;
 8000ce4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ce8:	82fb      	strh	r3, [r7, #22]
    const _stmodbus_context_t *ctx = &g_mbusContext[mb_context];
 8000cea:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	011b      	lsls	r3, r3, #4
 8000cf2:	4413      	add	r3, r2
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	4a29      	ldr	r2, [pc, #164]	@ (8000d9c <mbus_send_data+0xc8>)
 8000cf8:	4413      	add	r3, r2
 8000cfa:	60fb      	str	r3, [r7, #12]
    uint8_t *pbuf = ctx->conf.sendbuf;
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	60bb      	str	r3, [r7, #8]
    if (ctx->conf.send == 0 || pbuf == 0 || ctx->conf.sendbuf_sz < (size + 2))
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d008      	beq.n	8000d1c <mbus_send_data+0x48>
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d005      	beq.n	8000d1c <mbus_send_data+0x48>
 8000d10:	88bb      	ldrh	r3, [r7, #4]
 8000d12:	3301      	adds	r3, #1
 8000d14:	68fa      	ldr	r2, [r7, #12]
 8000d16:	8b92      	ldrh	r2, [r2, #28]
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	db02      	blt.n	8000d22 <mbus_send_data+0x4e>
      return MBUS_ERROR;
 8000d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d20:	e037      	b.n	8000d92 <mbus_send_data+0xbe>
    for (int i = 0; i < size; i++)
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	e00d      	b.n	8000d44 <mbus_send_data+0x70>
    {
      crc32 = mbus_crc16(crc32, pbuf[i]);
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	781a      	ldrb	r2, [r3, #0]
 8000d30:	8afb      	ldrh	r3, [r7, #22]
 8000d32:	4611      	mov	r1, r2
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fb7b 	bl	8000430 <mbus_crc16>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	82fb      	strh	r3, [r7, #22]
    for (int i = 0; i < size; i++)
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	3301      	adds	r3, #1
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	88bb      	ldrh	r3, [r7, #4]
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	dbed      	blt.n	8000d28 <mbus_send_data+0x54>
    }
    pbuf[size++] = crc32 & 0xFF;
 8000d4c:	88bb      	ldrh	r3, [r7, #4]
 8000d4e:	1c5a      	adds	r2, r3, #1
 8000d50:	80ba      	strh	r2, [r7, #4]
 8000d52:	461a      	mov	r2, r3
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	4413      	add	r3, r2
 8000d58:	8afa      	ldrh	r2, [r7, #22]
 8000d5a:	b2d2      	uxtb	r2, r2
 8000d5c:	701a      	strb	r2, [r3, #0]
    pbuf[size++] = (crc32 >> 8);
 8000d5e:	8afb      	ldrh	r3, [r7, #22]
 8000d60:	0a1b      	lsrs	r3, r3, #8
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	88bb      	ldrh	r3, [r7, #4]
 8000d66:	1c59      	adds	r1, r3, #1
 8000d68:	80b9      	strh	r1, [r7, #4]
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	440b      	add	r3, r1
 8000d70:	b2d2      	uxtb	r2, r2
 8000d72:	701a      	strb	r2, [r3, #0]

    if (ctx->conf.send(mb_context, pbuf, size) != size)
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	88ba      	ldrh	r2, [r7, #4]
 8000d7a:	f997 0007 	ldrsb.w	r0, [r7, #7]
 8000d7e:	68b9      	ldr	r1, [r7, #8]
 8000d80:	4798      	blx	r3
 8000d82:	4602      	mov	r2, r0
 8000d84:	88bb      	ldrh	r3, [r7, #4]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d002      	beq.n	8000d90 <mbus_send_data+0xbc>
      return MBUS_ERROR;
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8e:	e000      	b.n	8000d92 <mbus_send_data+0xbe>
    return MBUS_OK;
 8000d90:	2300      	movs	r3, #0
  }
 8000d92:	4618      	mov	r0, r3
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000164 	.word	0x20000164

08000da0 <mbus_proto_address>:
#endif
    return MBUS_ERROR;
  }

  int mbus_proto_address(Modbus_ConnectFuncType func, int *r)
  {
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	6039      	str	r1, [r7, #0]
 8000daa:	71fb      	strb	r3, [r7, #7]
    int adr = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
    *r = 1;
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	2201      	movs	r2, #1
 8000db4:	601a      	str	r2, [r3, #0]
    switch (func)
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	2b17      	cmp	r3, #23
 8000dba:	dc3f      	bgt.n	8000e3c <mbus_proto_address+0x9c>
 8000dbc:	2b04      	cmp	r3, #4
 8000dbe:	da08      	bge.n	8000dd2 <mbus_proto_address+0x32>
 8000dc0:	2b03      	cmp	r3, #3
 8000dc2:	d029      	beq.n	8000e18 <mbus_proto_address+0x78>
 8000dc4:	2b03      	cmp	r3, #3
 8000dc6:	dc39      	bgt.n	8000e3c <mbus_proto_address+0x9c>
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d034      	beq.n	8000e36 <mbus_proto_address+0x96>
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d02b      	beq.n	8000e28 <mbus_proto_address+0x88>
      *r = 0;
    case MBUS_FUNC_READ_COILS:
      adr = 0001;
      break;
    default:
      break;
 8000dd0:	e034      	b.n	8000e3c <mbus_proto_address+0x9c>
    switch (func)
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	4093      	lsls	r3, r2
 8000dd8:	4a1c      	ldr	r2, [pc, #112]	@ (8000e4c <mbus_proto_address+0xac>)
 8000dda:	401a      	ands	r2, r3
 8000ddc:	2a00      	cmp	r2, #0
 8000dde:	bf14      	ite	ne
 8000de0:	2201      	movne	r2, #1
 8000de2:	2200      	moveq	r2, #0
 8000de4:	b2d2      	uxtb	r2, r2
 8000de6:	2a00      	cmp	r2, #0
 8000de8:	d113      	bne.n	8000e12 <mbus_proto_address+0x72>
 8000dea:	f248 0220 	movw	r2, #32800	@ 0x8020
 8000dee:	401a      	ands	r2, r3
 8000df0:	2a00      	cmp	r2, #0
 8000df2:	bf14      	ite	ne
 8000df4:	2201      	movne	r2, #1
 8000df6:	2200      	moveq	r2, #0
 8000df8:	b2d2      	uxtb	r2, r2
 8000dfa:	2a00      	cmp	r2, #0
 8000dfc:	d118      	bne.n	8000e30 <mbus_proto_address+0x90>
 8000dfe:	f003 0310 	and.w	r3, r3, #16
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	bf14      	ite	ne
 8000e06:	2301      	movne	r3, #1
 8000e08:	2300      	moveq	r3, #0
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d107      	bne.n	8000e20 <mbus_proto_address+0x80>
      break;
 8000e10:	e014      	b.n	8000e3c <mbus_proto_address+0x9c>
      *r = 0;
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
      adr = 40001;
 8000e18:	f649 4341 	movw	r3, #40001	@ 0x9c41
 8000e1c:	60fb      	str	r3, [r7, #12]
      break;
 8000e1e:	e00e      	b.n	8000e3e <mbus_proto_address+0x9e>
      adr = 30001;
 8000e20:	f247 5331 	movw	r3, #30001	@ 0x7531
 8000e24:	60fb      	str	r3, [r7, #12]
      break;
 8000e26:	e00a      	b.n	8000e3e <mbus_proto_address+0x9e>
      adr = 10001;
 8000e28:	f242 7311 	movw	r3, #10001	@ 0x2711
 8000e2c:	60fb      	str	r3, [r7, #12]
      break;
 8000e2e:	e006      	b.n	8000e3e <mbus_proto_address+0x9e>
      *r = 0;
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
      adr = 0001;
 8000e36:	2301      	movs	r3, #1
 8000e38:	60fb      	str	r3, [r7, #12]
      break;
 8000e3a:	e000      	b.n	8000e3e <mbus_proto_address+0x9e>
      break;
 8000e3c:	bf00      	nop
    }
    return adr;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
  }
 8000e40:	4618      	mov	r0, r3
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	00c10040 	.word	0x00c10040

08000e50 <Modbus_Device_Read>:
 * @brief  Modbus device read callback
 * @param  logical_address: Modbus logical address (40001, 40002, etc.)
 * @retval Register value
 */
uint16_t Modbus_Device_Read(uint32_t logical_address)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
    // Simple direct array access like the sample code
    if (logical_address >= 40001 && logical_address <= 40020)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d911      	bls.n	8000e86 <Modbus_Device_Read+0x36>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f649 4254 	movw	r2, #40020	@ 0x9c54
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d80c      	bhi.n	8000e86 <Modbus_Device_Read+0x36>
    {
        uint16_t index = logical_address - 40001;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	f503 43c7 	add.w	r3, r3, #25472	@ 0x6380
 8000e74:	333f      	adds	r3, #63	@ 0x3f
 8000e76:	81fb      	strh	r3, [r7, #14]
        uint16_t value = device_registers[index];
 8000e78:	89fb      	ldrh	r3, [r7, #14]
 8000e7a:	4a06      	ldr	r2, [pc, #24]	@ (8000e94 <Modbus_Device_Read+0x44>)
 8000e7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e80:	81bb      	strh	r3, [r7, #12]

        // Debug: Show what we're returning for ALL registers
        // printf("READ: addr=%lu, index=%d, returning %d (0x%04X)\n", logical_address, index, value, value); // Removed to prevent timeouts

        return value;
 8000e82:	89bb      	ldrh	r3, [r7, #12]
 8000e84:	e000      	b.n	8000e88 <Modbus_Device_Read+0x38>
    }

    return 0; // Invalid address
 8000e86:	2300      	movs	r3, #0
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	20000000 	.word	0x20000000

08000e98 <Modbus_Device_Write>:
 * @param  logical_address: Modbus logical address (40001, 40002, etc.)
 * @param  value: Value to write
 * @retval Written value
 */
uint16_t Modbus_Device_Write(uint32_t logical_address, uint16_t value)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	807b      	strh	r3, [r7, #2]
    // Convert logical address to array index
    if (logical_address >= 40001 && logical_address <= 40020)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d926      	bls.n	8000efc <Modbus_Device_Write+0x64>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f649 4254 	movw	r2, #40020	@ 0x9c54
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d821      	bhi.n	8000efc <Modbus_Device_Write+0x64>
    {
        uint16_t index = logical_address - 40001;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	f503 43c7 	add.w	r3, r3, #25472	@ 0x6380
 8000ec0:	333f      	adds	r3, #63	@ 0x3f
 8000ec2:	81fb      	strh	r3, [r7, #14]

        // Handle special write operations
        switch (logical_address)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f5a3 431c 	sub.w	r3, r3, #39936	@ 0x9c00
 8000eca:	3b4f      	subs	r3, #79	@ 0x4f
 8000ecc:	2b04      	cmp	r3, #4
 8000ece:	d80d      	bhi.n	8000eec <Modbus_Device_Write+0x54>
 8000ed0:	a201      	add	r2, pc, #4	@ (adr r2, 8000ed8 <Modbus_Device_Write+0x40>)
 8000ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed6:	bf00      	nop
 8000ed8:	08000eed 	.word	0x08000eed
 8000edc:	08000eed 	.word	0x08000eed
 8000ee0:	08000eed 	.word	0x08000eed
 8000ee4:	08000eed 	.word	0x08000eed
 8000ee8:	08000eed 	.word	0x08000eed
            // Handle test operations
            break;

        default:
            // Store value for other registers
            break;
 8000eec:	bf00      	nop
        }

        // Store the value
        device_registers[index] = value;
 8000eee:	89fb      	ldrh	r3, [r7, #14]
 8000ef0:	4906      	ldr	r1, [pc, #24]	@ (8000f0c <Modbus_Device_Write+0x74>)
 8000ef2:	887a      	ldrh	r2, [r7, #2]
 8000ef4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        return value;
 8000ef8:	887b      	ldrh	r3, [r7, #2]
 8000efa:	e000      	b.n	8000efe <Modbus_Device_Write+0x66>
    }

    return 0; // Invalid address
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3714      	adds	r7, #20
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000000 	.word	0x20000000

08000f10 <Modbus_Device_UpdateSensors>:
 * @brief  Update sensor values (call this periodically)
 * @param  None
 * @retval None
 */
void Modbus_Device_UpdateSensors(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
    // device_registers[0] = Read_Sensor1_Value();  // 40001
    // device_registers[1] = Read_Sensor2_Value();  // 40002
    // device_registers[4] = Read_Temperature();    // 40005
    // device_registers[5] = Read_Humidity();       // 40006
    // etc.
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
	...

08000f20 <Modbus_Init>:
 * @brief  Initialize Modbus RTU slave
 * @param  None
 * @retval None
 */
void Modbus_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
    // printf("Initializing Modbus...\n"); // Removed to prevent timing delays

    // Configure Modbus
    modbus_config.devaddr = 0x01; // Slave address
 8000f24:	4b3a      	ldr	r3, [pc, #232]	@ (8001010 <Modbus_Init+0xf0>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	701a      	strb	r2, [r3, #0]
    modbus_config.coils = 0;      // No internal coil handling
 8000f2a:	4b39      	ldr	r3, [pc, #228]	@ (8001010 <Modbus_Init+0xf0>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	805a      	strh	r2, [r3, #2]
    modbus_config.discrete = 0;   // No internal discrete handling
 8000f30:	4b37      	ldr	r3, [pc, #220]	@ (8001010 <Modbus_Init+0xf0>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	809a      	strh	r2, [r3, #4]
    modbus_config.device = NULL;  // No device pointer needed
 8000f36:	4b36      	ldr	r3, [pc, #216]	@ (8001010 <Modbus_Init+0xf0>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
    modbus_config.send = Modbus_SendData;
 8000f3c:	4b34      	ldr	r3, [pc, #208]	@ (8001010 <Modbus_Init+0xf0>)
 8000f3e:	4a35      	ldr	r2, [pc, #212]	@ (8001014 <Modbus_Init+0xf4>)
 8000f40:	60da      	str	r2, [r3, #12]
    modbus_config.read = Modbus_Device_Read;
 8000f42:	4b33      	ldr	r3, [pc, #204]	@ (8001010 <Modbus_Init+0xf0>)
 8000f44:	4a34      	ldr	r2, [pc, #208]	@ (8001018 <Modbus_Init+0xf8>)
 8000f46:	611a      	str	r2, [r3, #16]
    modbus_config.write = Modbus_Device_Write;
 8000f48:	4b31      	ldr	r3, [pc, #196]	@ (8001010 <Modbus_Init+0xf0>)
 8000f4a:	4a34      	ldr	r2, [pc, #208]	@ (800101c <Modbus_Init+0xfc>)
 8000f4c:	615a      	str	r2, [r3, #20]
    modbus_config.sendbuf = modbus_tx_buffer;
 8000f4e:	4b30      	ldr	r3, [pc, #192]	@ (8001010 <Modbus_Init+0xf0>)
 8000f50:	4a33      	ldr	r2, [pc, #204]	@ (8001020 <Modbus_Init+0x100>)
 8000f52:	619a      	str	r2, [r3, #24]
    modbus_config.sendbuf_sz = sizeof(modbus_tx_buffer);
 8000f54:	4b2e      	ldr	r3, [pc, #184]	@ (8001010 <Modbus_Init+0xf0>)
 8000f56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f5a:	839a      	strh	r2, [r3, #28]
    modbus_config.recvbuf = modbus_rx_buffer;
 8000f5c:	4b2c      	ldr	r3, [pc, #176]	@ (8001010 <Modbus_Init+0xf0>)
 8000f5e:	4a31      	ldr	r2, [pc, #196]	@ (8001024 <Modbus_Init+0x104>)
 8000f60:	621a      	str	r2, [r3, #32]
    modbus_config.recvbuf_sz = sizeof(modbus_rx_buffer);
 8000f62:	4b2b      	ldr	r3, [pc, #172]	@ (8001010 <Modbus_Init+0xf0>)
 8000f64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f68:	849a      	strh	r2, [r3, #36]	@ 0x24

    // printf("Modbus config: addr=0x%02X, buffers=%d/%d bytes\n",
    //        modbus_config.devaddr, modbus_config.sendbuf_sz, modbus_config.recvbuf_sz); // Removed

    // Initialize Modbus context
    modbus_context = mbus_open(&modbus_config);
 8000f6a:	4829      	ldr	r0, [pc, #164]	@ (8001010 <Modbus_Init+0xf0>)
 8000f6c:	f7ff fa94 	bl	8000498 <mbus_open>
 8000f70:	4603      	mov	r3, r0
 8000f72:	461a      	mov	r2, r3
 8000f74:	4b2c      	ldr	r3, [pc, #176]	@ (8001028 <Modbus_Init+0x108>)
 8000f76:	701a      	strb	r2, [r3, #0]
    // printf("Modbus context opened: %d\n", modbus_context); // Removed

    // Set register values AFTER mbus_open (like sample code does)
    device_registers[0] = 20;  // 40001
 8000f78:	4b2c      	ldr	r3, [pc, #176]	@ (800102c <Modbus_Init+0x10c>)
 8000f7a:	2214      	movs	r2, #20
 8000f7c:	801a      	strh	r2, [r3, #0]
    device_registers[1] = 19;  // 40002
 8000f7e:	4b2b      	ldr	r3, [pc, #172]	@ (800102c <Modbus_Init+0x10c>)
 8000f80:	2213      	movs	r2, #19
 8000f82:	805a      	strh	r2, [r3, #2]
    device_registers[2] = 18;  // 40003
 8000f84:	4b29      	ldr	r3, [pc, #164]	@ (800102c <Modbus_Init+0x10c>)
 8000f86:	2212      	movs	r2, #18
 8000f88:	809a      	strh	r2, [r3, #4]
    device_registers[3] = 17;  // 40004
 8000f8a:	4b28      	ldr	r3, [pc, #160]	@ (800102c <Modbus_Init+0x10c>)
 8000f8c:	2211      	movs	r2, #17
 8000f8e:	80da      	strh	r2, [r3, #6]
    device_registers[4] = 16;  // 40005
 8000f90:	4b26      	ldr	r3, [pc, #152]	@ (800102c <Modbus_Init+0x10c>)
 8000f92:	2210      	movs	r2, #16
 8000f94:	811a      	strh	r2, [r3, #8]
    device_registers[5] = 15;  // 40006
 8000f96:	4b25      	ldr	r3, [pc, #148]	@ (800102c <Modbus_Init+0x10c>)
 8000f98:	220f      	movs	r2, #15
 8000f9a:	815a      	strh	r2, [r3, #10]
    device_registers[6] = 14;  // 40007
 8000f9c:	4b23      	ldr	r3, [pc, #140]	@ (800102c <Modbus_Init+0x10c>)
 8000f9e:	220e      	movs	r2, #14
 8000fa0:	819a      	strh	r2, [r3, #12]
    device_registers[7] = 13;  // 40008
 8000fa2:	4b22      	ldr	r3, [pc, #136]	@ (800102c <Modbus_Init+0x10c>)
 8000fa4:	220d      	movs	r2, #13
 8000fa6:	81da      	strh	r2, [r3, #14]
    device_registers[8] = 12;  // 40009
 8000fa8:	4b20      	ldr	r3, [pc, #128]	@ (800102c <Modbus_Init+0x10c>)
 8000faa:	220c      	movs	r2, #12
 8000fac:	821a      	strh	r2, [r3, #16]
    device_registers[9] = 11;  // 40010
 8000fae:	4b1f      	ldr	r3, [pc, #124]	@ (800102c <Modbus_Init+0x10c>)
 8000fb0:	220b      	movs	r2, #11
 8000fb2:	825a      	strh	r2, [r3, #18]
    device_registers[10] = 10; // 40011
 8000fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800102c <Modbus_Init+0x10c>)
 8000fb6:	220a      	movs	r2, #10
 8000fb8:	829a      	strh	r2, [r3, #20]
    device_registers[11] = 9;  // 40012
 8000fba:	4b1c      	ldr	r3, [pc, #112]	@ (800102c <Modbus_Init+0x10c>)
 8000fbc:	2209      	movs	r2, #9
 8000fbe:	82da      	strh	r2, [r3, #22]
    device_registers[12] = 8;  // 40013
 8000fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800102c <Modbus_Init+0x10c>)
 8000fc2:	2208      	movs	r2, #8
 8000fc4:	831a      	strh	r2, [r3, #24]
    device_registers[13] = 7;  // 40014
 8000fc6:	4b19      	ldr	r3, [pc, #100]	@ (800102c <Modbus_Init+0x10c>)
 8000fc8:	2207      	movs	r2, #7
 8000fca:	835a      	strh	r2, [r3, #26]
    device_registers[14] = 6;  // 40015
 8000fcc:	4b17      	ldr	r3, [pc, #92]	@ (800102c <Modbus_Init+0x10c>)
 8000fce:	2206      	movs	r2, #6
 8000fd0:	839a      	strh	r2, [r3, #28]
    device_registers[15] = 5;  // 40016
 8000fd2:	4b16      	ldr	r3, [pc, #88]	@ (800102c <Modbus_Init+0x10c>)
 8000fd4:	2205      	movs	r2, #5
 8000fd6:	83da      	strh	r2, [r3, #30]
    device_registers[16] = 4;  // 40017
 8000fd8:	4b14      	ldr	r3, [pc, #80]	@ (800102c <Modbus_Init+0x10c>)
 8000fda:	2204      	movs	r2, #4
 8000fdc:	841a      	strh	r2, [r3, #32]
    device_registers[17] = 3;  // 40018
 8000fde:	4b13      	ldr	r3, [pc, #76]	@ (800102c <Modbus_Init+0x10c>)
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	845a      	strh	r2, [r3, #34]	@ 0x22
    device_registers[18] = 2;  // 40019
 8000fe4:	4b11      	ldr	r3, [pc, #68]	@ (800102c <Modbus_Init+0x10c>)
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	849a      	strh	r2, [r3, #36]	@ 0x24
    device_registers[19] = 1;  // 40020
 8000fea:	4b10      	ldr	r3, [pc, #64]	@ (800102c <Modbus_Init+0x10c>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	84da      	strh	r2, [r3, #38]	@ 0x26
    //     printf("Reg[%d] = %d\n", i, device_registers[i]);
    // }
    // printf("Registers initialized. Ready for ModbusPoll connection.\n"); // Removed to prevent timeouts

    // Start UART DMA reception
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, modbus_rx_buffer, sizeof(modbus_rx_buffer));
 8000ff0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ff4:	490b      	ldr	r1, [pc, #44]	@ (8001024 <Modbus_Init+0x104>)
 8000ff6:	480e      	ldr	r0, [pc, #56]	@ (8001030 <Modbus_Init+0x110>)
 8000ff8:	f003 fbee 	bl	80047d8 <HAL_UARTEx_ReceiveToIdle_DMA>
    // printf("DMA reception started: %d\n", dma_status); // Removed

    // Enable UART idle line interrupt for Modbus frame detection
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8001030 <Modbus_Init+0x110>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	4b0b      	ldr	r3, [pc, #44]	@ (8001030 <Modbus_Init+0x110>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f042 0210 	orr.w	r2, r2, #16
 800100a:	601a      	str	r2, [r3, #0]
    // printf("UART idle interrupt enabled\n"); // Removed
}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}
 8001010:	200001ac 	.word	0x200001ac
 8001014:	08001045 	.word	0x08001045
 8001018:	08000e51 	.word	0x08000e51
 800101c:	08000e99 	.word	0x08000e99
 8001020:	200002d4 	.word	0x200002d4
 8001024:	200001d4 	.word	0x200001d4
 8001028:	200001a9 	.word	0x200001a9
 800102c:	20000000 	.word	0x20000000
 8001030:	20000050 	.word	0x20000050

08001034 <Modbus_Process>:
 * @brief  Process Modbus communication
 * @param  None
 * @retval None
 */
void Modbus_Process(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
    // This function can be called in main loop if needed
    // Currently, processing is handled in UART callback
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <Modbus_SendData>:
 * @param  data: Data to send
 * @param  size: Size of data
 * @retval Number of bytes sent
 */
static int Modbus_SendData(const mbus_t context, const uint8_t *data, const uint16_t size)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	6039      	str	r1, [r7, #0]
 800104e:	71fb      	strb	r3, [r7, #7]
 8001050:	4613      	mov	r3, r2
 8001052:	80bb      	strh	r3, [r7, #4]
    // {
    //     printf("0x%02X ", data[i]);
    // }
    // printf("\n");

    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, (uint8_t *)data, size, 1000);
 8001054:	88ba      	ldrh	r2, [r7, #4]
 8001056:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800105a:	6839      	ldr	r1, [r7, #0]
 800105c:	4807      	ldr	r0, [pc, #28]	@ (800107c <Modbus_SendData+0x38>)
 800105e:	f002 fa73 	bl	8003548 <HAL_UART_Transmit>
 8001062:	4603      	mov	r3, r0
 8001064:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d101      	bne.n	8001070 <Modbus_SendData+0x2c>
    {
        // printf("TX Success\n"); // Removed to prevent timing delays
        return size;
 800106c:	88bb      	ldrh	r3, [r7, #4]
 800106e:	e000      	b.n	8001072 <Modbus_SendData+0x2e>
    }
    else
    {
        // printf("TX Failed: %d\n", status); // Removed to prevent timing delays
        return 0;
 8001070:	2300      	movs	r3, #0
    }
}
 8001072:	4618      	mov	r0, r3
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000050 	.word	0x20000050

08001080 <Modbus_GetContext>:
 * @brief  Get Modbus context (for external access)
 * @param  None
 * @retval Modbus context
 */
mbus_t Modbus_GetContext(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
    return modbus_context;
 8001084:	4b03      	ldr	r3, [pc, #12]	@ (8001094 <Modbus_GetContext+0x14>)
 8001086:	f993 3000 	ldrsb.w	r3, [r3]
 800108a:	4618      	mov	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	200001a9 	.word	0x200001a9

08001098 <Modbus_Test_Init>:
 * @brief  Initialize Modbus test functions
 * @param  None
 * @retval None
 */
void Modbus_Test_Init(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
    // Set initial test values - DISABLED to preserve sequential test data (1-20)
    // Modbus_Device_SetRegister(0, 0x1234);  // 40001: Test sensor 1
    // Modbus_Device_SetRegister(1, 0x5678);  // 40002: Test sensor 2
    // Modbus_Device_SetRegister(9, 0x0001);  // 40010: Status (bit 0 = ready)
    // Modbus_Device_SetRegister(11, 0x0100); // 40012: Firmware version 1.0
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
	...

080010a8 <Modbus_Test_Update>:
 * @brief  Update test values periodically
 * @param  None
 * @retval None
 */
void Modbus_Test_Update(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
    test_counter++;
 80010ac:	4b04      	ldr	r3, [pc, #16]	@ (80010c0 <Modbus_Test_Update+0x18>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	3301      	adds	r3, #1
 80010b2:	4a03      	ldr	r2, [pc, #12]	@ (80010c0 <Modbus_Test_Update+0x18>)
 80010b4:	6013      	str	r3, [r2, #0]
    // Simulate temperature reading (25.00°C = 9472) - Commented out to preserve test data
    // Modbus_Device_SetRegister(4, 205); // 40005

    // Simulate humidity reading (65.00% = 25856) - Commented out to preserve test data
    // Modbus_Device_SetRegister(5, 652); // 40006
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	200003d4 	.word	0x200003d4

080010c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001108 <HAL_MspInit+0x44>)
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001108 <HAL_MspInit+0x44>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6193      	str	r3, [r2, #24]
 80010d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001108 <HAL_MspInit+0x44>)
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e2:	4b09      	ldr	r3, [pc, #36]	@ (8001108 <HAL_MspInit+0x44>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	4a08      	ldr	r2, [pc, #32]	@ (8001108 <HAL_MspInit+0x44>)
 80010e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010ec:	61d3      	str	r3, [r2, #28]
 80010ee:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <HAL_MspInit+0x44>)
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f6:	603b      	str	r3, [r7, #0]
 80010f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40021000 	.word	0x40021000

0800110c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08a      	sub	sp, #40	@ 0x28
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a42      	ldr	r2, [pc, #264]	@ (8001234 <HAL_UART_MspInit+0x128>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d17d      	bne.n	800122a <HAL_UART_MspInit+0x11e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800112e:	4b42      	ldr	r3, [pc, #264]	@ (8001238 <HAL_UART_MspInit+0x12c>)
 8001130:	699b      	ldr	r3, [r3, #24]
 8001132:	4a41      	ldr	r2, [pc, #260]	@ (8001238 <HAL_UART_MspInit+0x12c>)
 8001134:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001138:	6193      	str	r3, [r2, #24]
 800113a:	4b3f      	ldr	r3, [pc, #252]	@ (8001238 <HAL_UART_MspInit+0x12c>)
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	4b3c      	ldr	r3, [pc, #240]	@ (8001238 <HAL_UART_MspInit+0x12c>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	4a3b      	ldr	r2, [pc, #236]	@ (8001238 <HAL_UART_MspInit+0x12c>)
 800114c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001150:	6153      	str	r3, [r2, #20]
 8001152:	4b39      	ldr	r3, [pc, #228]	@ (8001238 <HAL_UART_MspInit+0x12c>)
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA12     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 800115e:	f44f 53b0 	mov.w	r3, #5632	@ 0x1600
 8001162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800116c:	2303      	movs	r3, #3
 800116e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001170:	2307      	movs	r3, #7
 8001172:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4619      	mov	r1, r3
 800117a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800117e:	f000 fcfb 	bl	8001b78 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001182:	4b2e      	ldr	r3, [pc, #184]	@ (800123c <HAL_UART_MspInit+0x130>)
 8001184:	4a2e      	ldr	r2, [pc, #184]	@ (8001240 <HAL_UART_MspInit+0x134>)
 8001186:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001188:	4b2c      	ldr	r3, [pc, #176]	@ (800123c <HAL_UART_MspInit+0x130>)
 800118a:	2200      	movs	r2, #0
 800118c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800118e:	4b2b      	ldr	r3, [pc, #172]	@ (800123c <HAL_UART_MspInit+0x130>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001194:	4b29      	ldr	r3, [pc, #164]	@ (800123c <HAL_UART_MspInit+0x130>)
 8001196:	2280      	movs	r2, #128	@ 0x80
 8001198:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800119a:	4b28      	ldr	r3, [pc, #160]	@ (800123c <HAL_UART_MspInit+0x130>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011a0:	4b26      	ldr	r3, [pc, #152]	@ (800123c <HAL_UART_MspInit+0x130>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80011a6:	4b25      	ldr	r3, [pc, #148]	@ (800123c <HAL_UART_MspInit+0x130>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011ac:	4b23      	ldr	r3, [pc, #140]	@ (800123c <HAL_UART_MspInit+0x130>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80011b2:	4822      	ldr	r0, [pc, #136]	@ (800123c <HAL_UART_MspInit+0x130>)
 80011b4:	f000 facd 	bl	8001752 <HAL_DMA_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 80011be:	f7ff f931 	bl	8000424 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a1d      	ldr	r2, [pc, #116]	@ (800123c <HAL_UART_MspInit+0x130>)
 80011c6:	675a      	str	r2, [r3, #116]	@ 0x74
 80011c8:	4a1c      	ldr	r2, [pc, #112]	@ (800123c <HAL_UART_MspInit+0x130>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80011ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001244 <HAL_UART_MspInit+0x138>)
 80011d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001248 <HAL_UART_MspInit+0x13c>)
 80011d2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001244 <HAL_UART_MspInit+0x138>)
 80011d6:	2210      	movs	r2, #16
 80011d8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011da:	4b1a      	ldr	r3, [pc, #104]	@ (8001244 <HAL_UART_MspInit+0x138>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011e0:	4b18      	ldr	r3, [pc, #96]	@ (8001244 <HAL_UART_MspInit+0x138>)
 80011e2:	2280      	movs	r2, #128	@ 0x80
 80011e4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011e6:	4b17      	ldr	r3, [pc, #92]	@ (8001244 <HAL_UART_MspInit+0x138>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011ec:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <HAL_UART_MspInit+0x138>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80011f2:	4b14      	ldr	r3, [pc, #80]	@ (8001244 <HAL_UART_MspInit+0x138>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011f8:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <HAL_UART_MspInit+0x138>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80011fe:	4811      	ldr	r0, [pc, #68]	@ (8001244 <HAL_UART_MspInit+0x138>)
 8001200:	f000 faa7 	bl	8001752 <HAL_DMA_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 800120a:	f7ff f90b 	bl	8000424 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a0c      	ldr	r2, [pc, #48]	@ (8001244 <HAL_UART_MspInit+0x138>)
 8001212:	671a      	str	r2, [r3, #112]	@ 0x70
 8001214:	4a0b      	ldr	r2, [pc, #44]	@ (8001244 <HAL_UART_MspInit+0x138>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	2025      	movs	r0, #37	@ 0x25
 8001220:	f000 fa61 	bl	80016e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001224:	2025      	movs	r0, #37	@ 0x25
 8001226:	f000 fa7a 	bl	800171e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800122a:	bf00      	nop
 800122c:	3728      	adds	r7, #40	@ 0x28
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40013800 	.word	0x40013800
 8001238:	40021000 	.word	0x40021000
 800123c:	200000d8 	.word	0x200000d8
 8001240:	40020058 	.word	0x40020058
 8001244:	2000011c 	.word	0x2000011c
 8001248:	40020044 	.word	0x40020044

0800124c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <NMI_Handler+0x4>

08001254 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001258:	bf00      	nop
 800125a:	e7fd      	b.n	8001258 <HardFault_Handler+0x4>

0800125c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <MemManage_Handler+0x4>

08001264 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <BusFault_Handler+0x4>

0800126c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <UsageFault_Handler+0x4>

08001274 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a2:	f000 f901 	bl	80014a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80012b0:	4802      	ldr	r0, [pc, #8]	@ (80012bc <DMA1_Channel4_IRQHandler+0x10>)
 80012b2:	f000 fb70 	bl	8001996 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	2000011c 	.word	0x2000011c

080012c0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80012c4:	4802      	ldr	r0, [pc, #8]	@ (80012d0 <DMA1_Channel5_IRQHandler+0x10>)
 80012c6:	f000 fb66 	bl	8001996 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200000d8 	.word	0x200000d8

080012d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012d8:	4802      	ldr	r0, [pc, #8]	@ (80012e4 <USART1_IRQHandler+0x10>)
 80012da:	f002 f9bf 	bl	800365c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000050 	.word	0x20000050

080012e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012ec:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <SystemInit+0x20>)
 80012ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012f2:	4a05      	ldr	r2, [pc, #20]	@ (8001308 <SystemInit+0x20>)
 80012f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <UART_Callbacks_Init>:
 * @brief  Initialize UART callbacks
 * @param  None
 * @retval None
 */
void UART_Callbacks_Init(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
    // UART callbacks are handled by HAL, this function can be used
    // for any additional initialization if needed
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <HAL_UARTEx_RxEventCallback>:
 * @param  huart: UART handle
 * @param  Size: Number of bytes received
 * @retval None
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	807b      	strh	r3, [r7, #2]
    if (huart == &huart1)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a14      	ldr	r2, [pc, #80]	@ (800137c <HAL_UARTEx_RxEventCallback+0x60>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d120      	bne.n	8001372 <HAL_UARTEx_RxEventCallback+0x56>
        // HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4); // Commented out to eliminate timing delays

        // printf("UART RX: Received %d bytes\n", Size); // Commented out to prevent timeouts

        // Get Modbus context
        mbus_t modbus_ctx = Modbus_GetContext();
 8001330:	f7ff fea6 	bl	8001080 <Modbus_GetContext>
 8001334:	4603      	mov	r3, r0
 8001336:	737b      	strb	r3, [r7, #13]

        // Process received Modbus data byte by byte
        for (uint16_t i = 0; i < Size; i++)
 8001338:	2300      	movs	r3, #0
 800133a:	81fb      	strh	r3, [r7, #14]
 800133c:	e00b      	b.n	8001356 <HAL_UARTEx_RxEventCallback+0x3a>
        {
            // printf("Byte %d: 0x%02X\n", i, modbus_rx_buffer[i]); // Commented out to prevent timeouts
            mbus_poll(modbus_ctx, modbus_rx_buffer[i]);
 800133e:	89fb      	ldrh	r3, [r7, #14]
 8001340:	4a0f      	ldr	r2, [pc, #60]	@ (8001380 <HAL_UARTEx_RxEventCallback+0x64>)
 8001342:	5cd2      	ldrb	r2, [r2, r3]
 8001344:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001348:	4611      	mov	r1, r2
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff fac8 	bl	80008e0 <mbus_poll>
        for (uint16_t i = 0; i < Size; i++)
 8001350:	89fb      	ldrh	r3, [r7, #14]
 8001352:	3301      	adds	r3, #1
 8001354:	81fb      	strh	r3, [r7, #14]
 8001356:	89fa      	ldrh	r2, [r7, #14]
 8001358:	887b      	ldrh	r3, [r7, #2]
 800135a:	429a      	cmp	r2, r3
 800135c:	d3ef      	bcc.n	800133e <HAL_UARTEx_RxEventCallback+0x22>
        }

        // Clear the UART idle flag
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2210      	movs	r2, #16
 8001364:	621a      	str	r2, [r3, #32]

        // Restart DMA reception for next frame
        HAL_UARTEx_ReceiveToIdle_DMA(&huart1, modbus_rx_buffer, sizeof(modbus_rx_buffer));
 8001366:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800136a:	4905      	ldr	r1, [pc, #20]	@ (8001380 <HAL_UARTEx_RxEventCallback+0x64>)
 800136c:	4803      	ldr	r0, [pc, #12]	@ (800137c <HAL_UARTEx_RxEventCallback+0x60>)
 800136e:	f003 fa33 	bl	80047d8 <HAL_UARTEx_ReceiveToIdle_DMA>
    }
}
 8001372:	bf00      	nop
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000050 	.word	0x20000050
 8001380:	200001d4 	.word	0x200001d4

08001384 <HAL_UART_ErrorCallback>:
 * @brief  UART error callback
 * @param  huart: UART handle
 * @retval None
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
    if (huart == &huart1)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4a0c      	ldr	r2, [pc, #48]	@ (80013c0 <HAL_UART_ErrorCallback+0x3c>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d111      	bne.n	80013b8 <HAL_UART_ErrorCallback+0x34>
    {
        // Handle UART errors
        __HAL_UART_CLEAR_OREFLAG(huart);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2208      	movs	r2, #8
 800139a:	621a      	str	r2, [r3, #32]
        __HAL_UART_CLEAR_NEFLAG(huart);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2204      	movs	r2, #4
 80013a2:	621a      	str	r2, [r3, #32]
        __HAL_UART_CLEAR_FEFLAG(huart);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2202      	movs	r2, #2
 80013aa:	621a      	str	r2, [r3, #32]

        // Restart DMA reception
        HAL_UARTEx_ReceiveToIdle_DMA(&huart1, modbus_rx_buffer, sizeof(modbus_rx_buffer));
 80013ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013b0:	4904      	ldr	r1, [pc, #16]	@ (80013c4 <HAL_UART_ErrorCallback+0x40>)
 80013b2:	4803      	ldr	r0, [pc, #12]	@ (80013c0 <HAL_UART_ErrorCallback+0x3c>)
 80013b4:	f003 fa10 	bl	80047d8 <HAL_UARTEx_ReceiveToIdle_DMA>
    }
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000050 	.word	0x20000050
 80013c4:	200001d4 	.word	0x200001d4

080013c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001400 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80013cc:	f7ff ff8c 	bl	80012e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013d0:	480c      	ldr	r0, [pc, #48]	@ (8001404 <LoopForever+0x6>)
  ldr r1, =_edata
 80013d2:	490d      	ldr	r1, [pc, #52]	@ (8001408 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013d4:	4a0d      	ldr	r2, [pc, #52]	@ (800140c <LoopForever+0xe>)
  movs r3, #0
 80013d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d8:	e002      	b.n	80013e0 <LoopCopyDataInit>

080013da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013de:	3304      	adds	r3, #4

080013e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e4:	d3f9      	bcc.n	80013da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001410 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001414 <LoopForever+0x16>)
  movs r3, #0
 80013ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013ec:	e001      	b.n	80013f2 <LoopFillZerobss>

080013ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f0:	3204      	adds	r2, #4

080013f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f4:	d3fb      	bcc.n	80013ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013f6:	f003 fa4b 	bl	8004890 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013fa:	f7fe fee5 	bl	80001c8 <main>

080013fe <LoopForever>:

LoopForever:
    b LoopForever
 80013fe:	e7fe      	b.n	80013fe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001400:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001404:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001408:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 800140c:	08004b4c 	.word	0x08004b4c
  ldr r2, =_sbss
 8001410:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8001414:	200003dc 	.word	0x200003dc

08001418 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001418:	e7fe      	b.n	8001418 <ADC1_2_IRQHandler>
	...

0800141c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001420:	4b08      	ldr	r3, [pc, #32]	@ (8001444 <HAL_Init+0x28>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a07      	ldr	r2, [pc, #28]	@ (8001444 <HAL_Init+0x28>)
 8001426:	f043 0310 	orr.w	r3, r3, #16
 800142a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800142c:	2003      	movs	r0, #3
 800142e:	f000 f94f 	bl	80016d0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001432:	200f      	movs	r0, #15
 8001434:	f000 f808 	bl	8001448 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001438:	f7ff fe44 	bl	80010c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40022000 	.word	0x40022000

08001448 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001450:	4b12      	ldr	r3, [pc, #72]	@ (800149c <HAL_InitTick+0x54>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b12      	ldr	r3, [pc, #72]	@ (80014a0 <HAL_InitTick+0x58>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	4619      	mov	r1, r3
 800145a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800145e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001462:	fbb2 f3f3 	udiv	r3, r2, r3
 8001466:	4618      	mov	r0, r3
 8001468:	f000 f967 	bl	800173a <HAL_SYSTICK_Config>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e00e      	b.n	8001494 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2b0f      	cmp	r3, #15
 800147a:	d80a      	bhi.n	8001492 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800147c:	2200      	movs	r2, #0
 800147e:	6879      	ldr	r1, [r7, #4]
 8001480:	f04f 30ff 	mov.w	r0, #4294967295
 8001484:	f000 f92f 	bl	80016e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001488:	4a06      	ldr	r2, [pc, #24]	@ (80014a4 <HAL_InitTick+0x5c>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800148e:	2300      	movs	r3, #0
 8001490:	e000      	b.n	8001494 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000028 	.word	0x20000028
 80014a0:	20000030 	.word	0x20000030
 80014a4:	2000002c 	.word	0x2000002c

080014a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014ac:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <HAL_IncTick+0x20>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <HAL_IncTick+0x24>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4413      	add	r3, r2
 80014b8:	4a04      	ldr	r2, [pc, #16]	@ (80014cc <HAL_IncTick+0x24>)
 80014ba:	6013      	str	r3, [r2, #0]
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	20000030 	.word	0x20000030
 80014cc:	200003d8 	.word	0x200003d8

080014d0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return uwTick;  
 80014d4:	4b03      	ldr	r3, [pc, #12]	@ (80014e4 <HAL_GetTick+0x14>)
 80014d6:	681b      	ldr	r3, [r3, #0]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	200003d8 	.word	0x200003d8

080014e8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f0:	f7ff ffee 	bl	80014d0 <HAL_GetTick>
 80014f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001500:	d005      	beq.n	800150e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001502:	4b0a      	ldr	r3, [pc, #40]	@ (800152c <HAL_Delay+0x44>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	461a      	mov	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4413      	add	r3, r2
 800150c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800150e:	bf00      	nop
 8001510:	f7ff ffde 	bl	80014d0 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	429a      	cmp	r2, r3
 800151e:	d8f7      	bhi.n	8001510 <HAL_Delay+0x28>
  {
  }
}
 8001520:	bf00      	nop
 8001522:	bf00      	nop
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000030 	.word	0x20000030

08001530 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001540:	4b0c      	ldr	r3, [pc, #48]	@ (8001574 <__NVIC_SetPriorityGrouping+0x44>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800154c:	4013      	ands	r3, r2
 800154e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001558:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800155c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001562:	4a04      	ldr	r2, [pc, #16]	@ (8001574 <__NVIC_SetPriorityGrouping+0x44>)
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	60d3      	str	r3, [r2, #12]
}
 8001568:	bf00      	nop
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800157c:	4b04      	ldr	r3, [pc, #16]	@ (8001590 <__NVIC_GetPriorityGrouping+0x18>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	0a1b      	lsrs	r3, r3, #8
 8001582:	f003 0307 	and.w	r3, r3, #7
}
 8001586:	4618      	mov	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	db0b      	blt.n	80015be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	f003 021f 	and.w	r2, r3, #31
 80015ac:	4907      	ldr	r1, [pc, #28]	@ (80015cc <__NVIC_EnableIRQ+0x38>)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	095b      	lsrs	r3, r3, #5
 80015b4:	2001      	movs	r0, #1
 80015b6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000e100 	.word	0xe000e100

080015d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	6039      	str	r1, [r7, #0]
 80015da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	db0a      	blt.n	80015fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	490c      	ldr	r1, [pc, #48]	@ (800161c <__NVIC_SetPriority+0x4c>)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	0112      	lsls	r2, r2, #4
 80015f0:	b2d2      	uxtb	r2, r2
 80015f2:	440b      	add	r3, r1
 80015f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f8:	e00a      	b.n	8001610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	4908      	ldr	r1, [pc, #32]	@ (8001620 <__NVIC_SetPriority+0x50>)
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	3b04      	subs	r3, #4
 8001608:	0112      	lsls	r2, r2, #4
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	440b      	add	r3, r1
 800160e:	761a      	strb	r2, [r3, #24]
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	e000e100 	.word	0xe000e100
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001624:	b480      	push	{r7}
 8001626:	b089      	sub	sp, #36	@ 0x24
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	f1c3 0307 	rsb	r3, r3, #7
 800163e:	2b04      	cmp	r3, #4
 8001640:	bf28      	it	cs
 8001642:	2304      	movcs	r3, #4
 8001644:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3304      	adds	r3, #4
 800164a:	2b06      	cmp	r3, #6
 800164c:	d902      	bls.n	8001654 <NVIC_EncodePriority+0x30>
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	3b03      	subs	r3, #3
 8001652:	e000      	b.n	8001656 <NVIC_EncodePriority+0x32>
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001658:	f04f 32ff 	mov.w	r2, #4294967295
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43da      	mvns	r2, r3
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	401a      	ands	r2, r3
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800166c:	f04f 31ff 	mov.w	r1, #4294967295
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	fa01 f303 	lsl.w	r3, r1, r3
 8001676:	43d9      	mvns	r1, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800167c:	4313      	orrs	r3, r2
         );
}
 800167e:	4618      	mov	r0, r3
 8001680:	3724      	adds	r7, #36	@ 0x24
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
	...

0800168c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3b01      	subs	r3, #1
 8001698:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800169c:	d301      	bcc.n	80016a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800169e:	2301      	movs	r3, #1
 80016a0:	e00f      	b.n	80016c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016a2:	4a0a      	ldr	r2, [pc, #40]	@ (80016cc <SysTick_Config+0x40>)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016aa:	210f      	movs	r1, #15
 80016ac:	f04f 30ff 	mov.w	r0, #4294967295
 80016b0:	f7ff ff8e 	bl	80015d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b4:	4b05      	ldr	r3, [pc, #20]	@ (80016cc <SysTick_Config+0x40>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ba:	4b04      	ldr	r3, [pc, #16]	@ (80016cc <SysTick_Config+0x40>)
 80016bc:	2207      	movs	r2, #7
 80016be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	e000e010 	.word	0xe000e010

080016d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff ff29 	bl	8001530 <__NVIC_SetPriorityGrouping>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b086      	sub	sp, #24
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	4603      	mov	r3, r0
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607a      	str	r2, [r7, #4]
 80016f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016f8:	f7ff ff3e 	bl	8001578 <__NVIC_GetPriorityGrouping>
 80016fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	68b9      	ldr	r1, [r7, #8]
 8001702:	6978      	ldr	r0, [r7, #20]
 8001704:	f7ff ff8e 	bl	8001624 <NVIC_EncodePriority>
 8001708:	4602      	mov	r2, r0
 800170a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800170e:	4611      	mov	r1, r2
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff ff5d 	bl	80015d0 <__NVIC_SetPriority>
}
 8001716:	bf00      	nop
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
 8001724:	4603      	mov	r3, r0
 8001726:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ff31 	bl	8001594 <__NVIC_EnableIRQ>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff ffa2 	bl	800168c <SysTick_Config>
 8001748:	4603      	mov	r3, r0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b084      	sub	sp, #16
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d101      	bne.n	8001768 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e037      	b.n	80017d8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2202      	movs	r2, #2
 800176c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800177e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001782:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800178c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001798:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 f9bc 	bl	8001b38 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2201      	movs	r2, #1
 80017ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
 80017ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017ee:	2300      	movs	r3, #0
 80017f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d101      	bne.n	8001800 <HAL_DMA_Start_IT+0x20>
 80017fc:	2302      	movs	r3, #2
 80017fe:	e04a      	b.n	8001896 <HAL_DMA_Start_IT+0xb6>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800180e:	2b01      	cmp	r3, #1
 8001810:	d13a      	bne.n	8001888 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2202      	movs	r2, #2
 8001816:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2200      	movs	r2, #0
 800181e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f022 0201 	bic.w	r2, r2, #1
 800182e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	68b9      	ldr	r1, [r7, #8]
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f000 f950 	bl	8001adc <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001840:	2b00      	cmp	r3, #0
 8001842:	d008      	beq.n	8001856 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f042 020e 	orr.w	r2, r2, #14
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	e00f      	b.n	8001876 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f042 020a 	orr.w	r2, r2, #10
 8001864:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f022 0204 	bic.w	r2, r2, #4
 8001874:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f042 0201 	orr.w	r2, r2, #1
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	e005      	b.n	8001894 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001890:	2302      	movs	r3, #2
 8001892:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001894:	7dfb      	ldrb	r3, [r7, #23]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d101      	bne.n	80018b0 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e02e      	b.n	800190e <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d008      	beq.n	80018cc <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2204      	movs	r2, #4
 80018be:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e020      	b.n	800190e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f022 020e 	bic.w	r2, r2, #14
 80018da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f022 0201 	bic.w	r2, r2, #1
 80018ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018f4:	2101      	movs	r1, #1
 80018f6:	fa01 f202 	lsl.w	r2, r1, r2
 80018fa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b084      	sub	sp, #16
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001922:	2300      	movs	r3, #0
 8001924:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800192c:	2b02      	cmp	r3, #2
 800192e:	d005      	beq.n	800193c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2204      	movs	r2, #4
 8001934:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	73fb      	strb	r3, [r7, #15]
 800193a:	e027      	b.n	800198c <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 020e 	bic.w	r2, r2, #14
 800194a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f022 0201 	bic.w	r2, r2, #1
 800195a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001964:	2101      	movs	r1, #1
 8001966:	fa01 f202 	lsl.w	r2, r1, r2
 800196a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001980:	2b00      	cmp	r3, #0
 8001982:	d003      	beq.n	800198c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	4798      	blx	r3
    }
  }
  return status;
 800198c:	7bfb      	ldrb	r3, [r7, #15]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b084      	sub	sp, #16
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b2:	2204      	movs	r2, #4
 80019b4:	409a      	lsls	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	4013      	ands	r3, r2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d024      	beq.n	8001a08 <HAL_DMA_IRQHandler+0x72>
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d01f      	beq.n	8001a08 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0320 	and.w	r3, r3, #32
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d107      	bne.n	80019e6 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f022 0204 	bic.w	r2, r2, #4
 80019e4:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019ee:	2104      	movs	r1, #4
 80019f0:	fa01 f202 	lsl.w	r2, r1, r2
 80019f4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d06a      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001a06:	e065      	b.n	8001ad4 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	409a      	lsls	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4013      	ands	r3, r2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d02c      	beq.n	8001a72 <HAL_DMA_IRQHandler+0xdc>
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d027      	beq.n	8001a72 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0320 	and.w	r3, r3, #32
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d10b      	bne.n	8001a48 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 020a 	bic.w	r2, r2, #10
 8001a3e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a50:	2102      	movs	r1, #2
 8001a52:	fa01 f202 	lsl.w	r2, r1, r2
 8001a56:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d035      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a70:	e030      	b.n	8001ad4 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a76:	2208      	movs	r2, #8
 8001a78:	409a      	lsls	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d028      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x13e>
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	f003 0308 	and.w	r3, r3, #8
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d023      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 020e 	bic.w	r2, r2, #14
 8001a9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aaa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d004      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	4798      	blx	r3
    }
  }
}
 8001ad2:	e7ff      	b.n	8001ad4 <HAL_DMA_IRQHandler+0x13e>
 8001ad4:	bf00      	nop
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
 8001ae8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001af2:	2101      	movs	r1, #1
 8001af4:	fa01 f202 	lsl.w	r2, r1, r2
 8001af8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b10      	cmp	r3, #16
 8001b08:	d108      	bne.n	8001b1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b1a:	e007      	b.n	8001b2c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68ba      	ldr	r2, [r7, #8]
 8001b22:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	60da      	str	r2, [r3, #12]
}
 8001b2c:	bf00      	nop
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b09      	ldr	r3, [pc, #36]	@ (8001b6c <DMA_CalcBaseAndBitshift+0x34>)
 8001b48:	4413      	add	r3, r2
 8001b4a:	4a09      	ldr	r2, [pc, #36]	@ (8001b70 <DMA_CalcBaseAndBitshift+0x38>)
 8001b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b50:	091b      	lsrs	r3, r3, #4
 8001b52:	009a      	lsls	r2, r3, #2
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a06      	ldr	r2, [pc, #24]	@ (8001b74 <DMA_CalcBaseAndBitshift+0x3c>)
 8001b5c:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	bffdfff8 	.word	0xbffdfff8
 8001b70:	cccccccd 	.word	0xcccccccd
 8001b74:	40020000 	.word	0x40020000

08001b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b087      	sub	sp, #28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b86:	e14e      	b.n	8001e26 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	fa01 f303 	lsl.w	r3, r1, r3
 8001b94:	4013      	ands	r3, r2
 8001b96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 8140 	beq.w	8001e20 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 0303 	and.w	r3, r3, #3
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d005      	beq.n	8001bb8 <HAL_GPIO_Init+0x40>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 0303 	and.w	r3, r3, #3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d130      	bne.n	8001c1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	68da      	ldr	r2, [r3, #12]
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bee:	2201      	movs	r2, #1
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	091b      	lsrs	r3, r3, #4
 8001c04:	f003 0201 	and.w	r2, r3, #1
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	2b03      	cmp	r3, #3
 8001c24:	d017      	beq.n	8001c56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	2203      	movs	r2, #3
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	689a      	ldr	r2, [r3, #8]
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d123      	bne.n	8001caa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	08da      	lsrs	r2, r3, #3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3208      	adds	r2, #8
 8001c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	220f      	movs	r2, #15
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	4013      	ands	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	691a      	ldr	r2, [r3, #16]
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	08da      	lsrs	r2, r3, #3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3208      	adds	r2, #8
 8001ca4:	6939      	ldr	r1, [r7, #16]
 8001ca6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	2203      	movs	r2, #3
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 0203 	and.w	r2, r3, #3
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f000 809a 	beq.w	8001e20 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cec:	4b55      	ldr	r3, [pc, #340]	@ (8001e44 <HAL_GPIO_Init+0x2cc>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	4a54      	ldr	r2, [pc, #336]	@ (8001e44 <HAL_GPIO_Init+0x2cc>)
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	6193      	str	r3, [r2, #24]
 8001cf8:	4b52      	ldr	r3, [pc, #328]	@ (8001e44 <HAL_GPIO_Init+0x2cc>)
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	60bb      	str	r3, [r7, #8]
 8001d02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d04:	4a50      	ldr	r2, [pc, #320]	@ (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	089b      	lsrs	r3, r3, #2
 8001d0a:	3302      	adds	r3, #2
 8001d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f003 0303 	and.w	r3, r3, #3
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	220f      	movs	r2, #15
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	4013      	ands	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d2e:	d013      	beq.n	8001d58 <HAL_GPIO_Init+0x1e0>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a46      	ldr	r2, [pc, #280]	@ (8001e4c <HAL_GPIO_Init+0x2d4>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d00d      	beq.n	8001d54 <HAL_GPIO_Init+0x1dc>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a45      	ldr	r2, [pc, #276]	@ (8001e50 <HAL_GPIO_Init+0x2d8>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d007      	beq.n	8001d50 <HAL_GPIO_Init+0x1d8>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a44      	ldr	r2, [pc, #272]	@ (8001e54 <HAL_GPIO_Init+0x2dc>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d101      	bne.n	8001d4c <HAL_GPIO_Init+0x1d4>
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e006      	b.n	8001d5a <HAL_GPIO_Init+0x1e2>
 8001d4c:	2305      	movs	r3, #5
 8001d4e:	e004      	b.n	8001d5a <HAL_GPIO_Init+0x1e2>
 8001d50:	2302      	movs	r3, #2
 8001d52:	e002      	b.n	8001d5a <HAL_GPIO_Init+0x1e2>
 8001d54:	2301      	movs	r3, #1
 8001d56:	e000      	b.n	8001d5a <HAL_GPIO_Init+0x1e2>
 8001d58:	2300      	movs	r3, #0
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	f002 0203 	and.w	r2, r2, #3
 8001d60:	0092      	lsls	r2, r2, #2
 8001d62:	4093      	lsls	r3, r2
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d6a:	4937      	ldr	r1, [pc, #220]	@ (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	089b      	lsrs	r3, r3, #2
 8001d70:	3302      	adds	r3, #2
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d78:	4b37      	ldr	r3, [pc, #220]	@ (8001e58 <HAL_GPIO_Init+0x2e0>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	43db      	mvns	r3, r3
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	4013      	ands	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d9c:	4a2e      	ldr	r2, [pc, #184]	@ (8001e58 <HAL_GPIO_Init+0x2e0>)
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001da2:	4b2d      	ldr	r3, [pc, #180]	@ (8001e58 <HAL_GPIO_Init+0x2e0>)
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	43db      	mvns	r3, r3
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	4013      	ands	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001dc6:	4a24      	ldr	r2, [pc, #144]	@ (8001e58 <HAL_GPIO_Init+0x2e0>)
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dcc:	4b22      	ldr	r3, [pc, #136]	@ (8001e58 <HAL_GPIO_Init+0x2e0>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001df0:	4a19      	ldr	r2, [pc, #100]	@ (8001e58 <HAL_GPIO_Init+0x2e0>)
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001df6:	4b18      	ldr	r3, [pc, #96]	@ (8001e58 <HAL_GPIO_Init+0x2e0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4013      	ands	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e1a:	4a0f      	ldr	r2, [pc, #60]	@ (8001e58 <HAL_GPIO_Init+0x2e0>)
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	3301      	adds	r3, #1
 8001e24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f47f aea9 	bne.w	8001b88 <HAL_GPIO_Init+0x10>
  }
}
 8001e36:	bf00      	nop
 8001e38:	bf00      	nop
 8001e3a:	371c      	adds	r7, #28
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	40021000 	.word	0x40021000
 8001e48:	40010000 	.word	0x40010000
 8001e4c:	48000400 	.word	0x48000400
 8001e50:	48000800 	.word	0x48000800
 8001e54:	48000c00 	.word	0x48000c00
 8001e58:	40010400 	.word	0x40010400

08001e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	807b      	strh	r3, [r7, #2]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e6c:	787b      	ldrb	r3, [r7, #1]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e72:	887a      	ldrh	r2, [r7, #2]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e78:	e002      	b.n	8001e80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e7a:	887a      	ldrh	r2, [r7, #2]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e9e:	887a      	ldrh	r2, [r7, #2]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	041a      	lsls	r2, r3, #16
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	43d9      	mvns	r1, r3
 8001eaa:	887b      	ldrh	r3, [r7, #2]
 8001eac:	400b      	ands	r3, r1
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	619a      	str	r2, [r3, #24]
}
 8001eb4:	bf00      	nop
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ecc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ed0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ed2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ed6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d102      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	f000 bff4 	b.w	8002ece <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ee6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 816d 	beq.w	80021d6 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001efc:	4bb4      	ldr	r3, [pc, #720]	@ (80021d0 <HAL_RCC_OscConfig+0x310>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 030c 	and.w	r3, r3, #12
 8001f04:	2b04      	cmp	r3, #4
 8001f06:	d00c      	beq.n	8001f22 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f08:	4bb1      	ldr	r3, [pc, #708]	@ (80021d0 <HAL_RCC_OscConfig+0x310>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 030c 	and.w	r3, r3, #12
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d157      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x104>
 8001f14:	4bae      	ldr	r3, [pc, #696]	@ (80021d0 <HAL_RCC_OscConfig+0x310>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f20:	d150      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x104>
 8001f22:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f26:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001f2e:	fa93 f3a3 	rbit	r3, r3
 8001f32:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f36:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f3a:	fab3 f383 	clz	r3, r3
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f42:	d802      	bhi.n	8001f4a <HAL_RCC_OscConfig+0x8a>
 8001f44:	4ba2      	ldr	r3, [pc, #648]	@ (80021d0 <HAL_RCC_OscConfig+0x310>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	e015      	b.n	8001f76 <HAL_RCC_OscConfig+0xb6>
 8001f4a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f4e:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f52:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001f56:	fa93 f3a3 	rbit	r3, r3
 8001f5a:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001f5e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f62:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001f66:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001f6a:	fa93 f3a3 	rbit	r3, r3
 8001f6e:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001f72:	4b97      	ldr	r3, [pc, #604]	@ (80021d0 <HAL_RCC_OscConfig+0x310>)
 8001f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f76:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f7a:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001f7e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001f82:	fa92 f2a2 	rbit	r2, r2
 8001f86:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001f8a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001f8e:	fab2 f282 	clz	r2, r2
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	f042 0220 	orr.w	r2, r2, #32
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	f002 021f 	and.w	r2, r2, #31
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 8114 	beq.w	80021d4 <HAL_RCC_OscConfig+0x314>
 8001fac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fb0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f040 810b 	bne.w	80021d4 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	f000 bf85 	b.w	8002ece <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fd4:	d106      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x124>
 8001fd6:	4b7e      	ldr	r3, [pc, #504]	@ (80021d0 <HAL_RCC_OscConfig+0x310>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a7d      	ldr	r2, [pc, #500]	@ (80021d0 <HAL_RCC_OscConfig+0x310>)
 8001fdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	e036      	b.n	8002052 <HAL_RCC_OscConfig+0x192>
 8001fe4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fe8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d10c      	bne.n	800200e <HAL_RCC_OscConfig+0x14e>
 8001ff4:	4b76      	ldr	r3, [pc, #472]	@ (80021d0 <HAL_RCC_OscConfig+0x310>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a75      	ldr	r2, [pc, #468]	@ (80021d0 <HAL_RCC_OscConfig+0x310>)
 8001ffa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ffe:	6013      	str	r3, [r2, #0]
 8002000:	4b73      	ldr	r3, [pc, #460]	@ (80021d0 <HAL_RCC_OscConfig+0x310>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a72      	ldr	r2, [pc, #456]	@ (80021d0 <HAL_RCC_OscConfig+0x310>)
 8002006:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800200a:	6013      	str	r3, [r2, #0]
 800200c:	e021      	b.n	8002052 <HAL_RCC_OscConfig+0x192>
 800200e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002012:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800201e:	d10c      	bne.n	800203a <HAL_RCC_OscConfig+0x17a>
 8002020:	4b6b      	ldr	r3, [pc, #428]	@ (80021d0 <HAL_RCC_OscConfig+0x310>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a6a      	ldr	r2, [pc, #424]	@ (80021d0 <HAL_RCC_OscConfig+0x310>)
 8002026:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800202a:	6013      	str	r3, [r2, #0]
 800202c:	4b68      	ldr	r3, [pc, #416]	@ (80021d0 <HAL_RCC_OscConfig+0x310>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a67      	ldr	r2, [pc, #412]	@ (80021d0 <HAL_RCC_OscConfig+0x310>)
 8002032:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002036:	6013      	str	r3, [r2, #0]
 8002038:	e00b      	b.n	8002052 <HAL_RCC_OscConfig+0x192>
 800203a:	4b65      	ldr	r3, [pc, #404]	@ (80021d0 <HAL_RCC_OscConfig+0x310>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a64      	ldr	r2, [pc, #400]	@ (80021d0 <HAL_RCC_OscConfig+0x310>)
 8002040:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002044:	6013      	str	r3, [r2, #0]
 8002046:	4b62      	ldr	r3, [pc, #392]	@ (80021d0 <HAL_RCC_OscConfig+0x310>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a61      	ldr	r2, [pc, #388]	@ (80021d0 <HAL_RCC_OscConfig+0x310>)
 800204c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002050:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002052:	4b5f      	ldr	r3, [pc, #380]	@ (80021d0 <HAL_RCC_OscConfig+0x310>)
 8002054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002056:	f023 020f 	bic.w	r2, r3, #15
 800205a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800205e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	495a      	ldr	r1, [pc, #360]	@ (80021d0 <HAL_RCC_OscConfig+0x310>)
 8002068:	4313      	orrs	r3, r2
 800206a:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800206c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002070:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d054      	beq.n	8002126 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207c:	f7ff fa28 	bl	80014d0 <HAL_GetTick>
 8002080:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002084:	e00a      	b.n	800209c <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002086:	f7ff fa23 	bl	80014d0 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b64      	cmp	r3, #100	@ 0x64
 8002094:	d902      	bls.n	800209c <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	f000 bf19 	b.w	8002ece <HAL_RCC_OscConfig+0x100e>
 800209c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020a0:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80020a8:	fa93 f3a3 	rbit	r3, r3
 80020ac:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80020b0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b4:	fab3 f383 	clz	r3, r3
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80020bc:	d802      	bhi.n	80020c4 <HAL_RCC_OscConfig+0x204>
 80020be:	4b44      	ldr	r3, [pc, #272]	@ (80021d0 <HAL_RCC_OscConfig+0x310>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	e015      	b.n	80020f0 <HAL_RCC_OscConfig+0x230>
 80020c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020c8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020cc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80020d0:	fa93 f3a3 	rbit	r3, r3
 80020d4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80020d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020dc:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80020e0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80020e4:	fa93 f3a3 	rbit	r3, r3
 80020e8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80020ec:	4b38      	ldr	r3, [pc, #224]	@ (80021d0 <HAL_RCC_OscConfig+0x310>)
 80020ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80020f4:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80020f8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80020fc:	fa92 f2a2 	rbit	r2, r2
 8002100:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002104:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002108:	fab2 f282 	clz	r2, r2
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	f042 0220 	orr.w	r2, r2, #32
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	f002 021f 	and.w	r2, r2, #31
 8002118:	2101      	movs	r1, #1
 800211a:	fa01 f202 	lsl.w	r2, r1, r2
 800211e:	4013      	ands	r3, r2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0b0      	beq.n	8002086 <HAL_RCC_OscConfig+0x1c6>
 8002124:	e057      	b.n	80021d6 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002126:	f7ff f9d3 	bl	80014d0 <HAL_GetTick>
 800212a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800212e:	e00a      	b.n	8002146 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002130:	f7ff f9ce 	bl	80014d0 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b64      	cmp	r3, #100	@ 0x64
 800213e:	d902      	bls.n	8002146 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	f000 bec4 	b.w	8002ece <HAL_RCC_OscConfig+0x100e>
 8002146:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800214a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002152:	fa93 f3a3 	rbit	r3, r3
 8002156:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800215a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800215e:	fab3 f383 	clz	r3, r3
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b3f      	cmp	r3, #63	@ 0x3f
 8002166:	d802      	bhi.n	800216e <HAL_RCC_OscConfig+0x2ae>
 8002168:	4b19      	ldr	r3, [pc, #100]	@ (80021d0 <HAL_RCC_OscConfig+0x310>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	e015      	b.n	800219a <HAL_RCC_OscConfig+0x2da>
 800216e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002172:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002176:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800217a:	fa93 f3a3 	rbit	r3, r3
 800217e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002182:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002186:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800218a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800218e:	fa93 f3a3 	rbit	r3, r3
 8002192:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002196:	4b0e      	ldr	r3, [pc, #56]	@ (80021d0 <HAL_RCC_OscConfig+0x310>)
 8002198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800219e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80021a2:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80021a6:	fa92 f2a2 	rbit	r2, r2
 80021aa:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80021ae:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80021b2:	fab2 f282 	clz	r2, r2
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	f042 0220 	orr.w	r2, r2, #32
 80021bc:	b2d2      	uxtb	r2, r2
 80021be:	f002 021f 	and.w	r2, r2, #31
 80021c2:	2101      	movs	r1, #1
 80021c4:	fa01 f202 	lsl.w	r2, r1, r2
 80021c8:	4013      	ands	r3, r2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1b0      	bne.n	8002130 <HAL_RCC_OscConfig+0x270>
 80021ce:	e002      	b.n	80021d6 <HAL_RCC_OscConfig+0x316>
 80021d0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 816c 	beq.w	80024c4 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80021ec:	4bcc      	ldr	r3, [pc, #816]	@ (8002520 <HAL_RCC_OscConfig+0x660>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 030c 	and.w	r3, r3, #12
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00b      	beq.n	8002210 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80021f8:	4bc9      	ldr	r3, [pc, #804]	@ (8002520 <HAL_RCC_OscConfig+0x660>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 030c 	and.w	r3, r3, #12
 8002200:	2b08      	cmp	r3, #8
 8002202:	d16d      	bne.n	80022e0 <HAL_RCC_OscConfig+0x420>
 8002204:	4bc6      	ldr	r3, [pc, #792]	@ (8002520 <HAL_RCC_OscConfig+0x660>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d167      	bne.n	80022e0 <HAL_RCC_OscConfig+0x420>
 8002210:	2302      	movs	r3, #2
 8002212:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002216:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800221a:	fa93 f3a3 	rbit	r3, r3
 800221e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002222:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002226:	fab3 f383 	clz	r3, r3
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b3f      	cmp	r3, #63	@ 0x3f
 800222e:	d802      	bhi.n	8002236 <HAL_RCC_OscConfig+0x376>
 8002230:	4bbb      	ldr	r3, [pc, #748]	@ (8002520 <HAL_RCC_OscConfig+0x660>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	e013      	b.n	800225e <HAL_RCC_OscConfig+0x39e>
 8002236:	2302      	movs	r3, #2
 8002238:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002240:	fa93 f3a3 	rbit	r3, r3
 8002244:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002248:	2302      	movs	r3, #2
 800224a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800224e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002252:	fa93 f3a3 	rbit	r3, r3
 8002256:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800225a:	4bb1      	ldr	r3, [pc, #708]	@ (8002520 <HAL_RCC_OscConfig+0x660>)
 800225c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225e:	2202      	movs	r2, #2
 8002260:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002264:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002268:	fa92 f2a2 	rbit	r2, r2
 800226c:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002270:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002274:	fab2 f282 	clz	r2, r2
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	f042 0220 	orr.w	r2, r2, #32
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	f002 021f 	and.w	r2, r2, #31
 8002284:	2101      	movs	r1, #1
 8002286:	fa01 f202 	lsl.w	r2, r1, r2
 800228a:	4013      	ands	r3, r2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00a      	beq.n	80022a6 <HAL_RCC_OscConfig+0x3e6>
 8002290:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002294:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d002      	beq.n	80022a6 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	f000 be14 	b.w	8002ece <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a6:	4b9e      	ldr	r3, [pc, #632]	@ (8002520 <HAL_RCC_OscConfig+0x660>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	21f8      	movs	r1, #248	@ 0xf8
 80022bc:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c0:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80022c4:	fa91 f1a1 	rbit	r1, r1
 80022c8:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80022cc:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80022d0:	fab1 f181 	clz	r1, r1
 80022d4:	b2c9      	uxtb	r1, r1
 80022d6:	408b      	lsls	r3, r1
 80022d8:	4991      	ldr	r1, [pc, #580]	@ (8002520 <HAL_RCC_OscConfig+0x660>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022de:	e0f1      	b.n	80024c4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 8083 	beq.w	80023f8 <HAL_RCC_OscConfig+0x538>
 80022f2:	2301      	movs	r3, #1
 80022f4:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f8:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80022fc:	fa93 f3a3 	rbit	r3, r3
 8002300:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002304:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002308:	fab3 f383 	clz	r3, r3
 800230c:	b2db      	uxtb	r3, r3
 800230e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002312:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	461a      	mov	r2, r3
 800231a:	2301      	movs	r3, #1
 800231c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231e:	f7ff f8d7 	bl	80014d0 <HAL_GetTick>
 8002322:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002326:	e00a      	b.n	800233e <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002328:	f7ff f8d2 	bl	80014d0 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d902      	bls.n	800233e <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	f000 bdc8 	b.w	8002ece <HAL_RCC_OscConfig+0x100e>
 800233e:	2302      	movs	r3, #2
 8002340:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002344:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002348:	fa93 f3a3 	rbit	r3, r3
 800234c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002350:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002354:	fab3 f383 	clz	r3, r3
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b3f      	cmp	r3, #63	@ 0x3f
 800235c:	d802      	bhi.n	8002364 <HAL_RCC_OscConfig+0x4a4>
 800235e:	4b70      	ldr	r3, [pc, #448]	@ (8002520 <HAL_RCC_OscConfig+0x660>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	e013      	b.n	800238c <HAL_RCC_OscConfig+0x4cc>
 8002364:	2302      	movs	r3, #2
 8002366:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800236e:	fa93 f3a3 	rbit	r3, r3
 8002372:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002376:	2302      	movs	r3, #2
 8002378:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800237c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002380:	fa93 f3a3 	rbit	r3, r3
 8002384:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002388:	4b65      	ldr	r3, [pc, #404]	@ (8002520 <HAL_RCC_OscConfig+0x660>)
 800238a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238c:	2202      	movs	r2, #2
 800238e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002392:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002396:	fa92 f2a2 	rbit	r2, r2
 800239a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800239e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80023a2:	fab2 f282 	clz	r2, r2
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	f042 0220 	orr.w	r2, r2, #32
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	f002 021f 	and.w	r2, r2, #31
 80023b2:	2101      	movs	r1, #1
 80023b4:	fa01 f202 	lsl.w	r2, r1, r2
 80023b8:	4013      	ands	r3, r2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0b4      	beq.n	8002328 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023be:	4b58      	ldr	r3, [pc, #352]	@ (8002520 <HAL_RCC_OscConfig+0x660>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	21f8      	movs	r1, #248	@ 0xf8
 80023d4:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80023dc:	fa91 f1a1 	rbit	r1, r1
 80023e0:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80023e4:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80023e8:	fab1 f181 	clz	r1, r1
 80023ec:	b2c9      	uxtb	r1, r1
 80023ee:	408b      	lsls	r3, r1
 80023f0:	494b      	ldr	r1, [pc, #300]	@ (8002520 <HAL_RCC_OscConfig+0x660>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	600b      	str	r3, [r1, #0]
 80023f6:	e065      	b.n	80024c4 <HAL_RCC_OscConfig+0x604>
 80023f8:	2301      	movs	r3, #1
 80023fa:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fe:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002402:	fa93 f3a3 	rbit	r3, r3
 8002406:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800240a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800240e:	fab3 f383 	clz	r3, r3
 8002412:	b2db      	uxtb	r3, r3
 8002414:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002418:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	461a      	mov	r2, r3
 8002420:	2300      	movs	r3, #0
 8002422:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002424:	f7ff f854 	bl	80014d0 <HAL_GetTick>
 8002428:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800242c:	e00a      	b.n	8002444 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800242e:	f7ff f84f 	bl	80014d0 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d902      	bls.n	8002444 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	f000 bd45 	b.w	8002ece <HAL_RCC_OscConfig+0x100e>
 8002444:	2302      	movs	r3, #2
 8002446:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800244e:	fa93 f3a3 	rbit	r3, r3
 8002452:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002456:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800245a:	fab3 f383 	clz	r3, r3
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b3f      	cmp	r3, #63	@ 0x3f
 8002462:	d802      	bhi.n	800246a <HAL_RCC_OscConfig+0x5aa>
 8002464:	4b2e      	ldr	r3, [pc, #184]	@ (8002520 <HAL_RCC_OscConfig+0x660>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	e013      	b.n	8002492 <HAL_RCC_OscConfig+0x5d2>
 800246a:	2302      	movs	r3, #2
 800246c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002470:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002474:	fa93 f3a3 	rbit	r3, r3
 8002478:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800247c:	2302      	movs	r3, #2
 800247e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002482:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002486:	fa93 f3a3 	rbit	r3, r3
 800248a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800248e:	4b24      	ldr	r3, [pc, #144]	@ (8002520 <HAL_RCC_OscConfig+0x660>)
 8002490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002492:	2202      	movs	r2, #2
 8002494:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002498:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800249c:	fa92 f2a2 	rbit	r2, r2
 80024a0:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80024a4:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80024a8:	fab2 f282 	clz	r2, r2
 80024ac:	b2d2      	uxtb	r2, r2
 80024ae:	f042 0220 	orr.w	r2, r2, #32
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	f002 021f 	and.w	r2, r2, #31
 80024b8:	2101      	movs	r1, #1
 80024ba:	fa01 f202 	lsl.w	r2, r1, r2
 80024be:	4013      	ands	r3, r2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1b4      	bne.n	800242e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0308 	and.w	r3, r3, #8
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 8115 	beq.w	8002704 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d07e      	beq.n	80025e8 <HAL_RCC_OscConfig+0x728>
 80024ea:	2301      	movs	r3, #1
 80024ec:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80024f4:	fa93 f3a3 	rbit	r3, r3
 80024f8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80024fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002500:	fab3 f383 	clz	r3, r3
 8002504:	b2db      	uxtb	r3, r3
 8002506:	461a      	mov	r2, r3
 8002508:	4b06      	ldr	r3, [pc, #24]	@ (8002524 <HAL_RCC_OscConfig+0x664>)
 800250a:	4413      	add	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	461a      	mov	r2, r3
 8002510:	2301      	movs	r3, #1
 8002512:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002514:	f7fe ffdc 	bl	80014d0 <HAL_GetTick>
 8002518:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800251c:	e00f      	b.n	800253e <HAL_RCC_OscConfig+0x67e>
 800251e:	bf00      	nop
 8002520:	40021000 	.word	0x40021000
 8002524:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002528:	f7fe ffd2 	bl	80014d0 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d902      	bls.n	800253e <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	f000 bcc8 	b.w	8002ece <HAL_RCC_OscConfig+0x100e>
 800253e:	2302      	movs	r3, #2
 8002540:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002544:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002548:	fa93 f3a3 	rbit	r3, r3
 800254c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002550:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002554:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002558:	2202      	movs	r2, #2
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002560:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	fa93 f2a3 	rbit	r2, r3
 800256a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800256e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002578:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800257c:	2202      	movs	r2, #2
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002584:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	fa93 f2a3 	rbit	r2, r3
 800258e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002592:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002596:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002598:	4bb0      	ldr	r3, [pc, #704]	@ (800285c <HAL_RCC_OscConfig+0x99c>)
 800259a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800259c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025a0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80025a4:	2102      	movs	r1, #2
 80025a6:	6019      	str	r1, [r3, #0]
 80025a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ac:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	fa93 f1a3 	rbit	r1, r3
 80025b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ba:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80025be:	6019      	str	r1, [r3, #0]
  return result;
 80025c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	fab3 f383 	clz	r3, r3
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	f003 031f 	and.w	r3, r3, #31
 80025da:	2101      	movs	r1, #1
 80025dc:	fa01 f303 	lsl.w	r3, r1, r3
 80025e0:	4013      	ands	r3, r2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0a0      	beq.n	8002528 <HAL_RCC_OscConfig+0x668>
 80025e6:	e08d      	b.n	8002704 <HAL_RCC_OscConfig+0x844>
 80025e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ec:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80025f0:	2201      	movs	r2, #1
 80025f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	fa93 f2a3 	rbit	r2, r3
 8002602:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002606:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800260a:	601a      	str	r2, [r3, #0]
  return result;
 800260c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002610:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002614:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002616:	fab3 f383 	clz	r3, r3
 800261a:	b2db      	uxtb	r3, r3
 800261c:	461a      	mov	r2, r3
 800261e:	4b90      	ldr	r3, [pc, #576]	@ (8002860 <HAL_RCC_OscConfig+0x9a0>)
 8002620:	4413      	add	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	461a      	mov	r2, r3
 8002626:	2300      	movs	r3, #0
 8002628:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800262a:	f7fe ff51 	bl	80014d0 <HAL_GetTick>
 800262e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002632:	e00a      	b.n	800264a <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002634:	f7fe ff4c 	bl	80014d0 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d902      	bls.n	800264a <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	f000 bc42 	b.w	8002ece <HAL_RCC_OscConfig+0x100e>
 800264a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800264e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002652:	2202      	movs	r2, #2
 8002654:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002656:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800265a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	fa93 f2a3 	rbit	r2, r3
 8002664:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002668:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002672:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002676:	2202      	movs	r2, #2
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800267e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	fa93 f2a3 	rbit	r2, r3
 8002688:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800268c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002696:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800269a:	2202      	movs	r2, #2
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	fa93 f2a3 	rbit	r2, r3
 80026ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80026b4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b6:	4b69      	ldr	r3, [pc, #420]	@ (800285c <HAL_RCC_OscConfig+0x99c>)
 80026b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026be:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80026c2:	2102      	movs	r1, #2
 80026c4:	6019      	str	r1, [r3, #0]
 80026c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ca:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	fa93 f1a3 	rbit	r1, r3
 80026d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026dc:	6019      	str	r1, [r3, #0]
  return result;
 80026de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	fab3 f383 	clz	r3, r3
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	f003 031f 	and.w	r3, r3, #31
 80026f8:	2101      	movs	r1, #1
 80026fa:	fa01 f303 	lsl.w	r3, r1, r3
 80026fe:	4013      	ands	r3, r2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d197      	bne.n	8002634 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002704:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002708:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 819e 	beq.w	8002a56 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 800271a:	2300      	movs	r3, #0
 800271c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002720:	4b4e      	ldr	r3, [pc, #312]	@ (800285c <HAL_RCC_OscConfig+0x99c>)
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d116      	bne.n	800275a <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800272c:	4b4b      	ldr	r3, [pc, #300]	@ (800285c <HAL_RCC_OscConfig+0x99c>)
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	4a4a      	ldr	r2, [pc, #296]	@ (800285c <HAL_RCC_OscConfig+0x99c>)
 8002732:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002736:	61d3      	str	r3, [r2, #28]
 8002738:	4b48      	ldr	r3, [pc, #288]	@ (800285c <HAL_RCC_OscConfig+0x99c>)
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002740:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002744:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800274e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002752:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002754:	2301      	movs	r3, #1
 8002756:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275a:	4b42      	ldr	r3, [pc, #264]	@ (8002864 <HAL_RCC_OscConfig+0x9a4>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002762:	2b00      	cmp	r3, #0
 8002764:	d11a      	bne.n	800279c <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002766:	4b3f      	ldr	r3, [pc, #252]	@ (8002864 <HAL_RCC_OscConfig+0x9a4>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a3e      	ldr	r2, [pc, #248]	@ (8002864 <HAL_RCC_OscConfig+0x9a4>)
 800276c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002770:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002772:	f7fe fead 	bl	80014d0 <HAL_GetTick>
 8002776:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800277a:	e009      	b.n	8002790 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800277c:	f7fe fea8 	bl	80014d0 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b64      	cmp	r3, #100	@ 0x64
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e39e      	b.n	8002ece <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002790:	4b34      	ldr	r3, [pc, #208]	@ (8002864 <HAL_RCC_OscConfig+0x9a4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0ef      	beq.n	800277c <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800279c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d106      	bne.n	80027ba <HAL_RCC_OscConfig+0x8fa>
 80027ac:	4b2b      	ldr	r3, [pc, #172]	@ (800285c <HAL_RCC_OscConfig+0x99c>)
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	4a2a      	ldr	r2, [pc, #168]	@ (800285c <HAL_RCC_OscConfig+0x99c>)
 80027b2:	f043 0301 	orr.w	r3, r3, #1
 80027b6:	6213      	str	r3, [r2, #32]
 80027b8:	e035      	b.n	8002826 <HAL_RCC_OscConfig+0x966>
 80027ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10c      	bne.n	80027e4 <HAL_RCC_OscConfig+0x924>
 80027ca:	4b24      	ldr	r3, [pc, #144]	@ (800285c <HAL_RCC_OscConfig+0x99c>)
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	4a23      	ldr	r2, [pc, #140]	@ (800285c <HAL_RCC_OscConfig+0x99c>)
 80027d0:	f023 0301 	bic.w	r3, r3, #1
 80027d4:	6213      	str	r3, [r2, #32]
 80027d6:	4b21      	ldr	r3, [pc, #132]	@ (800285c <HAL_RCC_OscConfig+0x99c>)
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	4a20      	ldr	r2, [pc, #128]	@ (800285c <HAL_RCC_OscConfig+0x99c>)
 80027dc:	f023 0304 	bic.w	r3, r3, #4
 80027e0:	6213      	str	r3, [r2, #32]
 80027e2:	e020      	b.n	8002826 <HAL_RCC_OscConfig+0x966>
 80027e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	2b05      	cmp	r3, #5
 80027f2:	d10c      	bne.n	800280e <HAL_RCC_OscConfig+0x94e>
 80027f4:	4b19      	ldr	r3, [pc, #100]	@ (800285c <HAL_RCC_OscConfig+0x99c>)
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	4a18      	ldr	r2, [pc, #96]	@ (800285c <HAL_RCC_OscConfig+0x99c>)
 80027fa:	f043 0304 	orr.w	r3, r3, #4
 80027fe:	6213      	str	r3, [r2, #32]
 8002800:	4b16      	ldr	r3, [pc, #88]	@ (800285c <HAL_RCC_OscConfig+0x99c>)
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	4a15      	ldr	r2, [pc, #84]	@ (800285c <HAL_RCC_OscConfig+0x99c>)
 8002806:	f043 0301 	orr.w	r3, r3, #1
 800280a:	6213      	str	r3, [r2, #32]
 800280c:	e00b      	b.n	8002826 <HAL_RCC_OscConfig+0x966>
 800280e:	4b13      	ldr	r3, [pc, #76]	@ (800285c <HAL_RCC_OscConfig+0x99c>)
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	4a12      	ldr	r2, [pc, #72]	@ (800285c <HAL_RCC_OscConfig+0x99c>)
 8002814:	f023 0301 	bic.w	r3, r3, #1
 8002818:	6213      	str	r3, [r2, #32]
 800281a:	4b10      	ldr	r3, [pc, #64]	@ (800285c <HAL_RCC_OscConfig+0x99c>)
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	4a0f      	ldr	r2, [pc, #60]	@ (800285c <HAL_RCC_OscConfig+0x99c>)
 8002820:	f023 0304 	bic.w	r3, r3, #4
 8002824:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002826:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800282a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 8087 	beq.w	8002946 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002838:	f7fe fe4a 	bl	80014d0 <HAL_GetTick>
 800283c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002840:	e012      	b.n	8002868 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002842:	f7fe fe45 	bl	80014d0 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002852:	4293      	cmp	r3, r2
 8002854:	d908      	bls.n	8002868 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e339      	b.n	8002ece <HAL_RCC_OscConfig+0x100e>
 800285a:	bf00      	nop
 800285c:	40021000 	.word	0x40021000
 8002860:	10908120 	.word	0x10908120
 8002864:	40007000 	.word	0x40007000
 8002868:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800286c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002870:	2202      	movs	r2, #2
 8002872:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002874:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002878:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	fa93 f2a3 	rbit	r2, r3
 8002882:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002886:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002890:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002894:	2202      	movs	r2, #2
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800289c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	fa93 f2a3 	rbit	r2, r3
 80028a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028aa:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80028ae:	601a      	str	r2, [r3, #0]
  return result;
 80028b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80028b8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ba:	fab3 f383 	clz	r3, r3
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d102      	bne.n	80028d0 <HAL_RCC_OscConfig+0xa10>
 80028ca:	4b98      	ldr	r3, [pc, #608]	@ (8002b2c <HAL_RCC_OscConfig+0xc6c>)
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	e013      	b.n	80028f8 <HAL_RCC_OscConfig+0xa38>
 80028d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80028d8:	2202      	movs	r2, #2
 80028da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	fa93 f2a3 	rbit	r2, r3
 80028ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ee:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	4b8d      	ldr	r3, [pc, #564]	@ (8002b2c <HAL_RCC_OscConfig+0xc6c>)
 80028f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028fc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002900:	2102      	movs	r1, #2
 8002902:	6011      	str	r1, [r2, #0]
 8002904:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002908:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800290c:	6812      	ldr	r2, [r2, #0]
 800290e:	fa92 f1a2 	rbit	r1, r2
 8002912:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002916:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800291a:	6011      	str	r1, [r2, #0]
  return result;
 800291c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002920:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002924:	6812      	ldr	r2, [r2, #0]
 8002926:	fab2 f282 	clz	r2, r2
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	f002 021f 	and.w	r2, r2, #31
 8002936:	2101      	movs	r1, #1
 8002938:	fa01 f202 	lsl.w	r2, r1, r2
 800293c:	4013      	ands	r3, r2
 800293e:	2b00      	cmp	r3, #0
 8002940:	f43f af7f 	beq.w	8002842 <HAL_RCC_OscConfig+0x982>
 8002944:	e07d      	b.n	8002a42 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002946:	f7fe fdc3 	bl	80014d0 <HAL_GetTick>
 800294a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800294e:	e00b      	b.n	8002968 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002950:	f7fe fdbe 	bl	80014d0 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002960:	4293      	cmp	r3, r2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e2b2      	b.n	8002ece <HAL_RCC_OscConfig+0x100e>
 8002968:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800296c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002970:	2202      	movs	r2, #2
 8002972:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002974:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002978:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	fa93 f2a3 	rbit	r2, r3
 8002982:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002986:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002990:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002994:	2202      	movs	r2, #2
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800299c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	fa93 f2a3 	rbit	r2, r3
 80029a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029aa:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80029ae:	601a      	str	r2, [r3, #0]
  return result;
 80029b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80029b8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ba:	fab3 f383 	clz	r3, r3
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d102      	bne.n	80029d0 <HAL_RCC_OscConfig+0xb10>
 80029ca:	4b58      	ldr	r3, [pc, #352]	@ (8002b2c <HAL_RCC_OscConfig+0xc6c>)
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	e013      	b.n	80029f8 <HAL_RCC_OscConfig+0xb38>
 80029d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80029d8:	2202      	movs	r2, #2
 80029da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	fa93 f2a3 	rbit	r2, r3
 80029ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ee:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	4b4d      	ldr	r3, [pc, #308]	@ (8002b2c <HAL_RCC_OscConfig+0xc6c>)
 80029f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029fc:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002a00:	2102      	movs	r1, #2
 8002a02:	6011      	str	r1, [r2, #0]
 8002a04:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a08:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002a0c:	6812      	ldr	r2, [r2, #0]
 8002a0e:	fa92 f1a2 	rbit	r1, r2
 8002a12:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a16:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002a1a:	6011      	str	r1, [r2, #0]
  return result;
 8002a1c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a20:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002a24:	6812      	ldr	r2, [r2, #0]
 8002a26:	fab2 f282 	clz	r2, r2
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a30:	b2d2      	uxtb	r2, r2
 8002a32:	f002 021f 	and.w	r2, r2, #31
 8002a36:	2101      	movs	r1, #1
 8002a38:	fa01 f202 	lsl.w	r2, r1, r2
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d186      	bne.n	8002950 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a42:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d105      	bne.n	8002a56 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a4a:	4b38      	ldr	r3, [pc, #224]	@ (8002b2c <HAL_RCC_OscConfig+0xc6c>)
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	4a37      	ldr	r2, [pc, #220]	@ (8002b2c <HAL_RCC_OscConfig+0xc6c>)
 8002a50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a54:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f000 8232 	beq.w	8002ecc <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a68:	4b30      	ldr	r3, [pc, #192]	@ (8002b2c <HAL_RCC_OscConfig+0xc6c>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f003 030c 	and.w	r3, r3, #12
 8002a70:	2b08      	cmp	r3, #8
 8002a72:	f000 8201 	beq.w	8002e78 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	f040 8157 	bne.w	8002d36 <HAL_RCC_OscConfig+0xe76>
 8002a88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a8c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002a90:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a9a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	fa93 f2a3 	rbit	r2, r3
 8002aa4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002aac:	601a      	str	r2, [r3, #0]
  return result;
 8002aae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ab2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002ab6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab8:	fab3 f383 	clz	r3, r3
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002ac2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	461a      	mov	r2, r3
 8002aca:	2300      	movs	r3, #0
 8002acc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ace:	f7fe fcff 	bl	80014d0 <HAL_GetTick>
 8002ad2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ad6:	e009      	b.n	8002aec <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad8:	f7fe fcfa 	bl	80014d0 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e1f0      	b.n	8002ece <HAL_RCC_OscConfig+0x100e>
 8002aec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002af0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002af4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002af8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002afe:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	fa93 f2a3 	rbit	r2, r3
 8002b08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b0c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002b10:	601a      	str	r2, [r3, #0]
  return result;
 8002b12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b16:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002b1a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b1c:	fab3 f383 	clz	r3, r3
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b24:	d804      	bhi.n	8002b30 <HAL_RCC_OscConfig+0xc70>
 8002b26:	4b01      	ldr	r3, [pc, #4]	@ (8002b2c <HAL_RCC_OscConfig+0xc6c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	e029      	b.n	8002b80 <HAL_RCC_OscConfig+0xcc0>
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b34:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002b38:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b42:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	fa93 f2a3 	rbit	r2, r3
 8002b4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b50:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b5a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002b5e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b68:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	fa93 f2a3 	rbit	r2, r3
 8002b72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b76:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	4bc3      	ldr	r3, [pc, #780]	@ (8002e8c <HAL_RCC_OscConfig+0xfcc>)
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b80:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b84:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002b88:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002b8c:	6011      	str	r1, [r2, #0]
 8002b8e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b92:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002b96:	6812      	ldr	r2, [r2, #0]
 8002b98:	fa92 f1a2 	rbit	r1, r2
 8002b9c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ba0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002ba4:	6011      	str	r1, [r2, #0]
  return result;
 8002ba6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002baa:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002bae:	6812      	ldr	r2, [r2, #0]
 8002bb0:	fab2 f282 	clz	r2, r2
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	f042 0220 	orr.w	r2, r2, #32
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	f002 021f 	and.w	r2, r2, #31
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d185      	bne.n	8002ad8 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bcc:	4baf      	ldr	r3, [pc, #700]	@ (8002e8c <HAL_RCC_OscConfig+0xfcc>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002bd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bd8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002be0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	430b      	orrs	r3, r1
 8002bee:	49a7      	ldr	r1, [pc, #668]	@ (8002e8c <HAL_RCC_OscConfig+0xfcc>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	604b      	str	r3, [r1, #4]
 8002bf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bf8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002bfc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002c00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c06:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	fa93 f2a3 	rbit	r2, r3
 8002c10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c14:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002c18:	601a      	str	r2, [r3, #0]
  return result;
 8002c1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c1e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002c22:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c24:	fab3 f383 	clz	r3, r3
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002c2e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	461a      	mov	r2, r3
 8002c36:	2301      	movs	r3, #1
 8002c38:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3a:	f7fe fc49 	bl	80014d0 <HAL_GetTick>
 8002c3e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c42:	e009      	b.n	8002c58 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c44:	f7fe fc44 	bl	80014d0 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e13a      	b.n	8002ece <HAL_RCC_OscConfig+0x100e>
 8002c58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c5c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002c60:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c6a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	fa93 f2a3 	rbit	r2, r3
 8002c74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c78:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002c7c:	601a      	str	r2, [r3, #0]
  return result;
 8002c7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c82:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002c86:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c88:	fab3 f383 	clz	r3, r3
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002c90:	d802      	bhi.n	8002c98 <HAL_RCC_OscConfig+0xdd8>
 8002c92:	4b7e      	ldr	r3, [pc, #504]	@ (8002e8c <HAL_RCC_OscConfig+0xfcc>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	e027      	b.n	8002ce8 <HAL_RCC_OscConfig+0xe28>
 8002c98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c9c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002ca0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ca4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002caa:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	fa93 f2a3 	rbit	r2, r3
 8002cb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cb8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cc2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002cc6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	fa93 f2a3 	rbit	r2, r3
 8002cda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cde:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	4b69      	ldr	r3, [pc, #420]	@ (8002e8c <HAL_RCC_OscConfig+0xfcc>)
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cec:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002cf0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002cf4:	6011      	str	r1, [r2, #0]
 8002cf6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cfa:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002cfe:	6812      	ldr	r2, [r2, #0]
 8002d00:	fa92 f1a2 	rbit	r1, r2
 8002d04:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d08:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002d0c:	6011      	str	r1, [r2, #0]
  return result;
 8002d0e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d12:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002d16:	6812      	ldr	r2, [r2, #0]
 8002d18:	fab2 f282 	clz	r2, r2
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	f042 0220 	orr.w	r2, r2, #32
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	f002 021f 	and.w	r2, r2, #31
 8002d28:	2101      	movs	r1, #1
 8002d2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d2e:	4013      	ands	r3, r2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d087      	beq.n	8002c44 <HAL_RCC_OscConfig+0xd84>
 8002d34:	e0ca      	b.n	8002ecc <HAL_RCC_OscConfig+0x100c>
 8002d36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d3a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002d3e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d48:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	fa93 f2a3 	rbit	r2, r3
 8002d52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d56:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002d5a:	601a      	str	r2, [r3, #0]
  return result;
 8002d5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d60:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002d64:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d66:	fab3 f383 	clz	r3, r3
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d70:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	461a      	mov	r2, r3
 8002d78:	2300      	movs	r3, #0
 8002d7a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7c:	f7fe fba8 	bl	80014d0 <HAL_GetTick>
 8002d80:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d84:	e009      	b.n	8002d9a <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d86:	f7fe fba3 	bl	80014d0 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e099      	b.n	8002ece <HAL_RCC_OscConfig+0x100e>
 8002d9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d9e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002da2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002da6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dac:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	fa93 f2a3 	rbit	r2, r3
 8002db6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dba:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002dbe:	601a      	str	r2, [r3, #0]
  return result;
 8002dc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002dc8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dca:	fab3 f383 	clz	r3, r3
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b3f      	cmp	r3, #63	@ 0x3f
 8002dd2:	d802      	bhi.n	8002dda <HAL_RCC_OscConfig+0xf1a>
 8002dd4:	4b2d      	ldr	r3, [pc, #180]	@ (8002e8c <HAL_RCC_OscConfig+0xfcc>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	e027      	b.n	8002e2a <HAL_RCC_OscConfig+0xf6a>
 8002dda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dde:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002de2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002de6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dec:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	fa93 f2a3 	rbit	r2, r3
 8002df6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dfa:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e04:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002e08:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e12:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	fa93 f2a3 	rbit	r2, r3
 8002e1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e20:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	4b19      	ldr	r3, [pc, #100]	@ (8002e8c <HAL_RCC_OscConfig+0xfcc>)
 8002e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e2e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002e32:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002e36:	6011      	str	r1, [r2, #0]
 8002e38:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e3c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002e40:	6812      	ldr	r2, [r2, #0]
 8002e42:	fa92 f1a2 	rbit	r1, r2
 8002e46:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e4a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002e4e:	6011      	str	r1, [r2, #0]
  return result;
 8002e50:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e54:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002e58:	6812      	ldr	r2, [r2, #0]
 8002e5a:	fab2 f282 	clz	r2, r2
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	f042 0220 	orr.w	r2, r2, #32
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	f002 021f 	and.w	r2, r2, #31
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e70:	4013      	ands	r3, r2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d187      	bne.n	8002d86 <HAL_RCC_OscConfig+0xec6>
 8002e76:	e029      	b.n	8002ecc <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	69db      	ldr	r3, [r3, #28]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d103      	bne.n	8002e90 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e020      	b.n	8002ece <HAL_RCC_OscConfig+0x100e>
 8002e8c:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e90:	4b11      	ldr	r3, [pc, #68]	@ (8002ed8 <HAL_RCC_OscConfig+0x1018>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e98:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002e9c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002ea0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ea4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d10b      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002eb0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002eb4:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002eb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ebc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d001      	beq.n	8002ecc <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e000      	b.n	8002ece <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40021000 	.word	0x40021000

08002edc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b09e      	sub	sp, #120	@ 0x78
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e154      	b.n	800319e <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ef4:	4b89      	ldr	r3, [pc, #548]	@ (800311c <HAL_RCC_ClockConfig+0x240>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d910      	bls.n	8002f24 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f02:	4b86      	ldr	r3, [pc, #536]	@ (800311c <HAL_RCC_ClockConfig+0x240>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f023 0207 	bic.w	r2, r3, #7
 8002f0a:	4984      	ldr	r1, [pc, #528]	@ (800311c <HAL_RCC_ClockConfig+0x240>)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f12:	4b82      	ldr	r3, [pc, #520]	@ (800311c <HAL_RCC_ClockConfig+0x240>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d001      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e13c      	b.n	800319e <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d008      	beq.n	8002f42 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f30:	4b7b      	ldr	r3, [pc, #492]	@ (8003120 <HAL_RCC_ClockConfig+0x244>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	4978      	ldr	r1, [pc, #480]	@ (8003120 <HAL_RCC_ClockConfig+0x244>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f000 80cd 	beq.w	80030ea <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d137      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0xec>
 8002f58:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f60:	fa93 f3a3 	rbit	r3, r3
 8002f64:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002f66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f68:	fab3 f383 	clz	r3, r3
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002f70:	d802      	bhi.n	8002f78 <HAL_RCC_ClockConfig+0x9c>
 8002f72:	4b6b      	ldr	r3, [pc, #428]	@ (8003120 <HAL_RCC_ClockConfig+0x244>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	e00f      	b.n	8002f98 <HAL_RCC_ClockConfig+0xbc>
 8002f78:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f7c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f80:	fa93 f3a3 	rbit	r3, r3
 8002f84:	667b      	str	r3, [r7, #100]	@ 0x64
 8002f86:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f8a:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f8e:	fa93 f3a3 	rbit	r3, r3
 8002f92:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f94:	4b62      	ldr	r3, [pc, #392]	@ (8003120 <HAL_RCC_ClockConfig+0x244>)
 8002f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f98:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002f9c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002f9e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002fa0:	fa92 f2a2 	rbit	r2, r2
 8002fa4:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002fa6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002fa8:	fab2 f282 	clz	r2, r2
 8002fac:	b2d2      	uxtb	r2, r2
 8002fae:	f042 0220 	orr.w	r2, r2, #32
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	f002 021f 	and.w	r2, r2, #31
 8002fb8:	2101      	movs	r1, #1
 8002fba:	fa01 f202 	lsl.w	r2, r1, r2
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d171      	bne.n	80030a8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e0ea      	b.n	800319e <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d137      	bne.n	8003040 <HAL_RCC_ClockConfig+0x164>
 8002fd0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fd4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fd8:	fa93 f3a3 	rbit	r3, r3
 8002fdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002fde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe0:	fab3 f383 	clz	r3, r3
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b3f      	cmp	r3, #63	@ 0x3f
 8002fe8:	d802      	bhi.n	8002ff0 <HAL_RCC_ClockConfig+0x114>
 8002fea:	4b4d      	ldr	r3, [pc, #308]	@ (8003120 <HAL_RCC_ClockConfig+0x244>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	e00f      	b.n	8003010 <HAL_RCC_ClockConfig+0x134>
 8002ff0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ff4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ff8:	fa93 f3a3 	rbit	r3, r3
 8002ffc:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ffe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003002:	643b      	str	r3, [r7, #64]	@ 0x40
 8003004:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003006:	fa93 f3a3 	rbit	r3, r3
 800300a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800300c:	4b44      	ldr	r3, [pc, #272]	@ (8003120 <HAL_RCC_ClockConfig+0x244>)
 800300e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003010:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003014:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003016:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003018:	fa92 f2a2 	rbit	r2, r2
 800301c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800301e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003020:	fab2 f282 	clz	r2, r2
 8003024:	b2d2      	uxtb	r2, r2
 8003026:	f042 0220 	orr.w	r2, r2, #32
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	f002 021f 	and.w	r2, r2, #31
 8003030:	2101      	movs	r1, #1
 8003032:	fa01 f202 	lsl.w	r2, r1, r2
 8003036:	4013      	ands	r3, r2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d135      	bne.n	80030a8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e0ae      	b.n	800319e <HAL_RCC_ClockConfig+0x2c2>
 8003040:	2302      	movs	r3, #2
 8003042:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003046:	fa93 f3a3 	rbit	r3, r3
 800304a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800304c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800304e:	fab3 f383 	clz	r3, r3
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b3f      	cmp	r3, #63	@ 0x3f
 8003056:	d802      	bhi.n	800305e <HAL_RCC_ClockConfig+0x182>
 8003058:	4b31      	ldr	r3, [pc, #196]	@ (8003120 <HAL_RCC_ClockConfig+0x244>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	e00d      	b.n	800307a <HAL_RCC_ClockConfig+0x19e>
 800305e:	2302      	movs	r3, #2
 8003060:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003064:	fa93 f3a3 	rbit	r3, r3
 8003068:	627b      	str	r3, [r7, #36]	@ 0x24
 800306a:	2302      	movs	r3, #2
 800306c:	623b      	str	r3, [r7, #32]
 800306e:	6a3b      	ldr	r3, [r7, #32]
 8003070:	fa93 f3a3 	rbit	r3, r3
 8003074:	61fb      	str	r3, [r7, #28]
 8003076:	4b2a      	ldr	r3, [pc, #168]	@ (8003120 <HAL_RCC_ClockConfig+0x244>)
 8003078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307a:	2202      	movs	r2, #2
 800307c:	61ba      	str	r2, [r7, #24]
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	fa92 f2a2 	rbit	r2, r2
 8003084:	617a      	str	r2, [r7, #20]
  return result;
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	fab2 f282 	clz	r2, r2
 800308c:	b2d2      	uxtb	r2, r2
 800308e:	f042 0220 	orr.w	r2, r2, #32
 8003092:	b2d2      	uxtb	r2, r2
 8003094:	f002 021f 	and.w	r2, r2, #31
 8003098:	2101      	movs	r1, #1
 800309a:	fa01 f202 	lsl.w	r2, r1, r2
 800309e:	4013      	ands	r3, r2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e07a      	b.n	800319e <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003120 <HAL_RCC_ClockConfig+0x244>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f023 0203 	bic.w	r2, r3, #3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	491a      	ldr	r1, [pc, #104]	@ (8003120 <HAL_RCC_ClockConfig+0x244>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030ba:	f7fe fa09 	bl	80014d0 <HAL_GetTick>
 80030be:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c0:	e00a      	b.n	80030d8 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c2:	f7fe fa05 	bl	80014d0 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e062      	b.n	800319e <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d8:	4b11      	ldr	r3, [pc, #68]	@ (8003120 <HAL_RCC_ClockConfig+0x244>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f003 020c 	and.w	r2, r3, #12
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d1eb      	bne.n	80030c2 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030ea:	4b0c      	ldr	r3, [pc, #48]	@ (800311c <HAL_RCC_ClockConfig+0x240>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d215      	bcs.n	8003124 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f8:	4b08      	ldr	r3, [pc, #32]	@ (800311c <HAL_RCC_ClockConfig+0x240>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f023 0207 	bic.w	r2, r3, #7
 8003100:	4906      	ldr	r1, [pc, #24]	@ (800311c <HAL_RCC_ClockConfig+0x240>)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	4313      	orrs	r3, r2
 8003106:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003108:	4b04      	ldr	r3, [pc, #16]	@ (800311c <HAL_RCC_ClockConfig+0x240>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	429a      	cmp	r2, r3
 8003114:	d006      	beq.n	8003124 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e041      	b.n	800319e <HAL_RCC_ClockConfig+0x2c2>
 800311a:	bf00      	nop
 800311c:	40022000 	.word	0x40022000
 8003120:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0304 	and.w	r3, r3, #4
 800312c:	2b00      	cmp	r3, #0
 800312e:	d008      	beq.n	8003142 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003130:	4b1d      	ldr	r3, [pc, #116]	@ (80031a8 <HAL_RCC_ClockConfig+0x2cc>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	491a      	ldr	r1, [pc, #104]	@ (80031a8 <HAL_RCC_ClockConfig+0x2cc>)
 800313e:	4313      	orrs	r3, r2
 8003140:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0308 	and.w	r3, r3, #8
 800314a:	2b00      	cmp	r3, #0
 800314c:	d009      	beq.n	8003162 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800314e:	4b16      	ldr	r3, [pc, #88]	@ (80031a8 <HAL_RCC_ClockConfig+0x2cc>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	4912      	ldr	r1, [pc, #72]	@ (80031a8 <HAL_RCC_ClockConfig+0x2cc>)
 800315e:	4313      	orrs	r3, r2
 8003160:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003162:	f000 f829 	bl	80031b8 <HAL_RCC_GetSysClockFreq>
 8003166:	4601      	mov	r1, r0
 8003168:	4b0f      	ldr	r3, [pc, #60]	@ (80031a8 <HAL_RCC_ClockConfig+0x2cc>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003170:	22f0      	movs	r2, #240	@ 0xf0
 8003172:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	fa92 f2a2 	rbit	r2, r2
 800317a:	60fa      	str	r2, [r7, #12]
  return result;
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	fab2 f282 	clz	r2, r2
 8003182:	b2d2      	uxtb	r2, r2
 8003184:	40d3      	lsrs	r3, r2
 8003186:	4a09      	ldr	r2, [pc, #36]	@ (80031ac <HAL_RCC_ClockConfig+0x2d0>)
 8003188:	5cd3      	ldrb	r3, [r2, r3]
 800318a:	fa21 f303 	lsr.w	r3, r1, r3
 800318e:	4a08      	ldr	r2, [pc, #32]	@ (80031b0 <HAL_RCC_ClockConfig+0x2d4>)
 8003190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003192:	4b08      	ldr	r3, [pc, #32]	@ (80031b4 <HAL_RCC_ClockConfig+0x2d8>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f7fe f956 	bl	8001448 <HAL_InitTick>
  
  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3778      	adds	r7, #120	@ 0x78
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40021000 	.word	0x40021000
 80031ac:	08004b0c 	.word	0x08004b0c
 80031b0:	20000028 	.word	0x20000028
 80031b4:	2000002c 	.word	0x2000002c

080031b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b087      	sub	sp, #28
 80031bc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031be:	2300      	movs	r3, #0
 80031c0:	60fb      	str	r3, [r7, #12]
 80031c2:	2300      	movs	r3, #0
 80031c4:	60bb      	str	r3, [r7, #8]
 80031c6:	2300      	movs	r3, #0
 80031c8:	617b      	str	r3, [r7, #20]
 80031ca:	2300      	movs	r3, #0
 80031cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80031ce:	2300      	movs	r3, #0
 80031d0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80031d2:	4b1e      	ldr	r3, [pc, #120]	@ (800324c <HAL_RCC_GetSysClockFreq+0x94>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f003 030c 	and.w	r3, r3, #12
 80031de:	2b04      	cmp	r3, #4
 80031e0:	d002      	beq.n	80031e8 <HAL_RCC_GetSysClockFreq+0x30>
 80031e2:	2b08      	cmp	r3, #8
 80031e4:	d003      	beq.n	80031ee <HAL_RCC_GetSysClockFreq+0x36>
 80031e6:	e026      	b.n	8003236 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031e8:	4b19      	ldr	r3, [pc, #100]	@ (8003250 <HAL_RCC_GetSysClockFreq+0x98>)
 80031ea:	613b      	str	r3, [r7, #16]
      break;
 80031ec:	e026      	b.n	800323c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	0c9b      	lsrs	r3, r3, #18
 80031f2:	f003 030f 	and.w	r3, r3, #15
 80031f6:	4a17      	ldr	r2, [pc, #92]	@ (8003254 <HAL_RCC_GetSysClockFreq+0x9c>)
 80031f8:	5cd3      	ldrb	r3, [r2, r3]
 80031fa:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80031fc:	4b13      	ldr	r3, [pc, #76]	@ (800324c <HAL_RCC_GetSysClockFreq+0x94>)
 80031fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003200:	f003 030f 	and.w	r3, r3, #15
 8003204:	4a14      	ldr	r2, [pc, #80]	@ (8003258 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003206:	5cd3      	ldrb	r3, [r2, r3]
 8003208:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d008      	beq.n	8003226 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003214:	4a0e      	ldr	r2, [pc, #56]	@ (8003250 <HAL_RCC_GetSysClockFreq+0x98>)
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	fbb2 f2f3 	udiv	r2, r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	fb02 f303 	mul.w	r3, r2, r3
 8003222:	617b      	str	r3, [r7, #20]
 8003224:	e004      	b.n	8003230 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a0c      	ldr	r2, [pc, #48]	@ (800325c <HAL_RCC_GetSysClockFreq+0xa4>)
 800322a:	fb02 f303 	mul.w	r3, r2, r3
 800322e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	613b      	str	r3, [r7, #16]
      break;
 8003234:	e002      	b.n	800323c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003236:	4b06      	ldr	r3, [pc, #24]	@ (8003250 <HAL_RCC_GetSysClockFreq+0x98>)
 8003238:	613b      	str	r3, [r7, #16]
      break;
 800323a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800323c:	693b      	ldr	r3, [r7, #16]
}
 800323e:	4618      	mov	r0, r3
 8003240:	371c      	adds	r7, #28
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	40021000 	.word	0x40021000
 8003250:	007a1200 	.word	0x007a1200
 8003254:	08004b24 	.word	0x08004b24
 8003258:	08004b34 	.word	0x08004b34
 800325c:	003d0900 	.word	0x003d0900

08003260 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003264:	4b03      	ldr	r3, [pc, #12]	@ (8003274 <HAL_RCC_GetHCLKFreq+0x14>)
 8003266:	681b      	ldr	r3, [r3, #0]
}
 8003268:	4618      	mov	r0, r3
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	20000028 	.word	0x20000028

08003278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800327e:	f7ff ffef 	bl	8003260 <HAL_RCC_GetHCLKFreq>
 8003282:	4601      	mov	r1, r0
 8003284:	4b0b      	ldr	r3, [pc, #44]	@ (80032b4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800328c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003290:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	fa92 f2a2 	rbit	r2, r2
 8003298:	603a      	str	r2, [r7, #0]
  return result;
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	fab2 f282 	clz	r2, r2
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	40d3      	lsrs	r3, r2
 80032a4:	4a04      	ldr	r2, [pc, #16]	@ (80032b8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80032a6:	5cd3      	ldrb	r3, [r2, r3]
 80032a8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80032ac:	4618      	mov	r0, r3
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40021000 	.word	0x40021000
 80032b8:	08004b1c 	.word	0x08004b1c

080032bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80032c2:	f7ff ffcd 	bl	8003260 <HAL_RCC_GetHCLKFreq>
 80032c6:	4601      	mov	r1, r0
 80032c8:	4b0b      	ldr	r3, [pc, #44]	@ (80032f8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80032d0:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80032d4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	fa92 f2a2 	rbit	r2, r2
 80032dc:	603a      	str	r2, [r7, #0]
  return result;
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	fab2 f282 	clz	r2, r2
 80032e4:	b2d2      	uxtb	r2, r2
 80032e6:	40d3      	lsrs	r3, r2
 80032e8:	4a04      	ldr	r2, [pc, #16]	@ (80032fc <HAL_RCC_GetPCLK2Freq+0x40>)
 80032ea:	5cd3      	ldrb	r3, [r2, r3]
 80032ec:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80032f0:	4618      	mov	r0, r3
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40021000 	.word	0x40021000
 80032fc:	08004b1c 	.word	0x08004b1c

08003300 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b092      	sub	sp, #72	@ 0x48
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003308:	2300      	movs	r3, #0
 800330a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800330c:	2300      	movs	r3, #0
 800330e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003310:	2300      	movs	r3, #0
 8003312:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 80cb 	beq.w	80034ba <HAL_RCCEx_PeriphCLKConfig+0x1ba>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003324:	4b85      	ldr	r3, [pc, #532]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003326:	69db      	ldr	r3, [r3, #28]
 8003328:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10e      	bne.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003330:	4b82      	ldr	r3, [pc, #520]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003332:	69db      	ldr	r3, [r3, #28]
 8003334:	4a81      	ldr	r2, [pc, #516]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003336:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800333a:	61d3      	str	r3, [r2, #28]
 800333c:	4b7f      	ldr	r3, [pc, #508]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003344:	60bb      	str	r3, [r7, #8]
 8003346:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003348:	2301      	movs	r3, #1
 800334a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800334e:	4b7c      	ldr	r3, [pc, #496]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003356:	2b00      	cmp	r3, #0
 8003358:	d118      	bne.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800335a:	4b79      	ldr	r3, [pc, #484]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a78      	ldr	r2, [pc, #480]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003360:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003364:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003366:	f7fe f8b3 	bl	80014d0 <HAL_GetTick>
 800336a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336c:	e008      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800336e:	f7fe f8af 	bl	80014d0 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b64      	cmp	r3, #100	@ 0x64
 800337a:	d901      	bls.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e0d9      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x234>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003380:	4b6f      	ldr	r3, [pc, #444]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0f0      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800338c:	4b6b      	ldr	r3, [pc, #428]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003394:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003396:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003398:	2b00      	cmp	r3, #0
 800339a:	d07b      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x194>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d074      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033aa:	4b64      	ldr	r3, [pc, #400]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80033b8:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033bc:	fa93 f3a3 	rbit	r3, r3
 80033c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80033c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033c4:	fab3 f383 	clz	r3, r3
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	461a      	mov	r2, r3
 80033cc:	4b5d      	ldr	r3, [pc, #372]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80033ce:	4413      	add	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	461a      	mov	r2, r3
 80033d4:	2301      	movs	r3, #1
 80033d6:	6013      	str	r3, [r2, #0]
 80033d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80033dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033e0:	fa93 f3a3 	rbit	r3, r3
 80033e4:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80033e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033e8:	fab3 f383 	clz	r3, r3
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	461a      	mov	r2, r3
 80033f0:	4b54      	ldr	r3, [pc, #336]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80033f2:	4413      	add	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	461a      	mov	r2, r3
 80033f8:	2300      	movs	r3, #0
 80033fa:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033fc:	4a4f      	ldr	r2, [pc, #316]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80033fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003400:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003402:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	d043      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340c:	f7fe f860 	bl	80014d0 <HAL_GetTick>
 8003410:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003412:	e00a      	b.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003414:	f7fe f85c 	bl	80014d0 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003422:	4293      	cmp	r3, r2
 8003424:	d901      	bls.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e084      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800342a:	2302      	movs	r3, #2
 800342c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003430:	fa93 f3a3 	rbit	r3, r3
 8003434:	627b      	str	r3, [r7, #36]	@ 0x24
 8003436:	2302      	movs	r3, #2
 8003438:	623b      	str	r3, [r7, #32]
 800343a:	6a3b      	ldr	r3, [r7, #32]
 800343c:	fa93 f3a3 	rbit	r3, r3
 8003440:	61fb      	str	r3, [r7, #28]
  return result;
 8003442:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003444:	fab3 f383 	clz	r3, r3
 8003448:	b2db      	uxtb	r3, r3
 800344a:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b00      	cmp	r3, #0
 8003452:	d102      	bne.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003454:	4b39      	ldr	r3, [pc, #228]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	e007      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x16a>
 800345a:	2302      	movs	r3, #2
 800345c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	fa93 f3a3 	rbit	r3, r3
 8003464:	617b      	str	r3, [r7, #20]
 8003466:	4b35      	ldr	r3, [pc, #212]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346a:	2202      	movs	r2, #2
 800346c:	613a      	str	r2, [r7, #16]
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	fa92 f2a2 	rbit	r2, r2
 8003474:	60fa      	str	r2, [r7, #12]
  return result;
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	fab2 f282 	clz	r2, r2
 800347c:	b2d2      	uxtb	r2, r2
 800347e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	f002 021f 	and.w	r2, r2, #31
 8003488:	2101      	movs	r1, #1
 800348a:	fa01 f202 	lsl.w	r2, r1, r2
 800348e:	4013      	ands	r3, r2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0bf      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003494:	4b29      	ldr	r3, [pc, #164]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	4926      	ldr	r1, [pc, #152]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034a6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d105      	bne.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ae:	4b23      	ldr	r3, [pc, #140]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	4a22      	ldr	r2, [pc, #136]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80034b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034b8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d008      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034c6:	4b1d      	ldr	r3, [pc, #116]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80034c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ca:	f023 0203 	bic.w	r2, r3, #3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	491a      	ldr	r1, [pc, #104]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0320 	and.w	r3, r3, #32
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d008      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034e4:	4b15      	ldr	r3, [pc, #84]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80034e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e8:	f023 0210 	bic.w	r2, r3, #16
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	4912      	ldr	r1, [pc, #72]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d008      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003502:	4b0e      	ldr	r3, [pc, #56]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003506:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	490b      	ldr	r1, [pc, #44]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003510:	4313      	orrs	r3, r2
 8003512:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d008      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003520:	4b06      	ldr	r3, [pc, #24]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003524:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	4903      	ldr	r1, [pc, #12]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800352e:	4313      	orrs	r3, r2
 8003530:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3748      	adds	r7, #72	@ 0x48
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40021000 	.word	0x40021000
 8003540:	40007000 	.word	0x40007000
 8003544:	10908100 	.word	0x10908100

08003548 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b08a      	sub	sp, #40	@ 0x28
 800354c:	af02      	add	r7, sp, #8
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	603b      	str	r3, [r7, #0]
 8003554:	4613      	mov	r3, r2
 8003556:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800355c:	2b20      	cmp	r3, #32
 800355e:	d177      	bne.n	8003650 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d002      	beq.n	800356c <HAL_UART_Transmit+0x24>
 8003566:	88fb      	ldrh	r3, [r7, #6]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e070      	b.n	8003652 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2221      	movs	r2, #33	@ 0x21
 800357c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800357e:	f7fd ffa7 	bl	80014d0 <HAL_GetTick>
 8003582:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	88fa      	ldrh	r2, [r7, #6]
 8003588:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	88fa      	ldrh	r2, [r7, #6]
 8003590:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800359c:	d108      	bne.n	80035b0 <HAL_UART_Transmit+0x68>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d104      	bne.n	80035b0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80035a6:	2300      	movs	r3, #0
 80035a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	61bb      	str	r3, [r7, #24]
 80035ae:	e003      	b.n	80035b8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035b4:	2300      	movs	r3, #0
 80035b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035b8:	e02f      	b.n	800361a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	2200      	movs	r2, #0
 80035c2:	2180      	movs	r1, #128	@ 0x80
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 fdcd 	bl	8004164 <UART_WaitOnFlagUntilTimeout>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d004      	beq.n	80035da <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2220      	movs	r2, #32
 80035d4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e03b      	b.n	8003652 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10b      	bne.n	80035f8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	881a      	ldrh	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035ec:	b292      	uxth	r2, r2
 80035ee:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	3302      	adds	r3, #2
 80035f4:	61bb      	str	r3, [r7, #24]
 80035f6:	e007      	b.n	8003608 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	781a      	ldrb	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	3301      	adds	r3, #1
 8003606:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800360e:	b29b      	uxth	r3, r3
 8003610:	3b01      	subs	r3, #1
 8003612:	b29a      	uxth	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003620:	b29b      	uxth	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1c9      	bne.n	80035ba <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	2200      	movs	r2, #0
 800362e:	2140      	movs	r1, #64	@ 0x40
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 fd97 	bl	8004164 <UART_WaitOnFlagUntilTimeout>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d004      	beq.n	8003646 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2220      	movs	r2, #32
 8003640:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e005      	b.n	8003652 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2220      	movs	r2, #32
 800364a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800364c:	2300      	movs	r3, #0
 800364e:	e000      	b.n	8003652 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003650:	2302      	movs	r3, #2
  }
}
 8003652:	4618      	mov	r0, r3
 8003654:	3720      	adds	r7, #32
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
	...

0800365c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b0ba      	sub	sp, #232	@ 0xe8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003682:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003686:	f640 030f 	movw	r3, #2063	@ 0x80f
 800368a:	4013      	ands	r3, r2
 800368c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003690:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003694:	2b00      	cmp	r3, #0
 8003696:	d115      	bne.n	80036c4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800369c:	f003 0320 	and.w	r3, r3, #32
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00f      	beq.n	80036c4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80036a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036a8:	f003 0320 	and.w	r3, r3, #32
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d009      	beq.n	80036c4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 82ab 	beq.w	8003c10 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	4798      	blx	r3
      }
      return;
 80036c2:	e2a5      	b.n	8003c10 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80036c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 8117 	beq.w	80038fc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80036ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d106      	bne.n	80036e8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80036da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80036de:	4b85      	ldr	r3, [pc, #532]	@ (80038f4 <HAL_UART_IRQHandler+0x298>)
 80036e0:	4013      	ands	r3, r2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 810a 	beq.w	80038fc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80036e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d011      	beq.n	8003718 <HAL_UART_IRQHandler+0xbc>
 80036f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00b      	beq.n	8003718 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2201      	movs	r2, #1
 8003706:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800370e:	f043 0201 	orr.w	r2, r3, #1
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d011      	beq.n	8003748 <HAL_UART_IRQHandler+0xec>
 8003724:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00b      	beq.n	8003748 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2202      	movs	r2, #2
 8003736:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800373e:	f043 0204 	orr.w	r2, r3, #4
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b00      	cmp	r3, #0
 8003752:	d011      	beq.n	8003778 <HAL_UART_IRQHandler+0x11c>
 8003754:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00b      	beq.n	8003778 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2204      	movs	r2, #4
 8003766:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800376e:	f043 0202 	orr.w	r2, r3, #2
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800377c:	f003 0308 	and.w	r3, r3, #8
 8003780:	2b00      	cmp	r3, #0
 8003782:	d017      	beq.n	80037b4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003788:	f003 0320 	and.w	r3, r3, #32
 800378c:	2b00      	cmp	r3, #0
 800378e:	d105      	bne.n	800379c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003790:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003794:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00b      	beq.n	80037b4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2208      	movs	r2, #8
 80037a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037aa:	f043 0208 	orr.w	r2, r3, #8
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80037b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d012      	beq.n	80037e6 <HAL_UART_IRQHandler+0x18a>
 80037c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00c      	beq.n	80037e6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80037d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037dc:	f043 0220 	orr.w	r2, r3, #32
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 8211 	beq.w	8003c14 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80037f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037f6:	f003 0320 	and.w	r3, r3, #32
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00d      	beq.n	800381a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80037fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003802:	f003 0320 	and.w	r3, r3, #32
 8003806:	2b00      	cmp	r3, #0
 8003808:	d007      	beq.n	800381a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003820:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800382e:	2b40      	cmp	r3, #64	@ 0x40
 8003830:	d005      	beq.n	800383e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003832:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003836:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800383a:	2b00      	cmp	r3, #0
 800383c:	d04f      	beq.n	80038de <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fdc4 	bl	80043cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800384e:	2b40      	cmp	r3, #64	@ 0x40
 8003850:	d141      	bne.n	80038d6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	3308      	adds	r3, #8
 8003858:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003860:	e853 3f00 	ldrex	r3, [r3]
 8003864:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003868:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800386c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003870:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	3308      	adds	r3, #8
 800387a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800387e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003882:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003886:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800388a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800388e:	e841 2300 	strex	r3, r2, [r1]
 8003892:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003896:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1d9      	bne.n	8003852 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d013      	beq.n	80038ce <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038aa:	4a13      	ldr	r2, [pc, #76]	@ (80038f8 <HAL_UART_IRQHandler+0x29c>)
 80038ac:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fe f831 	bl	800191a <HAL_DMA_Abort_IT>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d017      	beq.n	80038ee <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80038c8:	4610      	mov	r0, r2
 80038ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038cc:	e00f      	b.n	80038ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7fd fd58 	bl	8001384 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d4:	e00b      	b.n	80038ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7fd fd54 	bl	8001384 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038dc:	e007      	b.n	80038ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7fd fd50 	bl	8001384 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80038ec:	e192      	b.n	8003c14 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ee:	bf00      	nop
    return;
 80038f0:	e190      	b.n	8003c14 <HAL_UART_IRQHandler+0x5b8>
 80038f2:	bf00      	nop
 80038f4:	04000120 	.word	0x04000120
 80038f8:	08004677 	.word	0x08004677

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003900:	2b01      	cmp	r3, #1
 8003902:	f040 814b 	bne.w	8003b9c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800390a:	f003 0310 	and.w	r3, r3, #16
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 8144 	beq.w	8003b9c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003918:	f003 0310 	and.w	r3, r3, #16
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 813d 	beq.w	8003b9c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2210      	movs	r2, #16
 8003928:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003934:	2b40      	cmp	r3, #64	@ 0x40
 8003936:	f040 80b5 	bne.w	8003aa4 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003946:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 8164 	beq.w	8003c18 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003956:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800395a:	429a      	cmp	r2, r3
 800395c:	f080 815c 	bcs.w	8003c18 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003966:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	2b20      	cmp	r3, #32
 8003972:	f000 8086 	beq.w	8003a82 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003982:	e853 3f00 	ldrex	r3, [r3]
 8003986:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800398a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800398e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003992:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	461a      	mov	r2, r3
 800399c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80039a0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80039a4:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80039ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80039b0:	e841 2300 	strex	r3, r2, [r1]
 80039b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80039b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1da      	bne.n	8003976 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	3308      	adds	r3, #8
 80039c6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039ca:	e853 3f00 	ldrex	r3, [r3]
 80039ce:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80039d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039d2:	f023 0301 	bic.w	r3, r3, #1
 80039d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	3308      	adds	r3, #8
 80039e0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80039e4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80039e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ea:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80039ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80039f0:	e841 2300 	strex	r3, r2, [r1]
 80039f4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80039f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1e1      	bne.n	80039c0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	3308      	adds	r3, #8
 8003a02:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a06:	e853 3f00 	ldrex	r3, [r3]
 8003a0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003a0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	3308      	adds	r3, #8
 8003a1c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003a20:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a22:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a24:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003a26:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a28:	e841 2300 	strex	r3, r2, [r1]
 8003a2c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003a2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1e3      	bne.n	80039fc <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2220      	movs	r2, #32
 8003a38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a4a:	e853 3f00 	ldrex	r3, [r3]
 8003a4e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a52:	f023 0310 	bic.w	r3, r3, #16
 8003a56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a64:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a66:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a68:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a6a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a6c:	e841 2300 	strex	r3, r2, [r1]
 8003a70:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003a72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1e4      	bne.n	8003a42 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7fd ff0e 	bl	800189e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2202      	movs	r2, #2
 8003a86:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f7fd fc3d 	bl	800131c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003aa2:	e0b9      	b.n	8003c18 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 80ab 	beq.w	8003c1c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003ac6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 80a6 	beq.w	8003c1c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ad8:	e853 3f00 	ldrex	r3, [r3]
 8003adc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ae0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ae4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	461a      	mov	r2, r3
 8003aee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003af2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003af4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003af8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003afa:	e841 2300 	strex	r3, r2, [r1]
 8003afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1e4      	bne.n	8003ad0 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	3308      	adds	r3, #8
 8003b0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b10:	e853 3f00 	ldrex	r3, [r3]
 8003b14:	623b      	str	r3, [r7, #32]
   return(result);
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	f023 0301 	bic.w	r3, r3, #1
 8003b1c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	3308      	adds	r3, #8
 8003b26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b2a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b32:	e841 2300 	strex	r3, r2, [r1]
 8003b36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1e3      	bne.n	8003b06 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2220      	movs	r2, #32
 8003b42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	e853 3f00 	ldrex	r3, [r3]
 8003b5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f023 0310 	bic.w	r3, r3, #16
 8003b66:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b74:	61fb      	str	r3, [r7, #28]
 8003b76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b78:	69b9      	ldr	r1, [r7, #24]
 8003b7a:	69fa      	ldr	r2, [r7, #28]
 8003b7c:	e841 2300 	strex	r3, r2, [r1]
 8003b80:	617b      	str	r3, [r7, #20]
   return(result);
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1e4      	bne.n	8003b52 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b92:	4619      	mov	r1, r3
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f7fd fbc1 	bl	800131c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b9a:	e03f      	b.n	8003c1c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ba0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00e      	beq.n	8003bc6 <HAL_UART_IRQHandler+0x56a>
 8003ba8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d008      	beq.n	8003bc6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003bbc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 fe00 	bl	80047c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003bc4:	e02d      	b.n	8003c22 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00e      	beq.n	8003bf0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003bd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d008      	beq.n	8003bf0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d01c      	beq.n	8003c20 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	4798      	blx	r3
    }
    return;
 8003bee:	e017      	b.n	8003c20 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d012      	beq.n	8003c22 <HAL_UART_IRQHandler+0x5c6>
 8003bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00c      	beq.n	8003c22 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 fd4a 	bl	80046a2 <UART_EndTransmit_IT>
    return;
 8003c0e:	e008      	b.n	8003c22 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003c10:	bf00      	nop
 8003c12:	e006      	b.n	8003c22 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003c14:	bf00      	nop
 8003c16:	e004      	b.n	8003c22 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003c18:	bf00      	nop
 8003c1a:	e002      	b.n	8003c22 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003c1c:	bf00      	nop
 8003c1e:	e000      	b.n	8003c22 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003c20:	bf00      	nop
  }

}
 8003c22:	37e8      	adds	r7, #232	@ 0xe8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b088      	sub	sp, #32
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	69db      	ldr	r3, [r3, #28]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	4b8a      	ldr	r3, [pc, #552]	@ (8003eb8 <UART_SetConfig+0x254>)
 8003c90:	4013      	ands	r3, r2
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6812      	ldr	r2, [r2, #0]
 8003c96:	6979      	ldr	r1, [r7, #20]
 8003c98:	430b      	orrs	r3, r1
 8003c9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68da      	ldr	r2, [r3, #12]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a78      	ldr	r2, [pc, #480]	@ (8003ebc <UART_SetConfig+0x258>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d120      	bne.n	8003d22 <UART_SetConfig+0xbe>
 8003ce0:	4b77      	ldr	r3, [pc, #476]	@ (8003ec0 <UART_SetConfig+0x25c>)
 8003ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce4:	f003 0303 	and.w	r3, r3, #3
 8003ce8:	2b03      	cmp	r3, #3
 8003cea:	d817      	bhi.n	8003d1c <UART_SetConfig+0xb8>
 8003cec:	a201      	add	r2, pc, #4	@ (adr r2, 8003cf4 <UART_SetConfig+0x90>)
 8003cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf2:	bf00      	nop
 8003cf4:	08003d05 	.word	0x08003d05
 8003cf8:	08003d11 	.word	0x08003d11
 8003cfc:	08003d17 	.word	0x08003d17
 8003d00:	08003d0b 	.word	0x08003d0b
 8003d04:	2300      	movs	r3, #0
 8003d06:	77fb      	strb	r3, [r7, #31]
 8003d08:	e01d      	b.n	8003d46 <UART_SetConfig+0xe2>
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	77fb      	strb	r3, [r7, #31]
 8003d0e:	e01a      	b.n	8003d46 <UART_SetConfig+0xe2>
 8003d10:	2304      	movs	r3, #4
 8003d12:	77fb      	strb	r3, [r7, #31]
 8003d14:	e017      	b.n	8003d46 <UART_SetConfig+0xe2>
 8003d16:	2308      	movs	r3, #8
 8003d18:	77fb      	strb	r3, [r7, #31]
 8003d1a:	e014      	b.n	8003d46 <UART_SetConfig+0xe2>
 8003d1c:	2310      	movs	r3, #16
 8003d1e:	77fb      	strb	r3, [r7, #31]
 8003d20:	e011      	b.n	8003d46 <UART_SetConfig+0xe2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a67      	ldr	r2, [pc, #412]	@ (8003ec4 <UART_SetConfig+0x260>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d102      	bne.n	8003d32 <UART_SetConfig+0xce>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	77fb      	strb	r3, [r7, #31]
 8003d30:	e009      	b.n	8003d46 <UART_SetConfig+0xe2>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a64      	ldr	r2, [pc, #400]	@ (8003ec8 <UART_SetConfig+0x264>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d102      	bne.n	8003d42 <UART_SetConfig+0xde>
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	77fb      	strb	r3, [r7, #31]
 8003d40:	e001      	b.n	8003d46 <UART_SetConfig+0xe2>
 8003d42:	2310      	movs	r3, #16
 8003d44:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d4e:	d15a      	bne.n	8003e06 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003d50:	7ffb      	ldrb	r3, [r7, #31]
 8003d52:	2b08      	cmp	r3, #8
 8003d54:	d827      	bhi.n	8003da6 <UART_SetConfig+0x142>
 8003d56:	a201      	add	r2, pc, #4	@ (adr r2, 8003d5c <UART_SetConfig+0xf8>)
 8003d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5c:	08003d81 	.word	0x08003d81
 8003d60:	08003d89 	.word	0x08003d89
 8003d64:	08003d91 	.word	0x08003d91
 8003d68:	08003da7 	.word	0x08003da7
 8003d6c:	08003d97 	.word	0x08003d97
 8003d70:	08003da7 	.word	0x08003da7
 8003d74:	08003da7 	.word	0x08003da7
 8003d78:	08003da7 	.word	0x08003da7
 8003d7c:	08003d9f 	.word	0x08003d9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d80:	f7ff fa7a 	bl	8003278 <HAL_RCC_GetPCLK1Freq>
 8003d84:	61b8      	str	r0, [r7, #24]
        break;
 8003d86:	e013      	b.n	8003db0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d88:	f7ff fa98 	bl	80032bc <HAL_RCC_GetPCLK2Freq>
 8003d8c:	61b8      	str	r0, [r7, #24]
        break;
 8003d8e:	e00f      	b.n	8003db0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d90:	4b4e      	ldr	r3, [pc, #312]	@ (8003ecc <UART_SetConfig+0x268>)
 8003d92:	61bb      	str	r3, [r7, #24]
        break;
 8003d94:	e00c      	b.n	8003db0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d96:	f7ff fa0f 	bl	80031b8 <HAL_RCC_GetSysClockFreq>
 8003d9a:	61b8      	str	r0, [r7, #24]
        break;
 8003d9c:	e008      	b.n	8003db0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003da2:	61bb      	str	r3, [r7, #24]
        break;
 8003da4:	e004      	b.n	8003db0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003da6:	2300      	movs	r3, #0
 8003da8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	77bb      	strb	r3, [r7, #30]
        break;
 8003dae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d074      	beq.n	8003ea0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	005a      	lsls	r2, r3, #1
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	085b      	lsrs	r3, r3, #1
 8003dc0:	441a      	add	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	2b0f      	cmp	r3, #15
 8003dd0:	d916      	bls.n	8003e00 <UART_SetConfig+0x19c>
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dd8:	d212      	bcs.n	8003e00 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	f023 030f 	bic.w	r3, r3, #15
 8003de2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	085b      	lsrs	r3, r3, #1
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	89fb      	ldrh	r3, [r7, #14]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	89fa      	ldrh	r2, [r7, #14]
 8003dfc:	60da      	str	r2, [r3, #12]
 8003dfe:	e04f      	b.n	8003ea0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	77bb      	strb	r3, [r7, #30]
 8003e04:	e04c      	b.n	8003ea0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e06:	7ffb      	ldrb	r3, [r7, #31]
 8003e08:	2b08      	cmp	r3, #8
 8003e0a:	d828      	bhi.n	8003e5e <UART_SetConfig+0x1fa>
 8003e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e14 <UART_SetConfig+0x1b0>)
 8003e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e12:	bf00      	nop
 8003e14:	08003e39 	.word	0x08003e39
 8003e18:	08003e41 	.word	0x08003e41
 8003e1c:	08003e49 	.word	0x08003e49
 8003e20:	08003e5f 	.word	0x08003e5f
 8003e24:	08003e4f 	.word	0x08003e4f
 8003e28:	08003e5f 	.word	0x08003e5f
 8003e2c:	08003e5f 	.word	0x08003e5f
 8003e30:	08003e5f 	.word	0x08003e5f
 8003e34:	08003e57 	.word	0x08003e57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e38:	f7ff fa1e 	bl	8003278 <HAL_RCC_GetPCLK1Freq>
 8003e3c:	61b8      	str	r0, [r7, #24]
        break;
 8003e3e:	e013      	b.n	8003e68 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e40:	f7ff fa3c 	bl	80032bc <HAL_RCC_GetPCLK2Freq>
 8003e44:	61b8      	str	r0, [r7, #24]
        break;
 8003e46:	e00f      	b.n	8003e68 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e48:	4b20      	ldr	r3, [pc, #128]	@ (8003ecc <UART_SetConfig+0x268>)
 8003e4a:	61bb      	str	r3, [r7, #24]
        break;
 8003e4c:	e00c      	b.n	8003e68 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e4e:	f7ff f9b3 	bl	80031b8 <HAL_RCC_GetSysClockFreq>
 8003e52:	61b8      	str	r0, [r7, #24]
        break;
 8003e54:	e008      	b.n	8003e68 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e5a:	61bb      	str	r3, [r7, #24]
        break;
 8003e5c:	e004      	b.n	8003e68 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	77bb      	strb	r3, [r7, #30]
        break;
 8003e66:	bf00      	nop
    }

    if (pclk != 0U)
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d018      	beq.n	8003ea0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	085a      	lsrs	r2, r3, #1
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	441a      	add	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e80:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	2b0f      	cmp	r3, #15
 8003e86:	d909      	bls.n	8003e9c <UART_SetConfig+0x238>
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e8e:	d205      	bcs.n	8003e9c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	60da      	str	r2, [r3, #12]
 8003e9a:	e001      	b.n	8003ea0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003eac:	7fbb      	ldrb	r3, [r7, #30]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3720      	adds	r7, #32
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	efff69f3 	.word	0xefff69f3
 8003ebc:	40013800 	.word	0x40013800
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	40004400 	.word	0x40004400
 8003ec8:	40004800 	.word	0x40004800
 8003ecc:	007a1200 	.word	0x007a1200

08003ed0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003edc:	f003 0308 	and.w	r3, r3, #8
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00a      	beq.n	8003efa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00a      	beq.n	8003f3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f42:	f003 0304 	and.w	r3, r3, #4
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f64:	f003 0310 	and.w	r3, r3, #16
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00a      	beq.n	8003f82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f86:	f003 0320 	and.w	r3, r3, #32
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00a      	beq.n	8003fa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d01a      	beq.n	8003fe6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fce:	d10a      	bne.n	8003fe6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00a      	beq.n	8004008 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	430a      	orrs	r2, r1
 8004006:	605a      	str	r2, [r3, #4]
  }
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b098      	sub	sp, #96	@ 0x60
 8004018:	af02      	add	r7, sp, #8
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004024:	f7fd fa54 	bl	80014d0 <HAL_GetTick>
 8004028:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0308 	and.w	r3, r3, #8
 8004034:	2b08      	cmp	r3, #8
 8004036:	d12e      	bne.n	8004096 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004038:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004040:	2200      	movs	r2, #0
 8004042:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f88c 	bl	8004164 <UART_WaitOnFlagUntilTimeout>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d021      	beq.n	8004096 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800405a:	e853 3f00 	ldrex	r3, [r3]
 800405e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004062:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004066:	653b      	str	r3, [r7, #80]	@ 0x50
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	461a      	mov	r2, r3
 800406e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004070:	647b      	str	r3, [r7, #68]	@ 0x44
 8004072:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004074:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004076:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004078:	e841 2300 	strex	r3, r2, [r1]
 800407c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800407e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1e6      	bne.n	8004052 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2220      	movs	r2, #32
 8004088:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e062      	b.n	800415c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	2b04      	cmp	r3, #4
 80040a2:	d149      	bne.n	8004138 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040ac:	2200      	movs	r2, #0
 80040ae:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f856 	bl	8004164 <UART_WaitOnFlagUntilTimeout>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d03c      	beq.n	8004138 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c6:	e853 3f00 	ldrex	r3, [r3]
 80040ca:	623b      	str	r3, [r7, #32]
   return(result);
 80040cc:	6a3b      	ldr	r3, [r7, #32]
 80040ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	461a      	mov	r2, r3
 80040da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80040de:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040e4:	e841 2300 	strex	r3, r2, [r1]
 80040e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1e6      	bne.n	80040be <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	3308      	adds	r3, #8
 80040f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	e853 3f00 	ldrex	r3, [r3]
 80040fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f023 0301 	bic.w	r3, r3, #1
 8004106:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	3308      	adds	r3, #8
 800410e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004110:	61fa      	str	r2, [r7, #28]
 8004112:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004114:	69b9      	ldr	r1, [r7, #24]
 8004116:	69fa      	ldr	r2, [r7, #28]
 8004118:	e841 2300 	strex	r3, r2, [r1]
 800411c:	617b      	str	r3, [r7, #20]
   return(result);
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1e5      	bne.n	80040f0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2220      	movs	r2, #32
 8004128:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e011      	b.n	800415c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2220      	movs	r2, #32
 800413c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2220      	movs	r2, #32
 8004142:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3758      	adds	r7, #88	@ 0x58
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	603b      	str	r3, [r7, #0]
 8004170:	4613      	mov	r3, r2
 8004172:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004174:	e04f      	b.n	8004216 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417c:	d04b      	beq.n	8004216 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800417e:	f7fd f9a7 	bl	80014d0 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	429a      	cmp	r2, r3
 800418c:	d302      	bcc.n	8004194 <UART_WaitOnFlagUntilTimeout+0x30>
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d101      	bne.n	8004198 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e04e      	b.n	8004236 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0304 	and.w	r3, r3, #4
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d037      	beq.n	8004216 <UART_WaitOnFlagUntilTimeout+0xb2>
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	2b80      	cmp	r3, #128	@ 0x80
 80041aa:	d034      	beq.n	8004216 <UART_WaitOnFlagUntilTimeout+0xb2>
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2b40      	cmp	r3, #64	@ 0x40
 80041b0:	d031      	beq.n	8004216 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	f003 0308 	and.w	r3, r3, #8
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d110      	bne.n	80041e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2208      	movs	r2, #8
 80041c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f000 f8ff 	bl	80043cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2208      	movs	r2, #8
 80041d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e029      	b.n	8004236 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041f0:	d111      	bne.n	8004216 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80041fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 f8e5 	bl	80043cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2220      	movs	r2, #32
 8004206:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e00f      	b.n	8004236 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	69da      	ldr	r2, [r3, #28]
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	4013      	ands	r3, r2
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	429a      	cmp	r2, r3
 8004224:	bf0c      	ite	eq
 8004226:	2301      	moveq	r3, #1
 8004228:	2300      	movne	r3, #0
 800422a:	b2db      	uxtb	r3, r3
 800422c:	461a      	mov	r2, r3
 800422e:	79fb      	ldrb	r3, [r7, #7]
 8004230:	429a      	cmp	r2, r3
 8004232:	d0a0      	beq.n	8004176 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
	...

08004240 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b096      	sub	sp, #88	@ 0x58
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	4613      	mov	r3, r2
 800424c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	88fa      	ldrh	r2, [r7, #6]
 8004258:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2222      	movs	r2, #34	@ 0x22
 8004268:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004270:	2b00      	cmp	r3, #0
 8004272:	d028      	beq.n	80042c6 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004278:	4a3e      	ldr	r2, [pc, #248]	@ (8004374 <UART_Start_Receive_DMA+0x134>)
 800427a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004280:	4a3d      	ldr	r2, [pc, #244]	@ (8004378 <UART_Start_Receive_DMA+0x138>)
 8004282:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004288:	4a3c      	ldr	r2, [pc, #240]	@ (800437c <UART_Start_Receive_DMA+0x13c>)
 800428a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004290:	2200      	movs	r2, #0
 8004292:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	3324      	adds	r3, #36	@ 0x24
 800429e:	4619      	mov	r1, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042a4:	461a      	mov	r2, r3
 80042a6:	88fb      	ldrh	r3, [r7, #6]
 80042a8:	f7fd fa9a 	bl	80017e0 <HAL_DMA_Start_IT>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d009      	beq.n	80042c6 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2210      	movs	r2, #16
 80042b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2220      	movs	r2, #32
 80042be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e051      	b.n	800436a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d018      	beq.n	8004300 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042d6:	e853 3f00 	ldrex	r3, [r3]
 80042da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	461a      	mov	r2, r3
 80042ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042ee:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80042f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042f4:	e841 2300 	strex	r3, r2, [r1]
 80042f8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80042fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1e6      	bne.n	80042ce <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	3308      	adds	r3, #8
 8004306:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800430a:	e853 3f00 	ldrex	r3, [r3]
 800430e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004312:	f043 0301 	orr.w	r3, r3, #1
 8004316:	653b      	str	r3, [r7, #80]	@ 0x50
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	3308      	adds	r3, #8
 800431e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004320:	637a      	str	r2, [r7, #52]	@ 0x34
 8004322:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004324:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004326:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004328:	e841 2300 	strex	r3, r2, [r1]
 800432c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800432e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1e5      	bne.n	8004300 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3308      	adds	r3, #8
 800433a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	e853 3f00 	ldrex	r3, [r3]
 8004342:	613b      	str	r3, [r7, #16]
   return(result);
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800434a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	3308      	adds	r3, #8
 8004352:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004354:	623a      	str	r2, [r7, #32]
 8004356:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004358:	69f9      	ldr	r1, [r7, #28]
 800435a:	6a3a      	ldr	r2, [r7, #32]
 800435c:	e841 2300 	strex	r3, r2, [r1]
 8004360:	61bb      	str	r3, [r7, #24]
   return(result);
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1e5      	bne.n	8004334 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3758      	adds	r7, #88	@ 0x58
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	08004495 	.word	0x08004495
 8004378:	080045bb 	.word	0x080045bb
 800437c:	080045f9 	.word	0x080045f9

08004380 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004380:	b480      	push	{r7}
 8004382:	b089      	sub	sp, #36	@ 0x24
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	e853 3f00 	ldrex	r3, [r3]
 8004394:	60bb      	str	r3, [r7, #8]
   return(result);
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800439c:	61fb      	str	r3, [r7, #28]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	461a      	mov	r2, r3
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	61bb      	str	r3, [r7, #24]
 80043a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043aa:	6979      	ldr	r1, [r7, #20]
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	e841 2300 	strex	r3, r2, [r1]
 80043b2:	613b      	str	r3, [r7, #16]
   return(result);
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1e6      	bne.n	8004388 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2220      	movs	r2, #32
 80043be:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80043c0:	bf00      	nop
 80043c2:	3724      	adds	r7, #36	@ 0x24
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b095      	sub	sp, #84	@ 0x54
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043dc:	e853 3f00 	ldrex	r3, [r3]
 80043e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	461a      	mov	r2, r3
 80043f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80043f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043fa:	e841 2300 	strex	r3, r2, [r1]
 80043fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1e6      	bne.n	80043d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	3308      	adds	r3, #8
 800440c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440e:	6a3b      	ldr	r3, [r7, #32]
 8004410:	e853 3f00 	ldrex	r3, [r3]
 8004414:	61fb      	str	r3, [r7, #28]
   return(result);
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	f023 0301 	bic.w	r3, r3, #1
 800441c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	3308      	adds	r3, #8
 8004424:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004426:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004428:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800442c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800442e:	e841 2300 	strex	r3, r2, [r1]
 8004432:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1e5      	bne.n	8004406 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800443e:	2b01      	cmp	r3, #1
 8004440:	d118      	bne.n	8004474 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	e853 3f00 	ldrex	r3, [r3]
 800444e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	f023 0310 	bic.w	r3, r3, #16
 8004456:	647b      	str	r3, [r7, #68]	@ 0x44
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	461a      	mov	r2, r3
 800445e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004460:	61bb      	str	r3, [r7, #24]
 8004462:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004464:	6979      	ldr	r1, [r7, #20]
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	e841 2300 	strex	r3, r2, [r1]
 800446c:	613b      	str	r3, [r7, #16]
   return(result);
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1e6      	bne.n	8004442 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2220      	movs	r2, #32
 8004478:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004488:	bf00      	nop
 800448a:	3754      	adds	r7, #84	@ 0x54
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b09c      	sub	sp, #112	@ 0x70
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	2b20      	cmp	r3, #32
 80044a8:	d071      	beq.n	800458e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80044aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044ac:	2200      	movs	r2, #0
 80044ae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044ba:	e853 3f00 	ldrex	r3, [r3]
 80044be:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80044c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044c6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	461a      	mov	r2, r3
 80044ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80044d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80044d2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80044d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80044d8:	e841 2300 	strex	r3, r2, [r1]
 80044dc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80044de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1e6      	bne.n	80044b2 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	3308      	adds	r3, #8
 80044ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ee:	e853 3f00 	ldrex	r3, [r3]
 80044f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80044f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044f6:	f023 0301 	bic.w	r3, r3, #1
 80044fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80044fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	3308      	adds	r3, #8
 8004502:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004504:	647a      	str	r2, [r7, #68]	@ 0x44
 8004506:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004508:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800450a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800450c:	e841 2300 	strex	r3, r2, [r1]
 8004510:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1e5      	bne.n	80044e4 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004518:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3308      	adds	r3, #8
 800451e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004522:	e853 3f00 	ldrex	r3, [r3]
 8004526:	623b      	str	r3, [r7, #32]
   return(result);
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800452e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004530:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	3308      	adds	r3, #8
 8004536:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004538:	633a      	str	r2, [r7, #48]	@ 0x30
 800453a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800453e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004540:	e841 2300 	strex	r3, r2, [r1]
 8004544:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1e5      	bne.n	8004518 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800454c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800454e:	2220      	movs	r2, #32
 8004550:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004554:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004556:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004558:	2b01      	cmp	r3, #1
 800455a:	d118      	bne.n	800458e <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800455c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	e853 3f00 	ldrex	r3, [r3]
 8004568:	60fb      	str	r3, [r7, #12]
   return(result);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f023 0310 	bic.w	r3, r3, #16
 8004570:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004572:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	461a      	mov	r2, r3
 8004578:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800457a:	61fb      	str	r3, [r7, #28]
 800457c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457e:	69b9      	ldr	r1, [r7, #24]
 8004580:	69fa      	ldr	r2, [r7, #28]
 8004582:	e841 2300 	strex	r3, r2, [r1]
 8004586:	617b      	str	r3, [r7, #20]
   return(result);
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1e6      	bne.n	800455c <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800458e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004590:	2200      	movs	r2, #0
 8004592:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004594:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004596:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004598:	2b01      	cmp	r3, #1
 800459a:	d107      	bne.n	80045ac <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800459c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800459e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80045a2:	4619      	mov	r1, r3
 80045a4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80045a6:	f7fc feb9 	bl	800131c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045aa:	e002      	b.n	80045b2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80045ac:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80045ae:	f7ff fb45 	bl	8003c3c <HAL_UART_RxCpltCallback>
}
 80045b2:	bf00      	nop
 80045b4:	3770      	adds	r7, #112	@ 0x70
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b084      	sub	sp, #16
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2201      	movs	r2, #1
 80045cc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d109      	bne.n	80045ea <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80045dc:	085b      	lsrs	r3, r3, #1
 80045de:	b29b      	uxth	r3, r3
 80045e0:	4619      	mov	r1, r3
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f7fc fe9a 	bl	800131c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045e8:	e002      	b.n	80045f0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f7ff fb30 	bl	8003c50 <HAL_UART_RxHalfCpltCallback>
}
 80045f0:	bf00      	nop
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004604:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800460a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004612:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800461e:	2b80      	cmp	r3, #128	@ 0x80
 8004620:	d109      	bne.n	8004636 <UART_DMAError+0x3e>
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	2b21      	cmp	r3, #33	@ 0x21
 8004626:	d106      	bne.n	8004636 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	2200      	movs	r2, #0
 800462c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8004630:	6978      	ldr	r0, [r7, #20]
 8004632:	f7ff fea5 	bl	8004380 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004640:	2b40      	cmp	r3, #64	@ 0x40
 8004642:	d109      	bne.n	8004658 <UART_DMAError+0x60>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2b22      	cmp	r3, #34	@ 0x22
 8004648:	d106      	bne.n	8004658 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	2200      	movs	r2, #0
 800464e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8004652:	6978      	ldr	r0, [r7, #20]
 8004654:	f7ff feba 	bl	80043cc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800465e:	f043 0210 	orr.w	r2, r3, #16
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004668:	6978      	ldr	r0, [r7, #20]
 800466a:	f7fc fe8b 	bl	8001384 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800466e:	bf00      	nop
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b084      	sub	sp, #16
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004682:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f7fc fe75 	bl	8001384 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800469a:	bf00      	nop
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b088      	sub	sp, #32
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	e853 3f00 	ldrex	r3, [r3]
 80046b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046be:	61fb      	str	r3, [r7, #28]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	461a      	mov	r2, r3
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	61bb      	str	r3, [r7, #24]
 80046ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046cc:	6979      	ldr	r1, [r7, #20]
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	e841 2300 	strex	r3, r2, [r1]
 80046d4:	613b      	str	r3, [r7, #16]
   return(result);
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1e6      	bne.n	80046aa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2220      	movs	r2, #32
 80046e0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f7ff fa9d 	bl	8003c28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046ee:	bf00      	nop
 80046f0:	3720      	adds	r7, #32
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b086      	sub	sp, #24
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	60f8      	str	r0, [r7, #12]
 80046fe:	60b9      	str	r1, [r7, #8]
 8004700:	607a      	str	r2, [r7, #4]
 8004702:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e056      	b.n	80047bc <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004712:	2b00      	cmp	r3, #0
 8004714:	d106      	bne.n	8004724 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f7fc fcf4 	bl	800110c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2224      	movs	r2, #36	@ 0x24
 8004728:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 0201 	bic.w	r2, r2, #1
 8004738:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473e:	2b00      	cmp	r3, #0
 8004740:	d002      	beq.n	8004748 <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f7ff fbc4 	bl	8003ed0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f7ff fa8b 	bl	8003c64 <UART_SetConfig>
 800474e:	4603      	mov	r3, r0
 8004750:	2b01      	cmp	r3, #1
 8004752:	d101      	bne.n	8004758 <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e031      	b.n	80047bc <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689a      	ldr	r2, [r3, #8]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004766:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	430a      	orrs	r2, r1
 800477a:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	055b      	lsls	r3, r3, #21
 8004780:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	041b      	lsls	r3, r3, #16
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	4313      	orrs	r3, r2
 800478a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 8004796:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	6812      	ldr	r2, [r2, #0]
 800479e:	6979      	ldr	r1, [r7, #20]
 80047a0:	430b      	orrs	r3, r1
 80047a2:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f042 0201 	orr.w	r2, r2, #1
 80047b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f7ff fc2d 	bl	8004014 <UART_CheckIdleState>
 80047ba:	4603      	mov	r3, r0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3718      	adds	r7, #24
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b08c      	sub	sp, #48	@ 0x30
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	4613      	mov	r3, r2
 80047e4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047ec:	2b20      	cmp	r3, #32
 80047ee:	d142      	bne.n	8004876 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d002      	beq.n	80047fc <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80047f6:	88fb      	ldrh	r3, [r7, #6]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d101      	bne.n	8004800 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e03b      	b.n	8004878 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2201      	movs	r2, #1
 8004804:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800480c:	88fb      	ldrh	r3, [r7, #6]
 800480e:	461a      	mov	r2, r3
 8004810:	68b9      	ldr	r1, [r7, #8]
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f7ff fd14 	bl	8004240 <UART_Start_Receive_DMA>
 8004818:	4603      	mov	r3, r0
 800481a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800481e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004822:	2b00      	cmp	r3, #0
 8004824:	d124      	bne.n	8004870 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800482a:	2b01      	cmp	r3, #1
 800482c:	d11d      	bne.n	800486a <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2210      	movs	r2, #16
 8004834:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	e853 3f00 	ldrex	r3, [r3]
 8004842:	617b      	str	r3, [r7, #20]
   return(result);
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f043 0310 	orr.w	r3, r3, #16
 800484a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	461a      	mov	r2, r3
 8004852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004854:	627b      	str	r3, [r7, #36]	@ 0x24
 8004856:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004858:	6a39      	ldr	r1, [r7, #32]
 800485a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800485c:	e841 2300 	strex	r3, r2, [r1]
 8004860:	61fb      	str	r3, [r7, #28]
   return(result);
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1e6      	bne.n	8004836 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8004868:	e002      	b.n	8004870 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8004870:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004874:	e000      	b.n	8004878 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004876:	2302      	movs	r3, #2
  }
}
 8004878:	4618      	mov	r0, r3
 800487a:	3730      	adds	r7, #48	@ 0x30
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <memset>:
 8004880:	4402      	add	r2, r0
 8004882:	4603      	mov	r3, r0
 8004884:	4293      	cmp	r3, r2
 8004886:	d100      	bne.n	800488a <memset+0xa>
 8004888:	4770      	bx	lr
 800488a:	f803 1b01 	strb.w	r1, [r3], #1
 800488e:	e7f9      	b.n	8004884 <memset+0x4>

08004890 <__libc_init_array>:
 8004890:	b570      	push	{r4, r5, r6, lr}
 8004892:	4d0d      	ldr	r5, [pc, #52]	@ (80048c8 <__libc_init_array+0x38>)
 8004894:	4c0d      	ldr	r4, [pc, #52]	@ (80048cc <__libc_init_array+0x3c>)
 8004896:	1b64      	subs	r4, r4, r5
 8004898:	10a4      	asrs	r4, r4, #2
 800489a:	2600      	movs	r6, #0
 800489c:	42a6      	cmp	r6, r4
 800489e:	d109      	bne.n	80048b4 <__libc_init_array+0x24>
 80048a0:	4d0b      	ldr	r5, [pc, #44]	@ (80048d0 <__libc_init_array+0x40>)
 80048a2:	4c0c      	ldr	r4, [pc, #48]	@ (80048d4 <__libc_init_array+0x44>)
 80048a4:	f000 f826 	bl	80048f4 <_init>
 80048a8:	1b64      	subs	r4, r4, r5
 80048aa:	10a4      	asrs	r4, r4, #2
 80048ac:	2600      	movs	r6, #0
 80048ae:	42a6      	cmp	r6, r4
 80048b0:	d105      	bne.n	80048be <__libc_init_array+0x2e>
 80048b2:	bd70      	pop	{r4, r5, r6, pc}
 80048b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80048b8:	4798      	blx	r3
 80048ba:	3601      	adds	r6, #1
 80048bc:	e7ee      	b.n	800489c <__libc_init_array+0xc>
 80048be:	f855 3b04 	ldr.w	r3, [r5], #4
 80048c2:	4798      	blx	r3
 80048c4:	3601      	adds	r6, #1
 80048c6:	e7f2      	b.n	80048ae <__libc_init_array+0x1e>
 80048c8:	08004b44 	.word	0x08004b44
 80048cc:	08004b44 	.word	0x08004b44
 80048d0:	08004b44 	.word	0x08004b44
 80048d4:	08004b48 	.word	0x08004b48

080048d8 <memcpy>:
 80048d8:	440a      	add	r2, r1
 80048da:	4291      	cmp	r1, r2
 80048dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80048e0:	d100      	bne.n	80048e4 <memcpy+0xc>
 80048e2:	4770      	bx	lr
 80048e4:	b510      	push	{r4, lr}
 80048e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048ee:	4291      	cmp	r1, r2
 80048f0:	d1f9      	bne.n	80048e6 <memcpy+0xe>
 80048f2:	bd10      	pop	{r4, pc}

080048f4 <_init>:
 80048f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048f6:	bf00      	nop
 80048f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048fa:	bc08      	pop	{r3}
 80048fc:	469e      	mov	lr, r3
 80048fe:	4770      	bx	lr

08004900 <_fini>:
 8004900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004902:	bf00      	nop
 8004904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004906:	bc08      	pop	{r3}
 8004908:	469e      	mov	lr, r3
 800490a:	4770      	bx	lr
